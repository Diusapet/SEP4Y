
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000065c  00800200  0000770e  000077a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000770e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000286  0080085c  0080085c  00007dfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007dfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bc0  00000000  00000000  00007e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aa51  00000000  00000000  00008a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003312  00000000  00000000  000134ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000074d2  00000000  00000000  000167bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002688  00000000  00000000  0001dc94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fa7  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066f4  00000000  00000000  000242c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  0002a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	15 c1       	rjmp	.+554    	; 0x230 <__bad_interrupt>
       6:	00 00       	nop
       8:	13 c1       	rjmp	.+550    	; 0x230 <__bad_interrupt>
       a:	00 00       	nop
       c:	11 c1       	rjmp	.+546    	; 0x230 <__bad_interrupt>
       e:	00 00       	nop
      10:	0f c1       	rjmp	.+542    	; 0x230 <__bad_interrupt>
      12:	00 00       	nop
      14:	0d c1       	rjmp	.+538    	; 0x230 <__bad_interrupt>
      16:	00 00       	nop
      18:	0b c1       	rjmp	.+534    	; 0x230 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	09 c1       	rjmp	.+530    	; 0x230 <__bad_interrupt>
      1e:	00 00       	nop
      20:	07 c1       	rjmp	.+526    	; 0x230 <__bad_interrupt>
      22:	00 00       	nop
      24:	05 c1       	rjmp	.+522    	; 0x230 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c1       	rjmp	.+518    	; 0x230 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	01 c1       	rjmp	.+514    	; 0x230 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c6       	rjmp	.+3192   	; 0xcaa <__vector_12>
      32:	00 00       	nop
      34:	fd c0       	rjmp	.+506    	; 0x230 <__bad_interrupt>
      36:	00 00       	nop
      38:	fb c0       	rjmp	.+502    	; 0x230 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f9 c0       	rjmp	.+498    	; 0x230 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c0       	rjmp	.+494    	; 0x230 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c0       	rjmp	.+490    	; 0x230 <__bad_interrupt>
      46:	00 00       	nop
      48:	f3 c0       	rjmp	.+486    	; 0x230 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f1 c0       	rjmp	.+482    	; 0x230 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ef c0       	rjmp	.+478    	; 0x230 <__bad_interrupt>
      52:	00 00       	nop
      54:	ed c0       	rjmp	.+474    	; 0x230 <__bad_interrupt>
      56:	00 00       	nop
      58:	eb c0       	rjmp	.+470    	; 0x230 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e9 c0       	rjmp	.+466    	; 0x230 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c0       	rjmp	.+462    	; 0x230 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3c 29 	jmp	0x5278	; 0x5278 <__vector_25>
      68:	0c 94 8e 29 	jmp	0x531c	; 0x531c <__vector_26>
      6c:	e1 c0       	rjmp	.+450    	; 0x230 <__bad_interrupt>
      6e:	00 00       	nop
      70:	df c0       	rjmp	.+446    	; 0x230 <__bad_interrupt>
      72:	00 00       	nop
      74:	dd c0       	rjmp	.+442    	; 0x230 <__bad_interrupt>
      76:	00 00       	nop
      78:	db c0       	rjmp	.+438    	; 0x230 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d9 c0       	rjmp	.+434    	; 0x230 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d7 c0       	rjmp	.+430    	; 0x230 <__bad_interrupt>
      82:	00 00       	nop
      84:	d5 c0       	rjmp	.+426    	; 0x230 <__bad_interrupt>
      86:	00 00       	nop
      88:	d3 c0       	rjmp	.+422    	; 0x230 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 c0       	rjmp	.+418    	; 0x230 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__vector_36>
      94:	0c 94 24 2a 	jmp	0x5448	; 0x5448 <__vector_37>
      98:	cb c0       	rjmp	.+406    	; 0x230 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ec 33 	jmp	0x67d8	; 0x67d8 <__vector_39>
      a0:	c7 c0       	rjmp	.+398    	; 0x230 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c5 c0       	rjmp	.+394    	; 0x230 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c3 c0       	rjmp	.+390    	; 0x230 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c1 c0       	rjmp	.+386    	; 0x230 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bf c0       	rjmp	.+382    	; 0x230 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bd c0       	rjmp	.+378    	; 0x230 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bb c0       	rjmp	.+374    	; 0x230 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b9 c0       	rjmp	.+370    	; 0x230 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b7 c0       	rjmp	.+366    	; 0x230 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b5 c0       	rjmp	.+362    	; 0x230 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b3 c0       	rjmp	.+358    	; 0x230 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__vector_51>
      d0:	0c 94 ba 2a 	jmp	0x5574	; 0x5574 <__vector_52>
      d4:	ad c0       	rjmp	.+346    	; 0x230 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__vector_54>
      dc:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__vector_55>
      e0:	a7 c0       	rjmp	.+334    	; 0x230 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c9 20       	and	r12, r9
      e6:	c9 20       	and	r12, r9
      e8:	c9 20       	and	r12, r9
      ea:	14 21       	and	r17, r4
      ec:	20 21       	and	r18, r0
      ee:	46 21       	and	r20, r6
      f0:	c9 20       	and	r12, r9
      f2:	c9 20       	and	r12, r9
      f4:	14 21       	and	r17, r4
      f6:	20 21       	and	r18, r0
      f8:	0e 34       	cpi	r16, 0x4E	; 78
      fa:	7e 34       	cpi	r23, 0x4E	; 78
      fc:	7e 34       	cpi	r23, 0x4E	; 78
      fe:	7e 34       	cpi	r23, 0x4E	; 78
     100:	7e 34       	cpi	r23, 0x4E	; 78
     102:	7e 34       	cpi	r23, 0x4E	; 78
     104:	7e 34       	cpi	r23, 0x4E	; 78
     106:	7e 34       	cpi	r23, 0x4E	; 78
     108:	0e 34       	cpi	r16, 0x4E	; 78
     10a:	7e 34       	cpi	r23, 0x4E	; 78
     10c:	7e 34       	cpi	r23, 0x4E	; 78
     10e:	7e 34       	cpi	r23, 0x4E	; 78
     110:	7e 34       	cpi	r23, 0x4E	; 78
     112:	7e 34       	cpi	r23, 0x4E	; 78
     114:	7e 34       	cpi	r23, 0x4E	; 78
     116:	7e 34       	cpi	r23, 0x4E	; 78
     118:	10 34       	cpi	r17, 0x40	; 64
     11a:	7e 34       	cpi	r23, 0x4E	; 78
     11c:	7e 34       	cpi	r23, 0x4E	; 78
     11e:	7e 34       	cpi	r23, 0x4E	; 78
     120:	7e 34       	cpi	r23, 0x4E	; 78
     122:	7e 34       	cpi	r23, 0x4E	; 78
     124:	7e 34       	cpi	r23, 0x4E	; 78
     126:	7e 34       	cpi	r23, 0x4E	; 78
     128:	7e 34       	cpi	r23, 0x4E	; 78
     12a:	7e 34       	cpi	r23, 0x4E	; 78
     12c:	7e 34       	cpi	r23, 0x4E	; 78
     12e:	7e 34       	cpi	r23, 0x4E	; 78
     130:	7e 34       	cpi	r23, 0x4E	; 78
     132:	7e 34       	cpi	r23, 0x4E	; 78
     134:	7e 34       	cpi	r23, 0x4E	; 78
     136:	7e 34       	cpi	r23, 0x4E	; 78
     138:	10 34       	cpi	r17, 0x40	; 64
     13a:	7e 34       	cpi	r23, 0x4E	; 78
     13c:	7e 34       	cpi	r23, 0x4E	; 78
     13e:	7e 34       	cpi	r23, 0x4E	; 78
     140:	7e 34       	cpi	r23, 0x4E	; 78
     142:	7e 34       	cpi	r23, 0x4E	; 78
     144:	7e 34       	cpi	r23, 0x4E	; 78
     146:	7e 34       	cpi	r23, 0x4E	; 78
     148:	7e 34       	cpi	r23, 0x4E	; 78
     14a:	7e 34       	cpi	r23, 0x4E	; 78
     14c:	7e 34       	cpi	r23, 0x4E	; 78
     14e:	7e 34       	cpi	r23, 0x4E	; 78
     150:	7e 34       	cpi	r23, 0x4E	; 78
     152:	7e 34       	cpi	r23, 0x4E	; 78
     154:	7e 34       	cpi	r23, 0x4E	; 78
     156:	7e 34       	cpi	r23, 0x4E	; 78
     158:	7a 34       	cpi	r23, 0x4A	; 74
     15a:	7e 34       	cpi	r23, 0x4E	; 78
     15c:	7e 34       	cpi	r23, 0x4E	; 78
     15e:	7e 34       	cpi	r23, 0x4E	; 78
     160:	7e 34       	cpi	r23, 0x4E	; 78
     162:	7e 34       	cpi	r23, 0x4E	; 78
     164:	7e 34       	cpi	r23, 0x4E	; 78
     166:	7e 34       	cpi	r23, 0x4E	; 78
     168:	45 34       	cpi	r20, 0x45	; 69
     16a:	7e 34       	cpi	r23, 0x4E	; 78
     16c:	7e 34       	cpi	r23, 0x4E	; 78
     16e:	7e 34       	cpi	r23, 0x4E	; 78
     170:	7e 34       	cpi	r23, 0x4E	; 78
     172:	7e 34       	cpi	r23, 0x4E	; 78
     174:	7e 34       	cpi	r23, 0x4E	; 78
     176:	7e 34       	cpi	r23, 0x4E	; 78
     178:	7e 34       	cpi	r23, 0x4E	; 78
     17a:	7e 34       	cpi	r23, 0x4E	; 78
     17c:	7e 34       	cpi	r23, 0x4E	; 78
     17e:	7e 34       	cpi	r23, 0x4E	; 78
     180:	7e 34       	cpi	r23, 0x4E	; 78
     182:	7e 34       	cpi	r23, 0x4E	; 78
     184:	7e 34       	cpi	r23, 0x4E	; 78
     186:	7e 34       	cpi	r23, 0x4E	; 78
     188:	39 34       	cpi	r19, 0x49	; 73
     18a:	7e 34       	cpi	r23, 0x4E	; 78
     18c:	7e 34       	cpi	r23, 0x4E	; 78
     18e:	7e 34       	cpi	r23, 0x4E	; 78
     190:	7e 34       	cpi	r23, 0x4E	; 78
     192:	7e 34       	cpi	r23, 0x4E	; 78
     194:	7e 34       	cpi	r23, 0x4E	; 78
     196:	7e 34       	cpi	r23, 0x4E	; 78
     198:	5d 34       	cpi	r21, 0x4D	; 77

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	0e 94 1c 18 	call	0x3038	; 0x3038 <prvCheckTasksWaitingTermination>
     1ae:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <pxReadyTasksLists>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	08 f0       	brcs	.+2      	; 0x1b8 <prvIdleTask+0x1e>
     1b6:	8e d4       	rcall	.+2332   	; 0xad4 <vPortYield>
     1b8:	0e 94 4c 22 	call	0x4498	; 0x4498 <vApplicationIdleHook>
     1bc:	f6 cf       	rjmp	.-20     	; 0x1aa <prvIdleTask+0x10>

000001be <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <prvTimerTask+0x6>
     1c4:	1f 92       	push	r1
     1c6:	1f 92       	push	r1
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9d 83       	std	Y+5, r25	; 0x05
     1ce:	8c 83       	std	Y+4, r24	; 0x04
     1d0:	ce 01       	movw	r24, r28
     1d2:	03 96       	adiw	r24, 0x03	; 3
     1d4:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <prvGetNextExpireTime>
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	9a 81       	ldd	r25, Y+2	; 0x02
     1e2:	62 2f       	mov	r22, r18
     1e4:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <prvProcessTimerOrBlockTask>
     1e8:	0e 94 88 20 	call	0x4110	; 0x4110 <prvProcessReceivedCommands>
     1ec:	f1 cf       	rjmp	.-30     	; 0x1d0 <prvTimerTask+0x12>

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	00 e0       	ldi	r16, 0x00	; 0
     1fc:	0c bf       	out	0x3c, r16	; 60

000001fe <__do_copy_data>:
     1fe:	18 e0       	ldi	r17, 0x08	; 8
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	ee e0       	ldi	r30, 0x0E	; 14
     206:	f7 e7       	ldi	r31, 0x77	; 119
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0b bf       	out	0x3b, r16	; 59
     20c:	02 c0       	rjmp	.+4      	; 0x212 <__do_copy_data+0x14>
     20e:	07 90       	elpm	r0, Z+
     210:	0d 92       	st	X+, r0
     212:	ac 35       	cpi	r26, 0x5C	; 92
     214:	b1 07       	cpc	r27, r17
     216:	d9 f7       	brne	.-10     	; 0x20e <__do_copy_data+0x10>

00000218 <__do_clear_bss>:
     218:	2a e0       	ldi	r18, 0x0A	; 10
     21a:	ac e5       	ldi	r26, 0x5C	; 92
     21c:	b8 e0       	ldi	r27, 0x08	; 8
     21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
     220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
     222:	a2 3e       	cpi	r26, 0xE2	; 226
     224:	b2 07       	cpc	r27, r18
     226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>
     228:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <main>
     22c:	0c 94 85 3b 	jmp	0x770a	; 0x770a <_exit>

00000230 <__bad_interrupt>:
     230:	e7 ce       	rjmp	.-562    	; 0x0 <__vectors>

00000232 <measure_co2_callback>:

uint16_t co2_value;


void measure_co2_callback(uint16_t ppm)
{
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	1f 92       	push	r1
     238:	1f 92       	push	r1
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	89 83       	std	Y+1, r24	; 0x01
	co2_value = ppm;
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	9a 81       	ldd	r25, Y+2	; 0x02
     246:	90 93 b3 0a 	sts	0x0AB3, r25	; 0x800ab3 <co2_value+0x1>
     24a:	80 93 b2 0a 	sts	0x0AB2, r24	; 0x800ab2 <co2_value>
     24e:	00 00       	nop
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <write_to_buffer>:
 */ 

#include "Headers/m_lora_includes.h"

void write_to_buffer(MessageBufferHandle_t xMessageBuffer, m_data data)
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	2a 97       	sbiw	r28, 0x0a	; 10
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	9e 83       	std	Y+6, r25	; 0x06
     270:	8d 83       	std	Y+5, r24	; 0x05
     272:	4f 83       	std	Y+7, r20	; 0x07
     274:	58 87       	std	Y+8, r21	; 0x08
     276:	69 87       	std	Y+9, r22	; 0x09
     278:	7a 87       	std	Y+10, r23	; 0x0a
	m_data local_data = data;
     27a:	8f 81       	ldd	r24, Y+7	; 0x07
     27c:	98 85       	ldd	r25, Y+8	; 0x08
     27e:	a9 85       	ldd	r26, Y+9	; 0x09
     280:	ba 85       	ldd	r27, Y+10	; 0x0a
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	ab 83       	std	Y+3, r26	; 0x03
     288:	bc 83       	std	Y+4, r27	; 0x04
	
	xSemaphoreTake(xSemaphore_buffer,portMAX_DELAY);
     28a:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <xSemaphore_buffer>
     28e:	90 91 bb 0a 	lds	r25, 0x0ABB	; 0x800abb <xSemaphore_buffer+0x1>
     292:	6f ef       	ldi	r22, 0xFF	; 255
     294:	7f ef       	ldi	r23, 0xFF	; 255
     296:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	xMessageBufferSend( xMessageBuffer
     29a:	8d 81       	ldd	r24, Y+5	; 0x05
     29c:	9e 81       	ldd	r25, Y+6	; 0x06
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	44 e0       	ldi	r20, 0x04	; 4
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	be 01       	movw	r22, r28
     2a8:	6f 5f       	subi	r22, 0xFF	; 255
     2aa:	7f 4f       	sbci	r23, 0xFF	; 255
     2ac:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <xStreamBufferSend>
	, &local_data
	, sizeof (m_data)
	,0);
	xSemaphoreGive(xSemaphore_buffer);
     2b0:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <xSemaphore_buffer>
     2b4:	90 91 bb 0a 	lds	r25, 0x0ABB	; 0x800abb <xSemaphore_buffer+0x1>
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	5e d6       	rcall	.+3260   	; 0xf80 <xQueueGenericSend>
     2c4:	00 00       	nop
     2c6:	2a 96       	adiw	r28, 0x0a	; 10
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <timer_5_mins_callback>:
 *  Author: drags
 */ 
#include "../Headers/m_lora_includes.h"

void timer_5_mins_callback(TimerHandle_t pxTimer)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	1f 92       	push	r1
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	9a 83       	std	Y+2, r25	; 0x02
     2e6:	89 83       	std	Y+1, r24	; 0x01
	xSemaphoreGive(xSemaphore_temperature);
     2e8:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <xSemaphore_temperature>
     2ec:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <xSemaphore_temperature+0x1>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	42 d6       	rcall	.+3204   	; 0xf80 <xQueueGenericSend>

	xSemaphoreGive(xSemaphore_co2);
     2fc:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <xSemaphore_co2>
     300:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <xSemaphore_co2+0x1>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	38 d6       	rcall	.+3184   	; 0xf80 <xQueueGenericSend>
	
	xSemaphoreGive(xSemaphore_view_data);
     310:	80 91 b6 0a 	lds	r24, 0x0AB6	; 0x800ab6 <xSemaphore_view_data>
     314:	90 91 b7 0a 	lds	r25, 0x0AB7	; 0x800ab7 <xSemaphore_view_data+0x1>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	2e d6       	rcall	.+3164   	; 0xf80 <xQueueGenericSend>
	
     324:	00 00       	nop
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <task_switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_in(uint8_t task_no) {
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	28 e0       	ldi	r18, 0x08	; 8
     342:	31 e0       	ldi	r19, 0x01	; 1
     344:	f9 01       	movw	r30, r18
     346:	20 81       	ld	r18, Z
     348:	20 7f       	andi	r18, 0xF0	; 240
     34a:	fc 01       	movw	r30, r24
     34c:	20 83       	st	Z, r18
		 PORTK |= (task_no & 0b00001111);
     34e:	88 e0       	ldi	r24, 0x08	; 8
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	28 e0       	ldi	r18, 0x08	; 8
     354:	31 e0       	ldi	r19, 0x01	; 1
     356:	f9 01       	movw	r30, r18
     358:	20 81       	ld	r18, Z
     35a:	32 2f       	mov	r19, r18
     35c:	29 81       	ldd	r18, Y+1	; 0x01
     35e:	2f 70       	andi	r18, 0x0F	; 15
     360:	23 2b       	or	r18, r19
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
		 #endif
	}
     366:	00 00       	nop
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <task_switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_out(uint8_t task_no) {
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	1f 92       	push	r1
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	89 83       	std	Y+1, r24	; 0x01
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     37c:	88 e0       	ldi	r24, 0x08	; 8
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	28 e0       	ldi	r18, 0x08	; 8
     382:	31 e0       	ldi	r19, 0x01	; 1
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	20 7f       	andi	r18, 0xF0	; 240
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
		#endif
	}
     38e:	00 00       	nop
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <pvPortMalloc+0x6>
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	9c 83       	std	Y+4, r25	; 0x04
     3a6:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn;

    vTaskSuspendAll();
     3a8:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	0e 94 08 37 	call	0x6e10	; 0x6e10 <malloc>
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3b8:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	89 2b       	or	r24, r25
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <pvPortMalloc+0x30>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     3c4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	1f 92       	push	r1
     3e0:	1f 92       	push	r1
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	9a 83       	std	Y+2, r25	; 0x02
     3e8:	89 83       	std	Y+1, r24	; 0x01
    if( pv )
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	89 2b       	or	r24, r25
     3f0:	41 f0       	breq	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    {
        vTaskSuspendAll();
     3f2:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskSuspendAll>
        {
            free( pv );
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     3fe:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    }
}
     402:	00 00       	nop
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	1f 92       	push	r1
     414:	1f 92       	push	r1
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	9a 83       	std	Y+2, r25	; 0x02
     41c:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	9c 01       	movw	r18, r24
     424:	2d 5f       	subi	r18, 0xFD	; 253
     426:	3f 4f       	sbci	r19, 0xFF	; 255
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	fc 01       	movw	r30, r24
     42e:	32 83       	std	Z+2, r19	; 0x02
     430:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	2f ef       	ldi	r18, 0xFF	; 255
     438:	3f ef       	ldi	r19, 0xFF	; 255
     43a:	fc 01       	movw	r30, r24
     43c:	34 83       	std	Z+4, r19	; 0x04
     43e:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	9c 01       	movw	r18, r24
     446:	2d 5f       	subi	r18, 0xFD	; 253
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	fc 01       	movw	r30, r24
     450:	36 83       	std	Z+6, r19	; 0x06
     452:	25 83       	std	Z+5, r18	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	9c 01       	movw	r18, r24
     45a:	2d 5f       	subi	r18, 0xFD	; 253
     45c:	3f 4f       	sbci	r19, 0xFF	; 255
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	9a 81       	ldd	r25, Y+2	; 0x02
     462:	fc 01       	movw	r30, r24
     464:	30 87       	std	Z+8, r19	; 0x08
     466:	27 83       	std	Z+7, r18	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	fc 01       	movw	r30, r24
     46e:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     470:	00 00       	nop
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	1f 92       	push	r1
     482:	1f 92       	push	r1
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
     490:	fc 01       	movw	r30, r24
     492:	11 86       	std	Z+9, r1	; 0x09
     494:	10 86       	std	Z+8, r1	; 0x08

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     496:	00 00       	nop
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <vListInsertEnd+0x6>
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <vListInsertEnd+0x8>
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	9c 83       	std	Y+4, r25	; 0x04
     4b0:	8b 83       	std	Y+3, r24	; 0x03
     4b2:	7e 83       	std	Y+6, r23	; 0x06
     4b4:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ba:	fc 01       	movw	r30, r24
     4bc:	81 81       	ldd	r24, Z+1	; 0x01
     4be:	92 81       	ldd	r25, Z+2	; 0x02
     4c0:	9a 83       	std	Y+2, r25	; 0x02
     4c2:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     4c4:	8d 81       	ldd	r24, Y+5	; 0x05
     4c6:	9e 81       	ldd	r25, Y+6	; 0x06
     4c8:	29 81       	ldd	r18, Y+1	; 0x01
     4ca:	3a 81       	ldd	r19, Y+2	; 0x02
     4cc:	fc 01       	movw	r30, r24
     4ce:	33 83       	std	Z+3, r19	; 0x03
     4d0:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	9a 81       	ldd	r25, Y+2	; 0x02
     4d6:	fc 01       	movw	r30, r24
     4d8:	24 81       	ldd	r18, Z+4	; 0x04
     4da:	35 81       	ldd	r19, Z+5	; 0x05
     4dc:	8d 81       	ldd	r24, Y+5	; 0x05
     4de:	9e 81       	ldd	r25, Y+6	; 0x06
     4e0:	fc 01       	movw	r30, r24
     4e2:	35 83       	std	Z+5, r19	; 0x05
     4e4:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	fc 01       	movw	r30, r24
     4ec:	84 81       	ldd	r24, Z+4	; 0x04
     4ee:	95 81       	ldd	r25, Z+5	; 0x05
     4f0:	2d 81       	ldd	r18, Y+5	; 0x05
     4f2:	3e 81       	ldd	r19, Y+6	; 0x06
     4f4:	fc 01       	movw	r30, r24
     4f6:	33 83       	std	Z+3, r19	; 0x03
     4f8:	22 83       	std	Z+2, r18	; 0x02
    pxIndex->pxPrevious = pxNewListItem;
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	2d 81       	ldd	r18, Y+5	; 0x05
     500:	3e 81       	ldd	r19, Y+6	; 0x06
     502:	fc 01       	movw	r30, r24
     504:	35 83       	std	Z+5, r19	; 0x05
     506:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	9e 81       	ldd	r25, Y+6	; 0x06
     50c:	2b 81       	ldd	r18, Y+3	; 0x03
     50e:	3c 81       	ldd	r19, Y+4	; 0x04
     510:	fc 01       	movw	r30, r24
     512:	31 87       	std	Z+9, r19	; 0x09
     514:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	fc 01       	movw	r30, r24
     51c:	80 81       	ld	r24, Z
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	28 0f       	add	r18, r24
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
}
     52a:	00 00       	nop
     52c:	26 96       	adiw	r28, 0x06	; 6
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	28 97       	sbiw	r28, 0x08	; 8
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	9e 83       	std	Y+6, r25	; 0x06
     554:	8d 83       	std	Y+5, r24	; 0x05
     556:	78 87       	std	Y+8, r23	; 0x08
     558:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     55a:	8f 81       	ldd	r24, Y+7	; 0x07
     55c:	98 85       	ldd	r25, Y+8	; 0x08
     55e:	fc 01       	movw	r30, r24
     560:	80 81       	ld	r24, Z
     562:	91 81       	ldd	r25, Z+1	; 0x01
     564:	9c 83       	std	Y+4, r25	; 0x04
     566:	8b 83       	std	Y+3, r24	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	41 f4       	brne	.+16     	; 0x580 <vListInsert+0x42>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     570:	8d 81       	ldd	r24, Y+5	; 0x05
     572:	9e 81       	ldd	r25, Y+6	; 0x06
     574:	fc 01       	movw	r30, r24
     576:	87 81       	ldd	r24, Z+7	; 0x07
     578:	90 85       	ldd	r25, Z+8	; 0x08
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	89 83       	std	Y+1, r24	; 0x01
     57e:	1a c0       	rjmp	.+52     	; 0x5b4 <vListInsert+0x76>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     580:	8d 81       	ldd	r24, Y+5	; 0x05
     582:	9e 81       	ldd	r25, Y+6	; 0x06
     584:	03 96       	adiw	r24, 0x03	; 3
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	07 c0       	rjmp	.+14     	; 0x59a <vListInsert+0x5c>
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	fc 01       	movw	r30, r24
     592:	82 81       	ldd	r24, Z+2	; 0x02
     594:	93 81       	ldd	r25, Z+3	; 0x03
     596:	9a 83       	std	Y+2, r25	; 0x02
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	fc 01       	movw	r30, r24
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	93 81       	ldd	r25, Z+3	; 0x03
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 81       	ld	r18, Z
     5a8:	31 81       	ldd	r19, Z+1	; 0x01
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	82 17       	cp	r24, r18
     5b0:	93 07       	cpc	r25, r19
     5b2:	60 f7       	brcc	.-40     	; 0x58c <vListInsert+0x4e>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	9a 81       	ldd	r25, Y+2	; 0x02
     5b8:	fc 01       	movw	r30, r24
     5ba:	22 81       	ldd	r18, Z+2	; 0x02
     5bc:	33 81       	ldd	r19, Z+3	; 0x03
     5be:	8f 81       	ldd	r24, Y+7	; 0x07
     5c0:	98 85       	ldd	r25, Y+8	; 0x08
     5c2:	fc 01       	movw	r30, r24
     5c4:	33 83       	std	Z+3, r19	; 0x03
     5c6:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5c8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ca:	98 85       	ldd	r25, Y+8	; 0x08
     5cc:	fc 01       	movw	r30, r24
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	2f 81       	ldd	r18, Y+7	; 0x07
     5d4:	38 85       	ldd	r19, Y+8	; 0x08
     5d6:	fc 01       	movw	r30, r24
     5d8:	35 83       	std	Z+5, r19	; 0x05
     5da:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	98 85       	ldd	r25, Y+8	; 0x08
     5e0:	29 81       	ldd	r18, Y+1	; 0x01
     5e2:	3a 81       	ldd	r19, Y+2	; 0x02
     5e4:	fc 01       	movw	r30, r24
     5e6:	35 83       	std	Z+5, r19	; 0x05
     5e8:	24 83       	std	Z+4, r18	; 0x04
    pxIterator->pxNext = pxNewListItem;
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	2f 81       	ldd	r18, Y+7	; 0x07
     5f0:	38 85       	ldd	r19, Y+8	; 0x08
     5f2:	fc 01       	movw	r30, r24
     5f4:	33 83       	std	Z+3, r19	; 0x03
     5f6:	22 83       	std	Z+2, r18	; 0x02

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     5f8:	8f 81       	ldd	r24, Y+7	; 0x07
     5fa:	98 85       	ldd	r25, Y+8	; 0x08
     5fc:	2d 81       	ldd	r18, Y+5	; 0x05
     5fe:	3e 81       	ldd	r19, Y+6	; 0x06
     600:	fc 01       	movw	r30, r24
     602:	31 87       	std	Z+9, r19	; 0x09
     604:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	9e 81       	ldd	r25, Y+6	; 0x06
     60a:	fc 01       	movw	r30, r24
     60c:	80 81       	ld	r24, Z
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	28 0f       	add	r18, r24
     612:	8d 81       	ldd	r24, Y+5	; 0x05
     614:	9e 81       	ldd	r25, Y+6	; 0x06
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
}
     61a:	00 00       	nop
     61c:	28 96       	adiw	r28, 0x08	; 8
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	00 d0       	rcall	.+0      	; 0x634 <uxListRemove+0x6>
     634:	1f 92       	push	r1
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	9c 83       	std	Y+4, r25	; 0x04
     63c:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	fc 01       	movw	r30, r24
     644:	80 85       	ldd	r24, Z+8	; 0x08
     646:	91 85       	ldd	r25, Z+9	; 0x09
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	9c 81       	ldd	r25, Y+4	; 0x04
     650:	fc 01       	movw	r30, r24
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	93 81       	ldd	r25, Z+3	; 0x03
     656:	2b 81       	ldd	r18, Y+3	; 0x03
     658:	3c 81       	ldd	r19, Y+4	; 0x04
     65a:	f9 01       	movw	r30, r18
     65c:	24 81       	ldd	r18, Z+4	; 0x04
     65e:	35 81       	ldd	r19, Z+5	; 0x05
     660:	fc 01       	movw	r30, r24
     662:	35 83       	std	Z+5, r19	; 0x05
     664:	24 83       	std	Z+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	9c 81       	ldd	r25, Y+4	; 0x04
     66a:	fc 01       	movw	r30, r24
     66c:	84 81       	ldd	r24, Z+4	; 0x04
     66e:	95 81       	ldd	r25, Z+5	; 0x05
     670:	2b 81       	ldd	r18, Y+3	; 0x03
     672:	3c 81       	ldd	r19, Y+4	; 0x04
     674:	f9 01       	movw	r30, r18
     676:	22 81       	ldd	r18, Z+2	; 0x02
     678:	33 81       	ldd	r19, Z+3	; 0x03
     67a:	fc 01       	movw	r30, r24
     67c:	33 83       	std	Z+3, r19	; 0x03
     67e:	22 83       	std	Z+2, r18	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	fc 01       	movw	r30, r24
     686:	21 81       	ldd	r18, Z+1	; 0x01
     688:	32 81       	ldd	r19, Z+2	; 0x02
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
     68c:	9c 81       	ldd	r25, Y+4	; 0x04
     68e:	28 17       	cp	r18, r24
     690:	39 07       	cpc	r19, r25
     692:	51 f4       	brne	.+20     	; 0x6a8 <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	fc 01       	movw	r30, r24
     69a:	24 81       	ldd	r18, Z+4	; 0x04
     69c:	35 81       	ldd	r19, Z+5	; 0x05
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	fc 01       	movw	r30, r24
     6a4:	32 83       	std	Z+2, r19	; 0x02
     6a6:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	fc 01       	movw	r30, r24
     6ae:	11 86       	std	Z+9, r1	; 0x09
     6b0:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	fc 01       	movw	r30, r24
     6b8:	80 81       	ld	r24, Z
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	28 0f       	add	r18, r24
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
}
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	28 97       	sbiw	r28, 0x08	; 8
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	9c 83       	std	Y+4, r25	; 0x04
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	7e 83       	std	Y+6, r23	; 0x06
     6f6:	6d 83       	std	Y+5, r22	; 0x05
     6f8:	58 87       	std	Y+8, r21	; 0x08
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	21 e1       	ldi	r18, 0x11	; 17
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	9c 81       	ldd	r25, Y+4	; 0x04
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	9c 83       	std	Y+4, r25	; 0x04
     70e:	8b 83       	std	Y+3, r24	; 0x03
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	22 e2       	ldi	r18, 0x22	; 34
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	9c 81       	ldd	r25, Y+4	; 0x04
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	9c 83       	std	Y+4, r25	; 0x04
     722:	8b 83       	std	Y+3, r24	; 0x03
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	23 e3       	ldi	r18, 0x33	; 51
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	9c 81       	ldd	r25, Y+4	; 0x04
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	9c 83       	std	Y+4, r25	; 0x04
     736:	8b 83       	std	Y+3, r24	; 0x03
     738:	8d 81       	ldd	r24, Y+5	; 0x05
     73a:	9e 81       	ldd	r25, Y+6	; 0x06
     73c:	9a 83       	std	Y+2, r25	; 0x02
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	29 81       	ldd	r18, Y+1	; 0x01
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	9c 81       	ldd	r25, Y+4	; 0x04
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	9c 81       	ldd	r25, Y+4	; 0x04
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	9c 83       	std	Y+4, r25	; 0x04
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	89 2f       	mov	r24, r25
     75a:	99 27       	eor	r25, r25
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	29 81       	ldd	r18, Y+1	; 0x01
     762:	8b 81       	ldd	r24, Y+3	; 0x03
     764:	9c 81       	ldd	r25, Y+4	; 0x04
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	9c 81       	ldd	r25, Y+4	; 0x04
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	9c 83       	std	Y+4, r25	; 0x04
     772:	8b 83       	std	Y+3, r24	; 0x03
     774:	8b 81       	ldd	r24, Y+3	; 0x03
     776:	9c 81       	ldd	r25, Y+4	; 0x04
     778:	fc 01       	movw	r30, r24
     77a:	10 82       	st	Z, r1
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	9c 81       	ldd	r25, Y+4	; 0x04
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	9c 83       	std	Y+4, r25	; 0x04
     784:	8b 83       	std	Y+3, r24	; 0x03
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	9c 81       	ldd	r25, Y+4	; 0x04
     78a:	fc 01       	movw	r30, r24
     78c:	10 82       	st	Z, r1
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	9c 81       	ldd	r25, Y+4	; 0x04
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	9c 83       	std	Y+4, r25	; 0x04
     796:	8b 83       	std	Y+3, r24	; 0x03
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	9c 81       	ldd	r25, Y+4	; 0x04
     79c:	20 e8       	ldi	r18, 0x80	; 128
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	9c 83       	std	Y+4, r25	; 0x04
     7aa:	8b 83       	std	Y+3, r24	; 0x03
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	9c 81       	ldd	r25, Y+4	; 0x04
     7b0:	fc 01       	movw	r30, r24
     7b2:	10 82       	st	Z, r1
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	9c 83       	std	Y+4, r25	; 0x04
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	8b 81       	ldd	r24, Y+3	; 0x03
     7c0:	9c 81       	ldd	r25, Y+4	; 0x04
     7c2:	fc 01       	movw	r30, r24
     7c4:	10 82       	st	Z, r1
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	9c 83       	std	Y+4, r25	; 0x04
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	fc 01       	movw	r30, r24
     7d6:	10 82       	st	Z, r1
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	9c 81       	ldd	r25, Y+4	; 0x04
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	9c 81       	ldd	r25, Y+4	; 0x04
     7e6:	22 e0       	ldi	r18, 0x02	; 2
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	9c 83       	std	Y+4, r25	; 0x04
     7f4:	8b 83       	std	Y+3, r24	; 0x03
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	9c 81       	ldd	r25, Y+4	; 0x04
     7fa:	23 e0       	ldi	r18, 0x03	; 3
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18
     800:	8b 81       	ldd	r24, Y+3	; 0x03
     802:	9c 81       	ldd	r25, Y+4	; 0x04
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	9c 83       	std	Y+4, r25	; 0x04
     808:	8b 83       	std	Y+3, r24	; 0x03
     80a:	8b 81       	ldd	r24, Y+3	; 0x03
     80c:	9c 81       	ldd	r25, Y+4	; 0x04
     80e:	24 e0       	ldi	r18, 0x04	; 4
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
     814:	8b 81       	ldd	r24, Y+3	; 0x03
     816:	9c 81       	ldd	r25, Y+4	; 0x04
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	9c 83       	std	Y+4, r25	; 0x04
     81c:	8b 83       	std	Y+3, r24	; 0x03
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	9c 81       	ldd	r25, Y+4	; 0x04
     822:	25 e0       	ldi	r18, 0x05	; 5
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	9c 81       	ldd	r25, Y+4	; 0x04
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	9c 83       	std	Y+4, r25	; 0x04
     830:	8b 83       	std	Y+3, r24	; 0x03
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	9c 81       	ldd	r25, Y+4	; 0x04
     836:	26 e0       	ldi	r18, 0x06	; 6
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	9c 81       	ldd	r25, Y+4	; 0x04
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	9c 83       	std	Y+4, r25	; 0x04
     844:	8b 83       	std	Y+3, r24	; 0x03
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	9c 81       	ldd	r25, Y+4	; 0x04
     84a:	27 e0       	ldi	r18, 0x07	; 7
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	9c 83       	std	Y+4, r25	; 0x04
     858:	8b 83       	std	Y+3, r24	; 0x03
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	28 e0       	ldi	r18, 0x08	; 8
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18
     864:	8b 81       	ldd	r24, Y+3	; 0x03
     866:	9c 81       	ldd	r25, Y+4	; 0x04
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	9c 83       	std	Y+4, r25	; 0x04
     86c:	8b 83       	std	Y+3, r24	; 0x03
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	9c 81       	ldd	r25, Y+4	; 0x04
     872:	29 e0       	ldi	r18, 0x09	; 9
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	9c 83       	std	Y+4, r25	; 0x04
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	9c 81       	ldd	r25, Y+4	; 0x04
     886:	20 e1       	ldi	r18, 0x10	; 16
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	9c 81       	ldd	r25, Y+4	; 0x04
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	9c 83       	std	Y+4, r25	; 0x04
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	8b 81       	ldd	r24, Y+3	; 0x03
     898:	9c 81       	ldd	r25, Y+4	; 0x04
     89a:	21 e1       	ldi	r18, 0x11	; 17
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	9c 83       	std	Y+4, r25	; 0x04
     8a8:	8b 83       	std	Y+3, r24	; 0x03
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	9c 81       	ldd	r25, Y+4	; 0x04
     8ae:	22 e1       	ldi	r18, 0x12	; 18
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	9c 81       	ldd	r25, Y+4	; 0x04
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	9c 83       	std	Y+4, r25	; 0x04
     8bc:	8b 83       	std	Y+3, r24	; 0x03
     8be:	8b 81       	ldd	r24, Y+3	; 0x03
     8c0:	9c 81       	ldd	r25, Y+4	; 0x04
     8c2:	23 e1       	ldi	r18, 0x13	; 19
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	9c 83       	std	Y+4, r25	; 0x04
     8d0:	8b 83       	std	Y+3, r24	; 0x03
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	9c 81       	ldd	r25, Y+4	; 0x04
     8d6:	24 e1       	ldi	r18, 0x14	; 20
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	9c 81       	ldd	r25, Y+4	; 0x04
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	9c 83       	std	Y+4, r25	; 0x04
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	25 e1       	ldi	r18, 0x15	; 21
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	9c 81       	ldd	r25, Y+4	; 0x04
     8fe:	26 e1       	ldi	r18, 0x16	; 22
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	9c 83       	std	Y+4, r25	; 0x04
     90c:	8b 83       	std	Y+3, r24	; 0x03
     90e:	8b 81       	ldd	r24, Y+3	; 0x03
     910:	9c 81       	ldd	r25, Y+4	; 0x04
     912:	27 e1       	ldi	r18, 0x17	; 23
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	9c 83       	std	Y+4, r25	; 0x04
     920:	8b 83       	std	Y+3, r24	; 0x03
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	28 e1       	ldi	r18, 0x18	; 24
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
     92c:	8b 81       	ldd	r24, Y+3	; 0x03
     92e:	9c 81       	ldd	r25, Y+4	; 0x04
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	9c 83       	std	Y+4, r25	; 0x04
     934:	8b 83       	std	Y+3, r24	; 0x03
     936:	8b 81       	ldd	r24, Y+3	; 0x03
     938:	9c 81       	ldd	r25, Y+4	; 0x04
     93a:	29 e1       	ldi	r18, 0x19	; 25
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	9c 81       	ldd	r25, Y+4	; 0x04
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	8b 83       	std	Y+3, r24	; 0x03
     94a:	8b 81       	ldd	r24, Y+3	; 0x03
     94c:	9c 81       	ldd	r25, Y+4	; 0x04
     94e:	20 e2       	ldi	r18, 0x20	; 32
     950:	fc 01       	movw	r30, r24
     952:	20 83       	st	Z, r18
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	8b 83       	std	Y+3, r24	; 0x03
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	21 e2       	ldi	r18, 0x21	; 33
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	9c 83       	std	Y+4, r25	; 0x04
     970:	8b 83       	std	Y+3, r24	; 0x03
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	9c 81       	ldd	r25, Y+4	; 0x04
     976:	22 e2       	ldi	r18, 0x22	; 34
     978:	fc 01       	movw	r30, r24
     97a:	20 83       	st	Z, r18
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	8b 83       	std	Y+3, r24	; 0x03
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	9c 81       	ldd	r25, Y+4	; 0x04
     98a:	23 e2       	ldi	r18, 0x23	; 35
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	9c 83       	std	Y+4, r25	; 0x04
     998:	8b 83       	std	Y+3, r24	; 0x03
     99a:	8f 81       	ldd	r24, Y+7	; 0x07
     99c:	98 85       	ldd	r25, Y+8	; 0x08
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	29 81       	ldd	r18, Y+1	; 0x01
     9a4:	8b 81       	ldd	r24, Y+3	; 0x03
     9a6:	9c 81       	ldd	r25, Y+4	; 0x04
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	9c 83       	std	Y+4, r25	; 0x04
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	89 2f       	mov	r24, r25
     9bc:	99 27       	eor	r25, r25
     9be:	9a 83       	std	Y+2, r25	; 0x02
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	29 81       	ldd	r18, Y+1	; 0x01
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	9c 81       	ldd	r25, Y+4	; 0x04
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	9c 83       	std	Y+4, r25	; 0x04
     9d4:	8b 83       	std	Y+3, r24	; 0x03
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	9c 81       	ldd	r25, Y+4	; 0x04
     9da:	26 e2       	ldi	r18, 0x26	; 38
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	9c 83       	std	Y+4, r25	; 0x04
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	27 e2       	ldi	r18, 0x27	; 39
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	9c 83       	std	Y+4, r25	; 0x04
     9fc:	8b 83       	std	Y+3, r24	; 0x03
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	28 e2       	ldi	r18, 0x28	; 40
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	9c 83       	std	Y+4, r25	; 0x04
     a10:	8b 83       	std	Y+3, r24	; 0x03
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	29 e2       	ldi	r18, 0x29	; 41
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	9c 83       	std	Y+4, r25	; 0x04
     a24:	8b 83       	std	Y+3, r24	; 0x03
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	9c 81       	ldd	r25, Y+4	; 0x04
     a2a:	20 e3       	ldi	r18, 0x30	; 48
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 83       	st	Z, r18
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	9c 83       	std	Y+4, r25	; 0x04
     a38:	8b 83       	std	Y+3, r24	; 0x03
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	21 e3       	ldi	r18, 0x31	; 49
     a40:	fc 01       	movw	r30, r24
     a42:	20 83       	st	Z, r18
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	9c 83       	std	Y+4, r25	; 0x04
     a4c:	8b 83       	std	Y+3, r24	; 0x03
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	9c 81       	ldd	r25, Y+4	; 0x04
     a52:	28 96       	adiw	r28, 0x08	; 8
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <xPortStartScheduler>:
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	ff d0       	rcall	.+510    	; 0xc6c <prvSetupTimerInterrupt>
     a6e:	a0 91 5c 08 	lds	r26, 0x085C	; 0x80085c <__data_end>
     a72:	b0 91 5d 08 	lds	r27, 0x085D	; 0x80085d <__data_end+0x1>
     a76:	cd 91       	ld	r28, X+
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	dd 91       	ld	r29, X+
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	9f 90       	pop	r9
     aac:	8f 90       	pop	r8
     aae:	7f 90       	pop	r7
     ab0:	6f 90       	pop	r6
     ab2:	5f 90       	pop	r5
     ab4:	4f 90       	pop	r4
     ab6:	3f 90       	pop	r3
     ab8:	2f 90       	pop	r2
     aba:	1f 90       	pop	r1
     abc:	0f 90       	pop	r0
     abe:	0c be       	out	0x3c, r0	; 60
     ac0:	0f 90       	pop	r0
     ac2:	0b be       	out	0x3b, r0	; 59
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	08 95       	ret
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	0f 92       	push	r0
     adc:	0b b6       	in	r0, 0x3b	; 59
     ade:	0f 92       	push	r0
     ae0:	0c b6       	in	r0, 0x3c	; 60
     ae2:	0f 92       	push	r0
     ae4:	1f 92       	push	r1
     ae6:	11 24       	eor	r1, r1
     ae8:	2f 92       	push	r2
     aea:	3f 92       	push	r3
     aec:	4f 92       	push	r4
     aee:	5f 92       	push	r5
     af0:	6f 92       	push	r6
     af2:	7f 92       	push	r7
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
     b24:	a0 91 5c 08 	lds	r26, 0x085C	; 0x80085c <__data_end>
     b28:	b0 91 5d 08 	lds	r27, 0x085D	; 0x80085d <__data_end+0x1>
     b2c:	0d b6       	in	r0, 0x3d	; 61
     b2e:	0d 92       	st	X+, r0
     b30:	0e b6       	in	r0, 0x3e	; 62
     b32:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     b34:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     b38:	a0 91 5c 08 	lds	r26, 0x085C	; 0x80085c <__data_end>
     b3c:	b0 91 5d 08 	lds	r27, 0x085D	; 0x80085d <__data_end+0x1>
     b40:	cd 91       	ld	r28, X+
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	dd 91       	ld	r29, X+
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	7f 91       	pop	r23
     b5a:	6f 91       	pop	r22
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	7f 90       	pop	r7
     b7a:	6f 90       	pop	r6
     b7c:	5f 90       	pop	r5
     b7e:	4f 90       	pop	r4
     b80:	3f 90       	pop	r3
     b82:	2f 90       	pop	r2
     b84:	1f 90       	pop	r1
     b86:	0f 90       	pop	r0
     b88:	0c be       	out	0x3c, r0	; 60
     b8a:	0f 90       	pop	r0
     b8c:	0b be       	out	0x3b, r0	; 59
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     b94:	08 95       	ret
	...

00000b98 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	0f 92       	push	r0
     ba0:	0b b6       	in	r0, 0x3b	; 59
     ba2:	0f 92       	push	r0
     ba4:	0c b6       	in	r0, 0x3c	; 60
     ba6:	0f 92       	push	r0
     ba8:	1f 92       	push	r1
     baa:	11 24       	eor	r1, r1
     bac:	2f 92       	push	r2
     bae:	3f 92       	push	r3
     bb0:	4f 92       	push	r4
     bb2:	5f 92       	push	r5
     bb4:	6f 92       	push	r6
     bb6:	7f 92       	push	r7
     bb8:	8f 92       	push	r8
     bba:	9f 92       	push	r9
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	2f 93       	push	r18
     bce:	3f 93       	push	r19
     bd0:	4f 93       	push	r20
     bd2:	5f 93       	push	r21
     bd4:	6f 93       	push	r22
     bd6:	7f 93       	push	r23
     bd8:	8f 93       	push	r24
     bda:	9f 93       	push	r25
     bdc:	af 93       	push	r26
     bde:	bf 93       	push	r27
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
     be8:	a0 91 5c 08 	lds	r26, 0x085C	; 0x80085c <__data_end>
     bec:	b0 91 5d 08 	lds	r27, 0x085D	; 0x80085d <__data_end+0x1>
     bf0:	0d b6       	in	r0, 0x3d	; 61
     bf2:	0d 92       	st	X+, r0
     bf4:	0e b6       	in	r0, 0x3e	; 62
     bf6:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     bf8:	83 e5       	ldi	r24, 0x53	; 83
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	fc 01       	movw	r30, r24
     bfe:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
     c00:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <xTaskIncrementTick>
     c04:	88 23       	and	r24, r24
     c06:	11 f0       	breq	.+4      	; 0xc0c <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
     c08:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     c0c:	a0 91 5c 08 	lds	r26, 0x085C	; 0x80085c <__data_end>
     c10:	b0 91 5d 08 	lds	r27, 0x085D	; 0x80085d <__data_end+0x1>
     c14:	cd 91       	ld	r28, X+
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	dd 91       	ld	r29, X+
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	ff 91       	pop	r31
     c1e:	ef 91       	pop	r30
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	bf 91       	pop	r27
     c26:	af 91       	pop	r26
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	7f 91       	pop	r23
     c2e:	6f 91       	pop	r22
     c30:	5f 91       	pop	r21
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	7f 90       	pop	r7
     c4e:	6f 90       	pop	r6
     c50:	5f 90       	pop	r5
     c52:	4f 90       	pop	r4
     c54:	3f 90       	pop	r3
     c56:	2f 90       	pop	r2
     c58:	1f 90       	pop	r1
     c5a:	0f 90       	pop	r0
     c5c:	0c be       	out	0x3c, r0	; 60
     c5e:	0f 90       	pop	r0
     c60:	0b be       	out	0x3b, r0	; 59
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c68:	08 95       	ret
	...

00000c6c <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
     c74:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	88 70       	andi	r24, 0x08	; 8
     c7c:	99 27       	eor	r25, r25
     c7e:	89 2b       	or	r24, r25
     c80:	11 f0       	breq	.+4      	; 0xc86 <prvSetupTimerInterrupt+0x1a>
     c82:	80 ee       	ldi	r24, 0xE0	; 224
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <prvSetupTimerInterrupt+0x1c>
     c86:	80 ec       	ldi	r24, 0xC0	; 192
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	97 70       	andi	r25, 0x07	; 7
     c8c:	89 2b       	or	r24, r25
     c8e:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
     c90:	88 e1       	ldi	r24, 0x18	; 24
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	a8 95       	wdr
     c98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
     ca2:	00 00       	nop
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     caa:	76 df       	rcall	.-276    	; 0xb98 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cac:	18 95       	reti
	...

00000cb0 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <xQueueGenericReset+0x6>
     cb6:	1f 92       	push	r1
     cb8:	1f 92       	push	r1
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
     cc2:	6d 83       	std	Y+5, r22	; 0x05
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	0f 92       	push	r0
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	fc 01       	movw	r30, r24
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	29 81       	ldd	r18, Y+1	; 0x01
     cde:	3a 81       	ldd	r19, Y+2	; 0x02
     ce0:	f9 01       	movw	r30, r18
     ce2:	23 8d       	ldd	r18, Z+27	; 0x1b
     ce4:	42 2f       	mov	r20, r18
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	29 81       	ldd	r18, Y+1	; 0x01
     cea:	3a 81       	ldd	r19, Y+2	; 0x02
     cec:	f9 01       	movw	r30, r18
     cee:	24 8d       	ldd	r18, Z+28	; 0x1c
     cf0:	22 2f       	mov	r18, r18
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	42 9f       	mul	r20, r18
     cf6:	b0 01       	movw	r22, r0
     cf8:	43 9f       	mul	r20, r19
     cfa:	70 0d       	add	r23, r0
     cfc:	52 9f       	mul	r21, r18
     cfe:	70 0d       	add	r23, r0
     d00:	11 24       	eor	r1, r1
     d02:	9b 01       	movw	r18, r22
     d04:	28 0f       	add	r18, r24
     d06:	39 1f       	adc	r19, r25
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	fc 01       	movw	r30, r24
     d0e:	35 83       	std	Z+5, r19	; 0x05
     d10:	24 83       	std	Z+4, r18	; 0x04
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	12 8e       	std	Z+26, r1	; 0x1a
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	fc 01       	movw	r30, r24
     d20:	20 81       	ld	r18, Z
     d22:	31 81       	ldd	r19, Z+1	; 0x01
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	fc 01       	movw	r30, r24
     d2a:	33 83       	std	Z+3, r19	; 0x03
     d2c:	22 83       	std	Z+2, r18	; 0x02
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	fc 01       	movw	r30, r24
     d34:	20 81       	ld	r18, Z
     d36:	31 81       	ldd	r19, Z+1	; 0x01
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	fc 01       	movw	r30, r24
     d3e:	83 8d       	ldd	r24, Z+27	; 0x1b
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	bc 01       	movw	r22, r24
     d46:	61 50       	subi	r22, 0x01	; 1
     d48:	71 09       	sbc	r23, r1
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	fc 01       	movw	r30, r24
     d50:	84 8d       	ldd	r24, Z+28	; 0x1c
     d52:	48 2f       	mov	r20, r24
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	64 9f       	mul	r22, r20
     d58:	c0 01       	movw	r24, r0
     d5a:	65 9f       	mul	r22, r21
     d5c:	90 0d       	add	r25, r0
     d5e:	74 9f       	mul	r23, r20
     d60:	90 0d       	add	r25, r0
     d62:	11 24       	eor	r1, r1
     d64:	28 0f       	add	r18, r24
     d66:	39 1f       	adc	r19, r25
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	fc 01       	movw	r30, r24
     d6e:	37 83       	std	Z+7, r19	; 0x07
     d70:	26 83       	std	Z+6, r18	; 0x06
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	2f ef       	ldi	r18, 0xFF	; 255
     d78:	fc 01       	movw	r30, r24
     d7a:	25 8f       	std	Z+29, r18	; 0x1d
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	9a 81       	ldd	r25, Y+2	; 0x02
     d80:	2f ef       	ldi	r18, 0xFF	; 255
     d82:	fc 01       	movw	r30, r24
     d84:	26 8f       	std	Z+30, r18	; 0x1e
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	88 23       	and	r24, r24
     d8a:	79 f4       	brne	.+30     	; 0xdaa <xQueueGenericReset+0xfa>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	fc 01       	movw	r30, r24
     d92:	80 85       	ldd	r24, Z+8	; 0x08
     d94:	88 23       	and	r24, r24
     d96:	89 f0       	breq	.+34     	; 0xdba <xQueueGenericReset+0x10a>
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	08 96       	adiw	r24, 0x08	; 8
     d9e:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskRemoveFromEventList>
     da2:	88 23       	and	r24, r24
     da4:	51 f0       	breq	.+20     	; 0xdba <xQueueGenericReset+0x10a>
     da6:	96 de       	rcall	.-724    	; 0xad4 <vPortYield>
     da8:	08 c0       	rjmp	.+16     	; 0xdba <xQueueGenericReset+0x10a>
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	08 96       	adiw	r24, 0x08	; 8
     db0:	2e db       	rcall	.-2468   	; 0x40e <vListInitialise>
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	41 96       	adiw	r24, 0x11	; 17
     db8:	2a db       	rcall	.-2476   	; 0x40e <vListInitialise>
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <xQueueGenericCreate>:
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	29 97       	sbiw	r28, 0x09	; 9
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	8f 83       	std	Y+7, r24	; 0x07
     dea:	68 87       	std	Y+8, r22	; 0x08
     dec:	49 87       	std	Y+9, r20	; 0x09
     dee:	88 85       	ldd	r24, Y+8	; 0x08
     df0:	88 23       	and	r24, r24
     df2:	19 f4       	brne	.+6      	; 0xdfa <xQueueGenericCreate+0x2a>
     df4:	1a 82       	std	Y+2, r1	; 0x02
     df6:	19 82       	std	Y+1, r1	; 0x01
     df8:	0f c0       	rjmp	.+30     	; 0xe18 <xQueueGenericCreate+0x48>
     dfa:	8f 81       	ldd	r24, Y+7	; 0x07
     dfc:	48 2f       	mov	r20, r24
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	88 85       	ldd	r24, Y+8	; 0x08
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	42 9f       	mul	r20, r18
     e08:	c0 01       	movw	r24, r0
     e0a:	43 9f       	mul	r20, r19
     e0c:	90 0d       	add	r25, r0
     e0e:	52 9f       	mul	r21, r18
     e10:	90 0d       	add	r25, r0
     e12:	11 24       	eor	r1, r1
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	81 96       	adiw	r24, 0x21	; 33
     e1e:	bc da       	rcall	.-2696   	; 0x398 <pvPortMalloc>
     e20:	9c 83       	std	Y+4, r25	; 0x04
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	89 2b       	or	r24, r25
     e2a:	99 f0       	breq	.+38     	; 0xe52 <xQueueGenericCreate+0x82>
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	81 96       	adiw	r24, 0x21	; 33
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
     e3e:	2b 81       	ldd	r18, Y+3	; 0x03
     e40:	3c 81       	ldd	r19, Y+4	; 0x04
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	89 01       	movw	r16, r18
     e48:	29 85       	ldd	r18, Y+9	; 0x09
     e4a:	ac 01       	movw	r20, r24
     e4c:	68 85       	ldd	r22, Y+8	; 0x08
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	0d d0       	rcall	.+26     	; 0xe6c <prvInitialiseNewQueue>
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
     e56:	29 96       	adiw	r28, 0x09	; 9
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <prvInitialiseNewQueue>:
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	27 97       	sbiw	r28, 0x07	; 7
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	6a 83       	std	Y+2, r22	; 0x02
     e88:	5c 83       	std	Y+4, r21	; 0x04
     e8a:	4b 83       	std	Y+3, r20	; 0x03
     e8c:	2d 83       	std	Y+5, r18	; 0x05
     e8e:	1f 83       	std	Y+7, r17	; 0x07
     e90:	0e 83       	std	Y+6, r16	; 0x06
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	88 23       	and	r24, r24
     e96:	41 f4       	brne	.+16     	; 0xea8 <prvInitialiseNewQueue+0x3c>
     e98:	8e 81       	ldd	r24, Y+6	; 0x06
     e9a:	9f 81       	ldd	r25, Y+7	; 0x07
     e9c:	2e 81       	ldd	r18, Y+6	; 0x06
     e9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ea0:	fc 01       	movw	r30, r24
     ea2:	31 83       	std	Z+1, r19	; 0x01
     ea4:	20 83       	st	Z, r18
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <prvInitialiseNewQueue+0x4a>
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	2b 81       	ldd	r18, Y+3	; 0x03
     eae:	3c 81       	ldd	r19, Y+4	; 0x04
     eb0:	fc 01       	movw	r30, r24
     eb2:	31 83       	std	Z+1, r19	; 0x01
     eb4:	20 83       	st	Z, r18
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	9f 81       	ldd	r25, Y+7	; 0x07
     eba:	29 81       	ldd	r18, Y+1	; 0x01
     ebc:	fc 01       	movw	r30, r24
     ebe:	23 8f       	std	Z+27, r18	; 0x1b
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	9f 81       	ldd	r25, Y+7	; 0x07
     ec4:	2a 81       	ldd	r18, Y+2	; 0x02
     ec6:	fc 01       	movw	r30, r24
     ec8:	24 8f       	std	Z+28, r18	; 0x1c
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	9f 81       	ldd	r25, Y+7	; 0x07
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	ef de       	rcall	.-546    	; 0xcb0 <xQueueGenericReset>
     ed2:	8e 81       	ldd	r24, Y+6	; 0x06
     ed4:	9f 81       	ldd	r25, Y+7	; 0x07
     ed6:	2d 81       	ldd	r18, Y+5	; 0x05
     ed8:	fc 01       	movw	r30, r24
     eda:	20 a3       	std	Z+32, r18	; 0x20
     edc:	00 00       	nop
     ede:	27 96       	adiw	r28, 0x07	; 7
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	08 95       	ret

00000ef4 <prvInitialiseMutex>:
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	1f 92       	push	r1
     efa:	1f 92       	push	r1
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	89 2b       	or	r24, r25
     f0a:	b1 f0       	breq	.+44     	; 0xf38 <prvInitialiseMutex+0x44>
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	fc 01       	movw	r30, r24
     f12:	15 82       	std	Z+5, r1	; 0x05
     f14:	14 82       	std	Z+4, r1	; 0x04
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	fc 01       	movw	r30, r24
     f1c:	11 82       	std	Z+1, r1	; 0x01
     f1e:	10 82       	st	Z, r1
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	16 82       	std	Z+6, r1	; 0x06
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	24 d0       	rcall	.+72     	; 0xf80 <xQueueGenericSend>
     f38:	00 00       	nop
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <xQueueCreateMutex>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <xQueueCreateMutex+0x6>
     f4a:	1f 92       	push	r1
     f4c:	1f 92       	push	r1
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	1a 82       	std	Y+2, r1	; 0x02
     f5a:	4d 81       	ldd	r20, Y+5	; 0x05
     f5c:	6a 81       	ldd	r22, Y+2	; 0x02
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	37 df       	rcall	.-402    	; 0xdd0 <xQueueGenericCreate>
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	c4 df       	rcall	.-120    	; 0xef4 <prvInitialiseMutex>
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <xQueueGenericSend>:
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	2e 97       	sbiw	r28, 0x0e	; 14
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	99 87       	std	Y+9, r25	; 0x09
     f96:	88 87       	std	Y+8, r24	; 0x08
     f98:	7b 87       	std	Y+11, r23	; 0x0b
     f9a:	6a 87       	std	Y+10, r22	; 0x0a
     f9c:	5d 87       	std	Y+13, r21	; 0x0d
     f9e:	4c 87       	std	Y+12, r20	; 0x0c
     fa0:	2e 87       	std	Y+14, r18	; 0x0e
     fa2:	19 82       	std	Y+1, r1	; 0x01
     fa4:	88 85       	ldd	r24, Y+8	; 0x08
     fa6:	99 85       	ldd	r25, Y+9	; 0x09
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	0f 92       	push	r0
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	fc 01       	movw	r30, r24
     fb8:	22 8d       	ldd	r18, Z+26	; 0x1a
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	fc 01       	movw	r30, r24
     fc0:	83 8d       	ldd	r24, Z+27	; 0x1b
     fc2:	28 17       	cp	r18, r24
     fc4:	18 f0       	brcs	.+6      	; 0xfcc <xQueueGenericSend+0x4c>
     fc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	f9 f4       	brne	.+62     	; 0x100a <xQueueGenericSend+0x8a>
     fcc:	2a 85       	ldd	r18, Y+10	; 0x0a
     fce:	3b 85       	ldd	r19, Y+11	; 0x0b
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	4e 85       	ldd	r20, Y+14	; 0x0e
     fd6:	b9 01       	movw	r22, r18
     fd8:	7f d2       	rcall	.+1278   	; 0x14d8 <prvCopyDataToQueue>
     fda:	8c 83       	std	Y+4, r24	; 0x04
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	fc 01       	movw	r30, r24
     fe2:	81 89       	ldd	r24, Z+17	; 0x11
     fe4:	88 23       	and	r24, r24
     fe6:	49 f0       	breq	.+18     	; 0xffa <xQueueGenericSend+0x7a>
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	9b 81       	ldd	r25, Y+3	; 0x03
     fec:	41 96       	adiw	r24, 0x11	; 17
     fee:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskRemoveFromEventList>
     ff2:	88 23       	and	r24, r24
     ff4:	31 f0       	breq	.+12     	; 0x1002 <xQueueGenericSend+0x82>
     ff6:	6e dd       	rcall	.-1316   	; 0xad4 <vPortYield>
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <xQueueGenericSend+0x82>
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	88 23       	and	r24, r24
     ffe:	09 f0       	breq	.+2      	; 0x1002 <xQueueGenericSend+0x82>
    1000:	69 dd       	rcall	.-1326   	; 0xad4 <vPortYield>
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	5b c0       	rjmp	.+182    	; 0x10c0 <xQueueGenericSend+0x140>
    100a:	8c 85       	ldd	r24, Y+12	; 0x0c
    100c:	9d 85       	ldd	r25, Y+13	; 0x0d
    100e:	89 2b       	or	r24, r25
    1010:	21 f4       	brne	.+8      	; 0x101a <xQueueGenericSend+0x9a>
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	53 c0       	rjmp	.+166    	; 0x10c0 <xQueueGenericSend+0x140>
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	88 23       	and	r24, r24
    101e:	31 f4       	brne	.+12     	; 0x102c <xQueueGenericSend+0xac>
    1020:	ce 01       	movw	r24, r28
    1022:	05 96       	adiw	r24, 0x05	; 5
    1024:	0e 94 40 17 	call	0x2e80	; 0x2e80 <vTaskInternalSetTimeOutState>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskSuspendAll>
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	fc 01       	movw	r30, r24
    1040:	85 8d       	ldd	r24, Z+29	; 0x1d
    1042:	8f 3f       	cpi	r24, 0xFF	; 255
    1044:	21 f4       	brne	.+8      	; 0x104e <xQueueGenericSend+0xce>
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	fc 01       	movw	r30, r24
    104c:	15 8e       	std	Z+29, r1	; 0x1d
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	fc 01       	movw	r30, r24
    1054:	86 8d       	ldd	r24, Z+30	; 0x1e
    1056:	8f 3f       	cpi	r24, 0xFF	; 255
    1058:	21 f4       	brne	.+8      	; 0x1062 <xQueueGenericSend+0xe2>
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	fc 01       	movw	r30, r24
    1060:	16 8e       	std	Z+30, r1	; 0x1e
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	9e 01       	movw	r18, r28
    1068:	24 5f       	subi	r18, 0xF4	; 244
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	ce 01       	movw	r24, r28
    106e:	05 96       	adiw	r24, 0x05	; 5
    1070:	b9 01       	movw	r22, r18
    1072:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskCheckForTimeOut>
    1076:	88 23       	and	r24, r24
    1078:	e9 f4       	brne	.+58     	; 0x10b4 <xQueueGenericSend+0x134>
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	c8 d3       	rcall	.+1936   	; 0x1810 <prvIsQueueFull>
    1080:	88 23       	and	r24, r24
    1082:	91 f0       	breq	.+36     	; 0x10a8 <xQueueGenericSend+0x128>
    1084:	2c 85       	ldd	r18, Y+12	; 0x0c
    1086:	3d 85       	ldd	r19, Y+13	; 0x0d
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	08 96       	adiw	r24, 0x08	; 8
    108e:	b9 01       	movw	r22, r18
    1090:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <vTaskPlaceOnEventList>
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	9b 81       	ldd	r25, Y+3	; 0x03
    1098:	40 d3       	rcall	.+1664   	; 0x171a <prvUnlockQueue>
    109a:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    109e:	88 23       	and	r24, r24
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <xQueueGenericSend+0x124>
    10a2:	84 cf       	rjmp	.-248    	; 0xfac <xQueueGenericSend+0x2c>
    10a4:	17 dd       	rcall	.-1490   	; 0xad4 <vPortYield>
    10a6:	82 cf       	rjmp	.-252    	; 0xfac <xQueueGenericSend+0x2c>
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	36 d3       	rcall	.+1644   	; 0x171a <prvUnlockQueue>
    10ae:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    10b2:	7c cf       	rjmp	.-264    	; 0xfac <xQueueGenericSend+0x2c>
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	30 d3       	rcall	.+1632   	; 0x171a <prvUnlockQueue>
    10ba:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	2e 96       	adiw	r28, 0x0e	; 14
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <xQueueGenericSendFromISR>:
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	2c 97       	sbiw	r28, 0x0c	; 12
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	9f 83       	std	Y+7, r25	; 0x07
    10e8:	8e 83       	std	Y+6, r24	; 0x06
    10ea:	79 87       	std	Y+9, r23	; 0x09
    10ec:	68 87       	std	Y+8, r22	; 0x08
    10ee:	5b 87       	std	Y+11, r21	; 0x0b
    10f0:	4a 87       	std	Y+10, r20	; 0x0a
    10f2:	2c 87       	std	Y+12, r18	; 0x0c
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	9b 83       	std	Y+3, r25	; 0x03
    10fa:	8a 83       	std	Y+2, r24	; 0x02
    10fc:	1c 82       	std	Y+4, r1	; 0x04
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	fc 01       	movw	r30, r24
    1104:	22 8d       	ldd	r18, Z+26	; 0x1a
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	fc 01       	movw	r30, r24
    110c:	83 8d       	ldd	r24, Z+27	; 0x1b
    110e:	28 17       	cp	r18, r24
    1110:	18 f0       	brcs	.+6      	; 0x1118 <xQueueGenericSendFromISR+0x46>
    1112:	8c 85       	ldd	r24, Y+12	; 0x0c
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	81 f5       	brne	.+96     	; 0x1178 <xQueueGenericSendFromISR+0xa6>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9b 81       	ldd	r25, Y+3	; 0x03
    111c:	fc 01       	movw	r30, r24
    111e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	28 85       	ldd	r18, Y+8	; 0x08
    1124:	39 85       	ldd	r19, Y+9	; 0x09
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	9b 81       	ldd	r25, Y+3	; 0x03
    112a:	4c 85       	ldd	r20, Y+12	; 0x0c
    112c:	b9 01       	movw	r22, r18
    112e:	d4 d1       	rcall	.+936    	; 0x14d8 <prvCopyDataToQueue>
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	8f 3f       	cpi	r24, 0xFF	; 255
    1134:	b9 f4       	brne	.+46     	; 0x1164 <xQueueGenericSendFromISR+0x92>
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	9b 81       	ldd	r25, Y+3	; 0x03
    113a:	fc 01       	movw	r30, r24
    113c:	81 89       	ldd	r24, Z+17	; 0x11
    113e:	88 23       	and	r24, r24
    1140:	c1 f0       	breq	.+48     	; 0x1172 <xQueueGenericSendFromISR+0xa0>
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	9b 81       	ldd	r25, Y+3	; 0x03
    1146:	41 96       	adiw	r24, 0x11	; 17
    1148:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskRemoveFromEventList>
    114c:	88 23       	and	r24, r24
    114e:	89 f0       	breq	.+34     	; 0x1172 <xQueueGenericSendFromISR+0xa0>
    1150:	8a 85       	ldd	r24, Y+10	; 0x0a
    1152:	9b 85       	ldd	r25, Y+11	; 0x0b
    1154:	89 2b       	or	r24, r25
    1156:	69 f0       	breq	.+26     	; 0x1172 <xQueueGenericSendFromISR+0xa0>
    1158:	8a 85       	ldd	r24, Y+10	; 0x0a
    115a:	9b 85       	ldd	r25, Y+11	; 0x0b
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <xQueueGenericSendFromISR+0xa0>
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	28 2f       	mov	r18, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	9b 81       	ldd	r25, Y+3	; 0x03
    116e:	fc 01       	movw	r30, r24
    1170:	26 8f       	std	Z+30, r18	; 0x1e
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	01 c0       	rjmp	.+2      	; 0x117a <xQueueGenericSendFromISR+0xa8>
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	2c 96       	adiw	r28, 0x0c	; 12
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <xQueueReceive>:
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	2d 97       	sbiw	r28, 0x0d	; 13
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	99 87       	std	Y+9, r25	; 0x09
    11a4:	88 87       	std	Y+8, r24	; 0x08
    11a6:	7b 87       	std	Y+11, r23	; 0x0b
    11a8:	6a 87       	std	Y+10, r22	; 0x0a
    11aa:	5d 87       	std	Y+13, r21	; 0x0d
    11ac:	4c 87       	std	Y+12, r20	; 0x0c
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	88 85       	ldd	r24, Y+8	; 0x08
    11b2:	99 85       	ldd	r25, Y+9	; 0x09
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	0f 92       	push	r0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	9b 81       	ldd	r25, Y+3	; 0x03
    11c2:	fc 01       	movw	r30, r24
    11c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    11c6:	8c 83       	std	Y+4, r24	; 0x04
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	88 23       	and	r24, r24
    11cc:	f9 f0       	breq	.+62     	; 0x120c <xQueueReceive+0x7e>
    11ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    11d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	b9 01       	movw	r22, r18
    11d8:	4f d2       	rcall	.+1182   	; 0x1678 <prvCopyDataFromQueue>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	2f ef       	ldi	r18, 0xFF	; 255
    11de:	28 0f       	add	r18, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	9b 81       	ldd	r25, Y+3	; 0x03
    11e4:	fc 01       	movw	r30, r24
    11e6:	22 8f       	std	Z+26, r18	; 0x1a
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 85       	ldd	r24, Z+8	; 0x08
    11f0:	88 23       	and	r24, r24
    11f2:	41 f0       	breq	.+16     	; 0x1204 <xQueueReceive+0x76>
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	9b 81       	ldd	r25, Y+3	; 0x03
    11f8:	08 96       	adiw	r24, 0x08	; 8
    11fa:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskRemoveFromEventList>
    11fe:	88 23       	and	r24, r24
    1200:	09 f0       	breq	.+2      	; 0x1204 <xQueueReceive+0x76>
    1202:	68 dc       	rcall	.-1840   	; 0xad4 <vPortYield>
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	61 c0       	rjmp	.+194    	; 0x12ce <xQueueReceive+0x140>
    120c:	8c 85       	ldd	r24, Y+12	; 0x0c
    120e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1210:	89 2b       	or	r24, r25
    1212:	21 f4       	brne	.+8      	; 0x121c <xQueueReceive+0x8e>
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	59 c0       	rjmp	.+178    	; 0x12ce <xQueueReceive+0x140>
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	88 23       	and	r24, r24
    1220:	31 f4       	brne	.+12     	; 0x122e <xQueueReceive+0xa0>
    1222:	ce 01       	movw	r24, r28
    1224:	05 96       	adiw	r24, 0x05	; 5
    1226:	0e 94 40 17 	call	0x2e80	; 0x2e80 <vTaskInternalSetTimeOutState>
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskSuspendAll>
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	0f 92       	push	r0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	fc 01       	movw	r30, r24
    1242:	85 8d       	ldd	r24, Z+29	; 0x1d
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	21 f4       	brne	.+8      	; 0x1250 <xQueueReceive+0xc2>
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	fc 01       	movw	r30, r24
    124e:	15 8e       	std	Z+29, r1	; 0x1d
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	fc 01       	movw	r30, r24
    1256:	86 8d       	ldd	r24, Z+30	; 0x1e
    1258:	8f 3f       	cpi	r24, 0xFF	; 255
    125a:	21 f4       	brne	.+8      	; 0x1264 <xQueueReceive+0xd6>
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	9b 81       	ldd	r25, Y+3	; 0x03
    1260:	fc 01       	movw	r30, r24
    1262:	16 8e       	std	Z+30, r1	; 0x1e
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	9e 01       	movw	r18, r28
    126a:	24 5f       	subi	r18, 0xF4	; 244
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	ce 01       	movw	r24, r28
    1270:	05 96       	adiw	r24, 0x05	; 5
    1272:	b9 01       	movw	r22, r18
    1274:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskCheckForTimeOut>
    1278:	88 23       	and	r24, r24
    127a:	e9 f4       	brne	.+58     	; 0x12b6 <xQueueReceive+0x128>
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	aa d2       	rcall	.+1364   	; 0x17d6 <prvIsQueueEmpty>
    1282:	88 23       	and	r24, r24
    1284:	91 f0       	breq	.+36     	; 0x12aa <xQueueReceive+0x11c>
    1286:	2c 85       	ldd	r18, Y+12	; 0x0c
    1288:	3d 85       	ldd	r19, Y+13	; 0x0d
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	41 96       	adiw	r24, 0x11	; 17
    1290:	b9 01       	movw	r22, r18
    1292:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <vTaskPlaceOnEventList>
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	3f d2       	rcall	.+1150   	; 0x171a <prvUnlockQueue>
    129c:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    12a0:	88 23       	and	r24, r24
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <xQueueReceive+0x118>
    12a4:	89 cf       	rjmp	.-238    	; 0x11b8 <xQueueReceive+0x2a>
    12a6:	16 dc       	rcall	.-2004   	; 0xad4 <vPortYield>
    12a8:	87 cf       	rjmp	.-242    	; 0x11b8 <xQueueReceive+0x2a>
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	35 d2       	rcall	.+1130   	; 0x171a <prvUnlockQueue>
    12b0:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    12b4:	81 cf       	rjmp	.-254    	; 0x11b8 <xQueueReceive+0x2a>
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	2f d2       	rcall	.+1118   	; 0x171a <prvUnlockQueue>
    12bc:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	88 d2       	rcall	.+1296   	; 0x17d6 <prvIsQueueEmpty>
    12c6:	88 23       	and	r24, r24
    12c8:	09 f4       	brne	.+2      	; 0x12cc <xQueueReceive+0x13e>
    12ca:	76 cf       	rjmp	.-276    	; 0x11b8 <xQueueReceive+0x2a>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	2d 96       	adiw	r28, 0x0d	; 13
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <xQueueSemaphoreTake>:
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	2d 97       	sbiw	r28, 0x0d	; 13
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	9b 87       	std	Y+11, r25	; 0x0b
    12f6:	8a 87       	std	Y+10, r24	; 0x0a
    12f8:	7d 87       	std	Y+13, r23	; 0x0d
    12fa:	6c 87       	std	Y+12, r22	; 0x0c
    12fc:	19 82       	std	Y+1, r1	; 0x01
    12fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1300:	9b 85       	ldd	r25, Y+11	; 0x0b
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	1a 82       	std	Y+2, r1	; 0x02
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	0f 92       	push	r0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	fc 01       	movw	r30, r24
    1314:	82 8d       	ldd	r24, Z+26	; 0x1a
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	88 23       	and	r24, r24
    131c:	41 f1       	breq	.+80     	; 0x136e <xQueueSemaphoreTake+0x8e>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	2f ef       	ldi	r18, 0xFF	; 255
    1322:	28 0f       	add	r18, r24
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	fc 01       	movw	r30, r24
    132a:	22 8f       	std	Z+26, r18	; 0x1a
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	fc 01       	movw	r30, r24
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	89 2b       	or	r24, r25
    1338:	41 f4       	brne	.+16     	; 0x134a <xQueueSemaphoreTake+0x6a>
    133a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <pvTaskIncrementMutexHeldCount>
    133e:	9c 01       	movw	r18, r24
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	fc 01       	movw	r30, r24
    1346:	35 83       	std	Z+5, r19	; 0x05
    1348:	24 83       	std	Z+4, r18	; 0x04
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	fc 01       	movw	r30, r24
    1350:	80 85       	ldd	r24, Z+8	; 0x08
    1352:	88 23       	and	r24, r24
    1354:	41 f0       	breq	.+16     	; 0x1366 <xQueueSemaphoreTake+0x86>
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	08 96       	adiw	r24, 0x08	; 8
    135c:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskRemoveFromEventList>
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <xQueueSemaphoreTake+0x86>
    1364:	b7 db       	rcall	.-2194   	; 0xad4 <vPortYield>
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8a c0       	rjmp	.+276    	; 0x1482 <xQueueSemaphoreTake+0x1a2>
    136e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1370:	9d 85       	ldd	r25, Y+13	; 0x0d
    1372:	89 2b       	or	r24, r25
    1374:	21 f4       	brne	.+8      	; 0x137e <xQueueSemaphoreTake+0x9e>
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	82 c0       	rjmp	.+260    	; 0x1482 <xQueueSemaphoreTake+0x1a2>
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	88 23       	and	r24, r24
    1382:	31 f4       	brne	.+12     	; 0x1390 <xQueueSemaphoreTake+0xb0>
    1384:	ce 01       	movw	r24, r28
    1386:	07 96       	adiw	r24, 0x07	; 7
    1388:	0e 94 40 17 	call	0x2e80	; 0x2e80 <vTaskInternalSetTimeOutState>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskSuspendAll>
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	0f 92       	push	r0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	fc 01       	movw	r30, r24
    13a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    13a6:	8f 3f       	cpi	r24, 0xFF	; 255
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <xQueueSemaphoreTake+0xd2>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	fc 01       	movw	r30, r24
    13b0:	15 8e       	std	Z+29, r1	; 0x1d
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	fc 01       	movw	r30, r24
    13b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    13ba:	8f 3f       	cpi	r24, 0xFF	; 255
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <xQueueSemaphoreTake+0xe6>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	fc 01       	movw	r30, r24
    13c4:	16 8e       	std	Z+30, r1	; 0x1e
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	9e 01       	movw	r18, r28
    13cc:	24 5f       	subi	r18, 0xF4	; 244
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	ce 01       	movw	r24, r28
    13d2:	07 96       	adiw	r24, 0x07	; 7
    13d4:	b9 01       	movw	r22, r18
    13d6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskCheckForTimeOut>
    13da:	88 23       	and	r24, r24
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <xQueueSemaphoreTake+0x100>
    13de:	31 c0       	rjmp	.+98     	; 0x1442 <xQueueSemaphoreTake+0x162>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	f8 d1       	rcall	.+1008   	; 0x17d6 <prvIsQueueEmpty>
    13e6:	88 23       	and	r24, r24
    13e8:	31 f1       	breq	.+76     	; 0x1436 <xQueueSemaphoreTake+0x156>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	fc 01       	movw	r30, r24
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	89 2b       	or	r24, r25
    13f6:	69 f4       	brne	.+26     	; 0x1412 <xQueueSemaphoreTake+0x132>
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	0f 92       	push	r0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	fc 01       	movw	r30, r24
    1404:	84 81       	ldd	r24, Z+4	; 0x04
    1406:	95 81       	ldd	r25, Z+5	; 0x05
    1408:	0e 94 c2 18 	call	0x3184	; 0x3184 <xTaskPriorityInherit>
    140c:	8a 83       	std	Y+2, r24	; 0x02
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	2c 85       	ldd	r18, Y+12	; 0x0c
    1414:	3d 85       	ldd	r19, Y+13	; 0x0d
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	41 96       	adiw	r24, 0x11	; 17
    141c:	b9 01       	movw	r22, r18
    141e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <vTaskPlaceOnEventList>
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	79 d1       	rcall	.+754    	; 0x171a <prvUnlockQueue>
    1428:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    142c:	88 23       	and	r24, r24
    142e:	09 f0       	breq	.+2      	; 0x1432 <xQueueSemaphoreTake+0x152>
    1430:	6b cf       	rjmp	.-298    	; 0x1308 <xQueueSemaphoreTake+0x28>
    1432:	50 db       	rcall	.-2400   	; 0xad4 <vPortYield>
    1434:	69 cf       	rjmp	.-302    	; 0x1308 <xQueueSemaphoreTake+0x28>
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	6f d1       	rcall	.+734    	; 0x171a <prvUnlockQueue>
    143c:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    1440:	63 cf       	rjmp	.-314    	; 0x1308 <xQueueSemaphoreTake+0x28>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	69 d1       	rcall	.+722    	; 0x171a <prvUnlockQueue>
    1448:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	c2 d1       	rcall	.+900    	; 0x17d6 <prvIsQueueEmpty>
    1452:	88 23       	and	r24, r24
    1454:	09 f4       	brne	.+2      	; 0x1458 <xQueueSemaphoreTake+0x178>
    1456:	58 cf       	rjmp	.-336    	; 0x1308 <xQueueSemaphoreTake+0x28>
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	88 23       	and	r24, r24
    145c:	89 f0       	breq	.+34     	; 0x1480 <xQueueSemaphoreTake+0x1a0>
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	0f 92       	push	r0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	15 d0       	rcall	.+42     	; 0x1494 <prvGetDisinheritPriorityAfterTimeout>
    146a:	8e 83       	std	Y+6, r24	; 0x06
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	fc 01       	movw	r30, r24
    1472:	84 81       	ldd	r24, Z+4	; 0x04
    1474:	95 81       	ldd	r25, Z+5	; 0x05
    1476:	6e 81       	ldd	r22, Y+6	; 0x06
    1478:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vTaskPriorityDisinheritAfterTimeout>
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	2d 96       	adiw	r28, 0x0d	; 13
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <prvGetDisinheritPriorityAfterTimeout>:
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	00 d0       	rcall	.+0      	; 0x149a <prvGetDisinheritPriorityAfterTimeout+0x6>
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	9b 83       	std	Y+3, r25	; 0x03
    14a0:	8a 83       	std	Y+2, r24	; 0x02
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	fc 01       	movw	r30, r24
    14a8:	81 89       	ldd	r24, Z+17	; 0x11
    14aa:	88 23       	and	r24, r24
    14ac:	69 f0       	breq	.+26     	; 0x14c8 <prvGetDisinheritPriorityAfterTimeout+0x34>
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	fc 01       	movw	r30, r24
    14b4:	86 89       	ldd	r24, Z+22	; 0x16
    14b6:	97 89       	ldd	r25, Z+23	; 0x17
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	98 2f       	mov	r25, r24
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	89 1b       	sub	r24, r25
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <prvGetDisinheritPriorityAfterTimeout+0x36>
    14c8:	19 82       	std	Y+1, r1	; 0x01
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <prvCopyDataToQueue>:
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	27 97       	sbiw	r28, 0x07	; 7
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	8b 83       	std	Y+3, r24	; 0x03
    14f0:	7e 83       	std	Y+6, r23	; 0x06
    14f2:	6d 83       	std	Y+5, r22	; 0x05
    14f4:	4f 83       	std	Y+7, r20	; 0x07
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	fc 01       	movw	r30, r24
    14fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1500:	8a 83       	std	Y+2, r24	; 0x02
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	fc 01       	movw	r30, r24
    1508:	84 8d       	ldd	r24, Z+28	; 0x1c
    150a:	88 23       	and	r24, r24
    150c:	b1 f4       	brne	.+44     	; 0x153a <prvCopyDataToQueue+0x62>
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	fc 01       	movw	r30, r24
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	89 2b       	or	r24, r25
    151a:	09 f0       	breq	.+2      	; 0x151e <prvCopyDataToQueue+0x46>
    151c:	9c c0       	rjmp	.+312    	; 0x1656 <prvCopyDataToQueue+0x17e>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	fc 01       	movw	r30, r24
    1524:	84 81       	ldd	r24, Z+4	; 0x04
    1526:	95 81       	ldd	r25, Z+5	; 0x05
    1528:	0e 94 6e 19 	call	0x32dc	; 0x32dc <xTaskPriorityDisinherit>
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	fc 01       	movw	r30, r24
    1534:	15 82       	std	Z+5, r1	; 0x05
    1536:	14 82       	std	Z+4, r1	; 0x04
    1538:	8e c0       	rjmp	.+284    	; 0x1656 <prvCopyDataToQueue+0x17e>
    153a:	8f 81       	ldd	r24, Y+7	; 0x07
    153c:	88 23       	and	r24, r24
    153e:	d9 f5       	brne	.+118    	; 0x15b6 <prvCopyDataToQueue+0xde>
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	fc 01       	movw	r30, r24
    1546:	84 8d       	ldd	r24, Z+28	; 0x1c
    1548:	48 2f       	mov	r20, r24
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	fc 01       	movw	r30, r24
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	2d 81       	ldd	r18, Y+5	; 0x05
    1558:	3e 81       	ldd	r19, Y+6	; 0x06
    155a:	b9 01       	movw	r22, r18
    155c:	0e 94 2d 38 	call	0x705a	; 0x705a <memcpy>
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	fc 01       	movw	r30, r24
    1566:	22 81       	ldd	r18, Z+2	; 0x02
    1568:	33 81       	ldd	r19, Z+3	; 0x03
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	fc 01       	movw	r30, r24
    1570:	84 8d       	ldd	r24, Z+28	; 0x1c
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	28 0f       	add	r18, r24
    1578:	39 1f       	adc	r19, r25
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	fc 01       	movw	r30, r24
    1580:	33 83       	std	Z+3, r19	; 0x03
    1582:	22 83       	std	Z+2, r18	; 0x02
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	fc 01       	movw	r30, r24
    158a:	22 81       	ldd	r18, Z+2	; 0x02
    158c:	33 81       	ldd	r19, Z+3	; 0x03
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	fc 01       	movw	r30, r24
    1594:	84 81       	ldd	r24, Z+4	; 0x04
    1596:	95 81       	ldd	r25, Z+5	; 0x05
    1598:	28 17       	cp	r18, r24
    159a:	39 07       	cpc	r19, r25
    159c:	08 f4       	brcc	.+2      	; 0x15a0 <prvCopyDataToQueue+0xc8>
    159e:	5b c0       	rjmp	.+182    	; 0x1656 <prvCopyDataToQueue+0x17e>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	fc 01       	movw	r30, r24
    15a6:	20 81       	ld	r18, Z
    15a8:	31 81       	ldd	r19, Z+1	; 0x01
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	fc 01       	movw	r30, r24
    15b0:	33 83       	std	Z+3, r19	; 0x03
    15b2:	22 83       	std	Z+2, r18	; 0x02
    15b4:	50 c0       	rjmp	.+160    	; 0x1656 <prvCopyDataToQueue+0x17e>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	fc 01       	movw	r30, r24
    15bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    15be:	48 2f       	mov	r20, r24
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	fc 01       	movw	r30, r24
    15c8:	86 81       	ldd	r24, Z+6	; 0x06
    15ca:	97 81       	ldd	r25, Z+7	; 0x07
    15cc:	2d 81       	ldd	r18, Y+5	; 0x05
    15ce:	3e 81       	ldd	r19, Y+6	; 0x06
    15d0:	b9 01       	movw	r22, r18
    15d2:	0e 94 2d 38 	call	0x705a	; 0x705a <memcpy>
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	fc 01       	movw	r30, r24
    15dc:	26 81       	ldd	r18, Z+6	; 0x06
    15de:	37 81       	ldd	r19, Z+7	; 0x07
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	fc 01       	movw	r30, r24
    15e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	91 95       	neg	r25
    15ee:	81 95       	neg	r24
    15f0:	91 09       	sbc	r25, r1
    15f2:	28 0f       	add	r18, r24
    15f4:	39 1f       	adc	r19, r25
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	fc 01       	movw	r30, r24
    15fc:	37 83       	std	Z+7, r19	; 0x07
    15fe:	26 83       	std	Z+6, r18	; 0x06
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	fc 01       	movw	r30, r24
    1606:	26 81       	ldd	r18, Z+6	; 0x06
    1608:	37 81       	ldd	r19, Z+7	; 0x07
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	fc 01       	movw	r30, r24
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	28 17       	cp	r18, r24
    1616:	39 07       	cpc	r19, r25
    1618:	a8 f4       	brcc	.+42     	; 0x1644 <prvCopyDataToQueue+0x16c>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	fc 01       	movw	r30, r24
    1620:	24 81       	ldd	r18, Z+4	; 0x04
    1622:	35 81       	ldd	r19, Z+5	; 0x05
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	fc 01       	movw	r30, r24
    162a:	84 8d       	ldd	r24, Z+28	; 0x1c
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	91 95       	neg	r25
    1632:	81 95       	neg	r24
    1634:	91 09       	sbc	r25, r1
    1636:	28 0f       	add	r18, r24
    1638:	39 1f       	adc	r19, r25
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	fc 01       	movw	r30, r24
    1640:	37 83       	std	Z+7, r19	; 0x07
    1642:	26 83       	std	Z+6, r18	; 0x06
    1644:	8f 81       	ldd	r24, Y+7	; 0x07
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	31 f4       	brne	.+12     	; 0x1656 <prvCopyDataToQueue+0x17e>
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	88 23       	and	r24, r24
    164e:	19 f0       	breq	.+6      	; 0x1656 <prvCopyDataToQueue+0x17e>
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	81 50       	subi	r24, 0x01	; 1
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	21 e0       	ldi	r18, 0x01	; 1
    165a:	28 0f       	add	r18, r24
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	fc 01       	movw	r30, r24
    1662:	22 8f       	std	Z+26, r18	; 0x1a
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	27 96       	adiw	r28, 0x07	; 7
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <prvCopyDataFromQueue>:
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	00 d0       	rcall	.+0      	; 0x167e <prvCopyDataFromQueue+0x6>
    167e:	1f 92       	push	r1
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	7c 83       	std	Y+4, r23	; 0x04
    168a:	6b 83       	std	Y+3, r22	; 0x03
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	fc 01       	movw	r30, r24
    1692:	84 8d       	ldd	r24, Z+28	; 0x1c
    1694:	88 23       	and	r24, r24
    1696:	c9 f1       	breq	.+114    	; 0x170a <prvCopyDataFromQueue+0x92>
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	fc 01       	movw	r30, r24
    169e:	26 81       	ldd	r18, Z+6	; 0x06
    16a0:	37 81       	ldd	r19, Z+7	; 0x07
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	fc 01       	movw	r30, r24
    16a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	28 0f       	add	r18, r24
    16b0:	39 1f       	adc	r19, r25
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	fc 01       	movw	r30, r24
    16b8:	37 83       	std	Z+7, r19	; 0x07
    16ba:	26 83       	std	Z+6, r18	; 0x06
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	fc 01       	movw	r30, r24
    16c2:	26 81       	ldd	r18, Z+6	; 0x06
    16c4:	37 81       	ldd	r19, Z+7	; 0x07
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	fc 01       	movw	r30, r24
    16cc:	84 81       	ldd	r24, Z+4	; 0x04
    16ce:	95 81       	ldd	r25, Z+5	; 0x05
    16d0:	28 17       	cp	r18, r24
    16d2:	39 07       	cpc	r19, r25
    16d4:	50 f0       	brcs	.+20     	; 0x16ea <prvCopyDataFromQueue+0x72>
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	fc 01       	movw	r30, r24
    16dc:	20 81       	ld	r18, Z
    16de:	31 81       	ldd	r19, Z+1	; 0x01
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	fc 01       	movw	r30, r24
    16e6:	37 83       	std	Z+7, r19	; 0x07
    16e8:	26 83       	std	Z+6, r18	; 0x06
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	fc 01       	movw	r30, r24
    16f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16f2:	48 2f       	mov	r20, r24
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	fc 01       	movw	r30, r24
    16fc:	26 81       	ldd	r18, Z+6	; 0x06
    16fe:	37 81       	ldd	r19, Z+7	; 0x07
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	b9 01       	movw	r22, r18
    1706:	0e 94 2d 38 	call	0x705a	; 0x705a <memcpy>
    170a:	00 00       	nop
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <prvUnlockQueue>:
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <prvUnlockQueue+0x6>
    1720:	1f 92       	push	r1
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	0f 92       	push	r0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	fc 01       	movw	r30, r24
    1736:	86 8d       	ldd	r24, Z+30	; 0x1e
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	12 c0       	rjmp	.+36     	; 0x1760 <prvUnlockQueue+0x46>
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	fc 01       	movw	r30, r24
    1742:	81 89       	ldd	r24, Z+17	; 0x11
    1744:	88 23       	and	r24, r24
    1746:	81 f0       	breq	.+32     	; 0x1768 <prvUnlockQueue+0x4e>
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	41 96       	adiw	r24, 0x11	; 17
    174e:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskRemoveFromEventList>
    1752:	88 23       	and	r24, r24
    1754:	11 f0       	breq	.+4      	; 0x175a <prvUnlockQueue+0x40>
    1756:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <vTaskMissedYield>
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	81 50       	subi	r24, 0x01	; 1
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	18 16       	cp	r1, r24
    1764:	5c f3       	brlt	.-42     	; 0x173c <prvUnlockQueue+0x22>
    1766:	01 c0       	rjmp	.+2      	; 0x176a <prvUnlockQueue+0x50>
    1768:	00 00       	nop
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	2f ef       	ldi	r18, 0xFF	; 255
    1770:	fc 01       	movw	r30, r24
    1772:	26 8f       	std	Z+30, r18	; 0x1e
    1774:	0f 90       	pop	r0
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	0f 92       	push	r0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	fc 01       	movw	r30, r24
    1784:	85 8d       	ldd	r24, Z+29	; 0x1d
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	12 c0       	rjmp	.+36     	; 0x17ae <prvUnlockQueue+0x94>
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	fc 01       	movw	r30, r24
    1790:	80 85       	ldd	r24, Z+8	; 0x08
    1792:	88 23       	and	r24, r24
    1794:	81 f0       	breq	.+32     	; 0x17b6 <prvUnlockQueue+0x9c>
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	08 96       	adiw	r24, 0x08	; 8
    179c:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <xTaskRemoveFromEventList>
    17a0:	88 23       	and	r24, r24
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <prvUnlockQueue+0x8e>
    17a4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <vTaskMissedYield>
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	81 50       	subi	r24, 0x01	; 1
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	18 16       	cp	r1, r24
    17b2:	5c f3       	brlt	.-42     	; 0x178a <prvUnlockQueue+0x70>
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <prvUnlockQueue+0x9e>
    17b6:	00 00       	nop
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	2f ef       	ldi	r18, 0xFF	; 255
    17be:	fc 01       	movw	r30, r24
    17c0:	25 8f       	std	Z+29, r18	; 0x1d
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	00 00       	nop
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <prvIsQueueEmpty>:
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	00 d0       	rcall	.+0      	; 0x17dc <prvIsQueueEmpty+0x6>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	9b 83       	std	Y+3, r25	; 0x03
    17e2:	8a 83       	std	Y+2, r24	; 0x02
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	0f 92       	push	r0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	9b 81       	ldd	r25, Y+3	; 0x03
    17ee:	fc 01       	movw	r30, r24
    17f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f2:	88 23       	and	r24, r24
    17f4:	19 f4       	brne	.+6      	; 0x17fc <prvIsQueueEmpty+0x26>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <prvIsQueueEmpty+0x28>
    17fc:	19 82       	std	Y+1, r1	; 0x01
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <prvIsQueueFull>:
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	00 d0       	rcall	.+0      	; 0x1816 <prvIsQueueFull+0x6>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	9b 83       	std	Y+3, r25	; 0x03
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	0f 92       	push	r0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	9b 81       	ldd	r25, Y+3	; 0x03
    1828:	fc 01       	movw	r30, r24
    182a:	22 8d       	ldd	r18, Z+26	; 0x1a
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	fc 01       	movw	r30, r24
    1832:	83 8d       	ldd	r24, Z+27	; 0x1b
    1834:	28 17       	cp	r18, r24
    1836:	19 f4       	brne	.+6      	; 0x183e <prvIsQueueFull+0x2e>
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <prvIsQueueFull+0x30>
    183e:	19 82       	std	Y+1, r1	; 0x01
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	27 97       	sbiw	r28, 0x07	; 7
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	7e 83       	std	Y+6, r23	; 0x06
    186c:	6d 83       	std	Y+5, r22	; 0x05
    186e:	4f 83       	std	Y+7, r20	; 0x07
    Queue_t * const pxQueue = xQueue;
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	9a 83       	std	Y+2, r25	; 0x02
    1876:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	0f 92       	push	r0
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	fc 01       	movw	r30, r24
    1884:	85 8d       	ldd	r24, Z+29	; 0x1d
    1886:	8f 3f       	cpi	r24, 0xFF	; 255
    1888:	21 f4       	brne	.+8      	; 0x1892 <vQueueWaitForMessageRestricted+0x40>
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	fc 01       	movw	r30, r24
    1890:	15 8e       	std	Z+29, r1	; 0x1d
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	fc 01       	movw	r30, r24
    1898:	86 8d       	ldd	r24, Z+30	; 0x1e
    189a:	8f 3f       	cpi	r24, 0xFF	; 255
    189c:	21 f4       	brne	.+8      	; 0x18a6 <vQueueWaitForMessageRestricted+0x54>
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	fc 01       	movw	r30, r24
    18a4:	16 8e       	std	Z+30, r1	; 0x1e
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	fc 01       	movw	r30, r24
    18b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b2:	88 23       	and	r24, r24
    18b4:	49 f4       	brne	.+18     	; 0x18c8 <vQueueWaitForMessageRestricted+0x76>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	41 96       	adiw	r24, 0x11	; 17
    18bc:	2d 81       	ldd	r18, Y+5	; 0x05
    18be:	3e 81       	ldd	r19, Y+6	; 0x06
    18c0:	4f 81       	ldd	r20, Y+7	; 0x07
    18c2:	b9 01       	movw	r22, r18
    18c4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	26 df       	rcall	.-436    	; 0x171a <prvUnlockQueue>
    }
    18ce:	00 00       	nop
    18d0:	27 96       	adiw	r28, 0x07	; 7
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    18e2:	0f 93       	push	r16
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	28 97       	sbiw	r28, 0x08	; 8
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	9d 83       	std	Y+5, r25	; 0x05
    18fa:	8c 83       	std	Y+4, r24	; 0x04
    18fc:	7f 83       	std	Y+7, r23	; 0x07
    18fe:	6e 83       	std	Y+6, r22	; 0x06
    1900:	48 87       	std	Y+8, r20	; 0x08
    1902:	88 85       	ldd	r24, Y+8	; 0x08
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	19 f4       	brne	.+6      	; 0x190e <xStreamBufferGenericCreate+0x2c>
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <xStreamBufferGenericCreate+0x2e>
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	8e 81       	ldd	r24, Y+6	; 0x06
    1912:	9f 81       	ldd	r25, Y+7	; 0x07
    1914:	89 2b       	or	r24, r25
    1916:	21 f4       	brne	.+8      	; 0x1920 <xStreamBufferGenericCreate+0x3e>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9f 83       	std	Y+7, r25	; 0x07
    191e:	8e 83       	std	Y+6, r24	; 0x06
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	9d 83       	std	Y+5, r25	; 0x05
    1928:	8c 83       	std	Y+4, r24	; 0x04
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	9d 81       	ldd	r25, Y+5	; 0x05
    192e:	40 96       	adiw	r24, 0x10	; 16
    1930:	0e 94 cc 01 	call	0x398	; 0x398 <pvPortMalloc>
    1934:	9b 83       	std	Y+3, r25	; 0x03
    1936:	8a 83       	std	Y+2, r24	; 0x02
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
    193c:	89 2b       	or	r24, r25
    193e:	69 f0       	breq	.+26     	; 0x195a <xStreamBufferGenericCreate+0x78>
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	bc 01       	movw	r22, r24
    1946:	60 5f       	subi	r22, 0xF0	; 240
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	2e 81       	ldd	r18, Y+6	; 0x06
    194c:	3f 81       	ldd	r19, Y+7	; 0x07
    194e:	4c 81       	ldd	r20, Y+4	; 0x04
    1950:	5d 81       	ldd	r21, Y+5	; 0x05
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	09 81       	ldd	r16, Y+1	; 0x01
    1958:	f7 d4       	rcall	.+2542   	; 0x2348 <prvInitialiseNewStreamBuffer>
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	28 96       	adiw	r28, 0x08	; 8
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	0f 91       	pop	r16
    1970:	08 95       	ret

00001972 <xStreamBufferReset>:
    1972:	0f 93       	push	r16
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	00 d0       	rcall	.+0      	; 0x197a <xStreamBufferReset+0x8>
    197a:	00 d0       	rcall	.+0      	; 0x197c <xStreamBufferReset+0xa>
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	9b 83       	std	Y+3, r25	; 0x03
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	19 82       	std	Y+1, r1	; 0x01
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	9b 81       	ldd	r25, Y+3	; 0x03
    1992:	dc 01       	movw	r26, r24
    1994:	1f 96       	adiw	r26, 0x0f	; 15
    1996:	8c 91       	ld	r24, X
    1998:	8c 83       	std	Y+4, r24	; 0x04
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	0f 92       	push	r0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	fc 01       	movw	r30, r24
    19a6:	80 85       	ldd	r24, Z+8	; 0x08
    19a8:	91 85       	ldd	r25, Z+9	; 0x09
    19aa:	89 2b       	or	r24, r25
    19ac:	71 f5       	brne	.+92     	; 0x1a0a <xStreamBufferReset+0x98>
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	dc 01       	movw	r26, r24
    19b4:	1a 96       	adiw	r26, 0x0a	; 10
    19b6:	8d 91       	ld	r24, X+
    19b8:	9c 91       	ld	r25, X
    19ba:	1b 97       	sbiw	r26, 0x0b	; 11
    19bc:	89 2b       	or	r24, r25
    19be:	29 f5       	brne	.+74     	; 0x1a0a <xStreamBufferReset+0x98>
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	dc 01       	movw	r26, r24
    19c6:	1e 96       	adiw	r26, 0x0e	; 14
    19c8:	ec 91       	ld	r30, X
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	dc 01       	movw	r26, r24
    19d0:	16 96       	adiw	r26, 0x06	; 6
    19d2:	2d 91       	ld	r18, X+
    19d4:	3c 91       	ld	r19, X
    19d6:	17 97       	sbiw	r26, 0x07	; 7
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	9b 81       	ldd	r25, Y+3	; 0x03
    19dc:	dc 01       	movw	r26, r24
    19de:	14 96       	adiw	r26, 0x04	; 4
    19e0:	4d 91       	ld	r20, X+
    19e2:	5c 91       	ld	r21, X
    19e4:	15 97       	sbiw	r26, 0x05	; 5
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ea:	dc 01       	movw	r26, r24
    19ec:	1c 96       	adiw	r26, 0x0c	; 12
    19ee:	6d 91       	ld	r22, X+
    19f0:	7c 91       	ld	r23, X
    19f2:	1d 97       	sbiw	r26, 0x0d	; 13
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	0e 2f       	mov	r16, r30
    19fa:	a6 d4       	rcall	.+2380   	; 0x2348 <prvInitialiseNewStreamBuffer>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	9b 81       	ldd	r25, Y+3	; 0x03
    1a04:	2c 81       	ldd	r18, Y+4	; 0x04
    1a06:	fc 01       	movw	r30, r24
    1a08:	27 87       	std	Z+15, r18	; 0x0f
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	26 96       	adiw	r28, 0x06	; 6
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <xStreamBufferSpacesAvailable>:
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <xStreamBufferSpacesAvailable+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <xStreamBufferSpacesAvailable+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	9c 83       	std	Y+4, r25	; 0x04
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	fc 01       	movw	r30, r24
    1a42:	24 81       	ldd	r18, Z+4	; 0x04
    1a44:	35 81       	ldd	r19, Z+5	; 0x05
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	82 0f       	add	r24, r18
    1a52:	93 1f       	adc	r25, r19
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	29 81       	ldd	r18, Y+1	; 0x01
    1a64:	3a 81       	ldd	r19, Y+2	; 0x02
    1a66:	a9 01       	movw	r20, r18
    1a68:	48 1b       	sub	r20, r24
    1a6a:	59 0b       	sbc	r21, r25
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	fc 01       	movw	r30, r24
    1a82:	24 81       	ldd	r18, Z+4	; 0x04
    1a84:	35 81       	ldd	r19, Z+5	; 0x05
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	82 17       	cp	r24, r18
    1a8c:	93 07       	cpc	r25, r19
    1a8e:	68 f0       	brcs	.+26     	; 0x1aaa <xStreamBufferSpacesAvailable+0x86>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	fc 01       	movw	r30, r24
    1a96:	84 81       	ldd	r24, Z+4	; 0x04
    1a98:	95 81       	ldd	r25, Z+5	; 0x05
    1a9a:	29 81       	ldd	r18, Y+1	; 0x01
    1a9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a9e:	a9 01       	movw	r20, r18
    1aa0:	48 1b       	sub	r20, r24
    1aa2:	59 0b       	sbc	r21, r25
    1aa4:	ca 01       	movw	r24, r20
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	26 96       	adiw	r28, 0x06	; 6
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <xStreamBufferSend>:
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	63 97       	sbiw	r28, 0x13	; 19
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	9d 87       	std	Y+13, r25	; 0x0d
    1ade:	8c 87       	std	Y+12, r24	; 0x0c
    1ae0:	7f 87       	std	Y+15, r23	; 0x0f
    1ae2:	6e 87       	std	Y+14, r22	; 0x0e
    1ae4:	59 8b       	std	Y+17, r21	; 0x11
    1ae6:	48 8b       	std	Y+16, r20	; 0x10
    1ae8:	3b 8b       	std	Y+19, r19	; 0x13
    1aea:	2a 8b       	std	Y+18, r18	; 0x12
    1aec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aee:	9d 85       	ldd	r25, Y+13	; 0x0d
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	1a 82       	std	Y+2, r1	; 0x02
    1af6:	19 82       	std	Y+1, r1	; 0x01
    1af8:	88 89       	ldd	r24, Y+16	; 0x10
    1afa:	99 89       	ldd	r25, Y+17	; 0x11
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	fc 01       	movw	r30, r24
    1b06:	86 85       	ldd	r24, Z+14	; 0x0e
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	81 70       	andi	r24, 0x01	; 1
    1b0e:	99 27       	eor	r25, r25
    1b10:	89 2b       	or	r24, r25
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <xStreamBufferSend+0x5e>
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	02 96       	adiw	r24, 0x02	; 2
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b20:	9b 89       	ldd	r25, Y+19	; 0x13
    1b22:	89 2b       	or	r24, r25
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <xStreamBufferSend+0x68>
    1b26:	42 c0       	rjmp	.+132    	; 0x1bac <xStreamBufferSend+0xec>
    1b28:	ce 01       	movw	r24, r28
    1b2a:	09 96       	adiw	r24, 0x09	; 9
    1b2c:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <vTaskSetTimeOutState>
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	0f 92       	push	r0
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	74 df       	rcall	.-280    	; 0x1a24 <xStreamBufferSpacesAvailable>
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	29 81       	ldd	r18, Y+1	; 0x01
    1b42:	3a 81       	ldd	r19, Y+2	; 0x02
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	28 17       	cp	r18, r24
    1b4a:	39 07       	cpc	r19, r25
    1b4c:	68 f4       	brcc	.+26     	; 0x1b68 <xStreamBufferSend+0xa8>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <xTaskNotifyStateClear>
    1b56:	0e 94 96 18 	call	0x312c	; 0x312c <xTaskGetCurrentTaskHandle>
    1b5a:	9c 01       	movw	r18, r24
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	fc 01       	movw	r30, r24
    1b62:	33 87       	std	Z+11, r19	; 0x0b
    1b64:	22 87       	std	Z+10, r18	; 0x0a
    1b66:	03 c0       	rjmp	.+6      	; 0x1b6e <xStreamBufferSend+0xae>
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	1f c0       	rjmp	.+62     	; 0x1bac <xStreamBufferSend+0xec>
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	8a 89       	ldd	r24, Y+18	; 0x12
    1b74:	9b 89       	ldd	r25, Y+19	; 0x13
    1b76:	7c 01       	movw	r14, r24
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	a9 01       	movw	r20, r18
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	cb 01       	movw	r24, r22
    1b88:	0e 94 a5 1a 	call	0x354a	; 0x354a <xTaskNotifyWait>
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	fc 01       	movw	r30, r24
    1b92:	13 86       	std	Z+11, r1	; 0x0b
    1b94:	12 86       	std	Z+10, r1	; 0x0a
    1b96:	9e 01       	movw	r18, r28
    1b98:	2e 5e       	subi	r18, 0xEE	; 238
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	09 96       	adiw	r24, 0x09	; 9
    1ba0:	b9 01       	movw	r22, r18
    1ba2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskCheckForTimeOut>
    1ba6:	88 23       	and	r24, r24
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <xStreamBufferSend+0xec>
    1baa:	c2 cf       	rjmp	.-124    	; 0x1b30 <xStreamBufferSend+0x70>
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb0:	89 2b       	or	r24, r25
    1bb2:	29 f4       	brne	.+10     	; 0x1bbe <xStreamBufferSend+0xfe>
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	35 df       	rcall	.-406    	; 0x1a24 <xStreamBufferSpacesAvailable>
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc2:	29 81       	ldd	r18, Y+1	; 0x01
    1bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc6:	48 89       	ldd	r20, Y+16	; 0x10
    1bc8:	59 89       	ldd	r21, Y+17	; 0x11
    1bca:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bcc:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	8f 01       	movw	r16, r30
    1bd4:	b8 d0       	rcall	.+368    	; 0x1d46 <prvWriteMessageToBuffer>
    1bd6:	98 87       	std	Y+8, r25	; 0x08
    1bd8:	8f 83       	std	Y+7, r24	; 0x07
    1bda:	8f 81       	ldd	r24, Y+7	; 0x07
    1bdc:	98 85       	ldd	r25, Y+8	; 0x08
    1bde:	89 2b       	or	r24, r25
    1be0:	39 f1       	breq	.+78     	; 0x1c30 <xStreamBufferSend+0x170>
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	6d d3       	rcall	.+1754   	; 0x22c2 <prvBytesInBuffer>
    1be8:	9c 01       	movw	r18, r24
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	fc 01       	movw	r30, r24
    1bf0:	86 81       	ldd	r24, Z+6	; 0x06
    1bf2:	97 81       	ldd	r25, Z+7	; 0x07
    1bf4:	28 17       	cp	r18, r24
    1bf6:	39 07       	cpc	r19, r25
    1bf8:	d8 f0       	brcs	.+54     	; 0x1c30 <xStreamBufferSend+0x170>
    1bfa:	1b d6       	rcall	.+3126   	; 0x2832 <vTaskSuspendAll>
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	fc 01       	movw	r30, r24
    1c02:	80 85       	ldd	r24, Z+8	; 0x08
    1c04:	91 85       	ldd	r25, Z+9	; 0x09
    1c06:	89 2b       	or	r24, r25
    1c08:	91 f0       	breq	.+36     	; 0x1c2e <xStreamBufferSend+0x16e>
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	fc 01       	movw	r30, r24
    1c10:	80 85       	ldd	r24, Z+8	; 0x08
    1c12:	91 85       	ldd	r25, Z+9	; 0x09
    1c14:	00 e0       	ldi	r16, 0x00	; 0
    1c16:	10 e0       	ldi	r17, 0x00	; 0
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	ba 01       	movw	r22, r20
    1c20:	0e 94 4a 1b 	call	0x3694	; 0x3694 <xTaskGenericNotify>
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	fc 01       	movw	r30, r24
    1c2a:	11 86       	std	Z+9, r1	; 0x09
    1c2c:	10 86       	std	Z+8, r1	; 0x08
    1c2e:	0e d6       	rcall	.+3100   	; 0x284c <xTaskResumeAll>
    1c30:	8f 81       	ldd	r24, Y+7	; 0x07
    1c32:	98 85       	ldd	r25, Y+8	; 0x08
    1c34:	63 96       	adiw	r28, 0x13	; 19
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	08 95       	ret

00001c4e <xStreamBufferSendFromISR>:
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	61 97       	sbiw	r28, 0x11	; 17
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	9b 87       	std	Y+11, r25	; 0x0b
    1c6c:	8a 87       	std	Y+10, r24	; 0x0a
    1c6e:	7d 87       	std	Y+13, r23	; 0x0d
    1c70:	6c 87       	std	Y+12, r22	; 0x0c
    1c72:	5f 87       	std	Y+15, r21	; 0x0f
    1c74:	4e 87       	std	Y+14, r20	; 0x0e
    1c76:	39 8b       	std	Y+17, r19	; 0x11
    1c78:	28 8b       	std	Y+16, r18	; 0x10
    1c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c84:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	fc 01       	movw	r30, r24
    1c90:	86 85       	ldd	r24, Z+14	; 0x0e
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	81 70       	andi	r24, 0x01	; 1
    1c98:	99 27       	eor	r25, r25
    1c9a:	89 2b       	or	r24, r25
    1c9c:	29 f0       	breq	.+10     	; 0x1ca8 <xStreamBufferSendFromISR+0x5a>
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	02 96       	adiw	r24, 0x02	; 2
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	bb de       	rcall	.-650    	; 0x1a24 <xStreamBufferSpacesAvailable>
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cba:	4e 85       	ldd	r20, Y+14	; 0x0e
    1cbc:	5f 85       	ldd	r21, Y+15	; 0x0f
    1cbe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cc0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	8f 01       	movw	r16, r30
    1cc8:	3e d0       	rcall	.+124    	; 0x1d46 <prvWriteMessageToBuffer>
    1cca:	98 87       	std	Y+8, r25	; 0x08
    1ccc:	8f 83       	std	Y+7, r24	; 0x07
    1cce:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd0:	98 85       	ldd	r25, Y+8	; 0x08
    1cd2:	89 2b       	or	r24, r25
    1cd4:	49 f1       	breq	.+82     	; 0x1d28 <xStreamBufferSendFromISR+0xda>
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	f3 d2       	rcall	.+1510   	; 0x22c2 <prvBytesInBuffer>
    1cdc:	9c 01       	movw	r18, r24
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	86 81       	ldd	r24, Z+6	; 0x06
    1ce6:	97 81       	ldd	r25, Z+7	; 0x07
    1ce8:	28 17       	cp	r18, r24
    1cea:	39 07       	cpc	r19, r25
    1cec:	e8 f0       	brcs	.+58     	; 0x1d28 <xStreamBufferSendFromISR+0xda>
    1cee:	19 86       	std	Y+9, r1	; 0x09
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	80 85       	ldd	r24, Z+8	; 0x08
    1cf8:	91 85       	ldd	r25, Z+9	; 0x09
    1cfa:	89 2b       	or	r24, r25
    1cfc:	a9 f0       	breq	.+42     	; 0x1d28 <xStreamBufferSendFromISR+0xda>
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	fc 01       	movw	r30, r24
    1d04:	80 85       	ldd	r24, Z+8	; 0x08
    1d06:	91 85       	ldd	r25, Z+9	; 0x09
    1d08:	28 89       	ldd	r18, Y+16	; 0x10
    1d0a:	39 89       	ldd	r19, Y+17	; 0x11
    1d0c:	79 01       	movw	r14, r18
    1d0e:	00 e0       	ldi	r16, 0x00	; 0
    1d10:	10 e0       	ldi	r17, 0x00	; 0
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	ba 01       	movw	r22, r20
    1d1a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <xTaskGenericNotifyFromISR>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	fc 01       	movw	r30, r24
    1d24:	11 86       	std	Z+9, r1	; 0x09
    1d26:	10 86       	std	Z+8, r1	; 0x08
    1d28:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2a:	98 85       	ldd	r25, Y+8	; 0x08
    1d2c:	61 96       	adiw	r28, 0x11	; 17
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	08 95       	ret

00001d46 <prvWriteMessageToBuffer>:
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	61 97       	sbiw	r28, 0x11	; 17
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	99 87       	std	Y+9, r25	; 0x09
    1d60:	88 87       	std	Y+8, r24	; 0x08
    1d62:	7b 87       	std	Y+11, r23	; 0x0b
    1d64:	6a 87       	std	Y+10, r22	; 0x0a
    1d66:	5d 87       	std	Y+13, r21	; 0x0d
    1d68:	4c 87       	std	Y+12, r20	; 0x0c
    1d6a:	3f 87       	std	Y+15, r19	; 0x0f
    1d6c:	2e 87       	std	Y+14, r18	; 0x0e
    1d6e:	19 8b       	std	Y+17, r17	; 0x11
    1d70:	08 8b       	std	Y+16, r16	; 0x10
    1d72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d76:	89 2b       	or	r24, r25
    1d78:	11 f4       	brne	.+4      	; 0x1d7e <prvWriteMessageToBuffer+0x38>
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	33 c0       	rjmp	.+102    	; 0x1de4 <prvWriteMessageToBuffer+0x9e>
    1d7e:	88 85       	ldd	r24, Y+8	; 0x08
    1d80:	99 85       	ldd	r25, Y+9	; 0x09
    1d82:	fc 01       	movw	r30, r24
    1d84:	86 85       	ldd	r24, Z+14	; 0x0e
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	81 70       	andi	r24, 0x01	; 1
    1d8c:	99 27       	eor	r25, r25
    1d8e:	89 2b       	or	r24, r25
    1d90:	a9 f4       	brne	.+42     	; 0x1dbc <prvWriteMessageToBuffer+0x76>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d9a:	9d 83       	std	Y+5, r25	; 0x05
    1d9c:	8c 83       	std	Y+4, r24	; 0x04
    1d9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1da2:	9f 83       	std	Y+7, r25	; 0x07
    1da4:	8e 83       	std	Y+6, r24	; 0x06
    1da6:	2c 81       	ldd	r18, Y+4	; 0x04
    1da8:	3d 81       	ldd	r19, Y+5	; 0x05
    1daa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dac:	9f 81       	ldd	r25, Y+7	; 0x07
    1dae:	28 17       	cp	r18, r24
    1db0:	39 07       	cpc	r19, r25
    1db2:	08 f4       	brcc	.+2      	; 0x1db6 <prvWriteMessageToBuffer+0x70>
    1db4:	c9 01       	movw	r24, r18
    1db6:	9d 87       	std	Y+13, r25	; 0x0d
    1db8:	8c 87       	std	Y+12, r24	; 0x0c
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <prvWriteMessageToBuffer+0x9e>
    1dbc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1dbe:	3f 85       	ldd	r19, Y+15	; 0x0f
    1dc0:	88 89       	ldd	r24, Y+16	; 0x10
    1dc2:	99 89       	ldd	r25, Y+17	; 0x11
    1dc4:	28 17       	cp	r18, r24
    1dc6:	39 07       	cpc	r19, r25
    1dc8:	60 f0       	brcs	.+24     	; 0x1de2 <prvWriteMessageToBuffer+0x9c>
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	9e 01       	movw	r18, r28
    1dd0:	24 5f       	subi	r18, 0xF4	; 244
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	88 85       	ldd	r24, Y+8	; 0x08
    1dd6:	99 85       	ldd	r25, Y+9	; 0x09
    1dd8:	42 e0       	ldi	r20, 0x02	; 2
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	b9 01       	movw	r22, r18
    1dde:	3b d1       	rcall	.+630    	; 0x2056 <prvWriteBytesToBuffer>
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <prvWriteMessageToBuffer+0x9e>
    1de2:	19 82       	std	Y+1, r1	; 0x01
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	88 23       	and	r24, r24
    1de8:	59 f0       	breq	.+22     	; 0x1e00 <prvWriteMessageToBuffer+0xba>
    1dea:	4c 85       	ldd	r20, Y+12	; 0x0c
    1dec:	5d 85       	ldd	r21, Y+13	; 0x0d
    1dee:	2a 85       	ldd	r18, Y+10	; 0x0a
    1df0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1df2:	88 85       	ldd	r24, Y+8	; 0x08
    1df4:	99 85       	ldd	r25, Y+9	; 0x09
    1df6:	b9 01       	movw	r22, r18
    1df8:	2e d1       	rcall	.+604    	; 0x2056 <prvWriteBytesToBuffer>
    1dfa:	9b 83       	std	Y+3, r25	; 0x03
    1dfc:	8a 83       	std	Y+2, r24	; 0x02
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <prvWriteMessageToBuffer+0xbe>
    1e00:	1b 82       	std	Y+3, r1	; 0x03
    1e02:	1a 82       	std	Y+2, r1	; 0x02
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	61 96       	adiw	r28, 0x11	; 17
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <xStreamBufferReceive>:
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	60 97       	sbiw	r28, 0x10	; 16
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	9a 87       	std	Y+10, r25	; 0x0a
    1e3c:	89 87       	std	Y+9, r24	; 0x09
    1e3e:	7c 87       	std	Y+12, r23	; 0x0c
    1e40:	6b 87       	std	Y+11, r22	; 0x0b
    1e42:	5e 87       	std	Y+14, r21	; 0x0e
    1e44:	4d 87       	std	Y+13, r20	; 0x0d
    1e46:	38 8b       	std	Y+16, r19	; 0x10
    1e48:	2f 87       	std	Y+15, r18	; 0x0f
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	98 87       	std	Y+8, r25	; 0x08
    1e50:	8f 83       	std	Y+7, r24	; 0x07
    1e52:	1a 82       	std	Y+2, r1	; 0x02
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	8f 81       	ldd	r24, Y+7	; 0x07
    1e58:	98 85       	ldd	r25, Y+8	; 0x08
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	86 85       	ldd	r24, Z+14	; 0x0e
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	99 27       	eor	r25, r25
    1e66:	89 2b       	or	r24, r25
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <xStreamBufferReceive+0x56>
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <xStreamBufferReceive+0x5a>
    1e74:	1e 82       	std	Y+6, r1	; 0x06
    1e76:	1d 82       	std	Y+5, r1	; 0x05
    1e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7a:	98 89       	ldd	r25, Y+16	; 0x10
    1e7c:	89 2b       	or	r24, r25
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <xStreamBufferReceive+0x64>
    1e80:	3c c0       	rjmp	.+120    	; 0x1efa <xStreamBufferReceive+0xdc>
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	0f 92       	push	r0
    1e88:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8a:	98 85       	ldd	r25, Y+8	; 0x08
    1e8c:	1a d2       	rcall	.+1076   	; 0x22c2 <prvBytesInBuffer>
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	2b 81       	ldd	r18, Y+3	; 0x03
    1e94:	3c 81       	ldd	r19, Y+4	; 0x04
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	82 17       	cp	r24, r18
    1e9c:	93 07       	cpc	r25, r19
    1e9e:	60 f0       	brcs	.+24     	; 0x1eb8 <xStreamBufferReceive+0x9a>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <xTaskNotifyStateClear>
    1ea8:	0e 94 96 18 	call	0x312c	; 0x312c <xTaskGetCurrentTaskHandle>
    1eac:	9c 01       	movw	r18, r24
    1eae:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb0:	98 85       	ldd	r25, Y+8	; 0x08
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	31 87       	std	Z+9, r19	; 0x09
    1eb6:	20 87       	std	Z+8, r18	; 0x08
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	82 17       	cp	r24, r18
    1ec6:	93 07       	cpc	r25, r19
    1ec8:	e8 f0       	brcs	.+58     	; 0x1f04 <xStreamBufferReceive+0xe6>
    1eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ecc:	98 89       	ldd	r25, Y+16	; 0x10
    1ece:	7c 01       	movw	r14, r24
    1ed0:	00 e0       	ldi	r16, 0x00	; 0
    1ed2:	10 e0       	ldi	r17, 0x00	; 0
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	a9 01       	movw	r20, r18
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	cb 01       	movw	r24, r22
    1ee0:	0e 94 a5 1a 	call	0x354a	; 0x354a <xTaskNotifyWait>
    1ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee6:	98 85       	ldd	r25, Y+8	; 0x08
    1ee8:	fc 01       	movw	r30, r24
    1eea:	11 86       	std	Z+9, r1	; 0x09
    1eec:	10 86       	std	Z+8, r1	; 0x08
    1eee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef0:	98 85       	ldd	r25, Y+8	; 0x08
    1ef2:	e7 d1       	rcall	.+974    	; 0x22c2 <prvBytesInBuffer>
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	05 c0       	rjmp	.+10     	; 0x1f04 <xStreamBufferReceive+0xe6>
    1efa:	8f 81       	ldd	r24, Y+7	; 0x07
    1efc:	98 85       	ldd	r25, Y+8	; 0x08
    1efe:	e1 d1       	rcall	.+962    	; 0x22c2 <prvBytesInBuffer>
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	2b 81       	ldd	r18, Y+3	; 0x03
    1f06:	3c 81       	ldd	r19, Y+4	; 0x04
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	82 17       	cp	r24, r18
    1f0e:	93 07       	cpc	r25, r19
    1f10:	68 f5       	brcc	.+90     	; 0x1f6c <xStreamBufferReceive+0x14e>
    1f12:	ed 81       	ldd	r30, Y+5	; 0x05
    1f14:	fe 81       	ldd	r31, Y+6	; 0x06
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f1c:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8f 81       	ldd	r24, Y+7	; 0x07
    1f24:	98 85       	ldd	r25, Y+8	; 0x08
    1f26:	8f 01       	movw	r16, r30
    1f28:	30 d0       	rcall	.+96     	; 0x1f8a <prvReadMessageFromBuffer>
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	89 2b       	or	r24, r25
    1f34:	d9 f0       	breq	.+54     	; 0x1f6c <xStreamBufferReceive+0x14e>
    1f36:	7d d4       	rcall	.+2298   	; 0x2832 <vTaskSuspendAll>
    1f38:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3a:	98 85       	ldd	r25, Y+8	; 0x08
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	82 85       	ldd	r24, Z+10	; 0x0a
    1f40:	93 85       	ldd	r25, Z+11	; 0x0b
    1f42:	89 2b       	or	r24, r25
    1f44:	91 f0       	breq	.+36     	; 0x1f6a <xStreamBufferReceive+0x14c>
    1f46:	8f 81       	ldd	r24, Y+7	; 0x07
    1f48:	98 85       	ldd	r25, Y+8	; 0x08
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	82 85       	ldd	r24, Z+10	; 0x0a
    1f4e:	93 85       	ldd	r25, Z+11	; 0x0b
    1f50:	00 e0       	ldi	r16, 0x00	; 0
    1f52:	10 e0       	ldi	r17, 0x00	; 0
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	ba 01       	movw	r22, r20
    1f5c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <xTaskGenericNotify>
    1f60:	8f 81       	ldd	r24, Y+7	; 0x07
    1f62:	98 85       	ldd	r25, Y+8	; 0x08
    1f64:	fc 01       	movw	r30, r24
    1f66:	13 86       	std	Z+11, r1	; 0x0b
    1f68:	12 86       	std	Z+10, r1	; 0x0a
    1f6a:	70 d4       	rcall	.+2272   	; 0x284c <xTaskResumeAll>
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	60 96       	adiw	r28, 0x10	; 16
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	08 95       	ret

00001f8a <prvReadMessageFromBuffer>:
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	62 97       	sbiw	r28, 0x12	; 18
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	9a 87       	std	Y+10, r25	; 0x0a
    1fa4:	89 87       	std	Y+9, r24	; 0x09
    1fa6:	7c 87       	std	Y+12, r23	; 0x0c
    1fa8:	6b 87       	std	Y+11, r22	; 0x0b
    1faa:	5e 87       	std	Y+14, r21	; 0x0e
    1fac:	4d 87       	std	Y+13, r20	; 0x0d
    1fae:	38 8b       	std	Y+16, r19	; 0x10
    1fb0:	2f 87       	std	Y+15, r18	; 0x0f
    1fb2:	1a 8b       	std	Y+18, r17	; 0x12
    1fb4:	09 8b       	std	Y+17, r16	; 0x11
    1fb6:	89 89       	ldd	r24, Y+17	; 0x11
    1fb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fba:	89 2b       	or	r24, r25
    1fbc:	81 f1       	breq	.+96     	; 0x201e <prvReadMessageFromBuffer+0x94>
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	80 81       	ld	r24, Z
    1fc6:	91 81       	ldd	r25, Z+1	; 0x01
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fce:	38 89       	ldd	r19, Y+16	; 0x10
    1fd0:	49 89       	ldd	r20, Y+17	; 0x11
    1fd2:	5a 89       	ldd	r21, Y+18	; 0x12
    1fd4:	be 01       	movw	r22, r28
    1fd6:	69 5f       	subi	r22, 0xF9	; 249
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	ca d0       	rcall	.+404    	; 0x2174 <prvReadBytesFromBuffer>
    1fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe2:	98 85       	ldd	r25, Y+8	; 0x08
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fea:	38 89       	ldd	r19, Y+16	; 0x10
    1fec:	89 89       	ldd	r24, Y+17	; 0x11
    1fee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 1b       	sub	r20, r24
    1ff4:	59 0b       	sbc	r21, r25
    1ff6:	ca 01       	movw	r24, r20
    1ff8:	98 8b       	std	Y+16, r25	; 0x10
    1ffa:	8f 87       	std	Y+15, r24	; 0x0f
    1ffc:	29 81       	ldd	r18, Y+1	; 0x01
    1ffe:	3a 81       	ldd	r19, Y+2	; 0x02
    2000:	8d 85       	ldd	r24, Y+13	; 0x0d
    2002:	9e 85       	ldd	r25, Y+14	; 0x0e
    2004:	82 17       	cp	r24, r18
    2006:	93 07       	cpc	r25, r19
    2008:	70 f4       	brcc	.+28     	; 0x2026 <prvReadMessageFromBuffer+0x9c>
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	2b 81       	ldd	r18, Y+3	; 0x03
    2010:	3c 81       	ldd	r19, Y+4	; 0x04
    2012:	fc 01       	movw	r30, r24
    2014:	31 83       	std	Z+1, r19	; 0x01
    2016:	20 83       	st	Z, r18
    2018:	1a 82       	std	Y+2, r1	; 0x02
    201a:	19 82       	std	Y+1, r1	; 0x01
    201c:	04 c0       	rjmp	.+8      	; 0x2026 <prvReadMessageFromBuffer+0x9c>
    201e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2020:	9e 85       	ldd	r25, Y+14	; 0x0e
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	2f 85       	ldd	r18, Y+15	; 0x0f
    2028:	38 89       	ldd	r19, Y+16	; 0x10
    202a:	49 81       	ldd	r20, Y+1	; 0x01
    202c:	5a 81       	ldd	r21, Y+2	; 0x02
    202e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2030:	7c 85       	ldd	r23, Y+12	; 0x0c
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	9e d0       	rcall	.+316    	; 0x2174 <prvReadBytesFromBuffer>
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	62 96       	adiw	r28, 0x12	; 18
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	08 95       	ret

00002056 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	2e 97       	sbiw	r28, 0x0e	; 14
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	9a 87       	std	Y+10, r25	; 0x0a
    206c:	89 87       	std	Y+9, r24	; 0x09
    206e:	7c 87       	std	Y+12, r23	; 0x0c
    2070:	6b 87       	std	Y+11, r22	; 0x0b
    2072:	5e 87       	std	Y+14, r21	; 0x0e
    2074:	4d 87       	std	Y+13, r20	; 0x0d
size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	fc 01       	movw	r30, r24
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
    which may be less than the total number of bytes that need to be added if
    the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	fc 01       	movw	r30, r24
    208a:	24 81       	ldd	r18, Z+4	; 0x04
    208c:	35 81       	ldd	r19, Z+5	; 0x05
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	a9 01       	movw	r20, r18
    2094:	48 1b       	sub	r20, r24
    2096:	59 0b       	sbc	r21, r25
    2098:	ca 01       	movw	r24, r20
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
    20a6:	2b 81       	ldd	r18, Y+3	; 0x03
    20a8:	3c 81       	ldd	r19, Y+4	; 0x04
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	08 f4       	brcc	.+2      	; 0x20b6 <prvWriteBytesToBuffer+0x60>
    20b4:	c9 01       	movw	r24, r18
    20b6:	98 87       	std	Y+8, r25	; 0x08
    20b8:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20be:	fc 01       	movw	r30, r24
    20c0:	24 85       	ldd	r18, Z+12	; 0x0c
    20c2:	35 85       	ldd	r19, Z+13	; 0x0d
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	82 0f       	add	r24, r18
    20ca:	93 1f       	adc	r25, r19
    20cc:	4f 81       	ldd	r20, Y+7	; 0x07
    20ce:	58 85       	ldd	r21, Y+8	; 0x08
    20d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    20d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    20d4:	b9 01       	movw	r22, r18
    20d6:	0e 94 2d 38 	call	0x705a	; 0x705a <memcpy>

    /* If the number of bytes written was less than the number that could be
    written in the first write... */
    if( xCount > xFirstLength )
    20da:	2d 85       	ldd	r18, Y+13	; 0x0d
    20dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    20de:	8f 81       	ldd	r24, Y+7	; 0x07
    20e0:	98 85       	ldd	r25, Y+8	; 0x08
    20e2:	82 17       	cp	r24, r18
    20e4:	93 07       	cpc	r25, r19
    20e6:	a8 f4       	brcc	.+42     	; 0x2112 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    20e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    20ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    20ec:	8f 81       	ldd	r24, Y+7	; 0x07
    20ee:	98 85       	ldd	r25, Y+8	; 0x08
    20f0:	a9 01       	movw	r20, r18
    20f2:	48 1b       	sub	r20, r24
    20f4:	59 0b       	sbc	r21, r25
    20f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    20f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    20fa:	8f 81       	ldd	r24, Y+7	; 0x07
    20fc:	98 85       	ldd	r25, Y+8	; 0x08
    20fe:	28 0f       	add	r18, r24
    2100:	39 1f       	adc	r19, r25
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	fc 01       	movw	r30, r24
    2108:	84 85       	ldd	r24, Z+12	; 0x0c
    210a:	95 85       	ldd	r25, Z+13	; 0x0d
    210c:	b9 01       	movw	r22, r18
    210e:	0e 94 2d 38 	call	0x705a	; 0x705a <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2112:	29 81       	ldd	r18, Y+1	; 0x01
    2114:	3a 81       	ldd	r19, Y+2	; 0x02
    2116:	8d 85       	ldd	r24, Y+13	; 0x0d
    2118:	9e 85       	ldd	r25, Y+14	; 0x0e
    211a:	82 0f       	add	r24, r18
    211c:	93 1f       	adc	r25, r19
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
    if( xNextHead >= pxStreamBuffer->xLength )
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	fc 01       	movw	r30, r24
    2128:	24 81       	ldd	r18, Z+4	; 0x04
    212a:	35 81       	ldd	r19, Z+5	; 0x05
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	9a 81       	ldd	r25, Y+2	; 0x02
    2130:	82 17       	cp	r24, r18
    2132:	93 07       	cpc	r25, r19
    2134:	68 f0       	brcs	.+26     	; 0x2150 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	fc 01       	movw	r30, r24
    213c:	84 81       	ldd	r24, Z+4	; 0x04
    213e:	95 81       	ldd	r25, Z+5	; 0x05
    2140:	29 81       	ldd	r18, Y+1	; 0x01
    2142:	3a 81       	ldd	r19, Y+2	; 0x02
    2144:	a9 01       	movw	r20, r18
    2146:	48 1b       	sub	r20, r24
    2148:	59 0b       	sbc	r21, r25
    214a:	ca 01       	movw	r24, r20
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    2150:	89 85       	ldd	r24, Y+9	; 0x09
    2152:	9a 85       	ldd	r25, Y+10	; 0x0a
    2154:	29 81       	ldd	r18, Y+1	; 0x01
    2156:	3a 81       	ldd	r19, Y+2	; 0x02
    2158:	fc 01       	movw	r30, r24
    215a:	33 83       	std	Z+3, r19	; 0x03
    215c:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    215e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2160:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2162:	2e 96       	adiw	r28, 0x0e	; 14
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret

00002174 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	66 97       	sbiw	r28, 0x16	; 22
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	98 8b       	std	Y+16, r25	; 0x10
    218a:	8f 87       	std	Y+15, r24	; 0x0f
    218c:	7a 8b       	std	Y+18, r23	; 0x12
    218e:	69 8b       	std	Y+17, r22	; 0x11
    2190:	5c 8b       	std	Y+20, r21	; 0x14
    2192:	4b 8b       	std	Y+19, r20	; 0x13
    2194:	3e 8b       	std	Y+22, r19	; 0x16
    2196:	2d 8b       	std	Y+21, r18	; 0x15
size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    2198:	8d 89       	ldd	r24, Y+21	; 0x15
    219a:	9e 89       	ldd	r25, Y+22	; 0x16
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
    21a8:	2b 81       	ldd	r18, Y+3	; 0x03
    21aa:	3c 81       	ldd	r19, Y+4	; 0x04
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	28 17       	cp	r18, r24
    21b2:	39 07       	cpc	r19, r25
    21b4:	08 f4       	brcc	.+2      	; 0x21b8 <prvReadBytesFromBuffer+0x44>
    21b6:	c9 01       	movw	r24, r18
    21b8:	98 87       	std	Y+8, r25	; 0x08
    21ba:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    21bc:	8f 81       	ldd	r24, Y+7	; 0x07
    21be:	98 85       	ldd	r25, Y+8	; 0x08
    21c0:	89 2b       	or	r24, r25
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <prvReadBytesFromBuffer+0x52>
    21c4:	73 c0       	rjmp	.+230    	; 0x22ac <__stack+0xad>
    {
        xNextTail = pxStreamBuffer->xTail;
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	98 89       	ldd	r25, Y+16	; 0x10
    21ca:	fc 01       	movw	r30, r24
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
        less than the number wanted if the data wraps around to the start of
        the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	98 89       	ldd	r25, Y+16	; 0x10
    21d8:	fc 01       	movw	r30, r24
    21da:	24 81       	ldd	r18, Z+4	; 0x04
    21dc:	35 81       	ldd	r19, Z+5	; 0x05
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	a9 01       	movw	r20, r18
    21e4:	48 1b       	sub	r20, r24
    21e6:	59 0b       	sbc	r21, r25
    21e8:	ca 01       	movw	r24, r20
    21ea:	9a 87       	std	Y+10, r25	; 0x0a
    21ec:	89 87       	std	Y+9, r24	; 0x09
    21ee:	8f 81       	ldd	r24, Y+7	; 0x07
    21f0:	98 85       	ldd	r25, Y+8	; 0x08
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	8b 87       	std	Y+11, r24	; 0x0b
    21f6:	29 85       	ldd	r18, Y+9	; 0x09
    21f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    21fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    21fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    21fe:	28 17       	cp	r18, r24
    2200:	39 07       	cpc	r19, r25
    2202:	08 f4       	brcc	.+2      	; 0x2206 <__stack+0x7>
    2204:	c9 01       	movw	r24, r18
    2206:	9e 87       	std	Y+14, r25	; 0x0e
    2208:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
        read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	98 89       	ldd	r25, Y+16	; 0x10
    220e:	fc 01       	movw	r30, r24
    2210:	24 85       	ldd	r18, Z+12	; 0x0c
    2212:	35 85       	ldd	r19, Z+13	; 0x0d
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	28 0f       	add	r18, r24
    221a:	39 1f       	adc	r19, r25
    221c:	4d 85       	ldd	r20, Y+13	; 0x0d
    221e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2220:	89 89       	ldd	r24, Y+17	; 0x11
    2222:	9a 89       	ldd	r25, Y+18	; 0x12
    2224:	b9 01       	movw	r22, r18
    2226:	0e 94 2d 38 	call	0x705a	; 0x705a <memcpy>

        /* If the total number of wanted bytes is greater than the number
        that could be read in the first read... */
        if( xCount > xFirstLength )
    222a:	2f 81       	ldd	r18, Y+7	; 0x07
    222c:	38 85       	ldd	r19, Y+8	; 0x08
    222e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2230:	9e 85       	ldd	r25, Y+14	; 0x0e
    2232:	82 17       	cp	r24, r18
    2234:	93 07       	cpc	r25, r19
    2236:	a0 f4       	brcc	.+40     	; 0x2260 <__stack+0x61>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2238:	2f 81       	ldd	r18, Y+7	; 0x07
    223a:	38 85       	ldd	r19, Y+8	; 0x08
    223c:	8d 85       	ldd	r24, Y+13	; 0x0d
    223e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2240:	a9 01       	movw	r20, r18
    2242:	48 1b       	sub	r20, r24
    2244:	59 0b       	sbc	r21, r25
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	98 89       	ldd	r25, Y+16	; 0x10
    224a:	fc 01       	movw	r30, r24
    224c:	64 85       	ldd	r22, Z+12	; 0x0c
    224e:	75 85       	ldd	r23, Z+13	; 0x0d
    2250:	29 89       	ldd	r18, Y+17	; 0x11
    2252:	3a 89       	ldd	r19, Y+18	; 0x12
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	82 0f       	add	r24, r18
    225a:	93 1f       	adc	r25, r19
    225c:	0e 94 2d 38 	call	0x705a	; 0x705a <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
        the buffer. */
        xNextTail += xCount;
    2260:	29 81       	ldd	r18, Y+1	; 0x01
    2262:	3a 81       	ldd	r19, Y+2	; 0x02
    2264:	8f 81       	ldd	r24, Y+7	; 0x07
    2266:	98 85       	ldd	r25, Y+8	; 0x08
    2268:	82 0f       	add	r24, r18
    226a:	93 1f       	adc	r25, r19
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    2270:	8f 85       	ldd	r24, Y+15	; 0x0f
    2272:	98 89       	ldd	r25, Y+16	; 0x10
    2274:	fc 01       	movw	r30, r24
    2276:	24 81       	ldd	r18, Z+4	; 0x04
    2278:	35 81       	ldd	r19, Z+5	; 0x05
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	82 17       	cp	r24, r18
    2280:	93 07       	cpc	r25, r19
    2282:	68 f0       	brcs	.+26     	; 0x229e <__stack+0x9f>
        {
            xNextTail -= pxStreamBuffer->xLength;
    2284:	8f 85       	ldd	r24, Y+15	; 0x0f
    2286:	98 89       	ldd	r25, Y+16	; 0x10
    2288:	fc 01       	movw	r30, r24
    228a:	84 81       	ldd	r24, Z+4	; 0x04
    228c:	95 81       	ldd	r25, Z+5	; 0x05
    228e:	29 81       	ldd	r18, Y+1	; 0x01
    2290:	3a 81       	ldd	r19, Y+2	; 0x02
    2292:	a9 01       	movw	r20, r18
    2294:	48 1b       	sub	r20, r24
    2296:	59 0b       	sbc	r21, r25
    2298:	ca 01       	movw	r24, r20
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    229e:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a0:	98 89       	ldd	r25, Y+16	; 0x10
    22a2:	29 81       	ldd	r18, Y+1	; 0x01
    22a4:	3a 81       	ldd	r19, Y+2	; 0x02
    22a6:	fc 01       	movw	r30, r24
    22a8:	31 83       	std	Z+1, r19	; 0x01
    22aa:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    22ac:	8f 81       	ldd	r24, Y+7	; 0x07
    22ae:	98 85       	ldd	r25, Y+8	; 0x08
}
    22b0:	66 96       	adiw	r28, 0x16	; 22
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <prvBytesInBuffer+0x6>
    22c8:	1f 92       	push	r1
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	fc 01       	movw	r30, r24
    22d8:	24 81       	ldd	r18, Z+4	; 0x04
    22da:	35 81       	ldd	r19, Z+5	; 0x05
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	fc 01       	movw	r30, r24
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	82 0f       	add	r24, r18
    22e8:	93 1f       	adc	r25, r19
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	fc 01       	movw	r30, r24
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	29 81       	ldd	r18, Y+1	; 0x01
    22fa:	3a 81       	ldd	r19, Y+2	; 0x02
    22fc:	a9 01       	movw	r20, r18
    22fe:	48 1b       	sub	r20, r24
    2300:	59 0b       	sbc	r21, r25
    2302:	ca 01       	movw	r24, r20
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
    if ( xCount >= pxStreamBuffer->xLength )
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	fc 01       	movw	r30, r24
    230e:	24 81       	ldd	r18, Z+4	; 0x04
    2310:	35 81       	ldd	r19, Z+5	; 0x05
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	82 17       	cp	r24, r18
    2318:	93 07       	cpc	r25, r19
    231a:	68 f0       	brcs	.+26     	; 0x2336 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	fc 01       	movw	r30, r24
    2322:	84 81       	ldd	r24, Z+4	; 0x04
    2324:	95 81       	ldd	r25, Z+5	; 0x05
    2326:	29 81       	ldd	r18, Y+1	; 0x01
    2328:	3a 81       	ldd	r19, Y+2	; 0x02
    232a:	a9 01       	movw	r20, r18
    232c:	48 1b       	sub	r20, r24
    232e:	59 0b       	sbc	r21, r25
    2330:	ca 01       	movw	r24, r20
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    2348:	0f 93       	push	r16
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	29 97       	sbiw	r28, 0x09	; 9
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	7c 83       	std	Y+4, r23	; 0x04
    2364:	6b 83       	std	Y+3, r22	; 0x03
    2366:	5e 83       	std	Y+6, r21	; 0x06
    2368:	4d 83       	std	Y+5, r20	; 0x05
    236a:	38 87       	std	Y+8, r19	; 0x08
    236c:	2f 83       	std	Y+7, r18	; 0x07
    236e:	09 87       	std	Y+9, r16	; 0x09
        const BaseType_t xWriteValue = 0x55;
        configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	40 e1       	ldi	r20, 0x10	; 16
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	0e 94 36 38 	call	0x706c	; 0x706c <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	2b 81       	ldd	r18, Y+3	; 0x03
    2386:	3c 81       	ldd	r19, Y+4	; 0x04
    2388:	fc 01       	movw	r30, r24
    238a:	35 87       	std	Z+13, r19	; 0x0d
    238c:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	2d 81       	ldd	r18, Y+5	; 0x05
    2394:	3e 81       	ldd	r19, Y+6	; 0x06
    2396:	fc 01       	movw	r30, r24
    2398:	35 83       	std	Z+5, r19	; 0x05
    239a:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	2f 81       	ldd	r18, Y+7	; 0x07
    23a2:	38 85       	ldd	r19, Y+8	; 0x08
    23a4:	fc 01       	movw	r30, r24
    23a6:	37 83       	std	Z+7, r19	; 0x07
    23a8:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	29 85       	ldd	r18, Y+9	; 0x09
    23b0:	fc 01       	movw	r30, r24
    23b2:	26 87       	std	Z+14, r18	; 0x0e
}
    23b4:	00 00       	nop
    23b6:	29 96       	adiw	r28, 0x09	; 9
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <xTaskCreate>:
    23ca:	af 92       	push	r10
    23cc:	bf 92       	push	r11
    23ce:	cf 92       	push	r12
    23d0:	df 92       	push	r13
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	60 97       	sbiw	r28, 0x10	; 16
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	9f 83       	std	Y+7, r25	; 0x07
    23ee:	8e 83       	std	Y+6, r24	; 0x06
    23f0:	79 87       	std	Y+9, r23	; 0x09
    23f2:	68 87       	std	Y+8, r22	; 0x08
    23f4:	5b 87       	std	Y+11, r21	; 0x0b
    23f6:	4a 87       	std	Y+10, r20	; 0x0a
    23f8:	3d 87       	std	Y+13, r19	; 0x0d
    23fa:	2c 87       	std	Y+12, r18	; 0x0c
    23fc:	0e 87       	std	Y+14, r16	; 0x0e
    23fe:	f8 8a       	std	Y+16, r15	; 0x10
    2400:	ef 86       	std	Y+15, r14	; 0x0f
    2402:	8a 85       	ldd	r24, Y+10	; 0x0a
    2404:	9b 85       	ldd	r25, Y+11	; 0x0b
    2406:	0e 94 cc 01 	call	0x398	; 0x398 <pvPortMalloc>
    240a:	9d 83       	std	Y+5, r25	; 0x05
    240c:	8c 83       	std	Y+4, r24	; 0x04
    240e:	8c 81       	ldd	r24, Y+4	; 0x04
    2410:	9d 81       	ldd	r25, Y+5	; 0x05
    2412:	89 2b       	or	r24, r25
    2414:	b9 f0       	breq	.+46     	; 0x2444 <xTaskCreate+0x7a>
    2416:	8c e2       	ldi	r24, 0x2C	; 44
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 cc 01 	call	0x398	; 0x398 <pvPortMalloc>
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	89 2b       	or	r24, r25
    2428:	41 f0       	breq	.+16     	; 0x243a <xTaskCreate+0x70>
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	2c 81       	ldd	r18, Y+4	; 0x04
    2430:	3d 81       	ldd	r19, Y+5	; 0x05
    2432:	fc 01       	movw	r30, r24
    2434:	30 8f       	std	Z+24, r19	; 0x18
    2436:	27 8b       	std	Z+23, r18	; 0x17
    2438:	07 c0       	rjmp	.+14     	; 0x2448 <xTaskCreate+0x7e>
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	9d 81       	ldd	r25, Y+5	; 0x05
    243e:	0e 94 ed 01 	call	0x3da	; 0x3da <vPortFree>
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <xTaskCreate+0x7e>
    2444:	1a 82       	std	Y+2, r1	; 0x02
    2446:	19 82       	std	Y+1, r1	; 0x01
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	89 2b       	or	r24, r25
    244e:	c1 f0       	breq	.+48     	; 0x2480 <xTaskCreate+0xb6>
    2450:	a9 81       	ldd	r26, Y+1	; 0x01
    2452:	ba 81       	ldd	r27, Y+2	; 0x02
    2454:	ef 85       	ldd	r30, Y+15	; 0x0f
    2456:	f8 89       	ldd	r31, Y+16	; 0x10
    2458:	2c 85       	ldd	r18, Y+12	; 0x0c
    245a:	3d 85       	ldd	r19, Y+13	; 0x0d
    245c:	4a 85       	ldd	r20, Y+10	; 0x0a
    245e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2460:	68 85       	ldd	r22, Y+8	; 0x08
    2462:	79 85       	ldd	r23, Y+9	; 0x09
    2464:	8e 81       	ldd	r24, Y+6	; 0x06
    2466:	9f 81       	ldd	r25, Y+7	; 0x07
    2468:	a1 2c       	mov	r10, r1
    246a:	b1 2c       	mov	r11, r1
    246c:	6d 01       	movw	r12, r26
    246e:	7f 01       	movw	r14, r30
    2470:	0e 85       	ldd	r16, Y+14	; 0x0e
    2472:	19 d0       	rcall	.+50     	; 0x24a6 <prvInitialiseNewTask>
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	f5 d0       	rcall	.+490    	; 0x2664 <prvAddNewTaskToReadyList>
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	8b 83       	std	Y+3, r24	; 0x03
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <xTaskCreate+0xba>
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	60 96       	adiw	r28, 0x10	; 16
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	0f 91       	pop	r16
    2498:	ff 90       	pop	r15
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	bf 90       	pop	r11
    24a2:	af 90       	pop	r10
    24a4:	08 95       	ret

000024a6 <prvInitialiseNewTask>:
    24a6:	af 92       	push	r10
    24a8:	bf 92       	push	r11
    24aa:	cf 92       	push	r12
    24ac:	df 92       	push	r13
    24ae:	ef 92       	push	r14
    24b0:	ff 92       	push	r15
    24b2:	0f 93       	push	r16
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	62 97       	sbiw	r28, 0x12	; 18
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	9d 83       	std	Y+5, r25	; 0x05
    24ca:	8c 83       	std	Y+4, r24	; 0x04
    24cc:	7f 83       	std	Y+7, r23	; 0x07
    24ce:	6e 83       	std	Y+6, r22	; 0x06
    24d0:	59 87       	std	Y+9, r21	; 0x09
    24d2:	48 87       	std	Y+8, r20	; 0x08
    24d4:	3b 87       	std	Y+11, r19	; 0x0b
    24d6:	2a 87       	std	Y+10, r18	; 0x0a
    24d8:	0c 87       	std	Y+12, r16	; 0x0c
    24da:	fe 86       	std	Y+14, r15	; 0x0e
    24dc:	ed 86       	std	Y+13, r14	; 0x0d
    24de:	d8 8a       	std	Y+16, r13	; 0x10
    24e0:	cf 86       	std	Y+15, r12	; 0x0f
    24e2:	ba 8a       	std	Y+18, r11	; 0x12
    24e4:	a9 8a       	std	Y+17, r10	; 0x11
    24e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e8:	98 89       	ldd	r25, Y+16	; 0x10
    24ea:	fc 01       	movw	r30, r24
    24ec:	87 89       	ldd	r24, Z+23	; 0x17
    24ee:	90 8d       	ldd	r25, Z+24	; 0x18
    24f0:	28 85       	ldd	r18, Y+8	; 0x08
    24f2:	39 85       	ldd	r19, Y+9	; 0x09
    24f4:	a9 01       	movw	r20, r18
    24f6:	65 ea       	ldi	r22, 0xA5	; 165
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	0e 94 36 38 	call	0x706c	; 0x706c <memset>
    24fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2500:	98 89       	ldd	r25, Y+16	; 0x10
    2502:	fc 01       	movw	r30, r24
    2504:	27 89       	ldd	r18, Z+23	; 0x17
    2506:	30 8d       	ldd	r19, Z+24	; 0x18
    2508:	88 85       	ldd	r24, Y+8	; 0x08
    250a:	99 85       	ldd	r25, Y+9	; 0x09
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	82 0f       	add	r24, r18
    2510:	93 1f       	adc	r25, r19
    2512:	9b 83       	std	Y+3, r25	; 0x03
    2514:	8a 83       	std	Y+2, r24	; 0x02
    2516:	8e 81       	ldd	r24, Y+6	; 0x06
    2518:	9f 81       	ldd	r25, Y+7	; 0x07
    251a:	89 2b       	or	r24, r25
    251c:	69 f1       	breq	.+90     	; 0x2578 <prvInitialiseNewTask+0xd2>
    251e:	19 82       	std	Y+1, r1	; 0x01
    2520:	21 c0       	rjmp	.+66     	; 0x2564 <prvInitialiseNewTask+0xbe>
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	29 81       	ldd	r18, Y+1	; 0x01
    252a:	22 2f       	mov	r18, r18
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4e 81       	ldd	r20, Y+6	; 0x06
    2530:	5f 81       	ldd	r21, Y+7	; 0x07
    2532:	24 0f       	add	r18, r20
    2534:	35 1f       	adc	r19, r21
    2536:	f9 01       	movw	r30, r18
    2538:	40 81       	ld	r20, Z
    253a:	2f 85       	ldd	r18, Y+15	; 0x0f
    253c:	38 89       	ldd	r19, Y+16	; 0x10
    253e:	82 0f       	add	r24, r18
    2540:	93 1f       	adc	r25, r19
    2542:	49 96       	adiw	r24, 0x19	; 25
    2544:	fc 01       	movw	r30, r24
    2546:	40 83       	st	Z, r20
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	2e 81       	ldd	r18, Y+6	; 0x06
    2550:	3f 81       	ldd	r19, Y+7	; 0x07
    2552:	82 0f       	add	r24, r18
    2554:	93 1f       	adc	r25, r19
    2556:	fc 01       	movw	r30, r24
    2558:	80 81       	ld	r24, Z
    255a:	88 23       	and	r24, r24
    255c:	39 f0       	breq	.+14     	; 0x256c <prvInitialiseNewTask+0xc6>
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	88 30       	cpi	r24, 0x08	; 8
    2568:	e0 f2       	brcs	.-72     	; 0x2522 <prvInitialiseNewTask+0x7c>
    256a:	01 c0       	rjmp	.+2      	; 0x256e <prvInitialiseNewTask+0xc8>
    256c:	00 00       	nop
    256e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2570:	98 89       	ldd	r25, Y+16	; 0x10
    2572:	fc 01       	movw	r30, r24
    2574:	10 a2       	std	Z+32, r1	; 0x20
    2576:	04 c0       	rjmp	.+8      	; 0x2580 <prvInitialiseNewTask+0xda>
    2578:	8f 85       	ldd	r24, Y+15	; 0x0f
    257a:	98 89       	ldd	r25, Y+16	; 0x10
    257c:	fc 01       	movw	r30, r24
    257e:	11 8e       	std	Z+25, r1	; 0x19
    2580:	8c 85       	ldd	r24, Y+12	; 0x0c
    2582:	84 30       	cpi	r24, 0x04	; 4
    2584:	10 f0       	brcs	.+4      	; 0x258a <prvInitialiseNewTask+0xe4>
    2586:	83 e0       	ldi	r24, 0x03	; 3
    2588:	8c 87       	std	Y+12, r24	; 0x0c
    258a:	8f 85       	ldd	r24, Y+15	; 0x0f
    258c:	98 89       	ldd	r25, Y+16	; 0x10
    258e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2590:	fc 01       	movw	r30, r24
    2592:	26 8b       	std	Z+22, r18	; 0x16
    2594:	8f 85       	ldd	r24, Y+15	; 0x0f
    2596:	98 89       	ldd	r25, Y+16	; 0x10
    2598:	2c 85       	ldd	r18, Y+12	; 0x0c
    259a:	fc 01       	movw	r30, r24
    259c:	23 a3       	std	Z+35, r18	; 0x23
    259e:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a0:	98 89       	ldd	r25, Y+16	; 0x10
    25a2:	fc 01       	movw	r30, r24
    25a4:	14 a2       	std	Z+36, r1	; 0x24
    25a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a8:	98 89       	ldd	r25, Y+16	; 0x10
    25aa:	02 96       	adiw	r24, 0x02	; 2
    25ac:	0e 94 3e 02 	call	0x47c	; 0x47c <vListInitialiseItem>
    25b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b2:	98 89       	ldd	r25, Y+16	; 0x10
    25b4:	0c 96       	adiw	r24, 0x0c	; 12
    25b6:	0e 94 3e 02 	call	0x47c	; 0x47c <vListInitialiseItem>
    25ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    25bc:	98 89       	ldd	r25, Y+16	; 0x10
    25be:	2f 85       	ldd	r18, Y+15	; 0x0f
    25c0:	38 89       	ldd	r19, Y+16	; 0x10
    25c2:	fc 01       	movw	r30, r24
    25c4:	31 87       	std	Z+9, r19	; 0x09
    25c6:	20 87       	std	Z+8, r18	; 0x08
    25c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	24 e0       	ldi	r18, 0x04	; 4
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	28 1b       	sub	r18, r24
    25d4:	39 0b       	sbc	r19, r25
    25d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d8:	98 89       	ldd	r25, Y+16	; 0x10
    25da:	fc 01       	movw	r30, r24
    25dc:	35 87       	std	Z+13, r19	; 0x0d
    25de:	24 87       	std	Z+12, r18	; 0x0c
    25e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e2:	98 89       	ldd	r25, Y+16	; 0x10
    25e4:	2f 85       	ldd	r18, Y+15	; 0x0f
    25e6:	38 89       	ldd	r19, Y+16	; 0x10
    25e8:	fc 01       	movw	r30, r24
    25ea:	33 8b       	std	Z+19, r19	; 0x13
    25ec:	22 8b       	std	Z+18, r18	; 0x12
    25ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f0:	98 89       	ldd	r25, Y+16	; 0x10
    25f2:	fc 01       	movw	r30, r24
    25f4:	16 a2       	std	Z+38, r1	; 0x26
    25f6:	15 a2       	std	Z+37, r1	; 0x25
    25f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fa:	98 89       	ldd	r25, Y+16	; 0x10
    25fc:	fc 01       	movw	r30, r24
    25fe:	17 a2       	std	Z+39, r1	; 0x27
    2600:	10 a6       	std	Z+40, r1	; 0x28
    2602:	11 a6       	std	Z+41, r1	; 0x29
    2604:	12 a6       	std	Z+42, r1	; 0x2a
    2606:	8f 85       	ldd	r24, Y+15	; 0x0f
    2608:	98 89       	ldd	r25, Y+16	; 0x10
    260a:	fc 01       	movw	r30, r24
    260c:	13 a6       	std	Z+43, r1	; 0x2b
    260e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2610:	5b 85       	ldd	r21, Y+11	; 0x0b
    2612:	2c 81       	ldd	r18, Y+4	; 0x04
    2614:	3d 81       	ldd	r19, Y+5	; 0x05
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	9b 81       	ldd	r25, Y+3	; 0x03
    261a:	b9 01       	movw	r22, r18
    261c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <pxPortInitialiseStack>
    2620:	9c 01       	movw	r18, r24
    2622:	8f 85       	ldd	r24, Y+15	; 0x0f
    2624:	98 89       	ldd	r25, Y+16	; 0x10
    2626:	fc 01       	movw	r30, r24
    2628:	31 83       	std	Z+1, r19	; 0x01
    262a:	20 83       	st	Z, r18
    262c:	8d 85       	ldd	r24, Y+13	; 0x0d
    262e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2630:	89 2b       	or	r24, r25
    2632:	39 f0       	breq	.+14     	; 0x2642 <prvInitialiseNewTask+0x19c>
    2634:	8d 85       	ldd	r24, Y+13	; 0x0d
    2636:	9e 85       	ldd	r25, Y+14	; 0x0e
    2638:	2f 85       	ldd	r18, Y+15	; 0x0f
    263a:	38 89       	ldd	r19, Y+16	; 0x10
    263c:	fc 01       	movw	r30, r24
    263e:	31 83       	std	Z+1, r19	; 0x01
    2640:	20 83       	st	Z, r18
    2642:	00 00       	nop
    2644:	62 96       	adiw	r28, 0x12	; 18
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	df 90       	pop	r13
    265c:	cf 90       	pop	r12
    265e:	bf 90       	pop	r11
    2660:	af 90       	pop	r10
    2662:	08 95       	ret

00002664 <prvAddNewTaskToReadyList>:
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	1f 92       	push	r1
    266a:	1f 92       	push	r1
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	0f 92       	push	r0
    267a:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <uxCurrentNumberOfTasks>
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	80 93 b4 08 	sts	0x08B4, r24	; 0x8008b4 <uxCurrentNumberOfTasks>
    2684:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2688:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    268c:	89 2b       	or	r24, r25
    268e:	61 f4       	brne	.+24     	; 0x26a8 <prvAddNewTaskToReadyList+0x44>
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <__data_end+0x1>
    2698:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <__data_end>
    269c:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <uxCurrentNumberOfTasks>
    26a0:	81 30       	cpi	r24, 0x01	; 1
    26a2:	c1 f4       	brne	.+48     	; 0x26d4 <prvAddNewTaskToReadyList+0x70>
    26a4:	87 d4       	rcall	.+2318   	; 0x2fb4 <prvInitialiseTaskLists>
    26a6:	16 c0       	rjmp	.+44     	; 0x26d4 <prvAddNewTaskToReadyList+0x70>
    26a8:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <xSchedulerRunning>
    26ac:	88 23       	and	r24, r24
    26ae:	91 f4       	brne	.+36     	; 0x26d4 <prvAddNewTaskToReadyList+0x70>
    26b0:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    26b4:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    26b8:	fc 01       	movw	r30, r24
    26ba:	26 89       	ldd	r18, Z+22	; 0x16
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	fc 01       	movw	r30, r24
    26c2:	86 89       	ldd	r24, Z+22	; 0x16
    26c4:	82 17       	cp	r24, r18
    26c6:	30 f0       	brcs	.+12     	; 0x26d4 <prvAddNewTaskToReadyList+0x70>
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <__data_end+0x1>
    26d0:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <__data_end>
    26d4:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <uxTaskNumber>
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	80 93 bc 08 	sts	0x08BC, r24	; 0x8008bc <uxTaskNumber>
    26de:	20 91 bc 08 	lds	r18, 0x08BC	; 0x8008bc <uxTaskNumber>
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	fc 01       	movw	r30, r24
    26e8:	21 a3       	std	Z+33, r18	; 0x21
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	fc 01       	movw	r30, r24
    26f0:	96 89       	ldd	r25, Z+22	; 0x16
    26f2:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    26f6:	89 17       	cp	r24, r25
    26f8:	30 f4       	brcc	.+12     	; 0x2706 <prvAddNewTaskToReadyList+0xa2>
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	fc 01       	movw	r30, r24
    2700:	86 89       	ldd	r24, Z+22	; 0x16
    2702:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	ac 01       	movw	r20, r24
    270c:	4e 5f       	subi	r20, 0xFE	; 254
    270e:	5f 4f       	sbci	r21, 0xFF	; 255
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	fc 01       	movw	r30, r24
    2716:	86 89       	ldd	r24, Z+22	; 0x16
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	c9 01       	movw	r24, r18
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	82 0f       	add	r24, r18
    272c:	93 1f       	adc	r25, r19
    272e:	82 5a       	subi	r24, 0xA2	; 162
    2730:	97 4f       	sbci	r25, 0xF7	; 247
    2732:	ba 01       	movw	r22, r20
    2734:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    2738:	0f 90       	pop	r0
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <xSchedulerRunning>
    2740:	88 23       	and	r24, r24
    2742:	71 f0       	breq	.+28     	; 0x2760 <prvAddNewTaskToReadyList+0xfc>
    2744:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2748:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    274c:	fc 01       	movw	r30, r24
    274e:	26 89       	ldd	r18, Z+22	; 0x16
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	fc 01       	movw	r30, r24
    2756:	86 89       	ldd	r24, Z+22	; 0x16
    2758:	28 17       	cp	r18, r24
    275a:	10 f4       	brcc	.+4      	; 0x2760 <prvAddNewTaskToReadyList+0xfc>
    275c:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
    2760:	00 00       	nop
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	08 95       	ret

0000276c <vTaskDelay>:
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	00 d0       	rcall	.+0      	; 0x2772 <vTaskDelay+0x6>
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	9b 83       	std	Y+3, r25	; 0x03
    2778:	8a 83       	std	Y+2, r24	; 0x02
    277a:	19 82       	std	Y+1, r1	; 0x01
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	89 2b       	or	r24, r25
    2782:	41 f0       	breq	.+16     	; 0x2794 <vTaskDelay+0x28>
    2784:	56 d0       	rcall	.+172    	; 0x2832 <vTaskSuspendAll>
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <prvAddCurrentTaskToDelayedList>
    2790:	5d d0       	rcall	.+186    	; 0x284c <xTaskResumeAll>
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	88 23       	and	r24, r24
    2798:	11 f4       	brne	.+4      	; 0x279e <vTaskDelay+0x32>
    279a:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
    279e:	00 00       	nop
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <vTaskStartScheduler>:
    27ac:	ef 92       	push	r14
    27ae:	ff 92       	push	r15
    27b0:	0f 93       	push	r16
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	1f 92       	push	r1
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	0f 2e       	mov	r0, r31
    27be:	ff eb       	ldi	r31, 0xBF	; 191
    27c0:	ef 2e       	mov	r14, r31
    27c2:	f8 e0       	ldi	r31, 0x08	; 8
    27c4:	ff 2e       	mov	r15, r31
    27c6:	f0 2d       	mov	r31, r0
    27c8:	00 e0       	ldi	r16, 0x00	; 0
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 ec       	ldi	r20, 0xC0	; 192
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	61 e2       	ldi	r22, 0x21	; 33
    27d4:	72 e0       	ldi	r23, 0x02	; 2
    27d6:	8d ec       	ldi	r24, 0xCD	; 205
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	f7 dd       	rcall	.-1042   	; 0x23ca <xTaskCreate>
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	81 30       	cpi	r24, 0x01	; 1
    27e2:	19 f4       	brne	.+6      	; 0x27ea <vTaskStartScheduler+0x3e>
    27e4:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <xTimerCreateTimerTask>
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	81 30       	cpi	r24, 0x01	; 1
    27ee:	c9 f4       	brne	.+50     	; 0x2822 <vTaskStartScheduler+0x76>
    27f0:	f8 94       	cli
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	9f ef       	ldi	r25, 0xFF	; 255
    27f6:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xNextTaskUnblockTime+0x1>
    27fa:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xNextTaskUnblockTime>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	80 93 b8 08 	sts	0x08B8, r24	; 0x8008b8 <xSchedulerRunning>
    2804:	10 92 b6 08 	sts	0x08B6, r1	; 0x8008b6 <xTickCount+0x1>
    2808:	10 92 b5 08 	sts	0x08B5, r1	; 0x8008b5 <xTickCount>
    280c:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2810:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2814:	fc 01       	movw	r30, r24
    2816:	85 a1       	ldd	r24, Z+37	; 0x25
    2818:	96 a1       	ldd	r25, Z+38	; 0x26
    281a:	0e 94 98 01 	call	0x330	; 0x330 <task_switch_in>
    281e:	0e 94 32 05 	call	0xa64	; 0xa64 <xPortStartScheduler>
    2822:	00 00       	nop
    2824:	0f 90       	pop	r0
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	08 95       	ret

00002832 <vTaskSuspendAll>:
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <uxSchedulerSuspended>
    2844:	00 00       	nop
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <xTaskResumeAll>:
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	00 d0       	rcall	.+0      	; 0x2852 <xTaskResumeAll+0x6>
    2852:	1f 92       	push	r1
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	1a 82       	std	Y+2, r1	; 0x02
    285a:	19 82       	std	Y+1, r1	; 0x01
    285c:	1b 82       	std	Y+3, r1	; 0x03
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	0f 92       	push	r0
    2864:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    2868:	81 50       	subi	r24, 0x01	; 1
    286a:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <uxSchedulerSuspended>
    286e:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    2872:	88 23       	and	r24, r24
    2874:	09 f0       	breq	.+2      	; 0x2878 <xTaskResumeAll+0x2c>
    2876:	75 c0       	rjmp	.+234    	; 0x2962 <xTaskResumeAll+0x116>
    2878:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <uxCurrentNumberOfTasks>
    287c:	88 23       	and	r24, r24
    287e:	09 f4       	brne	.+2      	; 0x2882 <xTaskResumeAll+0x36>
    2880:	70 c0       	rjmp	.+224    	; 0x2962 <xTaskResumeAll+0x116>
    2882:	49 c0       	rjmp	.+146    	; 0x2916 <xTaskResumeAll+0xca>
    2884:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <xPendingReadyList+0x5>
    2888:	90 91 9e 08 	lds	r25, 0x089E	; 0x80089e <xPendingReadyList+0x6>
    288c:	fc 01       	movw	r30, r24
    288e:	86 81       	ldd	r24, Z+6	; 0x06
    2890:	97 81       	ldd	r25, Z+7	; 0x07
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	0c 96       	adiw	r24, 0x0c	; 12
    289c:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	02 96       	adiw	r24, 0x02	; 2
    28a6:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	fc 01       	movw	r30, r24
    28b0:	96 89       	ldd	r25, Z+22	; 0x16
    28b2:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    28b6:	89 17       	cp	r24, r25
    28b8:	30 f4       	brcc	.+12     	; 0x28c6 <xTaskResumeAll+0x7a>
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	fc 01       	movw	r30, r24
    28c0:	86 89       	ldd	r24, Z+22	; 0x16
    28c2:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	ac 01       	movw	r20, r24
    28cc:	4e 5f       	subi	r20, 0xFE	; 254
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	fc 01       	movw	r30, r24
    28d6:	86 89       	ldd	r24, Z+22	; 0x16
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	c9 01       	movw	r24, r18
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	82 0f       	add	r24, r18
    28ec:	93 1f       	adc	r25, r19
    28ee:	82 5a       	subi	r24, 0xA2	; 162
    28f0:	97 4f       	sbci	r25, 0xF7	; 247
    28f2:	ba 01       	movw	r22, r20
    28f4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	fc 01       	movw	r30, r24
    28fe:	26 89       	ldd	r18, Z+22	; 0x16
    2900:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2904:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2908:	fc 01       	movw	r30, r24
    290a:	86 89       	ldd	r24, Z+22	; 0x16
    290c:	28 17       	cp	r18, r24
    290e:	18 f0       	brcs	.+6      	; 0x2916 <xTaskResumeAll+0xca>
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <xYieldPending>
    2916:	80 91 98 08 	lds	r24, 0x0898	; 0x800898 <xPendingReadyList>
    291a:	88 23       	and	r24, r24
    291c:	09 f0       	breq	.+2      	; 0x2920 <xTaskResumeAll+0xd4>
    291e:	b2 cf       	rjmp	.-156    	; 0x2884 <xTaskResumeAll+0x38>
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	89 2b       	or	r24, r25
    2926:	09 f0       	breq	.+2      	; 0x292a <xTaskResumeAll+0xde>
    2928:	d1 d3       	rcall	.+1954   	; 0x30cc <prvResetNextTaskUnblockTime>
    292a:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <uxPendedTicks>
    292e:	8c 83       	std	Y+4, r24	; 0x04
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	88 23       	and	r24, r24
    2934:	71 f0       	breq	.+28     	; 0x2952 <xTaskResumeAll+0x106>
    2936:	37 d0       	rcall	.+110    	; 0x29a6 <xTaskIncrementTick>
    2938:	88 23       	and	r24, r24
    293a:	19 f0       	breq	.+6      	; 0x2942 <xTaskResumeAll+0xf6>
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <xYieldPending>
    2942:	8c 81       	ldd	r24, Y+4	; 0x04
    2944:	81 50       	subi	r24, 0x01	; 1
    2946:	8c 83       	std	Y+4, r24	; 0x04
    2948:	8c 81       	ldd	r24, Y+4	; 0x04
    294a:	88 23       	and	r24, r24
    294c:	a1 f7       	brne	.-24     	; 0x2936 <xTaskResumeAll+0xea>
    294e:	10 92 b9 08 	sts	0x08B9, r1	; 0x8008b9 <uxPendedTicks>
    2952:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <xYieldPending>
    2956:	88 23       	and	r24, r24
    2958:	21 f0       	breq	.+8      	; 0x2962 <xTaskResumeAll+0x116>
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	8b 83       	std	Y+3, r24	; 0x03
    295e:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
    2962:	0f 90       	pop	r0
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	08 95       	ret

00002976 <xTaskGetTickCount>:
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	1f 92       	push	r1
    297c:	1f 92       	push	r1
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	0f 92       	push	r0
    2988:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <xTickCount>
    298c:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <xTickCount+0x1>
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	0f 90       	pop	r0
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	08 95       	ret

000029a6 <xTaskIncrementTick>:
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	29 97       	sbiw	r28, 0x09	; 9
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	19 82       	std	Y+1, r1	; 0x01
    29bc:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    29c0:	88 23       	and	r24, r24
    29c2:	09 f0       	breq	.+2      	; 0x29c6 <xTaskIncrementTick+0x20>
    29c4:	c7 c0       	rjmp	.+398    	; 0x2b54 <xTaskIncrementTick+0x1ae>
    29c6:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <xTickCount>
    29ca:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <xTickCount+0x1>
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	9b 83       	std	Y+3, r25	; 0x03
    29d2:	8a 83       	std	Y+2, r24	; 0x02
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	9b 81       	ldd	r25, Y+3	; 0x03
    29d8:	90 93 b6 08 	sts	0x08B6, r25	; 0x8008b6 <xTickCount+0x1>
    29dc:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <xTickCount>
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	9b 81       	ldd	r25, Y+3	; 0x03
    29e4:	89 2b       	or	r24, r25
    29e6:	d1 f4       	brne	.+52     	; 0x2a1c <xTaskIncrementTick+0x76>
    29e8:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <pxDelayedTaskList>
    29ec:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <pxDelayedTaskList+0x1>
    29f0:	9d 83       	std	Y+5, r25	; 0x05
    29f2:	8c 83       	std	Y+4, r24	; 0x04
    29f4:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <pxOverflowDelayedTaskList>
    29f8:	90 91 97 08 	lds	r25, 0x0897	; 0x800897 <pxOverflowDelayedTaskList+0x1>
    29fc:	90 93 95 08 	sts	0x0895, r25	; 0x800895 <pxDelayedTaskList+0x1>
    2a00:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <pxDelayedTaskList>
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	9d 81       	ldd	r25, Y+5	; 0x05
    2a08:	90 93 97 08 	sts	0x0897, r25	; 0x800897 <pxOverflowDelayedTaskList+0x1>
    2a0c:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <pxOverflowDelayedTaskList>
    2a10:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <xNumOfOverflows>
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <xNumOfOverflows>
    2a1a:	58 d3       	rcall	.+1712   	; 0x30cc <prvResetNextTaskUnblockTime>
    2a1c:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <xNextTaskUnblockTime>
    2a20:	90 91 be 08 	lds	r25, 0x08BE	; 0x8008be <xNextTaskUnblockTime+0x1>
    2a24:	2a 81       	ldd	r18, Y+2	; 0x02
    2a26:	3b 81       	ldd	r19, Y+3	; 0x03
    2a28:	28 17       	cp	r18, r24
    2a2a:	39 07       	cpc	r19, r25
    2a2c:	08 f4       	brcc	.+2      	; 0x2a30 <xTaskIncrementTick+0x8a>
    2a2e:	78 c0       	rjmp	.+240    	; 0x2b20 <xTaskIncrementTick+0x17a>
    2a30:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <pxDelayedTaskList>
    2a34:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <pxDelayedTaskList+0x1>
    2a38:	fc 01       	movw	r30, r24
    2a3a:	80 81       	ld	r24, Z
    2a3c:	88 23       	and	r24, r24
    2a3e:	39 f4       	brne	.+14     	; 0x2a4e <xTaskIncrementTick+0xa8>
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	9f ef       	ldi	r25, 0xFF	; 255
    2a44:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xNextTaskUnblockTime+0x1>
    2a48:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xNextTaskUnblockTime>
    2a4c:	69 c0       	rjmp	.+210    	; 0x2b20 <xTaskIncrementTick+0x17a>
    2a4e:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <pxDelayedTaskList>
    2a52:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <pxDelayedTaskList+0x1>
    2a56:	fc 01       	movw	r30, r24
    2a58:	85 81       	ldd	r24, Z+5	; 0x05
    2a5a:	96 81       	ldd	r25, Z+6	; 0x06
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	86 81       	ldd	r24, Z+6	; 0x06
    2a60:	97 81       	ldd	r25, Z+7	; 0x07
    2a62:	9f 83       	std	Y+7, r25	; 0x07
    2a64:	8e 83       	std	Y+6, r24	; 0x06
    2a66:	8e 81       	ldd	r24, Y+6	; 0x06
    2a68:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	99 87       	std	Y+9, r25	; 0x09
    2a72:	88 87       	std	Y+8, r24	; 0x08
    2a74:	2a 81       	ldd	r18, Y+2	; 0x02
    2a76:	3b 81       	ldd	r19, Y+3	; 0x03
    2a78:	88 85       	ldd	r24, Y+8	; 0x08
    2a7a:	99 85       	ldd	r25, Y+9	; 0x09
    2a7c:	28 17       	cp	r18, r24
    2a7e:	39 07       	cpc	r19, r25
    2a80:	38 f4       	brcc	.+14     	; 0x2a90 <xTaskIncrementTick+0xea>
    2a82:	88 85       	ldd	r24, Y+8	; 0x08
    2a84:	99 85       	ldd	r25, Y+9	; 0x09
    2a86:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xNextTaskUnblockTime+0x1>
    2a8a:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xNextTaskUnblockTime>
    2a8e:	48 c0       	rjmp	.+144    	; 0x2b20 <xTaskIncrementTick+0x17a>
    2a90:	8e 81       	ldd	r24, Y+6	; 0x06
    2a92:	9f 81       	ldd	r25, Y+7	; 0x07
    2a94:	02 96       	adiw	r24, 0x02	; 2
    2a96:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    2a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	84 89       	ldd	r24, Z+20	; 0x14
    2aa2:	95 89       	ldd	r25, Z+21	; 0x15
    2aa4:	89 2b       	or	r24, r25
    2aa6:	29 f0       	breq	.+10     	; 0x2ab2 <xTaskIncrementTick+0x10c>
    2aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    2aac:	0c 96       	adiw	r24, 0x0c	; 12
    2aae:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    2ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	96 89       	ldd	r25, Z+22	; 0x16
    2aba:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    2abe:	89 17       	cp	r24, r25
    2ac0:	30 f4       	brcc	.+12     	; 0x2ace <xTaskIncrementTick+0x128>
    2ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	86 89       	ldd	r24, Z+22	; 0x16
    2aca:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    2ace:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad2:	ac 01       	movw	r20, r24
    2ad4:	4e 5f       	subi	r20, 0xFE	; 254
    2ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    2ada:	9f 81       	ldd	r25, Y+7	; 0x07
    2adc:	fc 01       	movw	r30, r24
    2ade:	86 89       	ldd	r24, Z+22	; 0x16
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	c9 01       	movw	r24, r18
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	82 0f       	add	r24, r18
    2af4:	93 1f       	adc	r25, r19
    2af6:	82 5a       	subi	r24, 0xA2	; 162
    2af8:	97 4f       	sbci	r25, 0xF7	; 247
    2afa:	ba 01       	movw	r22, r20
    2afc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    2b00:	8e 81       	ldd	r24, Y+6	; 0x06
    2b02:	9f 81       	ldd	r25, Y+7	; 0x07
    2b04:	fc 01       	movw	r30, r24
    2b06:	26 89       	ldd	r18, Z+22	; 0x16
    2b08:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2b0c:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2b10:	fc 01       	movw	r30, r24
    2b12:	86 89       	ldd	r24, Z+22	; 0x16
    2b14:	28 17       	cp	r18, r24
    2b16:	08 f4       	brcc	.+2      	; 0x2b1a <xTaskIncrementTick+0x174>
    2b18:	8b cf       	rjmp	.-234    	; 0x2a30 <xTaskIncrementTick+0x8a>
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	88 cf       	rjmp	.-240    	; 0x2a30 <xTaskIncrementTick+0x8a>
    2b20:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2b24:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2b28:	fc 01       	movw	r30, r24
    2b2a:	86 89       	ldd	r24, Z+22	; 0x16
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	c9 01       	movw	r24, r18
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	88 0f       	add	r24, r24
    2b3c:	99 1f       	adc	r25, r25
    2b3e:	82 0f       	add	r24, r18
    2b40:	93 1f       	adc	r25, r19
    2b42:	82 5a       	subi	r24, 0xA2	; 162
    2b44:	97 4f       	sbci	r25, 0xF7	; 247
    2b46:	fc 01       	movw	r30, r24
    2b48:	80 81       	ld	r24, Z
    2b4a:	82 30       	cpi	r24, 0x02	; 2
    2b4c:	40 f0       	brcs	.+16     	; 0x2b5e <xTaskIncrementTick+0x1b8>
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	05 c0       	rjmp	.+10     	; 0x2b5e <xTaskIncrementTick+0x1b8>
    2b54:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <uxPendedTicks>
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <uxPendedTicks>
    2b5e:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <xYieldPending>
    2b62:	88 23       	and	r24, r24
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <xTaskIncrementTick+0x1c4>
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	29 96       	adiw	r28, 0x09	; 9
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	08 95       	ret

00002b7e <vTaskSwitchContext>:
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <vTaskSwitchContext+0x6>
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    2b8c:	88 23       	and	r24, r24
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <vTaskSwitchContext+0x1a>
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <xYieldPending>
    2b96:	90 c0       	rjmp	.+288    	; 0x2cb8 <vTaskSwitchContext+0x13a>
    2b98:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <xYieldPending>
    2b9c:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2ba0:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	85 a1       	ldd	r24, Z+37	; 0x25
    2ba8:	96 a1       	ldd	r25, Z+38	; 0x26
    2baa:	0e 94 b8 01 	call	0x370	; 0x370 <task_switch_out>
    2bae:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2bb2:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	20 81       	ld	r18, Z
    2bba:	31 81       	ldd	r19, Z+1	; 0x01
    2bbc:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2bc0:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	87 89       	ldd	r24, Z+23	; 0x17
    2bc8:	90 8d       	ldd	r25, Z+24	; 0x18
    2bca:	82 17       	cp	r24, r18
    2bcc:	93 07       	cpc	r25, r19
    2bce:	70 f0       	brcs	.+28     	; 0x2bec <vTaskSwitchContext+0x6e>
    2bd0:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2bd4:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2bd8:	9c 01       	movw	r18, r24
    2bda:	27 5e       	subi	r18, 0xE7	; 231
    2bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bde:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2be2:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2be6:	b9 01       	movw	r22, r18
    2be8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <vApplicationStackOverflowHook>
    2bec:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <vTaskSwitchContext+0x7c>
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	81 50       	subi	r24, 0x01	; 1
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	c9 01       	movw	r24, r18
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	82 0f       	add	r24, r18
    2c10:	93 1f       	adc	r25, r19
    2c12:	82 5a       	subi	r24, 0xA2	; 162
    2c14:	97 4f       	sbci	r25, 0xF7	; 247
    2c16:	fc 01       	movw	r30, r24
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 23       	and	r24, r24
    2c1c:	59 f3       	breq	.-42     	; 0x2bf4 <vTaskSwitchContext+0x76>
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	c9 01       	movw	r24, r18
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	82 0f       	add	r24, r18
    2c34:	93 1f       	adc	r25, r19
    2c36:	82 5a       	subi	r24, 0xA2	; 162
    2c38:	97 4f       	sbci	r25, 0xF7	; 247
    2c3a:	9b 83       	std	Y+3, r25	; 0x03
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	fc 01       	movw	r30, r24
    2c44:	81 81       	ldd	r24, Z+1	; 0x01
    2c46:	92 81       	ldd	r25, Z+2	; 0x02
    2c48:	fc 01       	movw	r30, r24
    2c4a:	22 81       	ldd	r18, Z+2	; 0x02
    2c4c:	33 81       	ldd	r19, Z+3	; 0x03
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	fc 01       	movw	r30, r24
    2c54:	32 83       	std	Z+2, r19	; 0x02
    2c56:	21 83       	std	Z+1, r18	; 0x01
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	21 81       	ldd	r18, Z+1	; 0x01
    2c60:	32 81       	ldd	r19, Z+2	; 0x02
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	03 96       	adiw	r24, 0x03	; 3
    2c68:	28 17       	cp	r18, r24
    2c6a:	39 07       	cpc	r19, r25
    2c6c:	69 f4       	brne	.+26     	; 0x2c88 <vTaskSwitchContext+0x10a>
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	9b 81       	ldd	r25, Y+3	; 0x03
    2c72:	fc 01       	movw	r30, r24
    2c74:	81 81       	ldd	r24, Z+1	; 0x01
    2c76:	92 81       	ldd	r25, Z+2	; 0x02
    2c78:	fc 01       	movw	r30, r24
    2c7a:	22 81       	ldd	r18, Z+2	; 0x02
    2c7c:	33 81       	ldd	r19, Z+3	; 0x03
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	9b 81       	ldd	r25, Y+3	; 0x03
    2c82:	fc 01       	movw	r30, r24
    2c84:	32 83       	std	Z+2, r19	; 0x02
    2c86:	21 83       	std	Z+1, r18	; 0x01
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	81 81       	ldd	r24, Z+1	; 0x01
    2c90:	92 81       	ldd	r25, Z+2	; 0x02
    2c92:	fc 01       	movw	r30, r24
    2c94:	86 81       	ldd	r24, Z+6	; 0x06
    2c96:	97 81       	ldd	r25, Z+7	; 0x07
    2c98:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <__data_end+0x1>
    2c9c:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <__data_end>
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    2ca6:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2caa:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2cae:	fc 01       	movw	r30, r24
    2cb0:	85 a1       	ldd	r24, Z+37	; 0x25
    2cb2:	96 a1       	ldd	r25, Z+38	; 0x26
    2cb4:	0e 94 98 01 	call	0x330	; 0x330 <task_switch_in>
    2cb8:	00 00       	nop
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	08 95       	ret

00002cc6 <vTaskPlaceOnEventList>:
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <vTaskPlaceOnEventList+0x6>
    2ccc:	1f 92       	push	r1
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	7c 83       	std	Y+4, r23	; 0x04
    2cd8:	6b 83       	std	Y+3, r22	; 0x03
    2cda:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2cde:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2ce2:	9c 01       	movw	r18, r24
    2ce4:	24 5f       	subi	r18, 0xF4	; 244
    2ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	b9 01       	movw	r22, r18
    2cee:	0e 94 9f 02 	call	0x53e	; 0x53e <vListInsert>
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	db d6       	rcall	.+3510   	; 0x3ab0 <prvAddCurrentTaskToDelayedList>
    2cfa:	00 00       	nop
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <vTaskPlaceOnEventListRestricted>:
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <vTaskPlaceOnEventListRestricted+0x6>
    2d10:	1f 92       	push	r1
    2d12:	1f 92       	push	r1
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	7c 83       	std	Y+4, r23	; 0x04
    2d1e:	6b 83       	std	Y+3, r22	; 0x03
    2d20:	4d 83       	std	Y+5, r20	; 0x05
    2d22:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2d26:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	24 5f       	subi	r18, 0xF4	; 244
    2d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	b9 01       	movw	r22, r18
    2d36:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	88 23       	and	r24, r24
    2d3e:	21 f0       	breq	.+8      	; 0x2d48 <vTaskPlaceOnEventListRestricted+0x3e>
    2d40:	8f ef       	ldi	r24, 0xFF	; 255
    2d42:	9f ef       	ldi	r25, 0xFF	; 255
    2d44:	9c 83       	std	Y+4, r25	; 0x04
    2d46:	8b 83       	std	Y+3, r24	; 0x03
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	6d 81       	ldd	r22, Y+5	; 0x05
    2d4e:	b0 d6       	rcall	.+3424   	; 0x3ab0 <prvAddCurrentTaskToDelayedList>
    2d50:	00 00       	nop
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret

00002d62 <xTaskRemoveFromEventList>:
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <xTaskRemoveFromEventList+0x6>
    2d68:	1f 92       	push	r1
    2d6a:	1f 92       	push	r1
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	9d 83       	std	Y+5, r25	; 0x05
    2d72:	8c 83       	std	Y+4, r24	; 0x04
    2d74:	8c 81       	ldd	r24, Y+4	; 0x04
    2d76:	9d 81       	ldd	r25, Y+5	; 0x05
    2d78:	fc 01       	movw	r30, r24
    2d7a:	85 81       	ldd	r24, Z+5	; 0x05
    2d7c:	96 81       	ldd	r25, Z+6	; 0x06
    2d7e:	fc 01       	movw	r30, r24
    2d80:	86 81       	ldd	r24, Z+6	; 0x06
    2d82:	97 81       	ldd	r25, Z+7	; 0x07
    2d84:	9b 83       	std	Y+3, r25	; 0x03
    2d86:	8a 83       	std	Y+2, r24	; 0x02
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8c:	0c 96       	adiw	r24, 0x0c	; 12
    2d8e:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    2d92:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    2d96:	88 23       	and	r24, r24
    2d98:	69 f5       	brne	.+90     	; 0x2df4 <xTaskRemoveFromEventList+0x92>
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9e:	02 96       	adiw	r24, 0x02	; 2
    2da0:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	9b 81       	ldd	r25, Y+3	; 0x03
    2da8:	fc 01       	movw	r30, r24
    2daa:	96 89       	ldd	r25, Z+22	; 0x16
    2dac:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    2db0:	89 17       	cp	r24, r25
    2db2:	30 f4       	brcc	.+12     	; 0x2dc0 <xTaskRemoveFromEventList+0x5e>
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	9b 81       	ldd	r25, Y+3	; 0x03
    2db8:	fc 01       	movw	r30, r24
    2dba:	86 89       	ldd	r24, Z+22	; 0x16
    2dbc:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc4:	ac 01       	movw	r20, r24
    2dc6:	4e 5f       	subi	r20, 0xFE	; 254
    2dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dce:	fc 01       	movw	r30, r24
    2dd0:	86 89       	ldd	r24, Z+22	; 0x16
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	c9 01       	movw	r24, r18
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	82 0f       	add	r24, r18
    2de6:	93 1f       	adc	r25, r19
    2de8:	82 5a       	subi	r24, 0xA2	; 162
    2dea:	97 4f       	sbci	r25, 0xF7	; 247
    2dec:	ba 01       	movw	r22, r20
    2dee:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    2df2:	08 c0       	rjmp	.+16     	; 0x2e04 <xTaskRemoveFromEventList+0xa2>
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	9b 81       	ldd	r25, Y+3	; 0x03
    2df8:	0c 96       	adiw	r24, 0x0c	; 12
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	88 e9       	ldi	r24, 0x98	; 152
    2dfe:	98 e0       	ldi	r25, 0x08	; 8
    2e00:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	fc 01       	movw	r30, r24
    2e0a:	26 89       	ldd	r18, Z+22	; 0x16
    2e0c:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    2e10:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    2e14:	fc 01       	movw	r30, r24
    2e16:	86 89       	ldd	r24, Z+22	; 0x16
    2e18:	82 17       	cp	r24, r18
    2e1a:	30 f4       	brcc	.+12     	; 0x2e28 <xTaskRemoveFromEventList+0xc6>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <xYieldPending>
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <xTaskRemoveFromEventList+0xc8>
    2e28:	19 82       	std	Y+1, r1	; 0x01
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	08 95       	ret

00002e3c <vTaskSetTimeOutState>:
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	1f 92       	push	r1
    2e42:	1f 92       	push	r1
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	0f 92       	push	r0
    2e52:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <xNumOfOverflows>
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	20 83       	st	Z, r18
    2e5e:	20 91 b5 08 	lds	r18, 0x08B5	; 0x8008b5 <xTickCount>
    2e62:	30 91 b6 08 	lds	r19, 0x08B6	; 0x8008b6 <xTickCount+0x1>
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	32 83       	std	Z+2, r19	; 0x02
    2e6e:	21 83       	std	Z+1, r18	; 0x01
    2e70:	0f 90       	pop	r0
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	00 00       	nop
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	08 95       	ret

00002e80 <vTaskInternalSetTimeOutState>:
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	1f 92       	push	r1
    2e86:	1f 92       	push	r1
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <xNumOfOverflows>
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	9a 81       	ldd	r25, Y+2	; 0x02
    2e98:	fc 01       	movw	r30, r24
    2e9a:	20 83       	st	Z, r18
    2e9c:	20 91 b5 08 	lds	r18, 0x08B5	; 0x8008b5 <xTickCount>
    2ea0:	30 91 b6 08 	lds	r19, 0x08B6	; 0x8008b6 <xTickCount+0x1>
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	32 83       	std	Z+2, r19	; 0x02
    2eac:	21 83       	std	Z+1, r18	; 0x01
    2eae:	00 00       	nop
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	08 95       	ret

00002eba <xTaskCheckForTimeOut>:
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	29 97       	sbiw	r28, 0x09	; 9
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	9f 83       	std	Y+7, r25	; 0x07
    2ed0:	8e 83       	std	Y+6, r24	; 0x06
    2ed2:	79 87       	std	Y+9, r23	; 0x09
    2ed4:	68 87       	std	Y+8, r22	; 0x08
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	0f 92       	push	r0
    2edc:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <xTickCount>
    2ee0:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <xTickCount+0x1>
    2ee4:	9b 83       	std	Y+3, r25	; 0x03
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
    2ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eea:	9f 81       	ldd	r25, Y+7	; 0x07
    2eec:	fc 01       	movw	r30, r24
    2eee:	81 81       	ldd	r24, Z+1	; 0x01
    2ef0:	92 81       	ldd	r25, Z+2	; 0x02
    2ef2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ef4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ef6:	a9 01       	movw	r20, r18
    2ef8:	48 1b       	sub	r20, r24
    2efa:	59 0b       	sbc	r21, r25
    2efc:	ca 01       	movw	r24, r20
    2efe:	9d 83       	std	Y+5, r25	; 0x05
    2f00:	8c 83       	std	Y+4, r24	; 0x04
    2f02:	88 85       	ldd	r24, Y+8	; 0x08
    2f04:	99 85       	ldd	r25, Y+9	; 0x09
    2f06:	fc 01       	movw	r30, r24
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	11 f4       	brne	.+4      	; 0x2f14 <xTaskCheckForTimeOut+0x5a>
    2f10:	19 82       	std	Y+1, r1	; 0x01
    2f12:	39 c0       	rjmp	.+114    	; 0x2f86 <xTaskCheckForTimeOut+0xcc>
    2f14:	8e 81       	ldd	r24, Y+6	; 0x06
    2f16:	9f 81       	ldd	r25, Y+7	; 0x07
    2f18:	fc 01       	movw	r30, r24
    2f1a:	90 81       	ld	r25, Z
    2f1c:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <xNumOfOverflows>
    2f20:	98 17       	cp	r25, r24
    2f22:	69 f0       	breq	.+26     	; 0x2f3e <xTaskCheckForTimeOut+0x84>
    2f24:	8e 81       	ldd	r24, Y+6	; 0x06
    2f26:	9f 81       	ldd	r25, Y+7	; 0x07
    2f28:	fc 01       	movw	r30, r24
    2f2a:	21 81       	ldd	r18, Z+1	; 0x01
    2f2c:	32 81       	ldd	r19, Z+2	; 0x02
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	82 17       	cp	r24, r18
    2f34:	93 07       	cpc	r25, r19
    2f36:	18 f0       	brcs	.+6      	; 0x2f3e <xTaskCheckForTimeOut+0x84>
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	24 c0       	rjmp	.+72     	; 0x2f86 <xTaskCheckForTimeOut+0xcc>
    2f3e:	88 85       	ldd	r24, Y+8	; 0x08
    2f40:	99 85       	ldd	r25, Y+9	; 0x09
    2f42:	fc 01       	movw	r30, r24
    2f44:	20 81       	ld	r18, Z
    2f46:	31 81       	ldd	r19, Z+1	; 0x01
    2f48:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4c:	82 17       	cp	r24, r18
    2f4e:	93 07       	cpc	r25, r19
    2f50:	98 f4       	brcc	.+38     	; 0x2f78 <xTaskCheckForTimeOut+0xbe>
    2f52:	88 85       	ldd	r24, Y+8	; 0x08
    2f54:	99 85       	ldd	r25, Y+9	; 0x09
    2f56:	fc 01       	movw	r30, r24
    2f58:	20 81       	ld	r18, Z
    2f5a:	31 81       	ldd	r19, Z+1	; 0x01
    2f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f60:	28 1b       	sub	r18, r24
    2f62:	39 0b       	sbc	r19, r25
    2f64:	88 85       	ldd	r24, Y+8	; 0x08
    2f66:	99 85       	ldd	r25, Y+9	; 0x09
    2f68:	fc 01       	movw	r30, r24
    2f6a:	31 83       	std	Z+1, r19	; 0x01
    2f6c:	20 83       	st	Z, r18
    2f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f70:	9f 81       	ldd	r25, Y+7	; 0x07
    2f72:	86 df       	rcall	.-244    	; 0x2e80 <vTaskInternalSetTimeOutState>
    2f74:	19 82       	std	Y+1, r1	; 0x01
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <xTaskCheckForTimeOut+0xcc>
    2f78:	88 85       	ldd	r24, Y+8	; 0x08
    2f7a:	99 85       	ldd	r25, Y+9	; 0x09
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	11 82       	std	Z+1, r1	; 0x01
    2f80:	10 82       	st	Z, r1
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	89 83       	std	Y+1, r24	; 0x01
    2f86:	0f 90       	pop	r0
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	29 96       	adiw	r28, 0x09	; 9
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	08 95       	ret

00002f9e <vTaskMissedYield>:
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <xYieldPending>
    2fac:	00 00       	nop
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	08 95       	ret

00002fb4 <prvInitialiseTaskLists>:
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	1f 92       	push	r1
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	19 82       	std	Y+1, r1	; 0x01
    2fc0:	13 c0       	rjmp	.+38     	; 0x2fe8 <prvInitialiseTaskLists+0x34>
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	c9 01       	movw	r24, r18
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	82 0f       	add	r24, r18
    2fd8:	93 1f       	adc	r25, r19
    2fda:	82 5a       	subi	r24, 0xA2	; 162
    2fdc:	97 4f       	sbci	r25, 0xF7	; 247
    2fde:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	8f 5f       	subi	r24, 0xFF	; 255
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	84 30       	cpi	r24, 0x04	; 4
    2fec:	50 f3       	brcs	.-44     	; 0x2fc2 <prvInitialiseTaskLists+0xe>
    2fee:	82 e8       	ldi	r24, 0x82	; 130
    2ff0:	98 e0       	ldi	r25, 0x08	; 8
    2ff2:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
    2ff6:	8b e8       	ldi	r24, 0x8B	; 139
    2ff8:	98 e0       	ldi	r25, 0x08	; 8
    2ffa:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
    2ffe:	88 e9       	ldi	r24, 0x98	; 152
    3000:	98 e0       	ldi	r25, 0x08	; 8
    3002:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
    3006:	81 ea       	ldi	r24, 0xA1	; 161
    3008:	98 e0       	ldi	r25, 0x08	; 8
    300a:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
    300e:	8b ea       	ldi	r24, 0xAB	; 171
    3010:	98 e0       	ldi	r25, 0x08	; 8
    3012:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
    3016:	82 e8       	ldi	r24, 0x82	; 130
    3018:	98 e0       	ldi	r25, 0x08	; 8
    301a:	90 93 95 08 	sts	0x0895, r25	; 0x800895 <pxDelayedTaskList+0x1>
    301e:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <pxDelayedTaskList>
    3022:	8b e8       	ldi	r24, 0x8B	; 139
    3024:	98 e0       	ldi	r25, 0x08	; 8
    3026:	90 93 97 08 	sts	0x0897, r25	; 0x800897 <pxOverflowDelayedTaskList+0x1>
    302a:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <pxOverflowDelayedTaskList>
    302e:	00 00       	nop
    3030:	0f 90       	pop	r0
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	08 95       	ret

00003038 <prvCheckTasksWaitingTermination>:
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	1f 92       	push	r1
    303e:	1f 92       	push	r1
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	20 c0       	rjmp	.+64     	; 0x3086 <prvCheckTasksWaitingTermination+0x4e>
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	0f 92       	push	r0
    304c:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <xTasksWaitingTermination+0x5>
    3050:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <xTasksWaitingTermination+0x6>
    3054:	fc 01       	movw	r30, r24
    3056:	86 81       	ldd	r24, Z+6	; 0x06
    3058:	97 81       	ldd	r25, Z+7	; 0x07
    305a:	9a 83       	std	Y+2, r25	; 0x02
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	9a 81       	ldd	r25, Y+2	; 0x02
    3062:	02 96       	adiw	r24, 0x02	; 2
    3064:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    3068:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <uxCurrentNumberOfTasks>
    306c:	81 50       	subi	r24, 0x01	; 1
    306e:	80 93 b4 08 	sts	0x08B4, r24	; 0x8008b4 <uxCurrentNumberOfTasks>
    3072:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <uxDeletedTasksWaitingCleanUp>
    3076:	81 50       	subi	r24, 0x01	; 1
    3078:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <uxDeletedTasksWaitingCleanUp>
    307c:	0f 90       	pop	r0
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	9a 81       	ldd	r25, Y+2	; 0x02
    3084:	0a d0       	rcall	.+20     	; 0x309a <prvDeleteTCB>
    3086:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <uxDeletedTasksWaitingCleanUp>
    308a:	88 23       	and	r24, r24
    308c:	e1 f6       	brne	.-72     	; 0x3046 <prvCheckTasksWaitingTermination+0xe>
    308e:	00 00       	nop
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	df 91       	pop	r29
    3096:	cf 91       	pop	r28
    3098:	08 95       	ret

0000309a <prvDeleteTCB>:
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	1f 92       	push	r1
    30a0:	1f 92       	push	r1
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	9a 81       	ldd	r25, Y+2	; 0x02
    30ae:	fc 01       	movw	r30, r24
    30b0:	87 89       	ldd	r24, Z+23	; 0x17
    30b2:	90 8d       	ldd	r25, Z+24	; 0x18
    30b4:	0e 94 ed 01 	call	0x3da	; 0x3da <vPortFree>
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	0e 94 ed 01 	call	0x3da	; 0x3da <vPortFree>
    30c0:	00 00       	nop
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	08 95       	ret

000030cc <prvResetNextTaskUnblockTime>:
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	1f 92       	push	r1
    30d2:	1f 92       	push	r1
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <pxDelayedTaskList>
    30dc:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <pxDelayedTaskList+0x1>
    30e0:	fc 01       	movw	r30, r24
    30e2:	80 81       	ld	r24, Z
    30e4:	88 23       	and	r24, r24
    30e6:	39 f4       	brne	.+14     	; 0x30f6 <prvResetNextTaskUnblockTime+0x2a>
    30e8:	8f ef       	ldi	r24, 0xFF	; 255
    30ea:	9f ef       	ldi	r25, 0xFF	; 255
    30ec:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xNextTaskUnblockTime+0x1>
    30f0:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xNextTaskUnblockTime>
    30f4:	15 c0       	rjmp	.+42     	; 0x3120 <prvResetNextTaskUnblockTime+0x54>
    30f6:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <pxDelayedTaskList>
    30fa:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <pxDelayedTaskList+0x1>
    30fe:	fc 01       	movw	r30, r24
    3100:	85 81       	ldd	r24, Z+5	; 0x05
    3102:	96 81       	ldd	r25, Z+6	; 0x06
    3104:	fc 01       	movw	r30, r24
    3106:	86 81       	ldd	r24, Z+6	; 0x06
    3108:	97 81       	ldd	r25, Z+7	; 0x07
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	9a 81       	ldd	r25, Y+2	; 0x02
    3112:	fc 01       	movw	r30, r24
    3114:	82 81       	ldd	r24, Z+2	; 0x02
    3116:	93 81       	ldd	r25, Z+3	; 0x03
    3118:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xNextTaskUnblockTime+0x1>
    311c:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xNextTaskUnblockTime>
    3120:	00 00       	nop
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	08 95       	ret

0000312c <xTaskGetCurrentTaskHandle>:
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	1f 92       	push	r1
    3132:	1f 92       	push	r1
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    313c:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	9a 81       	ldd	r25, Y+2	; 0x02
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	08 95       	ret

00003152 <xTaskGetSchedulerState>:
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	1f 92       	push	r1
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <xSchedulerRunning>
    3160:	88 23       	and	r24, r24
    3162:	19 f4       	brne	.+6      	; 0x316a <xTaskGetSchedulerState+0x18>
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	08 c0       	rjmp	.+16     	; 0x317a <xTaskGetSchedulerState+0x28>
    316a:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    316e:	88 23       	and	r24, r24
    3170:	19 f4       	brne	.+6      	; 0x3178 <xTaskGetSchedulerState+0x26>
    3172:	82 e0       	ldi	r24, 0x02	; 2
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	01 c0       	rjmp	.+2      	; 0x317a <xTaskGetSchedulerState+0x28>
    3178:	19 82       	std	Y+1, r1	; 0x01
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	0f 90       	pop	r0
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	08 95       	ret

00003184 <xTaskPriorityInherit>:
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	00 d0       	rcall	.+0      	; 0x318a <xTaskPriorityInherit+0x6>
    318a:	1f 92       	push	r1
    318c:	1f 92       	push	r1
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	9d 83       	std	Y+5, r25	; 0x05
    3194:	8c 83       	std	Y+4, r24	; 0x04
    3196:	8c 81       	ldd	r24, Y+4	; 0x04
    3198:	9d 81       	ldd	r25, Y+5	; 0x05
    319a:	9b 83       	std	Y+3, r25	; 0x03
    319c:	8a 83       	std	Y+2, r24	; 0x02
    319e:	19 82       	std	Y+1, r1	; 0x01
    31a0:	8c 81       	ldd	r24, Y+4	; 0x04
    31a2:	9d 81       	ldd	r25, Y+5	; 0x05
    31a4:	89 2b       	or	r24, r25
    31a6:	09 f4       	brne	.+2      	; 0x31aa <xTaskPriorityInherit+0x26>
    31a8:	90 c0       	rjmp	.+288    	; 0x32ca <xTaskPriorityInherit+0x146>
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	9b 81       	ldd	r25, Y+3	; 0x03
    31ae:	fc 01       	movw	r30, r24
    31b0:	26 89       	ldd	r18, Z+22	; 0x16
    31b2:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    31b6:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    31ba:	fc 01       	movw	r30, r24
    31bc:	86 89       	ldd	r24, Z+22	; 0x16
    31be:	28 17       	cp	r18, r24
    31c0:	08 f0       	brcs	.+2      	; 0x31c4 <xTaskPriorityInherit+0x40>
    31c2:	75 c0       	rjmp	.+234    	; 0x32ae <xTaskPriorityInherit+0x12a>
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	9b 81       	ldd	r25, Y+3	; 0x03
    31c8:	fc 01       	movw	r30, r24
    31ca:	84 85       	ldd	r24, Z+12	; 0x0c
    31cc:	95 85       	ldd	r25, Z+13	; 0x0d
    31ce:	99 23       	and	r25, r25
    31d0:	8c f0       	brlt	.+34     	; 0x31f4 <xTaskPriorityInherit+0x70>
    31d2:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    31d6:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    31da:	fc 01       	movw	r30, r24
    31dc:	86 89       	ldd	r24, Z+22	; 0x16
    31de:	88 2f       	mov	r24, r24
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	24 e0       	ldi	r18, 0x04	; 4
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	28 1b       	sub	r18, r24
    31e8:	39 0b       	sbc	r19, r25
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	9b 81       	ldd	r25, Y+3	; 0x03
    31ee:	fc 01       	movw	r30, r24
    31f0:	35 87       	std	Z+13, r19	; 0x0d
    31f2:	24 87       	std	Z+12, r18	; 0x0c
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	fc 01       	movw	r30, r24
    31fa:	42 85       	ldd	r20, Z+10	; 0x0a
    31fc:	53 85       	ldd	r21, Z+11	; 0x0b
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	9b 81       	ldd	r25, Y+3	; 0x03
    3202:	fc 01       	movw	r30, r24
    3204:	86 89       	ldd	r24, Z+22	; 0x16
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	c9 01       	movw	r24, r18
    320c:	88 0f       	add	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	82 0f       	add	r24, r18
    321a:	93 1f       	adc	r25, r19
    321c:	82 5a       	subi	r24, 0xA2	; 162
    321e:	97 4f       	sbci	r25, 0xF7	; 247
    3220:	48 17       	cp	r20, r24
    3222:	59 07       	cpc	r21, r25
    3224:	b9 f5       	brne	.+110    	; 0x3294 <xTaskPriorityInherit+0x110>
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	9b 81       	ldd	r25, Y+3	; 0x03
    322a:	02 96       	adiw	r24, 0x02	; 2
    322c:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    3230:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3234:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3238:	fc 01       	movw	r30, r24
    323a:	26 89       	ldd	r18, Z+22	; 0x16
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	fc 01       	movw	r30, r24
    3242:	26 8b       	std	Z+22, r18	; 0x16
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	9b 81       	ldd	r25, Y+3	; 0x03
    3248:	fc 01       	movw	r30, r24
    324a:	96 89       	ldd	r25, Z+22	; 0x16
    324c:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    3250:	89 17       	cp	r24, r25
    3252:	30 f4       	brcc	.+12     	; 0x3260 <xTaskPriorityInherit+0xdc>
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	9b 81       	ldd	r25, Y+3	; 0x03
    3258:	fc 01       	movw	r30, r24
    325a:	86 89       	ldd	r24, Z+22	; 0x16
    325c:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	ac 01       	movw	r20, r24
    3266:	4e 5f       	subi	r20, 0xFE	; 254
    3268:	5f 4f       	sbci	r21, 0xFF	; 255
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	9b 81       	ldd	r25, Y+3	; 0x03
    326e:	fc 01       	movw	r30, r24
    3270:	86 89       	ldd	r24, Z+22	; 0x16
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	c9 01       	movw	r24, r18
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	82 0f       	add	r24, r18
    3286:	93 1f       	adc	r25, r19
    3288:	82 5a       	subi	r24, 0xA2	; 162
    328a:	97 4f       	sbci	r25, 0xF7	; 247
    328c:	ba 01       	movw	r22, r20
    328e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    3292:	0a c0       	rjmp	.+20     	; 0x32a8 <xTaskPriorityInherit+0x124>
    3294:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3298:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    329c:	fc 01       	movw	r30, r24
    329e:	26 89       	ldd	r18, Z+22	; 0x16
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	9b 81       	ldd	r25, Y+3	; 0x03
    32a4:	fc 01       	movw	r30, r24
    32a6:	26 8b       	std	Z+22, r18	; 0x16
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	0e c0       	rjmp	.+28     	; 0x32ca <xTaskPriorityInherit+0x146>
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	9b 81       	ldd	r25, Y+3	; 0x03
    32b2:	fc 01       	movw	r30, r24
    32b4:	23 a1       	ldd	r18, Z+35	; 0x23
    32b6:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    32ba:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    32be:	fc 01       	movw	r30, r24
    32c0:	86 89       	ldd	r24, Z+22	; 0x16
    32c2:	28 17       	cp	r18, r24
    32c4:	10 f4       	brcc	.+4      	; 0x32ca <xTaskPriorityInherit+0x146>
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	df 91       	pop	r29
    32d8:	cf 91       	pop	r28
    32da:	08 95       	ret

000032dc <xTaskPriorityDisinherit>:
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	00 d0       	rcall	.+0      	; 0x32e2 <xTaskPriorityDisinherit+0x6>
    32e2:	1f 92       	push	r1
    32e4:	1f 92       	push	r1
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	9d 83       	std	Y+5, r25	; 0x05
    32ec:	8c 83       	std	Y+4, r24	; 0x04
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04
    32f0:	9d 81       	ldd	r25, Y+5	; 0x05
    32f2:	9b 83       	std	Y+3, r25	; 0x03
    32f4:	8a 83       	std	Y+2, r24	; 0x02
    32f6:	19 82       	std	Y+1, r1	; 0x01
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	9d 81       	ldd	r25, Y+5	; 0x05
    32fc:	89 2b       	or	r24, r25
    32fe:	09 f4       	brne	.+2      	; 0x3302 <xTaskPriorityDisinherit+0x26>
    3300:	61 c0       	rjmp	.+194    	; 0x33c4 <xTaskPriorityDisinherit+0xe8>
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	9b 81       	ldd	r25, Y+3	; 0x03
    3306:	fc 01       	movw	r30, r24
    3308:	84 a1       	ldd	r24, Z+36	; 0x24
    330a:	2f ef       	ldi	r18, 0xFF	; 255
    330c:	28 0f       	add	r18, r24
    330e:	8a 81       	ldd	r24, Y+2	; 0x02
    3310:	9b 81       	ldd	r25, Y+3	; 0x03
    3312:	fc 01       	movw	r30, r24
    3314:	24 a3       	std	Z+36, r18	; 0x24
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	9b 81       	ldd	r25, Y+3	; 0x03
    331a:	fc 01       	movw	r30, r24
    331c:	26 89       	ldd	r18, Z+22	; 0x16
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	9b 81       	ldd	r25, Y+3	; 0x03
    3322:	fc 01       	movw	r30, r24
    3324:	83 a1       	ldd	r24, Z+35	; 0x23
    3326:	28 17       	cp	r18, r24
    3328:	09 f4       	brne	.+2      	; 0x332c <xTaskPriorityDisinherit+0x50>
    332a:	4c c0       	rjmp	.+152    	; 0x33c4 <xTaskPriorityDisinherit+0xe8>
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	9b 81       	ldd	r25, Y+3	; 0x03
    3330:	fc 01       	movw	r30, r24
    3332:	84 a1       	ldd	r24, Z+36	; 0x24
    3334:	88 23       	and	r24, r24
    3336:	09 f0       	breq	.+2      	; 0x333a <xTaskPriorityDisinherit+0x5e>
    3338:	45 c0       	rjmp	.+138    	; 0x33c4 <xTaskPriorityDisinherit+0xe8>
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	02 96       	adiw	r24, 0x02	; 2
    3340:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	9b 81       	ldd	r25, Y+3	; 0x03
    3348:	fc 01       	movw	r30, r24
    334a:	23 a1       	ldd	r18, Z+35	; 0x23
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	9b 81       	ldd	r25, Y+3	; 0x03
    3350:	fc 01       	movw	r30, r24
    3352:	26 8b       	std	Z+22, r18	; 0x16
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	9b 81       	ldd	r25, Y+3	; 0x03
    3358:	fc 01       	movw	r30, r24
    335a:	86 89       	ldd	r24, Z+22	; 0x16
    335c:	88 2f       	mov	r24, r24
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	24 e0       	ldi	r18, 0x04	; 4
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	28 1b       	sub	r18, r24
    3366:	39 0b       	sbc	r19, r25
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	fc 01       	movw	r30, r24
    336e:	35 87       	std	Z+13, r19	; 0x0d
    3370:	24 87       	std	Z+12, r18	; 0x0c
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	fc 01       	movw	r30, r24
    3378:	96 89       	ldd	r25, Z+22	; 0x16
    337a:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    337e:	89 17       	cp	r24, r25
    3380:	30 f4       	brcc	.+12     	; 0x338e <xTaskPriorityDisinherit+0xb2>
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	fc 01       	movw	r30, r24
    3388:	86 89       	ldd	r24, Z+22	; 0x16
    338a:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	9b 81       	ldd	r25, Y+3	; 0x03
    3392:	ac 01       	movw	r20, r24
    3394:	4e 5f       	subi	r20, 0xFE	; 254
    3396:	5f 4f       	sbci	r21, 0xFF	; 255
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
    339a:	9b 81       	ldd	r25, Y+3	; 0x03
    339c:	fc 01       	movw	r30, r24
    339e:	86 89       	ldd	r24, Z+22	; 0x16
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	c9 01       	movw	r24, r18
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	88 0f       	add	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	82 0f       	add	r24, r18
    33b4:	93 1f       	adc	r25, r19
    33b6:	82 5a       	subi	r24, 0xA2	; 162
    33b8:	97 4f       	sbci	r25, 0xF7	; 247
    33ba:	ba 01       	movw	r22, r20
    33bc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	89 83       	std	Y+1, r24	; 0x01
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

000033d6 <vTaskPriorityDisinheritAfterTimeout>:
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	28 97       	sbiw	r28, 0x08	; 8
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	9f 83       	std	Y+7, r25	; 0x07
    33ec:	8e 83       	std	Y+6, r24	; 0x06
    33ee:	68 87       	std	Y+8, r22	; 0x08
    33f0:	8e 81       	ldd	r24, Y+6	; 0x06
    33f2:	9f 81       	ldd	r25, Y+7	; 0x07
    33f4:	9b 83       	std	Y+3, r25	; 0x03
    33f6:	8a 83       	std	Y+2, r24	; 0x02
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	8c 83       	std	Y+4, r24	; 0x04
    33fc:	8e 81       	ldd	r24, Y+6	; 0x06
    33fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3400:	89 2b       	or	r24, r25
    3402:	09 f4       	brne	.+2      	; 0x3406 <vTaskPriorityDisinheritAfterTimeout+0x30>
    3404:	7e c0       	rjmp	.+252    	; 0x3502 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
    3408:	9b 81       	ldd	r25, Y+3	; 0x03
    340a:	fc 01       	movw	r30, r24
    340c:	93 a1       	ldd	r25, Z+35	; 0x23
    340e:	88 85       	ldd	r24, Y+8	; 0x08
    3410:	98 17       	cp	r25, r24
    3412:	18 f4       	brcc	.+6      	; 0x341a <vTaskPriorityDisinheritAfterTimeout+0x44>
    3414:	88 85       	ldd	r24, Y+8	; 0x08
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	05 c0       	rjmp	.+10     	; 0x3424 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    341a:	8a 81       	ldd	r24, Y+2	; 0x02
    341c:	9b 81       	ldd	r25, Y+3	; 0x03
    341e:	fc 01       	movw	r30, r24
    3420:	83 a1       	ldd	r24, Z+35	; 0x23
    3422:	89 83       	std	Y+1, r24	; 0x01
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	9b 81       	ldd	r25, Y+3	; 0x03
    3428:	fc 01       	movw	r30, r24
    342a:	96 89       	ldd	r25, Z+22	; 0x16
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	98 17       	cp	r25, r24
    3430:	09 f4       	brne	.+2      	; 0x3434 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    3432:	67 c0       	rjmp	.+206    	; 0x3502 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
    3436:	9b 81       	ldd	r25, Y+3	; 0x03
    3438:	fc 01       	movw	r30, r24
    343a:	94 a1       	ldd	r25, Z+36	; 0x24
    343c:	8c 81       	ldd	r24, Y+4	; 0x04
    343e:	98 17       	cp	r25, r24
    3440:	09 f0       	breq	.+2      	; 0x3444 <vTaskPriorityDisinheritAfterTimeout+0x6e>
    3442:	5f c0       	rjmp	.+190    	; 0x3502 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	9b 81       	ldd	r25, Y+3	; 0x03
    3448:	fc 01       	movw	r30, r24
    344a:	86 89       	ldd	r24, Z+22	; 0x16
    344c:	8d 83       	std	Y+5, r24	; 0x05
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	9b 81       	ldd	r25, Y+3	; 0x03
    3452:	29 81       	ldd	r18, Y+1	; 0x01
    3454:	fc 01       	movw	r30, r24
    3456:	26 8b       	std	Z+22, r18	; 0x16
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	9b 81       	ldd	r25, Y+3	; 0x03
    345c:	fc 01       	movw	r30, r24
    345e:	84 85       	ldd	r24, Z+12	; 0x0c
    3460:	95 85       	ldd	r25, Z+13	; 0x0d
    3462:	99 23       	and	r25, r25
    3464:	64 f0       	brlt	.+24     	; 0x347e <vTaskPriorityDisinheritAfterTimeout+0xa8>
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	88 2f       	mov	r24, r24
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	24 e0       	ldi	r18, 0x04	; 4
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	28 1b       	sub	r18, r24
    3472:	39 0b       	sbc	r19, r25
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	9b 81       	ldd	r25, Y+3	; 0x03
    3478:	fc 01       	movw	r30, r24
    347a:	35 87       	std	Z+13, r19	; 0x0d
    347c:	24 87       	std	Z+12, r18	; 0x0c
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	9b 81       	ldd	r25, Y+3	; 0x03
    3482:	fc 01       	movw	r30, r24
    3484:	42 85       	ldd	r20, Z+10	; 0x0a
    3486:	53 85       	ldd	r21, Z+11	; 0x0b
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	28 2f       	mov	r18, r24
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	c9 01       	movw	r24, r18
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	82 0f       	add	r24, r18
    349e:	93 1f       	adc	r25, r19
    34a0:	82 5a       	subi	r24, 0xA2	; 162
    34a2:	97 4f       	sbci	r25, 0xF7	; 247
    34a4:	48 17       	cp	r20, r24
    34a6:	59 07       	cpc	r21, r25
    34a8:	61 f5       	brne	.+88     	; 0x3502 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9b 81       	ldd	r25, Y+3	; 0x03
    34ae:	02 96       	adiw	r24, 0x02	; 2
    34b0:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	fc 01       	movw	r30, r24
    34ba:	96 89       	ldd	r25, Z+22	; 0x16
    34bc:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    34c0:	89 17       	cp	r24, r25
    34c2:	30 f4       	brcc	.+12     	; 0x34d0 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    34c4:	8a 81       	ldd	r24, Y+2	; 0x02
    34c6:	9b 81       	ldd	r25, Y+3	; 0x03
    34c8:	fc 01       	movw	r30, r24
    34ca:	86 89       	ldd	r24, Z+22	; 0x16
    34cc:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	9b 81       	ldd	r25, Y+3	; 0x03
    34d4:	ac 01       	movw	r20, r24
    34d6:	4e 5f       	subi	r20, 0xFE	; 254
    34d8:	5f 4f       	sbci	r21, 0xFF	; 255
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	9b 81       	ldd	r25, Y+3	; 0x03
    34de:	fc 01       	movw	r30, r24
    34e0:	86 89       	ldd	r24, Z+22	; 0x16
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	c9 01       	movw	r24, r18
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	82 0f       	add	r24, r18
    34f6:	93 1f       	adc	r25, r19
    34f8:	82 5a       	subi	r24, 0xA2	; 162
    34fa:	97 4f       	sbci	r25, 0xF7	; 247
    34fc:	ba 01       	movw	r22, r20
    34fe:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    3502:	00 00       	nop
    3504:	28 96       	adiw	r28, 0x08	; 8
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	08 95       	ret

00003516 <pvTaskIncrementMutexHeldCount>:
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3522:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3526:	89 2b       	or	r24, r25
    3528:	49 f0       	breq	.+18     	; 0x353c <pvTaskIncrementMutexHeldCount+0x26>
    352a:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    352e:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3532:	fc 01       	movw	r30, r24
    3534:	24 a1       	ldd	r18, Z+36	; 0x24
    3536:	2f 5f       	subi	r18, 0xFF	; 255
    3538:	fc 01       	movw	r30, r24
    353a:	24 a3       	std	Z+36, r18	; 0x24
    353c:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3540:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	08 95       	ret

0000354a <xTaskNotifyWait>:
    354a:	ef 92       	push	r14
    354c:	ff 92       	push	r15
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62
    355a:	2d 97       	sbiw	r28, 0x0d	; 13
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	6a 83       	std	Y+2, r22	; 0x02
    3568:	7b 83       	std	Y+3, r23	; 0x03
    356a:	8c 83       	std	Y+4, r24	; 0x04
    356c:	9d 83       	std	Y+5, r25	; 0x05
    356e:	2e 83       	std	Y+6, r18	; 0x06
    3570:	3f 83       	std	Y+7, r19	; 0x07
    3572:	48 87       	std	Y+8, r20	; 0x08
    3574:	59 87       	std	Y+9, r21	; 0x09
    3576:	1b 87       	std	Y+11, r17	; 0x0b
    3578:	0a 87       	std	Y+10, r16	; 0x0a
    357a:	fd 86       	std	Y+13, r15	; 0x0d
    357c:	ec 86       	std	Y+12, r14	; 0x0c
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	0f 92       	push	r0
    3584:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3588:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    358c:	fc 01       	movw	r30, r24
    358e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3590:	82 30       	cpi	r24, 0x02	; 2
    3592:	59 f1       	breq	.+86     	; 0x35ea <xTaskNotifyWait+0xa0>
    3594:	60 91 5c 08 	lds	r22, 0x085C	; 0x80085c <__data_end>
    3598:	70 91 5d 08 	lds	r23, 0x085D	; 0x80085d <__data_end+0x1>
    359c:	fb 01       	movw	r30, r22
    359e:	27 a1       	ldd	r18, Z+39	; 0x27
    35a0:	30 a5       	ldd	r19, Z+40	; 0x28
    35a2:	41 a5       	ldd	r20, Z+41	; 0x29
    35a4:	52 a5       	ldd	r21, Z+42	; 0x2a
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	9b 81       	ldd	r25, Y+3	; 0x03
    35aa:	ac 81       	ldd	r26, Y+4	; 0x04
    35ac:	bd 81       	ldd	r27, Y+5	; 0x05
    35ae:	80 95       	com	r24
    35b0:	90 95       	com	r25
    35b2:	a0 95       	com	r26
    35b4:	b0 95       	com	r27
    35b6:	82 23       	and	r24, r18
    35b8:	93 23       	and	r25, r19
    35ba:	a4 23       	and	r26, r20
    35bc:	b5 23       	and	r27, r21
    35be:	fb 01       	movw	r30, r22
    35c0:	87 a3       	std	Z+39, r24	; 0x27
    35c2:	90 a7       	std	Z+40, r25	; 0x28
    35c4:	a1 a7       	std	Z+41, r26	; 0x29
    35c6:	b2 a7       	std	Z+42, r27	; 0x2a
    35c8:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    35cc:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    35d0:	21 e0       	ldi	r18, 0x01	; 1
    35d2:	fc 01       	movw	r30, r24
    35d4:	23 a7       	std	Z+43, r18	; 0x2b
    35d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    35d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    35da:	89 2b       	or	r24, r25
    35dc:	31 f0       	breq	.+12     	; 0x35ea <xTaskNotifyWait+0xa0>
    35de:	8c 85       	ldd	r24, Y+12	; 0x0c
    35e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	65 d2       	rcall	.+1226   	; 0x3ab0 <prvAddCurrentTaskToDelayedList>
    35e6:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
    35ea:	0f 90       	pop	r0
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	0f 92       	push	r0
    35f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    35f8:	89 2b       	or	r24, r25
    35fa:	81 f0       	breq	.+32     	; 0x361c <xTaskNotifyWait+0xd2>
    35fc:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3600:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3604:	fc 01       	movw	r30, r24
    3606:	87 a1       	ldd	r24, Z+39	; 0x27
    3608:	90 a5       	ldd	r25, Z+40	; 0x28
    360a:	a1 a5       	ldd	r26, Z+41	; 0x29
    360c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    360e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3610:	3b 85       	ldd	r19, Y+11	; 0x0b
    3612:	f9 01       	movw	r30, r18
    3614:	80 83       	st	Z, r24
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	a2 83       	std	Z+2, r26	; 0x02
    361a:	b3 83       	std	Z+3, r27	; 0x03
    361c:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3620:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3624:	fc 01       	movw	r30, r24
    3626:	83 a5       	ldd	r24, Z+43	; 0x2b
    3628:	82 30       	cpi	r24, 0x02	; 2
    362a:	11 f0       	breq	.+4      	; 0x3630 <xTaskNotifyWait+0xe6>
    362c:	19 82       	std	Y+1, r1	; 0x01
    362e:	1c c0       	rjmp	.+56     	; 0x3668 <xTaskNotifyWait+0x11e>
    3630:	60 91 5c 08 	lds	r22, 0x085C	; 0x80085c <__data_end>
    3634:	70 91 5d 08 	lds	r23, 0x085D	; 0x80085d <__data_end+0x1>
    3638:	fb 01       	movw	r30, r22
    363a:	27 a1       	ldd	r18, Z+39	; 0x27
    363c:	30 a5       	ldd	r19, Z+40	; 0x28
    363e:	41 a5       	ldd	r20, Z+41	; 0x29
    3640:	52 a5       	ldd	r21, Z+42	; 0x2a
    3642:	8e 81       	ldd	r24, Y+6	; 0x06
    3644:	9f 81       	ldd	r25, Y+7	; 0x07
    3646:	a8 85       	ldd	r26, Y+8	; 0x08
    3648:	b9 85       	ldd	r27, Y+9	; 0x09
    364a:	80 95       	com	r24
    364c:	90 95       	com	r25
    364e:	a0 95       	com	r26
    3650:	b0 95       	com	r27
    3652:	82 23       	and	r24, r18
    3654:	93 23       	and	r25, r19
    3656:	a4 23       	and	r26, r20
    3658:	b5 23       	and	r27, r21
    365a:	fb 01       	movw	r30, r22
    365c:	87 a3       	std	Z+39, r24	; 0x27
    365e:	90 a7       	std	Z+40, r25	; 0x28
    3660:	a1 a7       	std	Z+41, r26	; 0x29
    3662:	b2 a7       	std	Z+42, r27	; 0x2a
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    366c:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3670:	fc 01       	movw	r30, r24
    3672:	13 a6       	std	Z+43, r1	; 0x2b
    3674:	0f 90       	pop	r0
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	2d 96       	adiw	r28, 0x0d	; 13
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	ff 90       	pop	r15
    3690:	ef 90       	pop	r14
    3692:	08 95       	ret

00003694 <xTaskGenericNotify>:
    3694:	0f 93       	push	r16
    3696:	1f 93       	push	r17
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	2d 97       	sbiw	r28, 0x0d	; 13
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	9e 83       	std	Y+6, r25	; 0x06
    36ae:	8d 83       	std	Y+5, r24	; 0x05
    36b0:	4f 83       	std	Y+7, r20	; 0x07
    36b2:	58 87       	std	Y+8, r21	; 0x08
    36b4:	69 87       	std	Y+9, r22	; 0x09
    36b6:	7a 87       	std	Y+10, r23	; 0x0a
    36b8:	2b 87       	std	Y+11, r18	; 0x0b
    36ba:	1d 87       	std	Y+13, r17	; 0x0d
    36bc:	0c 87       	std	Y+12, r16	; 0x0c
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	89 83       	std	Y+1, r24	; 0x01
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	9b 83       	std	Y+3, r25	; 0x03
    36c8:	8a 83       	std	Y+2, r24	; 0x02
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	0f 92       	push	r0
    36d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    36d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    36d4:	89 2b       	or	r24, r25
    36d6:	71 f0       	breq	.+28     	; 0x36f4 <xTaskGenericNotify+0x60>
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
    36da:	9b 81       	ldd	r25, Y+3	; 0x03
    36dc:	fc 01       	movw	r30, r24
    36de:	87 a1       	ldd	r24, Z+39	; 0x27
    36e0:	90 a5       	ldd	r25, Z+40	; 0x28
    36e2:	a1 a5       	ldd	r26, Z+41	; 0x29
    36e4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    36e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    36e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    36ea:	f9 01       	movw	r30, r18
    36ec:	80 83       	st	Z, r24
    36ee:	91 83       	std	Z+1, r25	; 0x01
    36f0:	a2 83       	std	Z+2, r26	; 0x02
    36f2:	b3 83       	std	Z+3, r27	; 0x03
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	9b 81       	ldd	r25, Y+3	; 0x03
    36f8:	fc 01       	movw	r30, r24
    36fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    36fc:	8c 83       	std	Y+4, r24	; 0x04
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	9b 81       	ldd	r25, Y+3	; 0x03
    3702:	22 e0       	ldi	r18, 0x02	; 2
    3704:	fc 01       	movw	r30, r24
    3706:	23 a7       	std	Z+43, r18	; 0x2b
    3708:	8b 85       	ldd	r24, Y+11	; 0x0b
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	82 30       	cpi	r24, 0x02	; 2
    3710:	91 05       	cpc	r25, r1
    3712:	31 f1       	breq	.+76     	; 0x3760 <xTaskGenericNotify+0xcc>
    3714:	83 30       	cpi	r24, 0x03	; 3
    3716:	91 05       	cpc	r25, r1
    3718:	34 f4       	brge	.+12     	; 0x3726 <xTaskGenericNotify+0x92>
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	09 f4       	brne	.+2      	; 0x3720 <xTaskGenericNotify+0x8c>
    371e:	4f c0       	rjmp	.+158    	; 0x37be <xTaskGenericNotify+0x12a>
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	39 f0       	breq	.+14     	; 0x3732 <xTaskGenericNotify+0x9e>
    3724:	4d c0       	rjmp	.+154    	; 0x37c0 <xTaskGenericNotify+0x12c>
    3726:	83 30       	cpi	r24, 0x03	; 3
    3728:	91 05       	cpc	r25, r1
    372a:	61 f1       	breq	.+88     	; 0x3784 <xTaskGenericNotify+0xf0>
    372c:	04 97       	sbiw	r24, 0x04	; 4
    372e:	b1 f1       	breq	.+108    	; 0x379c <xTaskGenericNotify+0x108>
    3730:	47 c0       	rjmp	.+142    	; 0x37c0 <xTaskGenericNotify+0x12c>
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	fc 01       	movw	r30, r24
    3738:	27 a1       	ldd	r18, Z+39	; 0x27
    373a:	30 a5       	ldd	r19, Z+40	; 0x28
    373c:	41 a5       	ldd	r20, Z+41	; 0x29
    373e:	52 a5       	ldd	r21, Z+42	; 0x2a
    3740:	8f 81       	ldd	r24, Y+7	; 0x07
    3742:	98 85       	ldd	r25, Y+8	; 0x08
    3744:	a9 85       	ldd	r26, Y+9	; 0x09
    3746:	ba 85       	ldd	r27, Y+10	; 0x0a
    3748:	82 2b       	or	r24, r18
    374a:	93 2b       	or	r25, r19
    374c:	a4 2b       	or	r26, r20
    374e:	b5 2b       	or	r27, r21
    3750:	2a 81       	ldd	r18, Y+2	; 0x02
    3752:	3b 81       	ldd	r19, Y+3	; 0x03
    3754:	f9 01       	movw	r30, r18
    3756:	87 a3       	std	Z+39, r24	; 0x27
    3758:	90 a7       	std	Z+40, r25	; 0x28
    375a:	a1 a7       	std	Z+41, r26	; 0x29
    375c:	b2 a7       	std	Z+42, r27	; 0x2a
    375e:	30 c0       	rjmp	.+96     	; 0x37c0 <xTaskGenericNotify+0x12c>
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	9b 81       	ldd	r25, Y+3	; 0x03
    3764:	fc 01       	movw	r30, r24
    3766:	87 a1       	ldd	r24, Z+39	; 0x27
    3768:	90 a5       	ldd	r25, Z+40	; 0x28
    376a:	a1 a5       	ldd	r26, Z+41	; 0x29
    376c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    376e:	01 96       	adiw	r24, 0x01	; 1
    3770:	a1 1d       	adc	r26, r1
    3772:	b1 1d       	adc	r27, r1
    3774:	2a 81       	ldd	r18, Y+2	; 0x02
    3776:	3b 81       	ldd	r19, Y+3	; 0x03
    3778:	f9 01       	movw	r30, r18
    377a:	87 a3       	std	Z+39, r24	; 0x27
    377c:	90 a7       	std	Z+40, r25	; 0x28
    377e:	a1 a7       	std	Z+41, r26	; 0x29
    3780:	b2 a7       	std	Z+42, r27	; 0x2a
    3782:	1e c0       	rjmp	.+60     	; 0x37c0 <xTaskGenericNotify+0x12c>
    3784:	2a 81       	ldd	r18, Y+2	; 0x02
    3786:	3b 81       	ldd	r19, Y+3	; 0x03
    3788:	8f 81       	ldd	r24, Y+7	; 0x07
    378a:	98 85       	ldd	r25, Y+8	; 0x08
    378c:	a9 85       	ldd	r26, Y+9	; 0x09
    378e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3790:	f9 01       	movw	r30, r18
    3792:	87 a3       	std	Z+39, r24	; 0x27
    3794:	90 a7       	std	Z+40, r25	; 0x28
    3796:	a1 a7       	std	Z+41, r26	; 0x29
    3798:	b2 a7       	std	Z+42, r27	; 0x2a
    379a:	12 c0       	rjmp	.+36     	; 0x37c0 <xTaskGenericNotify+0x12c>
    379c:	8c 81       	ldd	r24, Y+4	; 0x04
    379e:	82 30       	cpi	r24, 0x02	; 2
    37a0:	61 f0       	breq	.+24     	; 0x37ba <xTaskGenericNotify+0x126>
    37a2:	2a 81       	ldd	r18, Y+2	; 0x02
    37a4:	3b 81       	ldd	r19, Y+3	; 0x03
    37a6:	8f 81       	ldd	r24, Y+7	; 0x07
    37a8:	98 85       	ldd	r25, Y+8	; 0x08
    37aa:	a9 85       	ldd	r26, Y+9	; 0x09
    37ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    37ae:	f9 01       	movw	r30, r18
    37b0:	87 a3       	std	Z+39, r24	; 0x27
    37b2:	90 a7       	std	Z+40, r25	; 0x28
    37b4:	a1 a7       	std	Z+41, r26	; 0x29
    37b6:	b2 a7       	std	Z+42, r27	; 0x2a
    37b8:	03 c0       	rjmp	.+6      	; 0x37c0 <xTaskGenericNotify+0x12c>
    37ba:	19 82       	std	Y+1, r1	; 0x01
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <xTaskGenericNotify+0x12c>
    37be:	00 00       	nop
    37c0:	8c 81       	ldd	r24, Y+4	; 0x04
    37c2:	81 30       	cpi	r24, 0x01	; 1
    37c4:	d1 f5       	brne	.+116    	; 0x383a <xTaskGenericNotify+0x1a6>
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ca:	02 96       	adiw	r24, 0x02	; 2
    37cc:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	9b 81       	ldd	r25, Y+3	; 0x03
    37d4:	fc 01       	movw	r30, r24
    37d6:	96 89       	ldd	r25, Z+22	; 0x16
    37d8:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    37dc:	89 17       	cp	r24, r25
    37de:	30 f4       	brcc	.+12     	; 0x37ec <xTaskGenericNotify+0x158>
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	fc 01       	movw	r30, r24
    37e6:	86 89       	ldd	r24, Z+22	; 0x16
    37e8:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	9b 81       	ldd	r25, Y+3	; 0x03
    37f0:	ac 01       	movw	r20, r24
    37f2:	4e 5f       	subi	r20, 0xFE	; 254
    37f4:	5f 4f       	sbci	r21, 0xFF	; 255
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	9b 81       	ldd	r25, Y+3	; 0x03
    37fa:	fc 01       	movw	r30, r24
    37fc:	86 89       	ldd	r24, Z+22	; 0x16
    37fe:	28 2f       	mov	r18, r24
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	c9 01       	movw	r24, r18
    3804:	88 0f       	add	r24, r24
    3806:	99 1f       	adc	r25, r25
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	82 0f       	add	r24, r18
    3812:	93 1f       	adc	r25, r19
    3814:	82 5a       	subi	r24, 0xA2	; 162
    3816:	97 4f       	sbci	r25, 0xF7	; 247
    3818:	ba 01       	movw	r22, r20
    381a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	9b 81       	ldd	r25, Y+3	; 0x03
    3822:	fc 01       	movw	r30, r24
    3824:	26 89       	ldd	r18, Z+22	; 0x16
    3826:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    382a:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    382e:	fc 01       	movw	r30, r24
    3830:	86 89       	ldd	r24, Z+22	; 0x16
    3832:	82 17       	cp	r24, r18
    3834:	10 f4       	brcc	.+4      	; 0x383a <xTaskGenericNotify+0x1a6>
    3836:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
    383a:	0f 90       	pop	r0
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	2d 96       	adiw	r28, 0x0d	; 13
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	f8 94       	cli
    3846:	de bf       	out	0x3e, r29	; 62
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	df 91       	pop	r29
    384e:	cf 91       	pop	r28
    3850:	1f 91       	pop	r17
    3852:	0f 91       	pop	r16
    3854:	08 95       	ret

00003856 <xTaskGenericNotifyFromISR>:
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	60 97       	sbiw	r28, 0x10	; 16
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	9f 83       	std	Y+7, r25	; 0x07
    3874:	8e 83       	std	Y+6, r24	; 0x06
    3876:	48 87       	std	Y+8, r20	; 0x08
    3878:	59 87       	std	Y+9, r21	; 0x09
    387a:	6a 87       	std	Y+10, r22	; 0x0a
    387c:	7b 87       	std	Y+11, r23	; 0x0b
    387e:	2c 87       	std	Y+12, r18	; 0x0c
    3880:	1e 87       	std	Y+14, r17	; 0x0e
    3882:	0d 87       	std	Y+13, r16	; 0x0d
    3884:	f8 8a       	std	Y+16, r15	; 0x10
    3886:	ef 86       	std	Y+15, r14	; 0x0f
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	89 83       	std	Y+1, r24	; 0x01
    388c:	8e 81       	ldd	r24, Y+6	; 0x06
    388e:	9f 81       	ldd	r25, Y+7	; 0x07
    3890:	9b 83       	std	Y+3, r25	; 0x03
    3892:	8a 83       	std	Y+2, r24	; 0x02
    3894:	1c 82       	std	Y+4, r1	; 0x04
    3896:	8d 85       	ldd	r24, Y+13	; 0x0d
    3898:	9e 85       	ldd	r25, Y+14	; 0x0e
    389a:	89 2b       	or	r24, r25
    389c:	71 f0       	breq	.+28     	; 0x38ba <xTaskGenericNotifyFromISR+0x64>
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	9b 81       	ldd	r25, Y+3	; 0x03
    38a2:	fc 01       	movw	r30, r24
    38a4:	87 a1       	ldd	r24, Z+39	; 0x27
    38a6:	90 a5       	ldd	r25, Z+40	; 0x28
    38a8:	a1 a5       	ldd	r26, Z+41	; 0x29
    38aa:	b2 a5       	ldd	r27, Z+42	; 0x2a
    38ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    38ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    38b0:	f9 01       	movw	r30, r18
    38b2:	80 83       	st	Z, r24
    38b4:	91 83       	std	Z+1, r25	; 0x01
    38b6:	a2 83       	std	Z+2, r26	; 0x02
    38b8:	b3 83       	std	Z+3, r27	; 0x03
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	9b 81       	ldd	r25, Y+3	; 0x03
    38be:	fc 01       	movw	r30, r24
    38c0:	83 a5       	ldd	r24, Z+43	; 0x2b
    38c2:	8d 83       	std	Y+5, r24	; 0x05
    38c4:	8a 81       	ldd	r24, Y+2	; 0x02
    38c6:	9b 81       	ldd	r25, Y+3	; 0x03
    38c8:	22 e0       	ldi	r18, 0x02	; 2
    38ca:	fc 01       	movw	r30, r24
    38cc:	23 a7       	std	Z+43, r18	; 0x2b
    38ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    38d0:	88 2f       	mov	r24, r24
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	82 30       	cpi	r24, 0x02	; 2
    38d6:	91 05       	cpc	r25, r1
    38d8:	31 f1       	breq	.+76     	; 0x3926 <xTaskGenericNotifyFromISR+0xd0>
    38da:	83 30       	cpi	r24, 0x03	; 3
    38dc:	91 05       	cpc	r25, r1
    38de:	34 f4       	brge	.+12     	; 0x38ec <xTaskGenericNotifyFromISR+0x96>
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <xTaskGenericNotifyFromISR+0x90>
    38e4:	4f c0       	rjmp	.+158    	; 0x3984 <xTaskGenericNotifyFromISR+0x12e>
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	39 f0       	breq	.+14     	; 0x38f8 <xTaskGenericNotifyFromISR+0xa2>
    38ea:	4d c0       	rjmp	.+154    	; 0x3986 <xTaskGenericNotifyFromISR+0x130>
    38ec:	83 30       	cpi	r24, 0x03	; 3
    38ee:	91 05       	cpc	r25, r1
    38f0:	61 f1       	breq	.+88     	; 0x394a <xTaskGenericNotifyFromISR+0xf4>
    38f2:	04 97       	sbiw	r24, 0x04	; 4
    38f4:	b1 f1       	breq	.+108    	; 0x3962 <xTaskGenericNotifyFromISR+0x10c>
    38f6:	47 c0       	rjmp	.+142    	; 0x3986 <xTaskGenericNotifyFromISR+0x130>
    38f8:	8a 81       	ldd	r24, Y+2	; 0x02
    38fa:	9b 81       	ldd	r25, Y+3	; 0x03
    38fc:	fc 01       	movw	r30, r24
    38fe:	27 a1       	ldd	r18, Z+39	; 0x27
    3900:	30 a5       	ldd	r19, Z+40	; 0x28
    3902:	41 a5       	ldd	r20, Z+41	; 0x29
    3904:	52 a5       	ldd	r21, Z+42	; 0x2a
    3906:	88 85       	ldd	r24, Y+8	; 0x08
    3908:	99 85       	ldd	r25, Y+9	; 0x09
    390a:	aa 85       	ldd	r26, Y+10	; 0x0a
    390c:	bb 85       	ldd	r27, Y+11	; 0x0b
    390e:	82 2b       	or	r24, r18
    3910:	93 2b       	or	r25, r19
    3912:	a4 2b       	or	r26, r20
    3914:	b5 2b       	or	r27, r21
    3916:	2a 81       	ldd	r18, Y+2	; 0x02
    3918:	3b 81       	ldd	r19, Y+3	; 0x03
    391a:	f9 01       	movw	r30, r18
    391c:	87 a3       	std	Z+39, r24	; 0x27
    391e:	90 a7       	std	Z+40, r25	; 0x28
    3920:	a1 a7       	std	Z+41, r26	; 0x29
    3922:	b2 a7       	std	Z+42, r27	; 0x2a
    3924:	30 c0       	rjmp	.+96     	; 0x3986 <xTaskGenericNotifyFromISR+0x130>
    3926:	8a 81       	ldd	r24, Y+2	; 0x02
    3928:	9b 81       	ldd	r25, Y+3	; 0x03
    392a:	fc 01       	movw	r30, r24
    392c:	87 a1       	ldd	r24, Z+39	; 0x27
    392e:	90 a5       	ldd	r25, Z+40	; 0x28
    3930:	a1 a5       	ldd	r26, Z+41	; 0x29
    3932:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3934:	01 96       	adiw	r24, 0x01	; 1
    3936:	a1 1d       	adc	r26, r1
    3938:	b1 1d       	adc	r27, r1
    393a:	2a 81       	ldd	r18, Y+2	; 0x02
    393c:	3b 81       	ldd	r19, Y+3	; 0x03
    393e:	f9 01       	movw	r30, r18
    3940:	87 a3       	std	Z+39, r24	; 0x27
    3942:	90 a7       	std	Z+40, r25	; 0x28
    3944:	a1 a7       	std	Z+41, r26	; 0x29
    3946:	b2 a7       	std	Z+42, r27	; 0x2a
    3948:	1e c0       	rjmp	.+60     	; 0x3986 <xTaskGenericNotifyFromISR+0x130>
    394a:	2a 81       	ldd	r18, Y+2	; 0x02
    394c:	3b 81       	ldd	r19, Y+3	; 0x03
    394e:	88 85       	ldd	r24, Y+8	; 0x08
    3950:	99 85       	ldd	r25, Y+9	; 0x09
    3952:	aa 85       	ldd	r26, Y+10	; 0x0a
    3954:	bb 85       	ldd	r27, Y+11	; 0x0b
    3956:	f9 01       	movw	r30, r18
    3958:	87 a3       	std	Z+39, r24	; 0x27
    395a:	90 a7       	std	Z+40, r25	; 0x28
    395c:	a1 a7       	std	Z+41, r26	; 0x29
    395e:	b2 a7       	std	Z+42, r27	; 0x2a
    3960:	12 c0       	rjmp	.+36     	; 0x3986 <xTaskGenericNotifyFromISR+0x130>
    3962:	8d 81       	ldd	r24, Y+5	; 0x05
    3964:	82 30       	cpi	r24, 0x02	; 2
    3966:	61 f0       	breq	.+24     	; 0x3980 <xTaskGenericNotifyFromISR+0x12a>
    3968:	2a 81       	ldd	r18, Y+2	; 0x02
    396a:	3b 81       	ldd	r19, Y+3	; 0x03
    396c:	88 85       	ldd	r24, Y+8	; 0x08
    396e:	99 85       	ldd	r25, Y+9	; 0x09
    3970:	aa 85       	ldd	r26, Y+10	; 0x0a
    3972:	bb 85       	ldd	r27, Y+11	; 0x0b
    3974:	f9 01       	movw	r30, r18
    3976:	87 a3       	std	Z+39, r24	; 0x27
    3978:	90 a7       	std	Z+40, r25	; 0x28
    397a:	a1 a7       	std	Z+41, r26	; 0x29
    397c:	b2 a7       	std	Z+42, r27	; 0x2a
    397e:	03 c0       	rjmp	.+6      	; 0x3986 <xTaskGenericNotifyFromISR+0x130>
    3980:	19 82       	std	Y+1, r1	; 0x01
    3982:	01 c0       	rjmp	.+2      	; 0x3986 <xTaskGenericNotifyFromISR+0x130>
    3984:	00 00       	nop
    3986:	8d 81       	ldd	r24, Y+5	; 0x05
    3988:	81 30       	cpi	r24, 0x01	; 1
    398a:	09 f0       	breq	.+2      	; 0x398e <xTaskGenericNotifyFromISR+0x138>
    398c:	51 c0       	rjmp	.+162    	; 0x3a30 <xTaskGenericNotifyFromISR+0x1da>
    398e:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <uxSchedulerSuspended>
    3992:	88 23       	and	r24, r24
    3994:	69 f5       	brne	.+90     	; 0x39f0 <xTaskGenericNotifyFromISR+0x19a>
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	02 96       	adiw	r24, 0x02	; 2
    399c:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	9b 81       	ldd	r25, Y+3	; 0x03
    39a4:	fc 01       	movw	r30, r24
    39a6:	96 89       	ldd	r25, Z+22	; 0x16
    39a8:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <uxTopReadyPriority>
    39ac:	89 17       	cp	r24, r25
    39ae:	30 f4       	brcc	.+12     	; 0x39bc <xTaskGenericNotifyFromISR+0x166>
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	9b 81       	ldd	r25, Y+3	; 0x03
    39b4:	fc 01       	movw	r30, r24
    39b6:	86 89       	ldd	r24, Z+22	; 0x16
    39b8:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <uxTopReadyPriority>
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	ac 01       	movw	r20, r24
    39c2:	4e 5f       	subi	r20, 0xFE	; 254
    39c4:	5f 4f       	sbci	r21, 0xFF	; 255
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
    39c8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ca:	fc 01       	movw	r30, r24
    39cc:	86 89       	ldd	r24, Z+22	; 0x16
    39ce:	28 2f       	mov	r18, r24
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	c9 01       	movw	r24, r18
    39d4:	88 0f       	add	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	88 0f       	add	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	82 0f       	add	r24, r18
    39e2:	93 1f       	adc	r25, r19
    39e4:	82 5a       	subi	r24, 0xA2	; 162
    39e6:	97 4f       	sbci	r25, 0xF7	; 247
    39e8:	ba 01       	movw	r22, r20
    39ea:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    39ee:	08 c0       	rjmp	.+16     	; 0x3a00 <xTaskGenericNotifyFromISR+0x1aa>
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	9b 81       	ldd	r25, Y+3	; 0x03
    39f4:	0c 96       	adiw	r24, 0x0c	; 12
    39f6:	bc 01       	movw	r22, r24
    39f8:	88 e9       	ldi	r24, 0x98	; 152
    39fa:	98 e0       	ldi	r25, 0x08	; 8
    39fc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>
    3a00:	8a 81       	ldd	r24, Y+2	; 0x02
    3a02:	9b 81       	ldd	r25, Y+3	; 0x03
    3a04:	fc 01       	movw	r30, r24
    3a06:	26 89       	ldd	r18, Z+22	; 0x16
    3a08:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3a0c:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3a10:	fc 01       	movw	r30, r24
    3a12:	86 89       	ldd	r24, Z+22	; 0x16
    3a14:	82 17       	cp	r24, r18
    3a16:	60 f4       	brcc	.+24     	; 0x3a30 <xTaskGenericNotifyFromISR+0x1da>
    3a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a1a:	98 89       	ldd	r25, Y+16	; 0x10
    3a1c:	89 2b       	or	r24, r25
    3a1e:	29 f0       	breq	.+10     	; 0x3a2a <xTaskGenericNotifyFromISR+0x1d4>
    3a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a22:	98 89       	ldd	r25, Y+16	; 0x10
    3a24:	21 e0       	ldi	r18, 0x01	; 1
    3a26:	fc 01       	movw	r30, r24
    3a28:	20 83       	st	Z, r18
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <xYieldPending>
    3a30:	89 81       	ldd	r24, Y+1	; 0x01
    3a32:	60 96       	adiw	r28, 0x10	; 16
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	ff 90       	pop	r15
    3a48:	ef 90       	pop	r14
    3a4a:	08 95       	ret

00003a4c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
    {
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	00 d0       	rcall	.+0      	; 0x3a52 <xTaskNotifyStateClear+0x6>
    3a52:	1f 92       	push	r1
    3a54:	1f 92       	push	r1
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	9d 83       	std	Y+5, r25	; 0x05
    3a5c:	8c 83       	std	Y+4, r24	; 0x04
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a60:	9d 81       	ldd	r25, Y+5	; 0x05
    3a62:	89 2b       	or	r24, r25
    3a64:	29 f4       	brne	.+10     	; 0x3a70 <xTaskNotifyStateClear+0x24>
    3a66:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3a6a:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3a6e:	02 c0       	rjmp	.+4      	; 0x3a74 <xTaskNotifyStateClear+0x28>
    3a70:	8c 81       	ldd	r24, Y+4	; 0x04
    3a72:	9d 81       	ldd	r25, Y+5	; 0x05
    3a74:	9b 83       	std	Y+3, r25	; 0x03
    3a76:	8a 83       	std	Y+2, r24	; 0x02

        taskENTER_CRITICAL();
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a80:	9b 81       	ldd	r25, Y+3	; 0x03
    3a82:	fc 01       	movw	r30, r24
    3a84:	83 a5       	ldd	r24, Z+43	; 0x2b
    3a86:	82 30       	cpi	r24, 0x02	; 2
    3a88:	39 f4       	brne	.+14     	; 0x3a98 <xTaskNotifyStateClear+0x4c>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8e:	fc 01       	movw	r30, r24
    3a90:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	89 83       	std	Y+1, r24	; 0x01
    3a96:	01 c0       	rjmp	.+2      	; 0x3a9a <xTaskNotifyStateClear+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
    3a98:	19 82       	std	Y+1, r1	; 0x01
            }
        }
        taskEXIT_CRITICAL();
    3a9a:	0f 90       	pop	r0
    3a9c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    }
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	08 95       	ret

00003ab0 <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	27 97       	sbiw	r28, 0x07	; 7
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
    3ac8:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3aca:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <xTickCount>
    3ace:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <xTickCount+0x1>
    3ad2:	9a 83       	std	Y+2, r25	; 0x02
    3ad4:	89 83       	std	Y+1, r24	; 0x01
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3ad6:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3ada:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3ade:	02 96       	adiw	r24, 0x02	; 2
    3ae0:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	71 f4       	brne	.+28     	; 0x3b08 <prvAddCurrentTaskToDelayedList+0x58>
    3aec:	8f 81       	ldd	r24, Y+7	; 0x07
    3aee:	88 23       	and	r24, r24
    3af0:	59 f0       	breq	.+22     	; 0x3b08 <prvAddCurrentTaskToDelayedList+0x58>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3af2:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3af6:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3afa:	02 96       	adiw	r24, 0x02	; 2
    3afc:	bc 01       	movw	r22, r24
    3afe:	8b ea       	ldi	r24, 0xAB	; 171
    3b00:	98 e0       	ldi	r25, 0x08	; 8
    3b02:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3b06:	44 c0       	rjmp	.+136    	; 0x3b90 <prvAddCurrentTaskToDelayedList+0xe0>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    3b08:	29 81       	ldd	r18, Y+1	; 0x01
    3b0a:	3a 81       	ldd	r19, Y+2	; 0x02
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b10:	82 0f       	add	r24, r18
    3b12:	93 1f       	adc	r25, r19
    3b14:	9c 83       	std	Y+4, r25	; 0x04
    3b16:	8b 83       	std	Y+3, r24	; 0x03

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3b18:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3b1c:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3b20:	2b 81       	ldd	r18, Y+3	; 0x03
    3b22:	3c 81       	ldd	r19, Y+4	; 0x04
    3b24:	fc 01       	movw	r30, r24
    3b26:	33 83       	std	Z+3, r19	; 0x03
    3b28:	22 83       	std	Z+2, r18	; 0x02

            if( xTimeToWake < xConstTickCount )
    3b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	9a 81       	ldd	r25, Y+2	; 0x02
    3b32:	28 17       	cp	r18, r24
    3b34:	39 07       	cpc	r19, r25
    3b36:	78 f4       	brcc	.+30     	; 0x3b56 <prvAddCurrentTaskToDelayedList+0xa6>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3b38:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3b3c:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3b40:	9c 01       	movw	r18, r24
    3b42:	2e 5f       	subi	r18, 0xFE	; 254
    3b44:	3f 4f       	sbci	r19, 0xFF	; 255
    3b46:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <pxOverflowDelayedTaskList>
    3b4a:	90 91 97 08 	lds	r25, 0x0897	; 0x800897 <pxOverflowDelayedTaskList+0x1>
    3b4e:	b9 01       	movw	r22, r18
    3b50:	0e 94 9f 02 	call	0x53e	; 0x53e <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3b54:	1d c0       	rjmp	.+58     	; 0x3b90 <prvAddCurrentTaskToDelayedList+0xe0>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3b56:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <__data_end>
    3b5a:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <__data_end+0x1>
    3b5e:	9c 01       	movw	r18, r24
    3b60:	2e 5f       	subi	r18, 0xFE	; 254
    3b62:	3f 4f       	sbci	r19, 0xFF	; 255
    3b64:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <pxDelayedTaskList>
    3b68:	90 91 95 08 	lds	r25, 0x0895	; 0x800895 <pxDelayedTaskList+0x1>
    3b6c:	b9 01       	movw	r22, r18
    3b6e:	0e 94 9f 02 	call	0x53e	; 0x53e <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    3b72:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <xNextTaskUnblockTime>
    3b76:	90 91 be 08 	lds	r25, 0x08BE	; 0x8008be <xNextTaskUnblockTime+0x1>
    3b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b7e:	28 17       	cp	r18, r24
    3b80:	39 07       	cpc	r19, r25
    3b82:	30 f4       	brcc	.+12     	; 0x3b90 <prvAddCurrentTaskToDelayedList+0xe0>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    3b84:	8b 81       	ldd	r24, Y+3	; 0x03
    3b86:	9c 81       	ldd	r25, Y+4	; 0x04
    3b88:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <xNextTaskUnblockTime+0x1>
    3b8c:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3b90:	00 00       	nop
    3b92:	27 96       	adiw	r28, 0x07	; 7
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	08 95       	ret

00003ba4 <xTimerCreateTimerTask>:
    3ba4:	ef 92       	push	r14
    3ba6:	ff 92       	push	r15
    3ba8:	0f 93       	push	r16
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	1f 92       	push	r1
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	19 82       	std	Y+1, r1	; 0x01
    3bb6:	40 d4       	rcall	.+2176   	; 0x4438 <prvCheckForValidListAndQueue>
    3bb8:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    3bbc:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    3bc0:	89 2b       	or	r24, r25
    3bc2:	91 f0       	breq	.+36     	; 0x3be8 <xTimerCreateTimerTask+0x44>
    3bc4:	0f 2e       	mov	r0, r31
    3bc6:	fa ed       	ldi	r31, 0xDA	; 218
    3bc8:	ef 2e       	mov	r14, r31
    3bca:	f8 e0       	ldi	r31, 0x08	; 8
    3bcc:	ff 2e       	mov	r15, r31
    3bce:	f0 2d       	mov	r31, r0
    3bd0:	03 e0       	ldi	r16, 0x03	; 3
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	45 e5       	ldi	r20, 0x55	; 85
    3bd8:	50 e0       	ldi	r21, 0x00	; 0
    3bda:	66 e2       	ldi	r22, 0x26	; 38
    3bdc:	72 e0       	ldi	r23, 0x02	; 2
    3bde:	8f ed       	ldi	r24, 0xDF	; 223
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <xTaskCreate>
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	0f 90       	pop	r0
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	08 95       	ret

00003bf8 <xTimerCreate>:
    3bf8:	ef 92       	push	r14
    3bfa:	ff 92       	push	r15
    3bfc:	0f 93       	push	r16
    3bfe:	1f 93       	push	r17
    3c00:	cf 93       	push	r28
    3c02:	df 93       	push	r29
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
    3c08:	2b 97       	sbiw	r28, 0x0b	; 11
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	de bf       	out	0x3e, r29	; 62
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	cd bf       	out	0x3d, r28	; 61
    3c14:	9c 83       	std	Y+4, r25	; 0x04
    3c16:	8b 83       	std	Y+3, r24	; 0x03
    3c18:	7e 83       	std	Y+6, r23	; 0x06
    3c1a:	6d 83       	std	Y+5, r22	; 0x05
    3c1c:	4f 83       	std	Y+7, r20	; 0x07
    3c1e:	39 87       	std	Y+9, r19	; 0x09
    3c20:	28 87       	std	Y+8, r18	; 0x08
    3c22:	1b 87       	std	Y+11, r17	; 0x0b
    3c24:	0a 87       	std	Y+10, r16	; 0x0a
    3c26:	84 e1       	ldi	r24, 0x14	; 20
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0e 94 cc 01 	call	0x398	; 0x398 <pvPortMalloc>
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	9a 81       	ldd	r25, Y+2	; 0x02
    3c36:	89 2b       	or	r24, r25
    3c38:	91 f0       	breq	.+36     	; 0x3c5e <xTimerCreate+0x66>
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3e:	fc 01       	movw	r30, r24
    3c40:	13 8a       	std	Z+19, r1	; 0x13
    3c42:	e9 81       	ldd	r30, Y+1	; 0x01
    3c44:	fa 81       	ldd	r31, Y+2	; 0x02
    3c46:	4a 85       	ldd	r20, Y+10	; 0x0a
    3c48:	5b 85       	ldd	r21, Y+11	; 0x0b
    3c4a:	28 85       	ldd	r18, Y+8	; 0x08
    3c4c:	39 85       	ldd	r19, Y+9	; 0x09
    3c4e:	6d 81       	ldd	r22, Y+5	; 0x05
    3c50:	7e 81       	ldd	r23, Y+6	; 0x06
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	9c 81       	ldd	r25, Y+4	; 0x04
    3c56:	7f 01       	movw	r14, r30
    3c58:	8a 01       	movw	r16, r20
    3c5a:	4f 81       	ldd	r20, Y+7	; 0x07
    3c5c:	0f d0       	rcall	.+30     	; 0x3c7c <prvInitialiseNewTimer>
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	9a 81       	ldd	r25, Y+2	; 0x02
    3c62:	2b 96       	adiw	r28, 0x0b	; 11
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	08 95       	ret

00003c7c <prvInitialiseNewTimer>:
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	0f 93       	push	r16
    3c82:	1f 93       	push	r17
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	2b 97       	sbiw	r28, 0x0b	; 11
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	9a 83       	std	Y+2, r25	; 0x02
    3c9a:	89 83       	std	Y+1, r24	; 0x01
    3c9c:	7c 83       	std	Y+4, r23	; 0x04
    3c9e:	6b 83       	std	Y+3, r22	; 0x03
    3ca0:	4d 83       	std	Y+5, r20	; 0x05
    3ca2:	3f 83       	std	Y+7, r19	; 0x07
    3ca4:	2e 83       	std	Y+6, r18	; 0x06
    3ca6:	19 87       	std	Y+9, r17	; 0x09
    3ca8:	08 87       	std	Y+8, r16	; 0x08
    3caa:	fb 86       	std	Y+11, r15	; 0x0b
    3cac:	ea 86       	std	Y+10, r14	; 0x0a
    3cae:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cb2:	89 2b       	or	r24, r25
    3cb4:	79 f1       	breq	.+94     	; 0x3d14 <prvInitialiseNewTimer+0x98>
    3cb6:	c0 d3       	rcall	.+1920   	; 0x4438 <prvCheckForValidListAndQueue>
    3cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cbc:	29 81       	ldd	r18, Y+1	; 0x01
    3cbe:	3a 81       	ldd	r19, Y+2	; 0x02
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	31 83       	std	Z+1, r19	; 0x01
    3cc4:	20 83       	st	Z, r18
    3cc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cca:	2b 81       	ldd	r18, Y+3	; 0x03
    3ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    3cce:	fc 01       	movw	r30, r24
    3cd0:	35 87       	std	Z+13, r19	; 0x0d
    3cd2:	24 87       	std	Z+12, r18	; 0x0c
    3cd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cd8:	2e 81       	ldd	r18, Y+6	; 0x06
    3cda:	3f 81       	ldd	r19, Y+7	; 0x07
    3cdc:	fc 01       	movw	r30, r24
    3cde:	37 87       	std	Z+15, r19	; 0x0f
    3ce0:	26 87       	std	Z+14, r18	; 0x0e
    3ce2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ce4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ce6:	28 85       	ldd	r18, Y+8	; 0x08
    3ce8:	39 85       	ldd	r19, Y+9	; 0x09
    3cea:	fc 01       	movw	r30, r24
    3cec:	31 8b       	std	Z+17, r19	; 0x11
    3cee:	20 8b       	std	Z+16, r18	; 0x10
    3cf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cf2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cf4:	02 96       	adiw	r24, 0x02	; 2
    3cf6:	0e 94 3e 02 	call	0x47c	; 0x47c <vListInitialiseItem>
    3cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfc:	88 23       	and	r24, r24
    3cfe:	51 f0       	breq	.+20     	; 0x3d14 <prvInitialiseNewTimer+0x98>
    3d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d04:	fc 01       	movw	r30, r24
    3d06:	83 89       	ldd	r24, Z+19	; 0x13
    3d08:	28 2f       	mov	r18, r24
    3d0a:	24 60       	ori	r18, 0x04	; 4
    3d0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d10:	fc 01       	movw	r30, r24
    3d12:	23 8b       	std	Z+19, r18	; 0x13
    3d14:	00 00       	nop
    3d16:	2b 96       	adiw	r28, 0x0b	; 11
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	1f 91       	pop	r17
    3d28:	0f 91       	pop	r16
    3d2a:	ff 90       	pop	r15
    3d2c:	ef 90       	pop	r14
    3d2e:	08 95       	ret

00003d30 <xTimerGenericCommand>:
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	2f 97       	sbiw	r28, 0x0f	; 15
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	98 87       	std	Y+8, r25	; 0x08
    3d4a:	8f 83       	std	Y+7, r24	; 0x07
    3d4c:	69 87       	std	Y+9, r22	; 0x09
    3d4e:	5b 87       	std	Y+11, r21	; 0x0b
    3d50:	4a 87       	std	Y+10, r20	; 0x0a
    3d52:	3d 87       	std	Y+13, r19	; 0x0d
    3d54:	2c 87       	std	Y+12, r18	; 0x0c
    3d56:	1f 87       	std	Y+15, r17	; 0x0f
    3d58:	0e 87       	std	Y+14, r16	; 0x0e
    3d5a:	19 82       	std	Y+1, r1	; 0x01
    3d5c:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    3d60:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    3d64:	89 2b       	or	r24, r25
    3d66:	c9 f1       	breq	.+114    	; 0x3dda <xTimerGenericCommand+0xaa>
    3d68:	89 85       	ldd	r24, Y+9	; 0x09
    3d6a:	8a 83       	std	Y+2, r24	; 0x02
    3d6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d70:	9c 83       	std	Y+4, r25	; 0x04
    3d72:	8b 83       	std	Y+3, r24	; 0x03
    3d74:	8f 81       	ldd	r24, Y+7	; 0x07
    3d76:	98 85       	ldd	r25, Y+8	; 0x08
    3d78:	9e 83       	std	Y+6, r25	; 0x06
    3d7a:	8d 83       	std	Y+5, r24	; 0x05
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	86 30       	cpi	r24, 0x06	; 6
    3d80:	fc f4       	brge	.+62     	; 0x3dc0 <xTimerGenericCommand+0x90>
    3d82:	e7 d9       	rcall	.-3122   	; 0x3152 <xTaskGetSchedulerState>
    3d84:	82 30       	cpi	r24, 0x02	; 2
    3d86:	71 f4       	brne	.+28     	; 0x3da4 <xTimerGenericCommand+0x74>
    3d88:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    3d8c:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    3d90:	4e 85       	ldd	r20, Y+14	; 0x0e
    3d92:	5f 85       	ldd	r21, Y+15	; 0x0f
    3d94:	be 01       	movw	r22, r28
    3d96:	6e 5f       	subi	r22, 0xFE	; 254
    3d98:	7f 4f       	sbci	r23, 0xFF	; 255
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
    3da0:	89 83       	std	Y+1, r24	; 0x01
    3da2:	1b c0       	rjmp	.+54     	; 0x3dda <xTimerGenericCommand+0xaa>
    3da4:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    3da8:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    3dac:	be 01       	movw	r22, r28
    3dae:	6e 5f       	subi	r22, 0xFE	; 254
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	50 e0       	ldi	r21, 0x00	; 0
    3db8:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
    3dbc:	89 83       	std	Y+1, r24	; 0x01
    3dbe:	0d c0       	rjmp	.+26     	; 0x3dda <xTimerGenericCommand+0xaa>
    3dc0:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    3dc4:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    3dc8:	4c 85       	ldd	r20, Y+12	; 0x0c
    3dca:	5d 85       	ldd	r21, Y+13	; 0x0d
    3dcc:	be 01       	movw	r22, r28
    3dce:	6e 5f       	subi	r22, 0xFE	; 254
    3dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <xQueueGenericSendFromISR>
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	2f 96       	adiw	r28, 0x0f	; 15
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	f8 94       	cli
    3de2:	de bf       	out	0x3e, r29	; 62
    3de4:	0f be       	out	0x3f, r0	; 63
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	1f 91       	pop	r17
    3dee:	0f 91       	pop	r16
    3df0:	08 95       	ret

00003df2 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    3df2:	0f 93       	push	r16
    3df4:	1f 93       	push	r17
    3df6:	cf 93       	push	r28
    3df8:	df 93       	push	r29
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    3dfe:	27 97       	sbiw	r28, 0x07	; 7
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	de bf       	out	0x3e, r29	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	9d 83       	std	Y+5, r25	; 0x05
    3e0c:	8c 83       	std	Y+4, r24	; 0x04
    3e0e:	7f 83       	std	Y+7, r23	; 0x07
    3e10:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3e12:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    3e16:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	85 81       	ldd	r24, Z+5	; 0x05
    3e1e:	96 81       	ldd	r25, Z+6	; 0x06
    3e20:	fc 01       	movw	r30, r24
    3e22:	86 81       	ldd	r24, Z+6	; 0x06
    3e24:	97 81       	ldd	r25, Z+7	; 0x07
    3e26:	9a 83       	std	Y+2, r25	; 0x02
    3e28:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2e:	02 96       	adiw	r24, 0x02	; 2
    3e30:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	9a 81       	ldd	r25, Y+2	; 0x02
    3e38:	fc 01       	movw	r30, r24
    3e3a:	83 89       	ldd	r24, Z+19	; 0x13
    3e3c:	88 2f       	mov	r24, r24
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	84 70       	andi	r24, 0x04	; 4
    3e42:	99 27       	eor	r25, r25
    3e44:	89 2b       	or	r24, r25
    3e46:	f9 f0       	breq	.+62     	; 0x3e86 <prvProcessExpiredTimer+0x94>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	24 85       	ldd	r18, Z+12	; 0x0c
    3e50:	35 85       	ldd	r19, Z+13	; 0x0d
    3e52:	8c 81       	ldd	r24, Y+4	; 0x04
    3e54:	9d 81       	ldd	r25, Y+5	; 0x05
    3e56:	b9 01       	movw	r22, r18
    3e58:	68 0f       	add	r22, r24
    3e5a:	79 1f       	adc	r23, r25
    3e5c:	2c 81       	ldd	r18, Y+4	; 0x04
    3e5e:	3d 81       	ldd	r19, Y+5	; 0x05
    3e60:	4e 81       	ldd	r20, Y+6	; 0x06
    3e62:	5f 81       	ldd	r21, Y+7	; 0x07
    3e64:	89 81       	ldd	r24, Y+1	; 0x01
    3e66:	9a 81       	ldd	r25, Y+2	; 0x02
    3e68:	e6 d0       	rcall	.+460    	; 0x4036 <prvInsertTimerInActiveList>
    3e6a:	88 23       	and	r24, r24
    3e6c:	b1 f0       	breq	.+44     	; 0x3e9a <prvProcessExpiredTimer+0xa8>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3e6e:	4c 81       	ldd	r20, Y+4	; 0x04
    3e70:	5d 81       	ldd	r21, Y+5	; 0x05
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	9a 81       	ldd	r25, Y+2	; 0x02
    3e76:	00 e0       	ldi	r16, 0x00	; 0
    3e78:	10 e0       	ldi	r17, 0x00	; 0
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	57 df       	rcall	.-338    	; 0x3d30 <xTimerGenericCommand>
    3e82:	8b 83       	std	Y+3, r24	; 0x03
    3e84:	0a c0       	rjmp	.+20     	; 0x3e9a <prvProcessExpiredTimer+0xa8>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	83 89       	ldd	r24, Z+19	; 0x13
    3e8e:	28 2f       	mov	r18, r24
    3e90:	2e 7f       	andi	r18, 0xFE	; 254
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	9a 81       	ldd	r25, Y+2	; 0x02
    3e96:	fc 01       	movw	r30, r24
    3e98:	23 8b       	std	Z+19, r18	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	20 89       	ldd	r18, Z+16	; 0x10
    3ea2:	31 89       	ldd	r19, Z+17	; 0x11
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	f9 01       	movw	r30, r18
    3eaa:	19 95       	eicall
}
    3eac:	00 00       	nop
    3eae:	27 96       	adiw	r28, 0x07	; 7
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	1f 91       	pop	r17
    3ec0:	0f 91       	pop	r16
    3ec2:	08 95       	ret

00003ec4 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	00 d0       	rcall	.+0      	; 0x3eca <prvProcessTimerOrBlockTask+0x6>
    3eca:	00 d0       	rcall	.+0      	; 0x3ecc <prvProcessTimerOrBlockTask+0x8>
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	9d 83       	std	Y+5, r25	; 0x05
    3ed2:	8c 83       	std	Y+4, r24	; 0x04
    3ed4:	6e 83       	std	Y+6, r22	; 0x06
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3ed6:	0e 94 19 14 	call	0x2832	; 0x2832 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3eda:	ce 01       	movw	r24, r28
    3edc:	03 96       	adiw	r24, 0x03	; 3
    3ede:	7c d0       	rcall	.+248    	; 0x3fd8 <prvSampleTimeNow>
    3ee0:	9a 83       	std	Y+2, r25	; 0x02
    3ee2:	89 83       	std	Y+1, r24	; 0x01
        if( xTimerListsWereSwitched == pdFALSE )
    3ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee6:	88 23       	and	r24, r24
    3ee8:	b1 f5       	brne	.+108    	; 0x3f56 <prvProcessTimerOrBlockTask+0x92>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3eea:	8e 81       	ldd	r24, Y+6	; 0x06
    3eec:	88 23       	and	r24, r24
    3eee:	81 f4       	brne	.+32     	; 0x3f10 <prvProcessTimerOrBlockTask+0x4c>
    3ef0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ef2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	82 17       	cp	r24, r18
    3efa:	93 07       	cpc	r25, r19
    3efc:	48 f0       	brcs	.+18     	; 0x3f10 <prvProcessTimerOrBlockTask+0x4c>
            {
                ( void ) xTaskResumeAll();
    3efe:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3f02:	29 81       	ldd	r18, Y+1	; 0x01
    3f04:	3a 81       	ldd	r19, Y+2	; 0x02
    3f06:	8c 81       	ldd	r24, Y+4	; 0x04
    3f08:	9d 81       	ldd	r25, Y+5	; 0x05
    3f0a:	b9 01       	movw	r22, r18
    3f0c:	72 df       	rcall	.-284    	; 0x3df2 <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3f0e:	25 c0       	rjmp	.+74     	; 0x3f5a <prvProcessTimerOrBlockTask+0x96>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    3f10:	8e 81       	ldd	r24, Y+6	; 0x06
    3f12:	88 23       	and	r24, r24
    3f14:	59 f0       	breq	.+22     	; 0x3f2c <prvProcessTimerOrBlockTask+0x68>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3f16:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <pxOverflowTimerList>
    3f1a:	90 91 d7 08 	lds	r25, 0x08D7	; 0x8008d7 <pxOverflowTimerList+0x1>
    3f1e:	fc 01       	movw	r30, r24
    3f20:	90 81       	ld	r25, Z
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	99 23       	and	r25, r25
    3f26:	09 f0       	breq	.+2      	; 0x3f2a <prvProcessTimerOrBlockTask+0x66>
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	8e 83       	std	Y+6, r24	; 0x06
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3f2c:	2c 81       	ldd	r18, Y+4	; 0x04
    3f2e:	3d 81       	ldd	r19, Y+5	; 0x05
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	9a 81       	ldd	r25, Y+2	; 0x02
    3f34:	28 1b       	sub	r18, r24
    3f36:	39 0b       	sbc	r19, r25
    3f38:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    3f3c:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    3f40:	4e 81       	ldd	r20, Y+6	; 0x06
    3f42:	b9 01       	movw	r22, r18
    3f44:	0e 94 29 0c 	call	0x1852	; 0x1852 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    3f48:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
    3f4c:	88 23       	and	r24, r24
    3f4e:	29 f4       	brne	.+10     	; 0x3f5a <prvProcessTimerOrBlockTask+0x96>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3f50:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <prvProcessTimerOrBlockTask+0x96>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3f56:	0e 94 26 14 	call	0x284c	; 0x284c <xTaskResumeAll>
        }
    }
}
    3f5a:	00 00       	nop
    3f5c:	26 96       	adiw	r28, 0x06	; 6
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	08 95       	ret

00003f6e <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    3f6e:	cf 93       	push	r28
    3f70:	df 93       	push	r29
    3f72:	00 d0       	rcall	.+0      	; 0x3f74 <prvGetNextExpireTime+0x6>
    3f74:	1f 92       	push	r1
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	9c 83       	std	Y+4, r25	; 0x04
    3f7c:	8b 83       	std	Y+3, r24	; 0x03
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3f7e:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    3f82:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    3f86:	fc 01       	movw	r30, r24
    3f88:	90 81       	ld	r25, Z
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	99 23       	and	r25, r25
    3f8e:	09 f0       	breq	.+2      	; 0x3f92 <prvGetNextExpireTime+0x24>
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	28 2f       	mov	r18, r24
    3f94:	8b 81       	ldd	r24, Y+3	; 0x03
    3f96:	9c 81       	ldd	r25, Y+4	; 0x04
    3f98:	fc 01       	movw	r30, r24
    3f9a:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	80 81       	ld	r24, Z
    3fa4:	88 23       	and	r24, r24
    3fa6:	69 f4       	brne	.+26     	; 0x3fc2 <prvGetNextExpireTime+0x54>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3fa8:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    3fac:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	85 81       	ldd	r24, Z+5	; 0x05
    3fb4:	96 81       	ldd	r25, Z+6	; 0x06
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	80 81       	ld	r24, Z
    3fba:	91 81       	ldd	r25, Z+1	; 0x01
    3fbc:	9a 83       	std	Y+2, r25	; 0x02
    3fbe:	89 83       	std	Y+1, r24	; 0x01
    3fc0:	02 c0       	rjmp	.+4      	; 0x3fc6 <prvGetNextExpireTime+0x58>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3fc2:	1a 82       	std	Y+2, r1	; 0x02
    3fc4:	19 82       	std	Y+1, r1	; 0x01
    }

    return xNextExpireTime;
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	df 91       	pop	r29
    3fd4:	cf 91       	pop	r28
    3fd6:	08 95       	ret

00003fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	00 d0       	rcall	.+0      	; 0x3fde <prvSampleTimeNow+0x6>
    3fde:	1f 92       	push	r1
    3fe0:	cd b7       	in	r28, 0x3d	; 61
    3fe2:	de b7       	in	r29, 0x3e	; 62
    3fe4:	9c 83       	std	Y+4, r25	; 0x04
    3fe6:	8b 83       	std	Y+3, r24	; 0x03
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3fe8:	0e 94 bb 14 	call	0x2976	; 0x2976 <xTaskGetTickCount>
    3fec:	9a 83       	std	Y+2, r25	; 0x02
    3fee:	89 83       	std	Y+1, r24	; 0x01

    if( xTimeNow < xLastTime )
    3ff0:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <xLastTime.2432>
    3ff4:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <xLastTime.2432+0x1>
    3ff8:	29 81       	ldd	r18, Y+1	; 0x01
    3ffa:	3a 81       	ldd	r19, Y+2	; 0x02
    3ffc:	28 17       	cp	r18, r24
    3ffe:	39 07       	cpc	r19, r25
    4000:	38 f4       	brcc	.+14     	; 0x4010 <prvSampleTimeNow+0x38>
    {
        prvSwitchTimerLists();
    4002:	7c d1       	rcall	.+760    	; 0x42fc <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    4004:	8b 81       	ldd	r24, Y+3	; 0x03
    4006:	9c 81       	ldd	r25, Y+4	; 0x04
    4008:	21 e0       	ldi	r18, 0x01	; 1
    400a:	fc 01       	movw	r30, r24
    400c:	20 83       	st	Z, r18
    400e:	04 c0       	rjmp	.+8      	; 0x4018 <prvSampleTimeNow+0x40>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    4010:	8b 81       	ldd	r24, Y+3	; 0x03
    4012:	9c 81       	ldd	r25, Y+4	; 0x04
    4014:	fc 01       	movw	r30, r24
    4016:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	9a 81       	ldd	r25, Y+2	; 0x02
    401c:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <xLastTime.2432+0x1>
    4020:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <xLastTime.2432>

    return xTimeNow;
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	08 95       	ret

00004036 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	cd b7       	in	r28, 0x3d	; 61
    403c:	de b7       	in	r29, 0x3e	; 62
    403e:	29 97       	sbiw	r28, 0x09	; 9
    4040:	0f b6       	in	r0, 0x3f	; 63
    4042:	f8 94       	cli
    4044:	de bf       	out	0x3e, r29	; 62
    4046:	0f be       	out	0x3f, r0	; 63
    4048:	cd bf       	out	0x3d, r28	; 61
    404a:	9b 83       	std	Y+3, r25	; 0x03
    404c:	8a 83       	std	Y+2, r24	; 0x02
    404e:	7d 83       	std	Y+5, r23	; 0x05
    4050:	6c 83       	std	Y+4, r22	; 0x04
    4052:	5f 83       	std	Y+7, r21	; 0x07
    4054:	4e 83       	std	Y+6, r20	; 0x06
    4056:	39 87       	std	Y+9, r19	; 0x09
    4058:	28 87       	std	Y+8, r18	; 0x08
BaseType_t xProcessTimerNow = pdFALSE;
    405a:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	9b 81       	ldd	r25, Y+3	; 0x03
    4060:	2c 81       	ldd	r18, Y+4	; 0x04
    4062:	3d 81       	ldd	r19, Y+5	; 0x05
    4064:	fc 01       	movw	r30, r24
    4066:	33 83       	std	Z+3, r19	; 0x03
    4068:	22 83       	std	Z+2, r18	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    406a:	8a 81       	ldd	r24, Y+2	; 0x02
    406c:	9b 81       	ldd	r25, Y+3	; 0x03
    406e:	2a 81       	ldd	r18, Y+2	; 0x02
    4070:	3b 81       	ldd	r19, Y+3	; 0x03
    4072:	fc 01       	movw	r30, r24
    4074:	31 87       	std	Z+9, r19	; 0x09
    4076:	20 87       	std	Z+8, r18	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    4078:	2c 81       	ldd	r18, Y+4	; 0x04
    407a:	3d 81       	ldd	r19, Y+5	; 0x05
    407c:	8e 81       	ldd	r24, Y+6	; 0x06
    407e:	9f 81       	ldd	r25, Y+7	; 0x07
    4080:	82 17       	cp	r24, r18
    4082:	93 07       	cpc	r25, r19
    4084:	f0 f0       	brcs	.+60     	; 0x40c2 <prvInsertTimerInActiveList+0x8c>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4086:	2e 81       	ldd	r18, Y+6	; 0x06
    4088:	3f 81       	ldd	r19, Y+7	; 0x07
    408a:	88 85       	ldd	r24, Y+8	; 0x08
    408c:	99 85       	ldd	r25, Y+9	; 0x09
    408e:	28 1b       	sub	r18, r24
    4090:	39 0b       	sbc	r19, r25
    4092:	8a 81       	ldd	r24, Y+2	; 0x02
    4094:	9b 81       	ldd	r25, Y+3	; 0x03
    4096:	fc 01       	movw	r30, r24
    4098:	84 85       	ldd	r24, Z+12	; 0x0c
    409a:	95 85       	ldd	r25, Z+13	; 0x0d
    409c:	28 17       	cp	r18, r24
    409e:	39 07       	cpc	r19, r25
    40a0:	18 f0       	brcs	.+6      	; 0x40a8 <prvInsertTimerInActiveList+0x72>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	89 83       	std	Y+1, r24	; 0x01
    40a6:	2a c0       	rjmp	.+84     	; 0x40fc <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
    40aa:	9b 81       	ldd	r25, Y+3	; 0x03
    40ac:	9c 01       	movw	r18, r24
    40ae:	2e 5f       	subi	r18, 0xFE	; 254
    40b0:	3f 4f       	sbci	r19, 0xFF	; 255
    40b2:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <pxOverflowTimerList>
    40b6:	90 91 d7 08 	lds	r25, 0x08D7	; 0x8008d7 <pxOverflowTimerList+0x1>
    40ba:	b9 01       	movw	r22, r18
    40bc:	0e 94 9f 02 	call	0x53e	; 0x53e <vListInsert>
    40c0:	1d c0       	rjmp	.+58     	; 0x40fc <prvInsertTimerInActiveList+0xc6>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    40c2:	2e 81       	ldd	r18, Y+6	; 0x06
    40c4:	3f 81       	ldd	r19, Y+7	; 0x07
    40c6:	88 85       	ldd	r24, Y+8	; 0x08
    40c8:	99 85       	ldd	r25, Y+9	; 0x09
    40ca:	28 17       	cp	r18, r24
    40cc:	39 07       	cpc	r19, r25
    40ce:	50 f4       	brcc	.+20     	; 0x40e4 <prvInsertTimerInActiveList+0xae>
    40d0:	2c 81       	ldd	r18, Y+4	; 0x04
    40d2:	3d 81       	ldd	r19, Y+5	; 0x05
    40d4:	88 85       	ldd	r24, Y+8	; 0x08
    40d6:	99 85       	ldd	r25, Y+9	; 0x09
    40d8:	28 17       	cp	r18, r24
    40da:	39 07       	cpc	r19, r25
    40dc:	18 f0       	brcs	.+6      	; 0x40e4 <prvInsertTimerInActiveList+0xae>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	89 83       	std	Y+1, r24	; 0x01
    40e2:	0c c0       	rjmp	.+24     	; 0x40fc <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    40e4:	8a 81       	ldd	r24, Y+2	; 0x02
    40e6:	9b 81       	ldd	r25, Y+3	; 0x03
    40e8:	9c 01       	movw	r18, r24
    40ea:	2e 5f       	subi	r18, 0xFE	; 254
    40ec:	3f 4f       	sbci	r19, 0xFF	; 255
    40ee:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    40f2:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    40f6:	b9 01       	movw	r22, r18
    40f8:	0e 94 9f 02 	call	0x53e	; 0x53e <vListInsert>
        }
    }

    return xProcessTimerNow;
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    40fe:	29 96       	adiw	r28, 0x09	; 9
    4100:	0f b6       	in	r0, 0x3f	; 63
    4102:	f8 94       	cli
    4104:	de bf       	out	0x3e, r29	; 62
    4106:	0f be       	out	0x3f, r0	; 63
    4108:	cd bf       	out	0x3d, r28	; 61
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	08 95       	ret

00004110 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    4110:	0f 93       	push	r16
    4112:	1f 93       	push	r17
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
    411c:	2b 97       	sbiw	r28, 0x0b	; 11
    411e:	0f b6       	in	r0, 0x3f	; 63
    4120:	f8 94       	cli
    4122:	de bf       	out	0x3e, r29	; 62
    4124:	0f be       	out	0x3f, r0	; 63
    4126:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4128:	ce c0       	rjmp	.+412    	; 0x42c6 <prvProcessReceivedCommands+0x1b6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    412a:	8e 81       	ldd	r24, Y+6	; 0x06
    412c:	88 23       	and	r24, r24
    412e:	0c f4       	brge	.+2      	; 0x4132 <prvProcessReceivedCommands+0x22>
    4130:	ca c0       	rjmp	.+404    	; 0x42c6 <prvProcessReceivedCommands+0x1b6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4132:	89 85       	ldd	r24, Y+9	; 0x09
    4134:	9a 85       	ldd	r25, Y+10	; 0x0a
    4136:	9a 83       	std	Y+2, r25	; 0x02
    4138:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    413a:	89 81       	ldd	r24, Y+1	; 0x01
    413c:	9a 81       	ldd	r25, Y+2	; 0x02
    413e:	dc 01       	movw	r26, r24
    4140:	1a 96       	adiw	r26, 0x0a	; 10
    4142:	8d 91       	ld	r24, X+
    4144:	9c 91       	ld	r25, X
    4146:	1b 97       	sbiw	r26, 0x0b	; 11
    4148:	89 2b       	or	r24, r25
    414a:	29 f0       	breq	.+10     	; 0x4156 <prvProcessReceivedCommands+0x46>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
    4150:	02 96       	adiw	r24, 0x02	; 2
    4152:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4156:	ce 01       	movw	r24, r28
    4158:	0b 96       	adiw	r24, 0x0b	; 11
    415a:	3e df       	rcall	.-388    	; 0x3fd8 <prvSampleTimeNow>
    415c:	9c 83       	std	Y+4, r25	; 0x04
    415e:	8b 83       	std	Y+3, r24	; 0x03

            switch( xMessage.xMessageID )
    4160:	8e 81       	ldd	r24, Y+6	; 0x06
    4162:	08 2e       	mov	r0, r24
    4164:	00 0c       	add	r0, r0
    4166:	99 0b       	sbc	r25, r25
    4168:	09 2e       	mov	r0, r25
    416a:	00 0c       	add	r0, r0
    416c:	aa 0b       	sbc	r26, r26
    416e:	bb 0b       	sbc	r27, r27
    4170:	40 e0       	ldi	r20, 0x00	; 0
    4172:	50 e0       	ldi	r21, 0x00	; 0
    4174:	29 e0       	ldi	r18, 0x09	; 9
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	84 1b       	sub	r24, r20
    417a:	95 0b       	sbc	r25, r21
    417c:	28 17       	cp	r18, r24
    417e:	39 07       	cpc	r19, r25
    4180:	08 f4       	brcc	.+2      	; 0x4184 <prvProcessReceivedCommands+0x74>
    4182:	a0 c0       	rjmp	.+320    	; 0x42c4 <prvProcessReceivedCommands+0x1b4>
    4184:	fc 01       	movw	r30, r24
    4186:	88 27       	eor	r24, r24
    4188:	ee 58       	subi	r30, 0x8E	; 142
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	8f 4f       	sbci	r24, 0xFF	; 255
    418e:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	fc 01       	movw	r30, r24
    4198:	83 89       	ldd	r24, Z+19	; 0x13
    419a:	28 2f       	mov	r18, r24
    419c:	21 60       	ori	r18, 0x01	; 1
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	9a 81       	ldd	r25, Y+2	; 0x02
    41a2:	dc 01       	movw	r26, r24
    41a4:	53 96       	adiw	r26, 0x13	; 19
    41a6:	2c 93       	st	X, r18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    41a8:	ef 81       	ldd	r30, Y+7	; 0x07
    41aa:	f8 85       	ldd	r31, Y+8	; 0x08
    41ac:	2f 81       	ldd	r18, Y+7	; 0x07
    41ae:	38 85       	ldd	r19, Y+8	; 0x08
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	9a 81       	ldd	r25, Y+2	; 0x02
    41b4:	dc 01       	movw	r26, r24
    41b6:	1c 96       	adiw	r26, 0x0c	; 12
    41b8:	8d 91       	ld	r24, X+
    41ba:	9c 91       	ld	r25, X
    41bc:	1d 97       	sbiw	r26, 0x0d	; 13
    41be:	b9 01       	movw	r22, r18
    41c0:	68 0f       	add	r22, r24
    41c2:	79 1f       	adc	r23, r25
    41c4:	4b 81       	ldd	r20, Y+3	; 0x03
    41c6:	5c 81       	ldd	r21, Y+4	; 0x04
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	9a 81       	ldd	r25, Y+2	; 0x02
    41cc:	9f 01       	movw	r18, r30
    41ce:	33 df       	rcall	.-410    	; 0x4036 <prvInsertTimerInActiveList>
    41d0:	88 23       	and	r24, r24
    41d2:	09 f4       	brne	.+2      	; 0x41d6 <prvProcessReceivedCommands+0xc6>
    41d4:	78 c0       	rjmp	.+240    	; 0x42c6 <prvProcessReceivedCommands+0x1b6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	9a 81       	ldd	r25, Y+2	; 0x02
    41da:	fc 01       	movw	r30, r24
    41dc:	20 89       	ldd	r18, Z+16	; 0x10
    41de:	31 89       	ldd	r19, Z+17	; 0x11
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	9a 81       	ldd	r25, Y+2	; 0x02
    41e4:	f9 01       	movw	r30, r18
    41e6:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	9a 81       	ldd	r25, Y+2	; 0x02
    41ec:	dc 01       	movw	r26, r24
    41ee:	53 96       	adiw	r26, 0x13	; 19
    41f0:	8c 91       	ld	r24, X
    41f2:	88 2f       	mov	r24, r24
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	84 70       	andi	r24, 0x04	; 4
    41f8:	99 27       	eor	r25, r25
    41fa:	89 2b       	or	r24, r25
    41fc:	09 f4       	brne	.+2      	; 0x4200 <prvProcessReceivedCommands+0xf0>
    41fe:	63 c0       	rjmp	.+198    	; 0x42c6 <prvProcessReceivedCommands+0x1b6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4200:	2f 81       	ldd	r18, Y+7	; 0x07
    4202:	38 85       	ldd	r19, Y+8	; 0x08
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	9a 81       	ldd	r25, Y+2	; 0x02
    4208:	fc 01       	movw	r30, r24
    420a:	84 85       	ldd	r24, Z+12	; 0x0c
    420c:	95 85       	ldd	r25, Z+13	; 0x0d
    420e:	a9 01       	movw	r20, r18
    4210:	48 0f       	add	r20, r24
    4212:	59 1f       	adc	r21, r25
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	00 e0       	ldi	r16, 0x00	; 0
    421a:	10 e0       	ldi	r17, 0x00	; 0
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	60 e0       	ldi	r22, 0x00	; 0
    4222:	86 dd       	rcall	.-1268   	; 0x3d30 <xTimerGenericCommand>
    4224:	8d 83       	std	Y+5, r24	; 0x05
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    4226:	4f c0       	rjmp	.+158    	; 0x42c6 <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	9a 81       	ldd	r25, Y+2	; 0x02
    422c:	dc 01       	movw	r26, r24
    422e:	53 96       	adiw	r26, 0x13	; 19
    4230:	8c 91       	ld	r24, X
    4232:	28 2f       	mov	r18, r24
    4234:	2e 7f       	andi	r18, 0xFE	; 254
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	9a 81       	ldd	r25, Y+2	; 0x02
    423a:	fc 01       	movw	r30, r24
    423c:	23 8b       	std	Z+19, r18	; 0x13
                    break;
    423e:	43 c0       	rjmp	.+134    	; 0x42c6 <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4240:	89 81       	ldd	r24, Y+1	; 0x01
    4242:	9a 81       	ldd	r25, Y+2	; 0x02
    4244:	dc 01       	movw	r26, r24
    4246:	53 96       	adiw	r26, 0x13	; 19
    4248:	8c 91       	ld	r24, X
    424a:	28 2f       	mov	r18, r24
    424c:	21 60       	ori	r18, 0x01	; 1
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	9a 81       	ldd	r25, Y+2	; 0x02
    4252:	fc 01       	movw	r30, r24
    4254:	23 8b       	std	Z+19, r18	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4256:	2f 81       	ldd	r18, Y+7	; 0x07
    4258:	38 85       	ldd	r19, Y+8	; 0x08
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
    425e:	dc 01       	movw	r26, r24
    4260:	1d 96       	adiw	r26, 0x0d	; 13
    4262:	3c 93       	st	X, r19
    4264:	2e 93       	st	-X, r18
    4266:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	fc 01       	movw	r30, r24
    426e:	24 85       	ldd	r18, Z+12	; 0x0c
    4270:	35 85       	ldd	r19, Z+13	; 0x0d
    4272:	8b 81       	ldd	r24, Y+3	; 0x03
    4274:	9c 81       	ldd	r25, Y+4	; 0x04
    4276:	b9 01       	movw	r22, r18
    4278:	68 0f       	add	r22, r24
    427a:	79 1f       	adc	r23, r25
    427c:	2b 81       	ldd	r18, Y+3	; 0x03
    427e:	3c 81       	ldd	r19, Y+4	; 0x04
    4280:	4b 81       	ldd	r20, Y+3	; 0x03
    4282:	5c 81       	ldd	r21, Y+4	; 0x04
    4284:	89 81       	ldd	r24, Y+1	; 0x01
    4286:	9a 81       	ldd	r25, Y+2	; 0x02
    4288:	d6 de       	rcall	.-596    	; 0x4036 <prvInsertTimerInActiveList>
                    break;
    428a:	1d c0       	rjmp	.+58     	; 0x42c6 <prvProcessReceivedCommands+0x1b6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    428c:	89 81       	ldd	r24, Y+1	; 0x01
    428e:	9a 81       	ldd	r25, Y+2	; 0x02
    4290:	dc 01       	movw	r26, r24
    4292:	53 96       	adiw	r26, 0x13	; 19
    4294:	8c 91       	ld	r24, X
    4296:	88 2f       	mov	r24, r24
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	82 70       	andi	r24, 0x02	; 2
    429c:	99 27       	eor	r25, r25
    429e:	89 2b       	or	r24, r25
    42a0:	29 f4       	brne	.+10     	; 0x42ac <prvProcessReceivedCommands+0x19c>
                        {
                            vPortFree( pxTimer );
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
    42a6:	0e 94 ed 01 	call	0x3da	; 0x3da <vPortFree>
    42aa:	0d c0       	rjmp	.+26     	; 0x42c6 <prvProcessReceivedCommands+0x1b6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	9a 81       	ldd	r25, Y+2	; 0x02
    42b0:	fc 01       	movw	r30, r24
    42b2:	83 89       	ldd	r24, Z+19	; 0x13
    42b4:	28 2f       	mov	r18, r24
    42b6:	2e 7f       	andi	r18, 0xFE	; 254
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	9a 81       	ldd	r25, Y+2	; 0x02
    42bc:	dc 01       	movw	r26, r24
    42be:	53 96       	adiw	r26, 0x13	; 19
    42c0:	2c 93       	st	X, r18
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    42c2:	01 c0       	rjmp	.+2      	; 0x42c6 <prvProcessReceivedCommands+0x1b6>

                default    :
                    /* Don't expect to get here. */
                    break;
    42c4:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    42c6:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    42ca:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    42ce:	9e 01       	movw	r18, r28
    42d0:	2a 5f       	subi	r18, 0xFA	; 250
    42d2:	3f 4f       	sbci	r19, 0xFF	; 255
    42d4:	40 e0       	ldi	r20, 0x00	; 0
    42d6:	50 e0       	ldi	r21, 0x00	; 0
    42d8:	b9 01       	movw	r22, r18
    42da:	0e 94 c7 08 	call	0x118e	; 0x118e <xQueueReceive>
    42de:	88 23       	and	r24, r24
    42e0:	09 f0       	breq	.+2      	; 0x42e4 <prvProcessReceivedCommands+0x1d4>
    42e2:	23 cf       	rjmp	.-442    	; 0x412a <prvProcessReceivedCommands+0x1a>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    42e4:	00 00       	nop
    42e6:	2b 96       	adiw	r28, 0x0b	; 11
    42e8:	0f b6       	in	r0, 0x3f	; 63
    42ea:	f8 94       	cli
    42ec:	de bf       	out	0x3e, r29	; 62
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	cd bf       	out	0x3d, r28	; 61
    42f2:	df 91       	pop	r29
    42f4:	cf 91       	pop	r28
    42f6:	1f 91       	pop	r17
    42f8:	0f 91       	pop	r16
    42fa:	08 95       	ret

000042fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    42fc:	0f 93       	push	r16
    42fe:	1f 93       	push	r17
    4300:	cf 93       	push	r28
    4302:	df 93       	push	r29
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
    4308:	29 97       	sbiw	r28, 0x09	; 9
    430a:	0f b6       	in	r0, 0x3f	; 63
    430c:	f8 94       	cli
    430e:	de bf       	out	0x3e, r29	; 62
    4310:	0f be       	out	0x3f, r0	; 63
    4312:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4314:	68 c0       	rjmp	.+208    	; 0x43e6 <prvSwitchTimerLists+0xea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4316:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    431a:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    431e:	fc 01       	movw	r30, r24
    4320:	85 81       	ldd	r24, Z+5	; 0x05
    4322:	96 81       	ldd	r25, Z+6	; 0x06
    4324:	fc 01       	movw	r30, r24
    4326:	80 81       	ld	r24, Z
    4328:	91 81       	ldd	r25, Z+1	; 0x01
    432a:	9a 83       	std	Y+2, r25	; 0x02
    432c:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    432e:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    4332:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    4336:	fc 01       	movw	r30, r24
    4338:	85 81       	ldd	r24, Z+5	; 0x05
    433a:	96 81       	ldd	r25, Z+6	; 0x06
    433c:	fc 01       	movw	r30, r24
    433e:	86 81       	ldd	r24, Z+6	; 0x06
    4340:	97 81       	ldd	r25, Z+7	; 0x07
    4342:	9c 83       	std	Y+4, r25	; 0x04
    4344:	8b 83       	std	Y+3, r24	; 0x03
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4346:	8b 81       	ldd	r24, Y+3	; 0x03
    4348:	9c 81       	ldd	r25, Y+4	; 0x04
    434a:	02 96       	adiw	r24, 0x02	; 2
    434c:	0e 94 17 03 	call	0x62e	; 0x62e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4350:	8b 81       	ldd	r24, Y+3	; 0x03
    4352:	9c 81       	ldd	r25, Y+4	; 0x04
    4354:	fc 01       	movw	r30, r24
    4356:	20 89       	ldd	r18, Z+16	; 0x10
    4358:	31 89       	ldd	r19, Z+17	; 0x11
    435a:	8b 81       	ldd	r24, Y+3	; 0x03
    435c:	9c 81       	ldd	r25, Y+4	; 0x04
    435e:	f9 01       	movw	r30, r18
    4360:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4362:	8b 81       	ldd	r24, Y+3	; 0x03
    4364:	9c 81       	ldd	r25, Y+4	; 0x04
    4366:	fc 01       	movw	r30, r24
    4368:	83 89       	ldd	r24, Z+19	; 0x13
    436a:	88 2f       	mov	r24, r24
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	84 70       	andi	r24, 0x04	; 4
    4370:	99 27       	eor	r25, r25
    4372:	89 2b       	or	r24, r25
    4374:	c1 f1       	breq	.+112    	; 0x43e6 <prvSwitchTimerLists+0xea>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4376:	8b 81       	ldd	r24, Y+3	; 0x03
    4378:	9c 81       	ldd	r25, Y+4	; 0x04
    437a:	fc 01       	movw	r30, r24
    437c:	24 85       	ldd	r18, Z+12	; 0x0c
    437e:	35 85       	ldd	r19, Z+13	; 0x0d
    4380:	89 81       	ldd	r24, Y+1	; 0x01
    4382:	9a 81       	ldd	r25, Y+2	; 0x02
    4384:	82 0f       	add	r24, r18
    4386:	93 1f       	adc	r25, r19
    4388:	9e 83       	std	Y+6, r25	; 0x06
    438a:	8d 83       	std	Y+5, r24	; 0x05
            if( xReloadTime > xNextExpireTime )
    438c:	2d 81       	ldd	r18, Y+5	; 0x05
    438e:	3e 81       	ldd	r19, Y+6	; 0x06
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	9a 81       	ldd	r25, Y+2	; 0x02
    4394:	82 17       	cp	r24, r18
    4396:	93 07       	cpc	r25, r19
    4398:	d8 f4       	brcc	.+54     	; 0x43d0 <prvSwitchTimerLists+0xd4>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    439a:	8b 81       	ldd	r24, Y+3	; 0x03
    439c:	9c 81       	ldd	r25, Y+4	; 0x04
    439e:	2d 81       	ldd	r18, Y+5	; 0x05
    43a0:	3e 81       	ldd	r19, Y+6	; 0x06
    43a2:	fc 01       	movw	r30, r24
    43a4:	33 83       	std	Z+3, r19	; 0x03
    43a6:	22 83       	std	Z+2, r18	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    43a8:	8b 81       	ldd	r24, Y+3	; 0x03
    43aa:	9c 81       	ldd	r25, Y+4	; 0x04
    43ac:	2b 81       	ldd	r18, Y+3	; 0x03
    43ae:	3c 81       	ldd	r19, Y+4	; 0x04
    43b0:	fc 01       	movw	r30, r24
    43b2:	31 87       	std	Z+9, r19	; 0x09
    43b4:	20 87       	std	Z+8, r18	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ba:	9c 01       	movw	r18, r24
    43bc:	2e 5f       	subi	r18, 0xFE	; 254
    43be:	3f 4f       	sbci	r19, 0xFF	; 255
    43c0:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    43c4:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    43c8:	b9 01       	movw	r22, r18
    43ca:	0e 94 9f 02 	call	0x53e	; 0x53e <vListInsert>
    43ce:	0b c0       	rjmp	.+22     	; 0x43e6 <prvSwitchTimerLists+0xea>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    43d0:	49 81       	ldd	r20, Y+1	; 0x01
    43d2:	5a 81       	ldd	r21, Y+2	; 0x02
    43d4:	8b 81       	ldd	r24, Y+3	; 0x03
    43d6:	9c 81       	ldd	r25, Y+4	; 0x04
    43d8:	00 e0       	ldi	r16, 0x00	; 0
    43da:	10 e0       	ldi	r17, 0x00	; 0
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	a6 dc       	rcall	.-1716   	; 0x3d30 <xTimerGenericCommand>
    43e4:	8f 83       	std	Y+7, r24	; 0x07

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    43e6:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    43ea:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    43ee:	fc 01       	movw	r30, r24
    43f0:	80 81       	ld	r24, Z
    43f2:	88 23       	and	r24, r24
    43f4:	09 f0       	breq	.+2      	; 0x43f8 <prvSwitchTimerLists+0xfc>
    43f6:	8f cf       	rjmp	.-226    	; 0x4316 <prvSwitchTimerLists+0x1a>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    43f8:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <pxCurrentTimerList>
    43fc:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <pxCurrentTimerList+0x1>
    4400:	99 87       	std	Y+9, r25	; 0x09
    4402:	88 87       	std	Y+8, r24	; 0x08
    pxCurrentTimerList = pxOverflowTimerList;
    4404:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <pxOverflowTimerList>
    4408:	90 91 d7 08 	lds	r25, 0x08D7	; 0x8008d7 <pxOverflowTimerList+0x1>
    440c:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <pxCurrentTimerList+0x1>
    4410:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    4414:	88 85       	ldd	r24, Y+8	; 0x08
    4416:	99 85       	ldd	r25, Y+9	; 0x09
    4418:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <pxOverflowTimerList+0x1>
    441c:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <pxOverflowTimerList>
}
    4420:	00 00       	nop
    4422:	29 96       	adiw	r28, 0x09	; 9
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	de bf       	out	0x3e, r29	; 62
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	df 91       	pop	r29
    4430:	cf 91       	pop	r28
    4432:	1f 91       	pop	r17
    4434:	0f 91       	pop	r16
    4436:	08 95       	ret

00004438 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    4438:	cf 93       	push	r28
    443a:	df 93       	push	r29
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	f8 94       	cli
    4444:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    4446:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xTimerQueue>
    444a:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xTimerQueue+0x1>
    444e:	89 2b       	or	r24, r25
    4450:	e9 f4       	brne	.+58     	; 0x448c <prvCheckForValidListAndQueue+0x54>
        {
            vListInitialise( &xActiveTimerList1 );
    4452:	82 ec       	ldi	r24, 0xC2	; 194
    4454:	98 e0       	ldi	r25, 0x08	; 8
    4456:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    445a:	8b ec       	ldi	r24, 0xCB	; 203
    445c:	98 e0       	ldi	r25, 0x08	; 8
    445e:	0e 94 07 02 	call	0x40e	; 0x40e <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    4462:	82 ec       	ldi	r24, 0xC2	; 194
    4464:	98 e0       	ldi	r25, 0x08	; 8
    4466:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <pxCurrentTimerList+0x1>
    446a:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    446e:	8b ec       	ldi	r24, 0xCB	; 203
    4470:	98 e0       	ldi	r25, 0x08	; 8
    4472:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <pxOverflowTimerList+0x1>
    4476:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	65 e0       	ldi	r22, 0x05	; 5
    447e:	8a e0       	ldi	r24, 0x0A	; 10
    4480:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xQueueGenericCreate>
    4484:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <xTimerQueue+0x1>
    4488:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    448c:	0f 90       	pop	r0
    448e:	0f be       	out	0x3f, r0	; 63
}
    4490:	00 00       	nop
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	08 95       	ret

00004498 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    4498:	cf 93       	push	r28
    449a:	df 93       	push	r29
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
//     if (serialEventRun) serialEventRun();
}
    44a0:	00 00       	nop
    44a2:	df 91       	pop	r29
    44a4:	cf 91       	pop	r28
    44a6:	08 95       	ret

000044a8 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    44b0:	2e 97       	sbiw	r28, 0x0e	; 14
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	f8 94       	cli
    44b6:	de bf       	out	0x3e, r29	; 62
    44b8:	0f be       	out	0x3f, r0	; 63
    44ba:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    44bc:	84 e2       	ldi	r24, 0x24	; 36
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	24 e2       	ldi	r18, 0x24	; 36
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	f9 01       	movw	r30, r18
    44c6:	20 81       	ld	r18, Z
    44c8:	20 68       	ori	r18, 0x80	; 128
    44ca:	fc 01       	movw	r30, r24
    44cc:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    44ce:	85 e2       	ldi	r24, 0x25	; 37
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	25 e2       	ldi	r18, 0x25	; 37
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	f9 01       	movw	r30, r18
    44d8:	20 81       	ld	r18, Z
    44da:	20 68       	ori	r18, 0x80	; 128
    44dc:	fc 01       	movw	r30, r24
    44de:	20 83       	st	Z, r18
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	a8 e4       	ldi	r26, 0x48	; 72
    44e6:	b2 e4       	ldi	r27, 0x42	; 66
    44e8:	89 83       	std	Y+1, r24	; 0x01
    44ea:	9a 83       	std	Y+2, r25	; 0x02
    44ec:	ab 83       	std	Y+3, r26	; 0x03
    44ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	4a e7       	ldi	r20, 0x7A	; 122
    44f6:	55 e4       	ldi	r21, 0x45	; 69
    44f8:	69 81       	ldd	r22, Y+1	; 0x01
    44fa:	7a 81       	ldd	r23, Y+2	; 0x02
    44fc:	8b 81       	ldd	r24, Y+3	; 0x03
    44fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4500:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__mulsf3>
    4504:	dc 01       	movw	r26, r24
    4506:	cb 01       	movw	r24, r22
    4508:	8d 83       	std	Y+5, r24	; 0x05
    450a:	9e 83       	std	Y+6, r25	; 0x06
    450c:	af 83       	std	Y+7, r26	; 0x07
    450e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	40 e8       	ldi	r20, 0x80	; 128
    4516:	5f e3       	ldi	r21, 0x3F	; 63
    4518:	6d 81       	ldd	r22, Y+5	; 0x05
    451a:	7e 81       	ldd	r23, Y+6	; 0x06
    451c:	8f 81       	ldd	r24, Y+7	; 0x07
    451e:	98 85       	ldd	r25, Y+8	; 0x08
    4520:	0e 94 38 35 	call	0x6a70	; 0x6a70 <__cmpsf2>
    4524:	88 23       	and	r24, r24
    4526:	2c f4       	brge	.+10     	; 0x4532 <vApplicationMallocFailedHook+0x8a>
		__ticks = 1;
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	9a 87       	std	Y+10, r25	; 0x0a
    452e:	89 87       	std	Y+9, r24	; 0x09
    4530:	3f c0       	rjmp	.+126    	; 0x45b0 <vApplicationMallocFailedHook+0x108>
	else if (__tmp > 65535)
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	3f ef       	ldi	r19, 0xFF	; 255
    4536:	4f e7       	ldi	r20, 0x7F	; 127
    4538:	57 e4       	ldi	r21, 0x47	; 71
    453a:	6d 81       	ldd	r22, Y+5	; 0x05
    453c:	7e 81       	ldd	r23, Y+6	; 0x06
    453e:	8f 81       	ldd	r24, Y+7	; 0x07
    4540:	98 85       	ldd	r25, Y+8	; 0x08
    4542:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <__gesf2>
    4546:	18 16       	cp	r1, r24
    4548:	4c f5       	brge	.+82     	; 0x459c <vApplicationMallocFailedHook+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e2       	ldi	r20, 0x20	; 32
    4550:	51 e4       	ldi	r21, 0x41	; 65
    4552:	69 81       	ldd	r22, Y+1	; 0x01
    4554:	7a 81       	ldd	r23, Y+2	; 0x02
    4556:	8b 81       	ldd	r24, Y+3	; 0x03
    4558:	9c 81       	ldd	r25, Y+4	; 0x04
    455a:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__mulsf3>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	bc 01       	movw	r22, r24
    4564:	cd 01       	movw	r24, r26
    4566:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <__fixunssfsi>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	9a 87       	std	Y+10, r25	; 0x0a
    4570:	89 87       	std	Y+9, r24	; 0x09
    4572:	0f c0       	rjmp	.+30     	; 0x4592 <vApplicationMallocFailedHook+0xea>
    4574:	80 e9       	ldi	r24, 0x90	; 144
    4576:	91 e0       	ldi	r25, 0x01	; 1
    4578:	9c 87       	std	Y+12, r25	; 0x0c
    457a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    457c:	8b 85       	ldd	r24, Y+11	; 0x0b
    457e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4580:	01 97       	sbiw	r24, 0x01	; 1
    4582:	f1 f7       	brne	.-4      	; 0x4580 <vApplicationMallocFailedHook+0xd8>
    4584:	9c 87       	std	Y+12, r25	; 0x0c
    4586:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4588:	89 85       	ldd	r24, Y+9	; 0x09
    458a:	9a 85       	ldd	r25, Y+10	; 0x0a
    458c:	01 97       	sbiw	r24, 0x01	; 1
    458e:	9a 87       	std	Y+10, r25	; 0x0a
    4590:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4592:	89 85       	ldd	r24, Y+9	; 0x09
    4594:	9a 85       	ldd	r25, Y+10	; 0x0a
    4596:	89 2b       	or	r24, r25
    4598:	69 f7       	brne	.-38     	; 0x4574 <vApplicationMallocFailedHook+0xcc>
    459a:	14 c0       	rjmp	.+40     	; 0x45c4 <vApplicationMallocFailedHook+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    459c:	6d 81       	ldd	r22, Y+5	; 0x05
    459e:	7e 81       	ldd	r23, Y+6	; 0x06
    45a0:	8f 81       	ldd	r24, Y+7	; 0x07
    45a2:	98 85       	ldd	r25, Y+8	; 0x08
    45a4:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <__fixunssfsi>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	9a 87       	std	Y+10, r25	; 0x0a
    45ae:	89 87       	std	Y+9, r24	; 0x09
    45b0:	89 85       	ldd	r24, Y+9	; 0x09
    45b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b4:	9e 87       	std	Y+14, r25	; 0x0e
    45b6:	8d 87       	std	Y+13, r24	; 0x0d
    45b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    45bc:	01 97       	sbiw	r24, 0x01	; 1
    45be:	f1 f7       	brne	.-4      	; 0x45bc <vApplicationMallocFailedHook+0x114>
    45c0:	9e 87       	std	Y+14, r25	; 0x0e
    45c2:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    45c4:	83 e2       	ldi	r24, 0x23	; 35
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	23 e2       	ldi	r18, 0x23	; 35
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	f9 01       	movw	r30, r18
    45ce:	20 81       	ld	r18, Z
    45d0:	20 68       	ori	r18, 0x80	; 128
    45d2:	fc 01       	movw	r30, r24
    45d4:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED fast blink.

#endif

    }
    45d6:	84 cf       	rjmp	.-248    	; 0x44e0 <vApplicationMallocFailedHook+0x38>

000045d8 <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    45d8:	cf 93       	push	r28
    45da:	df 93       	push	r29
    45dc:	cd b7       	in	r28, 0x3d	; 61
    45de:	de b7       	in	r29, 0x3e	; 62
    45e0:	62 97       	sbiw	r28, 0x12	; 18
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	f8 94       	cli
    45e6:	de bf       	out	0x3e, r29	; 62
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	cd bf       	out	0x3d, r28	; 61
    45ec:	98 8b       	std	Y+16, r25	; 0x10
    45ee:	8f 87       	std	Y+15, r24	; 0x0f
    45f0:	7a 8b       	std	Y+18, r23	; 0x12
    45f2:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    45f4:	84 e2       	ldi	r24, 0x24	; 36
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	24 e2       	ldi	r18, 0x24	; 36
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	f9 01       	movw	r30, r18
    45fe:	20 81       	ld	r18, Z
    4600:	20 68       	ori	r18, 0x80	; 128
    4602:	fc 01       	movw	r30, r24
    4604:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4606:	85 e2       	ldi	r24, 0x25	; 37
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	25 e2       	ldi	r18, 0x25	; 37
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	f9 01       	movw	r30, r18
    4610:	20 81       	ld	r18, Z
    4612:	20 68       	ori	r18, 0x80	; 128
    4614:	fc 01       	movw	r30, r24
    4616:	20 83       	st	Z, r18
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	aa ef       	ldi	r26, 0xFA	; 250
    461e:	b4 e4       	ldi	r27, 0x44	; 68
    4620:	89 83       	std	Y+1, r24	; 0x01
    4622:	9a 83       	std	Y+2, r25	; 0x02
    4624:	ab 83       	std	Y+3, r26	; 0x03
    4626:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	4a e7       	ldi	r20, 0x7A	; 122
    462e:	55 e4       	ldi	r21, 0x45	; 69
    4630:	69 81       	ldd	r22, Y+1	; 0x01
    4632:	7a 81       	ldd	r23, Y+2	; 0x02
    4634:	8b 81       	ldd	r24, Y+3	; 0x03
    4636:	9c 81       	ldd	r25, Y+4	; 0x04
    4638:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__mulsf3>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	8d 83       	std	Y+5, r24	; 0x05
    4642:	9e 83       	std	Y+6, r25	; 0x06
    4644:	af 83       	std	Y+7, r26	; 0x07
    4646:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e8       	ldi	r20, 0x80	; 128
    464e:	5f e3       	ldi	r21, 0x3F	; 63
    4650:	6d 81       	ldd	r22, Y+5	; 0x05
    4652:	7e 81       	ldd	r23, Y+6	; 0x06
    4654:	8f 81       	ldd	r24, Y+7	; 0x07
    4656:	98 85       	ldd	r25, Y+8	; 0x08
    4658:	0e 94 38 35 	call	0x6a70	; 0x6a70 <__cmpsf2>
    465c:	88 23       	and	r24, r24
    465e:	2c f4       	brge	.+10     	; 0x466a <vApplicationStackOverflowHook+0x92>
		__ticks = 1;
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	9a 87       	std	Y+10, r25	; 0x0a
    4666:	89 87       	std	Y+9, r24	; 0x09
    4668:	3f c0       	rjmp	.+126    	; 0x46e8 <vApplicationStackOverflowHook+0x110>
	else if (__tmp > 65535)
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	3f ef       	ldi	r19, 0xFF	; 255
    466e:	4f e7       	ldi	r20, 0x7F	; 127
    4670:	57 e4       	ldi	r21, 0x47	; 71
    4672:	6d 81       	ldd	r22, Y+5	; 0x05
    4674:	7e 81       	ldd	r23, Y+6	; 0x06
    4676:	8f 81       	ldd	r24, Y+7	; 0x07
    4678:	98 85       	ldd	r25, Y+8	; 0x08
    467a:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <__gesf2>
    467e:	18 16       	cp	r1, r24
    4680:	4c f5       	brge	.+82     	; 0x46d4 <vApplicationStackOverflowHook+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	40 e2       	ldi	r20, 0x20	; 32
    4688:	51 e4       	ldi	r21, 0x41	; 65
    468a:	69 81       	ldd	r22, Y+1	; 0x01
    468c:	7a 81       	ldd	r23, Y+2	; 0x02
    468e:	8b 81       	ldd	r24, Y+3	; 0x03
    4690:	9c 81       	ldd	r25, Y+4	; 0x04
    4692:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__mulsf3>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	bc 01       	movw	r22, r24
    469c:	cd 01       	movw	r24, r26
    469e:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <__fixunssfsi>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	9a 87       	std	Y+10, r25	; 0x0a
    46a8:	89 87       	std	Y+9, r24	; 0x09
    46aa:	0f c0       	rjmp	.+30     	; 0x46ca <vApplicationStackOverflowHook+0xf2>
    46ac:	80 e9       	ldi	r24, 0x90	; 144
    46ae:	91 e0       	ldi	r25, 0x01	; 1
    46b0:	9c 87       	std	Y+12, r25	; 0x0c
    46b2:	8b 87       	std	Y+11, r24	; 0x0b
    46b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    46b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <vApplicationStackOverflowHook+0xe0>
    46bc:	9c 87       	std	Y+12, r25	; 0x0c
    46be:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c0:	89 85       	ldd	r24, Y+9	; 0x09
    46c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c4:	01 97       	sbiw	r24, 0x01	; 1
    46c6:	9a 87       	std	Y+10, r25	; 0x0a
    46c8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ca:	89 85       	ldd	r24, Y+9	; 0x09
    46cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ce:	89 2b       	or	r24, r25
    46d0:	69 f7       	brne	.-38     	; 0x46ac <vApplicationStackOverflowHook+0xd4>
    46d2:	14 c0       	rjmp	.+40     	; 0x46fc <vApplicationStackOverflowHook+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d4:	6d 81       	ldd	r22, Y+5	; 0x05
    46d6:	7e 81       	ldd	r23, Y+6	; 0x06
    46d8:	8f 81       	ldd	r24, Y+7	; 0x07
    46da:	98 85       	ldd	r25, Y+8	; 0x08
    46dc:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <__fixunssfsi>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	9a 87       	std	Y+10, r25	; 0x0a
    46e6:	89 87       	std	Y+9, r24	; 0x09
    46e8:	89 85       	ldd	r24, Y+9	; 0x09
    46ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ec:	9e 87       	std	Y+14, r25	; 0x0e
    46ee:	8d 87       	std	Y+13, r24	; 0x0d
    46f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <vApplicationStackOverflowHook+0x11c>
    46f8:	9e 87       	std	Y+14, r25	; 0x0e
    46fa:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    46fc:	83 e2       	ldi	r24, 0x23	; 35
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	23 e2       	ldi	r18, 0x23	; 35
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	f9 01       	movw	r30, r18
    4706:	20 81       	ld	r18, Z
    4708:	20 68       	ori	r18, 0x80	; 128
    470a:	fc 01       	movw	r30, r24
    470c:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

    }
    470e:	84 cf       	rjmp	.-248    	; 0x4618 <vApplicationStackOverflowHook+0x40>

00004710 <m_print>:
 *  Author: drags
 */ 
#include "Headers/m_lora_includes.h"

void m_print(char message[], SemaphoreHandle_t pxSemaphore)
{
    4710:	cf 93       	push	r28
    4712:	df 93       	push	r29
    4714:	00 d0       	rcall	.+0      	; 0x4716 <m_print+0x6>
    4716:	1f 92       	push	r1
    4718:	cd b7       	in	r28, 0x3d	; 61
    471a:	de b7       	in	r29, 0x3e	; 62
    471c:	9a 83       	std	Y+2, r25	; 0x02
    471e:	89 83       	std	Y+1, r24	; 0x01
    4720:	7c 83       	std	Y+4, r23	; 0x04
    4722:	6b 83       	std	Y+3, r22	; 0x03
	xSemaphoreTake(pxSemaphore, portMAX_DELAY);
    4724:	8b 81       	ldd	r24, Y+3	; 0x03
    4726:	9c 81       	ldd	r25, Y+4	; 0x04
    4728:	6f ef       	ldi	r22, 0xFF	; 255
    472a:	7f ef       	ldi	r23, 0xFF	; 255
    472c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("%s\n",message);
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
    4734:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <puts>
	xSemaphoreGive(pxSemaphore);
    4738:	8b 81       	ldd	r24, Y+3	; 0x03
    473a:	9c 81       	ldd	r25, Y+4	; 0x04
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	40 e0       	ldi	r20, 0x00	; 0
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	70 e0       	ldi	r23, 0x00	; 0
    4746:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
    474a:	00 00       	nop
    474c:	0f 90       	pop	r0
    474e:	0f 90       	pop	r0
    4750:	0f 90       	pop	r0
    4752:	0f 90       	pop	r0
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	08 95       	ret

0000475a <create_all_tasks>:
/*
	This method creates all the tasks
*/

void create_all_tasks(UBaseType_t lora_reset_task_priority)
{
    475a:	ef 92       	push	r14
    475c:	ff 92       	push	r15
    475e:	0f 93       	push	r16
    4760:	cf 93       	push	r28
    4762:	df 93       	push	r29
    4764:	1f 92       	push	r1
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
    476a:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
    476c:	e1 2c       	mov	r14, r1
    476e:	f1 2c       	mov	r15, r1
    4770:	09 81       	ldd	r16, Y+1	; 0x01
    4772:	20 e0       	ldi	r18, 0x00	; 0
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	48 e8       	ldi	r20, 0x88	; 136
    4778:	51 e0       	ldi	r21, 0x01	; 1
    477a:	6e e2       	ldi	r22, 0x2E	; 46
    477c:	72 e0       	ldi	r23, 0x02	; 2
    477e:	80 e2       	ldi	r24, 0x20	; 32
    4780:	96 e2       	ldi	r25, 0x26	; 38
    4782:	0e 94 e5 11 	call	0x23ca	; 0x23ca <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_reset_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    4786:	e1 2c       	mov	r14, r1
    4788:	f1 2c       	mov	r15, r1
    478a:	00 e0       	ldi	r16, 0x00	; 0
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	40 ec       	ldi	r20, 0xC0	; 192
    4792:	50 e0       	ldi	r21, 0x00	; 0
    4794:	65 e3       	ldi	r22, 0x35	; 53
    4796:	72 e0       	ldi	r23, 0x02	; 2
    4798:	83 e2       	ldi	r24, 0x23	; 35
    479a:	97 e2       	ldi	r25, 0x27	; 39
    479c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, ( tskIDLE_PRIORITY )
	, NULL );
	
	xTaskCreate(
    47a0:	e1 2c       	mov	r14, r1
    47a2:	f1 2c       	mov	r15, r1
    47a4:	00 e0       	ldi	r16, 0x00	; 0
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	40 ec       	ldi	r20, 0xC0	; 192
    47ac:	50 e0       	ldi	r21, 0x00	; 0
    47ae:	67 e4       	ldi	r22, 0x47	; 71
    47b0:	72 e0       	ldi	r23, 0x02	; 2
    47b2:	85 eb       	ldi	r24, 0xB5	; 181
    47b4:	96 e2       	ldi	r25, 0x26	; 38
    47b6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <xTaskCreate>
	//, "Print Measurements Task"
	//, configMINIMAL_STACK_SIZE
	//, NULL
	//, ( tskIDLE_PRIORITY )
	//, NULL );
}
    47ba:	00 00       	nop
    47bc:	0f 90       	pop	r0
    47be:	df 91       	pop	r29
    47c0:	cf 91       	pop	r28
    47c2:	0f 91       	pop	r16
    47c4:	ff 90       	pop	r15
    47c6:	ef 90       	pop	r14
    47c8:	08 95       	ret

000047ca <create_all_timers>:
void timer_5_mins_callback(TimerHandle_t pxTimer);

TimerHandle_t xTimer_5_mins;

void create_all_timers()
{
    47ca:	0f 93       	push	r16
    47cc:	1f 93       	push	r17
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62

	xTimer_5_mins = xTimerCreate("5 minutes timer",
    47d6:	0c e6       	ldi	r16, 0x6C	; 108
    47d8:	11 e0       	ldi	r17, 0x01	; 1
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	41 e0       	ldi	r20, 0x01	; 1
    47e0:	62 ee       	ldi	r22, 0xE2	; 226
    47e2:	74 e0       	ldi	r23, 0x04	; 4
    47e4:	88 e5       	ldi	r24, 0x58	; 88
    47e6:	92 e0       	ldi	r25, 0x02	; 2
    47e8:	07 da       	rcall	.-3058   	; 0x3bf8 <xTimerCreate>
    47ea:	90 93 b5 0a 	sts	0x0AB5, r25	; 0x800ab5 <xTimer_5_mins+0x1>
    47ee:	80 93 b4 0a 	sts	0x0AB4, r24	; 0x800ab4 <xTimer_5_mins>
	//xTimer_send_data = xTimerCreate("Data Sending Timer",
			//(1000/portTICK_PERIOD_MS),
			//pdTRUE,
			//(void *)3,
			//send_data_timer_callback);		
    47f2:	00 00       	nop
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	1f 91       	pop	r17
    47fa:	0f 91       	pop	r16
    47fc:	08 95       	ret

000047fe <lora_reset>:


void lora_setup(void);

void lora_reset()
{
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
	lora_driver_reset_rn2483(1); // Activate reset line
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <lora_driver_reset_rn2483>
	vTaskDelay(2);
    480c:	82 e0       	ldi	r24, 0x02	; 2
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
	lora_driver_reset_rn2483(0); // Release reset line
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <lora_driver_reset_rn2483>
	vTaskDelay(150); // Wait for tranceiver module to wake up after reset
    481a:	86 e9       	ldi	r24, 0x96	; 150
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    4822:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <lora_driver_flush_buffers>
	
	lora_setup();
    4826:	04 d0       	rcall	.+8      	; 0x4830 <lora_setup>
    4828:	00 00       	nop
    482a:	df 91       	pop	r29
    482c:	cf 91       	pop	r28
    482e:	08 95       	ret

00004830 <lora_setup>:
#include "../Headers/m_lora_includes.h"

static char _out_buf[100];

void lora_setup(void)
{
    4830:	cf 93       	push	r28
    4832:	df 93       	push	r29
    4834:	1f 92       	push	r1
    4836:	1f 92       	push	r1
    4838:	cd b7       	in	r28, 0x3d	; 61
    483a:	de b7       	in	r29, 0x3e	; 62
	/*
		Hardware reset of LoRaWAN transceiver
	*/
	

	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <led_slow_blink>

	// Factory reset the transceiver
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4842:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4846:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    484a:	6f ef       	ldi	r22, 0xFF	; 255
    484c:	7f ef       	ldi	r23, 0xFF	; 255
    484e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    4852:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <lora_driver_rn2483_factory_reset>
    4856:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    485a:	29 2f       	mov	r18, r25
    485c:	2f 93       	push	r18
    485e:	8f 93       	push	r24
    4860:	88 e6       	ldi	r24, 0x68	; 104
    4862:	92 e0       	ldi	r25, 0x02	; 2
    4864:	89 2f       	mov	r24, r25
    4866:	8f 93       	push	r24
    4868:	88 e6       	ldi	r24, 0x68	; 104
    486a:	92 e0       	ldi	r25, 0x02	; 2
    486c:	8f 93       	push	r24
    486e:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4872:	0f 90       	pop	r0
    4874:	0f 90       	pop	r0
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    487a:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    487e:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	40 e0       	ldi	r20, 0x00	; 0
    4886:	50 e0       	ldi	r21, 0x00	; 0
    4888:	60 e0       	ldi	r22, 0x00	; 0
    488a:	70 e0       	ldi	r23, 0x00	; 0
    488c:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
	
	// Configure to EU868 LoRaWAN standards
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4890:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4894:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4898:	6f ef       	ldi	r22, 0xFF	; 255
    489a:	7f ef       	ldi	r23, 0xFF	; 255
    489c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    48a0:	0e 94 88 30 	call	0x6110	; 0x6110 <lora_driver_configure_to_eu868>
    48a4:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    48a8:	29 2f       	mov	r18, r25
    48aa:	2f 93       	push	r18
    48ac:	8f 93       	push	r24
    48ae:	8b e7       	ldi	r24, 0x7B	; 123
    48b0:	92 e0       	ldi	r25, 0x02	; 2
    48b2:	89 2f       	mov	r24, r25
    48b4:	8f 93       	push	r24
    48b6:	8b e7       	ldi	r24, 0x7B	; 123
    48b8:	92 e0       	ldi	r25, 0x02	; 2
    48ba:	8f 93       	push	r24
    48bc:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    48c8:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    48cc:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	40 e0       	ldi	r20, 0x00	; 0
    48d4:	50 e0       	ldi	r21, 0x00	; 0
    48d6:	60 e0       	ldi	r22, 0x00	; 0
    48d8:	70 e0       	ldi	r23, 0x00	; 0
    48da:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    48de:	8e ed       	ldi	r24, 0xDE	; 222
    48e0:	98 e0       	ldi	r25, 0x08	; 8
    48e2:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <lora_driver_get_rn2483_hweui>
    48e6:	8a 83       	std	Y+2, r24	; 0x02
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    48e8:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    48ec:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    48f0:	6f ef       	ldi	r22, 0xFF	; 255
    48f2:	7f ef       	ldi	r23, 0xFF	; 255
    48f4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    48f8:	8a 81       	ldd	r24, Y+2	; 0x02
    48fa:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    48fe:	9c 01       	movw	r18, r24
    4900:	8e ed       	ldi	r24, 0xDE	; 222
    4902:	98 e0       	ldi	r25, 0x08	; 8
    4904:	89 2f       	mov	r24, r25
    4906:	8f 93       	push	r24
    4908:	8e ed       	ldi	r24, 0xDE	; 222
    490a:	98 e0       	ldi	r25, 0x08	; 8
    490c:	8f 93       	push	r24
    490e:	83 2f       	mov	r24, r19
    4910:	8f 93       	push	r24
    4912:	82 2f       	mov	r24, r18
    4914:	8f 93       	push	r24
    4916:	84 e9       	ldi	r24, 0x94	; 148
    4918:	92 e0       	ldi	r25, 0x02	; 2
    491a:	89 2f       	mov	r24, r25
    491c:	8f 93       	push	r24
    491e:	84 e9       	ldi	r24, 0x94	; 148
    4920:	92 e0       	ldi	r25, 0x02	; 2
    4922:	8f 93       	push	r24
    4924:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4934:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4938:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	40 e0       	ldi	r20, 0x00	; 0
    4940:	50 e0       	ldi	r21, 0x00	; 0
    4942:	60 e0       	ldi	r22, 0x00	; 0
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    494a:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    494e:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4952:	6f ef       	ldi	r22, 0xFF	; 255
    4954:	7f ef       	ldi	r23, 0xFF	; 255
    4956:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    495a:	8e ed       	ldi	r24, 0xDE	; 222
    495c:	98 e0       	ldi	r25, 0x08	; 8
    495e:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <lora_driver_set_device_identifier>
    4962:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    4966:	29 2f       	mov	r18, r25
    4968:	2f 93       	push	r18
    496a:	8f 93       	push	r24
    496c:	8e ed       	ldi	r24, 0xDE	; 222
    496e:	98 e0       	ldi	r25, 0x08	; 8
    4970:	89 2f       	mov	r24, r25
    4972:	8f 93       	push	r24
    4974:	8e ed       	ldi	r24, 0xDE	; 222
    4976:	98 e0       	ldi	r25, 0x08	; 8
    4978:	8f 93       	push	r24
    497a:	88 ea       	ldi	r24, 0xA8	; 168
    497c:	92 e0       	ldi	r25, 0x02	; 2
    497e:	89 2f       	mov	r24, r25
    4980:	8f 93       	push	r24
    4982:	88 ea       	ldi	r24, 0xA8	; 168
    4984:	92 e0       	ldi	r25, 0x02	; 2
    4986:	8f 93       	push	r24
    4988:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	0f 90       	pop	r0
    4996:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4998:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    499c:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	40 e0       	ldi	r20, 0x00	; 0
    49a4:	50 e0       	ldi	r21, 0x00	; 0
    49a6:	60 e0       	ldi	r22, 0x00	; 0
    49a8:	70 e0       	ldi	r23, 0x00	; 0
    49aa:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
	
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    49ae:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    49b2:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    49b6:	6f ef       	ldi	r22, 0xFF	; 255
    49b8:	7f ef       	ldi	r23, 0xFF	; 255
    49ba:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    49be:	4e ed       	ldi	r20, 0xDE	; 222
    49c0:	58 e0       	ldi	r21, 0x08	; 8
    49c2:	6d eb       	ldi	r22, 0xBD	; 189
    49c4:	72 e0       	ldi	r23, 0x02	; 2
    49c6:	8e ed       	ldi	r24, 0xDE	; 222
    49c8:	92 e0       	ldi	r25, 0x02	; 2
    49ca:	0e 94 62 31 	call	0x62c4	; 0x62c4 <lora_driver_set_otaa_identity>
    49ce:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    49d2:	29 2f       	mov	r18, r25
    49d4:	2f 93       	push	r18
    49d6:	8f 93       	push	r24
    49d8:	8e ed       	ldi	r24, 0xDE	; 222
    49da:	98 e0       	ldi	r25, 0x08	; 8
    49dc:	89 2f       	mov	r24, r25
    49de:	8f 93       	push	r24
    49e0:	8e ed       	ldi	r24, 0xDE	; 222
    49e2:	98 e0       	ldi	r25, 0x08	; 8
    49e4:	8f 93       	push	r24
    49e6:	8d eb       	ldi	r24, 0xBD	; 189
    49e8:	92 e0       	ldi	r25, 0x02	; 2
    49ea:	89 2f       	mov	r24, r25
    49ec:	8f 93       	push	r24
    49ee:	8d eb       	ldi	r24, 0xBD	; 189
    49f0:	92 e0       	ldi	r25, 0x02	; 2
    49f2:	8f 93       	push	r24
    49f4:	8e ed       	ldi	r24, 0xDE	; 222
    49f6:	92 e0       	ldi	r25, 0x02	; 2
    49f8:	89 2f       	mov	r24, r25
    49fa:	8f 93       	push	r24
    49fc:	8e ed       	ldi	r24, 0xDE	; 222
    49fe:	92 e0       	ldi	r25, 0x02	; 2
    4a00:	8f 93       	push	r24
    4a02:	8f ee       	ldi	r24, 0xEF	; 239
    4a04:	92 e0       	ldi	r25, 0x02	; 2
    4a06:	89 2f       	mov	r24, r25
    4a08:	8f 93       	push	r24
    4a0a:	8f ee       	ldi	r24, 0xEF	; 239
    4a0c:	92 e0       	ldi	r25, 0x02	; 2
    4a0e:	8f 93       	push	r24
    4a10:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4a14:	8d b7       	in	r24, 0x3d	; 61
    4a16:	9e b7       	in	r25, 0x3e	; 62
    4a18:	0a 96       	adiw	r24, 0x0a	; 10
    4a1a:	0f b6       	in	r0, 0x3f	; 63
    4a1c:	f8 94       	cli
    4a1e:	de bf       	out	0x3e, r29	; 62
    4a20:	0f be       	out	0x3f, r0	; 63
    4a22:	cd bf       	out	0x3d, r28	; 61
	xSemaphoreGive(xSemaphore_print);
    4a24:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4a28:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	40 e0       	ldi	r20, 0x00	; 0
    4a30:	50 e0       	ldi	r21, 0x00	; 0
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	70 e0       	ldi	r23, 0x00	; 0
    4a36:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>

	// Save all the MAC settings in the transceiver
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4a3a:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4a3e:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4a42:	6f ef       	ldi	r22, 0xFF	; 255
    4a44:	7f ef       	ldi	r23, 0xFF	; 255
    4a46:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    4a4a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <lora_driver_save_mac>
    4a4e:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    4a52:	29 2f       	mov	r18, r25
    4a54:	2f 93       	push	r18
    4a56:	8f 93       	push	r24
    4a58:	85 e2       	ldi	r24, 0x25	; 37
    4a5a:	93 e0       	ldi	r25, 0x03	; 3
    4a5c:	89 2f       	mov	r24, r25
    4a5e:	8f 93       	push	r24
    4a60:	85 e2       	ldi	r24, 0x25	; 37
    4a62:	93 e0       	ldi	r25, 0x03	; 3
    4a64:	8f 93       	push	r24
    4a66:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4a6a:	0f 90       	pop	r0
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4a72:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4a76:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	40 e0       	ldi	r20, 0x00	; 0
    4a7e:	50 e0       	ldi	r21, 0x00	; 0
    4a80:	60 e0       	ldi	r22, 0x00	; 0
    4a82:	70 e0       	ldi	r23, 0x00	; 0
    4a84:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>

	// Enable Adaptive Data Rate
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4a88:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4a8c:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4a90:	6f ef       	ldi	r22, 0xFF	; 255
    4a92:	7f ef       	ldi	r23, 0xFF	; 255
    4a94:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	0e 94 7d 30 	call	0x60fa	; 0x60fa <lora_driver_set_adaptive_data_rate>
    4a9e:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    4aa2:	29 2f       	mov	r18, r25
    4aa4:	2f 93       	push	r18
    4aa6:	8f 93       	push	r24
    4aa8:	84 e3       	ldi	r24, 0x34	; 52
    4aaa:	93 e0       	ldi	r25, 0x03	; 3
    4aac:	89 2f       	mov	r24, r25
    4aae:	8f 93       	push	r24
    4ab0:	84 e3       	ldi	r24, 0x34	; 52
    4ab2:	93 e0       	ldi	r25, 0x03	; 3
    4ab4:	8f 93       	push	r24
    4ab6:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4aba:	0f 90       	pop	r0
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4ac2:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4ac6:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	40 e0       	ldi	r20, 0x00	; 0
    4ace:	50 e0       	ldi	r21, 0x00	; 0
    4ad0:	60 e0       	ldi	r22, 0x00	; 0
    4ad2:	70 e0       	ldi	r23, 0x00	; 0
    4ad4:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
	
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
    4ad8:	85 e0       	ldi	r24, 0x05	; 5
    4ada:	89 83       	std	Y+1, r24	; 0x01
	do {
		rc = lora_driver_join(LoRa_OTAA);
    4adc:	80 e0       	ldi	r24, 0x00	; 0
    4ade:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <lora_driver_join>
    4ae2:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network Tries Left:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    4ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae6:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    4aea:	9c 01       	movw	r18, r24
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	88 2f       	mov	r24, r24
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	43 2f       	mov	r20, r19
    4af4:	4f 93       	push	r20
    4af6:	2f 93       	push	r18
    4af8:	29 2f       	mov	r18, r25
    4afa:	2f 93       	push	r18
    4afc:	8f 93       	push	r24
    4afe:	85 e5       	ldi	r24, 0x55	; 85
    4b00:	93 e0       	ldi	r25, 0x03	; 3
    4b02:	89 2f       	mov	r24, r25
    4b04:	8f 93       	push	r24
    4b06:	85 e5       	ldi	r24, 0x55	; 85
    4b08:	93 e0       	ldi	r25, 0x03	; 3
    4b0a:	8f 93       	push	r24
    4b0c:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	0f 90       	pop	r0
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0

		if ( rc != LoRa_ACCEPTED)
    4b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1e:	88 30       	cpi	r24, 0x08	; 8
    4b20:	71 f0       	breq	.+28     	; 0x4b3e <lora_setup+0x30e>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(5000/portTICK_PERIOD_MS);
    4b28:	88 e3       	ldi	r24, 0x38	; 56
    4b2a:	91 e0       	ldi	r25, 0x01	; 1
    4b2c:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4b30:	89 81       	ldd	r24, Y+1	; 0x01
    4b32:	81 50       	subi	r24, 0x01	; 1
    4b34:	89 83       	std	Y+1, r24	; 0x01
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	88 23       	and	r24, r24
    4b3a:	81 f6       	brne	.-96     	; 0x4adc <lora_setup+0x2ac>
    4b3c:	01 c0       	rjmp	.+2      	; 0x4b40 <lora_setup+0x310>
			// Wait 5 sec and lets try again
			vTaskDelay(5000/portTICK_PERIOD_MS);
		}
		else
		{
			break;
    4b3e:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LoRa_ACCEPTED)
    4b40:	8a 81       	ldd	r24, Y+2	; 0x02
    4b42:	88 30       	cpi	r24, 0x08	; 8
    4b44:	21 f4       	brne	.+8      	; 0x4b4e <lora_setup+0x31e>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <led_led_on>
		while (1)
		{
			taskYIELD();
		}
	}
    4b4c:	09 c0       	rjmp	.+18     	; 0x4b60 <lora_setup+0x330>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <led_fast_blink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4b5a:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
		}
    4b5e:	fd cf       	rjmp	.-6      	; 0x4b5a <lora_setup+0x32a>
	}
    4b60:	0f 90       	pop	r0
    4b62:	0f 90       	pop	r0
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	08 95       	ret

00004b6a <global_init>:
SemaphoreHandle_t xSemaphore_temperature;
SemaphoreHandle_t xSemaphore_view_data;
SemaphoreHandle_t xSemaphore_buffer;

void global_init()
{
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
	stdioCreate(0);
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	27 d2       	rcall	.+1102   	; 0x4fc4 <stdioCreate>
	
	sei(); // enables interrupts
    4b76:	78 94       	sei
	
	xSemaphore_print = xSemaphoreCreateBinary();
    4b78:	43 e0       	ldi	r20, 0x03	; 3
    4b7a:	60 e0       	ldi	r22, 0x00	; 0
    4b7c:	81 e0       	ldi	r24, 0x01	; 1
    4b7e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xQueueGenericCreate>
    4b82:	90 93 b9 0a 	sts	0x0AB9, r25	; 0x800ab9 <xSemaphore_print+0x1>
    4b86:	80 93 b8 0a 	sts	0x0AB8, r24	; 0x800ab8 <xSemaphore_print>
	
	xSemaphore_co2 = xSemaphoreCreateMutex();
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	0e 94 a2 07 	call	0xf44	; 0xf44 <xQueueCreateMutex>
    4b90:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <xSemaphore_co2+0x1>
    4b94:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <xSemaphore_co2>
	xSemaphore_temperature = xSemaphoreCreateMutex();
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	0e 94 a2 07 	call	0xf44	; 0xf44 <xQueueCreateMutex>
    4b9e:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <xSemaphore_temperature+0x1>
    4ba2:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <xSemaphore_temperature>
	xSemaphore_view_data = xSemaphoreCreateMutex();
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	0e 94 a2 07 	call	0xf44	; 0xf44 <xQueueCreateMutex>
    4bac:	90 93 b7 0a 	sts	0x0AB7, r25	; 0x800ab7 <xSemaphore_view_data+0x1>
    4bb0:	80 93 b6 0a 	sts	0x0AB6, r24	; 0x800ab6 <xSemaphore_view_data>
	xSemaphore_buffer = xSemaphoreCreateMutex();
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	0e 94 a2 07 	call	0xf44	; 0xf44 <xQueueCreateMutex>
    4bba:	90 93 bb 0a 	sts	0x0ABB, r25	; 0x800abb <xSemaphore_buffer+0x1>
    4bbe:	80 93 ba 0a 	sts	0x0ABA, r24	; 0x800aba <xSemaphore_buffer>
	
	xSemaphoreGive(xSemaphore_print);
    4bc2:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4bc6:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	50 e0       	ldi	r21, 0x00	; 0
    4bd0:	60 e0       	ldi	r22, 0x00	; 0
    4bd2:	70 e0       	ldi	r23, 0x00	; 0
    4bd4:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
	
	xMessageBuffer = xMessageBufferCreate( sizeof (m_data) * 3);
    4bd8:	41 e0       	ldi	r20, 0x01	; 1
    4bda:	60 e0       	ldi	r22, 0x00	; 0
    4bdc:	70 e0       	ldi	r23, 0x00	; 0
    4bde:	8c e0       	ldi	r24, 0x0C	; 12
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xStreamBufferGenericCreate>
    4be6:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <xMessageBuffer+0x1>
    4bea:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <xMessageBuffer>
		
	/*
		Initialize LoRa Driver
	*/

	hal_create(LED_TASK_PRIORITY);
    4bee:	82 e0       	ldi	r24, 0x02	; 2
    4bf0:	ba d5       	rcall	.+2932   	; 0x5766 <hal_create>
	lora_driver_create(ser_USART1);
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <lora_driver_create>
	m_print("LoRa driver created.\n",xSemaphore_print);
    4bf8:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4bfc:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4c00:	bc 01       	movw	r22, r24
    4c02:	86 e7       	ldi	r24, 0x76	; 118
    4c04:	93 e0       	ldi	r25, 0x03	; 3
	
	/*
		Initialize the Temperature Driver
	*/
	if ( HIH8120_OK == hih8120Create() )
    4c06:	84 dd       	rcall	.-1272   	; 0x4710 <m_print>
    4c08:	0d d6       	rcall	.+3098   	; 0x5824 <hih8120Create>
    4c0a:	88 23       	and	r24, r24
    4c0c:	41 f4       	brne	.+16     	; 0x4c1e <global_init+0xb4>
	{
		m_print("Temp/Humidity driver created.\n",xSemaphore_print);
    4c0e:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4c12:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4c16:	bc 01       	movw	r22, r24
    4c18:	8c e8       	ldi	r24, 0x8C	; 140
    4c1a:	93 e0       	ldi	r25, 0x03	; 3
    4c1c:	79 dd       	rcall	.-1294   	; 0x4710 <m_print>
	}
	
	/* 
		Initialize MH-Z19 CO2 Driver
	*/
	mh_z19_create(ser_USART3, measure_co2_callback);
    4c1e:	69 e1       	ldi	r22, 0x19	; 25
    4c20:	71 e0       	ldi	r23, 0x01	; 1
    4c22:	83 e0       	ldi	r24, 0x03	; 3
    4c24:	0e 94 ac 32 	call	0x6558	; 0x6558 <mh_z19_create>
	m_print("CO2 driver created.\n",xSemaphore_print);
    4c28:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4c2c:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4c30:	bc 01       	movw	r22, r24
    4c32:	8b ea       	ldi	r24, 0xAB	; 171
    4c34:	93 e0       	ldi	r25, 0x03	; 3
    4c36:	6c dd       	rcall	.-1320   	; 0x4710 <m_print>
	
}
    4c38:	00 00       	nop
    4c3a:	df 91       	pop	r29
    4c3c:	cf 91       	pop	r28
    4c3e:	08 95       	ret

00004c40 <lora_send_data_task>:

/*
	Task that sends data to the server
*/
void lora_send_data_task(void *pvParameters)
{
    4c40:	cf 93       	push	r28
    4c42:	df 93       	push	r29
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	28 97       	sbiw	r28, 0x08	; 8
    4c4a:	0f b6       	in	r0, 0x3f	; 63
    4c4c:	f8 94       	cli
    4c4e:	de bf       	out	0x3e, r29	; 62
    4c50:	0f be       	out	0x3f, r0	; 63
    4c52:	cd bf       	out	0x3d, r28	; 61
    4c54:	98 87       	std	Y+8, r25	; 0x08
    4c56:	8f 83       	std	Y+7, r24	; 0x07
	m_data data;
	size_t xRecievedBytes;
	

	lora_reset();
    4c58:	d2 dd       	rcall	.-1116   	; 0x47fe <lora_reset>

	_uplink_payload.len = 4;
    4c5a:	84 e0       	ldi	r24, 0x04	; 4
    4c5c:	80 93 43 09 	sts	0x0943, r24	; 0x800943 <_uplink_payload+0x1>
	_uplink_payload.port_no = 2;
    4c60:	82 e0       	ldi	r24, 0x02	; 2
    4c62:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <_uplink_payload>


	while (1)
	{
		xSemaphoreTake(xSemaphore_view_data, portMAX_DELAY);
    4c66:	80 91 b6 0a 	lds	r24, 0x0AB6	; 0x800ab6 <xSemaphore_view_data>
    4c6a:	90 91 b7 0a 	lds	r25, 0x0AB7	; 0x800ab7 <xSemaphore_view_data+0x1>
    4c6e:	6f ef       	ldi	r22, 0xFF	; 255
    4c70:	7f ef       	ldi	r23, 0xFF	; 255
    4c72:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
		
		m_print("\nData Sending Task running!\n",xSemaphore_print);
    4c76:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4c7a:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4c7e:	bc 01       	movw	r22, r24
    4c80:	80 ec       	ldi	r24, 0xC0	; 192
    4c82:	93 e0       	ldi	r25, 0x03	; 3
    4c84:	45 dd       	rcall	.-1398   	; 0x4710 <m_print>
		
		vTaskDelay(1000/portTICK_PERIOD_MS);
    4c86:	8e e3       	ldi	r24, 0x3E	; 62
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>

		xRecievedBytes = xMessageBufferReceive(xMessageBuffer
    4c8e:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <xMessageBuffer>
    4c92:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <xMessageBuffer+0x1>
    4c96:	be 01       	movw	r22, r28
    4c98:	6d 5f       	subi	r22, 0xFD	; 253
    4c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c9c:	20 e0       	ldi	r18, 0x00	; 0
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	44 e0       	ldi	r20, 0x04	; 4
    4ca2:	50 e0       	ldi	r21, 0x00	; 0
    4ca4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xStreamBufferReceive>
    4ca8:	9a 83       	std	Y+2, r25	; 0x02
    4caa:	89 83       	std	Y+1, r24	; 0x01
		, sizeof(m_data)
		,0 );
		
		//for (int i = 0; i < xRecievedBytes; i++)
		//{
			_uplink_payload.bytes[1] = data.type >> 8;
    4cac:	8b 81       	ldd	r24, Y+3	; 0x03
    4cae:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb0:	89 2f       	mov	r24, r25
    4cb2:	99 0f       	add	r25, r25
    4cb4:	99 0b       	sbc	r25, r25
    4cb6:	80 93 45 09 	sts	0x0945, r24	; 0x800945 <_uplink_payload+0x3>
			_uplink_payload.bytes[2] = data.type & 0xFF;
    4cba:	8b 81       	ldd	r24, Y+3	; 0x03
    4cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    4cbe:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <_uplink_payload+0x4>
			_uplink_payload.bytes[3] = data.value >> 8;
    4cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc6:	89 2f       	mov	r24, r25
    4cc8:	99 27       	eor	r25, r25
    4cca:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <_uplink_payload+0x5>
			_uplink_payload.bytes[4] = data.type & 0xFF;	
    4cce:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd2:	80 93 48 09 	sts	0x0948, r24	; 0x800948 <_uplink_payload+0x6>
			
			xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4cd6:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4cda:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4cde:	6f ef       	ldi	r22, 0xFF	; 255
    4ce0:	7f ef       	ldi	r23, 0xFF	; 255
    4ce2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
			printf("Received measurement for sending: type: %d, val: %d\n\n",data.type, data.value);
    4ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    4ce8:	3e 81       	ldd	r19, Y+6	; 0x06
    4cea:	8b 81       	ldd	r24, Y+3	; 0x03
    4cec:	9c 81       	ldd	r25, Y+4	; 0x04
    4cee:	43 2f       	mov	r20, r19
    4cf0:	4f 93       	push	r20
    4cf2:	2f 93       	push	r18
    4cf4:	29 2f       	mov	r18, r25
    4cf6:	2f 93       	push	r18
    4cf8:	8f 93       	push	r24
    4cfa:	8d ed       	ldi	r24, 0xDD	; 221
    4cfc:	93 e0       	ldi	r25, 0x03	; 3
    4cfe:	89 2f       	mov	r24, r25
    4d00:	8f 93       	push	r24
    4d02:	8d ed       	ldi	r24, 0xDD	; 221
    4d04:	93 e0       	ldi	r25, 0x03	; 3
    4d06:	8f 93       	push	r24
    4d08:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4d0c:	0f 90       	pop	r0
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	0f 90       	pop	r0
    4d16:	0f 90       	pop	r0
			vTaskDelay(1);
    4d18:	81 e0       	ldi	r24, 0x01	; 1
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
			xSemaphoreGive(xSemaphore_print);
    4d20:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4d24:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	50 e0       	ldi	r21, 0x00	; 0
    4d2e:	60 e0       	ldi	r22, 0x00	; 0
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
		//_uplink_payload.bytes[2] = temp >> 8;
		//_uplink_payload.bytes[3] = temp & 0xFF;
		//_uplink_payload.bytes[4] = co2_ppm >> 8;
		//_uplink_payload.bytes[5] = co2_ppm & 0xFF;

		led_short_puls(led_ST4);  // OPTIONAL
    4d36:	83 e0       	ldi	r24, 0x03	; 3
    4d38:	79 d7       	rcall	.+3826   	; 0x5c2c <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
    4d3a:	62 e4       	ldi	r22, 0x42	; 66
    4d3c:	79 e0       	ldi	r23, 0x09	; 9
    4d3e:	81 e0       	ldi	r24, 0x01	; 1
    4d40:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <lora_driver_sent_upload_message>
    4d44:	0e 94 83 31 	call	0x6306	; 0x6306 <lora_driver_map_return_code_to_text>
    4d48:	29 2f       	mov	r18, r25
    4d4a:	2f 93       	push	r18
    4d4c:	8f 93       	push	r24
    4d4e:	83 e1       	ldi	r24, 0x13	; 19
    4d50:	94 e0       	ldi	r25, 0x04	; 4
    4d52:	89 2f       	mov	r24, r25
    4d54:	8f 93       	push	r24
    4d56:	83 e1       	ldi	r24, 0x13	; 19
    4d58:	94 e0       	ldi	r25, 0x04	; 4
    4d5a:	8f 93       	push	r24
    4d5c:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4d60:	0f 90       	pop	r0
    4d62:	0f 90       	pop	r0
    4d64:	0f 90       	pop	r0
    4d66:	0f 90       	pop	r0
	}
    4d68:	7e cf       	rjmp	.-260    	; 0x4c66 <lora_send_data_task+0x26>

00004d6a <measure_co2_task>:
 */ 
#include "../Headers/m_lora_includes.h"


void measure_co2_task(void *pvParameters)
{
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	00 d0       	rcall	.+0      	; 0x4d70 <measure_co2_task+0x6>
    4d70:	00 d0       	rcall	.+0      	; 0x4d72 <measure_co2_task+0x8>
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
    4d76:	9e 83       	std	Y+6, r25	; 0x06
    4d78:	8d 83       	std	Y+5, r24	; 0x05
	m_data co2 = {1, 0};
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	9a 83       	std	Y+2, r25	; 0x02
    4d80:	89 83       	std	Y+1, r24	; 0x01
    4d82:	1c 82       	std	Y+4, r1	; 0x04
    4d84:	1b 82       	std	Y+3, r1	; 0x03
	
	while (1)
	{
		
		xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
    4d86:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <xSemaphore_co2>
    4d8a:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <xSemaphore_co2+0x1>
    4d8e:	6f ef       	ldi	r22, 0xFF	; 255
    4d90:	7f ef       	ldi	r23, 0xFF	; 255
    4d92:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
		
		m_print("\nMeasuring CO2 task running!\n",xSemaphore_print);
    4d96:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4d9a:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4d9e:	bc 01       	movw	r22, r24
    4da0:	88 e2       	ldi	r24, 0x28	; 40
    4da2:	94 e0       	ldi	r25, 0x04	; 4
    4da4:	b5 dc       	rcall	.-1686   	; 0x4710 <m_print>
		
		if (mh_z19_take_meassuring() != MHZ19_OK)
    4da6:	0e 94 db 32 	call	0x65b6	; 0x65b6 <mh_z19_take_meassuring>
    4daa:	88 23       	and	r24, r24
    4dac:	41 f0       	breq	.+16     	; 0x4dbe <measure_co2_task+0x54>
		{
			m_print("Error measuring CO2 value!\n",xSemaphore_print);
    4dae:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4db2:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4db6:	bc 01       	movw	r22, r24
    4db8:	86 e4       	ldi	r24, 0x46	; 70
    4dba:	94 e0       	ldi	r25, 0x04	; 4
    4dbc:	a9 dc       	rcall	.-1710   	; 0x4710 <m_print>
		}
	
		co2.value = co2_value;
    4dbe:	80 91 b2 0a 	lds	r24, 0x0AB2	; 0x800ab2 <co2_value>
    4dc2:	90 91 b3 0a 	lds	r25, 0x0AB3	; 0x800ab3 <co2_value+0x1>
    4dc6:	9c 83       	std	Y+4, r25	; 0x04
    4dc8:	8b 83       	std	Y+3, r24	; 0x03
		
		write_to_buffer(xMessageBuffer, co2);
    4dca:	20 91 bc 0a 	lds	r18, 0x0ABC	; 0x800abc <xMessageBuffer>
    4dce:	30 91 bd 0a 	lds	r19, 0x0ABD	; 0x800abd <xMessageBuffer+0x1>
    4dd2:	89 81       	ldd	r24, Y+1	; 0x01
    4dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd6:	ab 81       	ldd	r26, Y+3	; 0x03
    4dd8:	bc 81       	ldd	r27, Y+4	; 0x04
    4dda:	ac 01       	movw	r20, r24
    4ddc:	bd 01       	movw	r22, r26
    4dde:	c9 01       	movw	r24, r18
    4de0:	0e 94 2d 01 	call	0x25a	; 0x25a <write_to_buffer>
		xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4de4:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4de8:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4dec:	6f ef       	ldi	r22, 0xFF	; 255
    4dee:	7f ef       	ldi	r23, 0xFF	; 255
    4df0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
		printf("CO2 (type: %d, val: %u) sent!\n", co2.type, (unsigned int)co2.value);
    4df4:	2b 81       	ldd	r18, Y+3	; 0x03
    4df6:	3c 81       	ldd	r19, Y+4	; 0x04
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfc:	43 2f       	mov	r20, r19
    4dfe:	4f 93       	push	r20
    4e00:	2f 93       	push	r18
    4e02:	29 2f       	mov	r18, r25
    4e04:	2f 93       	push	r18
    4e06:	8f 93       	push	r24
    4e08:	82 e6       	ldi	r24, 0x62	; 98
    4e0a:	94 e0       	ldi	r25, 0x04	; 4
    4e0c:	89 2f       	mov	r24, r25
    4e0e:	8f 93       	push	r24
    4e10:	82 e6       	ldi	r24, 0x62	; 98
    4e12:	94 e0       	ldi	r25, 0x04	; 4
    4e14:	8f 93       	push	r24
    4e16:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4e1a:	0f 90       	pop	r0
    4e1c:	0f 90       	pop	r0
    4e1e:	0f 90       	pop	r0
    4e20:	0f 90       	pop	r0
    4e22:	0f 90       	pop	r0
    4e24:	0f 90       	pop	r0
		xSemaphoreGive(xSemaphore_print);
    4e26:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4e2a:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	40 e0       	ldi	r20, 0x00	; 0
    4e32:	50 e0       	ldi	r21, 0x00	; 0
    4e34:	60 e0       	ldi	r22, 0x00	; 0
    4e36:	70 e0       	ldi	r23, 0x00	; 0
    4e38:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
		vTaskDelay(1000/portTICK_PERIOD_MS);
    4e3c:	8e e3       	ldi	r24, 0x3E	; 62
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
	}
    4e44:	a0 cf       	rjmp	.-192    	; 0x4d86 <measure_co2_task+0x1c>

00004e46 <measure_temp_task>:
#include "../Headers/m_lora_includes.h"

void lora_reset();

void measure_temp_task(void *pvParameters)
{
    4e46:	cf 93       	push	r28
    4e48:	df 93       	push	r29
    4e4a:	00 d0       	rcall	.+0      	; 0x4e4c <measure_temp_task+0x6>
    4e4c:	00 d0       	rcall	.+0      	; 0x4e4e <measure_temp_task+0x8>
    4e4e:	cd b7       	in	r28, 0x3d	; 61
    4e50:	de b7       	in	r29, 0x3e	; 62
    4e52:	9e 83       	std	Y+6, r25	; 0x06
    4e54:	8d 83       	std	Y+5, r24	; 0x05
	m_data temperature = {2, 0};
    4e56:	82 e0       	ldi	r24, 0x02	; 2
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	9a 83       	std	Y+2, r25	; 0x02
    4e5c:	89 83       	std	Y+1, r24	; 0x01
    4e5e:	1c 82       	std	Y+4, r1	; 0x04
    4e60:	1b 82       	std	Y+3, r1	; 0x03
	
	//lora_reset();
	
	while (1)
	{
		xSemaphoreTake(xSemaphore_temperature, portMAX_DELAY);
    4e62:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <xSemaphore_temperature>
    4e66:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <xSemaphore_temperature+0x1>
    4e6a:	6f ef       	ldi	r22, 0xFF	; 255
    4e6c:	7f ef       	ldi	r23, 0xFF	; 255
    4e6e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
		
		m_print("\nMeasuring Temperature Task running!\n",xSemaphore_print);
    4e72:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
    4e76:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4e7a:	bc 01       	movw	r22, r24
    4e7c:	81 e8       	ldi	r24, 0x81	; 129
    4e7e:	94 e0       	ldi	r25, 0x04	; 4
    4e80:	47 dc       	rcall	.-1906   	; 0x4710 <m_print>
		

		if ( HIH8120_OK != hih8120Wakeup() )
    4e82:	e7 d4       	rcall	.+2510   	; 0x5852 <hih8120Wakeup>
    4e84:	88 23       	and	r24, r24
    4e86:	41 f0       	breq	.+16     	; 0x4e98 <measure_temp_task+0x52>
    4e88:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
		{
			m_print("Error in waking up the sensors!",xSemaphore_print);
    4e8c:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4e90:	bc 01       	movw	r22, r24
    4e92:	87 ea       	ldi	r24, 0xA7	; 167
    4e94:	94 e0       	ldi	r25, 0x04	; 4
    4e96:	3c dc       	rcall	.-1928   	; 0x4710 <m_print>
    4e98:	83 e0       	ldi	r24, 0x03	; 3
		}
		
		vTaskDelay(50/portTICK_PERIOD_MS);
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
		
	
		if ( HIH8120_OK !=  hih8120Meassure() )
    4ea0:	ec d4       	rcall	.+2520   	; 0x587a <hih8120Meassure>
    4ea2:	88 23       	and	r24, r24
    4ea4:	49 f0       	breq	.+18     	; 0x4eb8 <measure_temp_task+0x72>
    4ea6:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
		{
			m_print("Error in measuring the temperature!",xSemaphore_print);			
    4eaa:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4eae:	bc 01       	movw	r22, r24
    4eb0:	87 ec       	ldi	r24, 0xC7	; 199
    4eb2:	94 e0       	ldi	r25, 0x04	; 4
    4eb4:	2d dc       	rcall	.-1958   	; 0x4710 <m_print>
    4eb6:	40 c0       	rjmp	.+128    	; 0x4f38 <measure_temp_task+0xf2>
    4eb8:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
		{	
			vTaskDelay(10/portTICK_PERIOD_MS);
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
    4ec0:	07 d5       	rcall	.+2574   	; 0x58d0 <hih8120GetTemperature_x10>
			temperature.value = hih8120GetTemperature_x10();
    4ec2:	9c 83       	std	Y+4, r25	; 0x04
    4ec4:	8b 83       	std	Y+3, r24	; 0x03
    4ec6:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
				
			xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4eca:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4ece:	6f ef       	ldi	r22, 0xFF	; 255
    4ed0:	7f ef       	ldi	r23, 0xFF	; 255
    4ed2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xQueueSemaphoreTake>
    4ed6:	2b 81       	ldd	r18, Y+3	; 0x03
    4ed8:	3c 81       	ldd	r19, Y+4	; 0x04
			printf("Temperature(type: %d, val: %d) sent!\n", temperature.type,temperature.value);
    4eda:	89 81       	ldd	r24, Y+1	; 0x01
    4edc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ede:	43 2f       	mov	r20, r19
    4ee0:	4f 93       	push	r20
    4ee2:	2f 93       	push	r18
    4ee4:	29 2f       	mov	r18, r25
    4ee6:	2f 93       	push	r18
    4ee8:	8f 93       	push	r24
    4eea:	8b ee       	ldi	r24, 0xEB	; 235
    4eec:	94 e0       	ldi	r25, 0x04	; 4
    4eee:	89 2f       	mov	r24, r25
    4ef0:	8f 93       	push	r24
    4ef2:	8b ee       	ldi	r24, 0xEB	; 235
    4ef4:	94 e0       	ldi	r25, 0x04	; 4
    4ef6:	8f 93       	push	r24
    4ef8:	0e 94 67 38 	call	0x70ce	; 0x70ce <printf>
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	0f 90       	pop	r0
    4f02:	0f 90       	pop	r0
    4f04:	0f 90       	pop	r0
    4f06:	0f 90       	pop	r0
    4f08:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
			xSemaphoreGive(xSemaphore_print);
    4f0c:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4f10:	20 e0       	ldi	r18, 0x00	; 0
    4f12:	40 e0       	ldi	r20, 0x00	; 0
    4f14:	50 e0       	ldi	r21, 0x00	; 0
    4f16:	60 e0       	ldi	r22, 0x00	; 0
    4f18:	70 e0       	ldi	r23, 0x00	; 0
    4f1a:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueGenericSend>
    4f1e:	20 91 bc 0a 	lds	r18, 0x0ABC	; 0x800abc <xMessageBuffer>
			write_to_buffer(xMessageBuffer,temperature);
    4f22:	30 91 bd 0a 	lds	r19, 0x0ABD	; 0x800abd <xMessageBuffer+0x1>
    4f26:	89 81       	ldd	r24, Y+1	; 0x01
    4f28:	9a 81       	ldd	r25, Y+2	; 0x02
    4f2a:	ab 81       	ldd	r26, Y+3	; 0x03
    4f2c:	bc 81       	ldd	r27, Y+4	; 0x04
    4f2e:	ac 01       	movw	r20, r24
    4f30:	bd 01       	movw	r22, r26
    4f32:	c9 01       	movw	r24, r18
    4f34:	0e 94 2d 01 	call	0x25a	; 0x25a <write_to_buffer>
    4f38:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <xSemaphore_print>
		}
		
		m_print("Temperature sent to the message buffer!\n",xSemaphore_print);
    4f3c:	90 91 b9 0a 	lds	r25, 0x0AB9	; 0x800ab9 <xSemaphore_print+0x1>
    4f40:	bc 01       	movw	r22, r24
    4f42:	81 e1       	ldi	r24, 0x11	; 17
    4f44:	95 e0       	ldi	r25, 0x05	; 5
    4f46:	e4 db       	rcall	.-2104   	; 0x4710 <m_print>
    4f48:	8e e3       	ldi	r24, 0x3E	; 62
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
		vTaskDelay(1000/portTICK_PERIOD_MS);
    4f4c:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
    4f50:	88 cf       	rjmp	.-240    	; 0x4e62 <measure_temp_task+0x1c>

00004f52 <main>:
void create_all_tasks(UBaseType_t lora_handler_task_priority);
void create_all_timers();
void lora_setup(void);

int main(void)
{				
    4f52:	0f 93       	push	r16
    4f54:	1f 93       	push	r17
    4f56:	cf 93       	push	r28
    4f58:	df 93       	push	r29
    4f5a:	cd b7       	in	r28, 0x3d	; 61
    4f5c:	de b7       	in	r29, 0x3e	; 62
	global_init();
    4f5e:	05 de       	rcall	.-1014   	; 0x4b6a <global_init>
	
	create_all_timers();
    4f60:	34 dc       	rcall	.-1944   	; 0x47ca <create_all_timers>
	
	create_all_tasks(LORA_RESET_TASK_PRIORITY);
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	fa db       	rcall	.-2060   	; 0x475a <create_all_tasks>
    4f66:	0e 94 bb 14 	call	0x2976	; 0x2976 <xTaskGetTickCount>
	
	xTimerStart(xTimer_5_mins,0);
    4f6a:	ac 01       	movw	r20, r24
    4f6c:	80 91 b4 0a 	lds	r24, 0x0AB4	; 0x800ab4 <xTimer_5_mins>
    4f70:	90 91 b5 0a 	lds	r25, 0x0AB5	; 0x800ab5 <xTimer_5_mins+0x1>
    4f74:	00 e0       	ldi	r16, 0x00	; 0
    4f76:	10 e0       	ldi	r17, 0x00	; 0
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
    4f7c:	61 e0       	ldi	r22, 0x01	; 1
    4f7e:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <xTimerGenericCommand>
    4f82:	0e 94 d6 13 	call	0x27ac	; 0x27ac <vTaskStartScheduler>
					
	vTaskStartScheduler();
    4f86:	ff cf       	rjmp	.-2      	; 0x4f86 <main+0x34>

00004f88 <usart_getchar>:
    4f88:	cf 93       	push	r28
    4f8a:	df 93       	push	r29
    4f8c:	1f 92       	push	r1
    4f8e:	cd b7       	in	r28, 0x3d	; 61
    4f90:	de b7       	in	r29, 0x3e	; 62
    4f92:	be 01       	movw	r22, r28
    4f94:	6f 5f       	subi	r22, 0xFF	; 255
    4f96:	7f 4f       	sbci	r23, 0xFF	; 255
    4f98:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <_com_serial_instance>
    4f9c:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <_com_serial_instance+0x1>
    4fa0:	4f d1       	rcall	.+670    	; 0x5240 <serial_get_byte>
    4fa2:	81 11       	cpse	r24, r1
    4fa4:	f6 cf       	rjmp	.-20     	; 0x4f92 <usart_getchar+0xa>
    4fa6:	89 81       	ldd	r24, Y+1	; 0x01
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	0f 90       	pop	r0
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	08 95       	ret

00004fb2 <usart_putchar>:
    4fb2:	68 2f       	mov	r22, r24
    4fb4:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <_com_serial_instance>
    4fb8:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <_com_serial_instance+0x1>
    4fbc:	cc d0       	rcall	.+408    	; 0x5156 <serial_send_byte>
    4fbe:	80 e0       	ldi	r24, 0x00	; 0
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	08 95       	ret

00004fc4 <stdioCreate>:
    4fc4:	8f 92       	push	r8
    4fc6:	9f 92       	push	r9
    4fc8:	af 92       	push	r10
    4fca:	cf 92       	push	r12
    4fcc:	ef 92       	push	r14
    4fce:	0f 93       	push	r16
    4fd0:	81 2c       	mov	r8, r1
    4fd2:	91 2c       	mov	r9, r1
    4fd4:	68 94       	set
    4fd6:	aa 24       	eor	r10, r10
    4fd8:	a7 f8       	bld	r10, 7
    4fda:	68 94       	set
    4fdc:	cc 24       	eor	r12, r12
    4fde:	c7 f8       	bld	r12, 7
    4fe0:	e1 2c       	mov	r14, r1
    4fe2:	00 e0       	ldi	r16, 0x00	; 0
    4fe4:	23 e0       	ldi	r18, 0x03	; 3
    4fe6:	40 e0       	ldi	r20, 0x00	; 0
    4fe8:	51 ee       	ldi	r21, 0xE1	; 225
    4fea:	60 e0       	ldi	r22, 0x00	; 0
    4fec:	70 e0       	ldi	r23, 0x00	; 0
    4fee:	13 d0       	rcall	.+38     	; 0x5016 <serial_new_instance>
    4ff0:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <_com_serial_instance+0x1>
    4ff4:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <_com_serial_instance>
    4ff8:	ec ed       	ldi	r30, 0xDC	; 220
    4ffa:	fa e0       	ldi	r31, 0x0A	; 10
    4ffc:	86 e0       	ldi	r24, 0x06	; 6
    4ffe:	92 e0       	ldi	r25, 0x02	; 2
    5000:	91 83       	std	Z+1, r25	; 0x01
    5002:	80 83       	st	Z, r24
    5004:	93 83       	std	Z+3, r25	; 0x03
    5006:	82 83       	std	Z+2, r24	; 0x02
    5008:	0f 91       	pop	r16
    500a:	ef 90       	pop	r14
    500c:	cf 90       	pop	r12
    500e:	af 90       	pop	r10
    5010:	9f 90       	pop	r9
    5012:	8f 90       	pop	r8
    5014:	08 95       	ret

00005016 <serial_new_instance>:
    5016:	2f 92       	push	r2
    5018:	3f 92       	push	r3
    501a:	4f 92       	push	r4
    501c:	5f 92       	push	r5
    501e:	6f 92       	push	r6
    5020:	7f 92       	push	r7
    5022:	8f 92       	push	r8
    5024:	9f 92       	push	r9
    5026:	af 92       	push	r10
    5028:	cf 92       	push	r12
    502a:	ef 92       	push	r14
    502c:	ff 92       	push	r15
    502e:	0f 93       	push	r16
    5030:	1f 93       	push	r17
    5032:	cf 93       	push	r28
    5034:	df 93       	push	r29
    5036:	cd b7       	in	r28, 0x3d	; 61
    5038:	de b7       	in	r29, 0x3e	; 62
    503a:	f8 2e       	mov	r15, r24
    503c:	2a 01       	movw	r4, r20
    503e:	3b 01       	movw	r6, r22
    5040:	88 e0       	ldi	r24, 0x08	; 8
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	0e 94 08 37 	call	0x6e10	; 0x6e10 <malloc>
    5048:	8c 01       	movw	r16, r24
    504a:	8f 2d       	mov	r24, r15
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	88 0f       	add	r24, r24
    5050:	99 1f       	adc	r25, r25
    5052:	fc 01       	movw	r30, r24
    5054:	e6 5a       	subi	r30, 0xA6	; 166
    5056:	f6 4f       	sbci	r31, 0xF6	; 246
    5058:	11 83       	std	Z+1, r17	; 0x01
    505a:	00 83       	st	Z, r16
    505c:	fc 01       	movw	r30, r24
    505e:	ec 5e       	subi	r30, 0xEC	; 236
    5060:	fd 4f       	sbci	r31, 0xFD	; 253
    5062:	80 81       	ld	r24, Z
    5064:	91 81       	ldd	r25, Z+1	; 0x01
    5066:	d8 01       	movw	r26, r16
    5068:	8d 93       	st	X+, r24
    506a:	9c 93       	st	X, r25
    506c:	6c 2d       	mov	r22, r12
    506e:	70 e0       	ldi	r23, 0x00	; 0
    5070:	84 e0       	ldi	r24, 0x04	; 4
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <calloc>
    5078:	1c 01       	movw	r2, r24
    507a:	61 e0       	ldi	r22, 0x01	; 1
    507c:	70 e0       	ldi	r23, 0x00	; 0
    507e:	86 e0       	ldi	r24, 0x06	; 6
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <calloc>
    5086:	7c 01       	movw	r14, r24
    5088:	4c 2d       	mov	r20, r12
    508a:	b1 01       	movw	r22, r2
    508c:	4d d3       	rcall	.+1690   	; 0x5728 <fifo_init>
    508e:	f8 01       	movw	r30, r16
    5090:	f5 82       	std	Z+5, r15	; 0x05
    5092:	e4 82       	std	Z+4, r14	; 0x04
    5094:	6a 2d       	mov	r22, r10
    5096:	70 e0       	ldi	r23, 0x00	; 0
    5098:	84 e0       	ldi	r24, 0x04	; 4
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <calloc>
    50a0:	1c 01       	movw	r2, r24
    50a2:	61 e0       	ldi	r22, 0x01	; 1
    50a4:	70 e0       	ldi	r23, 0x00	; 0
    50a6:	86 e0       	ldi	r24, 0x06	; 6
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <calloc>
    50ae:	7c 01       	movw	r14, r24
    50b0:	4a 2d       	mov	r20, r10
    50b2:	b1 01       	movw	r22, r2
    50b4:	39 d3       	rcall	.+1650   	; 0x5728 <fifo_init>
    50b6:	d8 01       	movw	r26, r16
    50b8:	13 96       	adiw	r26, 0x03	; 3
    50ba:	fc 92       	st	X, r15
    50bc:	ee 92       	st	-X, r14
    50be:	12 97       	sbiw	r26, 0x02	; 2
    50c0:	17 96       	adiw	r26, 0x07	; 7
    50c2:	9c 92       	st	X, r9
    50c4:	8e 92       	st	-X, r8
    50c6:	16 97       	sbiw	r26, 0x06	; 6
    50c8:	ff b6       	in	r15, 0x3f	; 63
    50ca:	f8 94       	cli
    50cc:	ed 91       	ld	r30, X+
    50ce:	fc 91       	ld	r31, X
    50d0:	11 97       	sbiw	r26, 0x01	; 1
    50d2:	36 97       	sbiw	r30, 0x06	; 6
    50d4:	80 81       	ld	r24, Z
    50d6:	82 60       	ori	r24, 0x02	; 2
    50d8:	80 83       	st	Z, r24
    50da:	8d 90       	ld	r8, X+
    50dc:	9c 90       	ld	r9, X
    50de:	c3 01       	movw	r24, r6
    50e0:	b2 01       	movw	r22, r4
    50e2:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__floatunsisf>
    50e6:	20 e0       	ldi	r18, 0x00	; 0
    50e8:	30 e0       	ldi	r19, 0x00	; 0
    50ea:	40 e0       	ldi	r20, 0x00	; 0
    50ec:	51 e4       	ldi	r21, 0x41	; 65
    50ee:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__mulsf3>
    50f2:	9b 01       	movw	r18, r22
    50f4:	ac 01       	movw	r20, r24
    50f6:	60 e0       	ldi	r22, 0x00	; 0
    50f8:	74 e2       	ldi	r23, 0x24	; 36
    50fa:	84 e7       	ldi	r24, 0x74	; 116
    50fc:	9b e4       	ldi	r25, 0x4B	; 75
    50fe:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    5102:	20 e0       	ldi	r18, 0x00	; 0
    5104:	30 e0       	ldi	r19, 0x00	; 0
    5106:	40 e8       	ldi	r20, 0x80	; 128
    5108:	5f e3       	ldi	r21, 0x3F	; 63
    510a:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <__subsf3>
    510e:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <__fixunssfsi>
    5112:	f4 01       	movw	r30, r8
    5114:	32 97       	sbiw	r30, 0x02	; 2
    5116:	60 83       	st	Z, r22
    5118:	d8 01       	movw	r26, r16
    511a:	ed 91       	ld	r30, X+
    511c:	fc 91       	ld	r31, X
    511e:	11 97       	sbiw	r26, 0x01	; 1
    5120:	35 97       	sbiw	r30, 0x05	; 5
    5122:	88 e9       	ldi	r24, 0x98	; 152
    5124:	80 83       	st	Z, r24
    5126:	ed 91       	ld	r30, X+
    5128:	fc 91       	ld	r31, X
    512a:	34 97       	sbiw	r30, 0x04	; 4
    512c:	86 e0       	ldi	r24, 0x06	; 6
    512e:	80 83       	st	Z, r24
    5130:	ff be       	out	0x3f, r15	; 63
    5132:	c8 01       	movw	r24, r16
    5134:	df 91       	pop	r29
    5136:	cf 91       	pop	r28
    5138:	1f 91       	pop	r17
    513a:	0f 91       	pop	r16
    513c:	ff 90       	pop	r15
    513e:	ef 90       	pop	r14
    5140:	cf 90       	pop	r12
    5142:	af 90       	pop	r10
    5144:	9f 90       	pop	r9
    5146:	8f 90       	pop	r8
    5148:	7f 90       	pop	r7
    514a:	6f 90       	pop	r6
    514c:	5f 90       	pop	r5
    514e:	4f 90       	pop	r4
    5150:	3f 90       	pop	r3
    5152:	2f 90       	pop	r2
    5154:	08 95       	ret

00005156 <serial_send_byte>:
    5156:	cf 93       	push	r28
    5158:	df 93       	push	r29
    515a:	ec 01       	movw	r28, r24
    515c:	ea 81       	ldd	r30, Y+2	; 0x02
    515e:	fb 81       	ldd	r31, Y+3	; 0x03
    5160:	93 81       	ldd	r25, Z+3	; 0x03
    5162:	82 81       	ldd	r24, Z+2	; 0x02
    5164:	25 81       	ldd	r18, Z+5	; 0x05
    5166:	98 1b       	sub	r25, r24
    5168:	92 23       	and	r25, r18
    516a:	84 81       	ldd	r24, Z+4	; 0x04
    516c:	98 17       	cp	r25, r24
    516e:	a1 f0       	breq	.+40     	; 0x5198 <serial_send_byte+0x42>
    5170:	93 81       	ldd	r25, Z+3	; 0x03
    5172:	26 95       	lsr	r18
    5174:	29 23       	and	r18, r25
    5176:	a0 81       	ld	r26, Z
    5178:	b1 81       	ldd	r27, Z+1	; 0x01
    517a:	a2 0f       	add	r26, r18
    517c:	b1 1d       	adc	r27, r1
    517e:	6c 93       	st	X, r22
    5180:	9f 5f       	subi	r25, 0xFF	; 255
    5182:	25 81       	ldd	r18, Z+5	; 0x05
    5184:	92 23       	and	r25, r18
    5186:	93 83       	std	Z+3, r25	; 0x03
    5188:	e8 81       	ld	r30, Y
    518a:	f9 81       	ldd	r31, Y+1	; 0x01
    518c:	35 97       	sbiw	r30, 0x05	; 5
    518e:	80 81       	ld	r24, Z
    5190:	80 62       	ori	r24, 0x20	; 32
    5192:	80 83       	st	Z, r24
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	01 c0       	rjmp	.+2      	; 0x519a <serial_send_byte+0x44>
    5198:	82 e0       	ldi	r24, 0x02	; 2
    519a:	df 91       	pop	r29
    519c:	cf 91       	pop	r28
    519e:	08 95       	ret

000051a0 <serial_send_bytes>:
    51a0:	ef 92       	push	r14
    51a2:	ff 92       	push	r15
    51a4:	0f 93       	push	r16
    51a6:	1f 93       	push	r17
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	7c 01       	movw	r14, r24
    51ae:	dc 01       	movw	r26, r24
    51b0:	12 96       	adiw	r26, 0x02	; 2
    51b2:	ed 91       	ld	r30, X+
    51b4:	fc 91       	ld	r31, X
    51b6:	13 97       	sbiw	r26, 0x03	; 3
    51b8:	93 81       	ldd	r25, Z+3	; 0x03
    51ba:	82 81       	ldd	r24, Z+2	; 0x02
    51bc:	98 1b       	sub	r25, r24
    51be:	85 81       	ldd	r24, Z+5	; 0x05
    51c0:	98 23       	and	r25, r24
    51c2:	84 81       	ldd	r24, Z+4	; 0x04
    51c4:	89 1b       	sub	r24, r25
    51c6:	86 17       	cp	r24, r22
    51c8:	98 f1       	brcs	.+102    	; 0x5230 <serial_send_bytes+0x90>
    51ca:	66 23       	and	r22, r22
    51cc:	41 f1       	breq	.+80     	; 0x521e <serial_send_bytes+0x7e>
    51ce:	84 2f       	mov	r24, r20
    51d0:	95 2f       	mov	r25, r21
    51d2:	dc 01       	movw	r26, r24
    51d4:	61 50       	subi	r22, 0x01	; 1
    51d6:	46 2f       	mov	r20, r22
    51d8:	50 e0       	ldi	r21, 0x00	; 0
    51da:	4f 5f       	subi	r20, 0xFF	; 255
    51dc:	5f 4f       	sbci	r21, 0xFF	; 255
    51de:	48 0f       	add	r20, r24
    51e0:	59 1f       	adc	r21, r25
    51e2:	e7 01       	movw	r28, r14
    51e4:	ea 81       	ldd	r30, Y+2	; 0x02
    51e6:	fb 81       	ldd	r31, Y+3	; 0x03
    51e8:	93 81       	ldd	r25, Z+3	; 0x03
    51ea:	82 81       	ldd	r24, Z+2	; 0x02
    51ec:	25 81       	ldd	r18, Z+5	; 0x05
    51ee:	98 1b       	sub	r25, r24
    51f0:	92 23       	and	r25, r18
    51f2:	84 81       	ldd	r24, Z+4	; 0x04
    51f4:	98 17       	cp	r25, r24
    51f6:	79 f0       	breq	.+30     	; 0x5216 <serial_send_bytes+0x76>
    51f8:	8c 91       	ld	r24, X
    51fa:	93 81       	ldd	r25, Z+3	; 0x03
    51fc:	26 95       	lsr	r18
    51fe:	29 23       	and	r18, r25
    5200:	60 81       	ld	r22, Z
    5202:	71 81       	ldd	r23, Z+1	; 0x01
    5204:	8b 01       	movw	r16, r22
    5206:	02 0f       	add	r16, r18
    5208:	11 1d       	adc	r17, r1
    520a:	e8 01       	movw	r28, r16
    520c:	88 83       	st	Y, r24
    520e:	9f 5f       	subi	r25, 0xFF	; 255
    5210:	85 81       	ldd	r24, Z+5	; 0x05
    5212:	98 23       	and	r25, r24
    5214:	93 83       	std	Z+3, r25	; 0x03
    5216:	11 96       	adiw	r26, 0x01	; 1
    5218:	a4 17       	cp	r26, r20
    521a:	b5 07       	cpc	r27, r21
    521c:	11 f7       	brne	.-60     	; 0x51e2 <serial_send_bytes+0x42>
    521e:	d7 01       	movw	r26, r14
    5220:	ed 91       	ld	r30, X+
    5222:	fc 91       	ld	r31, X
    5224:	35 97       	sbiw	r30, 0x05	; 5
    5226:	80 81       	ld	r24, Z
    5228:	80 62       	ori	r24, 0x20	; 32
    522a:	80 83       	st	Z, r24
    522c:	80 e0       	ldi	r24, 0x00	; 0
    522e:	01 c0       	rjmp	.+2      	; 0x5232 <serial_send_bytes+0x92>
    5230:	82 e0       	ldi	r24, 0x02	; 2
    5232:	df 91       	pop	r29
    5234:	cf 91       	pop	r28
    5236:	1f 91       	pop	r17
    5238:	0f 91       	pop	r16
    523a:	ff 90       	pop	r15
    523c:	ef 90       	pop	r14
    523e:	08 95       	ret

00005240 <serial_get_byte>:
    5240:	dc 01       	movw	r26, r24
    5242:	14 96       	adiw	r26, 0x04	; 4
    5244:	ed 91       	ld	r30, X+
    5246:	fc 91       	ld	r31, X
    5248:	15 97       	sbiw	r26, 0x05	; 5
    524a:	93 81       	ldd	r25, Z+3	; 0x03
    524c:	82 81       	ldd	r24, Z+2	; 0x02
    524e:	98 17       	cp	r25, r24
    5250:	89 f0       	breq	.+34     	; 0x5274 <serial_get_byte+0x34>
    5252:	92 81       	ldd	r25, Z+2	; 0x02
    5254:	85 81       	ldd	r24, Z+5	; 0x05
    5256:	86 95       	lsr	r24
    5258:	89 23       	and	r24, r25
    525a:	a0 81       	ld	r26, Z
    525c:	b1 81       	ldd	r27, Z+1	; 0x01
    525e:	a8 0f       	add	r26, r24
    5260:	b1 1d       	adc	r27, r1
    5262:	8c 91       	ld	r24, X
    5264:	db 01       	movw	r26, r22
    5266:	8c 93       	st	X, r24
    5268:	9f 5f       	subi	r25, 0xFF	; 255
    526a:	85 81       	ldd	r24, Z+5	; 0x05
    526c:	98 23       	and	r25, r24
    526e:	92 83       	std	Z+2, r25	; 0x02
    5270:	80 e0       	ldi	r24, 0x00	; 0
    5272:	08 95       	ret
    5274:	83 e0       	ldi	r24, 0x03	; 3
    5276:	08 95       	ret

00005278 <__vector_25>:
    5278:	1f 92       	push	r1
    527a:	0f 92       	push	r0
    527c:	0f b6       	in	r0, 0x3f	; 63
    527e:	0f 92       	push	r0
    5280:	11 24       	eor	r1, r1
    5282:	0b b6       	in	r0, 0x3b	; 59
    5284:	0f 92       	push	r0
    5286:	2f 93       	push	r18
    5288:	3f 93       	push	r19
    528a:	4f 93       	push	r20
    528c:	5f 93       	push	r21
    528e:	6f 93       	push	r22
    5290:	7f 93       	push	r23
    5292:	8f 93       	push	r24
    5294:	9f 93       	push	r25
    5296:	af 93       	push	r26
    5298:	bf 93       	push	r27
    529a:	cf 93       	push	r28
    529c:	df 93       	push	r29
    529e:	ef 93       	push	r30
    52a0:	ff 93       	push	r31
    52a2:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <_ser_handle>
    52a6:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <_ser_handle+0x1>
    52aa:	10 97       	sbiw	r26, 0x00	; 0
    52ac:	11 f1       	breq	.+68     	; 0x52f2 <__vector_25+0x7a>
    52ae:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    52b2:	14 96       	adiw	r26, 0x04	; 4
    52b4:	ed 91       	ld	r30, X+
    52b6:	fc 91       	ld	r31, X
    52b8:	15 97       	sbiw	r26, 0x05	; 5
    52ba:	93 81       	ldd	r25, Z+3	; 0x03
    52bc:	82 81       	ldd	r24, Z+2	; 0x02
    52be:	25 81       	ldd	r18, Z+5	; 0x05
    52c0:	98 1b       	sub	r25, r24
    52c2:	92 23       	and	r25, r18
    52c4:	84 81       	ldd	r24, Z+4	; 0x04
    52c6:	98 17       	cp	r25, r24
    52c8:	61 f0       	breq	.+24     	; 0x52e2 <__vector_25+0x6a>
    52ca:	83 81       	ldd	r24, Z+3	; 0x03
    52cc:	26 95       	lsr	r18
    52ce:	28 23       	and	r18, r24
    52d0:	c0 81       	ld	r28, Z
    52d2:	d1 81       	ldd	r29, Z+1	; 0x01
    52d4:	c2 0f       	add	r28, r18
    52d6:	d1 1d       	adc	r29, r1
    52d8:	68 83       	st	Y, r22
    52da:	8f 5f       	subi	r24, 0xFF	; 255
    52dc:	95 81       	ldd	r25, Z+5	; 0x05
    52de:	89 23       	and	r24, r25
    52e0:	83 83       	std	Z+3, r24	; 0x03
    52e2:	16 96       	adiw	r26, 0x06	; 6
    52e4:	ed 91       	ld	r30, X+
    52e6:	fc 91       	ld	r31, X
    52e8:	17 97       	sbiw	r26, 0x07	; 7
    52ea:	30 97       	sbiw	r30, 0x00	; 0
    52ec:	11 f0       	breq	.+4      	; 0x52f2 <__vector_25+0x7a>
    52ee:	cd 01       	movw	r24, r26
    52f0:	19 95       	eicall
    52f2:	ff 91       	pop	r31
    52f4:	ef 91       	pop	r30
    52f6:	df 91       	pop	r29
    52f8:	cf 91       	pop	r28
    52fa:	bf 91       	pop	r27
    52fc:	af 91       	pop	r26
    52fe:	9f 91       	pop	r25
    5300:	8f 91       	pop	r24
    5302:	7f 91       	pop	r23
    5304:	6f 91       	pop	r22
    5306:	5f 91       	pop	r21
    5308:	4f 91       	pop	r20
    530a:	3f 91       	pop	r19
    530c:	2f 91       	pop	r18
    530e:	0f 90       	pop	r0
    5310:	0b be       	out	0x3b, r0	; 59
    5312:	0f 90       	pop	r0
    5314:	0f be       	out	0x3f, r0	; 63
    5316:	0f 90       	pop	r0
    5318:	1f 90       	pop	r1
    531a:	18 95       	reti

0000531c <__vector_26>:
    531c:	1f 92       	push	r1
    531e:	0f 92       	push	r0
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	0f 92       	push	r0
    5324:	11 24       	eor	r1, r1
    5326:	0b b6       	in	r0, 0x3b	; 59
    5328:	0f 92       	push	r0
    532a:	2f 93       	push	r18
    532c:	8f 93       	push	r24
    532e:	9f 93       	push	r25
    5330:	af 93       	push	r26
    5332:	bf 93       	push	r27
    5334:	ef 93       	push	r30
    5336:	ff 93       	push	r31
    5338:	e0 91 5a 09 	lds	r30, 0x095A	; 0x80095a <_ser_handle>
    533c:	f0 91 5b 09 	lds	r31, 0x095B	; 0x80095b <_ser_handle+0x1>
    5340:	30 97       	sbiw	r30, 0x00	; 0
    5342:	b9 f0       	breq	.+46     	; 0x5372 <__vector_26+0x56>
    5344:	02 80       	ldd	r0, Z+2	; 0x02
    5346:	f3 81       	ldd	r31, Z+3	; 0x03
    5348:	e0 2d       	mov	r30, r0
    534a:	93 81       	ldd	r25, Z+3	; 0x03
    534c:	82 81       	ldd	r24, Z+2	; 0x02
    534e:	98 17       	cp	r25, r24
    5350:	b1 f0       	breq	.+44     	; 0x537e <__vector_26+0x62>
    5352:	92 81       	ldd	r25, Z+2	; 0x02
    5354:	85 81       	ldd	r24, Z+5	; 0x05
    5356:	28 2f       	mov	r18, r24
    5358:	26 95       	lsr	r18
    535a:	29 23       	and	r18, r25
    535c:	a0 81       	ld	r26, Z
    535e:	b1 81       	ldd	r27, Z+1	; 0x01
    5360:	a2 0f       	add	r26, r18
    5362:	b1 1d       	adc	r27, r1
    5364:	2c 91       	ld	r18, X
    5366:	9f 5f       	subi	r25, 0xFF	; 255
    5368:	89 23       	and	r24, r25
    536a:	82 83       	std	Z+2, r24	; 0x02
    536c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5370:	0b c0       	rjmp	.+22     	; 0x5388 <__vector_26+0x6c>
    5372:	e1 ec       	ldi	r30, 0xC1	; 193
    5374:	f0 e0       	ldi	r31, 0x00	; 0
    5376:	80 81       	ld	r24, Z
    5378:	8f 7d       	andi	r24, 0xDF	; 223
    537a:	80 83       	st	Z, r24
    537c:	05 c0       	rjmp	.+10     	; 0x5388 <__vector_26+0x6c>
    537e:	e1 ec       	ldi	r30, 0xC1	; 193
    5380:	f0 e0       	ldi	r31, 0x00	; 0
    5382:	80 81       	ld	r24, Z
    5384:	8f 7d       	andi	r24, 0xDF	; 223
    5386:	80 83       	st	Z, r24
    5388:	ff 91       	pop	r31
    538a:	ef 91       	pop	r30
    538c:	bf 91       	pop	r27
    538e:	af 91       	pop	r26
    5390:	9f 91       	pop	r25
    5392:	8f 91       	pop	r24
    5394:	2f 91       	pop	r18
    5396:	0f 90       	pop	r0
    5398:	0b be       	out	0x3b, r0	; 59
    539a:	0f 90       	pop	r0
    539c:	0f be       	out	0x3f, r0	; 63
    539e:	0f 90       	pop	r0
    53a0:	1f 90       	pop	r1
    53a2:	18 95       	reti

000053a4 <__vector_36>:
    53a4:	1f 92       	push	r1
    53a6:	0f 92       	push	r0
    53a8:	0f b6       	in	r0, 0x3f	; 63
    53aa:	0f 92       	push	r0
    53ac:	11 24       	eor	r1, r1
    53ae:	0b b6       	in	r0, 0x3b	; 59
    53b0:	0f 92       	push	r0
    53b2:	2f 93       	push	r18
    53b4:	3f 93       	push	r19
    53b6:	4f 93       	push	r20
    53b8:	5f 93       	push	r21
    53ba:	6f 93       	push	r22
    53bc:	7f 93       	push	r23
    53be:	8f 93       	push	r24
    53c0:	9f 93       	push	r25
    53c2:	af 93       	push	r26
    53c4:	bf 93       	push	r27
    53c6:	cf 93       	push	r28
    53c8:	df 93       	push	r29
    53ca:	ef 93       	push	r30
    53cc:	ff 93       	push	r31
    53ce:	a0 91 5c 09 	lds	r26, 0x095C	; 0x80095c <_ser_handle+0x2>
    53d2:	b0 91 5d 09 	lds	r27, 0x095D	; 0x80095d <_ser_handle+0x3>
    53d6:	10 97       	sbiw	r26, 0x00	; 0
    53d8:	11 f1       	breq	.+68     	; 0x541e <__vector_36+0x7a>
    53da:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    53de:	14 96       	adiw	r26, 0x04	; 4
    53e0:	ed 91       	ld	r30, X+
    53e2:	fc 91       	ld	r31, X
    53e4:	15 97       	sbiw	r26, 0x05	; 5
    53e6:	93 81       	ldd	r25, Z+3	; 0x03
    53e8:	82 81       	ldd	r24, Z+2	; 0x02
    53ea:	25 81       	ldd	r18, Z+5	; 0x05
    53ec:	98 1b       	sub	r25, r24
    53ee:	92 23       	and	r25, r18
    53f0:	84 81       	ldd	r24, Z+4	; 0x04
    53f2:	98 17       	cp	r25, r24
    53f4:	61 f0       	breq	.+24     	; 0x540e <__vector_36+0x6a>
    53f6:	83 81       	ldd	r24, Z+3	; 0x03
    53f8:	26 95       	lsr	r18
    53fa:	28 23       	and	r18, r24
    53fc:	c0 81       	ld	r28, Z
    53fe:	d1 81       	ldd	r29, Z+1	; 0x01
    5400:	c2 0f       	add	r28, r18
    5402:	d1 1d       	adc	r29, r1
    5404:	68 83       	st	Y, r22
    5406:	8f 5f       	subi	r24, 0xFF	; 255
    5408:	95 81       	ldd	r25, Z+5	; 0x05
    540a:	89 23       	and	r24, r25
    540c:	83 83       	std	Z+3, r24	; 0x03
    540e:	16 96       	adiw	r26, 0x06	; 6
    5410:	ed 91       	ld	r30, X+
    5412:	fc 91       	ld	r31, X
    5414:	17 97       	sbiw	r26, 0x07	; 7
    5416:	30 97       	sbiw	r30, 0x00	; 0
    5418:	11 f0       	breq	.+4      	; 0x541e <__vector_36+0x7a>
    541a:	cd 01       	movw	r24, r26
    541c:	19 95       	eicall
    541e:	ff 91       	pop	r31
    5420:	ef 91       	pop	r30
    5422:	df 91       	pop	r29
    5424:	cf 91       	pop	r28
    5426:	bf 91       	pop	r27
    5428:	af 91       	pop	r26
    542a:	9f 91       	pop	r25
    542c:	8f 91       	pop	r24
    542e:	7f 91       	pop	r23
    5430:	6f 91       	pop	r22
    5432:	5f 91       	pop	r21
    5434:	4f 91       	pop	r20
    5436:	3f 91       	pop	r19
    5438:	2f 91       	pop	r18
    543a:	0f 90       	pop	r0
    543c:	0b be       	out	0x3b, r0	; 59
    543e:	0f 90       	pop	r0
    5440:	0f be       	out	0x3f, r0	; 63
    5442:	0f 90       	pop	r0
    5444:	1f 90       	pop	r1
    5446:	18 95       	reti

00005448 <__vector_37>:
    5448:	1f 92       	push	r1
    544a:	0f 92       	push	r0
    544c:	0f b6       	in	r0, 0x3f	; 63
    544e:	0f 92       	push	r0
    5450:	11 24       	eor	r1, r1
    5452:	0b b6       	in	r0, 0x3b	; 59
    5454:	0f 92       	push	r0
    5456:	2f 93       	push	r18
    5458:	8f 93       	push	r24
    545a:	9f 93       	push	r25
    545c:	af 93       	push	r26
    545e:	bf 93       	push	r27
    5460:	ef 93       	push	r30
    5462:	ff 93       	push	r31
    5464:	e0 91 5c 09 	lds	r30, 0x095C	; 0x80095c <_ser_handle+0x2>
    5468:	f0 91 5d 09 	lds	r31, 0x095D	; 0x80095d <_ser_handle+0x3>
    546c:	30 97       	sbiw	r30, 0x00	; 0
    546e:	b9 f0       	breq	.+46     	; 0x549e <__vector_37+0x56>
    5470:	02 80       	ldd	r0, Z+2	; 0x02
    5472:	f3 81       	ldd	r31, Z+3	; 0x03
    5474:	e0 2d       	mov	r30, r0
    5476:	93 81       	ldd	r25, Z+3	; 0x03
    5478:	82 81       	ldd	r24, Z+2	; 0x02
    547a:	98 17       	cp	r25, r24
    547c:	b1 f0       	breq	.+44     	; 0x54aa <__vector_37+0x62>
    547e:	92 81       	ldd	r25, Z+2	; 0x02
    5480:	85 81       	ldd	r24, Z+5	; 0x05
    5482:	28 2f       	mov	r18, r24
    5484:	26 95       	lsr	r18
    5486:	29 23       	and	r18, r25
    5488:	a0 81       	ld	r26, Z
    548a:	b1 81       	ldd	r27, Z+1	; 0x01
    548c:	a2 0f       	add	r26, r18
    548e:	b1 1d       	adc	r27, r1
    5490:	2c 91       	ld	r18, X
    5492:	9f 5f       	subi	r25, 0xFF	; 255
    5494:	89 23       	and	r24, r25
    5496:	82 83       	std	Z+2, r24	; 0x02
    5498:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    549c:	0b c0       	rjmp	.+22     	; 0x54b4 <__vector_37+0x6c>
    549e:	e9 ec       	ldi	r30, 0xC9	; 201
    54a0:	f0 e0       	ldi	r31, 0x00	; 0
    54a2:	80 81       	ld	r24, Z
    54a4:	8f 7d       	andi	r24, 0xDF	; 223
    54a6:	80 83       	st	Z, r24
    54a8:	05 c0       	rjmp	.+10     	; 0x54b4 <__vector_37+0x6c>
    54aa:	e9 ec       	ldi	r30, 0xC9	; 201
    54ac:	f0 e0       	ldi	r31, 0x00	; 0
    54ae:	80 81       	ld	r24, Z
    54b0:	8f 7d       	andi	r24, 0xDF	; 223
    54b2:	80 83       	st	Z, r24
    54b4:	ff 91       	pop	r31
    54b6:	ef 91       	pop	r30
    54b8:	bf 91       	pop	r27
    54ba:	af 91       	pop	r26
    54bc:	9f 91       	pop	r25
    54be:	8f 91       	pop	r24
    54c0:	2f 91       	pop	r18
    54c2:	0f 90       	pop	r0
    54c4:	0b be       	out	0x3b, r0	; 59
    54c6:	0f 90       	pop	r0
    54c8:	0f be       	out	0x3f, r0	; 63
    54ca:	0f 90       	pop	r0
    54cc:	1f 90       	pop	r1
    54ce:	18 95       	reti

000054d0 <__vector_51>:
    54d0:	1f 92       	push	r1
    54d2:	0f 92       	push	r0
    54d4:	0f b6       	in	r0, 0x3f	; 63
    54d6:	0f 92       	push	r0
    54d8:	11 24       	eor	r1, r1
    54da:	0b b6       	in	r0, 0x3b	; 59
    54dc:	0f 92       	push	r0
    54de:	2f 93       	push	r18
    54e0:	3f 93       	push	r19
    54e2:	4f 93       	push	r20
    54e4:	5f 93       	push	r21
    54e6:	6f 93       	push	r22
    54e8:	7f 93       	push	r23
    54ea:	8f 93       	push	r24
    54ec:	9f 93       	push	r25
    54ee:	af 93       	push	r26
    54f0:	bf 93       	push	r27
    54f2:	cf 93       	push	r28
    54f4:	df 93       	push	r29
    54f6:	ef 93       	push	r30
    54f8:	ff 93       	push	r31
    54fa:	a0 91 5e 09 	lds	r26, 0x095E	; 0x80095e <_ser_handle+0x4>
    54fe:	b0 91 5f 09 	lds	r27, 0x095F	; 0x80095f <_ser_handle+0x5>
    5502:	10 97       	sbiw	r26, 0x00	; 0
    5504:	11 f1       	breq	.+68     	; 0x554a <__vector_51+0x7a>
    5506:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    550a:	14 96       	adiw	r26, 0x04	; 4
    550c:	ed 91       	ld	r30, X+
    550e:	fc 91       	ld	r31, X
    5510:	15 97       	sbiw	r26, 0x05	; 5
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	82 81       	ldd	r24, Z+2	; 0x02
    5516:	25 81       	ldd	r18, Z+5	; 0x05
    5518:	98 1b       	sub	r25, r24
    551a:	92 23       	and	r25, r18
    551c:	84 81       	ldd	r24, Z+4	; 0x04
    551e:	98 17       	cp	r25, r24
    5520:	61 f0       	breq	.+24     	; 0x553a <__vector_51+0x6a>
    5522:	83 81       	ldd	r24, Z+3	; 0x03
    5524:	26 95       	lsr	r18
    5526:	28 23       	and	r18, r24
    5528:	c0 81       	ld	r28, Z
    552a:	d1 81       	ldd	r29, Z+1	; 0x01
    552c:	c2 0f       	add	r28, r18
    552e:	d1 1d       	adc	r29, r1
    5530:	68 83       	st	Y, r22
    5532:	8f 5f       	subi	r24, 0xFF	; 255
    5534:	95 81       	ldd	r25, Z+5	; 0x05
    5536:	89 23       	and	r24, r25
    5538:	83 83       	std	Z+3, r24	; 0x03
    553a:	16 96       	adiw	r26, 0x06	; 6
    553c:	ed 91       	ld	r30, X+
    553e:	fc 91       	ld	r31, X
    5540:	17 97       	sbiw	r26, 0x07	; 7
    5542:	30 97       	sbiw	r30, 0x00	; 0
    5544:	11 f0       	breq	.+4      	; 0x554a <__vector_51+0x7a>
    5546:	cd 01       	movw	r24, r26
    5548:	19 95       	eicall
    554a:	ff 91       	pop	r31
    554c:	ef 91       	pop	r30
    554e:	df 91       	pop	r29
    5550:	cf 91       	pop	r28
    5552:	bf 91       	pop	r27
    5554:	af 91       	pop	r26
    5556:	9f 91       	pop	r25
    5558:	8f 91       	pop	r24
    555a:	7f 91       	pop	r23
    555c:	6f 91       	pop	r22
    555e:	5f 91       	pop	r21
    5560:	4f 91       	pop	r20
    5562:	3f 91       	pop	r19
    5564:	2f 91       	pop	r18
    5566:	0f 90       	pop	r0
    5568:	0b be       	out	0x3b, r0	; 59
    556a:	0f 90       	pop	r0
    556c:	0f be       	out	0x3f, r0	; 63
    556e:	0f 90       	pop	r0
    5570:	1f 90       	pop	r1
    5572:	18 95       	reti

00005574 <__vector_52>:
    5574:	1f 92       	push	r1
    5576:	0f 92       	push	r0
    5578:	0f b6       	in	r0, 0x3f	; 63
    557a:	0f 92       	push	r0
    557c:	11 24       	eor	r1, r1
    557e:	0b b6       	in	r0, 0x3b	; 59
    5580:	0f 92       	push	r0
    5582:	2f 93       	push	r18
    5584:	8f 93       	push	r24
    5586:	9f 93       	push	r25
    5588:	af 93       	push	r26
    558a:	bf 93       	push	r27
    558c:	ef 93       	push	r30
    558e:	ff 93       	push	r31
    5590:	e0 91 5e 09 	lds	r30, 0x095E	; 0x80095e <_ser_handle+0x4>
    5594:	f0 91 5f 09 	lds	r31, 0x095F	; 0x80095f <_ser_handle+0x5>
    5598:	30 97       	sbiw	r30, 0x00	; 0
    559a:	b9 f0       	breq	.+46     	; 0x55ca <__vector_52+0x56>
    559c:	02 80       	ldd	r0, Z+2	; 0x02
    559e:	f3 81       	ldd	r31, Z+3	; 0x03
    55a0:	e0 2d       	mov	r30, r0
    55a2:	93 81       	ldd	r25, Z+3	; 0x03
    55a4:	82 81       	ldd	r24, Z+2	; 0x02
    55a6:	98 17       	cp	r25, r24
    55a8:	b1 f0       	breq	.+44     	; 0x55d6 <__vector_52+0x62>
    55aa:	92 81       	ldd	r25, Z+2	; 0x02
    55ac:	85 81       	ldd	r24, Z+5	; 0x05
    55ae:	28 2f       	mov	r18, r24
    55b0:	26 95       	lsr	r18
    55b2:	29 23       	and	r18, r25
    55b4:	a0 81       	ld	r26, Z
    55b6:	b1 81       	ldd	r27, Z+1	; 0x01
    55b8:	a2 0f       	add	r26, r18
    55ba:	b1 1d       	adc	r27, r1
    55bc:	2c 91       	ld	r18, X
    55be:	9f 5f       	subi	r25, 0xFF	; 255
    55c0:	89 23       	and	r24, r25
    55c2:	82 83       	std	Z+2, r24	; 0x02
    55c4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    55c8:	0b c0       	rjmp	.+22     	; 0x55e0 <__vector_52+0x6c>
    55ca:	e1 ed       	ldi	r30, 0xD1	; 209
    55cc:	f0 e0       	ldi	r31, 0x00	; 0
    55ce:	80 81       	ld	r24, Z
    55d0:	8f 7d       	andi	r24, 0xDF	; 223
    55d2:	80 83       	st	Z, r24
    55d4:	05 c0       	rjmp	.+10     	; 0x55e0 <__vector_52+0x6c>
    55d6:	e1 ed       	ldi	r30, 0xD1	; 209
    55d8:	f0 e0       	ldi	r31, 0x00	; 0
    55da:	80 81       	ld	r24, Z
    55dc:	8f 7d       	andi	r24, 0xDF	; 223
    55de:	80 83       	st	Z, r24
    55e0:	ff 91       	pop	r31
    55e2:	ef 91       	pop	r30
    55e4:	bf 91       	pop	r27
    55e6:	af 91       	pop	r26
    55e8:	9f 91       	pop	r25
    55ea:	8f 91       	pop	r24
    55ec:	2f 91       	pop	r18
    55ee:	0f 90       	pop	r0
    55f0:	0b be       	out	0x3b, r0	; 59
    55f2:	0f 90       	pop	r0
    55f4:	0f be       	out	0x3f, r0	; 63
    55f6:	0f 90       	pop	r0
    55f8:	1f 90       	pop	r1
    55fa:	18 95       	reti

000055fc <__vector_54>:
    55fc:	1f 92       	push	r1
    55fe:	0f 92       	push	r0
    5600:	0f b6       	in	r0, 0x3f	; 63
    5602:	0f 92       	push	r0
    5604:	11 24       	eor	r1, r1
    5606:	0b b6       	in	r0, 0x3b	; 59
    5608:	0f 92       	push	r0
    560a:	2f 93       	push	r18
    560c:	3f 93       	push	r19
    560e:	4f 93       	push	r20
    5610:	5f 93       	push	r21
    5612:	6f 93       	push	r22
    5614:	7f 93       	push	r23
    5616:	8f 93       	push	r24
    5618:	9f 93       	push	r25
    561a:	af 93       	push	r26
    561c:	bf 93       	push	r27
    561e:	cf 93       	push	r28
    5620:	df 93       	push	r29
    5622:	ef 93       	push	r30
    5624:	ff 93       	push	r31
    5626:	a0 91 60 09 	lds	r26, 0x0960	; 0x800960 <_ser_handle+0x6>
    562a:	b0 91 61 09 	lds	r27, 0x0961	; 0x800961 <_ser_handle+0x7>
    562e:	10 97       	sbiw	r26, 0x00	; 0
    5630:	11 f1       	breq	.+68     	; 0x5676 <__vector_54+0x7a>
    5632:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5636:	14 96       	adiw	r26, 0x04	; 4
    5638:	ed 91       	ld	r30, X+
    563a:	fc 91       	ld	r31, X
    563c:	15 97       	sbiw	r26, 0x05	; 5
    563e:	93 81       	ldd	r25, Z+3	; 0x03
    5640:	82 81       	ldd	r24, Z+2	; 0x02
    5642:	25 81       	ldd	r18, Z+5	; 0x05
    5644:	98 1b       	sub	r25, r24
    5646:	92 23       	and	r25, r18
    5648:	84 81       	ldd	r24, Z+4	; 0x04
    564a:	98 17       	cp	r25, r24
    564c:	61 f0       	breq	.+24     	; 0x5666 <__vector_54+0x6a>
    564e:	83 81       	ldd	r24, Z+3	; 0x03
    5650:	26 95       	lsr	r18
    5652:	28 23       	and	r18, r24
    5654:	c0 81       	ld	r28, Z
    5656:	d1 81       	ldd	r29, Z+1	; 0x01
    5658:	c2 0f       	add	r28, r18
    565a:	d1 1d       	adc	r29, r1
    565c:	68 83       	st	Y, r22
    565e:	8f 5f       	subi	r24, 0xFF	; 255
    5660:	95 81       	ldd	r25, Z+5	; 0x05
    5662:	89 23       	and	r24, r25
    5664:	83 83       	std	Z+3, r24	; 0x03
    5666:	16 96       	adiw	r26, 0x06	; 6
    5668:	ed 91       	ld	r30, X+
    566a:	fc 91       	ld	r31, X
    566c:	17 97       	sbiw	r26, 0x07	; 7
    566e:	30 97       	sbiw	r30, 0x00	; 0
    5670:	11 f0       	breq	.+4      	; 0x5676 <__vector_54+0x7a>
    5672:	cd 01       	movw	r24, r26
    5674:	19 95       	eicall
    5676:	ff 91       	pop	r31
    5678:	ef 91       	pop	r30
    567a:	df 91       	pop	r29
    567c:	cf 91       	pop	r28
    567e:	bf 91       	pop	r27
    5680:	af 91       	pop	r26
    5682:	9f 91       	pop	r25
    5684:	8f 91       	pop	r24
    5686:	7f 91       	pop	r23
    5688:	6f 91       	pop	r22
    568a:	5f 91       	pop	r21
    568c:	4f 91       	pop	r20
    568e:	3f 91       	pop	r19
    5690:	2f 91       	pop	r18
    5692:	0f 90       	pop	r0
    5694:	0b be       	out	0x3b, r0	; 59
    5696:	0f 90       	pop	r0
    5698:	0f be       	out	0x3f, r0	; 63
    569a:	0f 90       	pop	r0
    569c:	1f 90       	pop	r1
    569e:	18 95       	reti

000056a0 <__vector_55>:
    56a0:	1f 92       	push	r1
    56a2:	0f 92       	push	r0
    56a4:	0f b6       	in	r0, 0x3f	; 63
    56a6:	0f 92       	push	r0
    56a8:	11 24       	eor	r1, r1
    56aa:	0b b6       	in	r0, 0x3b	; 59
    56ac:	0f 92       	push	r0
    56ae:	2f 93       	push	r18
    56b0:	8f 93       	push	r24
    56b2:	9f 93       	push	r25
    56b4:	af 93       	push	r26
    56b6:	bf 93       	push	r27
    56b8:	ef 93       	push	r30
    56ba:	ff 93       	push	r31
    56bc:	e0 91 60 09 	lds	r30, 0x0960	; 0x800960 <_ser_handle+0x6>
    56c0:	f0 91 61 09 	lds	r31, 0x0961	; 0x800961 <_ser_handle+0x7>
    56c4:	30 97       	sbiw	r30, 0x00	; 0
    56c6:	b9 f0       	breq	.+46     	; 0x56f6 <__vector_55+0x56>
    56c8:	02 80       	ldd	r0, Z+2	; 0x02
    56ca:	f3 81       	ldd	r31, Z+3	; 0x03
    56cc:	e0 2d       	mov	r30, r0
    56ce:	93 81       	ldd	r25, Z+3	; 0x03
    56d0:	82 81       	ldd	r24, Z+2	; 0x02
    56d2:	98 17       	cp	r25, r24
    56d4:	b1 f0       	breq	.+44     	; 0x5702 <__vector_55+0x62>
    56d6:	92 81       	ldd	r25, Z+2	; 0x02
    56d8:	85 81       	ldd	r24, Z+5	; 0x05
    56da:	28 2f       	mov	r18, r24
    56dc:	26 95       	lsr	r18
    56de:	29 23       	and	r18, r25
    56e0:	a0 81       	ld	r26, Z
    56e2:	b1 81       	ldd	r27, Z+1	; 0x01
    56e4:	a2 0f       	add	r26, r18
    56e6:	b1 1d       	adc	r27, r1
    56e8:	2c 91       	ld	r18, X
    56ea:	9f 5f       	subi	r25, 0xFF	; 255
    56ec:	89 23       	and	r24, r25
    56ee:	82 83       	std	Z+2, r24	; 0x02
    56f0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    56f4:	0b c0       	rjmp	.+22     	; 0x570c <__vector_55+0x6c>
    56f6:	e1 e3       	ldi	r30, 0x31	; 49
    56f8:	f1 e0       	ldi	r31, 0x01	; 1
    56fa:	80 81       	ld	r24, Z
    56fc:	8f 7d       	andi	r24, 0xDF	; 223
    56fe:	80 83       	st	Z, r24
    5700:	05 c0       	rjmp	.+10     	; 0x570c <__vector_55+0x6c>
    5702:	e1 e3       	ldi	r30, 0x31	; 49
    5704:	f1 e0       	ldi	r31, 0x01	; 1
    5706:	80 81       	ld	r24, Z
    5708:	8f 7d       	andi	r24, 0xDF	; 223
    570a:	80 83       	st	Z, r24
    570c:	ff 91       	pop	r31
    570e:	ef 91       	pop	r30
    5710:	bf 91       	pop	r27
    5712:	af 91       	pop	r26
    5714:	9f 91       	pop	r25
    5716:	8f 91       	pop	r24
    5718:	2f 91       	pop	r18
    571a:	0f 90       	pop	r0
    571c:	0b be       	out	0x3b, r0	; 59
    571e:	0f 90       	pop	r0
    5720:	0f be       	out	0x3f, r0	; 63
    5722:	0f 90       	pop	r0
    5724:	1f 90       	pop	r1
    5726:	18 95       	reti

00005728 <fifo_init>:
    5728:	fc 01       	movw	r30, r24
    572a:	41 11       	cpse	r20, r1
    572c:	02 c0       	rjmp	.+4      	; 0x5732 <fifo_init+0xa>
    572e:	0e 94 29 38 	call	0x7052	; 0x7052 <abort>
    5732:	84 2f       	mov	r24, r20
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	9c 01       	movw	r18, r24
    5738:	21 50       	subi	r18, 0x01	; 1
    573a:	31 09       	sbc	r19, r1
    573c:	82 23       	and	r24, r18
    573e:	93 23       	and	r25, r19
    5740:	89 2b       	or	r24, r25
    5742:	11 f0       	breq	.+4      	; 0x5748 <fifo_init+0x20>
    5744:	0e 94 29 38 	call	0x7052	; 0x7052 <abort>
    5748:	41 38       	cpi	r20, 0x81	; 129
    574a:	10 f0       	brcs	.+4      	; 0x5750 <fifo_init+0x28>
    574c:	0e 94 29 38 	call	0x7052	; 0x7052 <abort>
    5750:	12 82       	std	Z+2, r1	; 0x02
    5752:	13 82       	std	Z+3, r1	; 0x03
    5754:	44 83       	std	Z+4, r20	; 0x04
    5756:	44 0f       	add	r20, r20
    5758:	41 50       	subi	r20, 0x01	; 1
    575a:	45 83       	std	Z+5, r20	; 0x05
    575c:	71 83       	std	Z+1, r23	; 0x01
    575e:	60 83       	st	Z, r22
    5760:	80 e0       	ldi	r24, 0x00	; 0
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	08 95       	ret

00005766 <hal_create>:
    5766:	e2 ec       	ldi	r30, 0xC2	; 194
    5768:	fa e0       	ldi	r31, 0x0A	; 10
    576a:	24 e0       	ldi	r18, 0x04	; 4
    576c:	32 e3       	ldi	r19, 0x32	; 50
    576e:	31 83       	std	Z+1, r19	; 0x01
    5770:	20 83       	st	Z, r18
    5772:	27 e0       	ldi	r18, 0x07	; 7
    5774:	32 e3       	ldi	r19, 0x32	; 50
    5776:	33 83       	std	Z+3, r19	; 0x03
    5778:	22 83       	std	Z+2, r18	; 0x02
    577a:	22 e1       	ldi	r18, 0x12	; 18
    577c:	32 e3       	ldi	r19, 0x32	; 50
    577e:	35 83       	std	Z+5, r19	; 0x05
    5780:	24 83       	std	Z+4, r18	; 0x04
    5782:	26 e1       	ldi	r18, 0x16	; 22
    5784:	32 e3       	ldi	r19, 0x32	; 50
    5786:	37 83       	std	Z+7, r19	; 0x07
    5788:	26 83       	std	Z+6, r18	; 0x06
    578a:	2c e1       	ldi	r18, 0x1C	; 28
    578c:	32 e3       	ldi	r19, 0x32	; 50
    578e:	31 87       	std	Z+9, r19	; 0x09
    5790:	20 87       	std	Z+8, r18	; 0x08
    5792:	28 e2       	ldi	r18, 0x28	; 40
    5794:	32 e3       	ldi	r19, 0x32	; 50
    5796:	33 87       	std	Z+11, r19	; 0x0b
    5798:	22 87       	std	Z+10, r18	; 0x0a
    579a:	2d e2       	ldi	r18, 0x2D	; 45
    579c:	32 e3       	ldi	r19, 0x32	; 50
    579e:	35 87       	std	Z+13, r19	; 0x0d
    57a0:	24 87       	std	Z+12, r18	; 0x0c
    57a2:	29 e3       	ldi	r18, 0x39	; 57
    57a4:	32 e3       	ldi	r19, 0x32	; 50
    57a6:	37 87       	std	Z+15, r19	; 0x0f
    57a8:	26 87       	std	Z+14, r18	; 0x0e
    57aa:	29 e1       	ldi	r18, 0x19	; 25
    57ac:	32 e3       	ldi	r19, 0x32	; 50
    57ae:	31 8b       	std	Z+17, r19	; 0x11
    57b0:	20 8b       	std	Z+16, r18	; 0x10
    57b2:	2e e3       	ldi	r18, 0x3E	; 62
    57b4:	32 e3       	ldi	r19, 0x32	; 50
    57b6:	33 8b       	std	Z+19, r19	; 0x13
    57b8:	22 8b       	std	Z+18, r18	; 0x12
    57ba:	2b e4       	ldi	r18, 0x4B	; 75
    57bc:	32 e3       	ldi	r19, 0x32	; 50
    57be:	35 8b       	std	Z+21, r19	; 0x15
    57c0:	24 8b       	std	Z+20, r18	; 0x14
    57c2:	68 2f       	mov	r22, r24
    57c4:	cf 01       	movw	r24, r30
    57c6:	2f c1       	rjmp	.+606    	; 0x5a26 <led_create>
    57c8:	08 95       	ret

000057ca <_hihTwiCallback>:
    57ca:	65 30       	cpi	r22, 0x05	; 5
    57cc:	f1 f4       	brne	.+60     	; 0x580a <_hihTwiCallback+0x40>
    57ce:	fa 01       	movw	r30, r20
    57d0:	80 81       	ld	r24, Z
    57d2:	8f 73       	andi	r24, 0x3F	; 63
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	98 2f       	mov	r25, r24
    57d8:	88 27       	eor	r24, r24
    57da:	21 81       	ldd	r18, Z+1	; 0x01
    57dc:	82 2b       	or	r24, r18
    57de:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    57e2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    57e6:	82 81       	ldd	r24, Z+2	; 0x02
    57e8:	f0 e4       	ldi	r31, 0x40	; 64
    57ea:	8f 9f       	mul	r24, r31
    57ec:	c0 01       	movw	r24, r0
    57ee:	11 24       	eor	r1, r1
    57f0:	fa 01       	movw	r30, r20
    57f2:	23 81       	ldd	r18, Z+3	; 0x03
    57f4:	26 95       	lsr	r18
    57f6:	26 95       	lsr	r18
    57f8:	82 2b       	or	r24, r18
    57fa:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    57fe:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    5802:	81 e0       	ldi	r24, 0x01	; 1
    5804:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <_measuringIsReady>
    5808:	08 95       	ret
    580a:	64 30       	cpi	r22, 0x04	; 4
    580c:	51 f0       	breq	.+20     	; 0x5822 <_hihTwiCallback+0x58>
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	90 e4       	ldi	r25, 0x40	; 64
    5812:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    5816:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    581a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    581e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    5822:	08 95       	ret

00005824 <hih8120Create>:
    5824:	0f 93       	push	r16
    5826:	1f 93       	push	r17
    5828:	05 ee       	ldi	r16, 0xE5	; 229
    582a:	1b e2       	ldi	r17, 0x2B	; 43
    582c:	20 e0       	ldi	r18, 0x00	; 0
    582e:	34 e2       	ldi	r19, 0x24	; 36
    5830:	44 ef       	ldi	r20, 0xF4	; 244
    5832:	50 e0       	ldi	r21, 0x00	; 0
    5834:	60 e0       	ldi	r22, 0x00	; 0
    5836:	87 e2       	ldi	r24, 0x27	; 39
    5838:	ff d6       	rcall	.+3582   	; 0x6638 <twiCreate>
    583a:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <_hih8120Handler+0x1>
    583e:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <_hih8120Handler>
    5842:	21 e0       	ldi	r18, 0x01	; 1
    5844:	89 2b       	or	r24, r25
    5846:	09 f0       	breq	.+2      	; 0x584a <hih8120Create+0x26>
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	82 2f       	mov	r24, r18
    584c:	1f 91       	pop	r17
    584e:	0f 91       	pop	r16
    5850:	08 95       	ret

00005852 <hih8120Wakeup>:
    5852:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <_hih8120Handler>
    5856:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <_hih8120Handler+0x1>
    585a:	00 97       	sbiw	r24, 0x00	; 0
    585c:	51 f0       	breq	.+20     	; 0x5872 <hih8120Wakeup+0x20>
    585e:	40 e0       	ldi	r20, 0x00	; 0
    5860:	60 e0       	ldi	r22, 0x00	; 0
    5862:	70 e0       	ldi	r23, 0x00	; 0
    5864:	3a d7       	rcall	.+3700   	; 0x66da <twiTransmit>
    5866:	84 30       	cpi	r24, 0x04	; 4
    5868:	31 f4       	brne	.+12     	; 0x5876 <hih8120Wakeup+0x24>
    586a:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <_measuringIsReady>
    586e:	80 e0       	ldi	r24, 0x00	; 0
    5870:	08 95       	ret
    5872:	82 e0       	ldi	r24, 0x02	; 2
    5874:	08 95       	ret
    5876:	83 e0       	ldi	r24, 0x03	; 3
    5878:	08 95       	ret

0000587a <hih8120Meassure>:
    587a:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <_hih8120Handler>
    587e:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <_hih8120Handler+0x1>
    5882:	00 97       	sbiw	r24, 0x00	; 0
    5884:	31 f0       	breq	.+12     	; 0x5892 <hih8120Meassure+0x18>
    5886:	64 e0       	ldi	r22, 0x04	; 4
    5888:	74 d7       	rcall	.+3816   	; 0x6772 <twiReceive>
    588a:	85 30       	cpi	r24, 0x05	; 5
    588c:	21 f0       	breq	.+8      	; 0x5896 <hih8120Meassure+0x1c>
    588e:	83 e0       	ldi	r24, 0x03	; 3
    5890:	08 95       	ret
    5892:	82 e0       	ldi	r24, 0x02	; 2
    5894:	08 95       	ret
    5896:	80 e0       	ldi	r24, 0x00	; 0
    5898:	08 95       	ret

0000589a <hih8120GetTemperature>:
    589a:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    589e:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    58a2:	80 e0       	ldi	r24, 0x00	; 0
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__floatunsisf>
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	45 e2       	ldi	r20, 0x25	; 37
    58b0:	53 e4       	ldi	r21, 0x43	; 67
    58b2:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__mulsf3>
    58b6:	20 e0       	ldi	r18, 0x00	; 0
    58b8:	38 ef       	ldi	r19, 0xF8	; 248
    58ba:	4f e7       	ldi	r20, 0x7F	; 127
    58bc:	56 e4       	ldi	r21, 0x46	; 70
    58be:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    58c2:	20 e0       	ldi	r18, 0x00	; 0
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	40 e2       	ldi	r20, 0x20	; 32
    58c8:	52 e4       	ldi	r21, 0x42	; 66
    58ca:	0c 94 d3 34 	jmp	0x69a6	; 0x69a6 <__subsf3>
    58ce:	08 95       	ret

000058d0 <hih8120GetTemperature_x10>:
    58d0:	e4 df       	rcall	.-56     	; 0x589a <hih8120GetTemperature>
    58d2:	20 e0       	ldi	r18, 0x00	; 0
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	40 e2       	ldi	r20, 0x20	; 32
    58d8:	51 e4       	ldi	r21, 0x41	; 65
    58da:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <__mulsf3>
    58de:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__fixsfsi>
    58e2:	cb 01       	movw	r24, r22
    58e4:	08 95       	ret

000058e6 <_turn_off>:
    58e6:	cf 93       	push	r28
    58e8:	df 93       	push	r29
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	fc 01       	movw	r30, r24
    58ee:	ee 0f       	add	r30, r30
    58f0:	ff 1f       	adc	r31, r31
    58f2:	e8 0f       	add	r30, r24
    58f4:	f9 1f       	adc	r31, r25
    58f6:	ee 0f       	add	r30, r30
    58f8:	ff 1f       	adc	r31, r31
    58fa:	eb 59       	subi	r30, 0x9B	; 155
    58fc:	f6 4f       	sbci	r31, 0xF6	; 246
    58fe:	23 81       	ldd	r18, Z+3	; 0x03
    5900:	21 11       	cpse	r18, r1
    5902:	0a c0       	rjmp	.+20     	; 0x5918 <_turn_off+0x32>
    5904:	ef 01       	movw	r28, r30
    5906:	e0 91 ca 0a 	lds	r30, 0x0ACA	; 0x800aca <register_access+0x8>
    590a:	f0 91 cb 0a 	lds	r31, 0x0ACB	; 0x800acb <register_access+0x9>
    590e:	6a 81       	ldd	r22, Y+2	; 0x02
    5910:	88 81       	ld	r24, Y
    5912:	99 81       	ldd	r25, Y+1	; 0x01
    5914:	19 95       	eicall
    5916:	12 c0       	rjmp	.+36     	; 0x593c <_turn_off+0x56>
    5918:	dc 01       	movw	r26, r24
    591a:	aa 0f       	add	r26, r26
    591c:	bb 1f       	adc	r27, r27
    591e:	ed 01       	movw	r28, r26
    5920:	c8 0f       	add	r28, r24
    5922:	d9 1f       	adc	r29, r25
    5924:	cc 0f       	add	r28, r28
    5926:	dd 1f       	adc	r29, r29
    5928:	cb 59       	subi	r28, 0x9B	; 155
    592a:	d6 4f       	sbci	r29, 0xF6	; 246
    592c:	e0 91 d4 0a 	lds	r30, 0x0AD4	; 0x800ad4 <register_access+0x12>
    5930:	f0 91 d5 0a 	lds	r31, 0x0AD5	; 0x800ad5 <register_access+0x13>
    5934:	6a 81       	ldd	r22, Y+2	; 0x02
    5936:	88 81       	ld	r24, Y
    5938:	99 81       	ldd	r25, Y+1	; 0x01
    593a:	19 95       	eicall
    593c:	df 91       	pop	r29
    593e:	cf 91       	pop	r28
    5940:	08 95       	ret

00005942 <_turn_on>:
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	fc 01       	movw	r30, r24
    594a:	ee 0f       	add	r30, r30
    594c:	ff 1f       	adc	r31, r31
    594e:	e8 0f       	add	r30, r24
    5950:	f9 1f       	adc	r31, r25
    5952:	ee 0f       	add	r30, r30
    5954:	ff 1f       	adc	r31, r31
    5956:	eb 59       	subi	r30, 0x9B	; 155
    5958:	f6 4f       	sbci	r31, 0xF6	; 246
    595a:	23 81       	ldd	r18, Z+3	; 0x03
    595c:	21 11       	cpse	r18, r1
    595e:	0a c0       	rjmp	.+20     	; 0x5974 <_turn_on+0x32>
    5960:	ef 01       	movw	r28, r30
    5962:	e0 91 d4 0a 	lds	r30, 0x0AD4	; 0x800ad4 <register_access+0x12>
    5966:	f0 91 d5 0a 	lds	r31, 0x0AD5	; 0x800ad5 <register_access+0x13>
    596a:	6a 81       	ldd	r22, Y+2	; 0x02
    596c:	88 81       	ld	r24, Y
    596e:	99 81       	ldd	r25, Y+1	; 0x01
    5970:	19 95       	eicall
    5972:	12 c0       	rjmp	.+36     	; 0x5998 <_turn_on+0x56>
    5974:	dc 01       	movw	r26, r24
    5976:	aa 0f       	add	r26, r26
    5978:	bb 1f       	adc	r27, r27
    597a:	ed 01       	movw	r28, r26
    597c:	c8 0f       	add	r28, r24
    597e:	d9 1f       	adc	r29, r25
    5980:	cc 0f       	add	r28, r28
    5982:	dd 1f       	adc	r29, r29
    5984:	cb 59       	subi	r28, 0x9B	; 155
    5986:	d6 4f       	sbci	r29, 0xF6	; 246
    5988:	e0 91 ca 0a 	lds	r30, 0x0ACA	; 0x800aca <register_access+0x8>
    598c:	f0 91 cb 0a 	lds	r31, 0x0ACB	; 0x800acb <register_access+0x9>
    5990:	6a 81       	ldd	r22, Y+2	; 0x02
    5992:	88 81       	ld	r24, Y
    5994:	99 81       	ldd	r25, Y+1	; 0x01
    5996:	19 95       	eicall
    5998:	df 91       	pop	r29
    599a:	cf 91       	pop	r28
    599c:	08 95       	ret

0000599e <_hal_led_task>:
    599e:	87 e8       	ldi	r24, 0x87	; 135
    59a0:	95 e0       	ldi	r25, 0x05	; 5
    59a2:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <puts>
    59a6:	0f 2e       	mov	r0, r31
    59a8:	f2 ec       	ldi	r31, 0xC2	; 194
    59aa:	cf 2e       	mov	r12, r31
    59ac:	fa e0       	ldi	r31, 0x0A	; 10
    59ae:	df 2e       	mov	r13, r31
    59b0:	f0 2d       	mov	r31, r0
    59b2:	04 e0       	ldi	r16, 0x04	; 4
    59b4:	c5 e6       	ldi	r28, 0x65	; 101
    59b6:	d9 e0       	ldi	r29, 0x09	; 9
    59b8:	10 e0       	ldi	r17, 0x00	; 0
    59ba:	8c 81       	ldd	r24, Y+4	; 0x04
    59bc:	81 30       	cpi	r24, 0x01	; 1
    59be:	69 f0       	breq	.+26     	; 0x59da <_hal_led_task+0x3c>
    59c0:	e8 f0       	brcs	.+58     	; 0x59fc <_hal_led_task+0x5e>
    59c2:	82 30       	cpi	r24, 0x02	; 2
    59c4:	39 f5       	brne	.+78     	; 0x5a14 <_hal_led_task+0x76>
    59c6:	d6 01       	movw	r26, r12
    59c8:	1c 96       	adiw	r26, 0x0c	; 12
    59ca:	ed 91       	ld	r30, X+
    59cc:	fc 91       	ld	r31, X
    59ce:	1d 97       	sbiw	r26, 0x0d	; 13
    59d0:	6a 81       	ldd	r22, Y+2	; 0x02
    59d2:	88 81       	ld	r24, Y
    59d4:	99 81       	ldd	r25, Y+1	; 0x01
    59d6:	19 95       	eicall
    59d8:	1d c0       	rjmp	.+58     	; 0x5a14 <_hal_led_task+0x76>
    59da:	8d 81       	ldd	r24, Y+5	; 0x05
    59dc:	8f 5f       	subi	r24, 0xFF	; 255
    59de:	8a 30       	cpi	r24, 0x0A	; 10
    59e0:	10 f4       	brcc	.+4      	; 0x59e6 <_hal_led_task+0x48>
    59e2:	8d 83       	std	Y+5, r24	; 0x05
    59e4:	17 c0       	rjmp	.+46     	; 0x5a14 <_hal_led_task+0x76>
    59e6:	1d 82       	std	Y+5, r1	; 0x05
    59e8:	d6 01       	movw	r26, r12
    59ea:	1c 96       	adiw	r26, 0x0c	; 12
    59ec:	ed 91       	ld	r30, X+
    59ee:	fc 91       	ld	r31, X
    59f0:	1d 97       	sbiw	r26, 0x0d	; 13
    59f2:	6a 81       	ldd	r22, Y+2	; 0x02
    59f4:	88 81       	ld	r24, Y
    59f6:	99 81       	ldd	r25, Y+1	; 0x01
    59f8:	19 95       	eicall
    59fa:	0c c0       	rjmp	.+24     	; 0x5a14 <_hal_led_task+0x76>
    59fc:	8d 81       	ldd	r24, Y+5	; 0x05
    59fe:	88 23       	and	r24, r24
    5a00:	31 f0       	breq	.+12     	; 0x5a0e <_hal_led_task+0x70>
    5a02:	81 2f       	mov	r24, r17
    5a04:	9e df       	rcall	.-196    	; 0x5942 <_turn_on>
    5a06:	8d 81       	ldd	r24, Y+5	; 0x05
    5a08:	81 50       	subi	r24, 0x01	; 1
    5a0a:	8d 83       	std	Y+5, r24	; 0x05
    5a0c:	03 c0       	rjmp	.+6      	; 0x5a14 <_hal_led_task+0x76>
    5a0e:	0c 83       	std	Y+4, r16	; 0x04
    5a10:	81 2f       	mov	r24, r17
    5a12:	69 df       	rcall	.-302    	; 0x58e6 <_turn_off>
    5a14:	1f 5f       	subi	r17, 0xFF	; 255
    5a16:	26 96       	adiw	r28, 0x06	; 6
    5a18:	14 30       	cpi	r17, 0x04	; 4
    5a1a:	79 f6       	brne	.-98     	; 0x59ba <_hal_led_task+0x1c>
    5a1c:	85 e0       	ldi	r24, 0x05	; 5
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	0e 94 b6 13 	call	0x276c	; 0x276c <vTaskDelay>
    5a24:	c7 cf       	rjmp	.-114    	; 0x59b4 <_hal_led_task+0x16>

00005a26 <led_create>:
    5a26:	cf 92       	push	r12
    5a28:	df 92       	push	r13
    5a2a:	ef 92       	push	r14
    5a2c:	ff 92       	push	r15
    5a2e:	0f 93       	push	r16
    5a30:	1f 93       	push	r17
    5a32:	cf 93       	push	r28
    5a34:	df 93       	push	r29
    5a36:	06 2f       	mov	r16, r22
    5a38:	0f 2e       	mov	r0, r31
    5a3a:	f2 ec       	ldi	r31, 0xC2	; 194
    5a3c:	ef 2e       	mov	r14, r31
    5a3e:	fa e0       	ldi	r31, 0x0A	; 10
    5a40:	ff 2e       	mov	r15, r31
    5a42:	f0 2d       	mov	r31, r0
    5a44:	d7 01       	movw	r26, r14
    5a46:	18 96       	adiw	r26, 0x08	; 8
    5a48:	ed 91       	ld	r30, X+
    5a4a:	fc 91       	ld	r31, X
    5a4c:	19 97       	sbiw	r26, 0x09	; 9
    5a4e:	66 e0       	ldi	r22, 0x06	; 6
    5a50:	87 e2       	ldi	r24, 0x27	; 39
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	19 95       	eicall
    5a56:	c5 e6       	ldi	r28, 0x65	; 101
    5a58:	d9 e0       	ldi	r29, 0x09	; 9
    5a5a:	0f 2e       	mov	r0, r31
    5a5c:	f8 e2       	ldi	r31, 0x28	; 40
    5a5e:	cf 2e       	mov	r12, r31
    5a60:	d1 2c       	mov	r13, r1
    5a62:	f0 2d       	mov	r31, r0
    5a64:	d9 82       	std	Y+1, r13	; 0x01
    5a66:	c8 82       	st	Y, r12
    5a68:	86 e0       	ldi	r24, 0x06	; 6
    5a6a:	8a 83       	std	Y+2, r24	; 0x02
    5a6c:	1b 82       	std	Y+3, r1	; 0x03
    5a6e:	14 e0       	ldi	r17, 0x04	; 4
    5a70:	1c 83       	std	Y+4, r17	; 0x04
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	38 df       	rcall	.-400    	; 0x58e6 <_turn_off>
    5a76:	d7 01       	movw	r26, r14
    5a78:	18 96       	adiw	r26, 0x08	; 8
    5a7a:	ed 91       	ld	r30, X+
    5a7c:	fc 91       	ld	r31, X
    5a7e:	19 97       	sbiw	r26, 0x09	; 9
    5a80:	67 e0       	ldi	r22, 0x07	; 7
    5a82:	87 e2       	ldi	r24, 0x27	; 39
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	19 95       	eicall
    5a88:	df 82       	std	Y+7, r13	; 0x07
    5a8a:	ce 82       	std	Y+6, r12	; 0x06
    5a8c:	87 e0       	ldi	r24, 0x07	; 7
    5a8e:	88 87       	std	Y+8, r24	; 0x08
    5a90:	19 86       	std	Y+9, r1	; 0x09
    5a92:	1a 87       	std	Y+10, r17	; 0x0a
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	27 df       	rcall	.-434    	; 0x58e6 <_turn_off>
    5a98:	d7 01       	movw	r26, r14
    5a9a:	18 96       	adiw	r26, 0x08	; 8
    5a9c:	ed 91       	ld	r30, X+
    5a9e:	fc 91       	ld	r31, X
    5aa0:	19 97       	sbiw	r26, 0x09	; 9
    5aa2:	65 e0       	ldi	r22, 0x05	; 5
    5aa4:	83 e3       	ldi	r24, 0x33	; 51
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
    5aa8:	19 95       	eicall
    5aaa:	d7 01       	movw	r26, r14
    5aac:	18 96       	adiw	r26, 0x08	; 8
    5aae:	ed 91       	ld	r30, X+
    5ab0:	fc 91       	ld	r31, X
    5ab2:	19 97       	sbiw	r26, 0x09	; 9
    5ab4:	61 e0       	ldi	r22, 0x01	; 1
    5ab6:	84 e3       	ldi	r24, 0x34	; 52
    5ab8:	90 e0       	ldi	r25, 0x00	; 0
    5aba:	19 95       	eicall
    5abc:	84 e3       	ldi	r24, 0x34	; 52
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	9d 87       	std	Y+13, r25	; 0x0d
    5ac2:	8c 87       	std	Y+12, r24	; 0x0c
    5ac4:	85 e0       	ldi	r24, 0x05	; 5
    5ac6:	8e 87       	std	Y+14, r24	; 0x0e
    5ac8:	1f 86       	std	Y+15, r1	; 0x0f
    5aca:	18 8b       	std	Y+16, r17	; 0x10
    5acc:	82 e0       	ldi	r24, 0x02	; 2
    5ace:	0b df       	rcall	.-490    	; 0x58e6 <_turn_off>
    5ad0:	d7 01       	movw	r26, r14
    5ad2:	18 96       	adiw	r26, 0x08	; 8
    5ad4:	ed 91       	ld	r30, X+
    5ad6:	fc 91       	ld	r31, X
    5ad8:	19 97       	sbiw	r26, 0x09	; 9
    5ada:	64 e0       	ldi	r22, 0x04	; 4
    5adc:	81 e0       	ldi	r24, 0x01	; 1
    5ade:	91 e0       	ldi	r25, 0x01	; 1
    5ae0:	19 95       	eicall
    5ae2:	d7 01       	movw	r26, r14
    5ae4:	18 96       	adiw	r26, 0x08	; 8
    5ae6:	ed 91       	ld	r30, X+
    5ae8:	fc 91       	ld	r31, X
    5aea:	19 97       	sbiw	r26, 0x09	; 9
    5aec:	61 e0       	ldi	r22, 0x01	; 1
    5aee:	82 e0       	ldi	r24, 0x02	; 2
    5af0:	91 e0       	ldi	r25, 0x01	; 1
    5af2:	19 95       	eicall
    5af4:	82 e0       	ldi	r24, 0x02	; 2
    5af6:	91 e0       	ldi	r25, 0x01	; 1
    5af8:	9b 8b       	std	Y+19, r25	; 0x13
    5afa:	8a 8b       	std	Y+18, r24	; 0x12
    5afc:	1c 8b       	std	Y+20, r17	; 0x14
    5afe:	1d 8a       	std	Y+21, r1	; 0x15
    5b00:	1e 8b       	std	Y+22, r17	; 0x16
    5b02:	83 e0       	ldi	r24, 0x03	; 3
    5b04:	f0 de       	rcall	.-544    	; 0x58e6 <_turn_off>
    5b06:	e1 2c       	mov	r14, r1
    5b08:	f1 2c       	mov	r15, r1
    5b0a:	20 e0       	ldi	r18, 0x00	; 0
    5b0c:	30 e0       	ldi	r19, 0x00	; 0
    5b0e:	40 ec       	ldi	r20, 0xC0	; 192
    5b10:	50 e0       	ldi	r21, 0x00	; 0
    5b12:	6e e9       	ldi	r22, 0x9E	; 158
    5b14:	75 e0       	ldi	r23, 0x05	; 5
    5b16:	8f ec       	ldi	r24, 0xCF	; 207
    5b18:	9c e2       	ldi	r25, 0x2C	; 44
    5b1a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <xTaskCreate>
    5b1e:	df 91       	pop	r29
    5b20:	cf 91       	pop	r28
    5b22:	1f 91       	pop	r17
    5b24:	0f 91       	pop	r16
    5b26:	ff 90       	pop	r15
    5b28:	ef 90       	pop	r14
    5b2a:	df 90       	pop	r13
    5b2c:	cf 90       	pop	r12
    5b2e:	08 95       	ret

00005b30 <led_slow_blink>:
    5b30:	0f 93       	push	r16
    5b32:	1f 93       	push	r17
    5b34:	cf 93       	push	r28
    5b36:	df 93       	push	r29
    5b38:	c8 2f       	mov	r28, r24
    5b3a:	d0 e0       	ldi	r29, 0x00	; 0
    5b3c:	8e 01       	movw	r16, r28
    5b3e:	00 0f       	add	r16, r16
    5b40:	11 1f       	adc	r17, r17
    5b42:	d8 01       	movw	r26, r16
    5b44:	ac 0f       	add	r26, r28
    5b46:	bd 1f       	adc	r27, r29
    5b48:	aa 0f       	add	r26, r26
    5b4a:	bb 1f       	adc	r27, r27
    5b4c:	ab 59       	subi	r26, 0x9B	; 155
    5b4e:	b6 4f       	sbci	r27, 0xF6	; 246
    5b50:	e0 91 ce 0a 	lds	r30, 0x0ACE	; 0x800ace <register_access+0xc>
    5b54:	f0 91 cf 0a 	lds	r31, 0x0ACF	; 0x800acf <register_access+0xd>
    5b58:	12 96       	adiw	r26, 0x02	; 2
    5b5a:	6c 91       	ld	r22, X
    5b5c:	12 97       	sbiw	r26, 0x02	; 2
    5b5e:	8d 91       	ld	r24, X+
    5b60:	9c 91       	ld	r25, X
    5b62:	19 95       	eicall
    5b64:	c0 0f       	add	r28, r16
    5b66:	d1 1f       	adc	r29, r17
    5b68:	cc 0f       	add	r28, r28
    5b6a:	dd 1f       	adc	r29, r29
    5b6c:	cb 59       	subi	r28, 0x9B	; 155
    5b6e:	d6 4f       	sbci	r29, 0xF6	; 246
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	8c 83       	std	Y+4, r24	; 0x04
    5b74:	df 91       	pop	r29
    5b76:	cf 91       	pop	r28
    5b78:	1f 91       	pop	r17
    5b7a:	0f 91       	pop	r16
    5b7c:	08 95       	ret

00005b7e <led_fast_blink>:
    5b7e:	0f 93       	push	r16
    5b80:	1f 93       	push	r17
    5b82:	cf 93       	push	r28
    5b84:	df 93       	push	r29
    5b86:	c8 2f       	mov	r28, r24
    5b88:	d0 e0       	ldi	r29, 0x00	; 0
    5b8a:	8e 01       	movw	r16, r28
    5b8c:	00 0f       	add	r16, r16
    5b8e:	11 1f       	adc	r17, r17
    5b90:	d8 01       	movw	r26, r16
    5b92:	ac 0f       	add	r26, r28
    5b94:	bd 1f       	adc	r27, r29
    5b96:	aa 0f       	add	r26, r26
    5b98:	bb 1f       	adc	r27, r27
    5b9a:	ab 59       	subi	r26, 0x9B	; 155
    5b9c:	b6 4f       	sbci	r27, 0xF6	; 246
    5b9e:	e0 91 ce 0a 	lds	r30, 0x0ACE	; 0x800ace <register_access+0xc>
    5ba2:	f0 91 cf 0a 	lds	r31, 0x0ACF	; 0x800acf <register_access+0xd>
    5ba6:	12 96       	adiw	r26, 0x02	; 2
    5ba8:	6c 91       	ld	r22, X
    5baa:	12 97       	sbiw	r26, 0x02	; 2
    5bac:	8d 91       	ld	r24, X+
    5bae:	9c 91       	ld	r25, X
    5bb0:	19 95       	eicall
    5bb2:	c0 0f       	add	r28, r16
    5bb4:	d1 1f       	adc	r29, r17
    5bb6:	cc 0f       	add	r28, r28
    5bb8:	dd 1f       	adc	r29, r29
    5bba:	cb 59       	subi	r28, 0x9B	; 155
    5bbc:	d6 4f       	sbci	r29, 0xF6	; 246
    5bbe:	82 e0       	ldi	r24, 0x02	; 2
    5bc0:	8c 83       	std	Y+4, r24	; 0x04
    5bc2:	df 91       	pop	r29
    5bc4:	cf 91       	pop	r28
    5bc6:	1f 91       	pop	r17
    5bc8:	0f 91       	pop	r16
    5bca:	08 95       	ret

00005bcc <led_led_on>:
    5bcc:	28 2f       	mov	r18, r24
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	f9 01       	movw	r30, r18
    5bd2:	ee 0f       	add	r30, r30
    5bd4:	ff 1f       	adc	r31, r31
    5bd6:	e2 0f       	add	r30, r18
    5bd8:	f3 1f       	adc	r31, r19
    5bda:	ee 0f       	add	r30, r30
    5bdc:	ff 1f       	adc	r31, r31
    5bde:	eb 59       	subi	r30, 0x9B	; 155
    5be0:	f6 4f       	sbci	r31, 0xF6	; 246
    5be2:	93 e0       	ldi	r25, 0x03	; 3
    5be4:	94 83       	std	Z+4, r25	; 0x04
    5be6:	ad ce       	rjmp	.-678    	; 0x5942 <_turn_on>
    5be8:	08 95       	ret

00005bea <led_led_off>:
    5bea:	28 2f       	mov	r18, r24
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	f9 01       	movw	r30, r18
    5bf0:	ee 0f       	add	r30, r30
    5bf2:	ff 1f       	adc	r31, r31
    5bf4:	e2 0f       	add	r30, r18
    5bf6:	f3 1f       	adc	r31, r19
    5bf8:	ee 0f       	add	r30, r30
    5bfa:	ff 1f       	adc	r31, r31
    5bfc:	eb 59       	subi	r30, 0x9B	; 155
    5bfe:	f6 4f       	sbci	r31, 0xF6	; 246
    5c00:	94 e0       	ldi	r25, 0x04	; 4
    5c02:	94 83       	std	Z+4, r25	; 0x04
    5c04:	70 ce       	rjmp	.-800    	; 0x58e6 <_turn_off>
    5c06:	08 95       	ret

00005c08 <led_long_puls>:
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	fc 01       	movw	r30, r24
    5c0c:	ee 0f       	add	r30, r30
    5c0e:	ff 1f       	adc	r31, r31
    5c10:	df 01       	movw	r26, r30
    5c12:	a8 0f       	add	r26, r24
    5c14:	b9 1f       	adc	r27, r25
    5c16:	aa 0f       	add	r26, r26
    5c18:	bb 1f       	adc	r27, r27
    5c1a:	ab 59       	subi	r26, 0x9B	; 155
    5c1c:	b6 4f       	sbci	r27, 0xF6	; 246
    5c1e:	24 e0       	ldi	r18, 0x04	; 4
    5c20:	15 96       	adiw	r26, 0x05	; 5
    5c22:	2c 93       	st	X, r18
    5c24:	15 97       	sbiw	r26, 0x05	; 5
    5c26:	fd 01       	movw	r30, r26
    5c28:	14 82       	std	Z+4, r1	; 0x04
    5c2a:	08 95       	ret

00005c2c <led_short_puls>:
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	fc 01       	movw	r30, r24
    5c30:	ee 0f       	add	r30, r30
    5c32:	ff 1f       	adc	r31, r31
    5c34:	df 01       	movw	r26, r30
    5c36:	a8 0f       	add	r26, r24
    5c38:	b9 1f       	adc	r27, r25
    5c3a:	aa 0f       	add	r26, r26
    5c3c:	bb 1f       	adc	r27, r27
    5c3e:	ab 59       	subi	r26, 0x9B	; 155
    5c40:	b6 4f       	sbci	r27, 0xF6	; 246
    5c42:	21 e0       	ldi	r18, 0x01	; 1
    5c44:	15 96       	adiw	r26, 0x05	; 5
    5c46:	2c 93       	st	X, r18
    5c48:	15 97       	sbiw	r26, 0x05	; 5
    5c4a:	fd 01       	movw	r30, r26
    5c4c:	14 82       	std	Z+4, r1	; 0x04
    5c4e:	08 95       	ret

00005c50 <_serial_call_back>:
    5c50:	0f 93       	push	r16
    5c52:	1f 93       	push	r17
    5c54:	cf 93       	push	r28
    5c56:	df 93       	push	r29
    5c58:	1f 92       	push	r1
    5c5a:	1f 92       	push	r1
    5c5c:	cd b7       	in	r28, 0x3d	; 61
    5c5e:	de b7       	in	r29, 0x3e	; 62
    5c60:	8c 01       	movw	r16, r24
    5c62:	19 82       	std	Y+1, r1	; 0x01
    5c64:	2d c0       	rjmp	.+90     	; 0x5cc0 <_serial_call_back+0x70>
    5c66:	e0 91 e1 09 	lds	r30, 0x09E1	; 0x8009e1 <rec_buf_inp.2926>
    5c6a:	ec 32       	cpi	r30, 0x2C	; 44
    5c6c:	50 f4       	brcc	.+20     	; 0x5c82 <_serial_call_back+0x32>
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	8e 0f       	add	r24, r30
    5c72:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <rec_buf_inp.2926>
    5c76:	f0 e0       	ldi	r31, 0x00	; 0
    5c78:	ef 5e       	subi	r30, 0xEF	; 239
    5c7a:	f5 4f       	sbci	r31, 0xF5	; 245
    5c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c7e:	80 83       	st	Z, r24
    5c80:	02 c0       	rjmp	.+4      	; 0x5c86 <_serial_call_back+0x36>
    5c82:	10 92 e1 09 	sts	0x09E1, r1	; 0x8009e1 <rec_buf_inp.2926>
    5c86:	8a 81       	ldd	r24, Y+2	; 0x02
    5c88:	8a 30       	cpi	r24, 0x0A	; 10
    5c8a:	d1 f4       	brne	.+52     	; 0x5cc0 <_serial_call_back+0x70>
    5c8c:	40 91 e1 09 	lds	r20, 0x09E1	; 0x8009e1 <rec_buf_inp.2926>
    5c90:	50 e0       	ldi	r21, 0x00	; 0
    5c92:	fa 01       	movw	r30, r20
    5c94:	e1 5f       	subi	r30, 0xF1	; 241
    5c96:	f5 4f       	sbci	r31, 0xF5	; 245
    5c98:	10 82       	st	Z, r1
    5c9a:	41 50       	subi	r20, 0x01	; 1
    5c9c:	51 09       	sbc	r21, r1
    5c9e:	9e 01       	movw	r18, r28
    5ca0:	2f 5f       	subi	r18, 0xFF	; 255
    5ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca4:	61 e1       	ldi	r22, 0x11	; 17
    5ca6:	7a e0       	ldi	r23, 0x0A	; 10
    5ca8:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <_reply_buffer_handle>
    5cac:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <_reply_buffer_handle+0x1>
    5cb0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <xStreamBufferSendFromISR>
    5cb4:	89 81       	ldd	r24, Y+1	; 0x01
    5cb6:	81 11       	cpse	r24, r1
    5cb8:	0e 94 6a 05 	call	0xad4	; 0xad4 <vPortYield>
    5cbc:	10 92 e1 09 	sts	0x09E1, r1	; 0x8009e1 <rec_buf_inp.2926>
    5cc0:	be 01       	movw	r22, r28
    5cc2:	6e 5f       	subi	r22, 0xFE	; 254
    5cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc6:	c8 01       	movw	r24, r16
    5cc8:	bb da       	rcall	.-2698   	; 0x5240 <serial_get_byte>
    5cca:	88 23       	and	r24, r24
    5ccc:	61 f2       	breq	.-104    	; 0x5c66 <_serial_call_back+0x16>
    5cce:	0f 90       	pop	r0
    5cd0:	0f 90       	pop	r0
    5cd2:	df 91       	pop	r29
    5cd4:	cf 91       	pop	r28
    5cd6:	1f 91       	pop	r17
    5cd8:	0f 91       	pop	r16
    5cda:	08 95       	ret

00005cdc <_upload_message>:
    5cdc:	0f 93       	push	r16
    5cde:	1f 93       	push	r17
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	8c 01       	movw	r16, r24
    5ce6:	eb 01       	movw	r28, r22
    5ce8:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <_reply_buffer_handle>
    5cec:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <_reply_buffer_handle+0x1>
    5cf0:	0e 94 b9 0c 	call	0x1972	; 0x1972 <xStreamBufferReset>
    5cf4:	b8 01       	movw	r22, r16
    5cf6:	8d e7       	ldi	r24, 0x7D	; 125
    5cf8:	99 e0       	ldi	r25, 0x09	; 9
    5cfa:	0e 94 48 38 	call	0x7090	; 0x7090 <strcpy>
    5cfe:	20 97       	sbiw	r28, 0x00	; 0
    5d00:	79 f0       	breq	.+30     	; 0x5d20 <_upload_message+0x44>
    5d02:	ed e7       	ldi	r30, 0x7D	; 125
    5d04:	f9 e0       	ldi	r31, 0x09	; 9
    5d06:	01 90       	ld	r0, Z+
    5d08:	00 20       	and	r0, r0
    5d0a:	e9 f7       	brne	.-6      	; 0x5d06 <_upload_message+0x2a>
    5d0c:	31 97       	sbiw	r30, 0x01	; 1
    5d0e:	80 e2       	ldi	r24, 0x20	; 32
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	91 83       	std	Z+1, r25	; 0x01
    5d14:	80 83       	st	Z, r24
    5d16:	be 01       	movw	r22, r28
    5d18:	8d e7       	ldi	r24, 0x7D	; 125
    5d1a:	99 e0       	ldi	r25, 0x09	; 9
    5d1c:	0e 94 3d 38 	call	0x707a	; 0x707a <strcat>
    5d20:	ed e7       	ldi	r30, 0x7D	; 125
    5d22:	f9 e0       	ldi	r31, 0x09	; 9
    5d24:	df 01       	movw	r26, r30
    5d26:	0d 90       	ld	r0, X+
    5d28:	00 20       	and	r0, r0
    5d2a:	e9 f7       	brne	.-6      	; 0x5d26 <_upload_message+0x4a>
    5d2c:	11 97       	sbiw	r26, 0x01	; 1
    5d2e:	8d e0       	ldi	r24, 0x0D	; 13
    5d30:	9a e0       	ldi	r25, 0x0A	; 10
    5d32:	11 96       	adiw	r26, 0x01	; 1
    5d34:	9c 93       	st	X, r25
    5d36:	8e 93       	st	-X, r24
    5d38:	12 96       	adiw	r26, 0x02	; 2
    5d3a:	1c 92       	st	X, r1
    5d3c:	01 90       	ld	r0, Z+
    5d3e:	00 20       	and	r0, r0
    5d40:	e9 f7       	brne	.-6      	; 0x5d3c <_upload_message+0x60>
    5d42:	31 97       	sbiw	r30, 0x01	; 1
    5d44:	ed 57       	subi	r30, 0x7D	; 125
    5d46:	f9 40       	sbci	r31, 0x09	; 9
    5d48:	ae 2f       	mov	r26, r30
    5d4a:	8d e7       	ldi	r24, 0x7D	; 125
    5d4c:	99 e0       	ldi	r25, 0x09	; 9
    5d4e:	ac 01       	movw	r20, r24
    5d50:	6a 2f       	mov	r22, r26
    5d52:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <_rn2483_serial>
    5d56:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <_rn2483_serial+0x1>
    5d5a:	22 da       	rcall	.-3004   	; 0x51a0 <serial_send_bytes>
    5d5c:	81 11       	cpse	r24, r1
    5d5e:	0f c0       	rjmp	.+30     	; 0x5d7e <_upload_message+0xa2>
    5d60:	28 e2       	ldi	r18, 0x28	; 40
    5d62:	35 e0       	ldi	r19, 0x05	; 5
    5d64:	4d e2       	ldi	r20, 0x2D	; 45
    5d66:	50 e0       	ldi	r21, 0x00	; 0
    5d68:	6b e6       	ldi	r22, 0x6B	; 107
    5d6a:	7a e0       	ldi	r23, 0x0A	; 10
    5d6c:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <_reply_buffer_handle>
    5d70:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <_reply_buffer_handle+0x1>
    5d74:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xStreamBufferReceive>
    5d78:	8b e6       	ldi	r24, 0x6B	; 107
    5d7a:	9a e0       	ldi	r25, 0x0A	; 10
    5d7c:	02 c0       	rjmp	.+4      	; 0x5d82 <_upload_message+0xa6>
    5d7e:	80 e0       	ldi	r24, 0x00	; 0
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	df 91       	pop	r29
    5d84:	cf 91       	pop	r28
    5d86:	1f 91       	pop	r17
    5d88:	0f 91       	pop	r16
    5d8a:	08 95       	ret

00005d8c <_reply2return_code>:
    5d8c:	af 92       	push	r10
    5d8e:	bf 92       	push	r11
    5d90:	cf 92       	push	r12
    5d92:	df 92       	push	r13
    5d94:	ef 92       	push	r14
    5d96:	ff 92       	push	r15
    5d98:	0f 93       	push	r16
    5d9a:	1f 93       	push	r17
    5d9c:	cf 93       	push	r28
    5d9e:	df 93       	push	r29
    5da0:	6c 01       	movw	r12, r24
    5da2:	fc 01       	movw	r30, r24
    5da4:	01 90       	ld	r0, Z+
    5da6:	00 20       	and	r0, r0
    5da8:	e9 f7       	brne	.-6      	; 0x5da4 <_reply2return_code+0x18>
    5daa:	31 97       	sbiw	r30, 0x01	; 1
    5dac:	7f 01       	movw	r14, r30
    5dae:	e8 1a       	sub	r14, r24
    5db0:	f9 0a       	sbc	r15, r25
    5db2:	0a e2       	ldi	r16, 0x2A	; 42
    5db4:	18 e0       	ldi	r17, 0x08	; 8
    5db6:	c0 e0       	ldi	r28, 0x00	; 0
    5db8:	d0 e0       	ldi	r29, 0x00	; 0
    5dba:	f8 01       	movw	r30, r16
    5dbc:	60 81       	ld	r22, Z
    5dbe:	71 81       	ldd	r23, Z+1	; 0x01
    5dc0:	a7 01       	movw	r20, r14
    5dc2:	c6 01       	movw	r24, r12
    5dc4:	0e 94 4f 38 	call	0x709e	; 0x709e <strncasecmp>
    5dc8:	89 2b       	or	r24, r25
    5dca:	49 f4       	brne	.+18     	; 0x5dde <_reply2return_code+0x52>
    5dcc:	fe 01       	movw	r30, r28
    5dce:	ee 0f       	add	r30, r30
    5dd0:	ff 1f       	adc	r31, r31
    5dd2:	ec 0f       	add	r30, r28
    5dd4:	fd 1f       	adc	r31, r29
    5dd6:	e7 5d       	subi	r30, 0xD7	; 215
    5dd8:	f7 4f       	sbci	r31, 0xF7	; 247
    5dda:	80 81       	ld	r24, Z
    5ddc:	07 c0       	rjmp	.+14     	; 0x5dec <_reply2return_code+0x60>
    5dde:	21 96       	adiw	r28, 0x01	; 1
    5de0:	0d 5f       	subi	r16, 0xFD	; 253
    5de2:	1f 4f       	sbci	r17, 0xFF	; 255
    5de4:	c1 31       	cpi	r28, 0x11	; 17
    5de6:	d1 05       	cpc	r29, r1
    5de8:	41 f7       	brne	.-48     	; 0x5dba <_reply2return_code+0x2e>
    5dea:	80 e1       	ldi	r24, 0x10	; 16
    5dec:	df 91       	pop	r29
    5dee:	cf 91       	pop	r28
    5df0:	1f 91       	pop	r17
    5df2:	0f 91       	pop	r16
    5df4:	ff 90       	pop	r15
    5df6:	ef 90       	pop	r14
    5df8:	df 90       	pop	r13
    5dfa:	cf 90       	pop	r12
    5dfc:	bf 90       	pop	r11
    5dfe:	af 90       	pop	r10
    5e00:	08 95       	ret

00005e02 <_upload_message_rc>:
    5e02:	6c df       	rcall	.-296    	; 0x5cdc <_upload_message>
    5e04:	c3 cf       	rjmp	.-122    	; 0x5d8c <_reply2return_code>
    5e06:	08 95       	ret

00005e08 <lora_driver_flush_buffers>:
    5e08:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <_reply_buffer_handle>
    5e0c:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <_reply_buffer_handle+0x1>
    5e10:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <xStreamBufferReset>
    5e14:	08 95       	ret

00005e16 <lora_driver_create>:
    5e16:	8f 92       	push	r8
    5e18:	9f 92       	push	r9
    5e1a:	af 92       	push	r10
    5e1c:	cf 92       	push	r12
    5e1e:	ef 92       	push	r14
    5e20:	0f 93       	push	r16
    5e22:	cf 93       	push	r28
    5e24:	c8 2f       	mov	r28, r24
    5e26:	41 e0       	ldi	r20, 0x01	; 1
    5e28:	60 e0       	ldi	r22, 0x00	; 0
    5e2a:	70 e0       	ldi	r23, 0x00	; 0
    5e2c:	88 ec       	ldi	r24, 0xC8	; 200
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xStreamBufferGenericCreate>
    5e34:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <_reply_buffer_handle+0x1>
    5e38:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <_reply_buffer_handle>
    5e3c:	0f 2e       	mov	r0, r31
    5e3e:	f8 e2       	ldi	r31, 0x28	; 40
    5e40:	8f 2e       	mov	r8, r31
    5e42:	fe e2       	ldi	r31, 0x2E	; 46
    5e44:	9f 2e       	mov	r9, r31
    5e46:	f0 2d       	mov	r31, r0
    5e48:	68 94       	set
    5e4a:	aa 24       	eor	r10, r10
    5e4c:	a6 f8       	bld	r10, 6
    5e4e:	68 94       	set
    5e50:	cc 24       	eor	r12, r12
    5e52:	c6 f8       	bld	r12, 6
    5e54:	e1 2c       	mov	r14, r1
    5e56:	00 e0       	ldi	r16, 0x00	; 0
    5e58:	23 e0       	ldi	r18, 0x03	; 3
    5e5a:	40 e0       	ldi	r20, 0x00	; 0
    5e5c:	51 ee       	ldi	r21, 0xE1	; 225
    5e5e:	60 e0       	ldi	r22, 0x00	; 0
    5e60:	70 e0       	ldi	r23, 0x00	; 0
    5e62:	8c 2f       	mov	r24, r28
    5e64:	d8 d8       	rcall	.-3664   	; 0x5016 <serial_new_instance>
    5e66:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <_rn2483_serial+0x1>
    5e6a:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <_rn2483_serial>
    5e6e:	e0 91 ca 0a 	lds	r30, 0x0ACA	; 0x800aca <register_access+0x8>
    5e72:	f0 91 cb 0a 	lds	r31, 0x0ACB	; 0x800acb <register_access+0x9>
    5e76:	64 e0       	ldi	r22, 0x04	; 4
    5e78:	87 e0       	ldi	r24, 0x07	; 7
    5e7a:	91 e0       	ldi	r25, 0x01	; 1
    5e7c:	19 95       	eicall
    5e7e:	cf 91       	pop	r28
    5e80:	0f 91       	pop	r16
    5e82:	ef 90       	pop	r14
    5e84:	cf 90       	pop	r12
    5e86:	af 90       	pop	r10
    5e88:	9f 90       	pop	r9
    5e8a:	8f 90       	pop	r8
    5e8c:	08 95       	ret

00005e8e <lora_driver_reset_rn2483>:
    5e8e:	88 23       	and	r24, r24
    5e90:	49 f0       	breq	.+18     	; 0x5ea4 <lora_driver_reset_rn2483+0x16>
    5e92:	e0 91 d4 0a 	lds	r30, 0x0AD4	; 0x800ad4 <register_access+0x12>
    5e96:	f0 91 d5 0a 	lds	r31, 0x0AD5	; 0x800ad5 <register_access+0x13>
    5e9a:	64 e0       	ldi	r22, 0x04	; 4
    5e9c:	88 e0       	ldi	r24, 0x08	; 8
    5e9e:	91 e0       	ldi	r25, 0x01	; 1
    5ea0:	19 95       	eicall
    5ea2:	08 95       	ret
    5ea4:	e0 91 ca 0a 	lds	r30, 0x0ACA	; 0x800aca <register_access+0x8>
    5ea8:	f0 91 cb 0a 	lds	r31, 0x0ACB	; 0x800acb <register_access+0x9>
    5eac:	64 e0       	ldi	r22, 0x04	; 4
    5eae:	88 e0       	ldi	r24, 0x08	; 8
    5eb0:	91 e0       	ldi	r25, 0x01	; 1
    5eb2:	19 95       	eicall
    5eb4:	08 95       	ret

00005eb6 <lora_driver_rn2483_factory_reset>:
    5eb6:	60 e0       	ldi	r22, 0x00	; 0
    5eb8:	70 e0       	ldi	r23, 0x00	; 0
    5eba:	85 ec       	ldi	r24, 0xC5	; 197
    5ebc:	95 e0       	ldi	r25, 0x05	; 5
    5ebe:	0e df       	rcall	.-484    	; 0x5cdc <_upload_message>
    5ec0:	eb e6       	ldi	r30, 0x6B	; 107
    5ec2:	fa e0       	ldi	r31, 0x0A	; 10
    5ec4:	01 90       	ld	r0, Z+
    5ec6:	00 20       	and	r0, r0
    5ec8:	e9 f7       	brne	.-6      	; 0x5ec4 <lora_driver_rn2483_factory_reset+0xe>
    5eca:	31 97       	sbiw	r30, 0x01	; 1
    5ecc:	eb 56       	subi	r30, 0x6B	; 107
    5ece:	fa 40       	sbci	r31, 0x0A	; 10
    5ed0:	81 e0       	ldi	r24, 0x01	; 1
    5ed2:	75 97       	sbiw	r30, 0x15	; 21
    5ed4:	08 f0       	brcs	.+2      	; 0x5ed8 <lora_driver_rn2483_factory_reset+0x22>
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	08 95       	ret

00005eda <lora_driver_get_rn2483_hweui>:
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
    5ede:	ec 01       	movw	r28, r24
    5ee0:	60 e0       	ldi	r22, 0x00	; 0
    5ee2:	70 e0       	ldi	r23, 0x00	; 0
    5ee4:	86 ed       	ldi	r24, 0xD6	; 214
    5ee6:	95 e0       	ldi	r25, 0x05	; 5
    5ee8:	f9 de       	rcall	.-526    	; 0x5cdc <_upload_message>
    5eea:	eb e6       	ldi	r30, 0x6B	; 107
    5eec:	fa e0       	ldi	r31, 0x0A	; 10
    5eee:	01 90       	ld	r0, Z+
    5ef0:	00 20       	and	r0, r0
    5ef2:	e9 f7       	brne	.-6      	; 0x5eee <lora_driver_get_rn2483_hweui+0x14>
    5ef4:	ec 57       	subi	r30, 0x7C	; 124
    5ef6:	fa 40       	sbci	r31, 0x0A	; 10
    5ef8:	39 f4       	brne	.+14     	; 0x5f08 <lora_driver_get_rn2483_hweui+0x2e>
    5efa:	6b e6       	ldi	r22, 0x6B	; 107
    5efc:	7a e0       	ldi	r23, 0x0A	; 10
    5efe:	ce 01       	movw	r24, r28
    5f00:	0e 94 48 38 	call	0x7090	; 0x7090 <strcpy>
    5f04:	80 e0       	ldi	r24, 0x00	; 0
    5f06:	02 c0       	rjmp	.+4      	; 0x5f0c <lora_driver_get_rn2483_hweui+0x32>
    5f08:	18 82       	st	Y, r1
    5f0a:	81 e0       	ldi	r24, 0x01	; 1
    5f0c:	df 91       	pop	r29
    5f0e:	cf 91       	pop	r28
    5f10:	08 95       	ret

00005f12 <lora_driver_set_device_identifier>:
    5f12:	fc 01       	movw	r30, r24
    5f14:	01 90       	ld	r0, Z+
    5f16:	00 20       	and	r0, r0
    5f18:	e9 f7       	brne	.-6      	; 0x5f14 <lora_driver_set_device_identifier+0x2>
    5f1a:	9f 01       	movw	r18, r30
    5f1c:	21 51       	subi	r18, 0x11	; 17
    5f1e:	31 09       	sbc	r19, r1
    5f20:	28 17       	cp	r18, r24
    5f22:	39 07       	cpc	r19, r25
    5f24:	29 f4       	brne	.+10     	; 0x5f30 <lora_driver_set_device_identifier+0x1e>
    5f26:	bc 01       	movw	r22, r24
    5f28:	84 e0       	ldi	r24, 0x04	; 4
    5f2a:	96 e0       	ldi	r25, 0x06	; 6
    5f2c:	6a cf       	rjmp	.-300    	; 0x5e02 <_upload_message_rc>
    5f2e:	08 95       	ret
    5f30:	89 e0       	ldi	r24, 0x09	; 9
    5f32:	08 95       	ret

00005f34 <lora_driver_set_application_identifier>:
    5f34:	fc 01       	movw	r30, r24
    5f36:	01 90       	ld	r0, Z+
    5f38:	00 20       	and	r0, r0
    5f3a:	e9 f7       	brne	.-6      	; 0x5f36 <lora_driver_set_application_identifier+0x2>
    5f3c:	9f 01       	movw	r18, r30
    5f3e:	21 51       	subi	r18, 0x11	; 17
    5f40:	31 09       	sbc	r19, r1
    5f42:	28 17       	cp	r18, r24
    5f44:	39 07       	cpc	r19, r25
    5f46:	29 f4       	brne	.+10     	; 0x5f52 <lora_driver_set_application_identifier+0x1e>
    5f48:	bc 01       	movw	r22, r24
    5f4a:	83 e1       	ldi	r24, 0x13	; 19
    5f4c:	96 e0       	ldi	r25, 0x06	; 6
    5f4e:	59 cf       	rjmp	.-334    	; 0x5e02 <_upload_message_rc>
    5f50:	08 95       	ret
    5f52:	89 e0       	ldi	r24, 0x09	; 9
    5f54:	08 95       	ret

00005f56 <lora_driver_set_application_key>:
    5f56:	fc 01       	movw	r30, r24
    5f58:	01 90       	ld	r0, Z+
    5f5a:	00 20       	and	r0, r0
    5f5c:	e9 f7       	brne	.-6      	; 0x5f58 <lora_driver_set_application_key+0x2>
    5f5e:	9f 01       	movw	r18, r30
    5f60:	21 52       	subi	r18, 0x21	; 33
    5f62:	31 09       	sbc	r19, r1
    5f64:	28 17       	cp	r18, r24
    5f66:	39 07       	cpc	r19, r25
    5f68:	29 f4       	brne	.+10     	; 0x5f74 <lora_driver_set_application_key+0x1e>
    5f6a:	bc 01       	movw	r22, r24
    5f6c:	82 e2       	ldi	r24, 0x22	; 34
    5f6e:	96 e0       	ldi	r25, 0x06	; 6
    5f70:	48 cf       	rjmp	.-368    	; 0x5e02 <_upload_message_rc>
    5f72:	08 95       	ret
    5f74:	89 e0       	ldi	r24, 0x09	; 9
    5f76:	08 95       	ret

00005f78 <lora_driver_save_mac>:
    5f78:	60 e0       	ldi	r22, 0x00	; 0
    5f7a:	70 e0       	ldi	r23, 0x00	; 0
    5f7c:	81 e6       	ldi	r24, 0x61	; 97
    5f7e:	96 e0       	ldi	r25, 0x06	; 6
    5f80:	40 cf       	rjmp	.-384    	; 0x5e02 <_upload_message_rc>
    5f82:	08 95       	ret

00005f84 <lora_driver_join>:
    5f84:	e8 2f       	mov	r30, r24
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	ee 0f       	add	r30, r30
    5f8a:	ff 1f       	adc	r31, r31
    5f8c:	eb 5d       	subi	r30, 0xDB	; 219
    5f8e:	f7 4f       	sbci	r31, 0xF7	; 247
    5f90:	60 81       	ld	r22, Z
    5f92:	71 81       	ldd	r23, Z+1	; 0x01
    5f94:	8a e6       	ldi	r24, 0x6A	; 106
    5f96:	96 e0       	ldi	r25, 0x06	; 6
    5f98:	34 df       	rcall	.-408    	; 0x5e02 <_upload_message_rc>
    5f9a:	81 11       	cpse	r24, r1
    5f9c:	12 c0       	rjmp	.+36     	; 0x5fc2 <lora_driver_join+0x3e>
    5f9e:	28 e2       	ldi	r18, 0x28	; 40
    5fa0:	35 e0       	ldi	r19, 0x05	; 5
    5fa2:	4d e2       	ldi	r20, 0x2D	; 45
    5fa4:	50 e0       	ldi	r21, 0x00	; 0
    5fa6:	6b e6       	ldi	r22, 0x6B	; 107
    5fa8:	7a e0       	ldi	r23, 0x0A	; 10
    5faa:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <_reply_buffer_handle>
    5fae:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <_reply_buffer_handle+0x1>
    5fb2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xStreamBufferReceive>
    5fb6:	88 23       	and	r24, r24
    5fb8:	21 f0       	breq	.+8      	; 0x5fc2 <lora_driver_join+0x3e>
    5fba:	8b e6       	ldi	r24, 0x6B	; 107
    5fbc:	9a e0       	ldi	r25, 0x0A	; 10
    5fbe:	e6 ce       	rjmp	.-564    	; 0x5d8c <_reply2return_code>
    5fc0:	08 95       	ret
    5fc2:	8b e6       	ldi	r24, 0x6B	; 107
    5fc4:	9a e0       	ldi	r25, 0x0A	; 10
    5fc6:	e2 ce       	rjmp	.-572    	; 0x5d8c <_reply2return_code>
    5fc8:	08 95       	ret

00005fca <lora_driver_sent_upload_message>:
    5fca:	cf 93       	push	r28
    5fcc:	df 93       	push	r29
    5fce:	1f 92       	push	r1
    5fd0:	cd b7       	in	r28, 0x3d	; 61
    5fd2:	de b7       	in	r29, 0x3e	; 62
    5fd4:	db 01       	movw	r26, r22
    5fd6:	11 96       	adiw	r26, 0x01	; 1
    5fd8:	9c 91       	ld	r25, X
    5fda:	11 97       	sbiw	r26, 0x01	; 1
    5fdc:	95 31       	cpi	r25, 0x15	; 21
    5fde:	08 f0       	brcs	.+2      	; 0x5fe2 <lora_driver_sent_upload_message+0x18>
    5fe0:	87 c0       	rjmp	.+270    	; 0x60f0 <lora_driver_sent_upload_message+0x126>
    5fe2:	99 23       	and	r25, r25
    5fe4:	81 f1       	breq	.+96     	; 0x6046 <lora_driver_sent_upload_message+0x7c>
    5fe6:	60 e0       	ldi	r22, 0x00	; 0
    5fe8:	70 e0       	ldi	r23, 0x00	; 0
    5fea:	27 2f       	mov	r18, r23
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	46 2f       	mov	r20, r22
    5ff0:	50 e0       	ldi	r21, 0x00	; 0
    5ff2:	fd 01       	movw	r30, r26
    5ff4:	e4 0f       	add	r30, r20
    5ff6:	f5 1f       	adc	r31, r21
    5ff8:	92 81       	ldd	r25, Z+2	; 0x02
    5ffa:	92 95       	swap	r25
    5ffc:	9f 70       	andi	r25, 0x0F	; 15
    5ffe:	9a 30       	cpi	r25, 0x0A	; 10
    6000:	10 f0       	brcs	.+4      	; 0x6006 <lora_driver_sent_upload_message+0x3c>
    6002:	99 5c       	subi	r25, 0xC9	; 201
    6004:	01 c0       	rjmp	.+2      	; 0x6008 <lora_driver_sent_upload_message+0x3e>
    6006:	90 5d       	subi	r25, 0xD0	; 208
    6008:	f9 01       	movw	r30, r18
    600a:	e4 50       	subi	r30, 0x04	; 4
    600c:	f6 4f       	sbci	r31, 0xF6	; 246
    600e:	90 83       	st	Z, r25
    6010:	2f 5f       	subi	r18, 0xFF	; 255
    6012:	3f 4f       	sbci	r19, 0xFF	; 255
    6014:	fd 01       	movw	r30, r26
    6016:	e4 0f       	add	r30, r20
    6018:	f5 1f       	adc	r31, r21
    601a:	92 81       	ldd	r25, Z+2	; 0x02
    601c:	9f 70       	andi	r25, 0x0F	; 15
    601e:	49 2f       	mov	r20, r25
    6020:	50 e0       	ldi	r21, 0x00	; 0
    6022:	4a 30       	cpi	r20, 0x0A	; 10
    6024:	51 05       	cpc	r21, r1
    6026:	14 f0       	brlt	.+4      	; 0x602c <lora_driver_sent_upload_message+0x62>
    6028:	99 5c       	subi	r25, 0xC9	; 201
    602a:	01 c0       	rjmp	.+2      	; 0x602e <lora_driver_sent_upload_message+0x64>
    602c:	90 5d       	subi	r25, 0xD0	; 208
    602e:	f9 01       	movw	r30, r18
    6030:	e4 50       	subi	r30, 0x04	; 4
    6032:	f6 4f       	sbci	r31, 0xF6	; 246
    6034:	90 83       	st	Z, r25
    6036:	7e 5f       	subi	r23, 0xFE	; 254
    6038:	6f 5f       	subi	r22, 0xFF	; 255
    603a:	11 96       	adiw	r26, 0x01	; 1
    603c:	9c 91       	ld	r25, X
    603e:	11 97       	sbiw	r26, 0x01	; 1
    6040:	69 17       	cp	r22, r25
    6042:	98 f2       	brcs	.-90     	; 0x5fea <lora_driver_sent_upload_message+0x20>
    6044:	01 c0       	rjmp	.+2      	; 0x6048 <lora_driver_sent_upload_message+0x7e>
    6046:	70 e0       	ldi	r23, 0x00	; 0
    6048:	e7 2f       	mov	r30, r23
    604a:	f0 e0       	ldi	r31, 0x00	; 0
    604c:	e4 50       	subi	r30, 0x04	; 4
    604e:	f6 4f       	sbci	r31, 0xF6	; 246
    6050:	10 82       	st	Z, r1
    6052:	4c 91       	ld	r20, X
    6054:	81 11       	cpse	r24, r1
    6056:	03 c0       	rjmp	.+6      	; 0x605e <lora_driver_sent_upload_message+0x94>
    6058:	83 e7       	ldi	r24, 0x73	; 115
    605a:	96 e0       	ldi	r25, 0x06	; 6
    605c:	02 c0       	rjmp	.+4      	; 0x6062 <lora_driver_sent_upload_message+0x98>
    605e:	85 e7       	ldi	r24, 0x75	; 117
    6060:	96 e0       	ldi	r25, 0x06	; 6
    6062:	2c ef       	ldi	r18, 0xFC	; 252
    6064:	39 e0       	ldi	r19, 0x09	; 9
    6066:	3f 93       	push	r19
    6068:	2f 93       	push	r18
    606a:	1f 92       	push	r1
    606c:	4f 93       	push	r20
    606e:	9f 93       	push	r25
    6070:	8f 93       	push	r24
    6072:	89 e7       	ldi	r24, 0x79	; 121
    6074:	96 e0       	ldi	r25, 0x06	; 6
    6076:	9f 93       	push	r25
    6078:	8f 93       	push	r24
    607a:	8e e3       	ldi	r24, 0x3E	; 62
    607c:	9a e0       	ldi	r25, 0x0A	; 10
    607e:	9f 93       	push	r25
    6080:	8f 93       	push	r24
    6082:	0e 94 aa 38 	call	0x7154	; 0x7154 <sprintf>
    6086:	60 e0       	ldi	r22, 0x00	; 0
    6088:	70 e0       	ldi	r23, 0x00	; 0
    608a:	8e e3       	ldi	r24, 0x3E	; 62
    608c:	9a e0       	ldi	r25, 0x0A	; 10
    608e:	b9 de       	rcall	.-654    	; 0x5e02 <_upload_message_rc>
    6090:	0f b6       	in	r0, 0x3f	; 63
    6092:	f8 94       	cli
    6094:	de bf       	out	0x3e, r29	; 62
    6096:	0f be       	out	0x3f, r0	; 63
    6098:	cd bf       	out	0x3d, r28	; 61
    609a:	8e 30       	cpi	r24, 0x0E	; 14
    609c:	51 f5       	brne	.+84     	; 0x60f2 <lora_driver_sent_upload_message+0x128>
    609e:	87 e0       	ldi	r24, 0x07	; 7
    60a0:	89 83       	std	Y+1, r24	; 0x01
    60a2:	be 01       	movw	r22, r28
    60a4:	6f 5f       	subi	r22, 0xFF	; 255
    60a6:	7f 4f       	sbci	r23, 0xFF	; 255
    60a8:	8b e6       	ldi	r24, 0x6B	; 107
    60aa:	9a e0       	ldi	r25, 0x0A	; 10
    60ac:	38 d1       	rcall	.+624    	; 0x631e <decode_port_no>
    60ae:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <_downlink_payload>
    60b2:	e9 81       	ldd	r30, Y+1	; 0x01
    60b4:	f0 e0       	ldi	r31, 0x00	; 0
    60b6:	e5 59       	subi	r30, 0x95	; 149
    60b8:	f5 4f       	sbci	r31, 0xF5	; 245
    60ba:	df 01       	movw	r26, r30
    60bc:	0d 90       	ld	r0, X+
    60be:	00 20       	and	r0, r0
    60c0:	e9 f7       	brne	.-6      	; 0x60bc <lora_driver_sent_upload_message+0xf2>
    60c2:	11 97       	sbiw	r26, 0x01	; 1
    60c4:	ae 1b       	sub	r26, r30
    60c6:	bf 0b       	sbc	r27, r31
    60c8:	aa 23       	and	r26, r26
    60ca:	81 f0       	breq	.+32     	; 0x60ec <lora_driver_sent_upload_message+0x122>
    60cc:	bb 27       	eor	r27, r27
    60ce:	11 97       	sbiw	r26, 0x01	; 1
    60d0:	cd 01       	movw	r24, r26
    60d2:	0a f4       	brpl	.+2      	; 0x60d6 <lora_driver_sent_upload_message+0x10c>
    60d4:	01 96       	adiw	r24, 0x01	; 1
    60d6:	95 95       	asr	r25
    60d8:	87 95       	ror	r24
    60da:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <_downlink_payload+0x1>
    60de:	af 01       	movw	r20, r30
    60e0:	4f 5f       	subi	r20, 0xFF	; 255
    60e2:	5f 4f       	sbci	r21, 0xFF	; 255
    60e4:	64 e1       	ldi	r22, 0x14	; 20
    60e6:	88 ee       	ldi	r24, 0xE8	; 232
    60e8:	99 e0       	ldi	r25, 0x09	; 9
    60ea:	45 d1       	rcall	.+650    	; 0x6376 <decode_hexadecimal_string_bytes>
    60ec:	8e e0       	ldi	r24, 0x0E	; 14
    60ee:	01 c0       	rjmp	.+2      	; 0x60f2 <lora_driver_sent_upload_message+0x128>
    60f0:	84 e1       	ldi	r24, 0x14	; 20
    60f2:	0f 90       	pop	r0
    60f4:	df 91       	pop	r29
    60f6:	cf 91       	pop	r28
    60f8:	08 95       	ret

000060fa <lora_driver_set_adaptive_data_rate>:
    60fa:	81 30       	cpi	r24, 0x01	; 1
    60fc:	19 f0       	breq	.+6      	; 0x6104 <lora_driver_set_adaptive_data_rate+0xa>
    60fe:	69 e8       	ldi	r22, 0x89	; 137
    6100:	76 e0       	ldi	r23, 0x06	; 6
    6102:	02 c0       	rjmp	.+4      	; 0x6108 <lora_driver_set_adaptive_data_rate+0xe>
    6104:	69 e4       	ldi	r22, 0x49	; 73
    6106:	77 e0       	ldi	r23, 0x07	; 7
    6108:	8d e8       	ldi	r24, 0x8D	; 141
    610a:	96 e0       	ldi	r25, 0x06	; 6
    610c:	7a ce       	rjmp	.-780    	; 0x5e02 <_upload_message_rc>
    610e:	08 95       	ret

00006110 <lora_driver_configure_to_eu868>:
    6110:	2f 92       	push	r2
    6112:	3f 92       	push	r3
    6114:	4f 92       	push	r4
    6116:	5f 92       	push	r5
    6118:	6f 92       	push	r6
    611a:	7f 92       	push	r7
    611c:	8f 92       	push	r8
    611e:	9f 92       	push	r9
    6120:	af 92       	push	r10
    6122:	bf 92       	push	r11
    6124:	cf 92       	push	r12
    6126:	df 92       	push	r13
    6128:	ef 92       	push	r14
    612a:	ff 92       	push	r15
    612c:	0f 93       	push	r16
    612e:	1f 93       	push	r17
    6130:	cf 93       	push	r28
    6132:	df 93       	push	r29
    6134:	cd b7       	in	r28, 0x3d	; 61
    6136:	de b7       	in	r29, 0x3e	; 62
    6138:	a0 97       	sbiw	r28, 0x20	; 32
    613a:	0f b6       	in	r0, 0x3f	; 63
    613c:	f8 94       	cli
    613e:	de bf       	out	0x3e, r29	; 62
    6140:	0f be       	out	0x3f, r0	; 63
    6142:	cd bf       	out	0x3d, r28	; 61
    6144:	62 ed       	ldi	r22, 0xD2	; 210
    6146:	76 e0       	ldi	r23, 0x06	; 6
    6148:	8e ed       	ldi	r24, 0xDE	; 222
    614a:	96 e0       	ldi	r25, 0x06	; 6
    614c:	c7 dd       	rcall	.-1138   	; 0x5cdc <_upload_message>
    614e:	1e de       	rcall	.-964    	; 0x5d8c <_reply2return_code>
    6150:	81 11       	cpse	r24, r1
    6152:	9f c0       	rjmp	.+318    	; 0x6292 <lora_driver_configure_to_eu868+0x182>
    6154:	80 e2       	ldi	r24, 0x20	; 32
    6156:	ea e3       	ldi	r30, 0x3A	; 58
    6158:	f5 e0       	ldi	r31, 0x05	; 5
    615a:	de 01       	movw	r26, r28
    615c:	11 96       	adiw	r26, 0x01	; 1
    615e:	01 90       	ld	r0, Z+
    6160:	0d 92       	st	X+, r0
    6162:	8a 95       	dec	r24
    6164:	e1 f7       	brne	.-8      	; 0x615e <lora_driver_configure_to_eu868+0x4e>
    6166:	9e 01       	movw	r18, r28
    6168:	2f 5f       	subi	r18, 0xFF	; 255
    616a:	3f 4f       	sbci	r19, 0xFF	; 255
    616c:	69 01       	movw	r12, r18
    616e:	e1 2c       	mov	r14, r1
    6170:	f1 2c       	mov	r15, r1
    6172:	0f 2e       	mov	r0, r31
    6174:	fa ee       	ldi	r31, 0xEA	; 234
    6176:	af 2e       	mov	r10, r31
    6178:	f6 e0       	ldi	r31, 0x06	; 6
    617a:	bf 2e       	mov	r11, r31
    617c:	f0 2d       	mov	r31, r0
    617e:	0e e3       	ldi	r16, 0x3E	; 62
    6180:	1a e0       	ldi	r17, 0x0A	; 10
    6182:	0f 2e       	mov	r0, r31
    6184:	f3 e0       	ldi	r31, 0x03	; 3
    6186:	4f 2e       	mov	r4, r31
    6188:	f7 e0       	ldi	r31, 0x07	; 7
    618a:	5f 2e       	mov	r5, r31
    618c:	f0 2d       	mov	r31, r0
    618e:	0f 2e       	mov	r0, r31
    6190:	fa e1       	ldi	r31, 0x1A	; 26
    6192:	8f 2e       	mov	r8, r31
    6194:	f7 e0       	ldi	r31, 0x07	; 7
    6196:	9f 2e       	mov	r9, r31
    6198:	f0 2d       	mov	r31, r0
    619a:	0f 2e       	mov	r0, r31
    619c:	f4 e3       	ldi	r31, 0x34	; 52
    619e:	6f 2e       	mov	r6, r31
    61a0:	f7 e0       	ldi	r31, 0x07	; 7
    61a2:	7f 2e       	mov	r7, r31
    61a4:	f0 2d       	mov	r31, r0
    61a6:	3e 2c       	mov	r3, r14
    61a8:	2f 2c       	mov	r2, r15
    61aa:	ff 92       	push	r15
    61ac:	ef 92       	push	r14
    61ae:	bf 92       	push	r11
    61b0:	af 92       	push	r10
    61b2:	1f 93       	push	r17
    61b4:	0f 93       	push	r16
    61b6:	ce d7       	rcall	.+3996   	; 0x7154 <sprintf>
    61b8:	60 e0       	ldi	r22, 0x00	; 0
    61ba:	70 e0       	ldi	r23, 0x00	; 0
    61bc:	c8 01       	movw	r24, r16
    61be:	8e dd       	rcall	.-1252   	; 0x5cdc <_upload_message>
    61c0:	e5 dd       	rcall	.-1078   	; 0x5d8c <_reply2return_code>
    61c2:	0f 90       	pop	r0
    61c4:	0f 90       	pop	r0
    61c6:	0f 90       	pop	r0
    61c8:	0f 90       	pop	r0
    61ca:	0f 90       	pop	r0
    61cc:	0f 90       	pop	r0
    61ce:	81 11       	cpse	r24, r1
    61d0:	60 c0       	rjmp	.+192    	; 0x6292 <lora_driver_configure_to_eu868+0x182>
    61d2:	32 e0       	ldi	r19, 0x02	; 2
    61d4:	3e 15       	cp	r19, r14
    61d6:	e0 f4       	brcc	.+56     	; 0x6210 <lora_driver_configure_to_eu868+0x100>
    61d8:	f6 01       	movw	r30, r12
    61da:	83 81       	ldd	r24, Z+3	; 0x03
    61dc:	8f 93       	push	r24
    61de:	82 81       	ldd	r24, Z+2	; 0x02
    61e0:	8f 93       	push	r24
    61e2:	81 81       	ldd	r24, Z+1	; 0x01
    61e4:	8f 93       	push	r24
    61e6:	80 81       	ld	r24, Z
    61e8:	8f 93       	push	r24
    61ea:	ff 92       	push	r15
    61ec:	ef 92       	push	r14
    61ee:	5f 92       	push	r5
    61f0:	4f 92       	push	r4
    61f2:	1f 93       	push	r17
    61f4:	0f 93       	push	r16
    61f6:	ae d7       	rcall	.+3932   	; 0x7154 <sprintf>
    61f8:	60 e0       	ldi	r22, 0x00	; 0
    61fa:	70 e0       	ldi	r23, 0x00	; 0
    61fc:	c8 01       	movw	r24, r16
    61fe:	6e dd       	rcall	.-1316   	; 0x5cdc <_upload_message>
    6200:	c5 dd       	rcall	.-1142   	; 0x5d8c <_reply2return_code>
    6202:	0f b6       	in	r0, 0x3f	; 63
    6204:	f8 94       	cli
    6206:	de bf       	out	0x3e, r29	; 62
    6208:	0f be       	out	0x3f, r0	; 63
    620a:	cd bf       	out	0x3d, r28	; 61
    620c:	81 11       	cpse	r24, r1
    620e:	41 c0       	rjmp	.+130    	; 0x6292 <lora_driver_configure_to_eu868+0x182>
    6210:	2f 92       	push	r2
    6212:	3f 92       	push	r3
    6214:	9f 92       	push	r9
    6216:	8f 92       	push	r8
    6218:	1f 93       	push	r17
    621a:	0f 93       	push	r16
    621c:	9b d7       	rcall	.+3894   	; 0x7154 <sprintf>
    621e:	60 e0       	ldi	r22, 0x00	; 0
    6220:	70 e0       	ldi	r23, 0x00	; 0
    6222:	c8 01       	movw	r24, r16
    6224:	5b dd       	rcall	.-1354   	; 0x5cdc <_upload_message>
    6226:	b2 dd       	rcall	.-1180   	; 0x5d8c <_reply2return_code>
    6228:	0f 90       	pop	r0
    622a:	0f 90       	pop	r0
    622c:	0f 90       	pop	r0
    622e:	0f 90       	pop	r0
    6230:	0f 90       	pop	r0
    6232:	0f 90       	pop	r0
    6234:	81 11       	cpse	r24, r1
    6236:	2d c0       	rjmp	.+90     	; 0x6292 <lora_driver_configure_to_eu868+0x182>
    6238:	2f 92       	push	r2
    623a:	3f 92       	push	r3
    623c:	7f 92       	push	r7
    623e:	6f 92       	push	r6
    6240:	1f 93       	push	r17
    6242:	0f 93       	push	r16
    6244:	87 d7       	rcall	.+3854   	; 0x7154 <sprintf>
    6246:	60 e0       	ldi	r22, 0x00	; 0
    6248:	70 e0       	ldi	r23, 0x00	; 0
    624a:	c8 01       	movw	r24, r16
    624c:	47 dd       	rcall	.-1394   	; 0x5cdc <_upload_message>
    624e:	9e dd       	rcall	.-1220   	; 0x5d8c <_reply2return_code>
    6250:	0f 90       	pop	r0
    6252:	0f 90       	pop	r0
    6254:	0f 90       	pop	r0
    6256:	0f 90       	pop	r0
    6258:	0f 90       	pop	r0
    625a:	0f 90       	pop	r0
    625c:	81 11       	cpse	r24, r1
    625e:	19 c0       	rjmp	.+50     	; 0x6292 <lora_driver_configure_to_eu868+0x182>
    6260:	3f ef       	ldi	r19, 0xFF	; 255
    6262:	e3 1a       	sub	r14, r19
    6264:	f3 0a       	sbc	r15, r19
    6266:	84 e0       	ldi	r24, 0x04	; 4
    6268:	c8 0e       	add	r12, r24
    626a:	d1 1c       	adc	r13, r1
    626c:	98 e0       	ldi	r25, 0x08	; 8
    626e:	e9 16       	cp	r14, r25
    6270:	f1 04       	cpc	r15, r1
    6272:	09 f0       	breq	.+2      	; 0x6276 <lora_driver_configure_to_eu868+0x166>
    6274:	98 cf       	rjmp	.-208    	; 0x61a6 <lora_driver_configure_to_eu868+0x96>
    6276:	60 e0       	ldi	r22, 0x00	; 0
    6278:	70 e0       	ldi	r23, 0x00	; 0
    627a:	8c e4       	ldi	r24, 0x4C	; 76
    627c:	97 e0       	ldi	r25, 0x07	; 7
    627e:	2e dd       	rcall	.-1444   	; 0x5cdc <_upload_message>
    6280:	85 dd       	rcall	.-1270   	; 0x5d8c <_reply2return_code>
    6282:	81 11       	cpse	r24, r1
    6284:	06 c0       	rjmp	.+12     	; 0x6292 <lora_driver_configure_to_eu868+0x182>
    6286:	60 e0       	ldi	r22, 0x00	; 0
    6288:	70 e0       	ldi	r23, 0x00	; 0
    628a:	8d e5       	ldi	r24, 0x5D	; 93
    628c:	97 e0       	ldi	r25, 0x07	; 7
    628e:	26 dd       	rcall	.-1460   	; 0x5cdc <_upload_message>
    6290:	7d dd       	rcall	.-1286   	; 0x5d8c <_reply2return_code>
    6292:	a0 96       	adiw	r28, 0x20	; 32
    6294:	0f b6       	in	r0, 0x3f	; 63
    6296:	f8 94       	cli
    6298:	de bf       	out	0x3e, r29	; 62
    629a:	0f be       	out	0x3f, r0	; 63
    629c:	cd bf       	out	0x3d, r28	; 61
    629e:	df 91       	pop	r29
    62a0:	cf 91       	pop	r28
    62a2:	1f 91       	pop	r17
    62a4:	0f 91       	pop	r16
    62a6:	ff 90       	pop	r15
    62a8:	ef 90       	pop	r14
    62aa:	df 90       	pop	r13
    62ac:	cf 90       	pop	r12
    62ae:	bf 90       	pop	r11
    62b0:	af 90       	pop	r10
    62b2:	9f 90       	pop	r9
    62b4:	8f 90       	pop	r8
    62b6:	7f 90       	pop	r7
    62b8:	6f 90       	pop	r6
    62ba:	5f 90       	pop	r5
    62bc:	4f 90       	pop	r4
    62be:	3f 90       	pop	r3
    62c0:	2f 90       	pop	r2
    62c2:	08 95       	ret

000062c4 <lora_driver_set_otaa_identity>:
    62c4:	ef 92       	push	r14
    62c6:	ff 92       	push	r15
    62c8:	0f 93       	push	r16
    62ca:	1f 93       	push	r17
    62cc:	cf 93       	push	r28
    62ce:	df 93       	push	r29
    62d0:	ec 01       	movw	r28, r24
    62d2:	8b 01       	movw	r16, r22
    62d4:	7a 01       	movw	r14, r20
    62d6:	81 e0       	ldi	r24, 0x01	; 1
    62d8:	10 df       	rcall	.-480    	; 0x60fa <lora_driver_set_adaptive_data_rate>
    62da:	81 11       	cpse	r24, r1
    62dc:	0d c0       	rjmp	.+26     	; 0x62f8 <lora_driver_set_otaa_identity+0x34>
    62de:	ce 01       	movw	r24, r28
    62e0:	29 de       	rcall	.-942    	; 0x5f34 <lora_driver_set_application_identifier>
    62e2:	81 11       	cpse	r24, r1
    62e4:	09 c0       	rjmp	.+18     	; 0x62f8 <lora_driver_set_otaa_identity+0x34>
    62e6:	c8 01       	movw	r24, r16
    62e8:	36 de       	rcall	.-916    	; 0x5f56 <lora_driver_set_application_key>
    62ea:	81 11       	cpse	r24, r1
    62ec:	05 c0       	rjmp	.+10     	; 0x62f8 <lora_driver_set_otaa_identity+0x34>
    62ee:	c7 01       	movw	r24, r14
    62f0:	10 de       	rcall	.-992    	; 0x5f12 <lora_driver_set_device_identifier>
    62f2:	81 11       	cpse	r24, r1
    62f4:	01 c0       	rjmp	.+2      	; 0x62f8 <lora_driver_set_otaa_identity+0x34>
    62f6:	40 de       	rcall	.-896    	; 0x5f78 <lora_driver_save_mac>
    62f8:	df 91       	pop	r29
    62fa:	cf 91       	pop	r28
    62fc:	1f 91       	pop	r17
    62fe:	0f 91       	pop	r16
    6300:	ff 90       	pop	r15
    6302:	ef 90       	pop	r14
    6304:	08 95       	ret

00006306 <lora_driver_map_return_code_to_text>:
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	fc 01       	movw	r30, r24
    630a:	ee 0f       	add	r30, r30
    630c:	ff 1f       	adc	r31, r31
    630e:	8e 0f       	add	r24, r30
    6310:	9f 1f       	adc	r25, r31
    6312:	fc 01       	movw	r30, r24
    6314:	e7 5d       	subi	r30, 0xD7	; 215
    6316:	f7 4f       	sbci	r31, 0xF7	; 247
    6318:	81 81       	ldd	r24, Z+1	; 0x01
    631a:	92 81       	ldd	r25, Z+2	; 0x02
    631c:	08 95       	ret

0000631e <decode_port_no>:
    631e:	dc 01       	movw	r26, r24
    6320:	00 97       	sbiw	r24, 0x00	; 0
    6322:	29 f1       	breq	.+74     	; 0x636e <decode_port_no+0x50>
    6324:	fb 01       	movw	r30, r22
    6326:	20 81       	ld	r18, Z
    6328:	fc 01       	movw	r30, r24
    632a:	01 90       	ld	r0, Z+
    632c:	00 20       	and	r0, r0
    632e:	e9 f7       	brne	.-6      	; 0x632a <decode_port_no+0xc>
    6330:	31 97       	sbiw	r30, 0x01	; 1
    6332:	e8 1b       	sub	r30, r24
    6334:	f9 0b       	sbc	r31, r25
    6336:	82 2f       	mov	r24, r18
    6338:	90 e0       	ldi	r25, 0x00	; 0
    633a:	e8 17       	cp	r30, r24
    633c:	f9 07       	cpc	r31, r25
    633e:	c8 f0       	brcs	.+50     	; 0x6372 <decode_port_no+0x54>
    6340:	80 e0       	ldi	r24, 0x00	; 0
    6342:	08 c0       	rjmp	.+16     	; 0x6354 <decode_port_no+0x36>
    6344:	88 0f       	add	r24, r24
    6346:	38 2f       	mov	r19, r24
    6348:	33 0f       	add	r19, r19
    634a:	33 0f       	add	r19, r19
    634c:	83 0f       	add	r24, r19
    634e:	80 53       	subi	r24, 0x30	; 48
    6350:	89 0f       	add	r24, r25
    6352:	2f 5f       	subi	r18, 0xFF	; 255
    6354:	fd 01       	movw	r30, r26
    6356:	e2 0f       	add	r30, r18
    6358:	f1 1d       	adc	r31, r1
    635a:	90 81       	ld	r25, Z
    635c:	30 ed       	ldi	r19, 0xD0	; 208
    635e:	39 0f       	add	r19, r25
    6360:	3a 30       	cpi	r19, 0x0A	; 10
    6362:	10 f4       	brcc	.+4      	; 0x6368 <decode_port_no+0x4a>
    6364:	91 11       	cpse	r25, r1
    6366:	ee cf       	rjmp	.-36     	; 0x6344 <decode_port_no+0x26>
    6368:	fb 01       	movw	r30, r22
    636a:	20 83       	st	Z, r18
    636c:	08 95       	ret
    636e:	80 e0       	ldi	r24, 0x00	; 0
    6370:	08 95       	ret
    6372:	80 e0       	ldi	r24, 0x00	; 0
    6374:	08 95       	ret

00006376 <decode_hexadecimal_string_bytes>:
    6376:	0f 93       	push	r16
    6378:	1f 93       	push	r17
    637a:	cf 93       	push	r28
    637c:	df 93       	push	r29
    637e:	dc 01       	movw	r26, r24
    6380:	ea 01       	movw	r28, r20
    6382:	20 97       	sbiw	r28, 0x00	; 0
    6384:	e1 f1       	breq	.+120    	; 0x63fe <decode_hexadecimal_string_bytes+0x88>
    6386:	fa 01       	movw	r30, r20
    6388:	01 90       	ld	r0, Z+
    638a:	00 20       	and	r0, r0
    638c:	e9 f7       	brne	.-6      	; 0x6388 <decode_hexadecimal_string_bytes+0x12>
    638e:	31 97       	sbiw	r30, 0x01	; 1
    6390:	e4 1b       	sub	r30, r20
    6392:	f5 0b       	sbc	r31, r21
    6394:	32 97       	sbiw	r30, 0x02	; 2
    6396:	10 f5       	brcc	.+68     	; 0x63dc <decode_hexadecimal_string_bytes+0x66>
    6398:	32 c0       	rjmp	.+100    	; 0x63fe <decode_hexadecimal_string_bytes+0x88>
    639a:	8d 01       	movw	r16, r26
    639c:	04 0f       	add	r16, r20
    639e:	15 1f       	adc	r17, r21
    63a0:	30 e0       	ldi	r19, 0x00	; 0
    63a2:	ae 01       	movw	r20, r28
    63a4:	42 0f       	add	r20, r18
    63a6:	53 1f       	adc	r21, r19
    63a8:	fa 01       	movw	r30, r20
    63aa:	90 81       	ld	r25, Z
    63ac:	91 34       	cpi	r25, 0x41	; 65
    63ae:	28 f0       	brcs	.+10     	; 0x63ba <decode_hexadecimal_string_bytes+0x44>
    63b0:	97 53       	subi	r25, 0x37	; 55
    63b2:	59 2f       	mov	r21, r25
    63b4:	52 95       	swap	r21
    63b6:	50 7f       	andi	r21, 0xF0	; 240
    63b8:	03 c0       	rjmp	.+6      	; 0x63c0 <decode_hexadecimal_string_bytes+0x4a>
    63ba:	59 2f       	mov	r21, r25
    63bc:	52 95       	swap	r21
    63be:	50 7f       	andi	r21, 0xF0	; 240
    63c0:	2c 0f       	add	r18, r28
    63c2:	3d 1f       	adc	r19, r29
    63c4:	f9 01       	movw	r30, r18
    63c6:	91 81       	ldd	r25, Z+1	; 0x01
    63c8:	91 34       	cpi	r25, 0x41	; 65
    63ca:	10 f0       	brcs	.+4      	; 0x63d0 <decode_hexadecimal_string_bytes+0x5a>
    63cc:	97 53       	subi	r25, 0x37	; 55
    63ce:	01 c0       	rjmp	.+2      	; 0x63d2 <decode_hexadecimal_string_bytes+0x5c>
    63d0:	90 53       	subi	r25, 0x30	; 48
    63d2:	95 0f       	add	r25, r21
    63d4:	f8 01       	movw	r30, r16
    63d6:	90 83       	st	Z, r25
    63d8:	8f 5f       	subi	r24, 0xFF	; 255
    63da:	01 c0       	rjmp	.+2      	; 0x63de <decode_hexadecimal_string_bytes+0x68>
    63dc:	80 e0       	ldi	r24, 0x00	; 0
    63de:	28 2f       	mov	r18, r24
    63e0:	22 0f       	add	r18, r18
    63e2:	48 2f       	mov	r20, r24
    63e4:	50 e0       	ldi	r21, 0x00	; 0
    63e6:	fe 01       	movw	r30, r28
    63e8:	01 90       	ld	r0, Z+
    63ea:	00 20       	and	r0, r0
    63ec:	e9 f7       	brne	.-6      	; 0x63e8 <decode_hexadecimal_string_bytes+0x72>
    63ee:	31 97       	sbiw	r30, 0x01	; 1
    63f0:	ec 1b       	sub	r30, r28
    63f2:	fd 0b       	sbc	r31, r29
    63f4:	4e 17       	cp	r20, r30
    63f6:	5f 07       	cpc	r21, r31
    63f8:	10 f4       	brcc	.+4      	; 0x63fe <decode_hexadecimal_string_bytes+0x88>
    63fa:	86 13       	cpse	r24, r22
    63fc:	ce cf       	rjmp	.-100    	; 0x639a <decode_hexadecimal_string_bytes+0x24>
    63fe:	df 91       	pop	r29
    6400:	cf 91       	pop	r28
    6402:	1f 91       	pop	r17
    6404:	0f 91       	pop	r16
    6406:	08 95       	ret

00006408 <reg_read_register>:
    6408:	fc 01       	movw	r30, r24
    640a:	80 81       	ld	r24, Z
    640c:	08 95       	ret

0000640e <reg_read_bit>:
    640e:	fc 01       	movw	r30, r24
    6410:	20 81       	ld	r18, Z
    6412:	81 e0       	ldi	r24, 0x01	; 1
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	02 c0       	rjmp	.+4      	; 0x641c <reg_read_bit+0xe>
    6418:	88 0f       	add	r24, r24
    641a:	99 1f       	adc	r25, r25
    641c:	6a 95       	dec	r22
    641e:	e2 f7       	brpl	.-8      	; 0x6418 <reg_read_bit+0xa>
    6420:	82 23       	and	r24, r18
    6422:	08 95       	ret

00006424 <reg_read_bits>:
    6424:	fc 01       	movw	r30, r24
    6426:	80 81       	ld	r24, Z
    6428:	86 23       	and	r24, r22
    642a:	08 95       	ret

0000642c <reg_set_register>:
    642c:	fc 01       	movw	r30, r24
    642e:	60 83       	st	Z, r22
    6430:	08 95       	ret

00006432 <reg_clear_register>:
    6432:	fc 01       	movw	r30, r24
    6434:	10 82       	st	Z, r1
    6436:	08 95       	ret

00006438 <reg_set_bit>:
    6438:	fc 01       	movw	r30, r24
    643a:	40 81       	ld	r20, Z
    643c:	21 e0       	ldi	r18, 0x01	; 1
    643e:	30 e0       	ldi	r19, 0x00	; 0
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <reg_set_bit+0xe>
    6442:	22 0f       	add	r18, r18
    6444:	33 1f       	adc	r19, r19
    6446:	6a 95       	dec	r22
    6448:	e2 f7       	brpl	.-8      	; 0x6442 <reg_set_bit+0xa>
    644a:	24 2b       	or	r18, r20
    644c:	20 83       	st	Z, r18
    644e:	08 95       	ret

00006450 <reg_set_bits>:
    6450:	fc 01       	movw	r30, r24
    6452:	20 81       	ld	r18, Z
    6454:	62 2b       	or	r22, r18
    6456:	60 83       	st	Z, r22
    6458:	08 95       	ret

0000645a <reg_toggle_bit>:
    645a:	fc 01       	movw	r30, r24
    645c:	40 81       	ld	r20, Z
    645e:	21 e0       	ldi	r18, 0x01	; 1
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	02 c0       	rjmp	.+4      	; 0x6468 <reg_toggle_bit+0xe>
    6464:	22 0f       	add	r18, r18
    6466:	33 1f       	adc	r19, r19
    6468:	6a 95       	dec	r22
    646a:	e2 f7       	brpl	.-8      	; 0x6464 <reg_toggle_bit+0xa>
    646c:	24 27       	eor	r18, r20
    646e:	20 83       	st	Z, r18
    6470:	08 95       	ret

00006472 <reg_toggle_bits>:
    6472:	fc 01       	movw	r30, r24
    6474:	20 81       	ld	r18, Z
    6476:	62 27       	eor	r22, r18
    6478:	60 83       	st	Z, r22
    647a:	08 95       	ret

0000647c <reg_clear_bit>:
    647c:	fc 01       	movw	r30, r24
    647e:	90 81       	ld	r25, Z
    6480:	21 e0       	ldi	r18, 0x01	; 1
    6482:	30 e0       	ldi	r19, 0x00	; 0
    6484:	02 c0       	rjmp	.+4      	; 0x648a <reg_clear_bit+0xe>
    6486:	22 0f       	add	r18, r18
    6488:	33 1f       	adc	r19, r19
    648a:	6a 95       	dec	r22
    648c:	e2 f7       	brpl	.-8      	; 0x6486 <reg_clear_bit+0xa>
    648e:	20 95       	com	r18
    6490:	29 23       	and	r18, r25
    6492:	20 83       	st	Z, r18
    6494:	08 95       	ret

00006496 <reg_clear_bits>:
    6496:	fc 01       	movw	r30, r24
    6498:	90 81       	ld	r25, Z
    649a:	60 95       	com	r22
    649c:	69 23       	and	r22, r25
    649e:	60 83       	st	Z, r22
    64a0:	08 95       	ret

000064a2 <_serial_call_back>:
    64a2:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <crc_sum.1941>
    64a6:	86 0f       	add	r24, r22
    64a8:	80 93 9b 0a 	sts	0x0A9B, r24	; 0x800a9b <crc_sum.1941>
    64ac:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <_mh_state>
    64b0:	91 30       	cpi	r25, 0x01	; 1
    64b2:	79 f0       	breq	.+30     	; 0x64d2 <_serial_call_back+0x30>
    64b4:	28 f0       	brcs	.+10     	; 0x64c0 <_serial_call_back+0x1e>
    64b6:	92 30       	cpi	r25, 0x02	; 2
    64b8:	a9 f0       	breq	.+42     	; 0x64e4 <_serial_call_back+0x42>
    64ba:	93 30       	cpi	r25, 0x03	; 3
    64bc:	19 f1       	breq	.+70     	; 0x6504 <_serial_call_back+0x62>
    64be:	08 95       	ret
    64c0:	6f 3f       	cpi	r22, 0xFF	; 255
    64c2:	09 f0       	breq	.+2      	; 0x64c6 <_serial_call_back+0x24>
    64c4:	48 c0       	rjmp	.+144    	; 0x6556 <_serial_call_back+0xb4>
    64c6:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <crc_sum.1941>
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <_mh_state>
    64d0:	08 95       	ret
    64d2:	66 38       	cpi	r22, 0x86	; 134
    64d4:	09 f0       	breq	.+2      	; 0x64d8 <_serial_call_back+0x36>
    64d6:	3f c0       	rjmp	.+126    	; 0x6556 <_serial_call_back+0xb4>
    64d8:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <inDex.1939>
    64dc:	82 e0       	ldi	r24, 0x02	; 2
    64de:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <_mh_state>
    64e2:	08 95       	ret
    64e4:	e0 91 9a 0a 	lds	r30, 0x0A9A	; 0x800a9a <inDex.1939>
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	8e 0f       	add	r24, r30
    64ec:	80 93 9a 0a 	sts	0x0A9A, r24	; 0x800a9a <inDex.1939>
    64f0:	f0 e0       	ldi	r31, 0x00	; 0
    64f2:	e8 56       	subi	r30, 0x68	; 104
    64f4:	f5 4f       	sbci	r31, 0xF5	; 245
    64f6:	60 83       	st	Z, r22
    64f8:	82 30       	cpi	r24, 0x02	; 2
    64fa:	69 f5       	brne	.+90     	; 0x6556 <_serial_call_back+0xb4>
    64fc:	83 e0       	ldi	r24, 0x03	; 3
    64fe:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <_mh_state>
    6502:	08 95       	ret
    6504:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <inDex.1939>
    6508:	21 e0       	ldi	r18, 0x01	; 1
    650a:	29 0f       	add	r18, r25
    650c:	20 93 9a 0a 	sts	0x0A9A, r18	; 0x800a9a <inDex.1939>
    6510:	96 30       	cpi	r25, 0x06	; 6
    6512:	09 f5       	brne	.+66     	; 0x6556 <_serial_call_back+0xb4>
    6514:	81 11       	cpse	r24, r1
    6516:	0e c0       	rjmp	.+28     	; 0x6534 <_serial_call_back+0x92>
    6518:	e8 e9       	ldi	r30, 0x98	; 152
    651a:	fa e0       	ldi	r31, 0x0A	; 10
    651c:	80 81       	ld	r24, Z
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	98 2f       	mov	r25, r24
    6522:	88 27       	eor	r24, r24
    6524:	21 81       	ldd	r18, Z+1	; 0x01
    6526:	82 0f       	add	r24, r18
    6528:	91 1d       	adc	r25, r1
    652a:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <_ppm+0x1>
    652e:	80 93 9f 0a 	sts	0x0A9F, r24	; 0x800a9f <_ppm>
    6532:	04 c0       	rjmp	.+8      	; 0x653c <_serial_call_back+0x9a>
    6534:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <_ppm+0x1>
    6538:	10 92 9f 0a 	sts	0x0A9F, r1	; 0x800a9f <_ppm>
    653c:	10 92 9e 0a 	sts	0x0A9E, r1	; 0x800a9e <_mh_state>
    6540:	e0 91 9c 0a 	lds	r30, 0x0A9C	; 0x800a9c <_app_call_back>
    6544:	f0 91 9d 0a 	lds	r31, 0x0A9D	; 0x800a9d <_app_call_back+0x1>
    6548:	30 97       	sbiw	r30, 0x00	; 0
    654a:	29 f0       	breq	.+10     	; 0x6556 <_serial_call_back+0xb4>
    654c:	80 91 9f 0a 	lds	r24, 0x0A9F	; 0x800a9f <_ppm>
    6550:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <_ppm+0x1>
    6554:	19 95       	eicall
    6556:	08 95       	ret

00006558 <mh_z19_create>:
    6558:	8f 92       	push	r8
    655a:	9f 92       	push	r9
    655c:	af 92       	push	r10
    655e:	cf 92       	push	r12
    6560:	ef 92       	push	r14
    6562:	0f 93       	push	r16
    6564:	cf 93       	push	r28
    6566:	df 93       	push	r29
    6568:	eb 01       	movw	r28, r22
    656a:	0f 2e       	mov	r0, r31
    656c:	f1 e5       	ldi	r31, 0x51	; 81
    656e:	8f 2e       	mov	r8, r31
    6570:	f2 e3       	ldi	r31, 0x32	; 50
    6572:	9f 2e       	mov	r9, r31
    6574:	f0 2d       	mov	r31, r0
    6576:	68 94       	set
    6578:	aa 24       	eor	r10, r10
    657a:	a4 f8       	bld	r10, 4
    657c:	68 94       	set
    657e:	cc 24       	eor	r12, r12
    6580:	c4 f8       	bld	r12, 4
    6582:	e1 2c       	mov	r14, r1
    6584:	00 e0       	ldi	r16, 0x00	; 0
    6586:	23 e0       	ldi	r18, 0x03	; 3
    6588:	40 e8       	ldi	r20, 0x80	; 128
    658a:	55 e2       	ldi	r21, 0x25	; 37
    658c:	60 e0       	ldi	r22, 0x00	; 0
    658e:	70 e0       	ldi	r23, 0x00	; 0
    6590:	0e 94 0b 28 	call	0x5016	; 0x5016 <serial_new_instance>
    6594:	90 93 a2 0a 	sts	0x0AA2, r25	; 0x800aa2 <_serial+0x1>
    6598:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <_serial>
    659c:	d0 93 9d 0a 	sts	0x0A9D, r29	; 0x800a9d <_app_call_back+0x1>
    65a0:	c0 93 9c 0a 	sts	0x0A9C, r28	; 0x800a9c <_app_call_back>
    65a4:	df 91       	pop	r29
    65a6:	cf 91       	pop	r28
    65a8:	0f 91       	pop	r16
    65aa:	ef 90       	pop	r14
    65ac:	cf 90       	pop	r12
    65ae:	af 90       	pop	r10
    65b0:	9f 90       	pop	r9
    65b2:	8f 90       	pop	r8
    65b4:	08 95       	ret

000065b6 <mh_z19_take_meassuring>:
    65b6:	cf 93       	push	r28
    65b8:	df 93       	push	r29
    65ba:	cd b7       	in	r28, 0x3d	; 61
    65bc:	de b7       	in	r29, 0x3e	; 62
    65be:	29 97       	sbiw	r28, 0x09	; 9
    65c0:	0f b6       	in	r0, 0x3f	; 63
    65c2:	f8 94       	cli
    65c4:	de bf       	out	0x3e, r29	; 62
    65c6:	0f be       	out	0x3f, r0	; 63
    65c8:	cd bf       	out	0x3d, r28	; 61
    65ca:	89 e0       	ldi	r24, 0x09	; 9
    65cc:	ea e5       	ldi	r30, 0x5A	; 90
    65ce:	f5 e0       	ldi	r31, 0x05	; 5
    65d0:	9e 01       	movw	r18, r28
    65d2:	2f 5f       	subi	r18, 0xFF	; 255
    65d4:	3f 4f       	sbci	r19, 0xFF	; 255
    65d6:	d9 01       	movw	r26, r18
    65d8:	01 90       	ld	r0, Z+
    65da:	0d 92       	st	X+, r0
    65dc:	8a 95       	dec	r24
    65de:	e1 f7       	brne	.-8      	; 0x65d8 <mh_z19_take_meassuring+0x22>
    65e0:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <_ppm+0x1>
    65e4:	10 92 9f 0a 	sts	0x0A9F, r1	; 0x800a9f <_ppm>
    65e8:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <_serial>
    65ec:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <_serial+0x1>
    65f0:	00 97       	sbiw	r24, 0x00	; 0
    65f2:	39 f0       	breq	.+14     	; 0x6602 <mh_z19_take_meassuring+0x4c>
    65f4:	42 2f       	mov	r20, r18
    65f6:	53 2f       	mov	r21, r19
    65f8:	69 e0       	ldi	r22, 0x09	; 9
    65fa:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <serial_send_bytes>
    65fe:	80 e0       	ldi	r24, 0x00	; 0
    6600:	01 c0       	rjmp	.+2      	; 0x6604 <mh_z19_take_meassuring+0x4e>
    6602:	82 e0       	ldi	r24, 0x02	; 2
    6604:	29 96       	adiw	r28, 0x09	; 9
    6606:	0f b6       	in	r0, 0x3f	; 63
    6608:	f8 94       	cli
    660a:	de bf       	out	0x3e, r29	; 62
    660c:	0f be       	out	0x3f, r0	; 63
    660e:	cd bf       	out	0x3d, r28	; 61
    6610:	df 91       	pop	r29
    6612:	cf 91       	pop	r28
    6614:	08 95       	ret

00006616 <_initTwiInterface>:
    6616:	80 91 b1 0a 	lds	r24, 0x0AB1	; 0x800ab1 <_twiIsInitiated>
    661a:	81 11       	cpse	r24, r1
    661c:	0c c0       	rjmp	.+24     	; 0x6636 <_initTwiInterface+0x20>
    661e:	8c e0       	ldi	r24, 0x0C	; 12
    6620:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    6624:	8f ef       	ldi	r24, 0xFF	; 255
    6626:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    662a:	84 e0       	ldi	r24, 0x04	; 4
    662c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6630:	81 e0       	ldi	r24, 0x01	; 1
    6632:	80 93 b1 0a 	sts	0x0AB1, r24	; 0x800ab1 <_twiIsInitiated>
    6636:	08 95       	ret

00006638 <twiCreate>:
    6638:	af 92       	push	r10
    663a:	bf 92       	push	r11
    663c:	cf 92       	push	r12
    663e:	df 92       	push	r13
    6640:	ef 92       	push	r14
    6642:	ff 92       	push	r15
    6644:	0f 93       	push	r16
    6646:	1f 93       	push	r17
    6648:	cf 93       	push	r28
    664a:	df 93       	push	r29
    664c:	a8 2e       	mov	r10, r24
    664e:	b6 2e       	mov	r11, r22
    6650:	69 01       	movw	r12, r18
    6652:	7a 01       	movw	r14, r20
    6654:	84 e0       	ldi	r24, 0x04	; 4
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	db d3       	rcall	.+1974   	; 0x6e10 <malloc>
    665a:	ec 01       	movw	r28, r24
    665c:	89 2b       	or	r24, r25
    665e:	61 f1       	breq	.+88     	; 0x66b8 <twiCreate+0x80>
    6660:	a8 82       	st	Y, r10
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	b8 12       	cpse	r11, r24
    6666:	12 c0       	rjmp	.+36     	; 0x668c <twiCreate+0x54>
    6668:	c7 01       	movw	r24, r14
    666a:	b6 01       	movw	r22, r12
    666c:	20 ea       	ldi	r18, 0xA0	; 160
    666e:	36 e8       	ldi	r19, 0x86	; 134
    6670:	41 e0       	ldi	r20, 0x01	; 1
    6672:	50 e0       	ldi	r21, 0x00	; 0
    6674:	6e d1       	rcall	.+732    	; 0x6952 <__udivmodsi4>
    6676:	da 01       	movw	r26, r20
    6678:	c9 01       	movw	r24, r18
    667a:	40 97       	sbiw	r24, 0x10	; 16
    667c:	a1 09       	sbc	r26, r1
    667e:	b1 09       	sbc	r27, r1
    6680:	b6 95       	lsr	r27
    6682:	a7 95       	ror	r26
    6684:	97 95       	ror	r25
    6686:	87 95       	ror	r24
    6688:	89 83       	std	Y+1, r24	; 0x01
    668a:	11 c0       	rjmp	.+34     	; 0x66ae <twiCreate+0x76>
    668c:	c7 01       	movw	r24, r14
    668e:	b6 01       	movw	r22, r12
    6690:	20 e8       	ldi	r18, 0x80	; 128
    6692:	3a e1       	ldi	r19, 0x1A	; 26
    6694:	46 e0       	ldi	r20, 0x06	; 6
    6696:	50 e0       	ldi	r21, 0x00	; 0
    6698:	5c d1       	rcall	.+696    	; 0x6952 <__udivmodsi4>
    669a:	da 01       	movw	r26, r20
    669c:	c9 01       	movw	r24, r18
    669e:	40 97       	sbiw	r24, 0x10	; 16
    66a0:	a1 09       	sbc	r26, r1
    66a2:	b1 09       	sbc	r27, r1
    66a4:	b6 95       	lsr	r27
    66a6:	a7 95       	ror	r26
    66a8:	97 95       	ror	r25
    66aa:	87 95       	ror	r24
    66ac:	89 83       	std	Y+1, r24	; 0x01
    66ae:	1b 83       	std	Y+3, r17	; 0x03
    66b0:	0a 83       	std	Y+2, r16	; 0x02
    66b2:	8c 2f       	mov	r24, r28
    66b4:	9d 2f       	mov	r25, r29
    66b6:	02 c0       	rjmp	.+4      	; 0x66bc <twiCreate+0x84>
    66b8:	80 e0       	ldi	r24, 0x00	; 0
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	df 91       	pop	r29
    66be:	cf 91       	pop	r28
    66c0:	1f 91       	pop	r17
    66c2:	0f 91       	pop	r16
    66c4:	ff 90       	pop	r15
    66c6:	ef 90       	pop	r14
    66c8:	df 90       	pop	r13
    66ca:	cf 90       	pop	r12
    66cc:	bf 90       	pop	r11
    66ce:	af 90       	pop	r10
    66d0:	08 95       	ret

000066d2 <twiIsBusy>:
    66d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    66d6:	81 70       	andi	r24, 0x01	; 1
    66d8:	08 95       	ret

000066da <twiTransmit>:
    66da:	ff 92       	push	r15
    66dc:	0f 93       	push	r16
    66de:	1f 93       	push	r17
    66e0:	cf 93       	push	r28
    66e2:	df 93       	push	r29
    66e4:	00 97       	sbiw	r24, 0x00	; 0
    66e6:	d1 f1       	breq	.+116    	; 0x675c <twiTransmit+0x82>
    66e8:	4a 30       	cpi	r20, 0x0A	; 10
    66ea:	d0 f5       	brcc	.+116    	; 0x6760 <twiTransmit+0x86>
    66ec:	f4 2e       	mov	r15, r20
    66ee:	8b 01       	movw	r16, r22
    66f0:	ec 01       	movw	r28, r24
    66f2:	ef df       	rcall	.-34     	; 0x66d2 <twiIsBusy>
    66f4:	81 11       	cpse	r24, r1
    66f6:	36 c0       	rjmp	.+108    	; 0x6764 <twiTransmit+0x8a>
    66f8:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <_twiCurrentHandler>
    66fc:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <_twiCurrentHandler+0x1>
    6700:	c8 17       	cp	r28, r24
    6702:	d9 07       	cpc	r29, r25
    6704:	41 f0       	breq	.+16     	; 0x6716 <twiTransmit+0x3c>
    6706:	87 df       	rcall	.-242    	; 0x6616 <_initTwiInterface>
    6708:	89 81       	ldd	r24, Y+1	; 0x01
    670a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    670e:	d0 93 a5 0a 	sts	0x0AA5, r29	; 0x800aa5 <_twiCurrentHandler+0x1>
    6712:	c0 93 a4 0a 	sts	0x0AA4, r28	; 0x800aa4 <_twiCurrentHandler>
    6716:	81 e0       	ldi	r24, 0x01	; 1
    6718:	8f 0d       	add	r24, r15
    671a:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <_twiMessageLen>
    671e:	88 81       	ld	r24, Y
    6720:	88 0f       	add	r24, r24
    6722:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <_twiMessageBuffer>
    6726:	ff 20       	and	r15, r15
    6728:	89 f0       	breq	.+34     	; 0x674c <twiTransmit+0x72>
    672a:	f8 01       	movw	r30, r16
    672c:	a8 ea       	ldi	r26, 0xA8	; 168
    672e:	ba e0       	ldi	r27, 0x0A	; 10
    6730:	4f ef       	ldi	r20, 0xFF	; 255
    6732:	4f 0d       	add	r20, r15
    6734:	64 2f       	mov	r22, r20
    6736:	70 e0       	ldi	r23, 0x00	; 0
    6738:	cb 01       	movw	r24, r22
    673a:	01 96       	adiw	r24, 0x01	; 1
    673c:	b8 01       	movw	r22, r16
    673e:	68 0f       	add	r22, r24
    6740:	79 1f       	adc	r23, r25
    6742:	81 91       	ld	r24, Z+
    6744:	8d 93       	st	X+, r24
    6746:	e6 17       	cp	r30, r22
    6748:	f7 07       	cpc	r31, r23
    674a:	d9 f7       	brne	.-10     	; 0x6742 <twiTransmit+0x68>
    674c:	88 ef       	ldi	r24, 0xF8	; 248
    674e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    6752:	85 ea       	ldi	r24, 0xA5	; 165
    6754:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6758:	84 e0       	ldi	r24, 0x04	; 4
    675a:	05 c0       	rjmp	.+10     	; 0x6766 <twiTransmit+0x8c>
    675c:	86 e0       	ldi	r24, 0x06	; 6
    675e:	03 c0       	rjmp	.+6      	; 0x6766 <twiTransmit+0x8c>
    6760:	87 e0       	ldi	r24, 0x07	; 7
    6762:	01 c0       	rjmp	.+2      	; 0x6766 <twiTransmit+0x8c>
    6764:	82 e0       	ldi	r24, 0x02	; 2
    6766:	df 91       	pop	r29
    6768:	cf 91       	pop	r28
    676a:	1f 91       	pop	r17
    676c:	0f 91       	pop	r16
    676e:	ff 90       	pop	r15
    6770:	08 95       	ret

00006772 <twiReceive>:
    6772:	1f 93       	push	r17
    6774:	cf 93       	push	r28
    6776:	df 93       	push	r29
    6778:	00 97       	sbiw	r24, 0x00	; 0
    677a:	29 f1       	breq	.+74     	; 0x67c6 <twiReceive+0x54>
    677c:	6b 30       	cpi	r22, 0x0B	; 11
    677e:	28 f5       	brcc	.+74     	; 0x67ca <twiReceive+0x58>
    6780:	16 2f       	mov	r17, r22
    6782:	ec 01       	movw	r28, r24
    6784:	a6 df       	rcall	.-180    	; 0x66d2 <twiIsBusy>
    6786:	81 11       	cpse	r24, r1
    6788:	22 c0       	rjmp	.+68     	; 0x67ce <twiReceive+0x5c>
    678a:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <_twiCurrentHandler>
    678e:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <_twiCurrentHandler+0x1>
    6792:	c8 17       	cp	r28, r24
    6794:	d9 07       	cpc	r29, r25
    6796:	41 f0       	breq	.+16     	; 0x67a8 <twiReceive+0x36>
    6798:	3e df       	rcall	.-388    	; 0x6616 <_initTwiInterface>
    679a:	89 81       	ldd	r24, Y+1	; 0x01
    679c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    67a0:	d0 93 a5 0a 	sts	0x0AA5, r29	; 0x800aa5 <_twiCurrentHandler+0x1>
    67a4:	c0 93 a4 0a 	sts	0x0AA4, r28	; 0x800aa4 <_twiCurrentHandler>
    67a8:	10 93 a6 0a 	sts	0x0AA6, r17	; 0x800aa6 <_twiMessageLen>
    67ac:	88 81       	ld	r24, Y
    67ae:	88 0f       	add	r24, r24
    67b0:	81 60       	ori	r24, 0x01	; 1
    67b2:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <_twiMessageBuffer>
    67b6:	88 ef       	ldi	r24, 0xF8	; 248
    67b8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    67bc:	85 ea       	ldi	r24, 0xA5	; 165
    67be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    67c2:	85 e0       	ldi	r24, 0x05	; 5
    67c4:	05 c0       	rjmp	.+10     	; 0x67d0 <twiReceive+0x5e>
    67c6:	86 e0       	ldi	r24, 0x06	; 6
    67c8:	03 c0       	rjmp	.+6      	; 0x67d0 <twiReceive+0x5e>
    67ca:	87 e0       	ldi	r24, 0x07	; 7
    67cc:	01 c0       	rjmp	.+2      	; 0x67d0 <twiReceive+0x5e>
    67ce:	82 e0       	ldi	r24, 0x02	; 2
    67d0:	df 91       	pop	r29
    67d2:	cf 91       	pop	r28
    67d4:	1f 91       	pop	r17
    67d6:	08 95       	ret

000067d8 <__vector_39>:
    67d8:	1f 92       	push	r1
    67da:	0f 92       	push	r0
    67dc:	0f b6       	in	r0, 0x3f	; 63
    67de:	0f 92       	push	r0
    67e0:	11 24       	eor	r1, r1
    67e2:	0b b6       	in	r0, 0x3b	; 59
    67e4:	0f 92       	push	r0
    67e6:	2f 93       	push	r18
    67e8:	3f 93       	push	r19
    67ea:	4f 93       	push	r20
    67ec:	5f 93       	push	r21
    67ee:	6f 93       	push	r22
    67f0:	7f 93       	push	r23
    67f2:	8f 93       	push	r24
    67f4:	9f 93       	push	r25
    67f6:	af 93       	push	r26
    67f8:	bf 93       	push	r27
    67fa:	ef 93       	push	r30
    67fc:	ff 93       	push	r31
    67fe:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6802:	8e 2f       	mov	r24, r30
    6804:	90 e0       	ldi	r25, 0x00	; 0
    6806:	fc 01       	movw	r30, r24
    6808:	38 97       	sbiw	r30, 0x08	; 8
    680a:	e1 35       	cpi	r30, 0x51	; 81
    680c:	f1 05       	cpc	r31, r1
    680e:	08 f0       	brcs	.+2      	; 0x6812 <__vector_39+0x3a>
    6810:	75 c0       	rjmp	.+234    	; 0x68fc <__vector_39+0x124>
    6812:	88 27       	eor	r24, r24
    6814:	e4 58       	subi	r30, 0x84	; 132
    6816:	ff 4f       	sbci	r31, 0xFF	; 255
    6818:	8f 4f       	sbci	r24, 0xFF	; 255
    681a:	bd c0       	rjmp	.+378    	; 0x6996 <__tablejump2__>
    681c:	10 92 a3 0a 	sts	0x0AA3, r1	; 0x800aa3 <_index.1885>
    6820:	e0 91 a3 0a 	lds	r30, 0x0AA3	; 0x800aa3 <_index.1885>
    6824:	80 91 a6 0a 	lds	r24, 0x0AA6	; 0x800aa6 <_twiMessageLen>
    6828:	e8 17       	cp	r30, r24
    682a:	70 f4       	brcc	.+28     	; 0x6848 <__vector_39+0x70>
    682c:	81 e0       	ldi	r24, 0x01	; 1
    682e:	8e 0f       	add	r24, r30
    6830:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <_index.1885>
    6834:	f0 e0       	ldi	r31, 0x00	; 0
    6836:	e9 55       	subi	r30, 0x59	; 89
    6838:	f5 4f       	sbci	r31, 0xF5	; 245
    683a:	80 81       	ld	r24, Z
    683c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6840:	85 e8       	ldi	r24, 0x85	; 133
    6842:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6846:	72 c0       	rjmp	.+228    	; 0x692c <__vector_39+0x154>
    6848:	84 e9       	ldi	r24, 0x94	; 148
    684a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    684e:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <_twiCurrentHandler>
    6852:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <_twiCurrentHandler+0x1>
    6856:	dc 01       	movw	r26, r24
    6858:	12 96       	adiw	r26, 0x02	; 2
    685a:	ed 91       	ld	r30, X+
    685c:	fc 91       	ld	r31, X
    685e:	13 97       	sbiw	r26, 0x03	; 3
    6860:	30 97       	sbiw	r30, 0x00	; 0
    6862:	09 f4       	brne	.+2      	; 0x6866 <__vector_39+0x8e>
    6864:	63 c0       	rjmp	.+198    	; 0x692c <__vector_39+0x154>
    6866:	20 e0       	ldi	r18, 0x00	; 0
    6868:	40 e0       	ldi	r20, 0x00	; 0
    686a:	50 e0       	ldi	r21, 0x00	; 0
    686c:	64 e0       	ldi	r22, 0x04	; 4
    686e:	19 95       	eicall
    6870:	5d c0       	rjmp	.+186    	; 0x692c <__vector_39+0x154>
    6872:	e0 91 a3 0a 	lds	r30, 0x0AA3	; 0x800aa3 <_index.1885>
    6876:	81 e0       	ldi	r24, 0x01	; 1
    6878:	8e 0f       	add	r24, r30
    687a:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <_index.1885>
    687e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6882:	f0 e0       	ldi	r31, 0x00	; 0
    6884:	e9 55       	subi	r30, 0x59	; 89
    6886:	f5 4f       	sbci	r31, 0xF5	; 245
    6888:	80 83       	st	Z, r24
    688a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    688e:	80 34       	cpi	r24, 0x40	; 64
    6890:	11 f4       	brne	.+4      	; 0x6896 <__vector_39+0xbe>
    6892:	10 92 a3 0a 	sts	0x0AA3, r1	; 0x800aa3 <_index.1885>
    6896:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <_index.1885>
    689a:	30 e0       	ldi	r19, 0x00	; 0
    689c:	80 91 a6 0a 	lds	r24, 0x0AA6	; 0x800aa6 <_twiMessageLen>
    68a0:	90 e0       	ldi	r25, 0x00	; 0
    68a2:	01 97       	sbiw	r24, 0x01	; 1
    68a4:	28 17       	cp	r18, r24
    68a6:	39 07       	cpc	r19, r25
    68a8:	24 f4       	brge	.+8      	; 0x68b2 <__vector_39+0xda>
    68aa:	85 ec       	ldi	r24, 0xC5	; 197
    68ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    68b0:	3d c0       	rjmp	.+122    	; 0x692c <__vector_39+0x154>
    68b2:	85 e8       	ldi	r24, 0x85	; 133
    68b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    68b8:	39 c0       	rjmp	.+114    	; 0x692c <__vector_39+0x154>
    68ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    68be:	e0 91 a3 0a 	lds	r30, 0x0AA3	; 0x800aa3 <_index.1885>
    68c2:	f0 e0       	ldi	r31, 0x00	; 0
    68c4:	e9 55       	subi	r30, 0x59	; 89
    68c6:	f5 4f       	sbci	r31, 0xF5	; 245
    68c8:	80 83       	st	Z, r24
    68ca:	84 e9       	ldi	r24, 0x94	; 148
    68cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    68d0:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <_twiCurrentHandler>
    68d4:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <_twiCurrentHandler+0x1>
    68d8:	dc 01       	movw	r26, r24
    68da:	12 96       	adiw	r26, 0x02	; 2
    68dc:	ed 91       	ld	r30, X+
    68de:	fc 91       	ld	r31, X
    68e0:	13 97       	sbiw	r26, 0x03	; 3
    68e2:	30 97       	sbiw	r30, 0x00	; 0
    68e4:	19 f1       	breq	.+70     	; 0x692c <__vector_39+0x154>
    68e6:	20 91 a6 0a 	lds	r18, 0x0AA6	; 0x800aa6 <_twiMessageLen>
    68ea:	47 ea       	ldi	r20, 0xA7	; 167
    68ec:	5a e0       	ldi	r21, 0x0A	; 10
    68ee:	65 e0       	ldi	r22, 0x05	; 5
    68f0:	19 95       	eicall
    68f2:	1c c0       	rjmp	.+56     	; 0x692c <__vector_39+0x154>
    68f4:	85 ea       	ldi	r24, 0xA5	; 165
    68f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    68fa:	18 c0       	rjmp	.+48     	; 0x692c <__vector_39+0x154>
    68fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6900:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    6904:	84 e0       	ldi	r24, 0x04	; 4
    6906:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    690a:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <_twiCurrentHandler>
    690e:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <_twiCurrentHandler+0x1>
    6912:	dc 01       	movw	r26, r24
    6914:	12 96       	adiw	r26, 0x02	; 2
    6916:	ed 91       	ld	r30, X+
    6918:	fc 91       	ld	r31, X
    691a:	13 97       	sbiw	r26, 0x03	; 3
    691c:	30 97       	sbiw	r30, 0x00	; 0
    691e:	31 f0       	breq	.+12     	; 0x692c <__vector_39+0x154>
    6920:	20 e0       	ldi	r18, 0x00	; 0
    6922:	40 e0       	ldi	r20, 0x00	; 0
    6924:	50 e0       	ldi	r21, 0x00	; 0
    6926:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    692a:	19 95       	eicall
    692c:	ff 91       	pop	r31
    692e:	ef 91       	pop	r30
    6930:	bf 91       	pop	r27
    6932:	af 91       	pop	r26
    6934:	9f 91       	pop	r25
    6936:	8f 91       	pop	r24
    6938:	7f 91       	pop	r23
    693a:	6f 91       	pop	r22
    693c:	5f 91       	pop	r21
    693e:	4f 91       	pop	r20
    6940:	3f 91       	pop	r19
    6942:	2f 91       	pop	r18
    6944:	0f 90       	pop	r0
    6946:	0b be       	out	0x3b, r0	; 59
    6948:	0f 90       	pop	r0
    694a:	0f be       	out	0x3f, r0	; 63
    694c:	0f 90       	pop	r0
    694e:	1f 90       	pop	r1
    6950:	18 95       	reti

00006952 <__udivmodsi4>:
    6952:	a1 e2       	ldi	r26, 0x21	; 33
    6954:	1a 2e       	mov	r1, r26
    6956:	aa 1b       	sub	r26, r26
    6958:	bb 1b       	sub	r27, r27
    695a:	fd 01       	movw	r30, r26
    695c:	0d c0       	rjmp	.+26     	; 0x6978 <__udivmodsi4_ep>

0000695e <__udivmodsi4_loop>:
    695e:	aa 1f       	adc	r26, r26
    6960:	bb 1f       	adc	r27, r27
    6962:	ee 1f       	adc	r30, r30
    6964:	ff 1f       	adc	r31, r31
    6966:	a2 17       	cp	r26, r18
    6968:	b3 07       	cpc	r27, r19
    696a:	e4 07       	cpc	r30, r20
    696c:	f5 07       	cpc	r31, r21
    696e:	20 f0       	brcs	.+8      	; 0x6978 <__udivmodsi4_ep>
    6970:	a2 1b       	sub	r26, r18
    6972:	b3 0b       	sbc	r27, r19
    6974:	e4 0b       	sbc	r30, r20
    6976:	f5 0b       	sbc	r31, r21

00006978 <__udivmodsi4_ep>:
    6978:	66 1f       	adc	r22, r22
    697a:	77 1f       	adc	r23, r23
    697c:	88 1f       	adc	r24, r24
    697e:	99 1f       	adc	r25, r25
    6980:	1a 94       	dec	r1
    6982:	69 f7       	brne	.-38     	; 0x695e <__udivmodsi4_loop>
    6984:	60 95       	com	r22
    6986:	70 95       	com	r23
    6988:	80 95       	com	r24
    698a:	90 95       	com	r25
    698c:	9b 01       	movw	r18, r22
    698e:	ac 01       	movw	r20, r24
    6990:	bd 01       	movw	r22, r26
    6992:	cf 01       	movw	r24, r30
    6994:	08 95       	ret

00006996 <__tablejump2__>:
    6996:	ee 0f       	add	r30, r30
    6998:	ff 1f       	adc	r31, r31
    699a:	88 1f       	adc	r24, r24
    699c:	8b bf       	out	0x3b, r24	; 59
    699e:	07 90       	elpm	r0, Z+
    69a0:	f6 91       	elpm	r31, Z
    69a2:	e0 2d       	mov	r30, r0
    69a4:	19 94       	eijmp

000069a6 <__subsf3>:
    69a6:	50 58       	subi	r21, 0x80	; 128

000069a8 <__addsf3>:
    69a8:	bb 27       	eor	r27, r27
    69aa:	aa 27       	eor	r26, r26
    69ac:	0e d0       	rcall	.+28     	; 0x69ca <__addsf3x>
    69ae:	75 c1       	rjmp	.+746    	; 0x6c9a <__fp_round>
    69b0:	66 d1       	rcall	.+716    	; 0x6c7e <__fp_pscA>
    69b2:	30 f0       	brcs	.+12     	; 0x69c0 <__addsf3+0x18>
    69b4:	6b d1       	rcall	.+726    	; 0x6c8c <__fp_pscB>
    69b6:	20 f0       	brcs	.+8      	; 0x69c0 <__addsf3+0x18>
    69b8:	31 f4       	brne	.+12     	; 0x69c6 <__addsf3+0x1e>
    69ba:	9f 3f       	cpi	r25, 0xFF	; 255
    69bc:	11 f4       	brne	.+4      	; 0x69c2 <__addsf3+0x1a>
    69be:	1e f4       	brtc	.+6      	; 0x69c6 <__addsf3+0x1e>
    69c0:	5b c1       	rjmp	.+694    	; 0x6c78 <__fp_nan>
    69c2:	0e f4       	brtc	.+2      	; 0x69c6 <__addsf3+0x1e>
    69c4:	e0 95       	com	r30
    69c6:	e7 fb       	bst	r30, 7
    69c8:	51 c1       	rjmp	.+674    	; 0x6c6c <__fp_inf>

000069ca <__addsf3x>:
    69ca:	e9 2f       	mov	r30, r25
    69cc:	77 d1       	rcall	.+750    	; 0x6cbc <__fp_split3>
    69ce:	80 f3       	brcs	.-32     	; 0x69b0 <__addsf3+0x8>
    69d0:	ba 17       	cp	r27, r26
    69d2:	62 07       	cpc	r22, r18
    69d4:	73 07       	cpc	r23, r19
    69d6:	84 07       	cpc	r24, r20
    69d8:	95 07       	cpc	r25, r21
    69da:	18 f0       	brcs	.+6      	; 0x69e2 <__addsf3x+0x18>
    69dc:	71 f4       	brne	.+28     	; 0x69fa <__addsf3x+0x30>
    69de:	9e f5       	brtc	.+102    	; 0x6a46 <__addsf3x+0x7c>
    69e0:	8f c1       	rjmp	.+798    	; 0x6d00 <__fp_zero>
    69e2:	0e f4       	brtc	.+2      	; 0x69e6 <__addsf3x+0x1c>
    69e4:	e0 95       	com	r30
    69e6:	0b 2e       	mov	r0, r27
    69e8:	ba 2f       	mov	r27, r26
    69ea:	a0 2d       	mov	r26, r0
    69ec:	0b 01       	movw	r0, r22
    69ee:	b9 01       	movw	r22, r18
    69f0:	90 01       	movw	r18, r0
    69f2:	0c 01       	movw	r0, r24
    69f4:	ca 01       	movw	r24, r20
    69f6:	a0 01       	movw	r20, r0
    69f8:	11 24       	eor	r1, r1
    69fa:	ff 27       	eor	r31, r31
    69fc:	59 1b       	sub	r21, r25
    69fe:	99 f0       	breq	.+38     	; 0x6a26 <__addsf3x+0x5c>
    6a00:	59 3f       	cpi	r21, 0xF9	; 249
    6a02:	50 f4       	brcc	.+20     	; 0x6a18 <__addsf3x+0x4e>
    6a04:	50 3e       	cpi	r21, 0xE0	; 224
    6a06:	68 f1       	brcs	.+90     	; 0x6a62 <__addsf3x+0x98>
    6a08:	1a 16       	cp	r1, r26
    6a0a:	f0 40       	sbci	r31, 0x00	; 0
    6a0c:	a2 2f       	mov	r26, r18
    6a0e:	23 2f       	mov	r18, r19
    6a10:	34 2f       	mov	r19, r20
    6a12:	44 27       	eor	r20, r20
    6a14:	58 5f       	subi	r21, 0xF8	; 248
    6a16:	f3 cf       	rjmp	.-26     	; 0x69fe <__addsf3x+0x34>
    6a18:	46 95       	lsr	r20
    6a1a:	37 95       	ror	r19
    6a1c:	27 95       	ror	r18
    6a1e:	a7 95       	ror	r26
    6a20:	f0 40       	sbci	r31, 0x00	; 0
    6a22:	53 95       	inc	r21
    6a24:	c9 f7       	brne	.-14     	; 0x6a18 <__addsf3x+0x4e>
    6a26:	7e f4       	brtc	.+30     	; 0x6a46 <__addsf3x+0x7c>
    6a28:	1f 16       	cp	r1, r31
    6a2a:	ba 0b       	sbc	r27, r26
    6a2c:	62 0b       	sbc	r22, r18
    6a2e:	73 0b       	sbc	r23, r19
    6a30:	84 0b       	sbc	r24, r20
    6a32:	ba f0       	brmi	.+46     	; 0x6a62 <__addsf3x+0x98>
    6a34:	91 50       	subi	r25, 0x01	; 1
    6a36:	a1 f0       	breq	.+40     	; 0x6a60 <__addsf3x+0x96>
    6a38:	ff 0f       	add	r31, r31
    6a3a:	bb 1f       	adc	r27, r27
    6a3c:	66 1f       	adc	r22, r22
    6a3e:	77 1f       	adc	r23, r23
    6a40:	88 1f       	adc	r24, r24
    6a42:	c2 f7       	brpl	.-16     	; 0x6a34 <__addsf3x+0x6a>
    6a44:	0e c0       	rjmp	.+28     	; 0x6a62 <__addsf3x+0x98>
    6a46:	ba 0f       	add	r27, r26
    6a48:	62 1f       	adc	r22, r18
    6a4a:	73 1f       	adc	r23, r19
    6a4c:	84 1f       	adc	r24, r20
    6a4e:	48 f4       	brcc	.+18     	; 0x6a62 <__addsf3x+0x98>
    6a50:	87 95       	ror	r24
    6a52:	77 95       	ror	r23
    6a54:	67 95       	ror	r22
    6a56:	b7 95       	ror	r27
    6a58:	f7 95       	ror	r31
    6a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    6a5c:	08 f0       	brcs	.+2      	; 0x6a60 <__addsf3x+0x96>
    6a5e:	b3 cf       	rjmp	.-154    	; 0x69c6 <__addsf3+0x1e>
    6a60:	93 95       	inc	r25
    6a62:	88 0f       	add	r24, r24
    6a64:	08 f0       	brcs	.+2      	; 0x6a68 <__addsf3x+0x9e>
    6a66:	99 27       	eor	r25, r25
    6a68:	ee 0f       	add	r30, r30
    6a6a:	97 95       	ror	r25
    6a6c:	87 95       	ror	r24
    6a6e:	08 95       	ret

00006a70 <__cmpsf2>:
    6a70:	d9 d0       	rcall	.+434    	; 0x6c24 <__fp_cmp>
    6a72:	08 f4       	brcc	.+2      	; 0x6a76 <__cmpsf2+0x6>
    6a74:	81 e0       	ldi	r24, 0x01	; 1
    6a76:	08 95       	ret

00006a78 <__divsf3>:
    6a78:	0c d0       	rcall	.+24     	; 0x6a92 <__divsf3x>
    6a7a:	0f c1       	rjmp	.+542    	; 0x6c9a <__fp_round>
    6a7c:	07 d1       	rcall	.+526    	; 0x6c8c <__fp_pscB>
    6a7e:	40 f0       	brcs	.+16     	; 0x6a90 <__divsf3+0x18>
    6a80:	fe d0       	rcall	.+508    	; 0x6c7e <__fp_pscA>
    6a82:	30 f0       	brcs	.+12     	; 0x6a90 <__divsf3+0x18>
    6a84:	21 f4       	brne	.+8      	; 0x6a8e <__divsf3+0x16>
    6a86:	5f 3f       	cpi	r21, 0xFF	; 255
    6a88:	19 f0       	breq	.+6      	; 0x6a90 <__divsf3+0x18>
    6a8a:	f0 c0       	rjmp	.+480    	; 0x6c6c <__fp_inf>
    6a8c:	51 11       	cpse	r21, r1
    6a8e:	39 c1       	rjmp	.+626    	; 0x6d02 <__fp_szero>
    6a90:	f3 c0       	rjmp	.+486    	; 0x6c78 <__fp_nan>

00006a92 <__divsf3x>:
    6a92:	14 d1       	rcall	.+552    	; 0x6cbc <__fp_split3>
    6a94:	98 f3       	brcs	.-26     	; 0x6a7c <__divsf3+0x4>

00006a96 <__divsf3_pse>:
    6a96:	99 23       	and	r25, r25
    6a98:	c9 f3       	breq	.-14     	; 0x6a8c <__divsf3+0x14>
    6a9a:	55 23       	and	r21, r21
    6a9c:	b1 f3       	breq	.-20     	; 0x6a8a <__divsf3+0x12>
    6a9e:	95 1b       	sub	r25, r21
    6aa0:	55 0b       	sbc	r21, r21
    6aa2:	bb 27       	eor	r27, r27
    6aa4:	aa 27       	eor	r26, r26
    6aa6:	62 17       	cp	r22, r18
    6aa8:	73 07       	cpc	r23, r19
    6aaa:	84 07       	cpc	r24, r20
    6aac:	38 f0       	brcs	.+14     	; 0x6abc <__divsf3_pse+0x26>
    6aae:	9f 5f       	subi	r25, 0xFF	; 255
    6ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ab2:	22 0f       	add	r18, r18
    6ab4:	33 1f       	adc	r19, r19
    6ab6:	44 1f       	adc	r20, r20
    6ab8:	aa 1f       	adc	r26, r26
    6aba:	a9 f3       	breq	.-22     	; 0x6aa6 <__divsf3_pse+0x10>
    6abc:	33 d0       	rcall	.+102    	; 0x6b24 <__divsf3_pse+0x8e>
    6abe:	0e 2e       	mov	r0, r30
    6ac0:	3a f0       	brmi	.+14     	; 0x6ad0 <__divsf3_pse+0x3a>
    6ac2:	e0 e8       	ldi	r30, 0x80	; 128
    6ac4:	30 d0       	rcall	.+96     	; 0x6b26 <__divsf3_pse+0x90>
    6ac6:	91 50       	subi	r25, 0x01	; 1
    6ac8:	50 40       	sbci	r21, 0x00	; 0
    6aca:	e6 95       	lsr	r30
    6acc:	00 1c       	adc	r0, r0
    6ace:	ca f7       	brpl	.-14     	; 0x6ac2 <__divsf3_pse+0x2c>
    6ad0:	29 d0       	rcall	.+82     	; 0x6b24 <__divsf3_pse+0x8e>
    6ad2:	fe 2f       	mov	r31, r30
    6ad4:	27 d0       	rcall	.+78     	; 0x6b24 <__divsf3_pse+0x8e>
    6ad6:	66 0f       	add	r22, r22
    6ad8:	77 1f       	adc	r23, r23
    6ada:	88 1f       	adc	r24, r24
    6adc:	bb 1f       	adc	r27, r27
    6ade:	26 17       	cp	r18, r22
    6ae0:	37 07       	cpc	r19, r23
    6ae2:	48 07       	cpc	r20, r24
    6ae4:	ab 07       	cpc	r26, r27
    6ae6:	b0 e8       	ldi	r27, 0x80	; 128
    6ae8:	09 f0       	breq	.+2      	; 0x6aec <__divsf3_pse+0x56>
    6aea:	bb 0b       	sbc	r27, r27
    6aec:	80 2d       	mov	r24, r0
    6aee:	bf 01       	movw	r22, r30
    6af0:	ff 27       	eor	r31, r31
    6af2:	93 58       	subi	r25, 0x83	; 131
    6af4:	5f 4f       	sbci	r21, 0xFF	; 255
    6af6:	2a f0       	brmi	.+10     	; 0x6b02 <__divsf3_pse+0x6c>
    6af8:	9e 3f       	cpi	r25, 0xFE	; 254
    6afa:	51 05       	cpc	r21, r1
    6afc:	68 f0       	brcs	.+26     	; 0x6b18 <__divsf3_pse+0x82>
    6afe:	b6 c0       	rjmp	.+364    	; 0x6c6c <__fp_inf>
    6b00:	00 c1       	rjmp	.+512    	; 0x6d02 <__fp_szero>
    6b02:	5f 3f       	cpi	r21, 0xFF	; 255
    6b04:	ec f3       	brlt	.-6      	; 0x6b00 <__divsf3_pse+0x6a>
    6b06:	98 3e       	cpi	r25, 0xE8	; 232
    6b08:	dc f3       	brlt	.-10     	; 0x6b00 <__divsf3_pse+0x6a>
    6b0a:	86 95       	lsr	r24
    6b0c:	77 95       	ror	r23
    6b0e:	67 95       	ror	r22
    6b10:	b7 95       	ror	r27
    6b12:	f7 95       	ror	r31
    6b14:	9f 5f       	subi	r25, 0xFF	; 255
    6b16:	c9 f7       	brne	.-14     	; 0x6b0a <__divsf3_pse+0x74>
    6b18:	88 0f       	add	r24, r24
    6b1a:	91 1d       	adc	r25, r1
    6b1c:	96 95       	lsr	r25
    6b1e:	87 95       	ror	r24
    6b20:	97 f9       	bld	r25, 7
    6b22:	08 95       	ret
    6b24:	e1 e0       	ldi	r30, 0x01	; 1
    6b26:	66 0f       	add	r22, r22
    6b28:	77 1f       	adc	r23, r23
    6b2a:	88 1f       	adc	r24, r24
    6b2c:	bb 1f       	adc	r27, r27
    6b2e:	62 17       	cp	r22, r18
    6b30:	73 07       	cpc	r23, r19
    6b32:	84 07       	cpc	r24, r20
    6b34:	ba 07       	cpc	r27, r26
    6b36:	20 f0       	brcs	.+8      	; 0x6b40 <__divsf3_pse+0xaa>
    6b38:	62 1b       	sub	r22, r18
    6b3a:	73 0b       	sbc	r23, r19
    6b3c:	84 0b       	sbc	r24, r20
    6b3e:	ba 0b       	sbc	r27, r26
    6b40:	ee 1f       	adc	r30, r30
    6b42:	88 f7       	brcc	.-30     	; 0x6b26 <__divsf3_pse+0x90>
    6b44:	e0 95       	com	r30
    6b46:	08 95       	ret

00006b48 <__fixsfsi>:
    6b48:	04 d0       	rcall	.+8      	; 0x6b52 <__fixunssfsi>
    6b4a:	68 94       	set
    6b4c:	b1 11       	cpse	r27, r1
    6b4e:	d9 c0       	rjmp	.+434    	; 0x6d02 <__fp_szero>
    6b50:	08 95       	ret

00006b52 <__fixunssfsi>:
    6b52:	bc d0       	rcall	.+376    	; 0x6ccc <__fp_splitA>
    6b54:	88 f0       	brcs	.+34     	; 0x6b78 <__fixunssfsi+0x26>
    6b56:	9f 57       	subi	r25, 0x7F	; 127
    6b58:	90 f0       	brcs	.+36     	; 0x6b7e <__fixunssfsi+0x2c>
    6b5a:	b9 2f       	mov	r27, r25
    6b5c:	99 27       	eor	r25, r25
    6b5e:	b7 51       	subi	r27, 0x17	; 23
    6b60:	a0 f0       	brcs	.+40     	; 0x6b8a <__fixunssfsi+0x38>
    6b62:	d1 f0       	breq	.+52     	; 0x6b98 <__fixunssfsi+0x46>
    6b64:	66 0f       	add	r22, r22
    6b66:	77 1f       	adc	r23, r23
    6b68:	88 1f       	adc	r24, r24
    6b6a:	99 1f       	adc	r25, r25
    6b6c:	1a f0       	brmi	.+6      	; 0x6b74 <__fixunssfsi+0x22>
    6b6e:	ba 95       	dec	r27
    6b70:	c9 f7       	brne	.-14     	; 0x6b64 <__fixunssfsi+0x12>
    6b72:	12 c0       	rjmp	.+36     	; 0x6b98 <__fixunssfsi+0x46>
    6b74:	b1 30       	cpi	r27, 0x01	; 1
    6b76:	81 f0       	breq	.+32     	; 0x6b98 <__fixunssfsi+0x46>
    6b78:	c3 d0       	rcall	.+390    	; 0x6d00 <__fp_zero>
    6b7a:	b1 e0       	ldi	r27, 0x01	; 1
    6b7c:	08 95       	ret
    6b7e:	c0 c0       	rjmp	.+384    	; 0x6d00 <__fp_zero>
    6b80:	67 2f       	mov	r22, r23
    6b82:	78 2f       	mov	r23, r24
    6b84:	88 27       	eor	r24, r24
    6b86:	b8 5f       	subi	r27, 0xF8	; 248
    6b88:	39 f0       	breq	.+14     	; 0x6b98 <__fixunssfsi+0x46>
    6b8a:	b9 3f       	cpi	r27, 0xF9	; 249
    6b8c:	cc f3       	brlt	.-14     	; 0x6b80 <__fixunssfsi+0x2e>
    6b8e:	86 95       	lsr	r24
    6b90:	77 95       	ror	r23
    6b92:	67 95       	ror	r22
    6b94:	b3 95       	inc	r27
    6b96:	d9 f7       	brne	.-10     	; 0x6b8e <__fixunssfsi+0x3c>
    6b98:	3e f4       	brtc	.+14     	; 0x6ba8 <__fixunssfsi+0x56>
    6b9a:	90 95       	com	r25
    6b9c:	80 95       	com	r24
    6b9e:	70 95       	com	r23
    6ba0:	61 95       	neg	r22
    6ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ba8:	08 95       	ret

00006baa <__floatunsisf>:
    6baa:	e8 94       	clt
    6bac:	09 c0       	rjmp	.+18     	; 0x6bc0 <__floatsisf+0x12>

00006bae <__floatsisf>:
    6bae:	97 fb       	bst	r25, 7
    6bb0:	3e f4       	brtc	.+14     	; 0x6bc0 <__floatsisf+0x12>
    6bb2:	90 95       	com	r25
    6bb4:	80 95       	com	r24
    6bb6:	70 95       	com	r23
    6bb8:	61 95       	neg	r22
    6bba:	7f 4f       	sbci	r23, 0xFF	; 255
    6bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    6bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    6bc0:	99 23       	and	r25, r25
    6bc2:	a9 f0       	breq	.+42     	; 0x6bee <__floatsisf+0x40>
    6bc4:	f9 2f       	mov	r31, r25
    6bc6:	96 e9       	ldi	r25, 0x96	; 150
    6bc8:	bb 27       	eor	r27, r27
    6bca:	93 95       	inc	r25
    6bcc:	f6 95       	lsr	r31
    6bce:	87 95       	ror	r24
    6bd0:	77 95       	ror	r23
    6bd2:	67 95       	ror	r22
    6bd4:	b7 95       	ror	r27
    6bd6:	f1 11       	cpse	r31, r1
    6bd8:	f8 cf       	rjmp	.-16     	; 0x6bca <__floatsisf+0x1c>
    6bda:	fa f4       	brpl	.+62     	; 0x6c1a <__floatsisf+0x6c>
    6bdc:	bb 0f       	add	r27, r27
    6bde:	11 f4       	brne	.+4      	; 0x6be4 <__floatsisf+0x36>
    6be0:	60 ff       	sbrs	r22, 0
    6be2:	1b c0       	rjmp	.+54     	; 0x6c1a <__floatsisf+0x6c>
    6be4:	6f 5f       	subi	r22, 0xFF	; 255
    6be6:	7f 4f       	sbci	r23, 0xFF	; 255
    6be8:	8f 4f       	sbci	r24, 0xFF	; 255
    6bea:	9f 4f       	sbci	r25, 0xFF	; 255
    6bec:	16 c0       	rjmp	.+44     	; 0x6c1a <__floatsisf+0x6c>
    6bee:	88 23       	and	r24, r24
    6bf0:	11 f0       	breq	.+4      	; 0x6bf6 <__floatsisf+0x48>
    6bf2:	96 e9       	ldi	r25, 0x96	; 150
    6bf4:	11 c0       	rjmp	.+34     	; 0x6c18 <__floatsisf+0x6a>
    6bf6:	77 23       	and	r23, r23
    6bf8:	21 f0       	breq	.+8      	; 0x6c02 <__floatsisf+0x54>
    6bfa:	9e e8       	ldi	r25, 0x8E	; 142
    6bfc:	87 2f       	mov	r24, r23
    6bfe:	76 2f       	mov	r23, r22
    6c00:	05 c0       	rjmp	.+10     	; 0x6c0c <__floatsisf+0x5e>
    6c02:	66 23       	and	r22, r22
    6c04:	71 f0       	breq	.+28     	; 0x6c22 <__floatsisf+0x74>
    6c06:	96 e8       	ldi	r25, 0x86	; 134
    6c08:	86 2f       	mov	r24, r22
    6c0a:	70 e0       	ldi	r23, 0x00	; 0
    6c0c:	60 e0       	ldi	r22, 0x00	; 0
    6c0e:	2a f0       	brmi	.+10     	; 0x6c1a <__floatsisf+0x6c>
    6c10:	9a 95       	dec	r25
    6c12:	66 0f       	add	r22, r22
    6c14:	77 1f       	adc	r23, r23
    6c16:	88 1f       	adc	r24, r24
    6c18:	da f7       	brpl	.-10     	; 0x6c10 <__floatsisf+0x62>
    6c1a:	88 0f       	add	r24, r24
    6c1c:	96 95       	lsr	r25
    6c1e:	87 95       	ror	r24
    6c20:	97 f9       	bld	r25, 7
    6c22:	08 95       	ret

00006c24 <__fp_cmp>:
    6c24:	99 0f       	add	r25, r25
    6c26:	00 08       	sbc	r0, r0
    6c28:	55 0f       	add	r21, r21
    6c2a:	aa 0b       	sbc	r26, r26
    6c2c:	e0 e8       	ldi	r30, 0x80	; 128
    6c2e:	fe ef       	ldi	r31, 0xFE	; 254
    6c30:	16 16       	cp	r1, r22
    6c32:	17 06       	cpc	r1, r23
    6c34:	e8 07       	cpc	r30, r24
    6c36:	f9 07       	cpc	r31, r25
    6c38:	c0 f0       	brcs	.+48     	; 0x6c6a <__fp_cmp+0x46>
    6c3a:	12 16       	cp	r1, r18
    6c3c:	13 06       	cpc	r1, r19
    6c3e:	e4 07       	cpc	r30, r20
    6c40:	f5 07       	cpc	r31, r21
    6c42:	98 f0       	brcs	.+38     	; 0x6c6a <__fp_cmp+0x46>
    6c44:	62 1b       	sub	r22, r18
    6c46:	73 0b       	sbc	r23, r19
    6c48:	84 0b       	sbc	r24, r20
    6c4a:	95 0b       	sbc	r25, r21
    6c4c:	39 f4       	brne	.+14     	; 0x6c5c <__fp_cmp+0x38>
    6c4e:	0a 26       	eor	r0, r26
    6c50:	61 f0       	breq	.+24     	; 0x6c6a <__fp_cmp+0x46>
    6c52:	23 2b       	or	r18, r19
    6c54:	24 2b       	or	r18, r20
    6c56:	25 2b       	or	r18, r21
    6c58:	21 f4       	brne	.+8      	; 0x6c62 <__fp_cmp+0x3e>
    6c5a:	08 95       	ret
    6c5c:	0a 26       	eor	r0, r26
    6c5e:	09 f4       	brne	.+2      	; 0x6c62 <__fp_cmp+0x3e>
    6c60:	a1 40       	sbci	r26, 0x01	; 1
    6c62:	a6 95       	lsr	r26
    6c64:	8f ef       	ldi	r24, 0xFF	; 255
    6c66:	81 1d       	adc	r24, r1
    6c68:	81 1d       	adc	r24, r1
    6c6a:	08 95       	ret

00006c6c <__fp_inf>:
    6c6c:	97 f9       	bld	r25, 7
    6c6e:	9f 67       	ori	r25, 0x7F	; 127
    6c70:	80 e8       	ldi	r24, 0x80	; 128
    6c72:	70 e0       	ldi	r23, 0x00	; 0
    6c74:	60 e0       	ldi	r22, 0x00	; 0
    6c76:	08 95       	ret

00006c78 <__fp_nan>:
    6c78:	9f ef       	ldi	r25, 0xFF	; 255
    6c7a:	80 ec       	ldi	r24, 0xC0	; 192
    6c7c:	08 95       	ret

00006c7e <__fp_pscA>:
    6c7e:	00 24       	eor	r0, r0
    6c80:	0a 94       	dec	r0
    6c82:	16 16       	cp	r1, r22
    6c84:	17 06       	cpc	r1, r23
    6c86:	18 06       	cpc	r1, r24
    6c88:	09 06       	cpc	r0, r25
    6c8a:	08 95       	ret

00006c8c <__fp_pscB>:
    6c8c:	00 24       	eor	r0, r0
    6c8e:	0a 94       	dec	r0
    6c90:	12 16       	cp	r1, r18
    6c92:	13 06       	cpc	r1, r19
    6c94:	14 06       	cpc	r1, r20
    6c96:	05 06       	cpc	r0, r21
    6c98:	08 95       	ret

00006c9a <__fp_round>:
    6c9a:	09 2e       	mov	r0, r25
    6c9c:	03 94       	inc	r0
    6c9e:	00 0c       	add	r0, r0
    6ca0:	11 f4       	brne	.+4      	; 0x6ca6 <__fp_round+0xc>
    6ca2:	88 23       	and	r24, r24
    6ca4:	52 f0       	brmi	.+20     	; 0x6cba <__fp_round+0x20>
    6ca6:	bb 0f       	add	r27, r27
    6ca8:	40 f4       	brcc	.+16     	; 0x6cba <__fp_round+0x20>
    6caa:	bf 2b       	or	r27, r31
    6cac:	11 f4       	brne	.+4      	; 0x6cb2 <__fp_round+0x18>
    6cae:	60 ff       	sbrs	r22, 0
    6cb0:	04 c0       	rjmp	.+8      	; 0x6cba <__fp_round+0x20>
    6cb2:	6f 5f       	subi	r22, 0xFF	; 255
    6cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    6cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cba:	08 95       	ret

00006cbc <__fp_split3>:
    6cbc:	57 fd       	sbrc	r21, 7
    6cbe:	90 58       	subi	r25, 0x80	; 128
    6cc0:	44 0f       	add	r20, r20
    6cc2:	55 1f       	adc	r21, r21
    6cc4:	59 f0       	breq	.+22     	; 0x6cdc <__fp_splitA+0x10>
    6cc6:	5f 3f       	cpi	r21, 0xFF	; 255
    6cc8:	71 f0       	breq	.+28     	; 0x6ce6 <__fp_splitA+0x1a>
    6cca:	47 95       	ror	r20

00006ccc <__fp_splitA>:
    6ccc:	88 0f       	add	r24, r24
    6cce:	97 fb       	bst	r25, 7
    6cd0:	99 1f       	adc	r25, r25
    6cd2:	61 f0       	breq	.+24     	; 0x6cec <__fp_splitA+0x20>
    6cd4:	9f 3f       	cpi	r25, 0xFF	; 255
    6cd6:	79 f0       	breq	.+30     	; 0x6cf6 <__fp_splitA+0x2a>
    6cd8:	87 95       	ror	r24
    6cda:	08 95       	ret
    6cdc:	12 16       	cp	r1, r18
    6cde:	13 06       	cpc	r1, r19
    6ce0:	14 06       	cpc	r1, r20
    6ce2:	55 1f       	adc	r21, r21
    6ce4:	f2 cf       	rjmp	.-28     	; 0x6cca <__fp_split3+0xe>
    6ce6:	46 95       	lsr	r20
    6ce8:	f1 df       	rcall	.-30     	; 0x6ccc <__fp_splitA>
    6cea:	08 c0       	rjmp	.+16     	; 0x6cfc <__fp_splitA+0x30>
    6cec:	16 16       	cp	r1, r22
    6cee:	17 06       	cpc	r1, r23
    6cf0:	18 06       	cpc	r1, r24
    6cf2:	99 1f       	adc	r25, r25
    6cf4:	f1 cf       	rjmp	.-30     	; 0x6cd8 <__fp_splitA+0xc>
    6cf6:	86 95       	lsr	r24
    6cf8:	71 05       	cpc	r23, r1
    6cfa:	61 05       	cpc	r22, r1
    6cfc:	08 94       	sec
    6cfe:	08 95       	ret

00006d00 <__fp_zero>:
    6d00:	e8 94       	clt

00006d02 <__fp_szero>:
    6d02:	bb 27       	eor	r27, r27
    6d04:	66 27       	eor	r22, r22
    6d06:	77 27       	eor	r23, r23
    6d08:	cb 01       	movw	r24, r22
    6d0a:	97 f9       	bld	r25, 7
    6d0c:	08 95       	ret

00006d0e <__gesf2>:
    6d0e:	8a df       	rcall	.-236    	; 0x6c24 <__fp_cmp>
    6d10:	08 f4       	brcc	.+2      	; 0x6d14 <__gesf2+0x6>
    6d12:	8f ef       	ldi	r24, 0xFF	; 255
    6d14:	08 95       	ret

00006d16 <__mulsf3>:
    6d16:	0b d0       	rcall	.+22     	; 0x6d2e <__mulsf3x>
    6d18:	c0 cf       	rjmp	.-128    	; 0x6c9a <__fp_round>
    6d1a:	b1 df       	rcall	.-158    	; 0x6c7e <__fp_pscA>
    6d1c:	28 f0       	brcs	.+10     	; 0x6d28 <__mulsf3+0x12>
    6d1e:	b6 df       	rcall	.-148    	; 0x6c8c <__fp_pscB>
    6d20:	18 f0       	brcs	.+6      	; 0x6d28 <__mulsf3+0x12>
    6d22:	95 23       	and	r25, r21
    6d24:	09 f0       	breq	.+2      	; 0x6d28 <__mulsf3+0x12>
    6d26:	a2 cf       	rjmp	.-188    	; 0x6c6c <__fp_inf>
    6d28:	a7 cf       	rjmp	.-178    	; 0x6c78 <__fp_nan>
    6d2a:	11 24       	eor	r1, r1
    6d2c:	ea cf       	rjmp	.-44     	; 0x6d02 <__fp_szero>

00006d2e <__mulsf3x>:
    6d2e:	c6 df       	rcall	.-116    	; 0x6cbc <__fp_split3>
    6d30:	a0 f3       	brcs	.-24     	; 0x6d1a <__mulsf3+0x4>

00006d32 <__mulsf3_pse>:
    6d32:	95 9f       	mul	r25, r21
    6d34:	d1 f3       	breq	.-12     	; 0x6d2a <__mulsf3+0x14>
    6d36:	95 0f       	add	r25, r21
    6d38:	50 e0       	ldi	r21, 0x00	; 0
    6d3a:	55 1f       	adc	r21, r21
    6d3c:	62 9f       	mul	r22, r18
    6d3e:	f0 01       	movw	r30, r0
    6d40:	72 9f       	mul	r23, r18
    6d42:	bb 27       	eor	r27, r27
    6d44:	f0 0d       	add	r31, r0
    6d46:	b1 1d       	adc	r27, r1
    6d48:	63 9f       	mul	r22, r19
    6d4a:	aa 27       	eor	r26, r26
    6d4c:	f0 0d       	add	r31, r0
    6d4e:	b1 1d       	adc	r27, r1
    6d50:	aa 1f       	adc	r26, r26
    6d52:	64 9f       	mul	r22, r20
    6d54:	66 27       	eor	r22, r22
    6d56:	b0 0d       	add	r27, r0
    6d58:	a1 1d       	adc	r26, r1
    6d5a:	66 1f       	adc	r22, r22
    6d5c:	82 9f       	mul	r24, r18
    6d5e:	22 27       	eor	r18, r18
    6d60:	b0 0d       	add	r27, r0
    6d62:	a1 1d       	adc	r26, r1
    6d64:	62 1f       	adc	r22, r18
    6d66:	73 9f       	mul	r23, r19
    6d68:	b0 0d       	add	r27, r0
    6d6a:	a1 1d       	adc	r26, r1
    6d6c:	62 1f       	adc	r22, r18
    6d6e:	83 9f       	mul	r24, r19
    6d70:	a0 0d       	add	r26, r0
    6d72:	61 1d       	adc	r22, r1
    6d74:	22 1f       	adc	r18, r18
    6d76:	74 9f       	mul	r23, r20
    6d78:	33 27       	eor	r19, r19
    6d7a:	a0 0d       	add	r26, r0
    6d7c:	61 1d       	adc	r22, r1
    6d7e:	23 1f       	adc	r18, r19
    6d80:	84 9f       	mul	r24, r20
    6d82:	60 0d       	add	r22, r0
    6d84:	21 1d       	adc	r18, r1
    6d86:	82 2f       	mov	r24, r18
    6d88:	76 2f       	mov	r23, r22
    6d8a:	6a 2f       	mov	r22, r26
    6d8c:	11 24       	eor	r1, r1
    6d8e:	9f 57       	subi	r25, 0x7F	; 127
    6d90:	50 40       	sbci	r21, 0x00	; 0
    6d92:	8a f0       	brmi	.+34     	; 0x6db6 <__mulsf3_pse+0x84>
    6d94:	e1 f0       	breq	.+56     	; 0x6dce <__mulsf3_pse+0x9c>
    6d96:	88 23       	and	r24, r24
    6d98:	4a f0       	brmi	.+18     	; 0x6dac <__mulsf3_pse+0x7a>
    6d9a:	ee 0f       	add	r30, r30
    6d9c:	ff 1f       	adc	r31, r31
    6d9e:	bb 1f       	adc	r27, r27
    6da0:	66 1f       	adc	r22, r22
    6da2:	77 1f       	adc	r23, r23
    6da4:	88 1f       	adc	r24, r24
    6da6:	91 50       	subi	r25, 0x01	; 1
    6da8:	50 40       	sbci	r21, 0x00	; 0
    6daa:	a9 f7       	brne	.-22     	; 0x6d96 <__mulsf3_pse+0x64>
    6dac:	9e 3f       	cpi	r25, 0xFE	; 254
    6dae:	51 05       	cpc	r21, r1
    6db0:	70 f0       	brcs	.+28     	; 0x6dce <__mulsf3_pse+0x9c>
    6db2:	5c cf       	rjmp	.-328    	; 0x6c6c <__fp_inf>
    6db4:	a6 cf       	rjmp	.-180    	; 0x6d02 <__fp_szero>
    6db6:	5f 3f       	cpi	r21, 0xFF	; 255
    6db8:	ec f3       	brlt	.-6      	; 0x6db4 <__mulsf3_pse+0x82>
    6dba:	98 3e       	cpi	r25, 0xE8	; 232
    6dbc:	dc f3       	brlt	.-10     	; 0x6db4 <__mulsf3_pse+0x82>
    6dbe:	86 95       	lsr	r24
    6dc0:	77 95       	ror	r23
    6dc2:	67 95       	ror	r22
    6dc4:	b7 95       	ror	r27
    6dc6:	f7 95       	ror	r31
    6dc8:	e7 95       	ror	r30
    6dca:	9f 5f       	subi	r25, 0xFF	; 255
    6dcc:	c1 f7       	brne	.-16     	; 0x6dbe <__mulsf3_pse+0x8c>
    6dce:	fe 2b       	or	r31, r30
    6dd0:	88 0f       	add	r24, r24
    6dd2:	91 1d       	adc	r25, r1
    6dd4:	96 95       	lsr	r25
    6dd6:	87 95       	ror	r24
    6dd8:	97 f9       	bld	r25, 7
    6dda:	08 95       	ret

00006ddc <calloc>:
    6ddc:	0f 93       	push	r16
    6dde:	1f 93       	push	r17
    6de0:	cf 93       	push	r28
    6de2:	df 93       	push	r29
    6de4:	86 9f       	mul	r24, r22
    6de6:	80 01       	movw	r16, r0
    6de8:	87 9f       	mul	r24, r23
    6dea:	10 0d       	add	r17, r0
    6dec:	96 9f       	mul	r25, r22
    6dee:	10 0d       	add	r17, r0
    6df0:	11 24       	eor	r1, r1
    6df2:	c8 01       	movw	r24, r16
    6df4:	0d d0       	rcall	.+26     	; 0x6e10 <malloc>
    6df6:	ec 01       	movw	r28, r24
    6df8:	00 97       	sbiw	r24, 0x00	; 0
    6dfa:	21 f0       	breq	.+8      	; 0x6e04 <calloc+0x28>
    6dfc:	a8 01       	movw	r20, r16
    6dfe:	60 e0       	ldi	r22, 0x00	; 0
    6e00:	70 e0       	ldi	r23, 0x00	; 0
    6e02:	34 d1       	rcall	.+616    	; 0x706c <memset>
    6e04:	ce 01       	movw	r24, r28
    6e06:	df 91       	pop	r29
    6e08:	cf 91       	pop	r28
    6e0a:	1f 91       	pop	r17
    6e0c:	0f 91       	pop	r16
    6e0e:	08 95       	ret

00006e10 <malloc>:
    6e10:	0f 93       	push	r16
    6e12:	1f 93       	push	r17
    6e14:	cf 93       	push	r28
    6e16:	df 93       	push	r29
    6e18:	82 30       	cpi	r24, 0x02	; 2
    6e1a:	91 05       	cpc	r25, r1
    6e1c:	10 f4       	brcc	.+4      	; 0x6e22 <malloc+0x12>
    6e1e:	82 e0       	ldi	r24, 0x02	; 2
    6e20:	90 e0       	ldi	r25, 0x00	; 0
    6e22:	e0 91 da 0a 	lds	r30, 0x0ADA	; 0x800ada <__flp>
    6e26:	f0 91 db 0a 	lds	r31, 0x0ADB	; 0x800adb <__flp+0x1>
    6e2a:	20 e0       	ldi	r18, 0x00	; 0
    6e2c:	30 e0       	ldi	r19, 0x00	; 0
    6e2e:	a0 e0       	ldi	r26, 0x00	; 0
    6e30:	b0 e0       	ldi	r27, 0x00	; 0
    6e32:	30 97       	sbiw	r30, 0x00	; 0
    6e34:	19 f1       	breq	.+70     	; 0x6e7c <malloc+0x6c>
    6e36:	40 81       	ld	r20, Z
    6e38:	51 81       	ldd	r21, Z+1	; 0x01
    6e3a:	02 81       	ldd	r16, Z+2	; 0x02
    6e3c:	13 81       	ldd	r17, Z+3	; 0x03
    6e3e:	48 17       	cp	r20, r24
    6e40:	59 07       	cpc	r21, r25
    6e42:	c8 f0       	brcs	.+50     	; 0x6e76 <malloc+0x66>
    6e44:	84 17       	cp	r24, r20
    6e46:	95 07       	cpc	r25, r21
    6e48:	69 f4       	brne	.+26     	; 0x6e64 <malloc+0x54>
    6e4a:	10 97       	sbiw	r26, 0x00	; 0
    6e4c:	31 f0       	breq	.+12     	; 0x6e5a <malloc+0x4a>
    6e4e:	12 96       	adiw	r26, 0x02	; 2
    6e50:	0c 93       	st	X, r16
    6e52:	12 97       	sbiw	r26, 0x02	; 2
    6e54:	13 96       	adiw	r26, 0x03	; 3
    6e56:	1c 93       	st	X, r17
    6e58:	27 c0       	rjmp	.+78     	; 0x6ea8 <malloc+0x98>
    6e5a:	00 93 da 0a 	sts	0x0ADA, r16	; 0x800ada <__flp>
    6e5e:	10 93 db 0a 	sts	0x0ADB, r17	; 0x800adb <__flp+0x1>
    6e62:	22 c0       	rjmp	.+68     	; 0x6ea8 <malloc+0x98>
    6e64:	21 15       	cp	r18, r1
    6e66:	31 05       	cpc	r19, r1
    6e68:	19 f0       	breq	.+6      	; 0x6e70 <malloc+0x60>
    6e6a:	42 17       	cp	r20, r18
    6e6c:	53 07       	cpc	r21, r19
    6e6e:	18 f4       	brcc	.+6      	; 0x6e76 <malloc+0x66>
    6e70:	9a 01       	movw	r18, r20
    6e72:	bd 01       	movw	r22, r26
    6e74:	ef 01       	movw	r28, r30
    6e76:	df 01       	movw	r26, r30
    6e78:	f8 01       	movw	r30, r16
    6e7a:	db cf       	rjmp	.-74     	; 0x6e32 <malloc+0x22>
    6e7c:	21 15       	cp	r18, r1
    6e7e:	31 05       	cpc	r19, r1
    6e80:	f9 f0       	breq	.+62     	; 0x6ec0 <malloc+0xb0>
    6e82:	28 1b       	sub	r18, r24
    6e84:	39 0b       	sbc	r19, r25
    6e86:	24 30       	cpi	r18, 0x04	; 4
    6e88:	31 05       	cpc	r19, r1
    6e8a:	80 f4       	brcc	.+32     	; 0x6eac <malloc+0x9c>
    6e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    6e90:	61 15       	cp	r22, r1
    6e92:	71 05       	cpc	r23, r1
    6e94:	21 f0       	breq	.+8      	; 0x6e9e <malloc+0x8e>
    6e96:	fb 01       	movw	r30, r22
    6e98:	93 83       	std	Z+3, r25	; 0x03
    6e9a:	82 83       	std	Z+2, r24	; 0x02
    6e9c:	04 c0       	rjmp	.+8      	; 0x6ea6 <malloc+0x96>
    6e9e:	90 93 db 0a 	sts	0x0ADB, r25	; 0x800adb <__flp+0x1>
    6ea2:	80 93 da 0a 	sts	0x0ADA, r24	; 0x800ada <__flp>
    6ea6:	fe 01       	movw	r30, r28
    6ea8:	32 96       	adiw	r30, 0x02	; 2
    6eaa:	44 c0       	rjmp	.+136    	; 0x6f34 <malloc+0x124>
    6eac:	fe 01       	movw	r30, r28
    6eae:	e2 0f       	add	r30, r18
    6eb0:	f3 1f       	adc	r31, r19
    6eb2:	81 93       	st	Z+, r24
    6eb4:	91 93       	st	Z+, r25
    6eb6:	22 50       	subi	r18, 0x02	; 2
    6eb8:	31 09       	sbc	r19, r1
    6eba:	39 83       	std	Y+1, r19	; 0x01
    6ebc:	28 83       	st	Y, r18
    6ebe:	3a c0       	rjmp	.+116    	; 0x6f34 <malloc+0x124>
    6ec0:	20 91 d8 0a 	lds	r18, 0x0AD8	; 0x800ad8 <__brkval>
    6ec4:	30 91 d9 0a 	lds	r19, 0x0AD9	; 0x800ad9 <__brkval+0x1>
    6ec8:	23 2b       	or	r18, r19
    6eca:	41 f4       	brne	.+16     	; 0x6edc <malloc+0xcc>
    6ecc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6ed0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6ed4:	30 93 d9 0a 	sts	0x0AD9, r19	; 0x800ad9 <__brkval+0x1>
    6ed8:	20 93 d8 0a 	sts	0x0AD8, r18	; 0x800ad8 <__brkval>
    6edc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6ee0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    6ee4:	21 15       	cp	r18, r1
    6ee6:	31 05       	cpc	r19, r1
    6ee8:	41 f4       	brne	.+16     	; 0x6efa <malloc+0xea>
    6eea:	2d b7       	in	r18, 0x3d	; 61
    6eec:	3e b7       	in	r19, 0x3e	; 62
    6eee:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6ef2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6ef6:	24 1b       	sub	r18, r20
    6ef8:	35 0b       	sbc	r19, r21
    6efa:	e0 91 d8 0a 	lds	r30, 0x0AD8	; 0x800ad8 <__brkval>
    6efe:	f0 91 d9 0a 	lds	r31, 0x0AD9	; 0x800ad9 <__brkval+0x1>
    6f02:	e2 17       	cp	r30, r18
    6f04:	f3 07       	cpc	r31, r19
    6f06:	a0 f4       	brcc	.+40     	; 0x6f30 <malloc+0x120>
    6f08:	2e 1b       	sub	r18, r30
    6f0a:	3f 0b       	sbc	r19, r31
    6f0c:	28 17       	cp	r18, r24
    6f0e:	39 07       	cpc	r19, r25
    6f10:	78 f0       	brcs	.+30     	; 0x6f30 <malloc+0x120>
    6f12:	ac 01       	movw	r20, r24
    6f14:	4e 5f       	subi	r20, 0xFE	; 254
    6f16:	5f 4f       	sbci	r21, 0xFF	; 255
    6f18:	24 17       	cp	r18, r20
    6f1a:	35 07       	cpc	r19, r21
    6f1c:	48 f0       	brcs	.+18     	; 0x6f30 <malloc+0x120>
    6f1e:	4e 0f       	add	r20, r30
    6f20:	5f 1f       	adc	r21, r31
    6f22:	50 93 d9 0a 	sts	0x0AD9, r21	; 0x800ad9 <__brkval+0x1>
    6f26:	40 93 d8 0a 	sts	0x0AD8, r20	; 0x800ad8 <__brkval>
    6f2a:	81 93       	st	Z+, r24
    6f2c:	91 93       	st	Z+, r25
    6f2e:	02 c0       	rjmp	.+4      	; 0x6f34 <malloc+0x124>
    6f30:	e0 e0       	ldi	r30, 0x00	; 0
    6f32:	f0 e0       	ldi	r31, 0x00	; 0
    6f34:	cf 01       	movw	r24, r30
    6f36:	df 91       	pop	r29
    6f38:	cf 91       	pop	r28
    6f3a:	1f 91       	pop	r17
    6f3c:	0f 91       	pop	r16
    6f3e:	08 95       	ret

00006f40 <free>:
    6f40:	cf 93       	push	r28
    6f42:	df 93       	push	r29
    6f44:	00 97       	sbiw	r24, 0x00	; 0
    6f46:	09 f4       	brne	.+2      	; 0x6f4a <free+0xa>
    6f48:	81 c0       	rjmp	.+258    	; 0x704c <free+0x10c>
    6f4a:	fc 01       	movw	r30, r24
    6f4c:	32 97       	sbiw	r30, 0x02	; 2
    6f4e:	13 82       	std	Z+3, r1	; 0x03
    6f50:	12 82       	std	Z+2, r1	; 0x02
    6f52:	a0 91 da 0a 	lds	r26, 0x0ADA	; 0x800ada <__flp>
    6f56:	b0 91 db 0a 	lds	r27, 0x0ADB	; 0x800adb <__flp+0x1>
    6f5a:	10 97       	sbiw	r26, 0x00	; 0
    6f5c:	81 f4       	brne	.+32     	; 0x6f7e <free+0x3e>
    6f5e:	20 81       	ld	r18, Z
    6f60:	31 81       	ldd	r19, Z+1	; 0x01
    6f62:	82 0f       	add	r24, r18
    6f64:	93 1f       	adc	r25, r19
    6f66:	20 91 d8 0a 	lds	r18, 0x0AD8	; 0x800ad8 <__brkval>
    6f6a:	30 91 d9 0a 	lds	r19, 0x0AD9	; 0x800ad9 <__brkval+0x1>
    6f6e:	28 17       	cp	r18, r24
    6f70:	39 07       	cpc	r19, r25
    6f72:	51 f5       	brne	.+84     	; 0x6fc8 <free+0x88>
    6f74:	f0 93 d9 0a 	sts	0x0AD9, r31	; 0x800ad9 <__brkval+0x1>
    6f78:	e0 93 d8 0a 	sts	0x0AD8, r30	; 0x800ad8 <__brkval>
    6f7c:	67 c0       	rjmp	.+206    	; 0x704c <free+0x10c>
    6f7e:	ed 01       	movw	r28, r26
    6f80:	20 e0       	ldi	r18, 0x00	; 0
    6f82:	30 e0       	ldi	r19, 0x00	; 0
    6f84:	ce 17       	cp	r28, r30
    6f86:	df 07       	cpc	r29, r31
    6f88:	40 f4       	brcc	.+16     	; 0x6f9a <free+0x5a>
    6f8a:	4a 81       	ldd	r20, Y+2	; 0x02
    6f8c:	5b 81       	ldd	r21, Y+3	; 0x03
    6f8e:	9e 01       	movw	r18, r28
    6f90:	41 15       	cp	r20, r1
    6f92:	51 05       	cpc	r21, r1
    6f94:	f1 f0       	breq	.+60     	; 0x6fd2 <free+0x92>
    6f96:	ea 01       	movw	r28, r20
    6f98:	f5 cf       	rjmp	.-22     	; 0x6f84 <free+0x44>
    6f9a:	d3 83       	std	Z+3, r29	; 0x03
    6f9c:	c2 83       	std	Z+2, r28	; 0x02
    6f9e:	40 81       	ld	r20, Z
    6fa0:	51 81       	ldd	r21, Z+1	; 0x01
    6fa2:	84 0f       	add	r24, r20
    6fa4:	95 1f       	adc	r25, r21
    6fa6:	c8 17       	cp	r28, r24
    6fa8:	d9 07       	cpc	r29, r25
    6faa:	59 f4       	brne	.+22     	; 0x6fc2 <free+0x82>
    6fac:	88 81       	ld	r24, Y
    6fae:	99 81       	ldd	r25, Y+1	; 0x01
    6fb0:	84 0f       	add	r24, r20
    6fb2:	95 1f       	adc	r25, r21
    6fb4:	02 96       	adiw	r24, 0x02	; 2
    6fb6:	91 83       	std	Z+1, r25	; 0x01
    6fb8:	80 83       	st	Z, r24
    6fba:	8a 81       	ldd	r24, Y+2	; 0x02
    6fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    6fbe:	93 83       	std	Z+3, r25	; 0x03
    6fc0:	82 83       	std	Z+2, r24	; 0x02
    6fc2:	21 15       	cp	r18, r1
    6fc4:	31 05       	cpc	r19, r1
    6fc6:	29 f4       	brne	.+10     	; 0x6fd2 <free+0x92>
    6fc8:	f0 93 db 0a 	sts	0x0ADB, r31	; 0x800adb <__flp+0x1>
    6fcc:	e0 93 da 0a 	sts	0x0ADA, r30	; 0x800ada <__flp>
    6fd0:	3d c0       	rjmp	.+122    	; 0x704c <free+0x10c>
    6fd2:	e9 01       	movw	r28, r18
    6fd4:	fb 83       	std	Y+3, r31	; 0x03
    6fd6:	ea 83       	std	Y+2, r30	; 0x02
    6fd8:	49 91       	ld	r20, Y+
    6fda:	59 91       	ld	r21, Y+
    6fdc:	c4 0f       	add	r28, r20
    6fde:	d5 1f       	adc	r29, r21
    6fe0:	ec 17       	cp	r30, r28
    6fe2:	fd 07       	cpc	r31, r29
    6fe4:	61 f4       	brne	.+24     	; 0x6ffe <free+0xbe>
    6fe6:	80 81       	ld	r24, Z
    6fe8:	91 81       	ldd	r25, Z+1	; 0x01
    6fea:	84 0f       	add	r24, r20
    6fec:	95 1f       	adc	r25, r21
    6fee:	02 96       	adiw	r24, 0x02	; 2
    6ff0:	e9 01       	movw	r28, r18
    6ff2:	99 83       	std	Y+1, r25	; 0x01
    6ff4:	88 83       	st	Y, r24
    6ff6:	82 81       	ldd	r24, Z+2	; 0x02
    6ff8:	93 81       	ldd	r25, Z+3	; 0x03
    6ffa:	9b 83       	std	Y+3, r25	; 0x03
    6ffc:	8a 83       	std	Y+2, r24	; 0x02
    6ffe:	e0 e0       	ldi	r30, 0x00	; 0
    7000:	f0 e0       	ldi	r31, 0x00	; 0
    7002:	12 96       	adiw	r26, 0x02	; 2
    7004:	8d 91       	ld	r24, X+
    7006:	9c 91       	ld	r25, X
    7008:	13 97       	sbiw	r26, 0x03	; 3
    700a:	00 97       	sbiw	r24, 0x00	; 0
    700c:	19 f0       	breq	.+6      	; 0x7014 <free+0xd4>
    700e:	fd 01       	movw	r30, r26
    7010:	dc 01       	movw	r26, r24
    7012:	f7 cf       	rjmp	.-18     	; 0x7002 <free+0xc2>
    7014:	8d 91       	ld	r24, X+
    7016:	9c 91       	ld	r25, X
    7018:	11 97       	sbiw	r26, 0x01	; 1
    701a:	9d 01       	movw	r18, r26
    701c:	2e 5f       	subi	r18, 0xFE	; 254
    701e:	3f 4f       	sbci	r19, 0xFF	; 255
    7020:	82 0f       	add	r24, r18
    7022:	93 1f       	adc	r25, r19
    7024:	20 91 d8 0a 	lds	r18, 0x0AD8	; 0x800ad8 <__brkval>
    7028:	30 91 d9 0a 	lds	r19, 0x0AD9	; 0x800ad9 <__brkval+0x1>
    702c:	28 17       	cp	r18, r24
    702e:	39 07       	cpc	r19, r25
    7030:	69 f4       	brne	.+26     	; 0x704c <free+0x10c>
    7032:	30 97       	sbiw	r30, 0x00	; 0
    7034:	29 f4       	brne	.+10     	; 0x7040 <free+0x100>
    7036:	10 92 db 0a 	sts	0x0ADB, r1	; 0x800adb <__flp+0x1>
    703a:	10 92 da 0a 	sts	0x0ADA, r1	; 0x800ada <__flp>
    703e:	02 c0       	rjmp	.+4      	; 0x7044 <free+0x104>
    7040:	13 82       	std	Z+3, r1	; 0x03
    7042:	12 82       	std	Z+2, r1	; 0x02
    7044:	b0 93 d9 0a 	sts	0x0AD9, r27	; 0x800ad9 <__brkval+0x1>
    7048:	a0 93 d8 0a 	sts	0x0AD8, r26	; 0x800ad8 <__brkval>
    704c:	df 91       	pop	r29
    704e:	cf 91       	pop	r28
    7050:	08 95       	ret

00007052 <abort>:
    7052:	81 e0       	ldi	r24, 0x01	; 1
    7054:	90 e0       	ldi	r25, 0x00	; 0
    7056:	f8 94       	cli
    7058:	58 c3       	rjmp	.+1712   	; 0x770a <_exit>

0000705a <memcpy>:
    705a:	fb 01       	movw	r30, r22
    705c:	dc 01       	movw	r26, r24
    705e:	02 c0       	rjmp	.+4      	; 0x7064 <memcpy+0xa>
    7060:	01 90       	ld	r0, Z+
    7062:	0d 92       	st	X+, r0
    7064:	41 50       	subi	r20, 0x01	; 1
    7066:	50 40       	sbci	r21, 0x00	; 0
    7068:	d8 f7       	brcc	.-10     	; 0x7060 <memcpy+0x6>
    706a:	08 95       	ret

0000706c <memset>:
    706c:	dc 01       	movw	r26, r24
    706e:	01 c0       	rjmp	.+2      	; 0x7072 <memset+0x6>
    7070:	6d 93       	st	X+, r22
    7072:	41 50       	subi	r20, 0x01	; 1
    7074:	50 40       	sbci	r21, 0x00	; 0
    7076:	e0 f7       	brcc	.-8      	; 0x7070 <memset+0x4>
    7078:	08 95       	ret

0000707a <strcat>:
    707a:	fb 01       	movw	r30, r22
    707c:	dc 01       	movw	r26, r24
    707e:	0d 90       	ld	r0, X+
    7080:	00 20       	and	r0, r0
    7082:	e9 f7       	brne	.-6      	; 0x707e <strcat+0x4>
    7084:	11 97       	sbiw	r26, 0x01	; 1
    7086:	01 90       	ld	r0, Z+
    7088:	0d 92       	st	X+, r0
    708a:	00 20       	and	r0, r0
    708c:	e1 f7       	brne	.-8      	; 0x7086 <strcat+0xc>
    708e:	08 95       	ret

00007090 <strcpy>:
    7090:	fb 01       	movw	r30, r22
    7092:	dc 01       	movw	r26, r24
    7094:	01 90       	ld	r0, Z+
    7096:	0d 92       	st	X+, r0
    7098:	00 20       	and	r0, r0
    709a:	e1 f7       	brne	.-8      	; 0x7094 <strcpy+0x4>
    709c:	08 95       	ret

0000709e <strncasecmp>:
    709e:	fb 01       	movw	r30, r22
    70a0:	dc 01       	movw	r26, r24
    70a2:	41 50       	subi	r20, 0x01	; 1
    70a4:	50 40       	sbci	r21, 0x00	; 0
    70a6:	88 f0       	brcs	.+34     	; 0x70ca <strncasecmp+0x2c>
    70a8:	8d 91       	ld	r24, X+
    70aa:	81 34       	cpi	r24, 0x41	; 65
    70ac:	1c f0       	brlt	.+6      	; 0x70b4 <strncasecmp+0x16>
    70ae:	8b 35       	cpi	r24, 0x5B	; 91
    70b0:	0c f4       	brge	.+2      	; 0x70b4 <strncasecmp+0x16>
    70b2:	80 5e       	subi	r24, 0xE0	; 224
    70b4:	61 91       	ld	r22, Z+
    70b6:	61 34       	cpi	r22, 0x41	; 65
    70b8:	1c f0       	brlt	.+6      	; 0x70c0 <strncasecmp+0x22>
    70ba:	6b 35       	cpi	r22, 0x5B	; 91
    70bc:	0c f4       	brge	.+2      	; 0x70c0 <strncasecmp+0x22>
    70be:	60 5e       	subi	r22, 0xE0	; 224
    70c0:	86 1b       	sub	r24, r22
    70c2:	61 11       	cpse	r22, r1
    70c4:	71 f3       	breq	.-36     	; 0x70a2 <strncasecmp+0x4>
    70c6:	99 0b       	sbc	r25, r25
    70c8:	08 95       	ret
    70ca:	88 1b       	sub	r24, r24
    70cc:	fc cf       	rjmp	.-8      	; 0x70c6 <strncasecmp+0x28>

000070ce <printf>:
    70ce:	cf 93       	push	r28
    70d0:	df 93       	push	r29
    70d2:	cd b7       	in	r28, 0x3d	; 61
    70d4:	de b7       	in	r29, 0x3e	; 62
    70d6:	ae 01       	movw	r20, r28
    70d8:	4a 5f       	subi	r20, 0xFA	; 250
    70da:	5f 4f       	sbci	r21, 0xFF	; 255
    70dc:	fa 01       	movw	r30, r20
    70de:	61 91       	ld	r22, Z+
    70e0:	71 91       	ld	r23, Z+
    70e2:	af 01       	movw	r20, r30
    70e4:	80 91 de 0a 	lds	r24, 0x0ADE	; 0x800ade <__iob+0x2>
    70e8:	90 91 df 0a 	lds	r25, 0x0ADF	; 0x800adf <__iob+0x3>
    70ec:	61 d0       	rcall	.+194    	; 0x71b0 <vfprintf>
    70ee:	df 91       	pop	r29
    70f0:	cf 91       	pop	r28
    70f2:	08 95       	ret

000070f4 <puts>:
    70f4:	0f 93       	push	r16
    70f6:	1f 93       	push	r17
    70f8:	cf 93       	push	r28
    70fa:	df 93       	push	r29
    70fc:	e0 91 de 0a 	lds	r30, 0x0ADE	; 0x800ade <__iob+0x2>
    7100:	f0 91 df 0a 	lds	r31, 0x0ADF	; 0x800adf <__iob+0x3>
    7104:	23 81       	ldd	r18, Z+3	; 0x03
    7106:	21 ff       	sbrs	r18, 1
    7108:	1b c0       	rjmp	.+54     	; 0x7140 <puts+0x4c>
    710a:	8c 01       	movw	r16, r24
    710c:	d0 e0       	ldi	r29, 0x00	; 0
    710e:	c0 e0       	ldi	r28, 0x00	; 0
    7110:	f8 01       	movw	r30, r16
    7112:	81 91       	ld	r24, Z+
    7114:	8f 01       	movw	r16, r30
    7116:	60 91 de 0a 	lds	r22, 0x0ADE	; 0x800ade <__iob+0x2>
    711a:	70 91 df 0a 	lds	r23, 0x0ADF	; 0x800adf <__iob+0x3>
    711e:	db 01       	movw	r26, r22
    7120:	18 96       	adiw	r26, 0x08	; 8
    7122:	ed 91       	ld	r30, X+
    7124:	fc 91       	ld	r31, X
    7126:	19 97       	sbiw	r26, 0x09	; 9
    7128:	88 23       	and	r24, r24
    712a:	31 f0       	breq	.+12     	; 0x7138 <puts+0x44>
    712c:	19 95       	eicall
    712e:	89 2b       	or	r24, r25
    7130:	79 f3       	breq	.-34     	; 0x7110 <puts+0x1c>
    7132:	df ef       	ldi	r29, 0xFF	; 255
    7134:	cf ef       	ldi	r28, 0xFF	; 255
    7136:	ec cf       	rjmp	.-40     	; 0x7110 <puts+0x1c>
    7138:	8a e0       	ldi	r24, 0x0A	; 10
    713a:	19 95       	eicall
    713c:	89 2b       	or	r24, r25
    713e:	19 f0       	breq	.+6      	; 0x7146 <puts+0x52>
    7140:	8f ef       	ldi	r24, 0xFF	; 255
    7142:	9f ef       	ldi	r25, 0xFF	; 255
    7144:	02 c0       	rjmp	.+4      	; 0x714a <puts+0x56>
    7146:	8d 2f       	mov	r24, r29
    7148:	9c 2f       	mov	r25, r28
    714a:	df 91       	pop	r29
    714c:	cf 91       	pop	r28
    714e:	1f 91       	pop	r17
    7150:	0f 91       	pop	r16
    7152:	08 95       	ret

00007154 <sprintf>:
    7154:	0f 93       	push	r16
    7156:	1f 93       	push	r17
    7158:	cf 93       	push	r28
    715a:	df 93       	push	r29
    715c:	cd b7       	in	r28, 0x3d	; 61
    715e:	de b7       	in	r29, 0x3e	; 62
    7160:	2e 97       	sbiw	r28, 0x0e	; 14
    7162:	0f b6       	in	r0, 0x3f	; 63
    7164:	f8 94       	cli
    7166:	de bf       	out	0x3e, r29	; 62
    7168:	0f be       	out	0x3f, r0	; 63
    716a:	cd bf       	out	0x3d, r28	; 61
    716c:	0e 89       	ldd	r16, Y+22	; 0x16
    716e:	1f 89       	ldd	r17, Y+23	; 0x17
    7170:	86 e0       	ldi	r24, 0x06	; 6
    7172:	8c 83       	std	Y+4, r24	; 0x04
    7174:	1a 83       	std	Y+2, r17	; 0x02
    7176:	09 83       	std	Y+1, r16	; 0x01
    7178:	8f ef       	ldi	r24, 0xFF	; 255
    717a:	9f e7       	ldi	r25, 0x7F	; 127
    717c:	9e 83       	std	Y+6, r25	; 0x06
    717e:	8d 83       	std	Y+5, r24	; 0x05
    7180:	ae 01       	movw	r20, r28
    7182:	46 5e       	subi	r20, 0xE6	; 230
    7184:	5f 4f       	sbci	r21, 0xFF	; 255
    7186:	68 8d       	ldd	r22, Y+24	; 0x18
    7188:	79 8d       	ldd	r23, Y+25	; 0x19
    718a:	ce 01       	movw	r24, r28
    718c:	01 96       	adiw	r24, 0x01	; 1
    718e:	10 d0       	rcall	.+32     	; 0x71b0 <vfprintf>
    7190:	ef 81       	ldd	r30, Y+7	; 0x07
    7192:	f8 85       	ldd	r31, Y+8	; 0x08
    7194:	e0 0f       	add	r30, r16
    7196:	f1 1f       	adc	r31, r17
    7198:	10 82       	st	Z, r1
    719a:	2e 96       	adiw	r28, 0x0e	; 14
    719c:	0f b6       	in	r0, 0x3f	; 63
    719e:	f8 94       	cli
    71a0:	de bf       	out	0x3e, r29	; 62
    71a2:	0f be       	out	0x3f, r0	; 63
    71a4:	cd bf       	out	0x3d, r28	; 61
    71a6:	df 91       	pop	r29
    71a8:	cf 91       	pop	r28
    71aa:	1f 91       	pop	r17
    71ac:	0f 91       	pop	r16
    71ae:	08 95       	ret

000071b0 <vfprintf>:
    71b0:	2f 92       	push	r2
    71b2:	3f 92       	push	r3
    71b4:	4f 92       	push	r4
    71b6:	5f 92       	push	r5
    71b8:	6f 92       	push	r6
    71ba:	7f 92       	push	r7
    71bc:	8f 92       	push	r8
    71be:	9f 92       	push	r9
    71c0:	af 92       	push	r10
    71c2:	bf 92       	push	r11
    71c4:	cf 92       	push	r12
    71c6:	df 92       	push	r13
    71c8:	ef 92       	push	r14
    71ca:	ff 92       	push	r15
    71cc:	0f 93       	push	r16
    71ce:	1f 93       	push	r17
    71d0:	cf 93       	push	r28
    71d2:	df 93       	push	r29
    71d4:	cd b7       	in	r28, 0x3d	; 61
    71d6:	de b7       	in	r29, 0x3e	; 62
    71d8:	2b 97       	sbiw	r28, 0x0b	; 11
    71da:	0f b6       	in	r0, 0x3f	; 63
    71dc:	f8 94       	cli
    71de:	de bf       	out	0x3e, r29	; 62
    71e0:	0f be       	out	0x3f, r0	; 63
    71e2:	cd bf       	out	0x3d, r28	; 61
    71e4:	6c 01       	movw	r12, r24
    71e6:	7b 01       	movw	r14, r22
    71e8:	8a 01       	movw	r16, r20
    71ea:	fc 01       	movw	r30, r24
    71ec:	17 82       	std	Z+7, r1	; 0x07
    71ee:	16 82       	std	Z+6, r1	; 0x06
    71f0:	83 81       	ldd	r24, Z+3	; 0x03
    71f2:	81 ff       	sbrs	r24, 1
    71f4:	bf c1       	rjmp	.+894    	; 0x7574 <vfprintf+0x3c4>
    71f6:	ce 01       	movw	r24, r28
    71f8:	01 96       	adiw	r24, 0x01	; 1
    71fa:	3c 01       	movw	r6, r24
    71fc:	f6 01       	movw	r30, r12
    71fe:	93 81       	ldd	r25, Z+3	; 0x03
    7200:	f7 01       	movw	r30, r14
    7202:	93 fd       	sbrc	r25, 3
    7204:	85 91       	lpm	r24, Z+
    7206:	93 ff       	sbrs	r25, 3
    7208:	81 91       	ld	r24, Z+
    720a:	7f 01       	movw	r14, r30
    720c:	88 23       	and	r24, r24
    720e:	09 f4       	brne	.+2      	; 0x7212 <vfprintf+0x62>
    7210:	ad c1       	rjmp	.+858    	; 0x756c <vfprintf+0x3bc>
    7212:	85 32       	cpi	r24, 0x25	; 37
    7214:	39 f4       	brne	.+14     	; 0x7224 <vfprintf+0x74>
    7216:	93 fd       	sbrc	r25, 3
    7218:	85 91       	lpm	r24, Z+
    721a:	93 ff       	sbrs	r25, 3
    721c:	81 91       	ld	r24, Z+
    721e:	7f 01       	movw	r14, r30
    7220:	85 32       	cpi	r24, 0x25	; 37
    7222:	21 f4       	brne	.+8      	; 0x722c <vfprintf+0x7c>
    7224:	b6 01       	movw	r22, r12
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	d6 d1       	rcall	.+940    	; 0x75d6 <fputc>
    722a:	e8 cf       	rjmp	.-48     	; 0x71fc <vfprintf+0x4c>
    722c:	91 2c       	mov	r9, r1
    722e:	21 2c       	mov	r2, r1
    7230:	31 2c       	mov	r3, r1
    7232:	ff e1       	ldi	r31, 0x1F	; 31
    7234:	f3 15       	cp	r31, r3
    7236:	d8 f0       	brcs	.+54     	; 0x726e <vfprintf+0xbe>
    7238:	8b 32       	cpi	r24, 0x2B	; 43
    723a:	79 f0       	breq	.+30     	; 0x725a <vfprintf+0xaa>
    723c:	38 f4       	brcc	.+14     	; 0x724c <vfprintf+0x9c>
    723e:	80 32       	cpi	r24, 0x20	; 32
    7240:	79 f0       	breq	.+30     	; 0x7260 <vfprintf+0xb0>
    7242:	83 32       	cpi	r24, 0x23	; 35
    7244:	a1 f4       	brne	.+40     	; 0x726e <vfprintf+0xbe>
    7246:	23 2d       	mov	r18, r3
    7248:	20 61       	ori	r18, 0x10	; 16
    724a:	1d c0       	rjmp	.+58     	; 0x7286 <vfprintf+0xd6>
    724c:	8d 32       	cpi	r24, 0x2D	; 45
    724e:	61 f0       	breq	.+24     	; 0x7268 <vfprintf+0xb8>
    7250:	80 33       	cpi	r24, 0x30	; 48
    7252:	69 f4       	brne	.+26     	; 0x726e <vfprintf+0xbe>
    7254:	23 2d       	mov	r18, r3
    7256:	21 60       	ori	r18, 0x01	; 1
    7258:	16 c0       	rjmp	.+44     	; 0x7286 <vfprintf+0xd6>
    725a:	83 2d       	mov	r24, r3
    725c:	82 60       	ori	r24, 0x02	; 2
    725e:	38 2e       	mov	r3, r24
    7260:	e3 2d       	mov	r30, r3
    7262:	e4 60       	ori	r30, 0x04	; 4
    7264:	3e 2e       	mov	r3, r30
    7266:	2a c0       	rjmp	.+84     	; 0x72bc <vfprintf+0x10c>
    7268:	f3 2d       	mov	r31, r3
    726a:	f8 60       	ori	r31, 0x08	; 8
    726c:	1d c0       	rjmp	.+58     	; 0x72a8 <vfprintf+0xf8>
    726e:	37 fc       	sbrc	r3, 7
    7270:	2d c0       	rjmp	.+90     	; 0x72cc <vfprintf+0x11c>
    7272:	20 ed       	ldi	r18, 0xD0	; 208
    7274:	28 0f       	add	r18, r24
    7276:	2a 30       	cpi	r18, 0x0A	; 10
    7278:	40 f0       	brcs	.+16     	; 0x728a <vfprintf+0xda>
    727a:	8e 32       	cpi	r24, 0x2E	; 46
    727c:	b9 f4       	brne	.+46     	; 0x72ac <vfprintf+0xfc>
    727e:	36 fc       	sbrc	r3, 6
    7280:	75 c1       	rjmp	.+746    	; 0x756c <vfprintf+0x3bc>
    7282:	23 2d       	mov	r18, r3
    7284:	20 64       	ori	r18, 0x40	; 64
    7286:	32 2e       	mov	r3, r18
    7288:	19 c0       	rjmp	.+50     	; 0x72bc <vfprintf+0x10c>
    728a:	36 fe       	sbrs	r3, 6
    728c:	06 c0       	rjmp	.+12     	; 0x729a <vfprintf+0xea>
    728e:	8a e0       	ldi	r24, 0x0A	; 10
    7290:	98 9e       	mul	r9, r24
    7292:	20 0d       	add	r18, r0
    7294:	11 24       	eor	r1, r1
    7296:	92 2e       	mov	r9, r18
    7298:	11 c0       	rjmp	.+34     	; 0x72bc <vfprintf+0x10c>
    729a:	ea e0       	ldi	r30, 0x0A	; 10
    729c:	2e 9e       	mul	r2, r30
    729e:	20 0d       	add	r18, r0
    72a0:	11 24       	eor	r1, r1
    72a2:	22 2e       	mov	r2, r18
    72a4:	f3 2d       	mov	r31, r3
    72a6:	f0 62       	ori	r31, 0x20	; 32
    72a8:	3f 2e       	mov	r3, r31
    72aa:	08 c0       	rjmp	.+16     	; 0x72bc <vfprintf+0x10c>
    72ac:	8c 36       	cpi	r24, 0x6C	; 108
    72ae:	21 f4       	brne	.+8      	; 0x72b8 <vfprintf+0x108>
    72b0:	83 2d       	mov	r24, r3
    72b2:	80 68       	ori	r24, 0x80	; 128
    72b4:	38 2e       	mov	r3, r24
    72b6:	02 c0       	rjmp	.+4      	; 0x72bc <vfprintf+0x10c>
    72b8:	88 36       	cpi	r24, 0x68	; 104
    72ba:	41 f4       	brne	.+16     	; 0x72cc <vfprintf+0x11c>
    72bc:	f7 01       	movw	r30, r14
    72be:	93 fd       	sbrc	r25, 3
    72c0:	85 91       	lpm	r24, Z+
    72c2:	93 ff       	sbrs	r25, 3
    72c4:	81 91       	ld	r24, Z+
    72c6:	7f 01       	movw	r14, r30
    72c8:	81 11       	cpse	r24, r1
    72ca:	b3 cf       	rjmp	.-154    	; 0x7232 <vfprintf+0x82>
    72cc:	98 2f       	mov	r25, r24
    72ce:	9f 7d       	andi	r25, 0xDF	; 223
    72d0:	95 54       	subi	r25, 0x45	; 69
    72d2:	93 30       	cpi	r25, 0x03	; 3
    72d4:	28 f4       	brcc	.+10     	; 0x72e0 <vfprintf+0x130>
    72d6:	0c 5f       	subi	r16, 0xFC	; 252
    72d8:	1f 4f       	sbci	r17, 0xFF	; 255
    72da:	9f e3       	ldi	r25, 0x3F	; 63
    72dc:	99 83       	std	Y+1, r25	; 0x01
    72de:	0d c0       	rjmp	.+26     	; 0x72fa <vfprintf+0x14a>
    72e0:	83 36       	cpi	r24, 0x63	; 99
    72e2:	31 f0       	breq	.+12     	; 0x72f0 <vfprintf+0x140>
    72e4:	83 37       	cpi	r24, 0x73	; 115
    72e6:	71 f0       	breq	.+28     	; 0x7304 <vfprintf+0x154>
    72e8:	83 35       	cpi	r24, 0x53	; 83
    72ea:	09 f0       	breq	.+2      	; 0x72ee <vfprintf+0x13e>
    72ec:	55 c0       	rjmp	.+170    	; 0x7398 <vfprintf+0x1e8>
    72ee:	20 c0       	rjmp	.+64     	; 0x7330 <vfprintf+0x180>
    72f0:	f8 01       	movw	r30, r16
    72f2:	80 81       	ld	r24, Z
    72f4:	89 83       	std	Y+1, r24	; 0x01
    72f6:	0e 5f       	subi	r16, 0xFE	; 254
    72f8:	1f 4f       	sbci	r17, 0xFF	; 255
    72fa:	88 24       	eor	r8, r8
    72fc:	83 94       	inc	r8
    72fe:	91 2c       	mov	r9, r1
    7300:	53 01       	movw	r10, r6
    7302:	12 c0       	rjmp	.+36     	; 0x7328 <vfprintf+0x178>
    7304:	28 01       	movw	r4, r16
    7306:	f2 e0       	ldi	r31, 0x02	; 2
    7308:	4f 0e       	add	r4, r31
    730a:	51 1c       	adc	r5, r1
    730c:	f8 01       	movw	r30, r16
    730e:	a0 80       	ld	r10, Z
    7310:	b1 80       	ldd	r11, Z+1	; 0x01
    7312:	36 fe       	sbrs	r3, 6
    7314:	03 c0       	rjmp	.+6      	; 0x731c <vfprintf+0x16c>
    7316:	69 2d       	mov	r22, r9
    7318:	70 e0       	ldi	r23, 0x00	; 0
    731a:	02 c0       	rjmp	.+4      	; 0x7320 <vfprintf+0x170>
    731c:	6f ef       	ldi	r22, 0xFF	; 255
    731e:	7f ef       	ldi	r23, 0xFF	; 255
    7320:	c5 01       	movw	r24, r10
    7322:	4e d1       	rcall	.+668    	; 0x75c0 <strnlen>
    7324:	4c 01       	movw	r8, r24
    7326:	82 01       	movw	r16, r4
    7328:	f3 2d       	mov	r31, r3
    732a:	ff 77       	andi	r31, 0x7F	; 127
    732c:	3f 2e       	mov	r3, r31
    732e:	15 c0       	rjmp	.+42     	; 0x735a <vfprintf+0x1aa>
    7330:	28 01       	movw	r4, r16
    7332:	22 e0       	ldi	r18, 0x02	; 2
    7334:	42 0e       	add	r4, r18
    7336:	51 1c       	adc	r5, r1
    7338:	f8 01       	movw	r30, r16
    733a:	a0 80       	ld	r10, Z
    733c:	b1 80       	ldd	r11, Z+1	; 0x01
    733e:	36 fe       	sbrs	r3, 6
    7340:	03 c0       	rjmp	.+6      	; 0x7348 <vfprintf+0x198>
    7342:	69 2d       	mov	r22, r9
    7344:	70 e0       	ldi	r23, 0x00	; 0
    7346:	02 c0       	rjmp	.+4      	; 0x734c <vfprintf+0x19c>
    7348:	6f ef       	ldi	r22, 0xFF	; 255
    734a:	7f ef       	ldi	r23, 0xFF	; 255
    734c:	c5 01       	movw	r24, r10
    734e:	2d d1       	rcall	.+602    	; 0x75aa <strnlen_P>
    7350:	4c 01       	movw	r8, r24
    7352:	f3 2d       	mov	r31, r3
    7354:	f0 68       	ori	r31, 0x80	; 128
    7356:	3f 2e       	mov	r3, r31
    7358:	82 01       	movw	r16, r4
    735a:	33 fc       	sbrc	r3, 3
    735c:	19 c0       	rjmp	.+50     	; 0x7390 <vfprintf+0x1e0>
    735e:	82 2d       	mov	r24, r2
    7360:	90 e0       	ldi	r25, 0x00	; 0
    7362:	88 16       	cp	r8, r24
    7364:	99 06       	cpc	r9, r25
    7366:	a0 f4       	brcc	.+40     	; 0x7390 <vfprintf+0x1e0>
    7368:	b6 01       	movw	r22, r12
    736a:	80 e2       	ldi	r24, 0x20	; 32
    736c:	90 e0       	ldi	r25, 0x00	; 0
    736e:	33 d1       	rcall	.+614    	; 0x75d6 <fputc>
    7370:	2a 94       	dec	r2
    7372:	f5 cf       	rjmp	.-22     	; 0x735e <vfprintf+0x1ae>
    7374:	f5 01       	movw	r30, r10
    7376:	37 fc       	sbrc	r3, 7
    7378:	85 91       	lpm	r24, Z+
    737a:	37 fe       	sbrs	r3, 7
    737c:	81 91       	ld	r24, Z+
    737e:	5f 01       	movw	r10, r30
    7380:	b6 01       	movw	r22, r12
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	28 d1       	rcall	.+592    	; 0x75d6 <fputc>
    7386:	21 10       	cpse	r2, r1
    7388:	2a 94       	dec	r2
    738a:	21 e0       	ldi	r18, 0x01	; 1
    738c:	82 1a       	sub	r8, r18
    738e:	91 08       	sbc	r9, r1
    7390:	81 14       	cp	r8, r1
    7392:	91 04       	cpc	r9, r1
    7394:	79 f7       	brne	.-34     	; 0x7374 <vfprintf+0x1c4>
    7396:	e1 c0       	rjmp	.+450    	; 0x755a <vfprintf+0x3aa>
    7398:	84 36       	cpi	r24, 0x64	; 100
    739a:	11 f0       	breq	.+4      	; 0x73a0 <vfprintf+0x1f0>
    739c:	89 36       	cpi	r24, 0x69	; 105
    739e:	39 f5       	brne	.+78     	; 0x73ee <vfprintf+0x23e>
    73a0:	f8 01       	movw	r30, r16
    73a2:	37 fe       	sbrs	r3, 7
    73a4:	07 c0       	rjmp	.+14     	; 0x73b4 <vfprintf+0x204>
    73a6:	60 81       	ld	r22, Z
    73a8:	71 81       	ldd	r23, Z+1	; 0x01
    73aa:	82 81       	ldd	r24, Z+2	; 0x02
    73ac:	93 81       	ldd	r25, Z+3	; 0x03
    73ae:	0c 5f       	subi	r16, 0xFC	; 252
    73b0:	1f 4f       	sbci	r17, 0xFF	; 255
    73b2:	08 c0       	rjmp	.+16     	; 0x73c4 <vfprintf+0x214>
    73b4:	60 81       	ld	r22, Z
    73b6:	71 81       	ldd	r23, Z+1	; 0x01
    73b8:	07 2e       	mov	r0, r23
    73ba:	00 0c       	add	r0, r0
    73bc:	88 0b       	sbc	r24, r24
    73be:	99 0b       	sbc	r25, r25
    73c0:	0e 5f       	subi	r16, 0xFE	; 254
    73c2:	1f 4f       	sbci	r17, 0xFF	; 255
    73c4:	f3 2d       	mov	r31, r3
    73c6:	ff 76       	andi	r31, 0x6F	; 111
    73c8:	3f 2e       	mov	r3, r31
    73ca:	97 ff       	sbrs	r25, 7
    73cc:	09 c0       	rjmp	.+18     	; 0x73e0 <vfprintf+0x230>
    73ce:	90 95       	com	r25
    73d0:	80 95       	com	r24
    73d2:	70 95       	com	r23
    73d4:	61 95       	neg	r22
    73d6:	7f 4f       	sbci	r23, 0xFF	; 255
    73d8:	8f 4f       	sbci	r24, 0xFF	; 255
    73da:	9f 4f       	sbci	r25, 0xFF	; 255
    73dc:	f0 68       	ori	r31, 0x80	; 128
    73de:	3f 2e       	mov	r3, r31
    73e0:	2a e0       	ldi	r18, 0x0A	; 10
    73e2:	30 e0       	ldi	r19, 0x00	; 0
    73e4:	a3 01       	movw	r20, r6
    73e6:	33 d1       	rcall	.+614    	; 0x764e <__ultoa_invert>
    73e8:	88 2e       	mov	r8, r24
    73ea:	86 18       	sub	r8, r6
    73ec:	44 c0       	rjmp	.+136    	; 0x7476 <vfprintf+0x2c6>
    73ee:	85 37       	cpi	r24, 0x75	; 117
    73f0:	31 f4       	brne	.+12     	; 0x73fe <vfprintf+0x24e>
    73f2:	23 2d       	mov	r18, r3
    73f4:	2f 7e       	andi	r18, 0xEF	; 239
    73f6:	b2 2e       	mov	r11, r18
    73f8:	2a e0       	ldi	r18, 0x0A	; 10
    73fa:	30 e0       	ldi	r19, 0x00	; 0
    73fc:	25 c0       	rjmp	.+74     	; 0x7448 <vfprintf+0x298>
    73fe:	93 2d       	mov	r25, r3
    7400:	99 7f       	andi	r25, 0xF9	; 249
    7402:	b9 2e       	mov	r11, r25
    7404:	8f 36       	cpi	r24, 0x6F	; 111
    7406:	c1 f0       	breq	.+48     	; 0x7438 <vfprintf+0x288>
    7408:	18 f4       	brcc	.+6      	; 0x7410 <vfprintf+0x260>
    740a:	88 35       	cpi	r24, 0x58	; 88
    740c:	79 f0       	breq	.+30     	; 0x742c <vfprintf+0x27c>
    740e:	ae c0       	rjmp	.+348    	; 0x756c <vfprintf+0x3bc>
    7410:	80 37       	cpi	r24, 0x70	; 112
    7412:	19 f0       	breq	.+6      	; 0x741a <vfprintf+0x26a>
    7414:	88 37       	cpi	r24, 0x78	; 120
    7416:	21 f0       	breq	.+8      	; 0x7420 <vfprintf+0x270>
    7418:	a9 c0       	rjmp	.+338    	; 0x756c <vfprintf+0x3bc>
    741a:	e9 2f       	mov	r30, r25
    741c:	e0 61       	ori	r30, 0x10	; 16
    741e:	be 2e       	mov	r11, r30
    7420:	b4 fe       	sbrs	r11, 4
    7422:	0d c0       	rjmp	.+26     	; 0x743e <vfprintf+0x28e>
    7424:	fb 2d       	mov	r31, r11
    7426:	f4 60       	ori	r31, 0x04	; 4
    7428:	bf 2e       	mov	r11, r31
    742a:	09 c0       	rjmp	.+18     	; 0x743e <vfprintf+0x28e>
    742c:	34 fe       	sbrs	r3, 4
    742e:	0a c0       	rjmp	.+20     	; 0x7444 <vfprintf+0x294>
    7430:	29 2f       	mov	r18, r25
    7432:	26 60       	ori	r18, 0x06	; 6
    7434:	b2 2e       	mov	r11, r18
    7436:	06 c0       	rjmp	.+12     	; 0x7444 <vfprintf+0x294>
    7438:	28 e0       	ldi	r18, 0x08	; 8
    743a:	30 e0       	ldi	r19, 0x00	; 0
    743c:	05 c0       	rjmp	.+10     	; 0x7448 <vfprintf+0x298>
    743e:	20 e1       	ldi	r18, 0x10	; 16
    7440:	30 e0       	ldi	r19, 0x00	; 0
    7442:	02 c0       	rjmp	.+4      	; 0x7448 <vfprintf+0x298>
    7444:	20 e1       	ldi	r18, 0x10	; 16
    7446:	32 e0       	ldi	r19, 0x02	; 2
    7448:	f8 01       	movw	r30, r16
    744a:	b7 fe       	sbrs	r11, 7
    744c:	07 c0       	rjmp	.+14     	; 0x745c <vfprintf+0x2ac>
    744e:	60 81       	ld	r22, Z
    7450:	71 81       	ldd	r23, Z+1	; 0x01
    7452:	82 81       	ldd	r24, Z+2	; 0x02
    7454:	93 81       	ldd	r25, Z+3	; 0x03
    7456:	0c 5f       	subi	r16, 0xFC	; 252
    7458:	1f 4f       	sbci	r17, 0xFF	; 255
    745a:	06 c0       	rjmp	.+12     	; 0x7468 <vfprintf+0x2b8>
    745c:	60 81       	ld	r22, Z
    745e:	71 81       	ldd	r23, Z+1	; 0x01
    7460:	80 e0       	ldi	r24, 0x00	; 0
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	0e 5f       	subi	r16, 0xFE	; 254
    7466:	1f 4f       	sbci	r17, 0xFF	; 255
    7468:	a3 01       	movw	r20, r6
    746a:	f1 d0       	rcall	.+482    	; 0x764e <__ultoa_invert>
    746c:	88 2e       	mov	r8, r24
    746e:	86 18       	sub	r8, r6
    7470:	fb 2d       	mov	r31, r11
    7472:	ff 77       	andi	r31, 0x7F	; 127
    7474:	3f 2e       	mov	r3, r31
    7476:	36 fe       	sbrs	r3, 6
    7478:	0d c0       	rjmp	.+26     	; 0x7494 <vfprintf+0x2e4>
    747a:	23 2d       	mov	r18, r3
    747c:	2e 7f       	andi	r18, 0xFE	; 254
    747e:	a2 2e       	mov	r10, r18
    7480:	89 14       	cp	r8, r9
    7482:	58 f4       	brcc	.+22     	; 0x749a <vfprintf+0x2ea>
    7484:	34 fe       	sbrs	r3, 4
    7486:	0b c0       	rjmp	.+22     	; 0x749e <vfprintf+0x2ee>
    7488:	32 fc       	sbrc	r3, 2
    748a:	09 c0       	rjmp	.+18     	; 0x749e <vfprintf+0x2ee>
    748c:	83 2d       	mov	r24, r3
    748e:	8e 7e       	andi	r24, 0xEE	; 238
    7490:	a8 2e       	mov	r10, r24
    7492:	05 c0       	rjmp	.+10     	; 0x749e <vfprintf+0x2ee>
    7494:	b8 2c       	mov	r11, r8
    7496:	a3 2c       	mov	r10, r3
    7498:	03 c0       	rjmp	.+6      	; 0x74a0 <vfprintf+0x2f0>
    749a:	b8 2c       	mov	r11, r8
    749c:	01 c0       	rjmp	.+2      	; 0x74a0 <vfprintf+0x2f0>
    749e:	b9 2c       	mov	r11, r9
    74a0:	a4 fe       	sbrs	r10, 4
    74a2:	0f c0       	rjmp	.+30     	; 0x74c2 <vfprintf+0x312>
    74a4:	fe 01       	movw	r30, r28
    74a6:	e8 0d       	add	r30, r8
    74a8:	f1 1d       	adc	r31, r1
    74aa:	80 81       	ld	r24, Z
    74ac:	80 33       	cpi	r24, 0x30	; 48
    74ae:	21 f4       	brne	.+8      	; 0x74b8 <vfprintf+0x308>
    74b0:	9a 2d       	mov	r25, r10
    74b2:	99 7e       	andi	r25, 0xE9	; 233
    74b4:	a9 2e       	mov	r10, r25
    74b6:	09 c0       	rjmp	.+18     	; 0x74ca <vfprintf+0x31a>
    74b8:	a2 fe       	sbrs	r10, 2
    74ba:	06 c0       	rjmp	.+12     	; 0x74c8 <vfprintf+0x318>
    74bc:	b3 94       	inc	r11
    74be:	b3 94       	inc	r11
    74c0:	04 c0       	rjmp	.+8      	; 0x74ca <vfprintf+0x31a>
    74c2:	8a 2d       	mov	r24, r10
    74c4:	86 78       	andi	r24, 0x86	; 134
    74c6:	09 f0       	breq	.+2      	; 0x74ca <vfprintf+0x31a>
    74c8:	b3 94       	inc	r11
    74ca:	a3 fc       	sbrc	r10, 3
    74cc:	10 c0       	rjmp	.+32     	; 0x74ee <vfprintf+0x33e>
    74ce:	a0 fe       	sbrs	r10, 0
    74d0:	06 c0       	rjmp	.+12     	; 0x74de <vfprintf+0x32e>
    74d2:	b2 14       	cp	r11, r2
    74d4:	80 f4       	brcc	.+32     	; 0x74f6 <vfprintf+0x346>
    74d6:	28 0c       	add	r2, r8
    74d8:	92 2c       	mov	r9, r2
    74da:	9b 18       	sub	r9, r11
    74dc:	0d c0       	rjmp	.+26     	; 0x74f8 <vfprintf+0x348>
    74de:	b2 14       	cp	r11, r2
    74e0:	58 f4       	brcc	.+22     	; 0x74f8 <vfprintf+0x348>
    74e2:	b6 01       	movw	r22, r12
    74e4:	80 e2       	ldi	r24, 0x20	; 32
    74e6:	90 e0       	ldi	r25, 0x00	; 0
    74e8:	76 d0       	rcall	.+236    	; 0x75d6 <fputc>
    74ea:	b3 94       	inc	r11
    74ec:	f8 cf       	rjmp	.-16     	; 0x74de <vfprintf+0x32e>
    74ee:	b2 14       	cp	r11, r2
    74f0:	18 f4       	brcc	.+6      	; 0x74f8 <vfprintf+0x348>
    74f2:	2b 18       	sub	r2, r11
    74f4:	02 c0       	rjmp	.+4      	; 0x74fa <vfprintf+0x34a>
    74f6:	98 2c       	mov	r9, r8
    74f8:	21 2c       	mov	r2, r1
    74fa:	a4 fe       	sbrs	r10, 4
    74fc:	0f c0       	rjmp	.+30     	; 0x751c <vfprintf+0x36c>
    74fe:	b6 01       	movw	r22, r12
    7500:	80 e3       	ldi	r24, 0x30	; 48
    7502:	90 e0       	ldi	r25, 0x00	; 0
    7504:	68 d0       	rcall	.+208    	; 0x75d6 <fputc>
    7506:	a2 fe       	sbrs	r10, 2
    7508:	16 c0       	rjmp	.+44     	; 0x7536 <vfprintf+0x386>
    750a:	a1 fc       	sbrc	r10, 1
    750c:	03 c0       	rjmp	.+6      	; 0x7514 <vfprintf+0x364>
    750e:	88 e7       	ldi	r24, 0x78	; 120
    7510:	90 e0       	ldi	r25, 0x00	; 0
    7512:	02 c0       	rjmp	.+4      	; 0x7518 <vfprintf+0x368>
    7514:	88 e5       	ldi	r24, 0x58	; 88
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	b6 01       	movw	r22, r12
    751a:	0c c0       	rjmp	.+24     	; 0x7534 <vfprintf+0x384>
    751c:	8a 2d       	mov	r24, r10
    751e:	86 78       	andi	r24, 0x86	; 134
    7520:	51 f0       	breq	.+20     	; 0x7536 <vfprintf+0x386>
    7522:	a1 fe       	sbrs	r10, 1
    7524:	02 c0       	rjmp	.+4      	; 0x752a <vfprintf+0x37a>
    7526:	8b e2       	ldi	r24, 0x2B	; 43
    7528:	01 c0       	rjmp	.+2      	; 0x752c <vfprintf+0x37c>
    752a:	80 e2       	ldi	r24, 0x20	; 32
    752c:	a7 fc       	sbrc	r10, 7
    752e:	8d e2       	ldi	r24, 0x2D	; 45
    7530:	b6 01       	movw	r22, r12
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	50 d0       	rcall	.+160    	; 0x75d6 <fputc>
    7536:	89 14       	cp	r8, r9
    7538:	30 f4       	brcc	.+12     	; 0x7546 <vfprintf+0x396>
    753a:	b6 01       	movw	r22, r12
    753c:	80 e3       	ldi	r24, 0x30	; 48
    753e:	90 e0       	ldi	r25, 0x00	; 0
    7540:	4a d0       	rcall	.+148    	; 0x75d6 <fputc>
    7542:	9a 94       	dec	r9
    7544:	f8 cf       	rjmp	.-16     	; 0x7536 <vfprintf+0x386>
    7546:	8a 94       	dec	r8
    7548:	f3 01       	movw	r30, r6
    754a:	e8 0d       	add	r30, r8
    754c:	f1 1d       	adc	r31, r1
    754e:	80 81       	ld	r24, Z
    7550:	b6 01       	movw	r22, r12
    7552:	90 e0       	ldi	r25, 0x00	; 0
    7554:	40 d0       	rcall	.+128    	; 0x75d6 <fputc>
    7556:	81 10       	cpse	r8, r1
    7558:	f6 cf       	rjmp	.-20     	; 0x7546 <vfprintf+0x396>
    755a:	22 20       	and	r2, r2
    755c:	09 f4       	brne	.+2      	; 0x7560 <vfprintf+0x3b0>
    755e:	4e ce       	rjmp	.-868    	; 0x71fc <vfprintf+0x4c>
    7560:	b6 01       	movw	r22, r12
    7562:	80 e2       	ldi	r24, 0x20	; 32
    7564:	90 e0       	ldi	r25, 0x00	; 0
    7566:	37 d0       	rcall	.+110    	; 0x75d6 <fputc>
    7568:	2a 94       	dec	r2
    756a:	f7 cf       	rjmp	.-18     	; 0x755a <vfprintf+0x3aa>
    756c:	f6 01       	movw	r30, r12
    756e:	86 81       	ldd	r24, Z+6	; 0x06
    7570:	97 81       	ldd	r25, Z+7	; 0x07
    7572:	02 c0       	rjmp	.+4      	; 0x7578 <vfprintf+0x3c8>
    7574:	8f ef       	ldi	r24, 0xFF	; 255
    7576:	9f ef       	ldi	r25, 0xFF	; 255
    7578:	2b 96       	adiw	r28, 0x0b	; 11
    757a:	0f b6       	in	r0, 0x3f	; 63
    757c:	f8 94       	cli
    757e:	de bf       	out	0x3e, r29	; 62
    7580:	0f be       	out	0x3f, r0	; 63
    7582:	cd bf       	out	0x3d, r28	; 61
    7584:	df 91       	pop	r29
    7586:	cf 91       	pop	r28
    7588:	1f 91       	pop	r17
    758a:	0f 91       	pop	r16
    758c:	ff 90       	pop	r15
    758e:	ef 90       	pop	r14
    7590:	df 90       	pop	r13
    7592:	cf 90       	pop	r12
    7594:	bf 90       	pop	r11
    7596:	af 90       	pop	r10
    7598:	9f 90       	pop	r9
    759a:	8f 90       	pop	r8
    759c:	7f 90       	pop	r7
    759e:	6f 90       	pop	r6
    75a0:	5f 90       	pop	r5
    75a2:	4f 90       	pop	r4
    75a4:	3f 90       	pop	r3
    75a6:	2f 90       	pop	r2
    75a8:	08 95       	ret

000075aa <strnlen_P>:
    75aa:	fc 01       	movw	r30, r24
    75ac:	05 90       	lpm	r0, Z+
    75ae:	61 50       	subi	r22, 0x01	; 1
    75b0:	70 40       	sbci	r23, 0x00	; 0
    75b2:	01 10       	cpse	r0, r1
    75b4:	d8 f7       	brcc	.-10     	; 0x75ac <strnlen_P+0x2>
    75b6:	80 95       	com	r24
    75b8:	90 95       	com	r25
    75ba:	8e 0f       	add	r24, r30
    75bc:	9f 1f       	adc	r25, r31
    75be:	08 95       	ret

000075c0 <strnlen>:
    75c0:	fc 01       	movw	r30, r24
    75c2:	61 50       	subi	r22, 0x01	; 1
    75c4:	70 40       	sbci	r23, 0x00	; 0
    75c6:	01 90       	ld	r0, Z+
    75c8:	01 10       	cpse	r0, r1
    75ca:	d8 f7       	brcc	.-10     	; 0x75c2 <strnlen+0x2>
    75cc:	80 95       	com	r24
    75ce:	90 95       	com	r25
    75d0:	8e 0f       	add	r24, r30
    75d2:	9f 1f       	adc	r25, r31
    75d4:	08 95       	ret

000075d6 <fputc>:
    75d6:	0f 93       	push	r16
    75d8:	1f 93       	push	r17
    75da:	cf 93       	push	r28
    75dc:	df 93       	push	r29
    75de:	fb 01       	movw	r30, r22
    75e0:	23 81       	ldd	r18, Z+3	; 0x03
    75e2:	21 fd       	sbrc	r18, 1
    75e4:	03 c0       	rjmp	.+6      	; 0x75ec <fputc+0x16>
    75e6:	8f ef       	ldi	r24, 0xFF	; 255
    75e8:	9f ef       	ldi	r25, 0xFF	; 255
    75ea:	2c c0       	rjmp	.+88     	; 0x7644 <fputc+0x6e>
    75ec:	22 ff       	sbrs	r18, 2
    75ee:	16 c0       	rjmp	.+44     	; 0x761c <fputc+0x46>
    75f0:	46 81       	ldd	r20, Z+6	; 0x06
    75f2:	57 81       	ldd	r21, Z+7	; 0x07
    75f4:	24 81       	ldd	r18, Z+4	; 0x04
    75f6:	35 81       	ldd	r19, Z+5	; 0x05
    75f8:	42 17       	cp	r20, r18
    75fa:	53 07       	cpc	r21, r19
    75fc:	44 f4       	brge	.+16     	; 0x760e <fputc+0x38>
    75fe:	a0 81       	ld	r26, Z
    7600:	b1 81       	ldd	r27, Z+1	; 0x01
    7602:	9d 01       	movw	r18, r26
    7604:	2f 5f       	subi	r18, 0xFF	; 255
    7606:	3f 4f       	sbci	r19, 0xFF	; 255
    7608:	31 83       	std	Z+1, r19	; 0x01
    760a:	20 83       	st	Z, r18
    760c:	8c 93       	st	X, r24
    760e:	26 81       	ldd	r18, Z+6	; 0x06
    7610:	37 81       	ldd	r19, Z+7	; 0x07
    7612:	2f 5f       	subi	r18, 0xFF	; 255
    7614:	3f 4f       	sbci	r19, 0xFF	; 255
    7616:	37 83       	std	Z+7, r19	; 0x07
    7618:	26 83       	std	Z+6, r18	; 0x06
    761a:	14 c0       	rjmp	.+40     	; 0x7644 <fputc+0x6e>
    761c:	8b 01       	movw	r16, r22
    761e:	ec 01       	movw	r28, r24
    7620:	fb 01       	movw	r30, r22
    7622:	00 84       	ldd	r0, Z+8	; 0x08
    7624:	f1 85       	ldd	r31, Z+9	; 0x09
    7626:	e0 2d       	mov	r30, r0
    7628:	19 95       	eicall
    762a:	89 2b       	or	r24, r25
    762c:	e1 f6       	brne	.-72     	; 0x75e6 <fputc+0x10>
    762e:	d8 01       	movw	r26, r16
    7630:	16 96       	adiw	r26, 0x06	; 6
    7632:	8d 91       	ld	r24, X+
    7634:	9c 91       	ld	r25, X
    7636:	17 97       	sbiw	r26, 0x07	; 7
    7638:	01 96       	adiw	r24, 0x01	; 1
    763a:	17 96       	adiw	r26, 0x07	; 7
    763c:	9c 93       	st	X, r25
    763e:	8e 93       	st	-X, r24
    7640:	16 97       	sbiw	r26, 0x06	; 6
    7642:	ce 01       	movw	r24, r28
    7644:	df 91       	pop	r29
    7646:	cf 91       	pop	r28
    7648:	1f 91       	pop	r17
    764a:	0f 91       	pop	r16
    764c:	08 95       	ret

0000764e <__ultoa_invert>:
    764e:	fa 01       	movw	r30, r20
    7650:	aa 27       	eor	r26, r26
    7652:	28 30       	cpi	r18, 0x08	; 8
    7654:	51 f1       	breq	.+84     	; 0x76aa <__ultoa_invert+0x5c>
    7656:	20 31       	cpi	r18, 0x10	; 16
    7658:	81 f1       	breq	.+96     	; 0x76ba <__ultoa_invert+0x6c>
    765a:	e8 94       	clt
    765c:	6f 93       	push	r22
    765e:	6e 7f       	andi	r22, 0xFE	; 254
    7660:	6e 5f       	subi	r22, 0xFE	; 254
    7662:	7f 4f       	sbci	r23, 0xFF	; 255
    7664:	8f 4f       	sbci	r24, 0xFF	; 255
    7666:	9f 4f       	sbci	r25, 0xFF	; 255
    7668:	af 4f       	sbci	r26, 0xFF	; 255
    766a:	b1 e0       	ldi	r27, 0x01	; 1
    766c:	3e d0       	rcall	.+124    	; 0x76ea <__ultoa_invert+0x9c>
    766e:	b4 e0       	ldi	r27, 0x04	; 4
    7670:	3c d0       	rcall	.+120    	; 0x76ea <__ultoa_invert+0x9c>
    7672:	67 0f       	add	r22, r23
    7674:	78 1f       	adc	r23, r24
    7676:	89 1f       	adc	r24, r25
    7678:	9a 1f       	adc	r25, r26
    767a:	a1 1d       	adc	r26, r1
    767c:	68 0f       	add	r22, r24
    767e:	79 1f       	adc	r23, r25
    7680:	8a 1f       	adc	r24, r26
    7682:	91 1d       	adc	r25, r1
    7684:	a1 1d       	adc	r26, r1
    7686:	6a 0f       	add	r22, r26
    7688:	71 1d       	adc	r23, r1
    768a:	81 1d       	adc	r24, r1
    768c:	91 1d       	adc	r25, r1
    768e:	a1 1d       	adc	r26, r1
    7690:	20 d0       	rcall	.+64     	; 0x76d2 <__ultoa_invert+0x84>
    7692:	09 f4       	brne	.+2      	; 0x7696 <__ultoa_invert+0x48>
    7694:	68 94       	set
    7696:	3f 91       	pop	r19
    7698:	2a e0       	ldi	r18, 0x0A	; 10
    769a:	26 9f       	mul	r18, r22
    769c:	11 24       	eor	r1, r1
    769e:	30 19       	sub	r19, r0
    76a0:	30 5d       	subi	r19, 0xD0	; 208
    76a2:	31 93       	st	Z+, r19
    76a4:	de f6       	brtc	.-74     	; 0x765c <__ultoa_invert+0xe>
    76a6:	cf 01       	movw	r24, r30
    76a8:	08 95       	ret
    76aa:	46 2f       	mov	r20, r22
    76ac:	47 70       	andi	r20, 0x07	; 7
    76ae:	40 5d       	subi	r20, 0xD0	; 208
    76b0:	41 93       	st	Z+, r20
    76b2:	b3 e0       	ldi	r27, 0x03	; 3
    76b4:	0f d0       	rcall	.+30     	; 0x76d4 <__ultoa_invert+0x86>
    76b6:	c9 f7       	brne	.-14     	; 0x76aa <__ultoa_invert+0x5c>
    76b8:	f6 cf       	rjmp	.-20     	; 0x76a6 <__ultoa_invert+0x58>
    76ba:	46 2f       	mov	r20, r22
    76bc:	4f 70       	andi	r20, 0x0F	; 15
    76be:	40 5d       	subi	r20, 0xD0	; 208
    76c0:	4a 33       	cpi	r20, 0x3A	; 58
    76c2:	18 f0       	brcs	.+6      	; 0x76ca <__ultoa_invert+0x7c>
    76c4:	49 5d       	subi	r20, 0xD9	; 217
    76c6:	31 fd       	sbrc	r19, 1
    76c8:	40 52       	subi	r20, 0x20	; 32
    76ca:	41 93       	st	Z+, r20
    76cc:	02 d0       	rcall	.+4      	; 0x76d2 <__ultoa_invert+0x84>
    76ce:	a9 f7       	brne	.-22     	; 0x76ba <__ultoa_invert+0x6c>
    76d0:	ea cf       	rjmp	.-44     	; 0x76a6 <__ultoa_invert+0x58>
    76d2:	b4 e0       	ldi	r27, 0x04	; 4
    76d4:	a6 95       	lsr	r26
    76d6:	97 95       	ror	r25
    76d8:	87 95       	ror	r24
    76da:	77 95       	ror	r23
    76dc:	67 95       	ror	r22
    76de:	ba 95       	dec	r27
    76e0:	c9 f7       	brne	.-14     	; 0x76d4 <__ultoa_invert+0x86>
    76e2:	00 97       	sbiw	r24, 0x00	; 0
    76e4:	61 05       	cpc	r22, r1
    76e6:	71 05       	cpc	r23, r1
    76e8:	08 95       	ret
    76ea:	9b 01       	movw	r18, r22
    76ec:	ac 01       	movw	r20, r24
    76ee:	0a 2e       	mov	r0, r26
    76f0:	06 94       	lsr	r0
    76f2:	57 95       	ror	r21
    76f4:	47 95       	ror	r20
    76f6:	37 95       	ror	r19
    76f8:	27 95       	ror	r18
    76fa:	ba 95       	dec	r27
    76fc:	c9 f7       	brne	.-14     	; 0x76f0 <__ultoa_invert+0xa2>
    76fe:	62 0f       	add	r22, r18
    7700:	73 1f       	adc	r23, r19
    7702:	84 1f       	adc	r24, r20
    7704:	95 1f       	adc	r25, r21
    7706:	a0 1d       	adc	r26, r0
    7708:	08 95       	ret

0000770a <_exit>:
    770a:	f8 94       	cli

0000770c <__stop_program>:
    770c:	ff cf       	rjmp	.-2      	; 0x770c <__stop_program>
