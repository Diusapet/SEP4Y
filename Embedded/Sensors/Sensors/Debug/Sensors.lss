
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006b0  00800200  000074d6  0000756a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000074d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000286  008008b0  008008b0  00007c1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ba0  00000000  00000000  00007cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a88b  00000000  00000000  00008858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003252  00000000  00000000  000130e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000721c  00000000  00000000  00016335  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002654  00000000  00000000  0001d554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f57  00000000  00000000  0001fba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066ae  00000000  00000000  00023aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d0  00000000  00000000  0002a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	15 c1       	rjmp	.+554    	; 0x230 <__bad_interrupt>
       6:	00 00       	nop
       8:	13 c1       	rjmp	.+550    	; 0x230 <__bad_interrupt>
       a:	00 00       	nop
       c:	11 c1       	rjmp	.+546    	; 0x230 <__bad_interrupt>
       e:	00 00       	nop
      10:	0f c1       	rjmp	.+542    	; 0x230 <__bad_interrupt>
      12:	00 00       	nop
      14:	0d c1       	rjmp	.+538    	; 0x230 <__bad_interrupt>
      16:	00 00       	nop
      18:	0b c1       	rjmp	.+534    	; 0x230 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	09 c1       	rjmp	.+530    	; 0x230 <__bad_interrupt>
      1e:	00 00       	nop
      20:	07 c1       	rjmp	.+526    	; 0x230 <__bad_interrupt>
      22:	00 00       	nop
      24:	05 c1       	rjmp	.+522    	; 0x230 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c1       	rjmp	.+518    	; 0x230 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	01 c1       	rjmp	.+514    	; 0x230 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fd c5       	rjmp	.+3066   	; 0xc2c <__vector_12>
      32:	00 00       	nop
      34:	fd c0       	rjmp	.+506    	; 0x230 <__bad_interrupt>
      36:	00 00       	nop
      38:	fb c0       	rjmp	.+502    	; 0x230 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f9 c0       	rjmp	.+498    	; 0x230 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c0       	rjmp	.+494    	; 0x230 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c0       	rjmp	.+490    	; 0x230 <__bad_interrupt>
      46:	00 00       	nop
      48:	f3 c0       	rjmp	.+486    	; 0x230 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f1 c0       	rjmp	.+482    	; 0x230 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ef c0       	rjmp	.+478    	; 0x230 <__bad_interrupt>
      52:	00 00       	nop
      54:	ed c0       	rjmp	.+474    	; 0x230 <__bad_interrupt>
      56:	00 00       	nop
      58:	eb c0       	rjmp	.+470    	; 0x230 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e9 c0       	rjmp	.+466    	; 0x230 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c0       	rjmp	.+462    	; 0x230 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 20 28 	jmp	0x5040	; 0x5040 <__vector_25>
      68:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__vector_26>
      6c:	e1 c0       	rjmp	.+450    	; 0x230 <__bad_interrupt>
      6e:	00 00       	nop
      70:	df c0       	rjmp	.+446    	; 0x230 <__bad_interrupt>
      72:	00 00       	nop
      74:	dd c0       	rjmp	.+442    	; 0x230 <__bad_interrupt>
      76:	00 00       	nop
      78:	db c0       	rjmp	.+438    	; 0x230 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d9 c0       	rjmp	.+434    	; 0x230 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d7 c0       	rjmp	.+430    	; 0x230 <__bad_interrupt>
      82:	00 00       	nop
      84:	d5 c0       	rjmp	.+426    	; 0x230 <__bad_interrupt>
      86:	00 00       	nop
      88:	d3 c0       	rjmp	.+422    	; 0x230 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 c0       	rjmp	.+418    	; 0x230 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b6 28 	jmp	0x516c	; 0x516c <__vector_36>
      94:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__vector_37>
      98:	cb c0       	rjmp	.+406    	; 0x230 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d0 32 	jmp	0x65a0	; 0x65a0 <__vector_39>
      a0:	c7 c0       	rjmp	.+398    	; 0x230 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c5 c0       	rjmp	.+394    	; 0x230 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c3 c0       	rjmp	.+390    	; 0x230 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c1 c0       	rjmp	.+386    	; 0x230 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bf c0       	rjmp	.+382    	; 0x230 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bd c0       	rjmp	.+378    	; 0x230 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bb c0       	rjmp	.+374    	; 0x230 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b9 c0       	rjmp	.+370    	; 0x230 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b7 c0       	rjmp	.+366    	; 0x230 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b5 c0       	rjmp	.+362    	; 0x230 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b3 c0       	rjmp	.+358    	; 0x230 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4c 29 	jmp	0x5298	; 0x5298 <__vector_51>
      d0:	0c 94 9e 29 	jmp	0x533c	; 0x533c <__vector_52>
      d4:	ad c0       	rjmp	.+346    	; 0x230 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e2 29 	jmp	0x53c4	; 0x53c4 <__vector_54>
      dc:	0c 94 34 2a 	jmp	0x5468	; 0x5468 <__vector_55>
      e0:	a7 c0       	rjmp	.+334    	; 0x230 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a1 1f       	adc	r26, r17
      e6:	a1 1f       	adc	r26, r17
      e8:	a1 1f       	adc	r26, r17
      ea:	ec 1f       	adc	r30, r28
      ec:	f8 1f       	adc	r31, r24
      ee:	1e 20       	and	r1, r14
      f0:	a1 1f       	adc	r26, r17
      f2:	a1 1f       	adc	r26, r17
      f4:	ec 1f       	adc	r30, r28
      f6:	f8 1f       	adc	r31, r24
      f8:	f2 32       	cpi	r31, 0x22	; 34
      fa:	62 33       	cpi	r22, 0x32	; 50
      fc:	62 33       	cpi	r22, 0x32	; 50
      fe:	62 33       	cpi	r22, 0x32	; 50
     100:	62 33       	cpi	r22, 0x32	; 50
     102:	62 33       	cpi	r22, 0x32	; 50
     104:	62 33       	cpi	r22, 0x32	; 50
     106:	62 33       	cpi	r22, 0x32	; 50
     108:	f2 32       	cpi	r31, 0x22	; 34
     10a:	62 33       	cpi	r22, 0x32	; 50
     10c:	62 33       	cpi	r22, 0x32	; 50
     10e:	62 33       	cpi	r22, 0x32	; 50
     110:	62 33       	cpi	r22, 0x32	; 50
     112:	62 33       	cpi	r22, 0x32	; 50
     114:	62 33       	cpi	r22, 0x32	; 50
     116:	62 33       	cpi	r22, 0x32	; 50
     118:	f4 32       	cpi	r31, 0x24	; 36
     11a:	62 33       	cpi	r22, 0x32	; 50
     11c:	62 33       	cpi	r22, 0x32	; 50
     11e:	62 33       	cpi	r22, 0x32	; 50
     120:	62 33       	cpi	r22, 0x32	; 50
     122:	62 33       	cpi	r22, 0x32	; 50
     124:	62 33       	cpi	r22, 0x32	; 50
     126:	62 33       	cpi	r22, 0x32	; 50
     128:	62 33       	cpi	r22, 0x32	; 50
     12a:	62 33       	cpi	r22, 0x32	; 50
     12c:	62 33       	cpi	r22, 0x32	; 50
     12e:	62 33       	cpi	r22, 0x32	; 50
     130:	62 33       	cpi	r22, 0x32	; 50
     132:	62 33       	cpi	r22, 0x32	; 50
     134:	62 33       	cpi	r22, 0x32	; 50
     136:	62 33       	cpi	r22, 0x32	; 50
     138:	f4 32       	cpi	r31, 0x24	; 36
     13a:	62 33       	cpi	r22, 0x32	; 50
     13c:	62 33       	cpi	r22, 0x32	; 50
     13e:	62 33       	cpi	r22, 0x32	; 50
     140:	62 33       	cpi	r22, 0x32	; 50
     142:	62 33       	cpi	r22, 0x32	; 50
     144:	62 33       	cpi	r22, 0x32	; 50
     146:	62 33       	cpi	r22, 0x32	; 50
     148:	62 33       	cpi	r22, 0x32	; 50
     14a:	62 33       	cpi	r22, 0x32	; 50
     14c:	62 33       	cpi	r22, 0x32	; 50
     14e:	62 33       	cpi	r22, 0x32	; 50
     150:	62 33       	cpi	r22, 0x32	; 50
     152:	62 33       	cpi	r22, 0x32	; 50
     154:	62 33       	cpi	r22, 0x32	; 50
     156:	62 33       	cpi	r22, 0x32	; 50
     158:	5e 33       	cpi	r21, 0x3E	; 62
     15a:	62 33       	cpi	r22, 0x32	; 50
     15c:	62 33       	cpi	r22, 0x32	; 50
     15e:	62 33       	cpi	r22, 0x32	; 50
     160:	62 33       	cpi	r22, 0x32	; 50
     162:	62 33       	cpi	r22, 0x32	; 50
     164:	62 33       	cpi	r22, 0x32	; 50
     166:	62 33       	cpi	r22, 0x32	; 50
     168:	29 33       	cpi	r18, 0x39	; 57
     16a:	62 33       	cpi	r22, 0x32	; 50
     16c:	62 33       	cpi	r22, 0x32	; 50
     16e:	62 33       	cpi	r22, 0x32	; 50
     170:	62 33       	cpi	r22, 0x32	; 50
     172:	62 33       	cpi	r22, 0x32	; 50
     174:	62 33       	cpi	r22, 0x32	; 50
     176:	62 33       	cpi	r22, 0x32	; 50
     178:	62 33       	cpi	r22, 0x32	; 50
     17a:	62 33       	cpi	r22, 0x32	; 50
     17c:	62 33       	cpi	r22, 0x32	; 50
     17e:	62 33       	cpi	r22, 0x32	; 50
     180:	62 33       	cpi	r22, 0x32	; 50
     182:	62 33       	cpi	r22, 0x32	; 50
     184:	62 33       	cpi	r22, 0x32	; 50
     186:	62 33       	cpi	r22, 0x32	; 50
     188:	1d 33       	cpi	r17, 0x3D	; 61
     18a:	62 33       	cpi	r22, 0x32	; 50
     18c:	62 33       	cpi	r22, 0x32	; 50
     18e:	62 33       	cpi	r22, 0x32	; 50
     190:	62 33       	cpi	r22, 0x32	; 50
     192:	62 33       	cpi	r22, 0x32	; 50
     194:	62 33       	cpi	r22, 0x32	; 50
     196:	62 33       	cpi	r22, 0x32	; 50
     198:	41 33       	cpi	r20, 0x31	; 49

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <prvCheckTasksWaitingTermination>
     1ae:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <pxReadyTasksLists>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	08 f0       	brcs	.+2      	; 0x1b8 <prvIdleTask+0x1e>
     1b6:	4f d4       	rcall	.+2206   	; 0xa56 <vPortYield>
     1b8:	0e 94 24 21 	call	0x4248	; 0x4248 <vApplicationIdleHook>
     1bc:	f6 cf       	rjmp	.-20     	; 0x1aa <prvIdleTask+0x10>

000001be <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <prvTimerTask+0x6>
     1c4:	1f 92       	push	r1
     1c6:	1f 92       	push	r1
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9d 83       	std	Y+5, r25	; 0x05
     1ce:	8c 83       	std	Y+4, r24	; 0x04
     1d0:	ce 01       	movw	r24, r28
     1d2:	03 96       	adiw	r24, 0x03	; 3
     1d4:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <prvGetNextExpireTime>
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	9a 81       	ldd	r25, Y+2	; 0x02
     1e2:	62 2f       	mov	r22, r18
     1e4:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <prvProcessTimerOrBlockTask>
     1e8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <prvProcessReceivedCommands>
     1ec:	f1 cf       	rjmp	.-30     	; 0x1d0 <prvTimerTask+0x12>

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	00 e0       	ldi	r16, 0x00	; 0
     1fc:	0c bf       	out	0x3c, r16	; 60

000001fe <__do_copy_data>:
     1fe:	18 e0       	ldi	r17, 0x08	; 8
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	e6 ed       	ldi	r30, 0xD6	; 214
     206:	f4 e7       	ldi	r31, 0x74	; 116
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0b bf       	out	0x3b, r16	; 59
     20c:	02 c0       	rjmp	.+4      	; 0x212 <__do_copy_data+0x14>
     20e:	07 90       	elpm	r0, Z+
     210:	0d 92       	st	X+, r0
     212:	a0 3b       	cpi	r26, 0xB0	; 176
     214:	b1 07       	cpc	r27, r17
     216:	d9 f7       	brne	.-10     	; 0x20e <__do_copy_data+0x10>

00000218 <__do_clear_bss>:
     218:	2b e0       	ldi	r18, 0x0B	; 11
     21a:	a0 eb       	ldi	r26, 0xB0	; 176
     21c:	b8 e0       	ldi	r27, 0x08	; 8
     21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
     220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
     222:	a6 33       	cpi	r26, 0x36	; 54
     224:	b2 07       	cpc	r27, r18
     226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>
     228:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <main>
     22c:	0c 94 69 3a 	jmp	0x74d2	; 0x74d2 <_exit>

00000230 <__bad_interrupt>:
     230:	e7 ce       	rjmp	.-562    	; 0x0 <__vectors>

00000232 <measure_co2_callback>:

uint16_t co2_value;


void measure_co2_callback(uint16_t ppm)
{
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	1f 92       	push	r1
     238:	1f 92       	push	r1
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	89 83       	std	Y+1, r24	; 0x01
	co2_value = ppm;
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	9a 81       	ldd	r25, Y+2	; 0x02
     246:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <co2_value+0x1>
     24a:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <co2_value>
     24e:	00 00       	nop
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <timer_5_mins_callback>:
 *  Author: drags
 */ 
#include "../Headers/m_lora_includes.h"

void timer_5_mins_callback(TimerHandle_t pxTimer)
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	1f 92       	push	r1
     260:	1f 92       	push	r1
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	9a 83       	std	Y+2, r25	; 0x02
     268:	89 83       	std	Y+1, r24	; 0x01
	xSemaphoreGive(xSemaphore_temperature);
     26a:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <xSemaphore_temperature>
     26e:	90 91 11 0b 	lds	r25, 0x0B11	; 0x800b11 <xSemaphore_temperature+0x1>
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	42 d6       	rcall	.+3204   	; 0xf02 <xQueueGenericSend>

	xSemaphoreGive(xSemaphore_co2);
     27e:	80 91 12 0b 	lds	r24, 0x0B12	; 0x800b12 <xSemaphore_co2>
     282:	90 91 13 0b 	lds	r25, 0x0B13	; 0x800b13 <xSemaphore_co2+0x1>
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	38 d6       	rcall	.+3184   	; 0xf02 <xQueueGenericSend>
	
	xSemaphoreGive(xSemaphore_view_data);
     292:	80 91 0a 0b 	lds	r24, 0x0B0A	; 0x800b0a <xSemaphore_view_data>
     296:	90 91 0b 0b 	lds	r25, 0x0B0B	; 0x800b0b <xSemaphore_view_data+0x1>
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	2e d6       	rcall	.+3164   	; 0xf02 <xQueueGenericSend>
	
     2a6:	00 00       	nop
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <task_switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_in(uint8_t task_no) {
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	89 83       	std	Y+1, r24	; 0x01
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     2be:	88 e0       	ldi	r24, 0x08	; 8
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	28 e0       	ldi	r18, 0x08	; 8
     2c4:	31 e0       	ldi	r19, 0x01	; 1
     2c6:	f9 01       	movw	r30, r18
     2c8:	20 81       	ld	r18, Z
     2ca:	20 7f       	andi	r18, 0xF0	; 240
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
		 PORTK |= (task_no & 0b00001111);
     2d0:	88 e0       	ldi	r24, 0x08	; 8
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	28 e0       	ldi	r18, 0x08	; 8
     2d6:	31 e0       	ldi	r19, 0x01	; 1
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	32 2f       	mov	r19, r18
     2de:	29 81       	ldd	r18, Y+1	; 0x01
     2e0:	2f 70       	andi	r18, 0x0F	; 15
     2e2:	23 2b       	or	r18, r19
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
		 #endif
	}
     2e8:	00 00       	nop
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <task_switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_out(uint8_t task_no) {
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	89 83       	std	Y+1, r24	; 0x01
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     2fe:	88 e0       	ldi	r24, 0x08	; 8
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	28 e0       	ldi	r18, 0x08	; 8
     304:	31 e0       	ldi	r19, 0x01	; 1
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	20 7f       	andi	r18, 0xF0	; 240
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
		#endif
	}
     310:	00 00       	nop
     312:	0f 90       	pop	r0
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <pvPortMalloc+0x6>
     320:	1f 92       	push	r1
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	9c 83       	std	Y+4, r25	; 0x04
     328:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn;

    vTaskSuspendAll();
     32a:	0e 94 13 13 	call	0x2626	; 0x2626 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <malloc>
     336:	9a 83       	std	Y+2, r25	; 0x02
     338:	89 83       	std	Y+1, r24	; 0x01
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     33a:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	9a 81       	ldd	r25, Y+2	; 0x02
     342:	89 2b       	or	r24, r25
     344:	11 f4       	brne	.+4      	; 0x34a <pvPortMalloc+0x30>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     346:	0e 94 2c 21 	call	0x4258	; 0x4258 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	1f 92       	push	r1
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	89 83       	std	Y+1, r24	; 0x01
    if( pv )
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	89 2b       	or	r24, r25
     372:	41 f0       	breq	.+16     	; 0x384 <vPortFree+0x28>
    {
        vTaskSuspendAll();
     374:	0e 94 13 13 	call	0x2626	; 0x2626 <vTaskSuspendAll>
        {
            free( pv );
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	9a 81       	ldd	r25, Y+2	; 0x02
     37c:	0e 94 84 36 	call	0x6d08	; 0x6d08 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     380:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    }
}
     384:	00 00       	nop
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	1f 92       	push	r1
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	9c 01       	movw	r18, r24
     3a6:	2d 5f       	subi	r18, 0xFD	; 253
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	fc 01       	movw	r30, r24
     3b0:	32 83       	std	Z+2, r19	; 0x02
     3b2:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
     3b8:	2f ef       	ldi	r18, 0xFF	; 255
     3ba:	3f ef       	ldi	r19, 0xFF	; 255
     3bc:	fc 01       	movw	r30, r24
     3be:	34 83       	std	Z+4, r19	; 0x04
     3c0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	9c 01       	movw	r18, r24
     3c8:	2d 5f       	subi	r18, 0xFD	; 253
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	fc 01       	movw	r30, r24
     3d2:	36 83       	std	Z+6, r19	; 0x06
     3d4:	25 83       	std	Z+5, r18	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	9c 01       	movw	r18, r24
     3dc:	2d 5f       	subi	r18, 0xFD	; 253
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	fc 01       	movw	r30, r24
     3e6:	30 87       	std	Z+8, r19	; 0x08
     3e8:	27 83       	std	Z+7, r18	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	fc 01       	movw	r30, r24
     3f0:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     3f2:	00 00       	nop
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	1f 92       	push	r1
     404:	1f 92       	push	r1
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	9a 81       	ldd	r25, Y+2	; 0x02
     412:	fc 01       	movw	r30, r24
     414:	11 86       	std	Z+9, r1	; 0x09
     416:	10 86       	std	Z+8, r1	; 0x08

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     418:	00 00       	nop
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	00 d0       	rcall	.+0      	; 0x42a <vListInsertEnd+0x6>
     42a:	00 d0       	rcall	.+0      	; 0x42c <vListInsertEnd+0x8>
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	9c 83       	std	Y+4, r25	; 0x04
     432:	8b 83       	std	Y+3, r24	; 0x03
     434:	7e 83       	std	Y+6, r23	; 0x06
     436:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	fc 01       	movw	r30, r24
     43e:	81 81       	ldd	r24, Z+1	; 0x01
     440:	92 81       	ldd	r25, Z+2	; 0x02
     442:	9a 83       	std	Y+2, r25	; 0x02
     444:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	9e 81       	ldd	r25, Y+6	; 0x06
     44a:	29 81       	ldd	r18, Y+1	; 0x01
     44c:	3a 81       	ldd	r19, Y+2	; 0x02
     44e:	fc 01       	movw	r30, r24
     450:	33 83       	std	Z+3, r19	; 0x03
     452:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	fc 01       	movw	r30, r24
     45a:	24 81       	ldd	r18, Z+4	; 0x04
     45c:	35 81       	ldd	r19, Z+5	; 0x05
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	9e 81       	ldd	r25, Y+6	; 0x06
     462:	fc 01       	movw	r30, r24
     464:	35 83       	std	Z+5, r19	; 0x05
     466:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	fc 01       	movw	r30, r24
     46e:	84 81       	ldd	r24, Z+4	; 0x04
     470:	95 81       	ldd	r25, Z+5	; 0x05
     472:	2d 81       	ldd	r18, Y+5	; 0x05
     474:	3e 81       	ldd	r19, Y+6	; 0x06
     476:	fc 01       	movw	r30, r24
     478:	33 83       	std	Z+3, r19	; 0x03
     47a:	22 83       	std	Z+2, r18	; 0x02
    pxIndex->pxPrevious = pxNewListItem;
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	2d 81       	ldd	r18, Y+5	; 0x05
     482:	3e 81       	ldd	r19, Y+6	; 0x06
     484:	fc 01       	movw	r30, r24
     486:	35 83       	std	Z+5, r19	; 0x05
     488:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	2b 81       	ldd	r18, Y+3	; 0x03
     490:	3c 81       	ldd	r19, Y+4	; 0x04
     492:	fc 01       	movw	r30, r24
     494:	31 87       	std	Z+9, r19	; 0x09
     496:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	9c 81       	ldd	r25, Y+4	; 0x04
     49c:	fc 01       	movw	r30, r24
     49e:	80 81       	ld	r24, Z
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	28 0f       	add	r18, r24
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
}
     4ac:	00 00       	nop
     4ae:	26 96       	adiw	r28, 0x06	; 6
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	28 97       	sbiw	r28, 0x08	; 8
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	9e 83       	std	Y+6, r25	; 0x06
     4d6:	8d 83       	std	Y+5, r24	; 0x05
     4d8:	78 87       	std	Y+8, r23	; 0x08
     4da:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4dc:	8f 81       	ldd	r24, Y+7	; 0x07
     4de:	98 85       	ldd	r25, Y+8	; 0x08
     4e0:	fc 01       	movw	r30, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	91 81       	ldd	r25, Z+1	; 0x01
     4e6:	9c 83       	std	Y+4, r25	; 0x04
     4e8:	8b 83       	std	Y+3, r24	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4ea:	8b 81       	ldd	r24, Y+3	; 0x03
     4ec:	9c 81       	ldd	r25, Y+4	; 0x04
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	41 f4       	brne	.+16     	; 0x502 <vListInsert+0x42>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     4f2:	8d 81       	ldd	r24, Y+5	; 0x05
     4f4:	9e 81       	ldd	r25, Y+6	; 0x06
     4f6:	fc 01       	movw	r30, r24
     4f8:	87 81       	ldd	r24, Z+7	; 0x07
     4fa:	90 85       	ldd	r25, Z+8	; 0x08
     4fc:	9a 83       	std	Y+2, r25	; 0x02
     4fe:	89 83       	std	Y+1, r24	; 0x01
     500:	1a c0       	rjmp	.+52     	; 0x536 <vListInsert+0x76>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     502:	8d 81       	ldd	r24, Y+5	; 0x05
     504:	9e 81       	ldd	r25, Y+6	; 0x06
     506:	03 96       	adiw	r24, 0x03	; 3
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	07 c0       	rjmp	.+14     	; 0x51c <vListInsert+0x5c>
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	93 81       	ldd	r25, Z+3	; 0x03
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	fc 01       	movw	r30, r24
     522:	82 81       	ldd	r24, Z+2	; 0x02
     524:	93 81       	ldd	r25, Z+3	; 0x03
     526:	fc 01       	movw	r30, r24
     528:	20 81       	ld	r18, Z
     52a:	31 81       	ldd	r19, Z+1	; 0x01
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	82 17       	cp	r24, r18
     532:	93 07       	cpc	r25, r19
     534:	60 f7       	brcc	.-40     	; 0x50e <vListInsert+0x4e>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	22 81       	ldd	r18, Z+2	; 0x02
     53e:	33 81       	ldd	r19, Z+3	; 0x03
     540:	8f 81       	ldd	r24, Y+7	; 0x07
     542:	98 85       	ldd	r25, Y+8	; 0x08
     544:	fc 01       	movw	r30, r24
     546:	33 83       	std	Z+3, r19	; 0x03
     548:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     54a:	8f 81       	ldd	r24, Y+7	; 0x07
     54c:	98 85       	ldd	r25, Y+8	; 0x08
     54e:	fc 01       	movw	r30, r24
     550:	82 81       	ldd	r24, Z+2	; 0x02
     552:	93 81       	ldd	r25, Z+3	; 0x03
     554:	2f 81       	ldd	r18, Y+7	; 0x07
     556:	38 85       	ldd	r19, Y+8	; 0x08
     558:	fc 01       	movw	r30, r24
     55a:	35 83       	std	Z+5, r19	; 0x05
     55c:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     55e:	8f 81       	ldd	r24, Y+7	; 0x07
     560:	98 85       	ldd	r25, Y+8	; 0x08
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	3a 81       	ldd	r19, Y+2	; 0x02
     566:	fc 01       	movw	r30, r24
     568:	35 83       	std	Z+5, r19	; 0x05
     56a:	24 83       	std	Z+4, r18	; 0x04
    pxIterator->pxNext = pxNewListItem;
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	2f 81       	ldd	r18, Y+7	; 0x07
     572:	38 85       	ldd	r19, Y+8	; 0x08
     574:	fc 01       	movw	r30, r24
     576:	33 83       	std	Z+3, r19	; 0x03
     578:	22 83       	std	Z+2, r18	; 0x02

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     57a:	8f 81       	ldd	r24, Y+7	; 0x07
     57c:	98 85       	ldd	r25, Y+8	; 0x08
     57e:	2d 81       	ldd	r18, Y+5	; 0x05
     580:	3e 81       	ldd	r19, Y+6	; 0x06
     582:	fc 01       	movw	r30, r24
     584:	31 87       	std	Z+9, r19	; 0x09
     586:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	9e 81       	ldd	r25, Y+6	; 0x06
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	28 0f       	add	r18, r24
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	9e 81       	ldd	r25, Y+6	; 0x06
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
}
     59c:	00 00       	nop
     59e:	28 96       	adiw	r28, 0x08	; 8
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <uxListRemove+0x6>
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	9c 83       	std	Y+4, r25	; 0x04
     5be:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	80 85       	ldd	r24, Z+8	; 0x08
     5c8:	91 85       	ldd	r25, Z+9	; 0x09
     5ca:	9a 83       	std	Y+2, r25	; 0x02
     5cc:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	9c 81       	ldd	r25, Y+4	; 0x04
     5d2:	fc 01       	movw	r30, r24
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	93 81       	ldd	r25, Z+3	; 0x03
     5d8:	2b 81       	ldd	r18, Y+3	; 0x03
     5da:	3c 81       	ldd	r19, Y+4	; 0x04
     5dc:	f9 01       	movw	r30, r18
     5de:	24 81       	ldd	r18, Z+4	; 0x04
     5e0:	35 81       	ldd	r19, Z+5	; 0x05
     5e2:	fc 01       	movw	r30, r24
     5e4:	35 83       	std	Z+5, r19	; 0x05
     5e6:	24 83       	std	Z+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	fc 01       	movw	r30, r24
     5ee:	84 81       	ldd	r24, Z+4	; 0x04
     5f0:	95 81       	ldd	r25, Z+5	; 0x05
     5f2:	2b 81       	ldd	r18, Y+3	; 0x03
     5f4:	3c 81       	ldd	r19, Y+4	; 0x04
     5f6:	f9 01       	movw	r30, r18
     5f8:	22 81       	ldd	r18, Z+2	; 0x02
     5fa:	33 81       	ldd	r19, Z+3	; 0x03
     5fc:	fc 01       	movw	r30, r24
     5fe:	33 83       	std	Z+3, r19	; 0x03
     600:	22 83       	std	Z+2, r18	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	fc 01       	movw	r30, r24
     608:	21 81       	ldd	r18, Z+1	; 0x01
     60a:	32 81       	ldd	r19, Z+2	; 0x02
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	9c 81       	ldd	r25, Y+4	; 0x04
     610:	28 17       	cp	r18, r24
     612:	39 07       	cpc	r19, r25
     614:	51 f4       	brne	.+20     	; 0x62a <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	9c 81       	ldd	r25, Y+4	; 0x04
     61a:	fc 01       	movw	r30, r24
     61c:	24 81       	ldd	r18, Z+4	; 0x04
     61e:	35 81       	ldd	r19, Z+5	; 0x05
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	fc 01       	movw	r30, r24
     626:	32 83       	std	Z+2, r19	; 0x02
     628:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	fc 01       	movw	r30, r24
     630:	11 86       	std	Z+9, r1	; 0x09
     632:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	fc 01       	movw	r30, r24
     63a:	80 81       	ld	r24, Z
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	28 0f       	add	r18, r24
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
}
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	28 97       	sbiw	r28, 0x08	; 8
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	9c 83       	std	Y+4, r25	; 0x04
     674:	8b 83       	std	Y+3, r24	; 0x03
     676:	7e 83       	std	Y+6, r23	; 0x06
     678:	6d 83       	std	Y+5, r22	; 0x05
     67a:	58 87       	std	Y+8, r21	; 0x08
     67c:	4f 83       	std	Y+7, r20	; 0x07
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	9c 81       	ldd	r25, Y+4	; 0x04
     682:	21 e1       	ldi	r18, 0x11	; 17
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	9c 83       	std	Y+4, r25	; 0x04
     690:	8b 83       	std	Y+3, r24	; 0x03
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	22 e2       	ldi	r18, 0x22	; 34
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	9c 83       	std	Y+4, r25	; 0x04
     6a4:	8b 83       	std	Y+3, r24	; 0x03
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	9c 81       	ldd	r25, Y+4	; 0x04
     6aa:	23 e3       	ldi	r18, 0x33	; 51
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
     6b0:	8b 81       	ldd	r24, Y+3	; 0x03
     6b2:	9c 81       	ldd	r25, Y+4	; 0x04
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	9c 83       	std	Y+4, r25	; 0x04
     6b8:	8b 83       	std	Y+3, r24	; 0x03
     6ba:	8d 81       	ldd	r24, Y+5	; 0x05
     6bc:	9e 81       	ldd	r25, Y+6	; 0x06
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	29 81       	ldd	r18, Y+1	; 0x01
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	9c 81       	ldd	r25, Y+4	; 0x04
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	9c 83       	std	Y+4, r25	; 0x04
     6d4:	8b 83       	std	Y+3, r24	; 0x03
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	89 2f       	mov	r24, r25
     6dc:	99 27       	eor	r25, r25
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	29 81       	ldd	r18, Y+1	; 0x01
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	9c 81       	ldd	r25, Y+4	; 0x04
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	9c 83       	std	Y+4, r25	; 0x04
     6f4:	8b 83       	std	Y+3, r24	; 0x03
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	9c 81       	ldd	r25, Y+4	; 0x04
     6fa:	fc 01       	movw	r30, r24
     6fc:	10 82       	st	Z, r1
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	fc 01       	movw	r30, r24
     70e:	10 82       	st	Z, r1
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	9c 83       	std	Y+4, r25	; 0x04
     718:	8b 83       	std	Y+3, r24	; 0x03
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	9c 81       	ldd	r25, Y+4	; 0x04
     71e:	20 e8       	ldi	r18, 0x80	; 128
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	9c 83       	std	Y+4, r25	; 0x04
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	9c 81       	ldd	r25, Y+4	; 0x04
     732:	fc 01       	movw	r30, r24
     734:	10 82       	st	Z, r1
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	9c 81       	ldd	r25, Y+4	; 0x04
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	9c 83       	std	Y+4, r25	; 0x04
     73e:	8b 83       	std	Y+3, r24	; 0x03
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	fc 01       	movw	r30, r24
     746:	10 82       	st	Z, r1
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	9c 83       	std	Y+4, r25	; 0x04
     750:	8b 83       	std	Y+3, r24	; 0x03
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	9c 81       	ldd	r25, Y+4	; 0x04
     756:	fc 01       	movw	r30, r24
     758:	10 82       	st	Z, r1
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	22 e0       	ldi	r18, 0x02	; 2
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	8b 83       	std	Y+3, r24	; 0x03
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	9c 81       	ldd	r25, Y+4	; 0x04
     77c:	23 e0       	ldi	r18, 0x03	; 3
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	9c 83       	std	Y+4, r25	; 0x04
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	24 e0       	ldi	r18, 0x04	; 4
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	8b 83       	std	Y+3, r24	; 0x03
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	9c 81       	ldd	r25, Y+4	; 0x04
     7a4:	25 e0       	ldi	r18, 0x05	; 5
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	26 e0       	ldi	r18, 0x06	; 6
     7ba:	fc 01       	movw	r30, r24
     7bc:	20 83       	st	Z, r18
     7be:	8b 81       	ldd	r24, Y+3	; 0x03
     7c0:	9c 81       	ldd	r25, Y+4	; 0x04
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	8b 83       	std	Y+3, r24	; 0x03
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	9c 81       	ldd	r25, Y+4	; 0x04
     7cc:	27 e0       	ldi	r18, 0x07	; 7
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
     7d4:	9c 81       	ldd	r25, Y+4	; 0x04
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	8b 83       	std	Y+3, r24	; 0x03
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	9c 81       	ldd	r25, Y+4	; 0x04
     7e0:	28 e0       	ldi	r18, 0x08	; 8
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	8b 83       	std	Y+3, r24	; 0x03
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	29 e0       	ldi	r18, 0x09	; 9
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	9c 83       	std	Y+4, r25	; 0x04
     802:	8b 83       	std	Y+3, r24	; 0x03
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	20 e1       	ldi	r18, 0x10	; 16
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	9c 83       	std	Y+4, r25	; 0x04
     816:	8b 83       	std	Y+3, r24	; 0x03
     818:	8b 81       	ldd	r24, Y+3	; 0x03
     81a:	9c 81       	ldd	r25, Y+4	; 0x04
     81c:	21 e1       	ldi	r18, 0x11	; 17
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	9c 83       	std	Y+4, r25	; 0x04
     82a:	8b 83       	std	Y+3, r24	; 0x03
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	22 e1       	ldi	r18, 0x12	; 18
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	9c 81       	ldd	r25, Y+4	; 0x04
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	9c 83       	std	Y+4, r25	; 0x04
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	8b 81       	ldd	r24, Y+3	; 0x03
     842:	9c 81       	ldd	r25, Y+4	; 0x04
     844:	23 e1       	ldi	r18, 0x13	; 19
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	8b 83       	std	Y+3, r24	; 0x03
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	9c 81       	ldd	r25, Y+4	; 0x04
     858:	24 e1       	ldi	r18, 0x14	; 20
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	9c 81       	ldd	r25, Y+4	; 0x04
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	9c 83       	std	Y+4, r25	; 0x04
     866:	8b 83       	std	Y+3, r24	; 0x03
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	25 e1       	ldi	r18, 0x15	; 21
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	9c 81       	ldd	r25, Y+4	; 0x04
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	9c 83       	std	Y+4, r25	; 0x04
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	9c 81       	ldd	r25, Y+4	; 0x04
     880:	26 e1       	ldi	r18, 0x16	; 22
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	9c 81       	ldd	r25, Y+4	; 0x04
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	9c 83       	std	Y+4, r25	; 0x04
     88e:	8b 83       	std	Y+3, r24	; 0x03
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	9c 81       	ldd	r25, Y+4	; 0x04
     894:	27 e1       	ldi	r18, 0x17	; 23
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	8b 81       	ldd	r24, Y+3	; 0x03
     89c:	9c 81       	ldd	r25, Y+4	; 0x04
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	9c 81       	ldd	r25, Y+4	; 0x04
     8a8:	28 e1       	ldi	r18, 0x18	; 24
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	9c 83       	std	Y+4, r25	; 0x04
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ba:	9c 81       	ldd	r25, Y+4	; 0x04
     8bc:	29 e1       	ldi	r18, 0x19	; 25
     8be:	fc 01       	movw	r30, r24
     8c0:	20 83       	st	Z, r18
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	9c 81       	ldd	r25, Y+4	; 0x04
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	9c 83       	std	Y+4, r25	; 0x04
     8ca:	8b 83       	std	Y+3, r24	; 0x03
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
     8d0:	20 e2       	ldi	r18, 0x20	; 32
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	9c 83       	std	Y+4, r25	; 0x04
     8de:	8b 83       	std	Y+3, r24	; 0x03
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	9c 81       	ldd	r25, Y+4	; 0x04
     8e4:	21 e2       	ldi	r18, 0x21	; 33
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
     8ea:	8b 81       	ldd	r24, Y+3	; 0x03
     8ec:	9c 81       	ldd	r25, Y+4	; 0x04
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	9c 83       	std	Y+4, r25	; 0x04
     8f2:	8b 83       	std	Y+3, r24	; 0x03
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	22 e2       	ldi	r18, 0x22	; 34
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	9c 81       	ldd	r25, Y+4	; 0x04
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	9c 83       	std	Y+4, r25	; 0x04
     906:	8b 83       	std	Y+3, r24	; 0x03
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	9c 81       	ldd	r25, Y+4	; 0x04
     90c:	23 e2       	ldi	r18, 0x23	; 35
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	98 85       	ldd	r25, Y+8	; 0x08
     920:	9a 83       	std	Y+2, r25	; 0x02
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	29 81       	ldd	r18, Y+1	; 0x01
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	9c 81       	ldd	r25, Y+4	; 0x04
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	9c 81       	ldd	r25, Y+4	; 0x04
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	9c 83       	std	Y+4, r25	; 0x04
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	9a 81       	ldd	r25, Y+2	; 0x02
     93c:	89 2f       	mov	r24, r25
     93e:	99 27       	eor	r25, r25
     940:	9a 83       	std	Y+2, r25	; 0x02
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	29 81       	ldd	r18, Y+1	; 0x01
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	9c 81       	ldd	r25, Y+4	; 0x04
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	8b 83       	std	Y+3, r24	; 0x03
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	26 e2       	ldi	r18, 0x26	; 38
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	8b 83       	std	Y+3, r24	; 0x03
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	9c 81       	ldd	r25, Y+4	; 0x04
     970:	27 e2       	ldi	r18, 0x27	; 39
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
     976:	8b 81       	ldd	r24, Y+3	; 0x03
     978:	9c 81       	ldd	r25, Y+4	; 0x04
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	8b 83       	std	Y+3, r24	; 0x03
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	9c 81       	ldd	r25, Y+4	; 0x04
     984:	28 e2       	ldi	r18, 0x28	; 40
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	8b 83       	std	Y+3, r24	; 0x03
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	9c 81       	ldd	r25, Y+4	; 0x04
     998:	29 e2       	ldi	r18, 0x29	; 41
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	9c 81       	ldd	r25, Y+4	; 0x04
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	9c 83       	std	Y+4, r25	; 0x04
     9a6:	8b 83       	std	Y+3, r24	; 0x03
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	20 e3       	ldi	r18, 0x30	; 48
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 83       	st	Z, r18
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	9c 81       	ldd	r25, Y+4	; 0x04
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	9c 83       	std	Y+4, r25	; 0x04
     9ba:	8b 83       	std	Y+3, r24	; 0x03
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	9c 81       	ldd	r25, Y+4	; 0x04
     9c0:	21 e3       	ldi	r18, 0x31	; 49
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
     9c6:	8b 81       	ldd	r24, Y+3	; 0x03
     9c8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	28 96       	adiw	r28, 0x08	; 8
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <xPortStartScheduler>:
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	ff d0       	rcall	.+510    	; 0xbee <prvSetupTimerInterrupt>
     9f0:	a0 91 b0 08 	lds	r26, 0x08B0	; 0x8008b0 <__data_end>
     9f4:	b0 91 b1 08 	lds	r27, 0x08B1	; 0x8008b1 <__data_end+0x1>
     9f8:	cd 91       	ld	r28, X+
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	dd 91       	ld	r29, X+
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	bf 91       	pop	r27
     a0a:	af 91       	pop	r26
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	7f 91       	pop	r23
     a12:	6f 91       	pop	r22
     a14:	5f 91       	pop	r21
     a16:	4f 91       	pop	r20
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	bf 90       	pop	r11
     a2a:	af 90       	pop	r10
     a2c:	9f 90       	pop	r9
     a2e:	8f 90       	pop	r8
     a30:	7f 90       	pop	r7
     a32:	6f 90       	pop	r6
     a34:	5f 90       	pop	r5
     a36:	4f 90       	pop	r4
     a38:	3f 90       	pop	r3
     a3a:	2f 90       	pop	r2
     a3c:	1f 90       	pop	r1
     a3e:	0f 90       	pop	r0
     a40:	0c be       	out	0x3c, r0	; 60
     a42:	0f 90       	pop	r0
     a44:	0b be       	out	0x3b, r0	; 59
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	08 95       	ret
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	0f 92       	push	r0
     a5e:	0b b6       	in	r0, 0x3b	; 59
     a60:	0f 92       	push	r0
     a62:	0c b6       	in	r0, 0x3c	; 60
     a64:	0f 92       	push	r0
     a66:	1f 92       	push	r1
     a68:	11 24       	eor	r1, r1
     a6a:	2f 92       	push	r2
     a6c:	3f 92       	push	r3
     a6e:	4f 92       	push	r4
     a70:	5f 92       	push	r5
     a72:	6f 92       	push	r6
     a74:	7f 92       	push	r7
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
     aa6:	a0 91 b0 08 	lds	r26, 0x08B0	; 0x8008b0 <__data_end>
     aaa:	b0 91 b1 08 	lds	r27, 0x08B1	; 0x8008b1 <__data_end+0x1>
     aae:	0d b6       	in	r0, 0x3d	; 61
     ab0:	0d 92       	st	X+, r0
     ab2:	0e b6       	in	r0, 0x3e	; 62
     ab4:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     ab6:	0e 94 b9 14 	call	0x2972	; 0x2972 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     aba:	a0 91 b0 08 	lds	r26, 0x08B0	; 0x8008b0 <__data_end>
     abe:	b0 91 b1 08 	lds	r27, 0x08B1	; 0x8008b1 <__data_end+0x1>
     ac2:	cd 91       	ld	r28, X+
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	dd 91       	ld	r29, X+
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	1f 90       	pop	r1
     b08:	0f 90       	pop	r0
     b0a:	0c be       	out	0x3c, r0	; 60
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     b16:	08 95       	ret
	...

00000b1a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	0f 92       	push	r0
     b22:	0b b6       	in	r0, 0x3b	; 59
     b24:	0f 92       	push	r0
     b26:	0c b6       	in	r0, 0x3c	; 60
     b28:	0f 92       	push	r0
     b2a:	1f 92       	push	r1
     b2c:	11 24       	eor	r1, r1
     b2e:	2f 92       	push	r2
     b30:	3f 92       	push	r3
     b32:	4f 92       	push	r4
     b34:	5f 92       	push	r5
     b36:	6f 92       	push	r6
     b38:	7f 92       	push	r7
     b3a:	8f 92       	push	r8
     b3c:	9f 92       	push	r9
     b3e:	af 92       	push	r10
     b40:	bf 92       	push	r11
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	ef 93       	push	r30
     b68:	ff 93       	push	r31
     b6a:	a0 91 b0 08 	lds	r26, 0x08B0	; 0x8008b0 <__data_end>
     b6e:	b0 91 b1 08 	lds	r27, 0x08B1	; 0x8008b1 <__data_end+0x1>
     b72:	0d b6       	in	r0, 0x3d	; 61
     b74:	0d 92       	st	X+, r0
     b76:	0e b6       	in	r0, 0x3e	; 62
     b78:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     b7a:	83 e5       	ldi	r24, 0x53	; 83
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	fc 01       	movw	r30, r24
     b80:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
     b82:	0e 94 cd 13 	call	0x279a	; 0x279a <xTaskIncrementTick>
     b86:	88 23       	and	r24, r24
     b88:	11 f0       	breq	.+4      	; 0xb8e <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
     b8a:	0e 94 b9 14 	call	0x2972	; 0x2972 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     b8e:	a0 91 b0 08 	lds	r26, 0x08B0	; 0x8008b0 <__data_end>
     b92:	b0 91 b1 08 	lds	r27, 0x08B1	; 0x8008b1 <__data_end+0x1>
     b96:	cd 91       	ld	r28, X+
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	dd 91       	ld	r29, X+
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	9f 90       	pop	r9
     bcc:	8f 90       	pop	r8
     bce:	7f 90       	pop	r7
     bd0:	6f 90       	pop	r6
     bd2:	5f 90       	pop	r5
     bd4:	4f 90       	pop	r4
     bd6:	3f 90       	pop	r3
     bd8:	2f 90       	pop	r2
     bda:	1f 90       	pop	r1
     bdc:	0f 90       	pop	r0
     bde:	0c be       	out	0x3c, r0	; 60
     be0:	0f 90       	pop	r0
     be2:	0b be       	out	0x3b, r0	; 59
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     bea:	08 95       	ret
	...

00000bee <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
     bf6:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	88 70       	andi	r24, 0x08	; 8
     bfe:	99 27       	eor	r25, r25
     c00:	89 2b       	or	r24, r25
     c02:	11 f0       	breq	.+4      	; 0xc08 <prvSetupTimerInterrupt+0x1a>
     c04:	80 ee       	ldi	r24, 0xE0	; 224
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <prvSetupTimerInterrupt+0x1c>
     c08:	80 ec       	ldi	r24, 0xC0	; 192
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	97 70       	andi	r25, 0x07	; 7
     c0e:	89 2b       	or	r24, r25
     c10:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	a8 95       	wdr
     c1a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
     c24:	00 00       	nop
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     c2c:	76 df       	rcall	.-276    	; 0xb1a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     c2e:	18 95       	reti
	...

00000c32 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	00 d0       	rcall	.+0      	; 0xc38 <xQueueGenericReset+0x6>
     c38:	1f 92       	push	r1
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9c 83       	std	Y+4, r25	; 0x04
     c42:	8b 83       	std	Y+3, r24	; 0x03
     c44:	6d 83       	std	Y+5, r22	; 0x05
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	0f 92       	push	r0
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	fc 01       	movw	r30, r24
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	29 81       	ldd	r18, Y+1	; 0x01
     c60:	3a 81       	ldd	r19, Y+2	; 0x02
     c62:	f9 01       	movw	r30, r18
     c64:	23 8d       	ldd	r18, Z+27	; 0x1b
     c66:	42 2f       	mov	r20, r18
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	29 81       	ldd	r18, Y+1	; 0x01
     c6c:	3a 81       	ldd	r19, Y+2	; 0x02
     c6e:	f9 01       	movw	r30, r18
     c70:	24 8d       	ldd	r18, Z+28	; 0x1c
     c72:	22 2f       	mov	r18, r18
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	42 9f       	mul	r20, r18
     c78:	b0 01       	movw	r22, r0
     c7a:	43 9f       	mul	r20, r19
     c7c:	70 0d       	add	r23, r0
     c7e:	52 9f       	mul	r21, r18
     c80:	70 0d       	add	r23, r0
     c82:	11 24       	eor	r1, r1
     c84:	9b 01       	movw	r18, r22
     c86:	28 0f       	add	r18, r24
     c88:	39 1f       	adc	r19, r25
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	fc 01       	movw	r30, r24
     c90:	35 83       	std	Z+5, r19	; 0x05
     c92:	24 83       	std	Z+4, r18	; 0x04
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	fc 01       	movw	r30, r24
     c9a:	12 8e       	std	Z+26, r1	; 0x1a
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 81       	ld	r18, Z
     ca4:	31 81       	ldd	r19, Z+1	; 0x01
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	fc 01       	movw	r30, r24
     cac:	33 83       	std	Z+3, r19	; 0x03
     cae:	22 83       	std	Z+2, r18	; 0x02
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 81       	ld	r18, Z
     cb8:	31 81       	ldd	r19, Z+1	; 0x01
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	fc 01       	movw	r30, r24
     cc0:	83 8d       	ldd	r24, Z+27	; 0x1b
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	bc 01       	movw	r22, r24
     cc8:	61 50       	subi	r22, 0x01	; 1
     cca:	71 09       	sbc	r23, r1
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	fc 01       	movw	r30, r24
     cd2:	84 8d       	ldd	r24, Z+28	; 0x1c
     cd4:	48 2f       	mov	r20, r24
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	64 9f       	mul	r22, r20
     cda:	c0 01       	movw	r24, r0
     cdc:	65 9f       	mul	r22, r21
     cde:	90 0d       	add	r25, r0
     ce0:	74 9f       	mul	r23, r20
     ce2:	90 0d       	add	r25, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	28 0f       	add	r18, r24
     ce8:	39 1f       	adc	r19, r25
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	fc 01       	movw	r30, r24
     cf0:	37 83       	std	Z+7, r19	; 0x07
     cf2:	26 83       	std	Z+6, r18	; 0x06
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	fc 01       	movw	r30, r24
     cfc:	25 8f       	std	Z+29, r18	; 0x1d
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	2f ef       	ldi	r18, 0xFF	; 255
     d04:	fc 01       	movw	r30, r24
     d06:	26 8f       	std	Z+30, r18	; 0x1e
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	88 23       	and	r24, r24
     d0c:	79 f4       	brne	.+30     	; 0xd2c <xQueueGenericReset+0xfa>
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	fc 01       	movw	r30, r24
     d14:	80 85       	ldd	r24, Z+8	; 0x08
     d16:	88 23       	and	r24, r24
     d18:	89 f0       	breq	.+34     	; 0xd3c <xQueueGenericReset+0x10a>
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	08 96       	adiw	r24, 0x08	; 8
     d20:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskRemoveFromEventList>
     d24:	88 23       	and	r24, r24
     d26:	51 f0       	breq	.+20     	; 0xd3c <xQueueGenericReset+0x10a>
     d28:	96 de       	rcall	.-724    	; 0xa56 <vPortYield>
     d2a:	08 c0       	rjmp	.+16     	; 0xd3c <xQueueGenericReset+0x10a>
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	08 96       	adiw	r24, 0x08	; 8
     d32:	2e db       	rcall	.-2468   	; 0x390 <vListInitialise>
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	41 96       	adiw	r24, 0x11	; 17
     d3a:	2a db       	rcall	.-2476   	; 0x390 <vListInitialise>
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <xQueueGenericCreate>:
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	29 97       	sbiw	r28, 0x09	; 9
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	8f 83       	std	Y+7, r24	; 0x07
     d6c:	68 87       	std	Y+8, r22	; 0x08
     d6e:	49 87       	std	Y+9, r20	; 0x09
     d70:	88 85       	ldd	r24, Y+8	; 0x08
     d72:	88 23       	and	r24, r24
     d74:	19 f4       	brne	.+6      	; 0xd7c <xQueueGenericCreate+0x2a>
     d76:	1a 82       	std	Y+2, r1	; 0x02
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	0f c0       	rjmp	.+30     	; 0xd9a <xQueueGenericCreate+0x48>
     d7c:	8f 81       	ldd	r24, Y+7	; 0x07
     d7e:	48 2f       	mov	r20, r24
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	88 85       	ldd	r24, Y+8	; 0x08
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	42 9f       	mul	r20, r18
     d8a:	c0 01       	movw	r24, r0
     d8c:	43 9f       	mul	r20, r19
     d8e:	90 0d       	add	r25, r0
     d90:	52 9f       	mul	r21, r18
     d92:	90 0d       	add	r25, r0
     d94:	11 24       	eor	r1, r1
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	81 96       	adiw	r24, 0x21	; 33
     da0:	bc da       	rcall	.-2696   	; 0x31a <pvPortMalloc>
     da2:	9c 83       	std	Y+4, r25	; 0x04
     da4:	8b 83       	std	Y+3, r24	; 0x03
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	89 2b       	or	r24, r25
     dac:	99 f0       	breq	.+38     	; 0xdd4 <xQueueGenericCreate+0x82>
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	9e 83       	std	Y+6, r25	; 0x06
     db4:	8d 83       	std	Y+5, r24	; 0x05
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	81 96       	adiw	r24, 0x21	; 33
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	2b 81       	ldd	r18, Y+3	; 0x03
     dc2:	3c 81       	ldd	r19, Y+4	; 0x04
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	89 01       	movw	r16, r18
     dca:	29 85       	ldd	r18, Y+9	; 0x09
     dcc:	ac 01       	movw	r20, r24
     dce:	68 85       	ldd	r22, Y+8	; 0x08
     dd0:	8f 81       	ldd	r24, Y+7	; 0x07
     dd2:	0d d0       	rcall	.+26     	; 0xdee <prvInitialiseNewQueue>
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	9c 81       	ldd	r25, Y+4	; 0x04
     dd8:	29 96       	adiw	r28, 0x09	; 9
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	08 95       	ret

00000dee <prvInitialiseNewQueue>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	27 97       	sbiw	r28, 0x07	; 7
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	6a 83       	std	Y+2, r22	; 0x02
     e0a:	5c 83       	std	Y+4, r21	; 0x04
     e0c:	4b 83       	std	Y+3, r20	; 0x03
     e0e:	2d 83       	std	Y+5, r18	; 0x05
     e10:	1f 83       	std	Y+7, r17	; 0x07
     e12:	0e 83       	std	Y+6, r16	; 0x06
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	88 23       	and	r24, r24
     e18:	41 f4       	brne	.+16     	; 0xe2a <prvInitialiseNewQueue+0x3c>
     e1a:	8e 81       	ldd	r24, Y+6	; 0x06
     e1c:	9f 81       	ldd	r25, Y+7	; 0x07
     e1e:	2e 81       	ldd	r18, Y+6	; 0x06
     e20:	3f 81       	ldd	r19, Y+7	; 0x07
     e22:	fc 01       	movw	r30, r24
     e24:	31 83       	std	Z+1, r19	; 0x01
     e26:	20 83       	st	Z, r18
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <prvInitialiseNewQueue+0x4a>
     e2a:	8e 81       	ldd	r24, Y+6	; 0x06
     e2c:	9f 81       	ldd	r25, Y+7	; 0x07
     e2e:	2b 81       	ldd	r18, Y+3	; 0x03
     e30:	3c 81       	ldd	r19, Y+4	; 0x04
     e32:	fc 01       	movw	r30, r24
     e34:	31 83       	std	Z+1, r19	; 0x01
     e36:	20 83       	st	Z, r18
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	29 81       	ldd	r18, Y+1	; 0x01
     e3e:	fc 01       	movw	r30, r24
     e40:	23 8f       	std	Z+27, r18	; 0x1b
     e42:	8e 81       	ldd	r24, Y+6	; 0x06
     e44:	9f 81       	ldd	r25, Y+7	; 0x07
     e46:	2a 81       	ldd	r18, Y+2	; 0x02
     e48:	fc 01       	movw	r30, r24
     e4a:	24 8f       	std	Z+28, r18	; 0x1c
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	ef de       	rcall	.-546    	; 0xc32 <xQueueGenericReset>
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	2d 81       	ldd	r18, Y+5	; 0x05
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 a3       	std	Z+32, r18	; 0x20
     e5e:	00 00       	nop
     e60:	27 96       	adiw	r28, 0x07	; 7
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	08 95       	ret

00000e76 <prvInitialiseMutex>:
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	1f 92       	push	r1
     e7c:	1f 92       	push	r1
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	89 2b       	or	r24, r25
     e8c:	b1 f0       	breq	.+44     	; 0xeba <prvInitialiseMutex+0x44>
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	fc 01       	movw	r30, r24
     e94:	15 82       	std	Z+5, r1	; 0x05
     e96:	14 82       	std	Z+4, r1	; 0x04
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	fc 01       	movw	r30, r24
     e9e:	11 82       	std	Z+1, r1	; 0x01
     ea0:	10 82       	st	Z, r1
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	fc 01       	movw	r30, r24
     ea8:	16 82       	std	Z+6, r1	; 0x06
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	24 d0       	rcall	.+72     	; 0xf02 <xQueueGenericSend>
     eba:	00 00       	nop
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <xQueueCreateMutex>:
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <xQueueCreateMutex+0x6>
     ecc:	1f 92       	push	r1
     ece:	1f 92       	push	r1
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	1a 82       	std	Y+2, r1	; 0x02
     edc:	4d 81       	ldd	r20, Y+5	; 0x05
     ede:	6a 81       	ldd	r22, Y+2	; 0x02
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	37 df       	rcall	.-402    	; 0xd52 <xQueueGenericCreate>
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	c4 df       	rcall	.-120    	; 0xe76 <prvInitialiseMutex>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <xQueueGenericSend>:
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2e 97       	sbiw	r28, 0x0e	; 14
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	99 87       	std	Y+9, r25	; 0x09
     f18:	88 87       	std	Y+8, r24	; 0x08
     f1a:	7b 87       	std	Y+11, r23	; 0x0b
     f1c:	6a 87       	std	Y+10, r22	; 0x0a
     f1e:	5d 87       	std	Y+13, r21	; 0x0d
     f20:	4c 87       	std	Y+12, r20	; 0x0c
     f22:	2e 87       	std	Y+14, r18	; 0x0e
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	88 85       	ldd	r24, Y+8	; 0x08
     f28:	99 85       	ldd	r25, Y+9	; 0x09
     f2a:	9b 83       	std	Y+3, r25	; 0x03
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	0f 92       	push	r0
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	9b 81       	ldd	r25, Y+3	; 0x03
     f38:	fc 01       	movw	r30, r24
     f3a:	22 8d       	ldd	r18, Z+26	; 0x1a
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	9b 81       	ldd	r25, Y+3	; 0x03
     f40:	fc 01       	movw	r30, r24
     f42:	83 8d       	ldd	r24, Z+27	; 0x1b
     f44:	28 17       	cp	r18, r24
     f46:	18 f0       	brcs	.+6      	; 0xf4e <xQueueGenericSend+0x4c>
     f48:	8e 85       	ldd	r24, Y+14	; 0x0e
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	f9 f4       	brne	.+62     	; 0xf8c <xQueueGenericSend+0x8a>
     f4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f50:	3b 85       	ldd	r19, Y+11	; 0x0b
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	9b 81       	ldd	r25, Y+3	; 0x03
     f56:	4e 85       	ldd	r20, Y+14	; 0x0e
     f58:	b9 01       	movw	r22, r18
     f5a:	7f d2       	rcall	.+1278   	; 0x145a <prvCopyDataToQueue>
     f5c:	8c 83       	std	Y+4, r24	; 0x04
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	fc 01       	movw	r30, r24
     f64:	81 89       	ldd	r24, Z+17	; 0x11
     f66:	88 23       	and	r24, r24
     f68:	49 f0       	breq	.+18     	; 0xf7c <xQueueGenericSend+0x7a>
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	9b 81       	ldd	r25, Y+3	; 0x03
     f6e:	41 96       	adiw	r24, 0x11	; 17
     f70:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskRemoveFromEventList>
     f74:	88 23       	and	r24, r24
     f76:	31 f0       	breq	.+12     	; 0xf84 <xQueueGenericSend+0x82>
     f78:	6e dd       	rcall	.-1316   	; 0xa56 <vPortYield>
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <xQueueGenericSend+0x82>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	88 23       	and	r24, r24
     f80:	09 f0       	breq	.+2      	; 0xf84 <xQueueGenericSend+0x82>
     f82:	69 dd       	rcall	.-1326   	; 0xa56 <vPortYield>
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	5b c0       	rjmp	.+182    	; 0x1042 <xQueueGenericSend+0x140>
     f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f90:	89 2b       	or	r24, r25
     f92:	21 f4       	brne	.+8      	; 0xf9c <xQueueGenericSend+0x9a>
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	53 c0       	rjmp	.+166    	; 0x1042 <xQueueGenericSend+0x140>
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	88 23       	and	r24, r24
     fa0:	31 f4       	brne	.+12     	; 0xfae <xQueueGenericSend+0xac>
     fa2:	ce 01       	movw	r24, r28
     fa4:	05 96       	adiw	r24, 0x05	; 5
     fa6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <vTaskInternalSetTimeOutState>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0e 94 13 13 	call	0x2626	; 0x2626 <vTaskSuspendAll>
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	0f 92       	push	r0
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	9b 81       	ldd	r25, Y+3	; 0x03
     fc0:	fc 01       	movw	r30, r24
     fc2:	85 8d       	ldd	r24, Z+29	; 0x1d
     fc4:	8f 3f       	cpi	r24, 0xFF	; 255
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <xQueueGenericSend+0xce>
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	fc 01       	movw	r30, r24
     fce:	15 8e       	std	Z+29, r1	; 0x1d
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	fc 01       	movw	r30, r24
     fd6:	86 8d       	ldd	r24, Z+30	; 0x1e
     fd8:	8f 3f       	cpi	r24, 0xFF	; 255
     fda:	21 f4       	brne	.+8      	; 0xfe4 <xQueueGenericSend+0xe2>
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	fc 01       	movw	r30, r24
     fe2:	16 8e       	std	Z+30, r1	; 0x1e
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	9e 01       	movw	r18, r28
     fea:	24 5f       	subi	r18, 0xF4	; 244
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	ce 01       	movw	r24, r28
     ff0:	05 96       	adiw	r24, 0x05	; 5
     ff2:	b9 01       	movw	r22, r18
     ff4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskCheckForTimeOut>
     ff8:	88 23       	and	r24, r24
     ffa:	e9 f4       	brne	.+58     	; 0x1036 <xQueueGenericSend+0x134>
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	c8 d3       	rcall	.+1936   	; 0x1792 <prvIsQueueFull>
    1002:	88 23       	and	r24, r24
    1004:	91 f0       	breq	.+36     	; 0x102a <xQueueGenericSend+0x128>
    1006:	2c 85       	ldd	r18, Y+12	; 0x0c
    1008:	3d 85       	ldd	r19, Y+13	; 0x0d
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	08 96       	adiw	r24, 0x08	; 8
    1010:	b9 01       	movw	r22, r18
    1012:	0e 94 5d 15 	call	0x2aba	; 0x2aba <vTaskPlaceOnEventList>
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9b 81       	ldd	r25, Y+3	; 0x03
    101a:	40 d3       	rcall	.+1664   	; 0x169c <prvUnlockQueue>
    101c:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    1020:	88 23       	and	r24, r24
    1022:	09 f0       	breq	.+2      	; 0x1026 <xQueueGenericSend+0x124>
    1024:	84 cf       	rjmp	.-248    	; 0xf2e <xQueueGenericSend+0x2c>
    1026:	17 dd       	rcall	.-1490   	; 0xa56 <vPortYield>
    1028:	82 cf       	rjmp	.-252    	; 0xf2e <xQueueGenericSend+0x2c>
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	36 d3       	rcall	.+1644   	; 0x169c <prvUnlockQueue>
    1030:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    1034:	7c cf       	rjmp	.-264    	; 0xf2e <xQueueGenericSend+0x2c>
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	30 d3       	rcall	.+1632   	; 0x169c <prvUnlockQueue>
    103c:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	2e 96       	adiw	r28, 0x0e	; 14
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <xQueueGenericSendFromISR>:
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	2c 97       	sbiw	r28, 0x0c	; 12
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	9f 83       	std	Y+7, r25	; 0x07
    106a:	8e 83       	std	Y+6, r24	; 0x06
    106c:	79 87       	std	Y+9, r23	; 0x09
    106e:	68 87       	std	Y+8, r22	; 0x08
    1070:	5b 87       	std	Y+11, r21	; 0x0b
    1072:	4a 87       	std	Y+10, r20	; 0x0a
    1074:	2c 87       	std	Y+12, r18	; 0x0c
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	9b 83       	std	Y+3, r25	; 0x03
    107c:	8a 83       	std	Y+2, r24	; 0x02
    107e:	1c 82       	std	Y+4, r1	; 0x04
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	fc 01       	movw	r30, r24
    1086:	22 8d       	ldd	r18, Z+26	; 0x1a
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	fc 01       	movw	r30, r24
    108e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1090:	28 17       	cp	r18, r24
    1092:	18 f0       	brcs	.+6      	; 0x109a <xQueueGenericSendFromISR+0x46>
    1094:	8c 85       	ldd	r24, Y+12	; 0x0c
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	81 f5       	brne	.+96     	; 0x10fa <xQueueGenericSendFromISR+0xa6>
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	fc 01       	movw	r30, r24
    10a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	28 85       	ldd	r18, Y+8	; 0x08
    10a6:	39 85       	ldd	r19, Y+9	; 0x09
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	4c 85       	ldd	r20, Y+12	; 0x0c
    10ae:	b9 01       	movw	r22, r18
    10b0:	d4 d1       	rcall	.+936    	; 0x145a <prvCopyDataToQueue>
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	8f 3f       	cpi	r24, 0xFF	; 255
    10b6:	b9 f4       	brne	.+46     	; 0x10e6 <xQueueGenericSendFromISR+0x92>
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	fc 01       	movw	r30, r24
    10be:	81 89       	ldd	r24, Z+17	; 0x11
    10c0:	88 23       	and	r24, r24
    10c2:	c1 f0       	breq	.+48     	; 0x10f4 <xQueueGenericSendFromISR+0xa0>
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	41 96       	adiw	r24, 0x11	; 17
    10ca:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskRemoveFromEventList>
    10ce:	88 23       	and	r24, r24
    10d0:	89 f0       	breq	.+34     	; 0x10f4 <xQueueGenericSendFromISR+0xa0>
    10d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10d6:	89 2b       	or	r24, r25
    10d8:	69 f0       	breq	.+26     	; 0x10f4 <xQueueGenericSendFromISR+0xa0>
    10da:	8a 85       	ldd	r24, Y+10	; 0x0a
    10dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10de:	21 e0       	ldi	r18, 0x01	; 1
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
    10e4:	07 c0       	rjmp	.+14     	; 0x10f4 <xQueueGenericSendFromISR+0xa0>
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	28 2f       	mov	r18, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	9b 81       	ldd	r25, Y+3	; 0x03
    10f0:	fc 01       	movw	r30, r24
    10f2:	26 8f       	std	Z+30, r18	; 0x1e
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <xQueueGenericSendFromISR+0xa8>
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	2c 96       	adiw	r28, 0x0c	; 12
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <xQueueReceive>:
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	2d 97       	sbiw	r28, 0x0d	; 13
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	99 87       	std	Y+9, r25	; 0x09
    1126:	88 87       	std	Y+8, r24	; 0x08
    1128:	7b 87       	std	Y+11, r23	; 0x0b
    112a:	6a 87       	std	Y+10, r22	; 0x0a
    112c:	5d 87       	std	Y+13, r21	; 0x0d
    112e:	4c 87       	std	Y+12, r20	; 0x0c
    1130:	19 82       	std	Y+1, r1	; 0x01
    1132:	88 85       	ldd	r24, Y+8	; 0x08
    1134:	99 85       	ldd	r25, Y+9	; 0x09
    1136:	9b 83       	std	Y+3, r25	; 0x03
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	0f 92       	push	r0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	fc 01       	movw	r30, r24
    1146:	82 8d       	ldd	r24, Z+26	; 0x1a
    1148:	8c 83       	std	Y+4, r24	; 0x04
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	88 23       	and	r24, r24
    114e:	f9 f0       	breq	.+62     	; 0x118e <xQueueReceive+0x7e>
    1150:	2a 85       	ldd	r18, Y+10	; 0x0a
    1152:	3b 85       	ldd	r19, Y+11	; 0x0b
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	9b 81       	ldd	r25, Y+3	; 0x03
    1158:	b9 01       	movw	r22, r18
    115a:	4f d2       	rcall	.+1182   	; 0x15fa <prvCopyDataFromQueue>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	28 0f       	add	r18, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	fc 01       	movw	r30, r24
    1168:	22 8f       	std	Z+26, r18	; 0x1a
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	9b 81       	ldd	r25, Y+3	; 0x03
    116e:	fc 01       	movw	r30, r24
    1170:	80 85       	ldd	r24, Z+8	; 0x08
    1172:	88 23       	and	r24, r24
    1174:	41 f0       	breq	.+16     	; 0x1186 <xQueueReceive+0x76>
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	08 96       	adiw	r24, 0x08	; 8
    117c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskRemoveFromEventList>
    1180:	88 23       	and	r24, r24
    1182:	09 f0       	breq	.+2      	; 0x1186 <xQueueReceive+0x76>
    1184:	68 dc       	rcall	.-1840   	; 0xa56 <vPortYield>
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	61 c0       	rjmp	.+194    	; 0x1250 <xQueueReceive+0x140>
    118e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1190:	9d 85       	ldd	r25, Y+13	; 0x0d
    1192:	89 2b       	or	r24, r25
    1194:	21 f4       	brne	.+8      	; 0x119e <xQueueReceive+0x8e>
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	59 c0       	rjmp	.+178    	; 0x1250 <xQueueReceive+0x140>
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 23       	and	r24, r24
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <xQueueReceive+0xa0>
    11a4:	ce 01       	movw	r24, r28
    11a6:	05 96       	adiw	r24, 0x05	; 5
    11a8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <vTaskInternalSetTimeOutState>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0e 94 13 13 	call	0x2626	; 0x2626 <vTaskSuspendAll>
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	0f 92       	push	r0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	9b 81       	ldd	r25, Y+3	; 0x03
    11c2:	fc 01       	movw	r30, r24
    11c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    11c6:	8f 3f       	cpi	r24, 0xFF	; 255
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <xQueueReceive+0xc2>
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	9b 81       	ldd	r25, Y+3	; 0x03
    11ce:	fc 01       	movw	r30, r24
    11d0:	15 8e       	std	Z+29, r1	; 0x1d
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	fc 01       	movw	r30, r24
    11d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    11da:	8f 3f       	cpi	r24, 0xFF	; 255
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <xQueueReceive+0xd6>
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	fc 01       	movw	r30, r24
    11e4:	16 8e       	std	Z+30, r1	; 0x1e
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	9e 01       	movw	r18, r28
    11ec:	24 5f       	subi	r18, 0xF4	; 244
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	ce 01       	movw	r24, r28
    11f2:	05 96       	adiw	r24, 0x05	; 5
    11f4:	b9 01       	movw	r22, r18
    11f6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskCheckForTimeOut>
    11fa:	88 23       	and	r24, r24
    11fc:	e9 f4       	brne	.+58     	; 0x1238 <xQueueReceive+0x128>
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	9b 81       	ldd	r25, Y+3	; 0x03
    1202:	aa d2       	rcall	.+1364   	; 0x1758 <prvIsQueueEmpty>
    1204:	88 23       	and	r24, r24
    1206:	91 f0       	breq	.+36     	; 0x122c <xQueueReceive+0x11c>
    1208:	2c 85       	ldd	r18, Y+12	; 0x0c
    120a:	3d 85       	ldd	r19, Y+13	; 0x0d
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	9b 81       	ldd	r25, Y+3	; 0x03
    1210:	41 96       	adiw	r24, 0x11	; 17
    1212:	b9 01       	movw	r22, r18
    1214:	0e 94 5d 15 	call	0x2aba	; 0x2aba <vTaskPlaceOnEventList>
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	9b 81       	ldd	r25, Y+3	; 0x03
    121c:	3f d2       	rcall	.+1150   	; 0x169c <prvUnlockQueue>
    121e:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    1222:	88 23       	and	r24, r24
    1224:	09 f0       	breq	.+2      	; 0x1228 <xQueueReceive+0x118>
    1226:	89 cf       	rjmp	.-238    	; 0x113a <xQueueReceive+0x2a>
    1228:	16 dc       	rcall	.-2004   	; 0xa56 <vPortYield>
    122a:	87 cf       	rjmp	.-242    	; 0x113a <xQueueReceive+0x2a>
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	35 d2       	rcall	.+1130   	; 0x169c <prvUnlockQueue>
    1232:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    1236:	81 cf       	rjmp	.-254    	; 0x113a <xQueueReceive+0x2a>
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	2f d2       	rcall	.+1118   	; 0x169c <prvUnlockQueue>
    123e:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	9b 81       	ldd	r25, Y+3	; 0x03
    1246:	88 d2       	rcall	.+1296   	; 0x1758 <prvIsQueueEmpty>
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <xQueueReceive+0x13e>
    124c:	76 cf       	rjmp	.-276    	; 0x113a <xQueueReceive+0x2a>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	2d 96       	adiw	r28, 0x0d	; 13
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <xQueueSemaphoreTake>:
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	2d 97       	sbiw	r28, 0x0d	; 13
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	9b 87       	std	Y+11, r25	; 0x0b
    1278:	8a 87       	std	Y+10, r24	; 0x0a
    127a:	7d 87       	std	Y+13, r23	; 0x0d
    127c:	6c 87       	std	Y+12, r22	; 0x0c
    127e:	19 82       	std	Y+1, r1	; 0x01
    1280:	8a 85       	ldd	r24, Y+10	; 0x0a
    1282:	9b 85       	ldd	r25, Y+11	; 0x0b
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	1a 82       	std	Y+2, r1	; 0x02
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	0f 92       	push	r0
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	fc 01       	movw	r30, r24
    1296:	82 8d       	ldd	r24, Z+26	; 0x1a
    1298:	8d 83       	std	Y+5, r24	; 0x05
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	88 23       	and	r24, r24
    129e:	41 f1       	breq	.+80     	; 0x12f0 <xQueueSemaphoreTake+0x8e>
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	28 0f       	add	r18, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	fc 01       	movw	r30, r24
    12ac:	22 8f       	std	Z+26, r18	; 0x1a
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	fc 01       	movw	r30, r24
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	89 2b       	or	r24, r25
    12ba:	41 f4       	brne	.+16     	; 0x12cc <xQueueSemaphoreTake+0x6a>
    12bc:	0e 94 63 19 	call	0x32c6	; 0x32c6 <pvTaskIncrementMutexHeldCount>
    12c0:	9c 01       	movw	r18, r24
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	fc 01       	movw	r30, r24
    12c8:	35 83       	std	Z+5, r19	; 0x05
    12ca:	24 83       	std	Z+4, r18	; 0x04
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	fc 01       	movw	r30, r24
    12d2:	80 85       	ldd	r24, Z+8	; 0x08
    12d4:	88 23       	and	r24, r24
    12d6:	41 f0       	breq	.+16     	; 0x12e8 <xQueueSemaphoreTake+0x86>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	08 96       	adiw	r24, 0x08	; 8
    12de:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskRemoveFromEventList>
    12e2:	88 23       	and	r24, r24
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <xQueueSemaphoreTake+0x86>
    12e6:	b7 db       	rcall	.-2194   	; 0xa56 <vPortYield>
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	8a c0       	rjmp	.+276    	; 0x1404 <xQueueSemaphoreTake+0x1a2>
    12f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f4:	89 2b       	or	r24, r25
    12f6:	21 f4       	brne	.+8      	; 0x1300 <xQueueSemaphoreTake+0x9e>
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	82 c0       	rjmp	.+260    	; 0x1404 <xQueueSemaphoreTake+0x1a2>
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	88 23       	and	r24, r24
    1304:	31 f4       	brne	.+12     	; 0x1312 <xQueueSemaphoreTake+0xb0>
    1306:	ce 01       	movw	r24, r28
    1308:	07 96       	adiw	r24, 0x07	; 7
    130a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <vTaskInternalSetTimeOutState>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0e 94 13 13 	call	0x2626	; 0x2626 <vTaskSuspendAll>
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	0f 92       	push	r0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	fc 01       	movw	r30, r24
    1326:	85 8d       	ldd	r24, Z+29	; 0x1d
    1328:	8f 3f       	cpi	r24, 0xFF	; 255
    132a:	21 f4       	brne	.+8      	; 0x1334 <xQueueSemaphoreTake+0xd2>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	fc 01       	movw	r30, r24
    1332:	15 8e       	std	Z+29, r1	; 0x1d
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	fc 01       	movw	r30, r24
    133a:	86 8d       	ldd	r24, Z+30	; 0x1e
    133c:	8f 3f       	cpi	r24, 0xFF	; 255
    133e:	21 f4       	brne	.+8      	; 0x1348 <xQueueSemaphoreTake+0xe6>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	fc 01       	movw	r30, r24
    1346:	16 8e       	std	Z+30, r1	; 0x1e
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	9e 01       	movw	r18, r28
    134e:	24 5f       	subi	r18, 0xF4	; 244
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	ce 01       	movw	r24, r28
    1354:	07 96       	adiw	r24, 0x07	; 7
    1356:	b9 01       	movw	r22, r18
    1358:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <xTaskCheckForTimeOut>
    135c:	88 23       	and	r24, r24
    135e:	09 f0       	breq	.+2      	; 0x1362 <xQueueSemaphoreTake+0x100>
    1360:	31 c0       	rjmp	.+98     	; 0x13c4 <xQueueSemaphoreTake+0x162>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	f8 d1       	rcall	.+1008   	; 0x1758 <prvIsQueueEmpty>
    1368:	88 23       	and	r24, r24
    136a:	31 f1       	breq	.+76     	; 0x13b8 <xQueueSemaphoreTake+0x156>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	fc 01       	movw	r30, r24
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	89 2b       	or	r24, r25
    1378:	69 f4       	brne	.+26     	; 0x1394 <xQueueSemaphoreTake+0x132>
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	0f 92       	push	r0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	fc 01       	movw	r30, r24
    1386:	84 81       	ldd	r24, Z+4	; 0x04
    1388:	95 81       	ldd	r25, Z+5	; 0x05
    138a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskPriorityInherit>
    138e:	8a 83       	std	Y+2, r24	; 0x02
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	2c 85       	ldd	r18, Y+12	; 0x0c
    1396:	3d 85       	ldd	r19, Y+13	; 0x0d
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	41 96       	adiw	r24, 0x11	; 17
    139e:	b9 01       	movw	r22, r18
    13a0:	0e 94 5d 15 	call	0x2aba	; 0x2aba <vTaskPlaceOnEventList>
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	79 d1       	rcall	.+754    	; 0x169c <prvUnlockQueue>
    13aa:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    13ae:	88 23       	and	r24, r24
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <xQueueSemaphoreTake+0x152>
    13b2:	6b cf       	rjmp	.-298    	; 0x128a <xQueueSemaphoreTake+0x28>
    13b4:	50 db       	rcall	.-2400   	; 0xa56 <vPortYield>
    13b6:	69 cf       	rjmp	.-302    	; 0x128a <xQueueSemaphoreTake+0x28>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	6f d1       	rcall	.+734    	; 0x169c <prvUnlockQueue>
    13be:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    13c2:	63 cf       	rjmp	.-314    	; 0x128a <xQueueSemaphoreTake+0x28>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	69 d1       	rcall	.+722    	; 0x169c <prvUnlockQueue>
    13ca:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	c2 d1       	rcall	.+900    	; 0x1758 <prvIsQueueEmpty>
    13d4:	88 23       	and	r24, r24
    13d6:	09 f4       	brne	.+2      	; 0x13da <xQueueSemaphoreTake+0x178>
    13d8:	58 cf       	rjmp	.-336    	; 0x128a <xQueueSemaphoreTake+0x28>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	88 23       	and	r24, r24
    13de:	89 f0       	breq	.+34     	; 0x1402 <xQueueSemaphoreTake+0x1a0>
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	0f 92       	push	r0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	15 d0       	rcall	.+42     	; 0x1416 <prvGetDisinheritPriorityAfterTimeout>
    13ec:	8e 83       	std	Y+6, r24	; 0x06
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	fc 01       	movw	r30, r24
    13f4:	84 81       	ldd	r24, Z+4	; 0x04
    13f6:	95 81       	ldd	r25, Z+5	; 0x05
    13f8:	6e 81       	ldd	r22, Y+6	; 0x06
    13fa:	0e 94 c3 18 	call	0x3186	; 0x3186 <vTaskPriorityDisinheritAfterTimeout>
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	2d 96       	adiw	r28, 0x0d	; 13
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <prvGetDisinheritPriorityAfterTimeout>:
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	00 d0       	rcall	.+0      	; 0x141c <prvGetDisinheritPriorityAfterTimeout+0x6>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	9b 83       	std	Y+3, r25	; 0x03
    1422:	8a 83       	std	Y+2, r24	; 0x02
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	9b 81       	ldd	r25, Y+3	; 0x03
    1428:	fc 01       	movw	r30, r24
    142a:	81 89       	ldd	r24, Z+17	; 0x11
    142c:	88 23       	and	r24, r24
    142e:	69 f0       	breq	.+26     	; 0x144a <prvGetDisinheritPriorityAfterTimeout+0x34>
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	9b 81       	ldd	r25, Y+3	; 0x03
    1434:	fc 01       	movw	r30, r24
    1436:	86 89       	ldd	r24, Z+22	; 0x16
    1438:	97 89       	ldd	r25, Z+23	; 0x17
    143a:	fc 01       	movw	r30, r24
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	98 2f       	mov	r25, r24
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	89 1b       	sub	r24, r25
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	01 c0       	rjmp	.+2      	; 0x144c <prvGetDisinheritPriorityAfterTimeout+0x36>
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <prvCopyDataToQueue>:
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	27 97       	sbiw	r28, 0x07	; 7
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	9c 83       	std	Y+4, r25	; 0x04
    1470:	8b 83       	std	Y+3, r24	; 0x03
    1472:	7e 83       	std	Y+6, r23	; 0x06
    1474:	6d 83       	std	Y+5, r22	; 0x05
    1476:	4f 83       	std	Y+7, r20	; 0x07
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	fc 01       	movw	r30, r24
    1480:	82 8d       	ldd	r24, Z+26	; 0x1a
    1482:	8a 83       	std	Y+2, r24	; 0x02
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	fc 01       	movw	r30, r24
    148a:	84 8d       	ldd	r24, Z+28	; 0x1c
    148c:	88 23       	and	r24, r24
    148e:	b1 f4       	brne	.+44     	; 0x14bc <prvCopyDataToQueue+0x62>
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	fc 01       	movw	r30, r24
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	89 2b       	or	r24, r25
    149c:	09 f0       	breq	.+2      	; 0x14a0 <prvCopyDataToQueue+0x46>
    149e:	9c c0       	rjmp	.+312    	; 0x15d8 <prvCopyDataToQueue+0x17e>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	fc 01       	movw	r30, r24
    14a6:	84 81       	ldd	r24, Z+4	; 0x04
    14a8:	95 81       	ldd	r25, Z+5	; 0x05
    14aa:	0e 94 46 18 	call	0x308c	; 0x308c <xTaskPriorityDisinherit>
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	fc 01       	movw	r30, r24
    14b6:	15 82       	std	Z+5, r1	; 0x05
    14b8:	14 82       	std	Z+4, r1	; 0x04
    14ba:	8e c0       	rjmp	.+284    	; 0x15d8 <prvCopyDataToQueue+0x17e>
    14bc:	8f 81       	ldd	r24, Y+7	; 0x07
    14be:	88 23       	and	r24, r24
    14c0:	d9 f5       	brne	.+118    	; 0x1538 <prvCopyDataToQueue+0xde>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	fc 01       	movw	r30, r24
    14c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    14ca:	48 2f       	mov	r20, r24
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	fc 01       	movw	r30, r24
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	3e 81       	ldd	r19, Y+6	; 0x06
    14dc:	b9 01       	movw	r22, r18
    14de:	0e 94 11 37 	call	0x6e22	; 0x6e22 <memcpy>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	fc 01       	movw	r30, r24
    14e8:	22 81       	ldd	r18, Z+2	; 0x02
    14ea:	33 81       	ldd	r19, Z+3	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	fc 01       	movw	r30, r24
    14f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	28 0f       	add	r18, r24
    14fa:	39 1f       	adc	r19, r25
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	fc 01       	movw	r30, r24
    1502:	33 83       	std	Z+3, r19	; 0x03
    1504:	22 83       	std	Z+2, r18	; 0x02
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	fc 01       	movw	r30, r24
    150c:	22 81       	ldd	r18, Z+2	; 0x02
    150e:	33 81       	ldd	r19, Z+3	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	fc 01       	movw	r30, r24
    1516:	84 81       	ldd	r24, Z+4	; 0x04
    1518:	95 81       	ldd	r25, Z+5	; 0x05
    151a:	28 17       	cp	r18, r24
    151c:	39 07       	cpc	r19, r25
    151e:	08 f4       	brcc	.+2      	; 0x1522 <prvCopyDataToQueue+0xc8>
    1520:	5b c0       	rjmp	.+182    	; 0x15d8 <prvCopyDataToQueue+0x17e>
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	fc 01       	movw	r30, r24
    1528:	20 81       	ld	r18, Z
    152a:	31 81       	ldd	r19, Z+1	; 0x01
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	fc 01       	movw	r30, r24
    1532:	33 83       	std	Z+3, r19	; 0x03
    1534:	22 83       	std	Z+2, r18	; 0x02
    1536:	50 c0       	rjmp	.+160    	; 0x15d8 <prvCopyDataToQueue+0x17e>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	fc 01       	movw	r30, r24
    153e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1540:	48 2f       	mov	r20, r24
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	fc 01       	movw	r30, r24
    154a:	86 81       	ldd	r24, Z+6	; 0x06
    154c:	97 81       	ldd	r25, Z+7	; 0x07
    154e:	2d 81       	ldd	r18, Y+5	; 0x05
    1550:	3e 81       	ldd	r19, Y+6	; 0x06
    1552:	b9 01       	movw	r22, r18
    1554:	0e 94 11 37 	call	0x6e22	; 0x6e22 <memcpy>
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	fc 01       	movw	r30, r24
    155e:	26 81       	ldd	r18, Z+6	; 0x06
    1560:	37 81       	ldd	r19, Z+7	; 0x07
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	fc 01       	movw	r30, r24
    1568:	84 8d       	ldd	r24, Z+28	; 0x1c
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	91 95       	neg	r25
    1570:	81 95       	neg	r24
    1572:	91 09       	sbc	r25, r1
    1574:	28 0f       	add	r18, r24
    1576:	39 1f       	adc	r19, r25
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	fc 01       	movw	r30, r24
    157e:	37 83       	std	Z+7, r19	; 0x07
    1580:	26 83       	std	Z+6, r18	; 0x06
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	fc 01       	movw	r30, r24
    1588:	26 81       	ldd	r18, Z+6	; 0x06
    158a:	37 81       	ldd	r19, Z+7	; 0x07
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	28 17       	cp	r18, r24
    1598:	39 07       	cpc	r19, r25
    159a:	a8 f4       	brcc	.+42     	; 0x15c6 <prvCopyDataToQueue+0x16c>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	fc 01       	movw	r30, r24
    15a2:	24 81       	ldd	r18, Z+4	; 0x04
    15a4:	35 81       	ldd	r19, Z+5	; 0x05
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	fc 01       	movw	r30, r24
    15ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	91 95       	neg	r25
    15b4:	81 95       	neg	r24
    15b6:	91 09       	sbc	r25, r1
    15b8:	28 0f       	add	r18, r24
    15ba:	39 1f       	adc	r19, r25
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	fc 01       	movw	r30, r24
    15c2:	37 83       	std	Z+7, r19	; 0x07
    15c4:	26 83       	std	Z+6, r18	; 0x06
    15c6:	8f 81       	ldd	r24, Y+7	; 0x07
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	31 f4       	brne	.+12     	; 0x15d8 <prvCopyDataToQueue+0x17e>
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	88 23       	and	r24, r24
    15d0:	19 f0       	breq	.+6      	; 0x15d8 <prvCopyDataToQueue+0x17e>
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	81 50       	subi	r24, 0x01	; 1
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	21 e0       	ldi	r18, 0x01	; 1
    15dc:	28 0f       	add	r18, r24
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	fc 01       	movw	r30, r24
    15e4:	22 8f       	std	Z+26, r18	; 0x1a
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	27 96       	adiw	r28, 0x07	; 7
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	08 95       	ret

000015fa <prvCopyDataFromQueue>:
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <prvCopyDataFromQueue+0x6>
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	7c 83       	std	Y+4, r23	; 0x04
    160c:	6b 83       	std	Y+3, r22	; 0x03
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	fc 01       	movw	r30, r24
    1614:	84 8d       	ldd	r24, Z+28	; 0x1c
    1616:	88 23       	and	r24, r24
    1618:	c9 f1       	breq	.+114    	; 0x168c <prvCopyDataFromQueue+0x92>
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	fc 01       	movw	r30, r24
    1620:	26 81       	ldd	r18, Z+6	; 0x06
    1622:	37 81       	ldd	r19, Z+7	; 0x07
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	fc 01       	movw	r30, r24
    162a:	84 8d       	ldd	r24, Z+28	; 0x1c
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	28 0f       	add	r18, r24
    1632:	39 1f       	adc	r19, r25
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	fc 01       	movw	r30, r24
    163a:	37 83       	std	Z+7, r19	; 0x07
    163c:	26 83       	std	Z+6, r18	; 0x06
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	fc 01       	movw	r30, r24
    1644:	26 81       	ldd	r18, Z+6	; 0x06
    1646:	37 81       	ldd	r19, Z+7	; 0x07
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	fc 01       	movw	r30, r24
    164e:	84 81       	ldd	r24, Z+4	; 0x04
    1650:	95 81       	ldd	r25, Z+5	; 0x05
    1652:	28 17       	cp	r18, r24
    1654:	39 07       	cpc	r19, r25
    1656:	50 f0       	brcs	.+20     	; 0x166c <prvCopyDataFromQueue+0x72>
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	fc 01       	movw	r30, r24
    165e:	20 81       	ld	r18, Z
    1660:	31 81       	ldd	r19, Z+1	; 0x01
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	fc 01       	movw	r30, r24
    1668:	37 83       	std	Z+7, r19	; 0x07
    166a:	26 83       	std	Z+6, r18	; 0x06
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	fc 01       	movw	r30, r24
    1672:	84 8d       	ldd	r24, Z+28	; 0x1c
    1674:	48 2f       	mov	r20, r24
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	fc 01       	movw	r30, r24
    167e:	26 81       	ldd	r18, Z+6	; 0x06
    1680:	37 81       	ldd	r19, Z+7	; 0x07
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	b9 01       	movw	r22, r18
    1688:	0e 94 11 37 	call	0x6e22	; 0x6e22 <memcpy>
    168c:	00 00       	nop
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <prvUnlockQueue>:
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <prvUnlockQueue+0x6>
    16a2:	1f 92       	push	r1
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	0f 92       	push	r0
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	fc 01       	movw	r30, r24
    16b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	12 c0       	rjmp	.+36     	; 0x16e2 <prvUnlockQueue+0x46>
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	fc 01       	movw	r30, r24
    16c4:	81 89       	ldd	r24, Z+17	; 0x11
    16c6:	88 23       	and	r24, r24
    16c8:	81 f0       	breq	.+32     	; 0x16ea <prvUnlockQueue+0x4e>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	41 96       	adiw	r24, 0x11	; 17
    16d0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskRemoveFromEventList>
    16d4:	88 23       	and	r24, r24
    16d6:	11 f0       	breq	.+4      	; 0x16dc <prvUnlockQueue+0x40>
    16d8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <vTaskMissedYield>
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	81 50       	subi	r24, 0x01	; 1
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	18 16       	cp	r1, r24
    16e6:	5c f3       	brlt	.-42     	; 0x16be <prvUnlockQueue+0x22>
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <prvUnlockQueue+0x50>
    16ea:	00 00       	nop
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	2f ef       	ldi	r18, 0xFF	; 255
    16f2:	fc 01       	movw	r30, r24
    16f4:	26 8f       	std	Z+30, r18	; 0x1e
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	0f 92       	push	r0
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	fc 01       	movw	r30, r24
    1706:	85 8d       	ldd	r24, Z+29	; 0x1d
    1708:	8a 83       	std	Y+2, r24	; 0x02
    170a:	12 c0       	rjmp	.+36     	; 0x1730 <prvUnlockQueue+0x94>
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	fc 01       	movw	r30, r24
    1712:	80 85       	ldd	r24, Z+8	; 0x08
    1714:	88 23       	and	r24, r24
    1716:	81 f0       	breq	.+32     	; 0x1738 <prvUnlockQueue+0x9c>
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	08 96       	adiw	r24, 0x08	; 8
    171e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <xTaskRemoveFromEventList>
    1722:	88 23       	and	r24, r24
    1724:	11 f0       	breq	.+4      	; 0x172a <prvUnlockQueue+0x8e>
    1726:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <vTaskMissedYield>
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	81 50       	subi	r24, 0x01	; 1
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	18 16       	cp	r1, r24
    1734:	5c f3       	brlt	.-42     	; 0x170c <prvUnlockQueue+0x70>
    1736:	01 c0       	rjmp	.+2      	; 0x173a <prvUnlockQueue+0x9e>
    1738:	00 00       	nop
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	2f ef       	ldi	r18, 0xFF	; 255
    1740:	fc 01       	movw	r30, r24
    1742:	25 8f       	std	Z+29, r18	; 0x1d
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	00 00       	nop
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <prvIsQueueEmpty>:
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	00 d0       	rcall	.+0      	; 0x175e <prvIsQueueEmpty+0x6>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	9b 83       	std	Y+3, r25	; 0x03
    1764:	8a 83       	std	Y+2, r24	; 0x02
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	0f 92       	push	r0
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	fc 01       	movw	r30, r24
    1772:	82 8d       	ldd	r24, Z+26	; 0x1a
    1774:	88 23       	and	r24, r24
    1776:	19 f4       	brne	.+6      	; 0x177e <prvIsQueueEmpty+0x26>
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <prvIsQueueEmpty+0x28>
    177e:	19 82       	std	Y+1, r1	; 0x01
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <prvIsQueueFull>:
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	00 d0       	rcall	.+0      	; 0x1798 <prvIsQueueFull+0x6>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	9b 83       	std	Y+3, r25	; 0x03
    179e:	8a 83       	std	Y+2, r24	; 0x02
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	0f 92       	push	r0
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	fc 01       	movw	r30, r24
    17ac:	22 8d       	ldd	r18, Z+26	; 0x1a
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	fc 01       	movw	r30, r24
    17b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    17b6:	28 17       	cp	r18, r24
    17b8:	19 f4       	brne	.+6      	; 0x17c0 <prvIsQueueFull+0x2e>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <prvIsQueueFull+0x30>
    17c0:	19 82       	std	Y+1, r1	; 0x01
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	27 97       	sbiw	r28, 0x07	; 7
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	9c 83       	std	Y+4, r25	; 0x04
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	7e 83       	std	Y+6, r23	; 0x06
    17ee:	6d 83       	std	Y+5, r22	; 0x05
    17f0:	4f 83       	std	Y+7, r20	; 0x07
    Queue_t * const pxQueue = xQueue;
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	0f 92       	push	r0
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	fc 01       	movw	r30, r24
    1806:	85 8d       	ldd	r24, Z+29	; 0x1d
    1808:	8f 3f       	cpi	r24, 0xFF	; 255
    180a:	21 f4       	brne	.+8      	; 0x1814 <vQueueWaitForMessageRestricted+0x40>
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	fc 01       	movw	r30, r24
    1812:	15 8e       	std	Z+29, r1	; 0x1d
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	fc 01       	movw	r30, r24
    181a:	86 8d       	ldd	r24, Z+30	; 0x1e
    181c:	8f 3f       	cpi	r24, 0xFF	; 255
    181e:	21 f4       	brne	.+8      	; 0x1828 <vQueueWaitForMessageRestricted+0x54>
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	fc 01       	movw	r30, r24
    1826:	16 8e       	std	Z+30, r1	; 0x1e
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	fc 01       	movw	r30, r24
    1832:	82 8d       	ldd	r24, Z+26	; 0x1a
    1834:	88 23       	and	r24, r24
    1836:	49 f4       	brne	.+18     	; 0x184a <vQueueWaitForMessageRestricted+0x76>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	41 96       	adiw	r24, 0x11	; 17
    183e:	2d 81       	ldd	r18, Y+5	; 0x05
    1840:	3e 81       	ldd	r19, Y+6	; 0x06
    1842:	4f 81       	ldd	r20, Y+7	; 0x07
    1844:	b9 01       	movw	r22, r18
    1846:	0e 94 7f 15 	call	0x2afe	; 0x2afe <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	26 df       	rcall	.-436    	; 0x169c <prvUnlockQueue>
    }
    1850:	00 00       	nop
    1852:	27 96       	adiw	r28, 0x07	; 7
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    1864:	0f 93       	push	r16
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	28 97       	sbiw	r28, 0x08	; 8
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	9d 83       	std	Y+5, r25	; 0x05
    187c:	8c 83       	std	Y+4, r24	; 0x04
    187e:	7f 83       	std	Y+7, r23	; 0x07
    1880:	6e 83       	std	Y+6, r22	; 0x06
    1882:	48 87       	std	Y+8, r20	; 0x08
    1884:	88 85       	ldd	r24, Y+8	; 0x08
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	19 f4       	brne	.+6      	; 0x1890 <xStreamBufferGenericCreate+0x2c>
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <xStreamBufferGenericCreate+0x2e>
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	8e 81       	ldd	r24, Y+6	; 0x06
    1894:	9f 81       	ldd	r25, Y+7	; 0x07
    1896:	89 2b       	or	r24, r25
    1898:	21 f4       	brne	.+8      	; 0x18a2 <xStreamBufferGenericCreate+0x3e>
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9f 83       	std	Y+7, r25	; 0x07
    18a0:	8e 83       	std	Y+6, r24	; 0x06
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	9d 83       	std	Y+5, r25	; 0x05
    18aa:	8c 83       	std	Y+4, r24	; 0x04
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	40 96       	adiw	r24, 0x10	; 16
    18b2:	0e 94 8d 01 	call	0x31a	; 0x31a <pvPortMalloc>
    18b6:	9b 83       	std	Y+3, r25	; 0x03
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	89 2b       	or	r24, r25
    18c0:	69 f0       	breq	.+26     	; 0x18dc <xStreamBufferGenericCreate+0x78>
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	bc 01       	movw	r22, r24
    18c8:	60 5f       	subi	r22, 0xF0	; 240
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	2e 81       	ldd	r18, Y+6	; 0x06
    18ce:	3f 81       	ldd	r19, Y+7	; 0x07
    18d0:	4c 81       	ldd	r20, Y+4	; 0x04
    18d2:	5d 81       	ldd	r21, Y+5	; 0x05
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	09 81       	ldd	r16, Y+1	; 0x01
    18da:	30 d4       	rcall	.+2144   	; 0x213c <prvInitialiseNewStreamBuffer>
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	28 96       	adiw	r28, 0x08	; 8
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	0f 91       	pop	r16
    18f2:	08 95       	ret

000018f4 <xStreamBufferReset>:
    18f4:	0f 93       	push	r16
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <xStreamBufferReset+0x8>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <xStreamBufferReset+0xa>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	9e 81       	ldd	r25, Y+6	; 0x06
    190a:	9b 83       	std	Y+3, r25	; 0x03
    190c:	8a 83       	std	Y+2, r24	; 0x02
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	dc 01       	movw	r26, r24
    1916:	1f 96       	adiw	r26, 0x0f	; 15
    1918:	8c 91       	ld	r24, X
    191a:	8c 83       	std	Y+4, r24	; 0x04
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	0f 92       	push	r0
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	fc 01       	movw	r30, r24
    1928:	80 85       	ldd	r24, Z+8	; 0x08
    192a:	91 85       	ldd	r25, Z+9	; 0x09
    192c:	89 2b       	or	r24, r25
    192e:	71 f5       	brne	.+92     	; 0x198c <xStreamBufferReset+0x98>
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	dc 01       	movw	r26, r24
    1936:	1a 96       	adiw	r26, 0x0a	; 10
    1938:	8d 91       	ld	r24, X+
    193a:	9c 91       	ld	r25, X
    193c:	1b 97       	sbiw	r26, 0x0b	; 11
    193e:	89 2b       	or	r24, r25
    1940:	29 f5       	brne	.+74     	; 0x198c <xStreamBufferReset+0x98>
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	dc 01       	movw	r26, r24
    1948:	1e 96       	adiw	r26, 0x0e	; 14
    194a:	ec 91       	ld	r30, X
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	9b 81       	ldd	r25, Y+3	; 0x03
    1950:	dc 01       	movw	r26, r24
    1952:	16 96       	adiw	r26, 0x06	; 6
    1954:	2d 91       	ld	r18, X+
    1956:	3c 91       	ld	r19, X
    1958:	17 97       	sbiw	r26, 0x07	; 7
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	dc 01       	movw	r26, r24
    1960:	14 96       	adiw	r26, 0x04	; 4
    1962:	4d 91       	ld	r20, X+
    1964:	5c 91       	ld	r21, X
    1966:	15 97       	sbiw	r26, 0x05	; 5
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	9b 81       	ldd	r25, Y+3	; 0x03
    196c:	dc 01       	movw	r26, r24
    196e:	1c 96       	adiw	r26, 0x0c	; 12
    1970:	6d 91       	ld	r22, X+
    1972:	7c 91       	ld	r23, X
    1974:	1d 97       	sbiw	r26, 0x0d	; 13
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	0e 2f       	mov	r16, r30
    197c:	df d3       	rcall	.+1982   	; 0x213c <prvInitialiseNewStreamBuffer>
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	2c 81       	ldd	r18, Y+4	; 0x04
    1988:	fc 01       	movw	r30, r24
    198a:	27 87       	std	Z+15, r18	; 0x0f
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	26 96       	adiw	r28, 0x06	; 6
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <xStreamBufferSpacesAvailable>:
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <xStreamBufferSpacesAvailable+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <xStreamBufferSpacesAvailable+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	fc 01       	movw	r30, r24
    19c4:	24 81       	ldd	r18, Z+4	; 0x04
    19c6:	35 81       	ldd	r19, Z+5	; 0x05
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	82 0f       	add	r24, r18
    19d4:	93 1f       	adc	r25, r19
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	fc 01       	movw	r30, r24
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	29 81       	ldd	r18, Y+1	; 0x01
    19e6:	3a 81       	ldd	r19, Y+2	; 0x02
    19e8:	a9 01       	movw	r20, r18
    19ea:	48 1b       	sub	r20, r24
    19ec:	59 0b       	sbc	r21, r25
    19ee:	ca 01       	movw	r24, r20
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	fc 01       	movw	r30, r24
    1a04:	24 81       	ldd	r18, Z+4	; 0x04
    1a06:	35 81       	ldd	r19, Z+5	; 0x05
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	82 17       	cp	r24, r18
    1a0e:	93 07       	cpc	r25, r19
    1a10:	68 f0       	brcs	.+26     	; 0x1a2c <xStreamBufferSpacesAvailable+0x86>
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	fc 01       	movw	r30, r24
    1a18:	84 81       	ldd	r24, Z+4	; 0x04
    1a1a:	95 81       	ldd	r25, Z+5	; 0x05
    1a1c:	29 81       	ldd	r18, Y+1	; 0x01
    1a1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a20:	a9 01       	movw	r20, r18
    1a22:	48 1b       	sub	r20, r24
    1a24:	59 0b       	sbc	r21, r25
    1a26:	ca 01       	movw	r24, r20
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	26 96       	adiw	r28, 0x06	; 6
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <xStreamBufferSendFromISR>:
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	61 97       	sbiw	r28, 0x11	; 17
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	9b 87       	std	Y+11, r25	; 0x0b
    1a60:	8a 87       	std	Y+10, r24	; 0x0a
    1a62:	7d 87       	std	Y+13, r23	; 0x0d
    1a64:	6c 87       	std	Y+12, r22	; 0x0c
    1a66:	5f 87       	std	Y+15, r21	; 0x0f
    1a68:	4e 87       	std	Y+14, r20	; 0x0e
    1a6a:	39 8b       	std	Y+17, r19	; 0x11
    1a6c:	28 8b       	std	Y+16, r18	; 0x10
    1a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
    1a76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	fc 01       	movw	r30, r24
    1a84:	86 85       	ldd	r24, Z+14	; 0x0e
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	81 70       	andi	r24, 0x01	; 1
    1a8c:	99 27       	eor	r25, r25
    1a8e:	89 2b       	or	r24, r25
    1a90:	29 f0       	breq	.+10     	; 0x1a9c <xStreamBufferSendFromISR+0x5a>
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	02 96       	adiw	r24, 0x02	; 2
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	82 df       	rcall	.-252    	; 0x19a6 <xStreamBufferSpacesAvailable>
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1aac:	3e 81       	ldd	r19, Y+6	; 0x06
    1aae:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ab0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ab2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ab4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	8f 01       	movw	r16, r30
    1abc:	3e d0       	rcall	.+124    	; 0x1b3a <prvWriteMessageToBuffer>
    1abe:	98 87       	std	Y+8, r25	; 0x08
    1ac0:	8f 83       	std	Y+7, r24	; 0x07
    1ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac4:	98 85       	ldd	r25, Y+8	; 0x08
    1ac6:	89 2b       	or	r24, r25
    1ac8:	49 f1       	breq	.+82     	; 0x1b1c <xStreamBufferSendFromISR+0xda>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	f3 d2       	rcall	.+1510   	; 0x20b6 <prvBytesInBuffer>
    1ad0:	9c 01       	movw	r18, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	86 81       	ldd	r24, Z+6	; 0x06
    1ada:	97 81       	ldd	r25, Z+7	; 0x07
    1adc:	28 17       	cp	r18, r24
    1ade:	39 07       	cpc	r19, r25
    1ae0:	e8 f0       	brcs	.+58     	; 0x1b1c <xStreamBufferSendFromISR+0xda>
    1ae2:	19 86       	std	Y+9, r1	; 0x09
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	fc 01       	movw	r30, r24
    1aea:	80 85       	ldd	r24, Z+8	; 0x08
    1aec:	91 85       	ldd	r25, Z+9	; 0x09
    1aee:	89 2b       	or	r24, r25
    1af0:	a9 f0       	breq	.+42     	; 0x1b1c <xStreamBufferSendFromISR+0xda>
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	fc 01       	movw	r30, r24
    1af8:	80 85       	ldd	r24, Z+8	; 0x08
    1afa:	91 85       	ldd	r25, Z+9	; 0x09
    1afc:	28 89       	ldd	r18, Y+16	; 0x10
    1afe:	39 89       	ldd	r19, Y+17	; 0x11
    1b00:	79 01       	movw	r14, r18
    1b02:	00 e0       	ldi	r16, 0x00	; 0
    1b04:	10 e0       	ldi	r17, 0x00	; 0
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	ba 01       	movw	r22, r20
    1b0e:	0e 94 03 1b 	call	0x3606	; 0x3606 <xTaskGenericNotifyFromISR>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	fc 01       	movw	r30, r24
    1b18:	11 86       	std	Z+9, r1	; 0x09
    1b1a:	10 86       	std	Z+8, r1	; 0x08
    1b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1e:	98 85       	ldd	r25, Y+8	; 0x08
    1b20:	61 96       	adiw	r28, 0x11	; 17
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	08 95       	ret

00001b3a <prvWriteMessageToBuffer>:
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	61 97       	sbiw	r28, 0x11	; 17
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	99 87       	std	Y+9, r25	; 0x09
    1b54:	88 87       	std	Y+8, r24	; 0x08
    1b56:	7b 87       	std	Y+11, r23	; 0x0b
    1b58:	6a 87       	std	Y+10, r22	; 0x0a
    1b5a:	5d 87       	std	Y+13, r21	; 0x0d
    1b5c:	4c 87       	std	Y+12, r20	; 0x0c
    1b5e:	3f 87       	std	Y+15, r19	; 0x0f
    1b60:	2e 87       	std	Y+14, r18	; 0x0e
    1b62:	19 8b       	std	Y+17, r17	; 0x11
    1b64:	08 8b       	std	Y+16, r16	; 0x10
    1b66:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b68:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b6a:	89 2b       	or	r24, r25
    1b6c:	11 f4       	brne	.+4      	; 0x1b72 <prvWriteMessageToBuffer+0x38>
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	33 c0       	rjmp	.+102    	; 0x1bd8 <prvWriteMessageToBuffer+0x9e>
    1b72:	88 85       	ldd	r24, Y+8	; 0x08
    1b74:	99 85       	ldd	r25, Y+9	; 0x09
    1b76:	fc 01       	movw	r30, r24
    1b78:	86 85       	ldd	r24, Z+14	; 0x0e
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	81 70       	andi	r24, 0x01	; 1
    1b80:	99 27       	eor	r25, r25
    1b82:	89 2b       	or	r24, r25
    1b84:	a9 f4       	brne	.+42     	; 0x1bb0 <prvWriteMessageToBuffer+0x76>
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b8e:	9d 83       	std	Y+5, r25	; 0x05
    1b90:	8c 83       	std	Y+4, r24	; 0x04
    1b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b94:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b96:	9f 83       	std	Y+7, r25	; 0x07
    1b98:	8e 83       	std	Y+6, r24	; 0x06
    1b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba2:	28 17       	cp	r18, r24
    1ba4:	39 07       	cpc	r19, r25
    1ba6:	08 f4       	brcc	.+2      	; 0x1baa <prvWriteMessageToBuffer+0x70>
    1ba8:	c9 01       	movw	r24, r18
    1baa:	9d 87       	std	Y+13, r25	; 0x0d
    1bac:	8c 87       	std	Y+12, r24	; 0x0c
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <prvWriteMessageToBuffer+0x9e>
    1bb0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bb2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bb4:	88 89       	ldd	r24, Y+16	; 0x10
    1bb6:	99 89       	ldd	r25, Y+17	; 0x11
    1bb8:	28 17       	cp	r18, r24
    1bba:	39 07       	cpc	r19, r25
    1bbc:	60 f0       	brcs	.+24     	; 0x1bd6 <prvWriteMessageToBuffer+0x9c>
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	9e 01       	movw	r18, r28
    1bc4:	24 5f       	subi	r18, 0xF4	; 244
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	88 85       	ldd	r24, Y+8	; 0x08
    1bca:	99 85       	ldd	r25, Y+9	; 0x09
    1bcc:	42 e0       	ldi	r20, 0x02	; 2
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	3b d1       	rcall	.+630    	; 0x1e4a <prvWriteBytesToBuffer>
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <prvWriteMessageToBuffer+0x9e>
    1bd6:	19 82       	std	Y+1, r1	; 0x01
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	88 23       	and	r24, r24
    1bdc:	59 f0       	breq	.+22     	; 0x1bf4 <prvWriteMessageToBuffer+0xba>
    1bde:	4c 85       	ldd	r20, Y+12	; 0x0c
    1be0:	5d 85       	ldd	r21, Y+13	; 0x0d
    1be2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1be4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1be6:	88 85       	ldd	r24, Y+8	; 0x08
    1be8:	99 85       	ldd	r25, Y+9	; 0x09
    1bea:	b9 01       	movw	r22, r18
    1bec:	2e d1       	rcall	.+604    	; 0x1e4a <prvWriteBytesToBuffer>
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <prvWriteMessageToBuffer+0xbe>
    1bf4:	1b 82       	std	Y+3, r1	; 0x03
    1bf6:	1a 82       	std	Y+2, r1	; 0x02
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfc:	61 96       	adiw	r28, 0x11	; 17
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	08 95       	ret

00001c12 <xStreamBufferReceive>:
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	60 97       	sbiw	r28, 0x10	; 16
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	9a 87       	std	Y+10, r25	; 0x0a
    1c30:	89 87       	std	Y+9, r24	; 0x09
    1c32:	7c 87       	std	Y+12, r23	; 0x0c
    1c34:	6b 87       	std	Y+11, r22	; 0x0b
    1c36:	5e 87       	std	Y+14, r21	; 0x0e
    1c38:	4d 87       	std	Y+13, r20	; 0x0d
    1c3a:	38 8b       	std	Y+16, r19	; 0x10
    1c3c:	2f 87       	std	Y+15, r18	; 0x0f
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	98 87       	std	Y+8, r25	; 0x08
    1c44:	8f 83       	std	Y+7, r24	; 0x07
    1c46:	1a 82       	std	Y+2, r1	; 0x02
    1c48:	19 82       	std	Y+1, r1	; 0x01
    1c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4c:	98 85       	ldd	r25, Y+8	; 0x08
    1c4e:	fc 01       	movw	r30, r24
    1c50:	86 85       	ldd	r24, Z+14	; 0x0e
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	81 70       	andi	r24, 0x01	; 1
    1c58:	99 27       	eor	r25, r25
    1c5a:	89 2b       	or	r24, r25
    1c5c:	29 f0       	breq	.+10     	; 0x1c68 <xStreamBufferReceive+0x56>
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <xStreamBufferReceive+0x5a>
    1c68:	1e 82       	std	Y+6, r1	; 0x06
    1c6a:	1d 82       	std	Y+5, r1	; 0x05
    1c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6e:	98 89       	ldd	r25, Y+16	; 0x10
    1c70:	89 2b       	or	r24, r25
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <xStreamBufferReceive+0x64>
    1c74:	3c c0       	rjmp	.+120    	; 0x1cee <xStreamBufferReceive+0xdc>
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	0f 92       	push	r0
    1c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7e:	98 85       	ldd	r25, Y+8	; 0x08
    1c80:	1a d2       	rcall	.+1076   	; 0x20b6 <prvBytesInBuffer>
    1c82:	9c 83       	std	Y+4, r25	; 0x04
    1c84:	8b 83       	std	Y+3, r24	; 0x03
    1c86:	2b 81       	ldd	r18, Y+3	; 0x03
    1c88:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	82 17       	cp	r24, r18
    1c90:	93 07       	cpc	r25, r19
    1c92:	60 f0       	brcs	.+24     	; 0x1cac <xStreamBufferReceive+0x9a>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <xTaskNotifyStateClear>
    1c9c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <xTaskGetCurrentTaskHandle>
    1ca0:	9c 01       	movw	r18, r24
    1ca2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca4:	98 85       	ldd	r25, Y+8	; 0x08
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	31 87       	std	Z+9, r19	; 0x09
    1caa:	20 87       	std	Z+8, r18	; 0x08
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	82 17       	cp	r24, r18
    1cba:	93 07       	cpc	r25, r19
    1cbc:	e8 f0       	brcs	.+58     	; 0x1cf8 <xStreamBufferReceive+0xe6>
    1cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc0:	98 89       	ldd	r25, Y+16	; 0x10
    1cc2:	7c 01       	movw	r14, r24
    1cc4:	00 e0       	ldi	r16, 0x00	; 0
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	a9 01       	movw	r20, r18
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <xTaskNotifyWait>
    1cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cda:	98 85       	ldd	r25, Y+8	; 0x08
    1cdc:	fc 01       	movw	r30, r24
    1cde:	11 86       	std	Z+9, r1	; 0x09
    1ce0:	10 86       	std	Z+8, r1	; 0x08
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	e7 d1       	rcall	.+974    	; 0x20b6 <prvBytesInBuffer>
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <xStreamBufferReceive+0xe6>
    1cee:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf0:	98 85       	ldd	r25, Y+8	; 0x08
    1cf2:	e1 d1       	rcall	.+962    	; 0x20b6 <prvBytesInBuffer>
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	82 17       	cp	r24, r18
    1d02:	93 07       	cpc	r25, r19
    1d04:	68 f5       	brcc	.+90     	; 0x1d60 <xStreamBufferReceive+0x14e>
    1d06:	ed 81       	ldd	r30, Y+5	; 0x05
    1d08:	fe 81       	ldd	r31, Y+6	; 0x06
    1d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d10:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d16:	8f 81       	ldd	r24, Y+7	; 0x07
    1d18:	98 85       	ldd	r25, Y+8	; 0x08
    1d1a:	8f 01       	movw	r16, r30
    1d1c:	30 d0       	rcall	.+96     	; 0x1d7e <prvReadMessageFromBuffer>
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	89 2b       	or	r24, r25
    1d28:	d9 f0       	breq	.+54     	; 0x1d60 <xStreamBufferReceive+0x14e>
    1d2a:	7d d4       	rcall	.+2298   	; 0x2626 <vTaskSuspendAll>
    1d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2e:	98 85       	ldd	r25, Y+8	; 0x08
    1d30:	fc 01       	movw	r30, r24
    1d32:	82 85       	ldd	r24, Z+10	; 0x0a
    1d34:	93 85       	ldd	r25, Z+11	; 0x0b
    1d36:	89 2b       	or	r24, r25
    1d38:	91 f0       	breq	.+36     	; 0x1d5e <xStreamBufferReceive+0x14c>
    1d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3c:	98 85       	ldd	r25, Y+8	; 0x08
    1d3e:	fc 01       	movw	r30, r24
    1d40:	82 85       	ldd	r24, Z+10	; 0x0a
    1d42:	93 85       	ldd	r25, Z+11	; 0x0b
    1d44:	00 e0       	ldi	r16, 0x00	; 0
    1d46:	10 e0       	ldi	r17, 0x00	; 0
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	ba 01       	movw	r22, r20
    1d50:	0e 94 22 1a 	call	0x3444	; 0x3444 <xTaskGenericNotify>
    1d54:	8f 81       	ldd	r24, Y+7	; 0x07
    1d56:	98 85       	ldd	r25, Y+8	; 0x08
    1d58:	fc 01       	movw	r30, r24
    1d5a:	13 86       	std	Z+11, r1	; 0x0b
    1d5c:	12 86       	std	Z+10, r1	; 0x0a
    1d5e:	70 d4       	rcall	.+2272   	; 0x2640 <xTaskResumeAll>
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	60 96       	adiw	r28, 0x10	; 16
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	08 95       	ret

00001d7e <prvReadMessageFromBuffer>:
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	62 97       	sbiw	r28, 0x12	; 18
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	9a 87       	std	Y+10, r25	; 0x0a
    1d98:	89 87       	std	Y+9, r24	; 0x09
    1d9a:	7c 87       	std	Y+12, r23	; 0x0c
    1d9c:	6b 87       	std	Y+11, r22	; 0x0b
    1d9e:	5e 87       	std	Y+14, r21	; 0x0e
    1da0:	4d 87       	std	Y+13, r20	; 0x0d
    1da2:	38 8b       	std	Y+16, r19	; 0x10
    1da4:	2f 87       	std	Y+15, r18	; 0x0f
    1da6:	1a 8b       	std	Y+18, r17	; 0x12
    1da8:	09 8b       	std	Y+17, r16	; 0x11
    1daa:	89 89       	ldd	r24, Y+17	; 0x11
    1dac:	9a 89       	ldd	r25, Y+18	; 0x12
    1dae:	89 2b       	or	r24, r25
    1db0:	81 f1       	breq	.+96     	; 0x1e12 <prvReadMessageFromBuffer+0x94>
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	fc 01       	movw	r30, r24
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	9c 83       	std	Y+4, r25	; 0x04
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	2f 85       	ldd	r18, Y+15	; 0x0f
    1dc2:	38 89       	ldd	r19, Y+16	; 0x10
    1dc4:	49 89       	ldd	r20, Y+17	; 0x11
    1dc6:	5a 89       	ldd	r21, Y+18	; 0x12
    1dc8:	be 01       	movw	r22, r28
    1dca:	69 5f       	subi	r22, 0xF9	; 249
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	ca d0       	rcall	.+404    	; 0x1f68 <prvReadBytesFromBuffer>
    1dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd6:	98 85       	ldd	r25, Y+8	; 0x08
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	2f 85       	ldd	r18, Y+15	; 0x0f
    1dde:	38 89       	ldd	r19, Y+16	; 0x10
    1de0:	89 89       	ldd	r24, Y+17	; 0x11
    1de2:	9a 89       	ldd	r25, Y+18	; 0x12
    1de4:	a9 01       	movw	r20, r18
    1de6:	48 1b       	sub	r20, r24
    1de8:	59 0b       	sbc	r21, r25
    1dea:	ca 01       	movw	r24, r20
    1dec:	98 8b       	std	Y+16, r25	; 0x10
    1dee:	8f 87       	std	Y+15, r24	; 0x0f
    1df0:	29 81       	ldd	r18, Y+1	; 0x01
    1df2:	3a 81       	ldd	r19, Y+2	; 0x02
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	82 17       	cp	r24, r18
    1dfa:	93 07       	cpc	r25, r19
    1dfc:	70 f4       	brcc	.+28     	; 0x1e1a <prvReadMessageFromBuffer+0x9c>
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	2b 81       	ldd	r18, Y+3	; 0x03
    1e04:	3c 81       	ldd	r19, Y+4	; 0x04
    1e06:	fc 01       	movw	r30, r24
    1e08:	31 83       	std	Z+1, r19	; 0x01
    1e0a:	20 83       	st	Z, r18
    1e0c:	1a 82       	std	Y+2, r1	; 0x02
    1e0e:	19 82       	std	Y+1, r1	; 0x01
    1e10:	04 c0       	rjmp	.+8      	; 0x1e1a <prvReadMessageFromBuffer+0x9c>
    1e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e1c:	38 89       	ldd	r19, Y+16	; 0x10
    1e1e:	49 81       	ldd	r20, Y+1	; 0x01
    1e20:	5a 81       	ldd	r21, Y+2	; 0x02
    1e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	9e d0       	rcall	.+316    	; 0x1f68 <prvReadBytesFromBuffer>
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	62 96       	adiw	r28, 0x12	; 18
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	2e 97       	sbiw	r28, 0x0e	; 14
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	9a 87       	std	Y+10, r25	; 0x0a
    1e60:	89 87       	std	Y+9, r24	; 0x09
    1e62:	7c 87       	std	Y+12, r23	; 0x0c
    1e64:	6b 87       	std	Y+11, r22	; 0x0b
    1e66:	5e 87       	std	Y+14, r21	; 0x0e
    1e68:	4d 87       	std	Y+13, r20	; 0x0d
size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	fc 01       	movw	r30, r24
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
    which may be less than the total number of bytes that need to be added if
    the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	24 81       	ldd	r18, Z+4	; 0x04
    1e80:	35 81       	ldd	r19, Z+5	; 0x05
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	a9 01       	movw	r20, r18
    1e88:	48 1b       	sub	r20, r24
    1e8a:	59 0b       	sbc	r21, r25
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	08 f4       	brcc	.+2      	; 0x1eaa <prvWriteBytesToBuffer+0x60>
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	98 87       	std	Y+8, r25	; 0x08
    1eac:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	24 85       	ldd	r18, Z+12	; 0x0c
    1eb6:	35 85       	ldd	r19, Z+13	; 0x0d
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	82 0f       	add	r24, r18
    1ebe:	93 1f       	adc	r25, r19
    1ec0:	4f 81       	ldd	r20, Y+7	; 0x07
    1ec2:	58 85       	ldd	r21, Y+8	; 0x08
    1ec4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ec6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ec8:	b9 01       	movw	r22, r18
    1eca:	0e 94 11 37 	call	0x6e22	; 0x6e22 <memcpy>

    /* If the number of bytes written was less than the number that could be
    written in the first write... */
    if( xCount > xFirstLength )
    1ece:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ed0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed4:	98 85       	ldd	r25, Y+8	; 0x08
    1ed6:	82 17       	cp	r24, r18
    1ed8:	93 07       	cpc	r25, r19
    1eda:	a8 f4       	brcc	.+42     	; 0x1f06 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    1edc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ede:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee2:	98 85       	ldd	r25, Y+8	; 0x08
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	48 1b       	sub	r20, r24
    1ee8:	59 0b       	sbc	r21, r25
    1eea:	2b 85       	ldd	r18, Y+11	; 0x0b
    1eec:	3c 85       	ldd	r19, Y+12	; 0x0c
    1eee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef0:	98 85       	ldd	r25, Y+8	; 0x08
    1ef2:	28 0f       	add	r18, r24
    1ef4:	39 1f       	adc	r19, r25
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	fc 01       	movw	r30, r24
    1efc:	84 85       	ldd	r24, Z+12	; 0x0c
    1efe:	95 85       	ldd	r25, Z+13	; 0x0d
    1f00:	b9 01       	movw	r22, r18
    1f02:	0e 94 11 37 	call	0x6e22	; 0x6e22 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    1f06:	29 81       	ldd	r18, Y+1	; 0x01
    1f08:	3a 81       	ldd	r19, Y+2	; 0x02
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	82 0f       	add	r24, r18
    1f10:	93 1f       	adc	r25, r19
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    if( xNextHead >= pxStreamBuffer->xLength )
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	24 81       	ldd	r18, Z+4	; 0x04
    1f1e:	35 81       	ldd	r19, Z+5	; 0x05
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	82 17       	cp	r24, r18
    1f26:	93 07       	cpc	r25, r19
    1f28:	68 f0       	brcs	.+26     	; 0x1f44 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	fc 01       	movw	r30, r24
    1f30:	84 81       	ldd	r24, Z+4	; 0x04
    1f32:	95 81       	ldd	r25, Z+5	; 0x05
    1f34:	29 81       	ldd	r18, Y+1	; 0x01
    1f36:	3a 81       	ldd	r19, Y+2	; 0x02
    1f38:	a9 01       	movw	r20, r18
    1f3a:	48 1b       	sub	r20, r24
    1f3c:	59 0b       	sbc	r21, r25
    1f3e:	ca 01       	movw	r24, r20
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	29 81       	ldd	r18, Y+1	; 0x01
    1f4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	33 83       	std	Z+3, r19	; 0x03
    1f50:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    1f56:	2e 96       	adiw	r28, 0x0e	; 14
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	08 95       	ret

00001f68 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	66 97       	sbiw	r28, 0x16	; 22
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	98 8b       	std	Y+16, r25	; 0x10
    1f7e:	8f 87       	std	Y+15, r24	; 0x0f
    1f80:	7a 8b       	std	Y+18, r23	; 0x12
    1f82:	69 8b       	std	Y+17, r22	; 0x11
    1f84:	5c 8b       	std	Y+20, r21	; 0x14
    1f86:	4b 8b       	std	Y+19, r20	; 0x13
    1f88:	3e 8b       	std	Y+22, r19	; 0x16
    1f8a:	2d 8b       	std	Y+21, r18	; 0x15
size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    1f8c:	8d 89       	ldd	r24, Y+21	; 0x15
    1f8e:	9e 89       	ldd	r25, Y+22	; 0x16
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	28 17       	cp	r18, r24
    1fa6:	39 07       	cpc	r19, r25
    1fa8:	08 f4       	brcc	.+2      	; 0x1fac <prvReadBytesFromBuffer+0x44>
    1faa:	c9 01       	movw	r24, r18
    1fac:	98 87       	std	Y+8, r25	; 0x08
    1fae:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    1fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb2:	98 85       	ldd	r25, Y+8	; 0x08
    1fb4:	89 2b       	or	r24, r25
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <prvReadBytesFromBuffer+0x52>
    1fb8:	73 c0       	rjmp	.+230    	; 0x20a0 <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    1fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbc:	98 89       	ldd	r25, Y+16	; 0x10
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
        less than the number wanted if the data wraps around to the start of
        the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    1fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fca:	98 89       	ldd	r25, Y+16	; 0x10
    1fcc:	fc 01       	movw	r30, r24
    1fce:	24 81       	ldd	r18, Z+4	; 0x04
    1fd0:	35 81       	ldd	r19, Z+5	; 0x05
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	48 1b       	sub	r20, r24
    1fda:	59 0b       	sbc	r21, r25
    1fdc:	ca 01       	movw	r24, r20
    1fde:	9a 87       	std	Y+10, r25	; 0x0a
    1fe0:	89 87       	std	Y+9, r24	; 0x09
    1fe2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe4:	98 85       	ldd	r25, Y+8	; 0x08
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	8b 87       	std	Y+11, r24	; 0x0b
    1fea:	29 85       	ldd	r18, Y+9	; 0x09
    1fec:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fee:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ff2:	28 17       	cp	r18, r24
    1ff4:	39 07       	cpc	r19, r25
    1ff6:	08 f4       	brcc	.+2      	; 0x1ffa <prvReadBytesFromBuffer+0x92>
    1ff8:	c9 01       	movw	r24, r18
    1ffa:	9e 87       	std	Y+14, r25	; 0x0e
    1ffc:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
        read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	98 89       	ldd	r25, Y+16	; 0x10
    2002:	fc 01       	movw	r30, r24
    2004:	24 85       	ldd	r18, Z+12	; 0x0c
    2006:	35 85       	ldd	r19, Z+13	; 0x0d
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	28 0f       	add	r18, r24
    200e:	39 1f       	adc	r19, r25
    2010:	4d 85       	ldd	r20, Y+13	; 0x0d
    2012:	5e 85       	ldd	r21, Y+14	; 0x0e
    2014:	89 89       	ldd	r24, Y+17	; 0x11
    2016:	9a 89       	ldd	r25, Y+18	; 0x12
    2018:	b9 01       	movw	r22, r18
    201a:	0e 94 11 37 	call	0x6e22	; 0x6e22 <memcpy>

        /* If the total number of wanted bytes is greater than the number
        that could be read in the first read... */
        if( xCount > xFirstLength )
    201e:	2f 81       	ldd	r18, Y+7	; 0x07
    2020:	38 85       	ldd	r19, Y+8	; 0x08
    2022:	8d 85       	ldd	r24, Y+13	; 0x0d
    2024:	9e 85       	ldd	r25, Y+14	; 0x0e
    2026:	82 17       	cp	r24, r18
    2028:	93 07       	cpc	r25, r19
    202a:	a0 f4       	brcc	.+40     	; 0x2054 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    202c:	2f 81       	ldd	r18, Y+7	; 0x07
    202e:	38 85       	ldd	r19, Y+8	; 0x08
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	a9 01       	movw	r20, r18
    2036:	48 1b       	sub	r20, r24
    2038:	59 0b       	sbc	r21, r25
    203a:	8f 85       	ldd	r24, Y+15	; 0x0f
    203c:	98 89       	ldd	r25, Y+16	; 0x10
    203e:	fc 01       	movw	r30, r24
    2040:	64 85       	ldd	r22, Z+12	; 0x0c
    2042:	75 85       	ldd	r23, Z+13	; 0x0d
    2044:	29 89       	ldd	r18, Y+17	; 0x11
    2046:	3a 89       	ldd	r19, Y+18	; 0x12
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	82 0f       	add	r24, r18
    204e:	93 1f       	adc	r25, r19
    2050:	0e 94 11 37 	call	0x6e22	; 0x6e22 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
        the buffer. */
        xNextTail += xCount;
    2054:	29 81       	ldd	r18, Y+1	; 0x01
    2056:	3a 81       	ldd	r19, Y+2	; 0x02
    2058:	8f 81       	ldd	r24, Y+7	; 0x07
    205a:	98 85       	ldd	r25, Y+8	; 0x08
    205c:	82 0f       	add	r24, r18
    205e:	93 1f       	adc	r25, r19
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    2064:	8f 85       	ldd	r24, Y+15	; 0x0f
    2066:	98 89       	ldd	r25, Y+16	; 0x10
    2068:	fc 01       	movw	r30, r24
    206a:	24 81       	ldd	r18, Z+4	; 0x04
    206c:	35 81       	ldd	r19, Z+5	; 0x05
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	82 17       	cp	r24, r18
    2074:	93 07       	cpc	r25, r19
    2076:	68 f0       	brcs	.+26     	; 0x2092 <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    2078:	8f 85       	ldd	r24, Y+15	; 0x0f
    207a:	98 89       	ldd	r25, Y+16	; 0x10
    207c:	fc 01       	movw	r30, r24
    207e:	84 81       	ldd	r24, Z+4	; 0x04
    2080:	95 81       	ldd	r25, Z+5	; 0x05
    2082:	29 81       	ldd	r18, Y+1	; 0x01
    2084:	3a 81       	ldd	r19, Y+2	; 0x02
    2086:	a9 01       	movw	r20, r18
    2088:	48 1b       	sub	r20, r24
    208a:	59 0b       	sbc	r21, r25
    208c:	ca 01       	movw	r24, r20
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    2092:	8f 85       	ldd	r24, Y+15	; 0x0f
    2094:	98 89       	ldd	r25, Y+16	; 0x10
    2096:	29 81       	ldd	r18, Y+1	; 0x01
    2098:	3a 81       	ldd	r19, Y+2	; 0x02
    209a:	fc 01       	movw	r30, r24
    209c:	31 83       	std	Z+1, r19	; 0x01
    209e:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    20a0:	8f 81       	ldd	r24, Y+7	; 0x07
    20a2:	98 85       	ldd	r25, Y+8	; 0x08
}
    20a4:	66 96       	adiw	r28, 0x16	; 22
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	08 95       	ret

000020b6 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <prvBytesInBuffer+0x6>
    20bc:	1f 92       	push	r1
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	fc 01       	movw	r30, r24
    20cc:	24 81       	ldd	r18, Z+4	; 0x04
    20ce:	35 81       	ldd	r19, Z+5	; 0x05
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	fc 01       	movw	r30, r24
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	fc 01       	movw	r30, r24
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	29 81       	ldd	r18, Y+1	; 0x01
    20ee:	3a 81       	ldd	r19, Y+2	; 0x02
    20f0:	a9 01       	movw	r20, r18
    20f2:	48 1b       	sub	r20, r24
    20f4:	59 0b       	sbc	r21, r25
    20f6:	ca 01       	movw	r24, r20
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    if ( xCount >= pxStreamBuffer->xLength )
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	fc 01       	movw	r30, r24
    2102:	24 81       	ldd	r18, Z+4	; 0x04
    2104:	35 81       	ldd	r19, Z+5	; 0x05
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	82 17       	cp	r24, r18
    210c:	93 07       	cpc	r25, r19
    210e:	68 f0       	brcs	.+26     	; 0x212a <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	fc 01       	movw	r30, r24
    2116:	84 81       	ldd	r24, Z+4	; 0x04
    2118:	95 81       	ldd	r25, Z+5	; 0x05
    211a:	29 81       	ldd	r18, Y+1	; 0x01
    211c:	3a 81       	ldd	r19, Y+2	; 0x02
    211e:	a9 01       	movw	r20, r18
    2120:	48 1b       	sub	r20, r24
    2122:	59 0b       	sbc	r21, r25
    2124:	ca 01       	movw	r24, r20
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    213c:	0f 93       	push	r16
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	29 97       	sbiw	r28, 0x09	; 9
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	7c 83       	std	Y+4, r23	; 0x04
    2158:	6b 83       	std	Y+3, r22	; 0x03
    215a:	5e 83       	std	Y+6, r21	; 0x06
    215c:	4d 83       	std	Y+5, r20	; 0x05
    215e:	38 87       	std	Y+8, r19	; 0x08
    2160:	2f 83       	std	Y+7, r18	; 0x07
    2162:	09 87       	std	Y+9, r16	; 0x09
        const BaseType_t xWriteValue = 0x55;
        configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	40 e1       	ldi	r20, 0x10	; 16
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	2b 81       	ldd	r18, Y+3	; 0x03
    217a:	3c 81       	ldd	r19, Y+4	; 0x04
    217c:	fc 01       	movw	r30, r24
    217e:	35 87       	std	Z+13, r19	; 0x0d
    2180:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	2d 81       	ldd	r18, Y+5	; 0x05
    2188:	3e 81       	ldd	r19, Y+6	; 0x06
    218a:	fc 01       	movw	r30, r24
    218c:	35 83       	std	Z+5, r19	; 0x05
    218e:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	2f 81       	ldd	r18, Y+7	; 0x07
    2196:	38 85       	ldd	r19, Y+8	; 0x08
    2198:	fc 01       	movw	r30, r24
    219a:	37 83       	std	Z+7, r19	; 0x07
    219c:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	29 85       	ldd	r18, Y+9	; 0x09
    21a4:	fc 01       	movw	r30, r24
    21a6:	26 87       	std	Z+14, r18	; 0x0e
}
    21a8:	00 00       	nop
    21aa:	29 96       	adiw	r28, 0x09	; 9
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	0f 91       	pop	r16
    21bc:	08 95       	ret

000021be <xTaskCreate>:
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	60 97       	sbiw	r28, 0x10	; 16
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	9f 83       	std	Y+7, r25	; 0x07
    21e2:	8e 83       	std	Y+6, r24	; 0x06
    21e4:	79 87       	std	Y+9, r23	; 0x09
    21e6:	68 87       	std	Y+8, r22	; 0x08
    21e8:	5b 87       	std	Y+11, r21	; 0x0b
    21ea:	4a 87       	std	Y+10, r20	; 0x0a
    21ec:	3d 87       	std	Y+13, r19	; 0x0d
    21ee:	2c 87       	std	Y+12, r18	; 0x0c
    21f0:	0e 87       	std	Y+14, r16	; 0x0e
    21f2:	f8 8a       	std	Y+16, r15	; 0x10
    21f4:	ef 86       	std	Y+15, r14	; 0x0f
    21f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21fa:	0e 94 8d 01 	call	0x31a	; 0x31a <pvPortMalloc>
    21fe:	9d 83       	std	Y+5, r25	; 0x05
    2200:	8c 83       	std	Y+4, r24	; 0x04
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	9d 81       	ldd	r25, Y+5	; 0x05
    2206:	89 2b       	or	r24, r25
    2208:	b9 f0       	breq	.+46     	; 0x2238 <__stack+0x39>
    220a:	8c e2       	ldi	r24, 0x2C	; 44
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 8d 01 	call	0x31a	; 0x31a <pvPortMalloc>
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	89 2b       	or	r24, r25
    221c:	41 f0       	breq	.+16     	; 0x222e <__stack+0x2f>
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	2c 81       	ldd	r18, Y+4	; 0x04
    2224:	3d 81       	ldd	r19, Y+5	; 0x05
    2226:	fc 01       	movw	r30, r24
    2228:	30 8f       	std	Z+24, r19	; 0x18
    222a:	27 8b       	std	Z+23, r18	; 0x17
    222c:	07 c0       	rjmp	.+14     	; 0x223c <__stack+0x3d>
    222e:	8c 81       	ldd	r24, Y+4	; 0x04
    2230:	9d 81       	ldd	r25, Y+5	; 0x05
    2232:	0e 94 ae 01 	call	0x35c	; 0x35c <vPortFree>
    2236:	02 c0       	rjmp	.+4      	; 0x223c <__stack+0x3d>
    2238:	1a 82       	std	Y+2, r1	; 0x02
    223a:	19 82       	std	Y+1, r1	; 0x01
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	89 2b       	or	r24, r25
    2242:	c1 f0       	breq	.+48     	; 0x2274 <__stack+0x75>
    2244:	a9 81       	ldd	r26, Y+1	; 0x01
    2246:	ba 81       	ldd	r27, Y+2	; 0x02
    2248:	ef 85       	ldd	r30, Y+15	; 0x0f
    224a:	f8 89       	ldd	r31, Y+16	; 0x10
    224c:	2c 85       	ldd	r18, Y+12	; 0x0c
    224e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2250:	4a 85       	ldd	r20, Y+10	; 0x0a
    2252:	5b 85       	ldd	r21, Y+11	; 0x0b
    2254:	68 85       	ldd	r22, Y+8	; 0x08
    2256:	79 85       	ldd	r23, Y+9	; 0x09
    2258:	8e 81       	ldd	r24, Y+6	; 0x06
    225a:	9f 81       	ldd	r25, Y+7	; 0x07
    225c:	a1 2c       	mov	r10, r1
    225e:	b1 2c       	mov	r11, r1
    2260:	6d 01       	movw	r12, r26
    2262:	7f 01       	movw	r14, r30
    2264:	0e 85       	ldd	r16, Y+14	; 0x0e
    2266:	19 d0       	rcall	.+50     	; 0x229a <prvInitialiseNewTask>
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	f5 d0       	rcall	.+490    	; 0x2458 <prvAddNewTaskToReadyList>
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	8b 83       	std	Y+3, r24	; 0x03
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <__stack+0x79>
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	60 96       	adiw	r28, 0x10	; 16
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	cf 90       	pop	r12
    2294:	bf 90       	pop	r11
    2296:	af 90       	pop	r10
    2298:	08 95       	ret

0000229a <prvInitialiseNewTask>:
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	62 97       	sbiw	r28, 0x12	; 18
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	9d 83       	std	Y+5, r25	; 0x05
    22be:	8c 83       	std	Y+4, r24	; 0x04
    22c0:	7f 83       	std	Y+7, r23	; 0x07
    22c2:	6e 83       	std	Y+6, r22	; 0x06
    22c4:	59 87       	std	Y+9, r21	; 0x09
    22c6:	48 87       	std	Y+8, r20	; 0x08
    22c8:	3b 87       	std	Y+11, r19	; 0x0b
    22ca:	2a 87       	std	Y+10, r18	; 0x0a
    22cc:	0c 87       	std	Y+12, r16	; 0x0c
    22ce:	fe 86       	std	Y+14, r15	; 0x0e
    22d0:	ed 86       	std	Y+13, r14	; 0x0d
    22d2:	d8 8a       	std	Y+16, r13	; 0x10
    22d4:	cf 86       	std	Y+15, r12	; 0x0f
    22d6:	ba 8a       	std	Y+18, r11	; 0x12
    22d8:	a9 8a       	std	Y+17, r10	; 0x11
    22da:	8f 85       	ldd	r24, Y+15	; 0x0f
    22dc:	98 89       	ldd	r25, Y+16	; 0x10
    22de:	fc 01       	movw	r30, r24
    22e0:	87 89       	ldd	r24, Z+23	; 0x17
    22e2:	90 8d       	ldd	r25, Z+24	; 0x18
    22e4:	28 85       	ldd	r18, Y+8	; 0x08
    22e6:	39 85       	ldd	r19, Y+9	; 0x09
    22e8:	a9 01       	movw	r20, r18
    22ea:	65 ea       	ldi	r22, 0xA5	; 165
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <memset>
    22f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f4:	98 89       	ldd	r25, Y+16	; 0x10
    22f6:	fc 01       	movw	r30, r24
    22f8:	27 89       	ldd	r18, Z+23	; 0x17
    22fa:	30 8d       	ldd	r19, Z+24	; 0x18
    22fc:	88 85       	ldd	r24, Y+8	; 0x08
    22fe:	99 85       	ldd	r25, Y+9	; 0x09
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	82 0f       	add	r24, r18
    2304:	93 1f       	adc	r25, r19
    2306:	9b 83       	std	Y+3, r25	; 0x03
    2308:	8a 83       	std	Y+2, r24	; 0x02
    230a:	8e 81       	ldd	r24, Y+6	; 0x06
    230c:	9f 81       	ldd	r25, Y+7	; 0x07
    230e:	89 2b       	or	r24, r25
    2310:	69 f1       	breq	.+90     	; 0x236c <prvInitialiseNewTask+0xd2>
    2312:	19 82       	std	Y+1, r1	; 0x01
    2314:	21 c0       	rjmp	.+66     	; 0x2358 <prvInitialiseNewTask+0xbe>
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	29 81       	ldd	r18, Y+1	; 0x01
    231e:	22 2f       	mov	r18, r18
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4e 81       	ldd	r20, Y+6	; 0x06
    2324:	5f 81       	ldd	r21, Y+7	; 0x07
    2326:	24 0f       	add	r18, r20
    2328:	35 1f       	adc	r19, r21
    232a:	f9 01       	movw	r30, r18
    232c:	40 81       	ld	r20, Z
    232e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2330:	38 89       	ldd	r19, Y+16	; 0x10
    2332:	82 0f       	add	r24, r18
    2334:	93 1f       	adc	r25, r19
    2336:	49 96       	adiw	r24, 0x19	; 25
    2338:	fc 01       	movw	r30, r24
    233a:	40 83       	st	Z, r20
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	2e 81       	ldd	r18, Y+6	; 0x06
    2344:	3f 81       	ldd	r19, Y+7	; 0x07
    2346:	82 0f       	add	r24, r18
    2348:	93 1f       	adc	r25, r19
    234a:	fc 01       	movw	r30, r24
    234c:	80 81       	ld	r24, Z
    234e:	88 23       	and	r24, r24
    2350:	39 f0       	breq	.+14     	; 0x2360 <prvInitialiseNewTask+0xc6>
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	88 30       	cpi	r24, 0x08	; 8
    235c:	e0 f2       	brcs	.-72     	; 0x2316 <prvInitialiseNewTask+0x7c>
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <prvInitialiseNewTask+0xc8>
    2360:	00 00       	nop
    2362:	8f 85       	ldd	r24, Y+15	; 0x0f
    2364:	98 89       	ldd	r25, Y+16	; 0x10
    2366:	fc 01       	movw	r30, r24
    2368:	10 a2       	std	Z+32, r1	; 0x20
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <prvInitialiseNewTask+0xda>
    236c:	8f 85       	ldd	r24, Y+15	; 0x0f
    236e:	98 89       	ldd	r25, Y+16	; 0x10
    2370:	fc 01       	movw	r30, r24
    2372:	11 8e       	std	Z+25, r1	; 0x19
    2374:	8c 85       	ldd	r24, Y+12	; 0x0c
    2376:	84 30       	cpi	r24, 0x04	; 4
    2378:	10 f0       	brcs	.+4      	; 0x237e <prvInitialiseNewTask+0xe4>
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	8c 87       	std	Y+12, r24	; 0x0c
    237e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2380:	98 89       	ldd	r25, Y+16	; 0x10
    2382:	2c 85       	ldd	r18, Y+12	; 0x0c
    2384:	fc 01       	movw	r30, r24
    2386:	26 8b       	std	Z+22, r18	; 0x16
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	98 89       	ldd	r25, Y+16	; 0x10
    238c:	2c 85       	ldd	r18, Y+12	; 0x0c
    238e:	fc 01       	movw	r30, r24
    2390:	23 a3       	std	Z+35, r18	; 0x23
    2392:	8f 85       	ldd	r24, Y+15	; 0x0f
    2394:	98 89       	ldd	r25, Y+16	; 0x10
    2396:	fc 01       	movw	r30, r24
    2398:	14 a2       	std	Z+36, r1	; 0x24
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	98 89       	ldd	r25, Y+16	; 0x10
    239e:	02 96       	adiw	r24, 0x02	; 2
    23a0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <vListInitialiseItem>
    23a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a6:	98 89       	ldd	r25, Y+16	; 0x10
    23a8:	0c 96       	adiw	r24, 0x0c	; 12
    23aa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <vListInitialiseItem>
    23ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b0:	98 89       	ldd	r25, Y+16	; 0x10
    23b2:	2f 85       	ldd	r18, Y+15	; 0x0f
    23b4:	38 89       	ldd	r19, Y+16	; 0x10
    23b6:	fc 01       	movw	r30, r24
    23b8:	31 87       	std	Z+9, r19	; 0x09
    23ba:	20 87       	std	Z+8, r18	; 0x08
    23bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	24 e0       	ldi	r18, 0x04	; 4
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	28 1b       	sub	r18, r24
    23c8:	39 0b       	sbc	r19, r25
    23ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    23cc:	98 89       	ldd	r25, Y+16	; 0x10
    23ce:	fc 01       	movw	r30, r24
    23d0:	35 87       	std	Z+13, r19	; 0x0d
    23d2:	24 87       	std	Z+12, r18	; 0x0c
    23d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d6:	98 89       	ldd	r25, Y+16	; 0x10
    23d8:	2f 85       	ldd	r18, Y+15	; 0x0f
    23da:	38 89       	ldd	r19, Y+16	; 0x10
    23dc:	fc 01       	movw	r30, r24
    23de:	33 8b       	std	Z+19, r19	; 0x13
    23e0:	22 8b       	std	Z+18, r18	; 0x12
    23e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e4:	98 89       	ldd	r25, Y+16	; 0x10
    23e6:	fc 01       	movw	r30, r24
    23e8:	16 a2       	std	Z+38, r1	; 0x26
    23ea:	15 a2       	std	Z+37, r1	; 0x25
    23ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ee:	98 89       	ldd	r25, Y+16	; 0x10
    23f0:	fc 01       	movw	r30, r24
    23f2:	17 a2       	std	Z+39, r1	; 0x27
    23f4:	10 a6       	std	Z+40, r1	; 0x28
    23f6:	11 a6       	std	Z+41, r1	; 0x29
    23f8:	12 a6       	std	Z+42, r1	; 0x2a
    23fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fc:	98 89       	ldd	r25, Y+16	; 0x10
    23fe:	fc 01       	movw	r30, r24
    2400:	13 a6       	std	Z+43, r1	; 0x2b
    2402:	4a 85       	ldd	r20, Y+10	; 0x0a
    2404:	5b 85       	ldd	r21, Y+11	; 0x0b
    2406:	2c 81       	ldd	r18, Y+4	; 0x04
    2408:	3d 81       	ldd	r19, Y+5	; 0x05
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	b9 01       	movw	r22, r18
    2410:	0e 94 2f 03 	call	0x65e	; 0x65e <pxPortInitialiseStack>
    2414:	9c 01       	movw	r18, r24
    2416:	8f 85       	ldd	r24, Y+15	; 0x0f
    2418:	98 89       	ldd	r25, Y+16	; 0x10
    241a:	fc 01       	movw	r30, r24
    241c:	31 83       	std	Z+1, r19	; 0x01
    241e:	20 83       	st	Z, r18
    2420:	8d 85       	ldd	r24, Y+13	; 0x0d
    2422:	9e 85       	ldd	r25, Y+14	; 0x0e
    2424:	89 2b       	or	r24, r25
    2426:	39 f0       	breq	.+14     	; 0x2436 <prvInitialiseNewTask+0x19c>
    2428:	8d 85       	ldd	r24, Y+13	; 0x0d
    242a:	9e 85       	ldd	r25, Y+14	; 0x0e
    242c:	2f 85       	ldd	r18, Y+15	; 0x0f
    242e:	38 89       	ldd	r19, Y+16	; 0x10
    2430:	fc 01       	movw	r30, r24
    2432:	31 83       	std	Z+1, r19	; 0x01
    2434:	20 83       	st	Z, r18
    2436:	00 00       	nop
    2438:	62 96       	adiw	r28, 0x12	; 18
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	cf 90       	pop	r12
    2452:	bf 90       	pop	r11
    2454:	af 90       	pop	r10
    2456:	08 95       	ret

00002458 <prvAddNewTaskToReadyList>:
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	1f 92       	push	r1
    245e:	1f 92       	push	r1
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	0f 92       	push	r0
    246e:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <uxCurrentNumberOfTasks>
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <uxCurrentNumberOfTasks>
    2478:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    247c:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2480:	89 2b       	or	r24, r25
    2482:	61 f4       	brne	.+24     	; 0x249c <prvAddNewTaskToReadyList+0x44>
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	90 93 b1 08 	sts	0x08B1, r25	; 0x8008b1 <__data_end+0x1>
    248c:	80 93 b0 08 	sts	0x08B0, r24	; 0x8008b0 <__data_end>
    2490:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <uxCurrentNumberOfTasks>
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	c1 f4       	brne	.+48     	; 0x24c8 <prvAddNewTaskToReadyList+0x70>
    2498:	65 d4       	rcall	.+2250   	; 0x2d64 <prvInitialiseTaskLists>
    249a:	16 c0       	rjmp	.+44     	; 0x24c8 <prvAddNewTaskToReadyList+0x70>
    249c:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <xSchedulerRunning>
    24a0:	88 23       	and	r24, r24
    24a2:	91 f4       	brne	.+36     	; 0x24c8 <prvAddNewTaskToReadyList+0x70>
    24a4:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    24a8:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    24ac:	fc 01       	movw	r30, r24
    24ae:	26 89       	ldd	r18, Z+22	; 0x16
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	fc 01       	movw	r30, r24
    24b6:	86 89       	ldd	r24, Z+22	; 0x16
    24b8:	82 17       	cp	r24, r18
    24ba:	30 f0       	brcs	.+12     	; 0x24c8 <prvAddNewTaskToReadyList+0x70>
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	90 93 b1 08 	sts	0x08B1, r25	; 0x8008b1 <__data_end+0x1>
    24c4:	80 93 b0 08 	sts	0x08B0, r24	; 0x8008b0 <__data_end>
    24c8:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <uxTaskNumber>
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <uxTaskNumber>
    24d2:	20 91 10 09 	lds	r18, 0x0910	; 0x800910 <uxTaskNumber>
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	fc 01       	movw	r30, r24
    24dc:	21 a3       	std	Z+33, r18	; 0x21
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	fc 01       	movw	r30, r24
    24e4:	96 89       	ldd	r25, Z+22	; 0x16
    24e6:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    24ea:	89 17       	cp	r24, r25
    24ec:	30 f4       	brcc	.+12     	; 0x24fa <prvAddNewTaskToReadyList+0xa2>
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	fc 01       	movw	r30, r24
    24f4:	86 89       	ldd	r24, Z+22	; 0x16
    24f6:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	9a 81       	ldd	r25, Y+2	; 0x02
    24fe:	ac 01       	movw	r20, r24
    2500:	4e 5f       	subi	r20, 0xFE	; 254
    2502:	5f 4f       	sbci	r21, 0xFF	; 255
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	9a 81       	ldd	r25, Y+2	; 0x02
    2508:	fc 01       	movw	r30, r24
    250a:	86 89       	ldd	r24, Z+22	; 0x16
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	c9 01       	movw	r24, r18
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	82 0f       	add	r24, r18
    2520:	93 1f       	adc	r25, r19
    2522:	8e 54       	subi	r24, 0x4E	; 78
    2524:	97 4f       	sbci	r25, 0xF7	; 247
    2526:	ba 01       	movw	r22, r20
    2528:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    252c:	0f 90       	pop	r0
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <xSchedulerRunning>
    2534:	88 23       	and	r24, r24
    2536:	71 f0       	breq	.+28     	; 0x2554 <prvAddNewTaskToReadyList+0xfc>
    2538:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    253c:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2540:	fc 01       	movw	r30, r24
    2542:	26 89       	ldd	r18, Z+22	; 0x16
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	fc 01       	movw	r30, r24
    254a:	86 89       	ldd	r24, Z+22	; 0x16
    254c:	28 17       	cp	r18, r24
    254e:	10 f4       	brcc	.+4      	; 0x2554 <prvAddNewTaskToReadyList+0xfc>
    2550:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    2554:	00 00       	nop
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	08 95       	ret

00002560 <vTaskDelay>:
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	00 d0       	rcall	.+0      	; 0x2566 <vTaskDelay+0x6>
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	9b 83       	std	Y+3, r25	; 0x03
    256c:	8a 83       	std	Y+2, r24	; 0x02
    256e:	19 82       	std	Y+1, r1	; 0x01
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	89 2b       	or	r24, r25
    2576:	41 f0       	breq	.+16     	; 0x2588 <vTaskDelay+0x28>
    2578:	56 d0       	rcall	.+172    	; 0x2626 <vTaskSuspendAll>
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	0e 94 30 1c 	call	0x3860	; 0x3860 <prvAddCurrentTaskToDelayedList>
    2584:	5d d0       	rcall	.+186    	; 0x2640 <xTaskResumeAll>
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	88 23       	and	r24, r24
    258c:	11 f4       	brne	.+4      	; 0x2592 <vTaskDelay+0x32>
    258e:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    2592:	00 00       	nop
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	08 95       	ret

000025a0 <vTaskStartScheduler>:
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	1f 92       	push	r1
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	0f 2e       	mov	r0, r31
    25b2:	f3 e1       	ldi	r31, 0x13	; 19
    25b4:	ef 2e       	mov	r14, r31
    25b6:	f9 e0       	ldi	r31, 0x09	; 9
    25b8:	ff 2e       	mov	r15, r31
    25ba:	f0 2d       	mov	r31, r0
    25bc:	00 e0       	ldi	r16, 0x00	; 0
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 ec       	ldi	r20, 0xC0	; 192
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	61 e2       	ldi	r22, 0x21	; 33
    25c8:	72 e0       	ldi	r23, 0x02	; 2
    25ca:	8d ec       	ldi	r24, 0xCD	; 205
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	f7 dd       	rcall	.-1042   	; 0x21be <xTaskCreate>
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	19 f4       	brne	.+6      	; 0x25de <vTaskStartScheduler+0x3e>
    25d8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTimerCreateTimerTask>
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	c9 f4       	brne	.+50     	; 0x2616 <vTaskStartScheduler+0x76>
    25e4:	f8 94       	cli
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	9f ef       	ldi	r25, 0xFF	; 255
    25ea:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <xNextTaskUnblockTime+0x1>
    25ee:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <xNextTaskUnblockTime>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <xSchedulerRunning>
    25f8:	10 92 0a 09 	sts	0x090A, r1	; 0x80090a <xTickCount+0x1>
    25fc:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <xTickCount>
    2600:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2604:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2608:	fc 01       	movw	r30, r24
    260a:	85 a1       	ldd	r24, Z+37	; 0x25
    260c:	96 a1       	ldd	r25, Z+38	; 0x26
    260e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <task_switch_in>
    2612:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <xPortStartScheduler>
    2616:	00 00       	nop
    2618:	0f 90       	pop	r0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	08 95       	ret

00002626 <vTaskSuspendAll>:
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <uxSchedulerSuspended>
    2638:	00 00       	nop
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <xTaskResumeAll>:
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	00 d0       	rcall	.+0      	; 0x2646 <xTaskResumeAll+0x6>
    2646:	1f 92       	push	r1
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	1a 82       	std	Y+2, r1	; 0x02
    264e:	19 82       	std	Y+1, r1	; 0x01
    2650:	1b 82       	std	Y+3, r1	; 0x03
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	0f 92       	push	r0
    2658:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    265c:	81 50       	subi	r24, 0x01	; 1
    265e:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <uxSchedulerSuspended>
    2662:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    2666:	88 23       	and	r24, r24
    2668:	09 f0       	breq	.+2      	; 0x266c <xTaskResumeAll+0x2c>
    266a:	75 c0       	rjmp	.+234    	; 0x2756 <xTaskResumeAll+0x116>
    266c:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <uxCurrentNumberOfTasks>
    2670:	88 23       	and	r24, r24
    2672:	09 f4       	brne	.+2      	; 0x2676 <xTaskResumeAll+0x36>
    2674:	70 c0       	rjmp	.+224    	; 0x2756 <xTaskResumeAll+0x116>
    2676:	49 c0       	rjmp	.+146    	; 0x270a <xTaskResumeAll+0xca>
    2678:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <xPendingReadyList+0x5>
    267c:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <xPendingReadyList+0x6>
    2680:	fc 01       	movw	r30, r24
    2682:	86 81       	ldd	r24, Z+6	; 0x06
    2684:	97 81       	ldd	r25, Z+7	; 0x07
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	0c 96       	adiw	r24, 0x0c	; 12
    2690:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	02 96       	adiw	r24, 0x02	; 2
    269a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	fc 01       	movw	r30, r24
    26a4:	96 89       	ldd	r25, Z+22	; 0x16
    26a6:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    26aa:	89 17       	cp	r24, r25
    26ac:	30 f4       	brcc	.+12     	; 0x26ba <xTaskResumeAll+0x7a>
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	fc 01       	movw	r30, r24
    26b4:	86 89       	ldd	r24, Z+22	; 0x16
    26b6:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	ac 01       	movw	r20, r24
    26c0:	4e 5f       	subi	r20, 0xFE	; 254
    26c2:	5f 4f       	sbci	r21, 0xFF	; 255
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	fc 01       	movw	r30, r24
    26ca:	86 89       	ldd	r24, Z+22	; 0x16
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	c9 01       	movw	r24, r18
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	82 0f       	add	r24, r18
    26e0:	93 1f       	adc	r25, r19
    26e2:	8e 54       	subi	r24, 0x4E	; 78
    26e4:	97 4f       	sbci	r25, 0xF7	; 247
    26e6:	ba 01       	movw	r22, r20
    26e8:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	fc 01       	movw	r30, r24
    26f2:	26 89       	ldd	r18, Z+22	; 0x16
    26f4:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    26f8:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    26fc:	fc 01       	movw	r30, r24
    26fe:	86 89       	ldd	r24, Z+22	; 0x16
    2700:	28 17       	cp	r18, r24
    2702:	18 f0       	brcs	.+6      	; 0x270a <xTaskResumeAll+0xca>
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <xYieldPending>
    270a:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <xPendingReadyList>
    270e:	88 23       	and	r24, r24
    2710:	09 f0       	breq	.+2      	; 0x2714 <xTaskResumeAll+0xd4>
    2712:	b2 cf       	rjmp	.-156    	; 0x2678 <xTaskResumeAll+0x38>
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	89 2b       	or	r24, r25
    271a:	09 f0       	breq	.+2      	; 0x271e <xTaskResumeAll+0xde>
    271c:	af d3       	rcall	.+1886   	; 0x2e7c <prvResetNextTaskUnblockTime>
    271e:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <uxPendedTicks>
    2722:	8c 83       	std	Y+4, r24	; 0x04
    2724:	8c 81       	ldd	r24, Y+4	; 0x04
    2726:	88 23       	and	r24, r24
    2728:	71 f0       	breq	.+28     	; 0x2746 <xTaskResumeAll+0x106>
    272a:	37 d0       	rcall	.+110    	; 0x279a <xTaskIncrementTick>
    272c:	88 23       	and	r24, r24
    272e:	19 f0       	breq	.+6      	; 0x2736 <xTaskResumeAll+0xf6>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <xYieldPending>
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	81 50       	subi	r24, 0x01	; 1
    273a:	8c 83       	std	Y+4, r24	; 0x04
    273c:	8c 81       	ldd	r24, Y+4	; 0x04
    273e:	88 23       	and	r24, r24
    2740:	a1 f7       	brne	.-24     	; 0x272a <xTaskResumeAll+0xea>
    2742:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <uxPendedTicks>
    2746:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <xYieldPending>
    274a:	88 23       	and	r24, r24
    274c:	21 f0       	breq	.+8      	; 0x2756 <xTaskResumeAll+0x116>
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	8b 83       	std	Y+3, r24	; 0x03
    2752:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    2756:	0f 90       	pop	r0
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	08 95       	ret

0000276a <xTaskGetTickCount>:
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	1f 92       	push	r1
    2770:	1f 92       	push	r1
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	0f 92       	push	r0
    277c:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <xTickCount>
    2780:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <xTickCount+0x1>
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	0f 90       	pop	r0
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <xTaskIncrementTick>:
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	29 97       	sbiw	r28, 0x09	; 9
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	19 82       	std	Y+1, r1	; 0x01
    27b0:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    27b4:	88 23       	and	r24, r24
    27b6:	09 f0       	breq	.+2      	; 0x27ba <xTaskIncrementTick+0x20>
    27b8:	c7 c0       	rjmp	.+398    	; 0x2948 <xTaskIncrementTick+0x1ae>
    27ba:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <xTickCount>
    27be:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <xTickCount+0x1>
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	9b 83       	std	Y+3, r25	; 0x03
    27c6:	8a 83       	std	Y+2, r24	; 0x02
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	9b 81       	ldd	r25, Y+3	; 0x03
    27cc:	90 93 0a 09 	sts	0x090A, r25	; 0x80090a <xTickCount+0x1>
    27d0:	80 93 09 09 	sts	0x0909, r24	; 0x800909 <xTickCount>
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	89 2b       	or	r24, r25
    27da:	d1 f4       	brne	.+52     	; 0x2810 <xTaskIncrementTick+0x76>
    27dc:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <pxDelayedTaskList>
    27e0:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <pxDelayedTaskList+0x1>
    27e4:	9d 83       	std	Y+5, r25	; 0x05
    27e6:	8c 83       	std	Y+4, r24	; 0x04
    27e8:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <pxOverflowDelayedTaskList>
    27ec:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <pxOverflowDelayedTaskList+0x1>
    27f0:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <pxDelayedTaskList+0x1>
    27f4:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <pxDelayedTaskList>
    27f8:	8c 81       	ldd	r24, Y+4	; 0x04
    27fa:	9d 81       	ldd	r25, Y+5	; 0x05
    27fc:	90 93 eb 08 	sts	0x08EB, r25	; 0x8008eb <pxOverflowDelayedTaskList+0x1>
    2800:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <pxOverflowDelayedTaskList>
    2804:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <xNumOfOverflows>
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	80 93 0f 09 	sts	0x090F, r24	; 0x80090f <xNumOfOverflows>
    280e:	36 d3       	rcall	.+1644   	; 0x2e7c <prvResetNextTaskUnblockTime>
    2810:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <xNextTaskUnblockTime>
    2814:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <xNextTaskUnblockTime+0x1>
    2818:	2a 81       	ldd	r18, Y+2	; 0x02
    281a:	3b 81       	ldd	r19, Y+3	; 0x03
    281c:	28 17       	cp	r18, r24
    281e:	39 07       	cpc	r19, r25
    2820:	08 f4       	brcc	.+2      	; 0x2824 <xTaskIncrementTick+0x8a>
    2822:	78 c0       	rjmp	.+240    	; 0x2914 <xTaskIncrementTick+0x17a>
    2824:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <pxDelayedTaskList>
    2828:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <pxDelayedTaskList+0x1>
    282c:	fc 01       	movw	r30, r24
    282e:	80 81       	ld	r24, Z
    2830:	88 23       	and	r24, r24
    2832:	39 f4       	brne	.+14     	; 0x2842 <xTaskIncrementTick+0xa8>
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <xNextTaskUnblockTime+0x1>
    283c:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <xNextTaskUnblockTime>
    2840:	69 c0       	rjmp	.+210    	; 0x2914 <xTaskIncrementTick+0x17a>
    2842:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <pxDelayedTaskList>
    2846:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <pxDelayedTaskList+0x1>
    284a:	fc 01       	movw	r30, r24
    284c:	85 81       	ldd	r24, Z+5	; 0x05
    284e:	96 81       	ldd	r25, Z+6	; 0x06
    2850:	fc 01       	movw	r30, r24
    2852:	86 81       	ldd	r24, Z+6	; 0x06
    2854:	97 81       	ldd	r25, Z+7	; 0x07
    2856:	9f 83       	std	Y+7, r25	; 0x07
    2858:	8e 83       	std	Y+6, r24	; 0x06
    285a:	8e 81       	ldd	r24, Y+6	; 0x06
    285c:	9f 81       	ldd	r25, Y+7	; 0x07
    285e:	fc 01       	movw	r30, r24
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	99 87       	std	Y+9, r25	; 0x09
    2866:	88 87       	std	Y+8, r24	; 0x08
    2868:	2a 81       	ldd	r18, Y+2	; 0x02
    286a:	3b 81       	ldd	r19, Y+3	; 0x03
    286c:	88 85       	ldd	r24, Y+8	; 0x08
    286e:	99 85       	ldd	r25, Y+9	; 0x09
    2870:	28 17       	cp	r18, r24
    2872:	39 07       	cpc	r19, r25
    2874:	38 f4       	brcc	.+14     	; 0x2884 <xTaskIncrementTick+0xea>
    2876:	88 85       	ldd	r24, Y+8	; 0x08
    2878:	99 85       	ldd	r25, Y+9	; 0x09
    287a:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <xNextTaskUnblockTime+0x1>
    287e:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <xNextTaskUnblockTime>
    2882:	48 c0       	rjmp	.+144    	; 0x2914 <xTaskIncrementTick+0x17a>
    2884:	8e 81       	ldd	r24, Y+6	; 0x06
    2886:	9f 81       	ldd	r25, Y+7	; 0x07
    2888:	02 96       	adiw	r24, 0x02	; 2
    288a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    288e:	8e 81       	ldd	r24, Y+6	; 0x06
    2890:	9f 81       	ldd	r25, Y+7	; 0x07
    2892:	fc 01       	movw	r30, r24
    2894:	84 89       	ldd	r24, Z+20	; 0x14
    2896:	95 89       	ldd	r25, Z+21	; 0x15
    2898:	89 2b       	or	r24, r25
    289a:	29 f0       	breq	.+10     	; 0x28a6 <xTaskIncrementTick+0x10c>
    289c:	8e 81       	ldd	r24, Y+6	; 0x06
    289e:	9f 81       	ldd	r25, Y+7	; 0x07
    28a0:	0c 96       	adiw	r24, 0x0c	; 12
    28a2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    28a6:	8e 81       	ldd	r24, Y+6	; 0x06
    28a8:	9f 81       	ldd	r25, Y+7	; 0x07
    28aa:	fc 01       	movw	r30, r24
    28ac:	96 89       	ldd	r25, Z+22	; 0x16
    28ae:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    28b2:	89 17       	cp	r24, r25
    28b4:	30 f4       	brcc	.+12     	; 0x28c2 <xTaskIncrementTick+0x128>
    28b6:	8e 81       	ldd	r24, Y+6	; 0x06
    28b8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ba:	fc 01       	movw	r30, r24
    28bc:	86 89       	ldd	r24, Z+22	; 0x16
    28be:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    28c2:	8e 81       	ldd	r24, Y+6	; 0x06
    28c4:	9f 81       	ldd	r25, Y+7	; 0x07
    28c6:	ac 01       	movw	r20, r24
    28c8:	4e 5f       	subi	r20, 0xFE	; 254
    28ca:	5f 4f       	sbci	r21, 0xFF	; 255
    28cc:	8e 81       	ldd	r24, Y+6	; 0x06
    28ce:	9f 81       	ldd	r25, Y+7	; 0x07
    28d0:	fc 01       	movw	r30, r24
    28d2:	86 89       	ldd	r24, Z+22	; 0x16
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	c9 01       	movw	r24, r18
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	8e 54       	subi	r24, 0x4E	; 78
    28ec:	97 4f       	sbci	r25, 0xF7	; 247
    28ee:	ba 01       	movw	r22, r20
    28f0:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    28f4:	8e 81       	ldd	r24, Y+6	; 0x06
    28f6:	9f 81       	ldd	r25, Y+7	; 0x07
    28f8:	fc 01       	movw	r30, r24
    28fa:	26 89       	ldd	r18, Z+22	; 0x16
    28fc:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2900:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2904:	fc 01       	movw	r30, r24
    2906:	86 89       	ldd	r24, Z+22	; 0x16
    2908:	28 17       	cp	r18, r24
    290a:	08 f4       	brcc	.+2      	; 0x290e <xTaskIncrementTick+0x174>
    290c:	8b cf       	rjmp	.-234    	; 0x2824 <xTaskIncrementTick+0x8a>
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	88 cf       	rjmp	.-240    	; 0x2824 <xTaskIncrementTick+0x8a>
    2914:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2918:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    291c:	fc 01       	movw	r30, r24
    291e:	86 89       	ldd	r24, Z+22	; 0x16
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	c9 01       	movw	r24, r18
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	82 0f       	add	r24, r18
    2934:	93 1f       	adc	r25, r19
    2936:	8e 54       	subi	r24, 0x4E	; 78
    2938:	97 4f       	sbci	r25, 0xF7	; 247
    293a:	fc 01       	movw	r30, r24
    293c:	80 81       	ld	r24, Z
    293e:	82 30       	cpi	r24, 0x02	; 2
    2940:	40 f0       	brcs	.+16     	; 0x2952 <xTaskIncrementTick+0x1b8>
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	05 c0       	rjmp	.+10     	; 0x2952 <xTaskIncrementTick+0x1b8>
    2948:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <uxPendedTicks>
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <uxPendedTicks>
    2952:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <xYieldPending>
    2956:	88 23       	and	r24, r24
    2958:	11 f0       	breq	.+4      	; 0x295e <xTaskIncrementTick+0x1c4>
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	29 96       	adiw	r28, 0x09	; 9
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <vTaskSwitchContext>:
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	00 d0       	rcall	.+0      	; 0x2978 <vTaskSwitchContext+0x6>
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    2980:	88 23       	and	r24, r24
    2982:	21 f0       	breq	.+8      	; 0x298c <vTaskSwitchContext+0x1a>
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <xYieldPending>
    298a:	90 c0       	rjmp	.+288    	; 0x2aac <vTaskSwitchContext+0x13a>
    298c:	10 92 0e 09 	sts	0x090E, r1	; 0x80090e <xYieldPending>
    2990:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2994:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2998:	fc 01       	movw	r30, r24
    299a:	85 a1       	ldd	r24, Z+37	; 0x25
    299c:	96 a1       	ldd	r25, Z+38	; 0x26
    299e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <task_switch_out>
    29a2:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    29a6:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    29aa:	fc 01       	movw	r30, r24
    29ac:	20 81       	ld	r18, Z
    29ae:	31 81       	ldd	r19, Z+1	; 0x01
    29b0:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    29b4:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    29b8:	fc 01       	movw	r30, r24
    29ba:	87 89       	ldd	r24, Z+23	; 0x17
    29bc:	90 8d       	ldd	r25, Z+24	; 0x18
    29be:	82 17       	cp	r24, r18
    29c0:	93 07       	cpc	r25, r19
    29c2:	70 f0       	brcs	.+28     	; 0x29e0 <vTaskSwitchContext+0x6e>
    29c4:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    29c8:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    29cc:	9c 01       	movw	r18, r24
    29ce:	27 5e       	subi	r18, 0xE7	; 231
    29d0:	3f 4f       	sbci	r19, 0xFF	; 255
    29d2:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    29d6:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    29da:	b9 01       	movw	r22, r18
    29dc:	0e 94 c4 21 	call	0x4388	; 0x4388 <vApplicationStackOverflowHook>
    29e0:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <vTaskSwitchContext+0x7c>
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	81 50       	subi	r24, 0x01	; 1
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	c9 01       	movw	r24, r18
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	82 0f       	add	r24, r18
    2a04:	93 1f       	adc	r25, r19
    2a06:	8e 54       	subi	r24, 0x4E	; 78
    2a08:	97 4f       	sbci	r25, 0xF7	; 247
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	80 81       	ld	r24, Z
    2a0e:	88 23       	and	r24, r24
    2a10:	59 f3       	breq	.-42     	; 0x29e8 <vTaskSwitchContext+0x76>
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	c9 01       	movw	r24, r18
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	82 0f       	add	r24, r18
    2a28:	93 1f       	adc	r25, r19
    2a2a:	8e 54       	subi	r24, 0x4E	; 78
    2a2c:	97 4f       	sbci	r25, 0xF7	; 247
    2a2e:	9b 83       	std	Y+3, r25	; 0x03
    2a30:	8a 83       	std	Y+2, r24	; 0x02
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	9b 81       	ldd	r25, Y+3	; 0x03
    2a36:	fc 01       	movw	r30, r24
    2a38:	81 81       	ldd	r24, Z+1	; 0x01
    2a3a:	92 81       	ldd	r25, Z+2	; 0x02
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	22 81       	ldd	r18, Z+2	; 0x02
    2a40:	33 81       	ldd	r19, Z+3	; 0x03
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	fc 01       	movw	r30, r24
    2a48:	32 83       	std	Z+2, r19	; 0x02
    2a4a:	21 83       	std	Z+1, r18	; 0x01
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a50:	fc 01       	movw	r30, r24
    2a52:	21 81       	ldd	r18, Z+1	; 0x01
    2a54:	32 81       	ldd	r19, Z+2	; 0x02
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5a:	03 96       	adiw	r24, 0x03	; 3
    2a5c:	28 17       	cp	r18, r24
    2a5e:	39 07       	cpc	r19, r25
    2a60:	69 f4       	brne	.+26     	; 0x2a7c <vTaskSwitchContext+0x10a>
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	9b 81       	ldd	r25, Y+3	; 0x03
    2a66:	fc 01       	movw	r30, r24
    2a68:	81 81       	ldd	r24, Z+1	; 0x01
    2a6a:	92 81       	ldd	r25, Z+2	; 0x02
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	22 81       	ldd	r18, Z+2	; 0x02
    2a70:	33 81       	ldd	r19, Z+3	; 0x03
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	fc 01       	movw	r30, r24
    2a78:	32 83       	std	Z+2, r19	; 0x02
    2a7a:	21 83       	std	Z+1, r18	; 0x01
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	fc 01       	movw	r30, r24
    2a82:	81 81       	ldd	r24, Z+1	; 0x01
    2a84:	92 81       	ldd	r25, Z+2	; 0x02
    2a86:	fc 01       	movw	r30, r24
    2a88:	86 81       	ldd	r24, Z+6	; 0x06
    2a8a:	97 81       	ldd	r25, Z+7	; 0x07
    2a8c:	90 93 b1 08 	sts	0x08B1, r25	; 0x8008b1 <__data_end+0x1>
    2a90:	80 93 b0 08 	sts	0x08B0, r24	; 0x8008b0 <__data_end>
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    2a9a:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2a9e:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	85 a1       	ldd	r24, Z+37	; 0x25
    2aa6:	96 a1       	ldd	r25, Z+38	; 0x26
    2aa8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <task_switch_in>
    2aac:	00 00       	nop
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	08 95       	ret

00002aba <vTaskPlaceOnEventList>:
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <vTaskPlaceOnEventList+0x6>
    2ac0:	1f 92       	push	r1
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	7c 83       	std	Y+4, r23	; 0x04
    2acc:	6b 83       	std	Y+3, r22	; 0x03
    2ace:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2ad2:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2ad6:	9c 01       	movw	r18, r24
    2ad8:	24 5f       	subi	r18, 0xF4	; 244
    2ada:	3f 4f       	sbci	r19, 0xFF	; 255
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	b9 01       	movw	r22, r18
    2ae2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInsert>
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	b9 d6       	rcall	.+3442   	; 0x3860 <prvAddCurrentTaskToDelayedList>
    2aee:	00 00       	nop
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <vTaskPlaceOnEventListRestricted>:
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <vTaskPlaceOnEventListRestricted+0x6>
    2b04:	1f 92       	push	r1
    2b06:	1f 92       	push	r1
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	7c 83       	std	Y+4, r23	; 0x04
    2b12:	6b 83       	std	Y+3, r22	; 0x03
    2b14:	4d 83       	std	Y+5, r20	; 0x05
    2b16:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2b1a:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2b1e:	9c 01       	movw	r18, r24
    2b20:	24 5f       	subi	r18, 0xF4	; 244
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	b9 01       	movw	r22, r18
    2b2a:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	88 23       	and	r24, r24
    2b32:	21 f0       	breq	.+8      	; 0x2b3c <vTaskPlaceOnEventListRestricted+0x3e>
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	9f ef       	ldi	r25, 0xFF	; 255
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	6d 81       	ldd	r22, Y+5	; 0x05
    2b42:	8e d6       	rcall	.+3356   	; 0x3860 <prvAddCurrentTaskToDelayedList>
    2b44:	00 00       	nop
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

00002b56 <xTaskRemoveFromEventList>:
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <xTaskRemoveFromEventList+0x6>
    2b5c:	1f 92       	push	r1
    2b5e:	1f 92       	push	r1
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	9d 83       	std	Y+5, r25	; 0x05
    2b66:	8c 83       	std	Y+4, r24	; 0x04
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	85 81       	ldd	r24, Z+5	; 0x05
    2b70:	96 81       	ldd	r25, Z+6	; 0x06
    2b72:	fc 01       	movw	r30, r24
    2b74:	86 81       	ldd	r24, Z+6	; 0x06
    2b76:	97 81       	ldd	r25, Z+7	; 0x07
    2b78:	9b 83       	std	Y+3, r25	; 0x03
    2b7a:	8a 83       	std	Y+2, r24	; 0x02
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b80:	0c 96       	adiw	r24, 0x0c	; 12
    2b82:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    2b86:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    2b8a:	88 23       	and	r24, r24
    2b8c:	69 f5       	brne	.+90     	; 0x2be8 <xTaskRemoveFromEventList+0x92>
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	9b 81       	ldd	r25, Y+3	; 0x03
    2b92:	02 96       	adiw	r24, 0x02	; 2
    2b94:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	96 89       	ldd	r25, Z+22	; 0x16
    2ba0:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    2ba4:	89 17       	cp	r24, r25
    2ba6:	30 f4       	brcc	.+12     	; 0x2bb4 <xTaskRemoveFromEventList+0x5e>
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bac:	fc 01       	movw	r30, r24
    2bae:	86 89       	ldd	r24, Z+22	; 0x16
    2bb0:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	ac 01       	movw	r20, r24
    2bba:	4e 5f       	subi	r20, 0xFE	; 254
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	86 89       	ldd	r24, Z+22	; 0x16
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	c9 01       	movw	r24, r18
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	82 0f       	add	r24, r18
    2bda:	93 1f       	adc	r25, r19
    2bdc:	8e 54       	subi	r24, 0x4E	; 78
    2bde:	97 4f       	sbci	r25, 0xF7	; 247
    2be0:	ba 01       	movw	r22, r20
    2be2:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    2be6:	08 c0       	rjmp	.+16     	; 0x2bf8 <xTaskRemoveFromEventList+0xa2>
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	9b 81       	ldd	r25, Y+3	; 0x03
    2bec:	0c 96       	adiw	r24, 0x0c	; 12
    2bee:	bc 01       	movw	r22, r24
    2bf0:	8c ee       	ldi	r24, 0xEC	; 236
    2bf2:	98 e0       	ldi	r25, 0x08	; 8
    2bf4:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	26 89       	ldd	r18, Z+22	; 0x16
    2c00:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2c04:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2c08:	fc 01       	movw	r30, r24
    2c0a:	86 89       	ldd	r24, Z+22	; 0x16
    2c0c:	82 17       	cp	r24, r18
    2c0e:	30 f4       	brcc	.+12     	; 0x2c1c <xTaskRemoveFromEventList+0xc6>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <xYieldPending>
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <xTaskRemoveFromEventList+0xc8>
    2c1c:	19 82       	std	Y+1, r1	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	08 95       	ret

00002c30 <vTaskInternalSetTimeOutState>:
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	1f 92       	push	r1
    2c36:	1f 92       	push	r1
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	20 91 0f 09 	lds	r18, 0x090F	; 0x80090f <xNumOfOverflows>
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
    2c4c:	20 91 09 09 	lds	r18, 0x0909	; 0x800909 <xTickCount>
    2c50:	30 91 0a 09 	lds	r19, 0x090A	; 0x80090a <xTickCount+0x1>
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	fc 01       	movw	r30, r24
    2c5a:	32 83       	std	Z+2, r19	; 0x02
    2c5c:	21 83       	std	Z+1, r18	; 0x01
    2c5e:	00 00       	nop
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	08 95       	ret

00002c6a <xTaskCheckForTimeOut>:
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	29 97       	sbiw	r28, 0x09	; 9
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	9f 83       	std	Y+7, r25	; 0x07
    2c80:	8e 83       	std	Y+6, r24	; 0x06
    2c82:	79 87       	std	Y+9, r23	; 0x09
    2c84:	68 87       	std	Y+8, r22	; 0x08
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	0f 92       	push	r0
    2c8c:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <xTickCount>
    2c90:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <xTickCount+0x1>
    2c94:	9b 83       	std	Y+3, r25	; 0x03
    2c96:	8a 83       	std	Y+2, r24	; 0x02
    2c98:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	81 81       	ldd	r24, Z+1	; 0x01
    2ca0:	92 81       	ldd	r25, Z+2	; 0x02
    2ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ca6:	a9 01       	movw	r20, r18
    2ca8:	48 1b       	sub	r20, r24
    2caa:	59 0b       	sbc	r21, r25
    2cac:	ca 01       	movw	r24, r20
    2cae:	9d 83       	std	Y+5, r25	; 0x05
    2cb0:	8c 83       	std	Y+4, r24	; 0x04
    2cb2:	88 85       	ldd	r24, Y+8	; 0x08
    2cb4:	99 85       	ldd	r25, Y+9	; 0x09
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	80 81       	ld	r24, Z
    2cba:	91 81       	ldd	r25, Z+1	; 0x01
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	11 f4       	brne	.+4      	; 0x2cc4 <xTaskCheckForTimeOut+0x5a>
    2cc0:	19 82       	std	Y+1, r1	; 0x01
    2cc2:	39 c0       	rjmp	.+114    	; 0x2d36 <xTaskCheckForTimeOut+0xcc>
    2cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc8:	fc 01       	movw	r30, r24
    2cca:	90 81       	ld	r25, Z
    2ccc:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <xNumOfOverflows>
    2cd0:	98 17       	cp	r25, r24
    2cd2:	69 f0       	breq	.+26     	; 0x2cee <xTaskCheckForTimeOut+0x84>
    2cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cd8:	fc 01       	movw	r30, r24
    2cda:	21 81       	ldd	r18, Z+1	; 0x01
    2cdc:	32 81       	ldd	r19, Z+2	; 0x02
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce2:	82 17       	cp	r24, r18
    2ce4:	93 07       	cpc	r25, r19
    2ce6:	18 f0       	brcs	.+6      	; 0x2cee <xTaskCheckForTimeOut+0x84>
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	24 c0       	rjmp	.+72     	; 0x2d36 <xTaskCheckForTimeOut+0xcc>
    2cee:	88 85       	ldd	r24, Y+8	; 0x08
    2cf0:	99 85       	ldd	r25, Y+9	; 0x09
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	20 81       	ld	r18, Z
    2cf6:	31 81       	ldd	r19, Z+1	; 0x01
    2cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfc:	82 17       	cp	r24, r18
    2cfe:	93 07       	cpc	r25, r19
    2d00:	98 f4       	brcc	.+38     	; 0x2d28 <xTaskCheckForTimeOut+0xbe>
    2d02:	88 85       	ldd	r24, Y+8	; 0x08
    2d04:	99 85       	ldd	r25, Y+9	; 0x09
    2d06:	fc 01       	movw	r30, r24
    2d08:	20 81       	ld	r18, Z
    2d0a:	31 81       	ldd	r19, Z+1	; 0x01
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d10:	28 1b       	sub	r18, r24
    2d12:	39 0b       	sbc	r19, r25
    2d14:	88 85       	ldd	r24, Y+8	; 0x08
    2d16:	99 85       	ldd	r25, Y+9	; 0x09
    2d18:	fc 01       	movw	r30, r24
    2d1a:	31 83       	std	Z+1, r19	; 0x01
    2d1c:	20 83       	st	Z, r18
    2d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d20:	9f 81       	ldd	r25, Y+7	; 0x07
    2d22:	86 df       	rcall	.-244    	; 0x2c30 <vTaskInternalSetTimeOutState>
    2d24:	19 82       	std	Y+1, r1	; 0x01
    2d26:	07 c0       	rjmp	.+14     	; 0x2d36 <xTaskCheckForTimeOut+0xcc>
    2d28:	88 85       	ldd	r24, Y+8	; 0x08
    2d2a:	99 85       	ldd	r25, Y+9	; 0x09
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	11 82       	std	Z+1, r1	; 0x01
    2d30:	10 82       	st	Z, r1
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	0f 90       	pop	r0
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	29 96       	adiw	r28, 0x09	; 9
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	08 95       	ret

00002d4e <vTaskMissedYield>:
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <xYieldPending>
    2d5c:	00 00       	nop
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	08 95       	ret

00002d64 <prvInitialiseTaskLists>:
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	1f 92       	push	r1
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	19 82       	std	Y+1, r1	; 0x01
    2d70:	13 c0       	rjmp	.+38     	; 0x2d98 <prvInitialiseTaskLists+0x34>
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	c9 01       	movw	r24, r18
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	8e 54       	subi	r24, 0x4E	; 78
    2d8c:	97 4f       	sbci	r25, 0xF7	; 247
    2d8e:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	8f 5f       	subi	r24, 0xFF	; 255
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	84 30       	cpi	r24, 0x04	; 4
    2d9c:	50 f3       	brcs	.-44     	; 0x2d72 <prvInitialiseTaskLists+0xe>
    2d9e:	86 ed       	ldi	r24, 0xD6	; 214
    2da0:	98 e0       	ldi	r25, 0x08	; 8
    2da2:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
    2da6:	8f ed       	ldi	r24, 0xDF	; 223
    2da8:	98 e0       	ldi	r25, 0x08	; 8
    2daa:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
    2dae:	8c ee       	ldi	r24, 0xEC	; 236
    2db0:	98 e0       	ldi	r25, 0x08	; 8
    2db2:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
    2db6:	85 ef       	ldi	r24, 0xF5	; 245
    2db8:	98 e0       	ldi	r25, 0x08	; 8
    2dba:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
    2dbe:	8f ef       	ldi	r24, 0xFF	; 255
    2dc0:	98 e0       	ldi	r25, 0x08	; 8
    2dc2:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
    2dc6:	86 ed       	ldi	r24, 0xD6	; 214
    2dc8:	98 e0       	ldi	r25, 0x08	; 8
    2dca:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <pxDelayedTaskList+0x1>
    2dce:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <pxDelayedTaskList>
    2dd2:	8f ed       	ldi	r24, 0xDF	; 223
    2dd4:	98 e0       	ldi	r25, 0x08	; 8
    2dd6:	90 93 eb 08 	sts	0x08EB, r25	; 0x8008eb <pxOverflowDelayedTaskList+0x1>
    2dda:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <pxOverflowDelayedTaskList>
    2dde:	00 00       	nop
    2de0:	0f 90       	pop	r0
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	08 95       	ret

00002de8 <prvCheckTasksWaitingTermination>:
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	1f 92       	push	r1
    2dee:	1f 92       	push	r1
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	20 c0       	rjmp	.+64     	; 0x2e36 <prvCheckTasksWaitingTermination+0x4e>
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	0f 92       	push	r0
    2dfc:	80 91 fa 08 	lds	r24, 0x08FA	; 0x8008fa <xTasksWaitingTermination+0x5>
    2e00:	90 91 fb 08 	lds	r25, 0x08FB	; 0x8008fb <xTasksWaitingTermination+0x6>
    2e04:	fc 01       	movw	r30, r24
    2e06:	86 81       	ldd	r24, Z+6	; 0x06
    2e08:	97 81       	ldd	r25, Z+7	; 0x07
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	02 96       	adiw	r24, 0x02	; 2
    2e14:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    2e18:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <uxCurrentNumberOfTasks>
    2e1c:	81 50       	subi	r24, 0x01	; 1
    2e1e:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <uxCurrentNumberOfTasks>
    2e22:	80 91 fe 08 	lds	r24, 0x08FE	; 0x8008fe <uxDeletedTasksWaitingCleanUp>
    2e26:	81 50       	subi	r24, 0x01	; 1
    2e28:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <uxDeletedTasksWaitingCleanUp>
    2e2c:	0f 90       	pop	r0
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	0a d0       	rcall	.+20     	; 0x2e4a <prvDeleteTCB>
    2e36:	80 91 fe 08 	lds	r24, 0x08FE	; 0x8008fe <uxDeletedTasksWaitingCleanUp>
    2e3a:	88 23       	and	r24, r24
    2e3c:	e1 f6       	brne	.-72     	; 0x2df6 <prvCheckTasksWaitingTermination+0xe>
    2e3e:	00 00       	nop
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <prvDeleteTCB>:
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	1f 92       	push	r1
    2e50:	1f 92       	push	r1
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	fc 01       	movw	r30, r24
    2e60:	87 89       	ldd	r24, Z+23	; 0x17
    2e62:	90 8d       	ldd	r25, Z+24	; 0x18
    2e64:	0e 94 ae 01 	call	0x35c	; 0x35c <vPortFree>
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6c:	0e 94 ae 01 	call	0x35c	; 0x35c <vPortFree>
    2e70:	00 00       	nop
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	08 95       	ret

00002e7c <prvResetNextTaskUnblockTime>:
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	1f 92       	push	r1
    2e82:	1f 92       	push	r1
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <pxDelayedTaskList>
    2e8c:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <pxDelayedTaskList+0x1>
    2e90:	fc 01       	movw	r30, r24
    2e92:	80 81       	ld	r24, Z
    2e94:	88 23       	and	r24, r24
    2e96:	39 f4       	brne	.+14     	; 0x2ea6 <prvResetNextTaskUnblockTime+0x2a>
    2e98:	8f ef       	ldi	r24, 0xFF	; 255
    2e9a:	9f ef       	ldi	r25, 0xFF	; 255
    2e9c:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <xNextTaskUnblockTime+0x1>
    2ea0:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <xNextTaskUnblockTime>
    2ea4:	15 c0       	rjmp	.+42     	; 0x2ed0 <prvResetNextTaskUnblockTime+0x54>
    2ea6:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <pxDelayedTaskList>
    2eaa:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <pxDelayedTaskList+0x1>
    2eae:	fc 01       	movw	r30, r24
    2eb0:	85 81       	ldd	r24, Z+5	; 0x05
    2eb2:	96 81       	ldd	r25, Z+6	; 0x06
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	86 81       	ldd	r24, Z+6	; 0x06
    2eb8:	97 81       	ldd	r25, Z+7	; 0x07
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <xNextTaskUnblockTime+0x1>
    2ecc:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <xNextTaskUnblockTime>
    2ed0:	00 00       	nop
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	08 95       	ret

00002edc <xTaskGetCurrentTaskHandle>:
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	1f 92       	push	r1
    2ee2:	1f 92       	push	r1
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2eec:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	08 95       	ret

00002f02 <xTaskGetSchedulerState>:
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	1f 92       	push	r1
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <xSchedulerRunning>
    2f10:	88 23       	and	r24, r24
    2f12:	19 f4       	brne	.+6      	; 0x2f1a <xTaskGetSchedulerState+0x18>
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	08 c0       	rjmp	.+16     	; 0x2f2a <xTaskGetSchedulerState+0x28>
    2f1a:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    2f1e:	88 23       	and	r24, r24
    2f20:	19 f4       	brne	.+6      	; 0x2f28 <xTaskGetSchedulerState+0x26>
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	01 c0       	rjmp	.+2      	; 0x2f2a <xTaskGetSchedulerState+0x28>
    2f28:	19 82       	std	Y+1, r1	; 0x01
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	0f 90       	pop	r0
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	08 95       	ret

00002f34 <xTaskPriorityInherit>:
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <xTaskPriorityInherit+0x6>
    2f3a:	1f 92       	push	r1
    2f3c:	1f 92       	push	r1
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	9d 83       	std	Y+5, r25	; 0x05
    2f44:	8c 83       	std	Y+4, r24	; 0x04
    2f46:	8c 81       	ldd	r24, Y+4	; 0x04
    2f48:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4a:	9b 83       	std	Y+3, r25	; 0x03
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
    2f4e:	19 82       	std	Y+1, r1	; 0x01
    2f50:	8c 81       	ldd	r24, Y+4	; 0x04
    2f52:	9d 81       	ldd	r25, Y+5	; 0x05
    2f54:	89 2b       	or	r24, r25
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <xTaskPriorityInherit+0x26>
    2f58:	90 c0       	rjmp	.+288    	; 0x307a <xTaskPriorityInherit+0x146>
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5e:	fc 01       	movw	r30, r24
    2f60:	26 89       	ldd	r18, Z+22	; 0x16
    2f62:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2f66:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	86 89       	ldd	r24, Z+22	; 0x16
    2f6e:	28 17       	cp	r18, r24
    2f70:	08 f0       	brcs	.+2      	; 0x2f74 <xTaskPriorityInherit+0x40>
    2f72:	75 c0       	rjmp	.+234    	; 0x305e <xTaskPriorityInherit+0x12a>
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	fc 01       	movw	r30, r24
    2f7a:	84 85       	ldd	r24, Z+12	; 0x0c
    2f7c:	95 85       	ldd	r25, Z+13	; 0x0d
    2f7e:	99 23       	and	r25, r25
    2f80:	8c f0       	brlt	.+34     	; 0x2fa4 <xTaskPriorityInherit+0x70>
    2f82:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2f86:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	86 89       	ldd	r24, Z+22	; 0x16
    2f8e:	88 2f       	mov	r24, r24
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	24 e0       	ldi	r18, 0x04	; 4
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	28 1b       	sub	r18, r24
    2f98:	39 0b       	sbc	r19, r25
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	35 87       	std	Z+13, r19	; 0x0d
    2fa2:	24 87       	std	Z+12, r18	; 0x0c
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	fc 01       	movw	r30, r24
    2faa:	42 85       	ldd	r20, Z+10	; 0x0a
    2fac:	53 85       	ldd	r21, Z+11	; 0x0b
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	86 89       	ldd	r24, Z+22	; 0x16
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	c9 01       	movw	r24, r18
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	82 0f       	add	r24, r18
    2fca:	93 1f       	adc	r25, r19
    2fcc:	8e 54       	subi	r24, 0x4E	; 78
    2fce:	97 4f       	sbci	r25, 0xF7	; 247
    2fd0:	48 17       	cp	r20, r24
    2fd2:	59 07       	cpc	r21, r25
    2fd4:	b9 f5       	brne	.+110    	; 0x3044 <xTaskPriorityInherit+0x110>
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	02 96       	adiw	r24, 0x02	; 2
    2fdc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    2fe0:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    2fe4:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    2fe8:	fc 01       	movw	r30, r24
    2fea:	26 89       	ldd	r18, Z+22	; 0x16
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	26 8b       	std	Z+22, r18	; 0x16
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	96 89       	ldd	r25, Z+22	; 0x16
    2ffc:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    3000:	89 17       	cp	r24, r25
    3002:	30 f4       	brcc	.+12     	; 0x3010 <xTaskPriorityInherit+0xdc>
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	9b 81       	ldd	r25, Y+3	; 0x03
    3008:	fc 01       	movw	r30, r24
    300a:	86 89       	ldd	r24, Z+22	; 0x16
    300c:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	9b 81       	ldd	r25, Y+3	; 0x03
    3014:	ac 01       	movw	r20, r24
    3016:	4e 5f       	subi	r20, 0xFE	; 254
    3018:	5f 4f       	sbci	r21, 0xFF	; 255
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	9b 81       	ldd	r25, Y+3	; 0x03
    301e:	fc 01       	movw	r30, r24
    3020:	86 89       	ldd	r24, Z+22	; 0x16
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	c9 01       	movw	r24, r18
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	82 0f       	add	r24, r18
    3036:	93 1f       	adc	r25, r19
    3038:	8e 54       	subi	r24, 0x4E	; 78
    303a:	97 4f       	sbci	r25, 0xF7	; 247
    303c:	ba 01       	movw	r22, r20
    303e:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    3042:	0a c0       	rjmp	.+20     	; 0x3058 <xTaskPriorityInherit+0x124>
    3044:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    3048:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    304c:	fc 01       	movw	r30, r24
    304e:	26 89       	ldd	r18, Z+22	; 0x16
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	9b 81       	ldd	r25, Y+3	; 0x03
    3054:	fc 01       	movw	r30, r24
    3056:	26 8b       	std	Z+22, r18	; 0x16
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	89 83       	std	Y+1, r24	; 0x01
    305c:	0e c0       	rjmp	.+28     	; 0x307a <xTaskPriorityInherit+0x146>
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	9b 81       	ldd	r25, Y+3	; 0x03
    3062:	fc 01       	movw	r30, r24
    3064:	23 a1       	ldd	r18, Z+35	; 0x23
    3066:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    306a:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    306e:	fc 01       	movw	r30, r24
    3070:	86 89       	ldd	r24, Z+22	; 0x16
    3072:	28 17       	cp	r18, r24
    3074:	10 f4       	brcc	.+4      	; 0x307a <xTaskPriorityInherit+0x146>
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	08 95       	ret

0000308c <xTaskPriorityDisinherit>:
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	00 d0       	rcall	.+0      	; 0x3092 <xTaskPriorityDisinherit+0x6>
    3092:	1f 92       	push	r1
    3094:	1f 92       	push	r1
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	9d 83       	std	Y+5, r25	; 0x05
    309c:	8c 83       	std	Y+4, r24	; 0x04
    309e:	8c 81       	ldd	r24, Y+4	; 0x04
    30a0:	9d 81       	ldd	r25, Y+5	; 0x05
    30a2:	9b 83       	std	Y+3, r25	; 0x03
    30a4:	8a 83       	std	Y+2, r24	; 0x02
    30a6:	19 82       	std	Y+1, r1	; 0x01
    30a8:	8c 81       	ldd	r24, Y+4	; 0x04
    30aa:	9d 81       	ldd	r25, Y+5	; 0x05
    30ac:	89 2b       	or	r24, r25
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <xTaskPriorityDisinherit+0x26>
    30b0:	61 c0       	rjmp	.+194    	; 0x3174 <xTaskPriorityDisinherit+0xe8>
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	9b 81       	ldd	r25, Y+3	; 0x03
    30b6:	fc 01       	movw	r30, r24
    30b8:	84 a1       	ldd	r24, Z+36	; 0x24
    30ba:	2f ef       	ldi	r18, 0xFF	; 255
    30bc:	28 0f       	add	r18, r24
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	9b 81       	ldd	r25, Y+3	; 0x03
    30c2:	fc 01       	movw	r30, r24
    30c4:	24 a3       	std	Z+36, r18	; 0x24
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	fc 01       	movw	r30, r24
    30cc:	26 89       	ldd	r18, Z+22	; 0x16
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	fc 01       	movw	r30, r24
    30d4:	83 a1       	ldd	r24, Z+35	; 0x23
    30d6:	28 17       	cp	r18, r24
    30d8:	09 f4       	brne	.+2      	; 0x30dc <xTaskPriorityDisinherit+0x50>
    30da:	4c c0       	rjmp	.+152    	; 0x3174 <xTaskPriorityDisinherit+0xe8>
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	9b 81       	ldd	r25, Y+3	; 0x03
    30e0:	fc 01       	movw	r30, r24
    30e2:	84 a1       	ldd	r24, Z+36	; 0x24
    30e4:	88 23       	and	r24, r24
    30e6:	09 f0       	breq	.+2      	; 0x30ea <xTaskPriorityDisinherit+0x5e>
    30e8:	45 c0       	rjmp	.+138    	; 0x3174 <xTaskPriorityDisinherit+0xe8>
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	9b 81       	ldd	r25, Y+3	; 0x03
    30ee:	02 96       	adiw	r24, 0x02	; 2
    30f0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	9b 81       	ldd	r25, Y+3	; 0x03
    30f8:	fc 01       	movw	r30, r24
    30fa:	23 a1       	ldd	r18, Z+35	; 0x23
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	fc 01       	movw	r30, r24
    3102:	26 8b       	std	Z+22, r18	; 0x16
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	9b 81       	ldd	r25, Y+3	; 0x03
    3108:	fc 01       	movw	r30, r24
    310a:	86 89       	ldd	r24, Z+22	; 0x16
    310c:	88 2f       	mov	r24, r24
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	24 e0       	ldi	r18, 0x04	; 4
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	28 1b       	sub	r18, r24
    3116:	39 0b       	sbc	r19, r25
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	fc 01       	movw	r30, r24
    311e:	35 87       	std	Z+13, r19	; 0x0d
    3120:	24 87       	std	Z+12, r18	; 0x0c
    3122:	8a 81       	ldd	r24, Y+2	; 0x02
    3124:	9b 81       	ldd	r25, Y+3	; 0x03
    3126:	fc 01       	movw	r30, r24
    3128:	96 89       	ldd	r25, Z+22	; 0x16
    312a:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    312e:	89 17       	cp	r24, r25
    3130:	30 f4       	brcc	.+12     	; 0x313e <xTaskPriorityDisinherit+0xb2>
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	fc 01       	movw	r30, r24
    3138:	86 89       	ldd	r24, Z+22	; 0x16
    313a:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	9b 81       	ldd	r25, Y+3	; 0x03
    3142:	ac 01       	movw	r20, r24
    3144:	4e 5f       	subi	r20, 0xFE	; 254
    3146:	5f 4f       	sbci	r21, 0xFF	; 255
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	9b 81       	ldd	r25, Y+3	; 0x03
    314c:	fc 01       	movw	r30, r24
    314e:	86 89       	ldd	r24, Z+22	; 0x16
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	c9 01       	movw	r24, r18
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	82 0f       	add	r24, r18
    3164:	93 1f       	adc	r25, r19
    3166:	8e 54       	subi	r24, 0x4E	; 78
    3168:	97 4f       	sbci	r25, 0xF7	; 247
    316a:	ba 01       	movw	r22, r20
    316c:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	0f 90       	pop	r0
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	08 95       	ret

00003186 <vTaskPriorityDisinheritAfterTimeout>:
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	28 97       	sbiw	r28, 0x08	; 8
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	9f 83       	std	Y+7, r25	; 0x07
    319c:	8e 83       	std	Y+6, r24	; 0x06
    319e:	68 87       	std	Y+8, r22	; 0x08
    31a0:	8e 81       	ldd	r24, Y+6	; 0x06
    31a2:	9f 81       	ldd	r25, Y+7	; 0x07
    31a4:	9b 83       	std	Y+3, r25	; 0x03
    31a6:	8a 83       	std	Y+2, r24	; 0x02
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	8c 83       	std	Y+4, r24	; 0x04
    31ac:	8e 81       	ldd	r24, Y+6	; 0x06
    31ae:	9f 81       	ldd	r25, Y+7	; 0x07
    31b0:	89 2b       	or	r24, r25
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <vTaskPriorityDisinheritAfterTimeout+0x30>
    31b4:	7e c0       	rjmp	.+252    	; 0x32b2 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ba:	fc 01       	movw	r30, r24
    31bc:	93 a1       	ldd	r25, Z+35	; 0x23
    31be:	88 85       	ldd	r24, Y+8	; 0x08
    31c0:	98 17       	cp	r25, r24
    31c2:	18 f4       	brcc	.+6      	; 0x31ca <vTaskPriorityDisinheritAfterTimeout+0x44>
    31c4:	88 85       	ldd	r24, Y+8	; 0x08
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	9b 81       	ldd	r25, Y+3	; 0x03
    31ce:	fc 01       	movw	r30, r24
    31d0:	83 a1       	ldd	r24, Z+35	; 0x23
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	9b 81       	ldd	r25, Y+3	; 0x03
    31d8:	fc 01       	movw	r30, r24
    31da:	96 89       	ldd	r25, Z+22	; 0x16
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	98 17       	cp	r25, r24
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    31e2:	67 c0       	rjmp	.+206    	; 0x32b2 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	fc 01       	movw	r30, r24
    31ea:	94 a1       	ldd	r25, Z+36	; 0x24
    31ec:	8c 81       	ldd	r24, Y+4	; 0x04
    31ee:	98 17       	cp	r25, r24
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <vTaskPriorityDisinheritAfterTimeout+0x6e>
    31f2:	5f c0       	rjmp	.+190    	; 0x32b2 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	fc 01       	movw	r30, r24
    31fa:	86 89       	ldd	r24, Z+22	; 0x16
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	9b 81       	ldd	r25, Y+3	; 0x03
    3202:	29 81       	ldd	r18, Y+1	; 0x01
    3204:	fc 01       	movw	r30, r24
    3206:	26 8b       	std	Z+22, r18	; 0x16
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	9b 81       	ldd	r25, Y+3	; 0x03
    320c:	fc 01       	movw	r30, r24
    320e:	84 85       	ldd	r24, Z+12	; 0x0c
    3210:	95 85       	ldd	r25, Z+13	; 0x0d
    3212:	99 23       	and	r25, r25
    3214:	64 f0       	brlt	.+24     	; 0x322e <vTaskPriorityDisinheritAfterTimeout+0xa8>
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	24 e0       	ldi	r18, 0x04	; 4
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	28 1b       	sub	r18, r24
    3222:	39 0b       	sbc	r19, r25
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	9b 81       	ldd	r25, Y+3	; 0x03
    3228:	fc 01       	movw	r30, r24
    322a:	35 87       	std	Z+13, r19	; 0x0d
    322c:	24 87       	std	Z+12, r18	; 0x0c
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	fc 01       	movw	r30, r24
    3234:	42 85       	ldd	r20, Z+10	; 0x0a
    3236:	53 85       	ldd	r21, Z+11	; 0x0b
    3238:	8d 81       	ldd	r24, Y+5	; 0x05
    323a:	28 2f       	mov	r18, r24
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	c9 01       	movw	r24, r18
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	82 0f       	add	r24, r18
    324e:	93 1f       	adc	r25, r19
    3250:	8e 54       	subi	r24, 0x4E	; 78
    3252:	97 4f       	sbci	r25, 0xF7	; 247
    3254:	48 17       	cp	r20, r24
    3256:	59 07       	cpc	r21, r25
    3258:	61 f5       	brne	.+88     	; 0x32b2 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	02 96       	adiw	r24, 0x02	; 2
    3260:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	fc 01       	movw	r30, r24
    326a:	96 89       	ldd	r25, Z+22	; 0x16
    326c:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    3270:	89 17       	cp	r24, r25
    3272:	30 f4       	brcc	.+12     	; 0x3280 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	fc 01       	movw	r30, r24
    327a:	86 89       	ldd	r24, Z+22	; 0x16
    327c:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	9b 81       	ldd	r25, Y+3	; 0x03
    3284:	ac 01       	movw	r20, r24
    3286:	4e 5f       	subi	r20, 0xFE	; 254
    3288:	5f 4f       	sbci	r21, 0xFF	; 255
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	9b 81       	ldd	r25, Y+3	; 0x03
    328e:	fc 01       	movw	r30, r24
    3290:	86 89       	ldd	r24, Z+22	; 0x16
    3292:	28 2f       	mov	r18, r24
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	c9 01       	movw	r24, r18
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	82 0f       	add	r24, r18
    32a6:	93 1f       	adc	r25, r19
    32a8:	8e 54       	subi	r24, 0x4E	; 78
    32aa:	97 4f       	sbci	r25, 0xF7	; 247
    32ac:	ba 01       	movw	r22, r20
    32ae:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    32b2:	00 00       	nop
    32b4:	28 96       	adiw	r28, 0x08	; 8
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	08 95       	ret

000032c6 <pvTaskIncrementMutexHeldCount>:
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    32d2:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    32d6:	89 2b       	or	r24, r25
    32d8:	49 f0       	breq	.+18     	; 0x32ec <pvTaskIncrementMutexHeldCount+0x26>
    32da:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    32de:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    32e2:	fc 01       	movw	r30, r24
    32e4:	24 a1       	ldd	r18, Z+36	; 0x24
    32e6:	2f 5f       	subi	r18, 0xFF	; 255
    32e8:	fc 01       	movw	r30, r24
    32ea:	24 a3       	std	Z+36, r18	; 0x24
    32ec:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    32f0:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	08 95       	ret

000032fa <xTaskNotifyWait>:
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	2d 97       	sbiw	r28, 0x0d	; 13
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	6a 83       	std	Y+2, r22	; 0x02
    3318:	7b 83       	std	Y+3, r23	; 0x03
    331a:	8c 83       	std	Y+4, r24	; 0x04
    331c:	9d 83       	std	Y+5, r25	; 0x05
    331e:	2e 83       	std	Y+6, r18	; 0x06
    3320:	3f 83       	std	Y+7, r19	; 0x07
    3322:	48 87       	std	Y+8, r20	; 0x08
    3324:	59 87       	std	Y+9, r21	; 0x09
    3326:	1b 87       	std	Y+11, r17	; 0x0b
    3328:	0a 87       	std	Y+10, r16	; 0x0a
    332a:	fd 86       	std	Y+13, r15	; 0x0d
    332c:	ec 86       	std	Y+12, r14	; 0x0c
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	0f 92       	push	r0
    3334:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    3338:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    333c:	fc 01       	movw	r30, r24
    333e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3340:	82 30       	cpi	r24, 0x02	; 2
    3342:	59 f1       	breq	.+86     	; 0x339a <xTaskNotifyWait+0xa0>
    3344:	60 91 b0 08 	lds	r22, 0x08B0	; 0x8008b0 <__data_end>
    3348:	70 91 b1 08 	lds	r23, 0x08B1	; 0x8008b1 <__data_end+0x1>
    334c:	fb 01       	movw	r30, r22
    334e:	27 a1       	ldd	r18, Z+39	; 0x27
    3350:	30 a5       	ldd	r19, Z+40	; 0x28
    3352:	41 a5       	ldd	r20, Z+41	; 0x29
    3354:	52 a5       	ldd	r21, Z+42	; 0x2a
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	ac 81       	ldd	r26, Y+4	; 0x04
    335c:	bd 81       	ldd	r27, Y+5	; 0x05
    335e:	80 95       	com	r24
    3360:	90 95       	com	r25
    3362:	a0 95       	com	r26
    3364:	b0 95       	com	r27
    3366:	82 23       	and	r24, r18
    3368:	93 23       	and	r25, r19
    336a:	a4 23       	and	r26, r20
    336c:	b5 23       	and	r27, r21
    336e:	fb 01       	movw	r30, r22
    3370:	87 a3       	std	Z+39, r24	; 0x27
    3372:	90 a7       	std	Z+40, r25	; 0x28
    3374:	a1 a7       	std	Z+41, r26	; 0x29
    3376:	b2 a7       	std	Z+42, r27	; 0x2a
    3378:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    337c:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    3380:	21 e0       	ldi	r18, 0x01	; 1
    3382:	fc 01       	movw	r30, r24
    3384:	23 a7       	std	Z+43, r18	; 0x2b
    3386:	8c 85       	ldd	r24, Y+12	; 0x0c
    3388:	9d 85       	ldd	r25, Y+13	; 0x0d
    338a:	89 2b       	or	r24, r25
    338c:	31 f0       	breq	.+12     	; 0x339a <xTaskNotifyWait+0xa0>
    338e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3390:	9d 85       	ldd	r25, Y+13	; 0x0d
    3392:	61 e0       	ldi	r22, 0x01	; 1
    3394:	65 d2       	rcall	.+1226   	; 0x3860 <prvAddCurrentTaskToDelayedList>
    3396:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    339a:	0f 90       	pop	r0
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	0f 92       	push	r0
    33a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    33a8:	89 2b       	or	r24, r25
    33aa:	81 f0       	breq	.+32     	; 0x33cc <xTaskNotifyWait+0xd2>
    33ac:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    33b0:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    33b4:	fc 01       	movw	r30, r24
    33b6:	87 a1       	ldd	r24, Z+39	; 0x27
    33b8:	90 a5       	ldd	r25, Z+40	; 0x28
    33ba:	a1 a5       	ldd	r26, Z+41	; 0x29
    33bc:	b2 a5       	ldd	r27, Z+42	; 0x2a
    33be:	2a 85       	ldd	r18, Y+10	; 0x0a
    33c0:	3b 85       	ldd	r19, Y+11	; 0x0b
    33c2:	f9 01       	movw	r30, r18
    33c4:	80 83       	st	Z, r24
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	a2 83       	std	Z+2, r26	; 0x02
    33ca:	b3 83       	std	Z+3, r27	; 0x03
    33cc:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    33d0:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    33d4:	fc 01       	movw	r30, r24
    33d6:	83 a5       	ldd	r24, Z+43	; 0x2b
    33d8:	82 30       	cpi	r24, 0x02	; 2
    33da:	11 f0       	breq	.+4      	; 0x33e0 <xTaskNotifyWait+0xe6>
    33dc:	19 82       	std	Y+1, r1	; 0x01
    33de:	1c c0       	rjmp	.+56     	; 0x3418 <xTaskNotifyWait+0x11e>
    33e0:	60 91 b0 08 	lds	r22, 0x08B0	; 0x8008b0 <__data_end>
    33e4:	70 91 b1 08 	lds	r23, 0x08B1	; 0x8008b1 <__data_end+0x1>
    33e8:	fb 01       	movw	r30, r22
    33ea:	27 a1       	ldd	r18, Z+39	; 0x27
    33ec:	30 a5       	ldd	r19, Z+40	; 0x28
    33ee:	41 a5       	ldd	r20, Z+41	; 0x29
    33f0:	52 a5       	ldd	r21, Z+42	; 0x2a
    33f2:	8e 81       	ldd	r24, Y+6	; 0x06
    33f4:	9f 81       	ldd	r25, Y+7	; 0x07
    33f6:	a8 85       	ldd	r26, Y+8	; 0x08
    33f8:	b9 85       	ldd	r27, Y+9	; 0x09
    33fa:	80 95       	com	r24
    33fc:	90 95       	com	r25
    33fe:	a0 95       	com	r26
    3400:	b0 95       	com	r27
    3402:	82 23       	and	r24, r18
    3404:	93 23       	and	r25, r19
    3406:	a4 23       	and	r26, r20
    3408:	b5 23       	and	r27, r21
    340a:	fb 01       	movw	r30, r22
    340c:	87 a3       	std	Z+39, r24	; 0x27
    340e:	90 a7       	std	Z+40, r25	; 0x28
    3410:	a1 a7       	std	Z+41, r26	; 0x29
    3412:	b2 a7       	std	Z+42, r27	; 0x2a
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    341c:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    3420:	fc 01       	movw	r30, r24
    3422:	13 a6       	std	Z+43, r1	; 0x2b
    3424:	0f 90       	pop	r0
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	2d 96       	adiw	r28, 0x0d	; 13
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	08 95       	ret

00003444 <xTaskGenericNotify>:
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	cf 93       	push	r28
    344a:	df 93       	push	r29
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	2d 97       	sbiw	r28, 0x0d	; 13
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	9e 83       	std	Y+6, r25	; 0x06
    345e:	8d 83       	std	Y+5, r24	; 0x05
    3460:	4f 83       	std	Y+7, r20	; 0x07
    3462:	58 87       	std	Y+8, r21	; 0x08
    3464:	69 87       	std	Y+9, r22	; 0x09
    3466:	7a 87       	std	Y+10, r23	; 0x0a
    3468:	2b 87       	std	Y+11, r18	; 0x0b
    346a:	1d 87       	std	Y+13, r17	; 0x0d
    346c:	0c 87       	std	Y+12, r16	; 0x0c
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	89 83       	std	Y+1, r24	; 0x01
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	9b 83       	std	Y+3, r25	; 0x03
    3478:	8a 83       	std	Y+2, r24	; 0x02
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	0f 92       	push	r0
    3480:	8c 85       	ldd	r24, Y+12	; 0x0c
    3482:	9d 85       	ldd	r25, Y+13	; 0x0d
    3484:	89 2b       	or	r24, r25
    3486:	71 f0       	breq	.+28     	; 0x34a4 <xTaskGenericNotify+0x60>
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	9b 81       	ldd	r25, Y+3	; 0x03
    348c:	fc 01       	movw	r30, r24
    348e:	87 a1       	ldd	r24, Z+39	; 0x27
    3490:	90 a5       	ldd	r25, Z+40	; 0x28
    3492:	a1 a5       	ldd	r26, Z+41	; 0x29
    3494:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3496:	2c 85       	ldd	r18, Y+12	; 0x0c
    3498:	3d 85       	ldd	r19, Y+13	; 0x0d
    349a:	f9 01       	movw	r30, r18
    349c:	80 83       	st	Z, r24
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	a2 83       	std	Z+2, r26	; 0x02
    34a2:	b3 83       	std	Z+3, r27	; 0x03
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	9b 81       	ldd	r25, Y+3	; 0x03
    34a8:	fc 01       	movw	r30, r24
    34aa:	83 a5       	ldd	r24, Z+43	; 0x2b
    34ac:	8c 83       	std	Y+4, r24	; 0x04
    34ae:	8a 81       	ldd	r24, Y+2	; 0x02
    34b0:	9b 81       	ldd	r25, Y+3	; 0x03
    34b2:	22 e0       	ldi	r18, 0x02	; 2
    34b4:	fc 01       	movw	r30, r24
    34b6:	23 a7       	std	Z+43, r18	; 0x2b
    34b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	82 30       	cpi	r24, 0x02	; 2
    34c0:	91 05       	cpc	r25, r1
    34c2:	31 f1       	breq	.+76     	; 0x3510 <xTaskGenericNotify+0xcc>
    34c4:	83 30       	cpi	r24, 0x03	; 3
    34c6:	91 05       	cpc	r25, r1
    34c8:	34 f4       	brge	.+12     	; 0x34d6 <xTaskGenericNotify+0x92>
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <xTaskGenericNotify+0x8c>
    34ce:	4f c0       	rjmp	.+158    	; 0x356e <xTaskGenericNotify+0x12a>
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	39 f0       	breq	.+14     	; 0x34e2 <xTaskGenericNotify+0x9e>
    34d4:	4d c0       	rjmp	.+154    	; 0x3570 <xTaskGenericNotify+0x12c>
    34d6:	83 30       	cpi	r24, 0x03	; 3
    34d8:	91 05       	cpc	r25, r1
    34da:	61 f1       	breq	.+88     	; 0x3534 <xTaskGenericNotify+0xf0>
    34dc:	04 97       	sbiw	r24, 0x04	; 4
    34de:	b1 f1       	breq	.+108    	; 0x354c <xTaskGenericNotify+0x108>
    34e0:	47 c0       	rjmp	.+142    	; 0x3570 <xTaskGenericNotify+0x12c>
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	9b 81       	ldd	r25, Y+3	; 0x03
    34e6:	fc 01       	movw	r30, r24
    34e8:	27 a1       	ldd	r18, Z+39	; 0x27
    34ea:	30 a5       	ldd	r19, Z+40	; 0x28
    34ec:	41 a5       	ldd	r20, Z+41	; 0x29
    34ee:	52 a5       	ldd	r21, Z+42	; 0x2a
    34f0:	8f 81       	ldd	r24, Y+7	; 0x07
    34f2:	98 85       	ldd	r25, Y+8	; 0x08
    34f4:	a9 85       	ldd	r26, Y+9	; 0x09
    34f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    34f8:	82 2b       	or	r24, r18
    34fa:	93 2b       	or	r25, r19
    34fc:	a4 2b       	or	r26, r20
    34fe:	b5 2b       	or	r27, r21
    3500:	2a 81       	ldd	r18, Y+2	; 0x02
    3502:	3b 81       	ldd	r19, Y+3	; 0x03
    3504:	f9 01       	movw	r30, r18
    3506:	87 a3       	std	Z+39, r24	; 0x27
    3508:	90 a7       	std	Z+40, r25	; 0x28
    350a:	a1 a7       	std	Z+41, r26	; 0x29
    350c:	b2 a7       	std	Z+42, r27	; 0x2a
    350e:	30 c0       	rjmp	.+96     	; 0x3570 <xTaskGenericNotify+0x12c>
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	9b 81       	ldd	r25, Y+3	; 0x03
    3514:	fc 01       	movw	r30, r24
    3516:	87 a1       	ldd	r24, Z+39	; 0x27
    3518:	90 a5       	ldd	r25, Z+40	; 0x28
    351a:	a1 a5       	ldd	r26, Z+41	; 0x29
    351c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    351e:	01 96       	adiw	r24, 0x01	; 1
    3520:	a1 1d       	adc	r26, r1
    3522:	b1 1d       	adc	r27, r1
    3524:	2a 81       	ldd	r18, Y+2	; 0x02
    3526:	3b 81       	ldd	r19, Y+3	; 0x03
    3528:	f9 01       	movw	r30, r18
    352a:	87 a3       	std	Z+39, r24	; 0x27
    352c:	90 a7       	std	Z+40, r25	; 0x28
    352e:	a1 a7       	std	Z+41, r26	; 0x29
    3530:	b2 a7       	std	Z+42, r27	; 0x2a
    3532:	1e c0       	rjmp	.+60     	; 0x3570 <xTaskGenericNotify+0x12c>
    3534:	2a 81       	ldd	r18, Y+2	; 0x02
    3536:	3b 81       	ldd	r19, Y+3	; 0x03
    3538:	8f 81       	ldd	r24, Y+7	; 0x07
    353a:	98 85       	ldd	r25, Y+8	; 0x08
    353c:	a9 85       	ldd	r26, Y+9	; 0x09
    353e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3540:	f9 01       	movw	r30, r18
    3542:	87 a3       	std	Z+39, r24	; 0x27
    3544:	90 a7       	std	Z+40, r25	; 0x28
    3546:	a1 a7       	std	Z+41, r26	; 0x29
    3548:	b2 a7       	std	Z+42, r27	; 0x2a
    354a:	12 c0       	rjmp	.+36     	; 0x3570 <xTaskGenericNotify+0x12c>
    354c:	8c 81       	ldd	r24, Y+4	; 0x04
    354e:	82 30       	cpi	r24, 0x02	; 2
    3550:	61 f0       	breq	.+24     	; 0x356a <xTaskGenericNotify+0x126>
    3552:	2a 81       	ldd	r18, Y+2	; 0x02
    3554:	3b 81       	ldd	r19, Y+3	; 0x03
    3556:	8f 81       	ldd	r24, Y+7	; 0x07
    3558:	98 85       	ldd	r25, Y+8	; 0x08
    355a:	a9 85       	ldd	r26, Y+9	; 0x09
    355c:	ba 85       	ldd	r27, Y+10	; 0x0a
    355e:	f9 01       	movw	r30, r18
    3560:	87 a3       	std	Z+39, r24	; 0x27
    3562:	90 a7       	std	Z+40, r25	; 0x28
    3564:	a1 a7       	std	Z+41, r26	; 0x29
    3566:	b2 a7       	std	Z+42, r27	; 0x2a
    3568:	03 c0       	rjmp	.+6      	; 0x3570 <xTaskGenericNotify+0x12c>
    356a:	19 82       	std	Y+1, r1	; 0x01
    356c:	01 c0       	rjmp	.+2      	; 0x3570 <xTaskGenericNotify+0x12c>
    356e:	00 00       	nop
    3570:	8c 81       	ldd	r24, Y+4	; 0x04
    3572:	81 30       	cpi	r24, 0x01	; 1
    3574:	d1 f5       	brne	.+116    	; 0x35ea <xTaskGenericNotify+0x1a6>
    3576:	8a 81       	ldd	r24, Y+2	; 0x02
    3578:	9b 81       	ldd	r25, Y+3	; 0x03
    357a:	02 96       	adiw	r24, 0x02	; 2
    357c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	9b 81       	ldd	r25, Y+3	; 0x03
    3584:	fc 01       	movw	r30, r24
    3586:	96 89       	ldd	r25, Z+22	; 0x16
    3588:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    358c:	89 17       	cp	r24, r25
    358e:	30 f4       	brcc	.+12     	; 0x359c <xTaskGenericNotify+0x158>
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	9b 81       	ldd	r25, Y+3	; 0x03
    3594:	fc 01       	movw	r30, r24
    3596:	86 89       	ldd	r24, Z+22	; 0x16
    3598:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	9b 81       	ldd	r25, Y+3	; 0x03
    35a0:	ac 01       	movw	r20, r24
    35a2:	4e 5f       	subi	r20, 0xFE	; 254
    35a4:	5f 4f       	sbci	r21, 0xFF	; 255
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	9b 81       	ldd	r25, Y+3	; 0x03
    35aa:	fc 01       	movw	r30, r24
    35ac:	86 89       	ldd	r24, Z+22	; 0x16
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	c9 01       	movw	r24, r18
    35b4:	88 0f       	add	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	88 0f       	add	r24, r24
    35ba:	99 1f       	adc	r25, r25
    35bc:	88 0f       	add	r24, r24
    35be:	99 1f       	adc	r25, r25
    35c0:	82 0f       	add	r24, r18
    35c2:	93 1f       	adc	r25, r19
    35c4:	8e 54       	subi	r24, 0x4E	; 78
    35c6:	97 4f       	sbci	r25, 0xF7	; 247
    35c8:	ba 01       	movw	r22, r20
    35ca:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	9b 81       	ldd	r25, Y+3	; 0x03
    35d2:	fc 01       	movw	r30, r24
    35d4:	26 89       	ldd	r18, Z+22	; 0x16
    35d6:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    35da:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    35de:	fc 01       	movw	r30, r24
    35e0:	86 89       	ldd	r24, Z+22	; 0x16
    35e2:	82 17       	cp	r24, r18
    35e4:	10 f4       	brcc	.+4      	; 0x35ea <xTaskGenericNotify+0x1a6>
    35e6:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    35ea:	0f 90       	pop	r0
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	2d 96       	adiw	r28, 0x0d	; 13
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	08 95       	ret

00003606 <xTaskGenericNotifyFromISR>:
    3606:	ef 92       	push	r14
    3608:	ff 92       	push	r15
    360a:	0f 93       	push	r16
    360c:	1f 93       	push	r17
    360e:	cf 93       	push	r28
    3610:	df 93       	push	r29
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	60 97       	sbiw	r28, 0x10	; 16
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	9f 83       	std	Y+7, r25	; 0x07
    3624:	8e 83       	std	Y+6, r24	; 0x06
    3626:	48 87       	std	Y+8, r20	; 0x08
    3628:	59 87       	std	Y+9, r21	; 0x09
    362a:	6a 87       	std	Y+10, r22	; 0x0a
    362c:	7b 87       	std	Y+11, r23	; 0x0b
    362e:	2c 87       	std	Y+12, r18	; 0x0c
    3630:	1e 87       	std	Y+14, r17	; 0x0e
    3632:	0d 87       	std	Y+13, r16	; 0x0d
    3634:	f8 8a       	std	Y+16, r15	; 0x10
    3636:	ef 86       	std	Y+15, r14	; 0x0f
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	89 83       	std	Y+1, r24	; 0x01
    363c:	8e 81       	ldd	r24, Y+6	; 0x06
    363e:	9f 81       	ldd	r25, Y+7	; 0x07
    3640:	9b 83       	std	Y+3, r25	; 0x03
    3642:	8a 83       	std	Y+2, r24	; 0x02
    3644:	1c 82       	std	Y+4, r1	; 0x04
    3646:	8d 85       	ldd	r24, Y+13	; 0x0d
    3648:	9e 85       	ldd	r25, Y+14	; 0x0e
    364a:	89 2b       	or	r24, r25
    364c:	71 f0       	breq	.+28     	; 0x366a <xTaskGenericNotifyFromISR+0x64>
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	9b 81       	ldd	r25, Y+3	; 0x03
    3652:	fc 01       	movw	r30, r24
    3654:	87 a1       	ldd	r24, Z+39	; 0x27
    3656:	90 a5       	ldd	r25, Z+40	; 0x28
    3658:	a1 a5       	ldd	r26, Z+41	; 0x29
    365a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    365c:	2d 85       	ldd	r18, Y+13	; 0x0d
    365e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3660:	f9 01       	movw	r30, r18
    3662:	80 83       	st	Z, r24
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	a2 83       	std	Z+2, r26	; 0x02
    3668:	b3 83       	std	Z+3, r27	; 0x03
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	9b 81       	ldd	r25, Y+3	; 0x03
    366e:	fc 01       	movw	r30, r24
    3670:	83 a5       	ldd	r24, Z+43	; 0x2b
    3672:	8d 83       	std	Y+5, r24	; 0x05
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	22 e0       	ldi	r18, 0x02	; 2
    367a:	fc 01       	movw	r30, r24
    367c:	23 a7       	std	Z+43, r18	; 0x2b
    367e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3680:	88 2f       	mov	r24, r24
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	82 30       	cpi	r24, 0x02	; 2
    3686:	91 05       	cpc	r25, r1
    3688:	31 f1       	breq	.+76     	; 0x36d6 <xTaskGenericNotifyFromISR+0xd0>
    368a:	83 30       	cpi	r24, 0x03	; 3
    368c:	91 05       	cpc	r25, r1
    368e:	34 f4       	brge	.+12     	; 0x369c <xTaskGenericNotifyFromISR+0x96>
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	09 f4       	brne	.+2      	; 0x3696 <xTaskGenericNotifyFromISR+0x90>
    3694:	4f c0       	rjmp	.+158    	; 0x3734 <xTaskGenericNotifyFromISR+0x12e>
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	39 f0       	breq	.+14     	; 0x36a8 <xTaskGenericNotifyFromISR+0xa2>
    369a:	4d c0       	rjmp	.+154    	; 0x3736 <xTaskGenericNotifyFromISR+0x130>
    369c:	83 30       	cpi	r24, 0x03	; 3
    369e:	91 05       	cpc	r25, r1
    36a0:	61 f1       	breq	.+88     	; 0x36fa <xTaskGenericNotifyFromISR+0xf4>
    36a2:	04 97       	sbiw	r24, 0x04	; 4
    36a4:	b1 f1       	breq	.+108    	; 0x3712 <xTaskGenericNotifyFromISR+0x10c>
    36a6:	47 c0       	rjmp	.+142    	; 0x3736 <xTaskGenericNotifyFromISR+0x130>
    36a8:	8a 81       	ldd	r24, Y+2	; 0x02
    36aa:	9b 81       	ldd	r25, Y+3	; 0x03
    36ac:	fc 01       	movw	r30, r24
    36ae:	27 a1       	ldd	r18, Z+39	; 0x27
    36b0:	30 a5       	ldd	r19, Z+40	; 0x28
    36b2:	41 a5       	ldd	r20, Z+41	; 0x29
    36b4:	52 a5       	ldd	r21, Z+42	; 0x2a
    36b6:	88 85       	ldd	r24, Y+8	; 0x08
    36b8:	99 85       	ldd	r25, Y+9	; 0x09
    36ba:	aa 85       	ldd	r26, Y+10	; 0x0a
    36bc:	bb 85       	ldd	r27, Y+11	; 0x0b
    36be:	82 2b       	or	r24, r18
    36c0:	93 2b       	or	r25, r19
    36c2:	a4 2b       	or	r26, r20
    36c4:	b5 2b       	or	r27, r21
    36c6:	2a 81       	ldd	r18, Y+2	; 0x02
    36c8:	3b 81       	ldd	r19, Y+3	; 0x03
    36ca:	f9 01       	movw	r30, r18
    36cc:	87 a3       	std	Z+39, r24	; 0x27
    36ce:	90 a7       	std	Z+40, r25	; 0x28
    36d0:	a1 a7       	std	Z+41, r26	; 0x29
    36d2:	b2 a7       	std	Z+42, r27	; 0x2a
    36d4:	30 c0       	rjmp	.+96     	; 0x3736 <xTaskGenericNotifyFromISR+0x130>
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	9b 81       	ldd	r25, Y+3	; 0x03
    36da:	fc 01       	movw	r30, r24
    36dc:	87 a1       	ldd	r24, Z+39	; 0x27
    36de:	90 a5       	ldd	r25, Z+40	; 0x28
    36e0:	a1 a5       	ldd	r26, Z+41	; 0x29
    36e2:	b2 a5       	ldd	r27, Z+42	; 0x2a
    36e4:	01 96       	adiw	r24, 0x01	; 1
    36e6:	a1 1d       	adc	r26, r1
    36e8:	b1 1d       	adc	r27, r1
    36ea:	2a 81       	ldd	r18, Y+2	; 0x02
    36ec:	3b 81       	ldd	r19, Y+3	; 0x03
    36ee:	f9 01       	movw	r30, r18
    36f0:	87 a3       	std	Z+39, r24	; 0x27
    36f2:	90 a7       	std	Z+40, r25	; 0x28
    36f4:	a1 a7       	std	Z+41, r26	; 0x29
    36f6:	b2 a7       	std	Z+42, r27	; 0x2a
    36f8:	1e c0       	rjmp	.+60     	; 0x3736 <xTaskGenericNotifyFromISR+0x130>
    36fa:	2a 81       	ldd	r18, Y+2	; 0x02
    36fc:	3b 81       	ldd	r19, Y+3	; 0x03
    36fe:	88 85       	ldd	r24, Y+8	; 0x08
    3700:	99 85       	ldd	r25, Y+9	; 0x09
    3702:	aa 85       	ldd	r26, Y+10	; 0x0a
    3704:	bb 85       	ldd	r27, Y+11	; 0x0b
    3706:	f9 01       	movw	r30, r18
    3708:	87 a3       	std	Z+39, r24	; 0x27
    370a:	90 a7       	std	Z+40, r25	; 0x28
    370c:	a1 a7       	std	Z+41, r26	; 0x29
    370e:	b2 a7       	std	Z+42, r27	; 0x2a
    3710:	12 c0       	rjmp	.+36     	; 0x3736 <xTaskGenericNotifyFromISR+0x130>
    3712:	8d 81       	ldd	r24, Y+5	; 0x05
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	61 f0       	breq	.+24     	; 0x3730 <xTaskGenericNotifyFromISR+0x12a>
    3718:	2a 81       	ldd	r18, Y+2	; 0x02
    371a:	3b 81       	ldd	r19, Y+3	; 0x03
    371c:	88 85       	ldd	r24, Y+8	; 0x08
    371e:	99 85       	ldd	r25, Y+9	; 0x09
    3720:	aa 85       	ldd	r26, Y+10	; 0x0a
    3722:	bb 85       	ldd	r27, Y+11	; 0x0b
    3724:	f9 01       	movw	r30, r18
    3726:	87 a3       	std	Z+39, r24	; 0x27
    3728:	90 a7       	std	Z+40, r25	; 0x28
    372a:	a1 a7       	std	Z+41, r26	; 0x29
    372c:	b2 a7       	std	Z+42, r27	; 0x2a
    372e:	03 c0       	rjmp	.+6      	; 0x3736 <xTaskGenericNotifyFromISR+0x130>
    3730:	19 82       	std	Y+1, r1	; 0x01
    3732:	01 c0       	rjmp	.+2      	; 0x3736 <xTaskGenericNotifyFromISR+0x130>
    3734:	00 00       	nop
    3736:	8d 81       	ldd	r24, Y+5	; 0x05
    3738:	81 30       	cpi	r24, 0x01	; 1
    373a:	09 f0       	breq	.+2      	; 0x373e <xTaskGenericNotifyFromISR+0x138>
    373c:	51 c0       	rjmp	.+162    	; 0x37e0 <xTaskGenericNotifyFromISR+0x1da>
    373e:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <uxSchedulerSuspended>
    3742:	88 23       	and	r24, r24
    3744:	69 f5       	brne	.+90     	; 0x37a0 <xTaskGenericNotifyFromISR+0x19a>
    3746:	8a 81       	ldd	r24, Y+2	; 0x02
    3748:	9b 81       	ldd	r25, Y+3	; 0x03
    374a:	02 96       	adiw	r24, 0x02	; 2
    374c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    3750:	8a 81       	ldd	r24, Y+2	; 0x02
    3752:	9b 81       	ldd	r25, Y+3	; 0x03
    3754:	fc 01       	movw	r30, r24
    3756:	96 89       	ldd	r25, Z+22	; 0x16
    3758:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <uxTopReadyPriority>
    375c:	89 17       	cp	r24, r25
    375e:	30 f4       	brcc	.+12     	; 0x376c <xTaskGenericNotifyFromISR+0x166>
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	9b 81       	ldd	r25, Y+3	; 0x03
    3764:	fc 01       	movw	r30, r24
    3766:	86 89       	ldd	r24, Z+22	; 0x16
    3768:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <uxTopReadyPriority>
    376c:	8a 81       	ldd	r24, Y+2	; 0x02
    376e:	9b 81       	ldd	r25, Y+3	; 0x03
    3770:	ac 01       	movw	r20, r24
    3772:	4e 5f       	subi	r20, 0xFE	; 254
    3774:	5f 4f       	sbci	r21, 0xFF	; 255
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	9b 81       	ldd	r25, Y+3	; 0x03
    377a:	fc 01       	movw	r30, r24
    377c:	86 89       	ldd	r24, Z+22	; 0x16
    377e:	28 2f       	mov	r18, r24
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	c9 01       	movw	r24, r18
    3784:	88 0f       	add	r24, r24
    3786:	99 1f       	adc	r25, r25
    3788:	88 0f       	add	r24, r24
    378a:	99 1f       	adc	r25, r25
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	82 0f       	add	r24, r18
    3792:	93 1f       	adc	r25, r19
    3794:	8e 54       	subi	r24, 0x4E	; 78
    3796:	97 4f       	sbci	r25, 0xF7	; 247
    3798:	ba 01       	movw	r22, r20
    379a:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    379e:	08 c0       	rjmp	.+16     	; 0x37b0 <xTaskGenericNotifyFromISR+0x1aa>
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	9b 81       	ldd	r25, Y+3	; 0x03
    37a4:	0c 96       	adiw	r24, 0x0c	; 12
    37a6:	bc 01       	movw	r22, r24
    37a8:	8c ee       	ldi	r24, 0xEC	; 236
    37aa:	98 e0       	ldi	r25, 0x08	; 8
    37ac:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	9b 81       	ldd	r25, Y+3	; 0x03
    37b4:	fc 01       	movw	r30, r24
    37b6:	26 89       	ldd	r18, Z+22	; 0x16
    37b8:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    37bc:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    37c0:	fc 01       	movw	r30, r24
    37c2:	86 89       	ldd	r24, Z+22	; 0x16
    37c4:	82 17       	cp	r24, r18
    37c6:	60 f4       	brcc	.+24     	; 0x37e0 <xTaskGenericNotifyFromISR+0x1da>
    37c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ca:	98 89       	ldd	r25, Y+16	; 0x10
    37cc:	89 2b       	or	r24, r25
    37ce:	29 f0       	breq	.+10     	; 0x37da <xTaskGenericNotifyFromISR+0x1d4>
    37d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d2:	98 89       	ldd	r25, Y+16	; 0x10
    37d4:	21 e0       	ldi	r18, 0x01	; 1
    37d6:	fc 01       	movw	r30, r24
    37d8:	20 83       	st	Z, r18
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <xYieldPending>
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	60 96       	adiw	r28, 0x10	; 16
    37e4:	0f b6       	in	r0, 0x3f	; 63
    37e6:	f8 94       	cli
    37e8:	de bf       	out	0x3e, r29	; 62
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	cd bf       	out	0x3d, r28	; 61
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	1f 91       	pop	r17
    37f4:	0f 91       	pop	r16
    37f6:	ff 90       	pop	r15
    37f8:	ef 90       	pop	r14
    37fa:	08 95       	ret

000037fc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
    {
    37fc:	cf 93       	push	r28
    37fe:	df 93       	push	r29
    3800:	00 d0       	rcall	.+0      	; 0x3802 <xTaskNotifyStateClear+0x6>
    3802:	1f 92       	push	r1
    3804:	1f 92       	push	r1
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	9d 83       	std	Y+5, r25	; 0x05
    380c:	8c 83       	std	Y+4, r24	; 0x04
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    380e:	8c 81       	ldd	r24, Y+4	; 0x04
    3810:	9d 81       	ldd	r25, Y+5	; 0x05
    3812:	89 2b       	or	r24, r25
    3814:	29 f4       	brne	.+10     	; 0x3820 <xTaskNotifyStateClear+0x24>
    3816:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    381a:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    381e:	02 c0       	rjmp	.+4      	; 0x3824 <xTaskNotifyStateClear+0x28>
    3820:	8c 81       	ldd	r24, Y+4	; 0x04
    3822:	9d 81       	ldd	r25, Y+5	; 0x05
    3824:	9b 83       	std	Y+3, r25	; 0x03
    3826:	8a 83       	std	Y+2, r24	; 0x02

        taskENTER_CRITICAL();
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	9b 81       	ldd	r25, Y+3	; 0x03
    3832:	fc 01       	movw	r30, r24
    3834:	83 a5       	ldd	r24, Z+43	; 0x2b
    3836:	82 30       	cpi	r24, 0x02	; 2
    3838:	39 f4       	brne	.+14     	; 0x3848 <xTaskNotifyStateClear+0x4c>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	9b 81       	ldd	r25, Y+3	; 0x03
    383e:	fc 01       	movw	r30, r24
    3840:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	89 83       	std	Y+1, r24	; 0x01
    3846:	01 c0       	rjmp	.+2      	; 0x384a <xTaskNotifyStateClear+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
    3848:	19 82       	std	Y+1, r1	; 0x01
            }
        }
        taskEXIT_CRITICAL();
    384a:	0f 90       	pop	r0
    384c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    }
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	08 95       	ret

00003860 <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	27 97       	sbiw	r28, 0x07	; 7
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	f8 94       	cli
    386e:	de bf       	out	0x3e, r29	; 62
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	cd bf       	out	0x3d, r28	; 61
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
    3878:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    387a:	80 91 09 09 	lds	r24, 0x0909	; 0x800909 <xTickCount>
    387e:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <xTickCount+0x1>
    3882:	9a 83       	std	Y+2, r25	; 0x02
    3884:	89 83       	std	Y+1, r24	; 0x01
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3886:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    388a:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    388e:	02 96       	adiw	r24, 0x02	; 2
    3890:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3894:	8d 81       	ldd	r24, Y+5	; 0x05
    3896:	9e 81       	ldd	r25, Y+6	; 0x06
    3898:	01 96       	adiw	r24, 0x01	; 1
    389a:	71 f4       	brne	.+28     	; 0x38b8 <prvAddCurrentTaskToDelayedList+0x58>
    389c:	8f 81       	ldd	r24, Y+7	; 0x07
    389e:	88 23       	and	r24, r24
    38a0:	59 f0       	breq	.+22     	; 0x38b8 <prvAddCurrentTaskToDelayedList+0x58>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38a2:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    38a6:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    38aa:	02 96       	adiw	r24, 0x02	; 2
    38ac:	bc 01       	movw	r22, r24
    38ae:	8f ef       	ldi	r24, 0xFF	; 255
    38b0:	98 e0       	ldi	r25, 0x08	; 8
    38b2:	0e 94 12 02 	call	0x424	; 0x424 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    38b6:	44 c0       	rjmp	.+136    	; 0x3940 <prvAddCurrentTaskToDelayedList+0xe0>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    38b8:	29 81       	ldd	r18, Y+1	; 0x01
    38ba:	3a 81       	ldd	r19, Y+2	; 0x02
    38bc:	8d 81       	ldd	r24, Y+5	; 0x05
    38be:	9e 81       	ldd	r25, Y+6	; 0x06
    38c0:	82 0f       	add	r24, r18
    38c2:	93 1f       	adc	r25, r19
    38c4:	9c 83       	std	Y+4, r25	; 0x04
    38c6:	8b 83       	std	Y+3, r24	; 0x03

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    38c8:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    38cc:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    38d0:	2b 81       	ldd	r18, Y+3	; 0x03
    38d2:	3c 81       	ldd	r19, Y+4	; 0x04
    38d4:	fc 01       	movw	r30, r24
    38d6:	33 83       	std	Z+3, r19	; 0x03
    38d8:	22 83       	std	Z+2, r18	; 0x02

            if( xTimeToWake < xConstTickCount )
    38da:	2b 81       	ldd	r18, Y+3	; 0x03
    38dc:	3c 81       	ldd	r19, Y+4	; 0x04
    38de:	89 81       	ldd	r24, Y+1	; 0x01
    38e0:	9a 81       	ldd	r25, Y+2	; 0x02
    38e2:	28 17       	cp	r18, r24
    38e4:	39 07       	cpc	r19, r25
    38e6:	78 f4       	brcc	.+30     	; 0x3906 <prvAddCurrentTaskToDelayedList+0xa6>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38e8:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    38ec:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    38f0:	9c 01       	movw	r18, r24
    38f2:	2e 5f       	subi	r18, 0xFE	; 254
    38f4:	3f 4f       	sbci	r19, 0xFF	; 255
    38f6:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <pxOverflowDelayedTaskList>
    38fa:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <pxOverflowDelayedTaskList+0x1>
    38fe:	b9 01       	movw	r22, r18
    3900:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3904:	1d c0       	rjmp	.+58     	; 0x3940 <prvAddCurrentTaskToDelayedList+0xe0>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3906:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__data_end>
    390a:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <__data_end+0x1>
    390e:	9c 01       	movw	r18, r24
    3910:	2e 5f       	subi	r18, 0xFE	; 254
    3912:	3f 4f       	sbci	r19, 0xFF	; 255
    3914:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <pxDelayedTaskList>
    3918:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <pxDelayedTaskList+0x1>
    391c:	b9 01       	movw	r22, r18
    391e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    3922:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <xNextTaskUnblockTime>
    3926:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <xNextTaskUnblockTime+0x1>
    392a:	2b 81       	ldd	r18, Y+3	; 0x03
    392c:	3c 81       	ldd	r19, Y+4	; 0x04
    392e:	28 17       	cp	r18, r24
    3930:	39 07       	cpc	r19, r25
    3932:	30 f4       	brcc	.+12     	; 0x3940 <prvAddCurrentTaskToDelayedList+0xe0>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    3934:	8b 81       	ldd	r24, Y+3	; 0x03
    3936:	9c 81       	ldd	r25, Y+4	; 0x04
    3938:	90 93 12 09 	sts	0x0912, r25	; 0x800912 <xNextTaskUnblockTime+0x1>
    393c:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3940:	00 00       	nop
    3942:	27 96       	adiw	r28, 0x07	; 7
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <xTimerCreateTimerTask>:
    3954:	ef 92       	push	r14
    3956:	ff 92       	push	r15
    3958:	0f 93       	push	r16
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	1f 92       	push	r1
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	19 82       	std	Y+1, r1	; 0x01
    3966:	40 d4       	rcall	.+2176   	; 0x41e8 <prvCheckForValidListAndQueue>
    3968:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    396c:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    3970:	89 2b       	or	r24, r25
    3972:	91 f0       	breq	.+36     	; 0x3998 <xTimerCreateTimerTask+0x44>
    3974:	0f 2e       	mov	r0, r31
    3976:	fe e2       	ldi	r31, 0x2E	; 46
    3978:	ef 2e       	mov	r14, r31
    397a:	f9 e0       	ldi	r31, 0x09	; 9
    397c:	ff 2e       	mov	r15, r31
    397e:	f0 2d       	mov	r31, r0
    3980:	03 e0       	ldi	r16, 0x03	; 3
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	45 e5       	ldi	r20, 0x55	; 85
    3988:	50 e0       	ldi	r21, 0x00	; 0
    398a:	66 e2       	ldi	r22, 0x26	; 38
    398c:	72 e0       	ldi	r23, 0x02	; 2
    398e:	8f ed       	ldi	r24, 0xDF	; 223
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	0e 94 df 10 	call	0x21be	; 0x21be <xTaskCreate>
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	0f 90       	pop	r0
    399c:	df 91       	pop	r29
    399e:	cf 91       	pop	r28
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	08 95       	ret

000039a8 <xTimerCreate>:
    39a8:	ef 92       	push	r14
    39aa:	ff 92       	push	r15
    39ac:	0f 93       	push	r16
    39ae:	1f 93       	push	r17
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	2b 97       	sbiw	r28, 0x0b	; 11
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	9c 83       	std	Y+4, r25	; 0x04
    39c6:	8b 83       	std	Y+3, r24	; 0x03
    39c8:	7e 83       	std	Y+6, r23	; 0x06
    39ca:	6d 83       	std	Y+5, r22	; 0x05
    39cc:	4f 83       	std	Y+7, r20	; 0x07
    39ce:	39 87       	std	Y+9, r19	; 0x09
    39d0:	28 87       	std	Y+8, r18	; 0x08
    39d2:	1b 87       	std	Y+11, r17	; 0x0b
    39d4:	0a 87       	std	Y+10, r16	; 0x0a
    39d6:	84 e1       	ldi	r24, 0x14	; 20
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	0e 94 8d 01 	call	0x31a	; 0x31a <pvPortMalloc>
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	89 83       	std	Y+1, r24	; 0x01
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	9a 81       	ldd	r25, Y+2	; 0x02
    39e6:	89 2b       	or	r24, r25
    39e8:	91 f0       	breq	.+36     	; 0x3a0e <xTimerCreate+0x66>
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
    39ec:	9a 81       	ldd	r25, Y+2	; 0x02
    39ee:	fc 01       	movw	r30, r24
    39f0:	13 8a       	std	Z+19, r1	; 0x13
    39f2:	e9 81       	ldd	r30, Y+1	; 0x01
    39f4:	fa 81       	ldd	r31, Y+2	; 0x02
    39f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    39f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    39fa:	28 85       	ldd	r18, Y+8	; 0x08
    39fc:	39 85       	ldd	r19, Y+9	; 0x09
    39fe:	6d 81       	ldd	r22, Y+5	; 0x05
    3a00:	7e 81       	ldd	r23, Y+6	; 0x06
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	9c 81       	ldd	r25, Y+4	; 0x04
    3a06:	7f 01       	movw	r14, r30
    3a08:	8a 01       	movw	r16, r20
    3a0a:	4f 81       	ldd	r20, Y+7	; 0x07
    3a0c:	0f d0       	rcall	.+30     	; 0x3a2c <prvInitialiseNewTimer>
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	9a 81       	ldd	r25, Y+2	; 0x02
    3a12:	2b 96       	adiw	r28, 0x0b	; 11
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	ff 90       	pop	r15
    3a28:	ef 90       	pop	r14
    3a2a:	08 95       	ret

00003a2c <prvInitialiseNewTimer>:
    3a2c:	ef 92       	push	r14
    3a2e:	ff 92       	push	r15
    3a30:	0f 93       	push	r16
    3a32:	1f 93       	push	r17
    3a34:	cf 93       	push	r28
    3a36:	df 93       	push	r29
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
    3a3c:	2b 97       	sbiw	r28, 0x0b	; 11
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	9a 83       	std	Y+2, r25	; 0x02
    3a4a:	89 83       	std	Y+1, r24	; 0x01
    3a4c:	7c 83       	std	Y+4, r23	; 0x04
    3a4e:	6b 83       	std	Y+3, r22	; 0x03
    3a50:	4d 83       	std	Y+5, r20	; 0x05
    3a52:	3f 83       	std	Y+7, r19	; 0x07
    3a54:	2e 83       	std	Y+6, r18	; 0x06
    3a56:	19 87       	std	Y+9, r17	; 0x09
    3a58:	08 87       	std	Y+8, r16	; 0x08
    3a5a:	fb 86       	std	Y+11, r15	; 0x0b
    3a5c:	ea 86       	std	Y+10, r14	; 0x0a
    3a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a62:	89 2b       	or	r24, r25
    3a64:	79 f1       	breq	.+94     	; 0x3ac4 <prvInitialiseNewTimer+0x98>
    3a66:	c0 d3       	rcall	.+1920   	; 0x41e8 <prvCheckForValidListAndQueue>
    3a68:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a6c:	29 81       	ldd	r18, Y+1	; 0x01
    3a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    3a70:	fc 01       	movw	r30, r24
    3a72:	31 83       	std	Z+1, r19	; 0x01
    3a74:	20 83       	st	Z, r18
    3a76:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a78:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    3a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    3a7e:	fc 01       	movw	r30, r24
    3a80:	35 87       	std	Z+13, r19	; 0x0d
    3a82:	24 87       	std	Z+12, r18	; 0x0c
    3a84:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a86:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a88:	2e 81       	ldd	r18, Y+6	; 0x06
    3a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	37 87       	std	Z+15, r19	; 0x0f
    3a90:	26 87       	std	Z+14, r18	; 0x0e
    3a92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a94:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a96:	28 85       	ldd	r18, Y+8	; 0x08
    3a98:	39 85       	ldd	r19, Y+9	; 0x09
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	31 8b       	std	Z+17, r19	; 0x11
    3a9e:	20 8b       	std	Z+16, r18	; 0x10
    3aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aa2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aa4:	02 96       	adiw	r24, 0x02	; 2
    3aa6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <vListInitialiseItem>
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	88 23       	and	r24, r24
    3aae:	51 f0       	breq	.+20     	; 0x3ac4 <prvInitialiseNewTimer+0x98>
    3ab0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ab2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ab4:	fc 01       	movw	r30, r24
    3ab6:	83 89       	ldd	r24, Z+19	; 0x13
    3ab8:	28 2f       	mov	r18, r24
    3aba:	24 60       	ori	r18, 0x04	; 4
    3abc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3abe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	23 8b       	std	Z+19, r18	; 0x13
    3ac4:	00 00       	nop
    3ac6:	2b 96       	adiw	r28, 0x0b	; 11
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	0f 91       	pop	r16
    3ada:	ff 90       	pop	r15
    3adc:	ef 90       	pop	r14
    3ade:	08 95       	ret

00003ae0 <xTimerGenericCommand>:
    3ae0:	0f 93       	push	r16
    3ae2:	1f 93       	push	r17
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	2f 97       	sbiw	r28, 0x0f	; 15
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	98 87       	std	Y+8, r25	; 0x08
    3afa:	8f 83       	std	Y+7, r24	; 0x07
    3afc:	69 87       	std	Y+9, r22	; 0x09
    3afe:	5b 87       	std	Y+11, r21	; 0x0b
    3b00:	4a 87       	std	Y+10, r20	; 0x0a
    3b02:	3d 87       	std	Y+13, r19	; 0x0d
    3b04:	2c 87       	std	Y+12, r18	; 0x0c
    3b06:	1f 87       	std	Y+15, r17	; 0x0f
    3b08:	0e 87       	std	Y+14, r16	; 0x0e
    3b0a:	19 82       	std	Y+1, r1	; 0x01
    3b0c:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    3b10:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    3b14:	89 2b       	or	r24, r25
    3b16:	c9 f1       	breq	.+114    	; 0x3b8a <xTimerGenericCommand+0xaa>
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	8a 83       	std	Y+2, r24	; 0x02
    3b1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b20:	9c 83       	std	Y+4, r25	; 0x04
    3b22:	8b 83       	std	Y+3, r24	; 0x03
    3b24:	8f 81       	ldd	r24, Y+7	; 0x07
    3b26:	98 85       	ldd	r25, Y+8	; 0x08
    3b28:	9e 83       	std	Y+6, r25	; 0x06
    3b2a:	8d 83       	std	Y+5, r24	; 0x05
    3b2c:	89 85       	ldd	r24, Y+9	; 0x09
    3b2e:	86 30       	cpi	r24, 0x06	; 6
    3b30:	fc f4       	brge	.+62     	; 0x3b70 <xTimerGenericCommand+0x90>
    3b32:	e7 d9       	rcall	.-3122   	; 0x2f02 <xTaskGetSchedulerState>
    3b34:	82 30       	cpi	r24, 0x02	; 2
    3b36:	71 f4       	brne	.+28     	; 0x3b54 <xTimerGenericCommand+0x74>
    3b38:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    3b3c:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    3b40:	4e 85       	ldd	r20, Y+14	; 0x0e
    3b42:	5f 85       	ldd	r21, Y+15	; 0x0f
    3b44:	be 01       	movw	r22, r28
    3b46:	6e 5f       	subi	r22, 0xFE	; 254
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
    3b50:	89 83       	std	Y+1, r24	; 0x01
    3b52:	1b c0       	rjmp	.+54     	; 0x3b8a <xTimerGenericCommand+0xaa>
    3b54:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    3b58:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    3b5c:	be 01       	movw	r22, r28
    3b5e:	6e 5f       	subi	r22, 0xFE	; 254
    3b60:	7f 4f       	sbci	r23, 0xFF	; 255
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	40 e0       	ldi	r20, 0x00	; 0
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
    3b6c:	89 83       	std	Y+1, r24	; 0x01
    3b6e:	0d c0       	rjmp	.+26     	; 0x3b8a <xTimerGenericCommand+0xaa>
    3b70:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    3b74:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    3b78:	4c 85       	ldd	r20, Y+12	; 0x0c
    3b7a:	5d 85       	ldd	r21, Y+13	; 0x0d
    3b7c:	be 01       	movw	r22, r28
    3b7e:	6e 5f       	subi	r22, 0xFE	; 254
    3b80:	7f 4f       	sbci	r23, 0xFF	; 255
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	0e 94 2a 08 	call	0x1054	; 0x1054 <xQueueGenericSendFromISR>
    3b88:	89 83       	std	Y+1, r24	; 0x01
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	2f 96       	adiw	r28, 0x0f	; 15
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	08 95       	ret

00003ba2 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    3ba2:	0f 93       	push	r16
    3ba4:	1f 93       	push	r17
    3ba6:	cf 93       	push	r28
    3ba8:	df 93       	push	r29
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	27 97       	sbiw	r28, 0x07	; 7
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	9d 83       	std	Y+5, r25	; 0x05
    3bbc:	8c 83       	std	Y+4, r24	; 0x04
    3bbe:	7f 83       	std	Y+7, r23	; 0x07
    3bc0:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3bc2:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    3bc6:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    3bca:	fc 01       	movw	r30, r24
    3bcc:	85 81       	ldd	r24, Z+5	; 0x05
    3bce:	96 81       	ldd	r25, Z+6	; 0x06
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	86 81       	ldd	r24, Z+6	; 0x06
    3bd4:	97 81       	ldd	r25, Z+7	; 0x07
    3bd6:	9a 83       	std	Y+2, r25	; 0x02
    3bd8:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	02 96       	adiw	r24, 0x02	; 2
    3be0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	9a 81       	ldd	r25, Y+2	; 0x02
    3be8:	fc 01       	movw	r30, r24
    3bea:	83 89       	ldd	r24, Z+19	; 0x13
    3bec:	88 2f       	mov	r24, r24
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	84 70       	andi	r24, 0x04	; 4
    3bf2:	99 27       	eor	r25, r25
    3bf4:	89 2b       	or	r24, r25
    3bf6:	f9 f0       	breq	.+62     	; 0x3c36 <prvProcessExpiredTimer+0x94>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	24 85       	ldd	r18, Z+12	; 0x0c
    3c00:	35 85       	ldd	r19, Z+13	; 0x0d
    3c02:	8c 81       	ldd	r24, Y+4	; 0x04
    3c04:	9d 81       	ldd	r25, Y+5	; 0x05
    3c06:	b9 01       	movw	r22, r18
    3c08:	68 0f       	add	r22, r24
    3c0a:	79 1f       	adc	r23, r25
    3c0c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c0e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c10:	4e 81       	ldd	r20, Y+6	; 0x06
    3c12:	5f 81       	ldd	r21, Y+7	; 0x07
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	e6 d0       	rcall	.+460    	; 0x3de6 <prvInsertTimerInActiveList>
    3c1a:	88 23       	and	r24, r24
    3c1c:	b1 f0       	breq	.+44     	; 0x3c4a <prvProcessExpiredTimer+0xa8>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3c1e:	4c 81       	ldd	r20, Y+4	; 0x04
    3c20:	5d 81       	ldd	r21, Y+5	; 0x05
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	00 e0       	ldi	r16, 0x00	; 0
    3c28:	10 e0       	ldi	r17, 0x00	; 0
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	60 e0       	ldi	r22, 0x00	; 0
    3c30:	57 df       	rcall	.-338    	; 0x3ae0 <xTimerGenericCommand>
    3c32:	8b 83       	std	Y+3, r24	; 0x03
    3c34:	0a c0       	rjmp	.+20     	; 0x3c4a <prvProcessExpiredTimer+0xa8>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	83 89       	ldd	r24, Z+19	; 0x13
    3c3e:	28 2f       	mov	r18, r24
    3c40:	2e 7f       	andi	r18, 0xFE	; 254
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	9a 81       	ldd	r25, Y+2	; 0x02
    3c46:	fc 01       	movw	r30, r24
    3c48:	23 8b       	std	Z+19, r18	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4e:	fc 01       	movw	r30, r24
    3c50:	20 89       	ldd	r18, Z+16	; 0x10
    3c52:	31 89       	ldd	r19, Z+17	; 0x11
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	9a 81       	ldd	r25, Y+2	; 0x02
    3c58:	f9 01       	movw	r30, r18
    3c5a:	19 95       	eicall
}
    3c5c:	00 00       	nop
    3c5e:	27 96       	adiw	r28, 0x07	; 7
    3c60:	0f b6       	in	r0, 0x3f	; 63
    3c62:	f8 94       	cli
    3c64:	de bf       	out	0x3e, r29	; 62
    3c66:	0f be       	out	0x3f, r0	; 63
    3c68:	cd bf       	out	0x3d, r28	; 61
    3c6a:	df 91       	pop	r29
    3c6c:	cf 91       	pop	r28
    3c6e:	1f 91       	pop	r17
    3c70:	0f 91       	pop	r16
    3c72:	08 95       	ret

00003c74 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    3c74:	cf 93       	push	r28
    3c76:	df 93       	push	r29
    3c78:	00 d0       	rcall	.+0      	; 0x3c7a <prvProcessTimerOrBlockTask+0x6>
    3c7a:	00 d0       	rcall	.+0      	; 0x3c7c <prvProcessTimerOrBlockTask+0x8>
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
    3c80:	9d 83       	std	Y+5, r25	; 0x05
    3c82:	8c 83       	std	Y+4, r24	; 0x04
    3c84:	6e 83       	std	Y+6, r22	; 0x06
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3c86:	0e 94 13 13 	call	0x2626	; 0x2626 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c8a:	ce 01       	movw	r24, r28
    3c8c:	03 96       	adiw	r24, 0x03	; 3
    3c8e:	7c d0       	rcall	.+248    	; 0x3d88 <prvSampleTimeNow>
    3c90:	9a 83       	std	Y+2, r25	; 0x02
    3c92:	89 83       	std	Y+1, r24	; 0x01
        if( xTimerListsWereSwitched == pdFALSE )
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	88 23       	and	r24, r24
    3c98:	b1 f5       	brne	.+108    	; 0x3d06 <prvProcessTimerOrBlockTask+0x92>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c9c:	88 23       	and	r24, r24
    3c9e:	81 f4       	brne	.+32     	; 0x3cc0 <prvProcessTimerOrBlockTask+0x4c>
    3ca0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ca2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca8:	82 17       	cp	r24, r18
    3caa:	93 07       	cpc	r25, r19
    3cac:	48 f0       	brcs	.+18     	; 0x3cc0 <prvProcessTimerOrBlockTask+0x4c>
            {
                ( void ) xTaskResumeAll();
    3cae:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3cb2:	29 81       	ldd	r18, Y+1	; 0x01
    3cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    3cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cba:	b9 01       	movw	r22, r18
    3cbc:	72 df       	rcall	.-284    	; 0x3ba2 <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3cbe:	25 c0       	rjmp	.+74     	; 0x3d0a <prvProcessTimerOrBlockTask+0x96>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    3cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc2:	88 23       	and	r24, r24
    3cc4:	59 f0       	breq	.+22     	; 0x3cdc <prvProcessTimerOrBlockTask+0x68>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3cc6:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <pxOverflowTimerList>
    3cca:	90 91 2b 09 	lds	r25, 0x092B	; 0x80092b <pxOverflowTimerList+0x1>
    3cce:	fc 01       	movw	r30, r24
    3cd0:	90 81       	ld	r25, Z
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	99 23       	and	r25, r25
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <prvProcessTimerOrBlockTask+0x66>
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	8e 83       	std	Y+6, r24	; 0x06
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    3cde:	3d 81       	ldd	r19, Y+5	; 0x05
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce4:	28 1b       	sub	r18, r24
    3ce6:	39 0b       	sbc	r19, r25
    3ce8:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    3cec:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    3cf0:	4e 81       	ldd	r20, Y+6	; 0x06
    3cf2:	b9 01       	movw	r22, r18
    3cf4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    3cf8:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
    3cfc:	88 23       	and	r24, r24
    3cfe:	29 f4       	brne	.+10     	; 0x3d0a <prvProcessTimerOrBlockTask+0x96>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3d00:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <prvProcessTimerOrBlockTask+0x96>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3d06:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskResumeAll>
        }
    }
}
    3d0a:	00 00       	nop
    3d0c:	26 96       	adiw	r28, 0x06	; 6
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
    3d18:	df 91       	pop	r29
    3d1a:	cf 91       	pop	r28
    3d1c:	08 95       	ret

00003d1e <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <prvGetNextExpireTime+0x6>
    3d24:	1f 92       	push	r1
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	9c 83       	std	Y+4, r25	; 0x04
    3d2c:	8b 83       	std	Y+3, r24	; 0x03
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3d2e:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    3d32:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    3d36:	fc 01       	movw	r30, r24
    3d38:	90 81       	ld	r25, Z
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	99 23       	and	r25, r25
    3d3e:	09 f0       	breq	.+2      	; 0x3d42 <prvGetNextExpireTime+0x24>
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	28 2f       	mov	r18, r24
    3d44:	8b 81       	ldd	r24, Y+3	; 0x03
    3d46:	9c 81       	ldd	r25, Y+4	; 0x04
    3d48:	fc 01       	movw	r30, r24
    3d4a:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d50:	fc 01       	movw	r30, r24
    3d52:	80 81       	ld	r24, Z
    3d54:	88 23       	and	r24, r24
    3d56:	69 f4       	brne	.+26     	; 0x3d72 <prvGetNextExpireTime+0x54>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3d58:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    3d5c:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    3d60:	fc 01       	movw	r30, r24
    3d62:	85 81       	ldd	r24, Z+5	; 0x05
    3d64:	96 81       	ldd	r25, Z+6	; 0x06
    3d66:	fc 01       	movw	r30, r24
    3d68:	80 81       	ld	r24, Z
    3d6a:	91 81       	ldd	r25, Z+1	; 0x01
    3d6c:	9a 83       	std	Y+2, r25	; 0x02
    3d6e:	89 83       	std	Y+1, r24	; 0x01
    3d70:	02 c0       	rjmp	.+4      	; 0x3d76 <prvGetNextExpireTime+0x58>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3d72:	1a 82       	std	Y+2, r1	; 0x02
    3d74:	19 82       	std	Y+1, r1	; 0x01
    }

    return xNextExpireTime;
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	08 95       	ret

00003d88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	00 d0       	rcall	.+0      	; 0x3d8e <prvSampleTimeNow+0x6>
    3d8e:	1f 92       	push	r1
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	9c 83       	std	Y+4, r25	; 0x04
    3d96:	8b 83       	std	Y+3, r24	; 0x03
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3d98:	0e 94 b5 13 	call	0x276a	; 0x276a <xTaskGetTickCount>
    3d9c:	9a 83       	std	Y+2, r25	; 0x02
    3d9e:	89 83       	std	Y+1, r24	; 0x01

    if( xTimeNow < xLastTime )
    3da0:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <xLastTime.2432>
    3da4:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <xLastTime.2432+0x1>
    3da8:	29 81       	ldd	r18, Y+1	; 0x01
    3daa:	3a 81       	ldd	r19, Y+2	; 0x02
    3dac:	28 17       	cp	r18, r24
    3dae:	39 07       	cpc	r19, r25
    3db0:	38 f4       	brcc	.+14     	; 0x3dc0 <prvSampleTimeNow+0x38>
    {
        prvSwitchTimerLists();
    3db2:	7c d1       	rcall	.+760    	; 0x40ac <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    3db4:	8b 81       	ldd	r24, Y+3	; 0x03
    3db6:	9c 81       	ldd	r25, Y+4	; 0x04
    3db8:	21 e0       	ldi	r18, 0x01	; 1
    3dba:	fc 01       	movw	r30, r24
    3dbc:	20 83       	st	Z, r18
    3dbe:	04 c0       	rjmp	.+8      	; 0x3dc8 <prvSampleTimeNow+0x40>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	9a 81       	ldd	r25, Y+2	; 0x02
    3dcc:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <xLastTime.2432+0x1>
    3dd0:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <xLastTime.2432>

    return xTimeNow;
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	08 95       	ret

00003de6 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
    3dee:	29 97       	sbiw	r28, 0x09	; 9
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	9b 83       	std	Y+3, r25	; 0x03
    3dfc:	8a 83       	std	Y+2, r24	; 0x02
    3dfe:	7d 83       	std	Y+5, r23	; 0x05
    3e00:	6c 83       	std	Y+4, r22	; 0x04
    3e02:	5f 83       	std	Y+7, r21	; 0x07
    3e04:	4e 83       	std	Y+6, r20	; 0x06
    3e06:	39 87       	std	Y+9, r19	; 0x09
    3e08:	28 87       	std	Y+8, r18	; 0x08
BaseType_t xProcessTimerNow = pdFALSE;
    3e0a:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    3e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e10:	2c 81       	ldd	r18, Y+4	; 0x04
    3e12:	3d 81       	ldd	r19, Y+5	; 0x05
    3e14:	fc 01       	movw	r30, r24
    3e16:	33 83       	std	Z+3, r19	; 0x03
    3e18:	22 83       	std	Z+2, r18	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e1e:	2a 81       	ldd	r18, Y+2	; 0x02
    3e20:	3b 81       	ldd	r19, Y+3	; 0x03
    3e22:	fc 01       	movw	r30, r24
    3e24:	31 87       	std	Z+9, r19	; 0x09
    3e26:	20 87       	std	Z+8, r18	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    3e28:	2c 81       	ldd	r18, Y+4	; 0x04
    3e2a:	3d 81       	ldd	r19, Y+5	; 0x05
    3e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e2e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e30:	82 17       	cp	r24, r18
    3e32:	93 07       	cpc	r25, r19
    3e34:	f0 f0       	brcs	.+60     	; 0x3e72 <prvInsertTimerInActiveList+0x8c>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3e36:	2e 81       	ldd	r18, Y+6	; 0x06
    3e38:	3f 81       	ldd	r19, Y+7	; 0x07
    3e3a:	88 85       	ldd	r24, Y+8	; 0x08
    3e3c:	99 85       	ldd	r25, Y+9	; 0x09
    3e3e:	28 1b       	sub	r18, r24
    3e40:	39 0b       	sbc	r19, r25
    3e42:	8a 81       	ldd	r24, Y+2	; 0x02
    3e44:	9b 81       	ldd	r25, Y+3	; 0x03
    3e46:	fc 01       	movw	r30, r24
    3e48:	84 85       	ldd	r24, Z+12	; 0x0c
    3e4a:	95 85       	ldd	r25, Z+13	; 0x0d
    3e4c:	28 17       	cp	r18, r24
    3e4e:	39 07       	cpc	r19, r25
    3e50:	18 f0       	brcs	.+6      	; 0x3e58 <prvInsertTimerInActiveList+0x72>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	2a c0       	rjmp	.+84     	; 0x3eac <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    3e58:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e5c:	9c 01       	movw	r18, r24
    3e5e:	2e 5f       	subi	r18, 0xFE	; 254
    3e60:	3f 4f       	sbci	r19, 0xFF	; 255
    3e62:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <pxOverflowTimerList>
    3e66:	90 91 2b 09 	lds	r25, 0x092B	; 0x80092b <pxOverflowTimerList+0x1>
    3e6a:	b9 01       	movw	r22, r18
    3e6c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInsert>
    3e70:	1d c0       	rjmp	.+58     	; 0x3eac <prvInsertTimerInActiveList+0xc6>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    3e72:	2e 81       	ldd	r18, Y+6	; 0x06
    3e74:	3f 81       	ldd	r19, Y+7	; 0x07
    3e76:	88 85       	ldd	r24, Y+8	; 0x08
    3e78:	99 85       	ldd	r25, Y+9	; 0x09
    3e7a:	28 17       	cp	r18, r24
    3e7c:	39 07       	cpc	r19, r25
    3e7e:	50 f4       	brcc	.+20     	; 0x3e94 <prvInsertTimerInActiveList+0xae>
    3e80:	2c 81       	ldd	r18, Y+4	; 0x04
    3e82:	3d 81       	ldd	r19, Y+5	; 0x05
    3e84:	88 85       	ldd	r24, Y+8	; 0x08
    3e86:	99 85       	ldd	r25, Y+9	; 0x09
    3e88:	28 17       	cp	r18, r24
    3e8a:	39 07       	cpc	r19, r25
    3e8c:	18 f0       	brcs	.+6      	; 0x3e94 <prvInsertTimerInActiveList+0xae>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	89 83       	std	Y+1, r24	; 0x01
    3e92:	0c c0       	rjmp	.+24     	; 0x3eac <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3e94:	8a 81       	ldd	r24, Y+2	; 0x02
    3e96:	9b 81       	ldd	r25, Y+3	; 0x03
    3e98:	9c 01       	movw	r18, r24
    3e9a:	2e 5f       	subi	r18, 0xFE	; 254
    3e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e9e:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    3ea2:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    3ea6:	b9 01       	movw	r22, r18
    3ea8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInsert>
        }
    }

    return xProcessTimerNow;
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    3eae:	29 96       	adiw	r28, 0x09	; 9
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	08 95       	ret

00003ec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
    3ecc:	2b 97       	sbiw	r28, 0x0b	; 11
    3ece:	0f b6       	in	r0, 0x3f	; 63
    3ed0:	f8 94       	cli
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3ed8:	ce c0       	rjmp	.+412    	; 0x4076 <prvProcessReceivedCommands+0x1b6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3eda:	8e 81       	ldd	r24, Y+6	; 0x06
    3edc:	88 23       	and	r24, r24
    3ede:	0c f4       	brge	.+2      	; 0x3ee2 <prvProcessReceivedCommands+0x22>
    3ee0:	ca c0       	rjmp	.+404    	; 0x4076 <prvProcessReceivedCommands+0x1b6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3ee2:	89 85       	ldd	r24, Y+9	; 0x09
    3ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee6:	9a 83       	std	Y+2, r25	; 0x02
    3ee8:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	dc 01       	movw	r26, r24
    3ef0:	1a 96       	adiw	r26, 0x0a	; 10
    3ef2:	8d 91       	ld	r24, X+
    3ef4:	9c 91       	ld	r25, X
    3ef6:	1b 97       	sbiw	r26, 0x0b	; 11
    3ef8:	89 2b       	or	r24, r25
    3efa:	29 f0       	breq	.+10     	; 0x3f06 <prvProcessReceivedCommands+0x46>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	9a 81       	ldd	r25, Y+2	; 0x02
    3f00:	02 96       	adiw	r24, 0x02	; 2
    3f02:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3f06:	ce 01       	movw	r24, r28
    3f08:	0b 96       	adiw	r24, 0x0b	; 11
    3f0a:	3e df       	rcall	.-388    	; 0x3d88 <prvSampleTimeNow>
    3f0c:	9c 83       	std	Y+4, r25	; 0x04
    3f0e:	8b 83       	std	Y+3, r24	; 0x03

            switch( xMessage.xMessageID )
    3f10:	8e 81       	ldd	r24, Y+6	; 0x06
    3f12:	08 2e       	mov	r0, r24
    3f14:	00 0c       	add	r0, r0
    3f16:	99 0b       	sbc	r25, r25
    3f18:	09 2e       	mov	r0, r25
    3f1a:	00 0c       	add	r0, r0
    3f1c:	aa 0b       	sbc	r26, r26
    3f1e:	bb 0b       	sbc	r27, r27
    3f20:	40 e0       	ldi	r20, 0x00	; 0
    3f22:	50 e0       	ldi	r21, 0x00	; 0
    3f24:	29 e0       	ldi	r18, 0x09	; 9
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	84 1b       	sub	r24, r20
    3f2a:	95 0b       	sbc	r25, r21
    3f2c:	28 17       	cp	r18, r24
    3f2e:	39 07       	cpc	r19, r25
    3f30:	08 f4       	brcc	.+2      	; 0x3f34 <prvProcessReceivedCommands+0x74>
    3f32:	a0 c0       	rjmp	.+320    	; 0x4074 <prvProcessReceivedCommands+0x1b4>
    3f34:	fc 01       	movw	r30, r24
    3f36:	88 27       	eor	r24, r24
    3f38:	ee 58       	subi	r30, 0x8E	; 142
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f3e:	0c 94 af 33 	jmp	0x675e	; 0x675e <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	9a 81       	ldd	r25, Y+2	; 0x02
    3f46:	fc 01       	movw	r30, r24
    3f48:	83 89       	ldd	r24, Z+19	; 0x13
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	21 60       	ori	r18, 0x01	; 1
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	9a 81       	ldd	r25, Y+2	; 0x02
    3f52:	dc 01       	movw	r26, r24
    3f54:	53 96       	adiw	r26, 0x13	; 19
    3f56:	2c 93       	st	X, r18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3f58:	ef 81       	ldd	r30, Y+7	; 0x07
    3f5a:	f8 85       	ldd	r31, Y+8	; 0x08
    3f5c:	2f 81       	ldd	r18, Y+7	; 0x07
    3f5e:	38 85       	ldd	r19, Y+8	; 0x08
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	dc 01       	movw	r26, r24
    3f66:	1c 96       	adiw	r26, 0x0c	; 12
    3f68:	8d 91       	ld	r24, X+
    3f6a:	9c 91       	ld	r25, X
    3f6c:	1d 97       	sbiw	r26, 0x0d	; 13
    3f6e:	b9 01       	movw	r22, r18
    3f70:	68 0f       	add	r22, r24
    3f72:	79 1f       	adc	r23, r25
    3f74:	4b 81       	ldd	r20, Y+3	; 0x03
    3f76:	5c 81       	ldd	r21, Y+4	; 0x04
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7c:	9f 01       	movw	r18, r30
    3f7e:	33 df       	rcall	.-410    	; 0x3de6 <prvInsertTimerInActiveList>
    3f80:	88 23       	and	r24, r24
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <prvProcessReceivedCommands+0xc6>
    3f84:	78 c0       	rjmp	.+240    	; 0x4076 <prvProcessReceivedCommands+0x1b6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	20 89       	ldd	r18, Z+16	; 0x10
    3f8e:	31 89       	ldd	r19, Z+17	; 0x11
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	9a 81       	ldd	r25, Y+2	; 0x02
    3f94:	f9 01       	movw	r30, r18
    3f96:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	53 96       	adiw	r26, 0x13	; 19
    3fa0:	8c 91       	ld	r24, X
    3fa2:	88 2f       	mov	r24, r24
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	84 70       	andi	r24, 0x04	; 4
    3fa8:	99 27       	eor	r25, r25
    3faa:	89 2b       	or	r24, r25
    3fac:	09 f4       	brne	.+2      	; 0x3fb0 <prvProcessReceivedCommands+0xf0>
    3fae:	63 c0       	rjmp	.+198    	; 0x4076 <prvProcessReceivedCommands+0x1b6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3fb0:	2f 81       	ldd	r18, Y+7	; 0x07
    3fb2:	38 85       	ldd	r19, Y+8	; 0x08
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb8:	fc 01       	movw	r30, r24
    3fba:	84 85       	ldd	r24, Z+12	; 0x0c
    3fbc:	95 85       	ldd	r25, Z+13	; 0x0d
    3fbe:	a9 01       	movw	r20, r18
    3fc0:	48 0f       	add	r20, r24
    3fc2:	59 1f       	adc	r21, r25
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc8:	00 e0       	ldi	r16, 0x00	; 0
    3fca:	10 e0       	ldi	r17, 0x00	; 0
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	60 e0       	ldi	r22, 0x00	; 0
    3fd2:	86 dd       	rcall	.-1268   	; 0x3ae0 <xTimerGenericCommand>
    3fd4:	8d 83       	std	Y+5, r24	; 0x05
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    3fd6:	4f c0       	rjmp	.+158    	; 0x4076 <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	dc 01       	movw	r26, r24
    3fde:	53 96       	adiw	r26, 0x13	; 19
    3fe0:	8c 91       	ld	r24, X
    3fe2:	28 2f       	mov	r18, r24
    3fe4:	2e 7f       	andi	r18, 0xFE	; 254
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	fc 01       	movw	r30, r24
    3fec:	23 8b       	std	Z+19, r18	; 0x13
                    break;
    3fee:	43 c0       	rjmp	.+134    	; 0x4076 <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3ff0:	89 81       	ldd	r24, Y+1	; 0x01
    3ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	53 96       	adiw	r26, 0x13	; 19
    3ff8:	8c 91       	ld	r24, X
    3ffa:	28 2f       	mov	r18, r24
    3ffc:	21 60       	ori	r18, 0x01	; 1
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	9a 81       	ldd	r25, Y+2	; 0x02
    4002:	fc 01       	movw	r30, r24
    4004:	23 8b       	std	Z+19, r18	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4006:	2f 81       	ldd	r18, Y+7	; 0x07
    4008:	38 85       	ldd	r19, Y+8	; 0x08
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	9a 81       	ldd	r25, Y+2	; 0x02
    400e:	dc 01       	movw	r26, r24
    4010:	1d 96       	adiw	r26, 0x0d	; 13
    4012:	3c 93       	st	X, r19
    4014:	2e 93       	st	-X, r18
    4016:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	9a 81       	ldd	r25, Y+2	; 0x02
    401c:	fc 01       	movw	r30, r24
    401e:	24 85       	ldd	r18, Z+12	; 0x0c
    4020:	35 85       	ldd	r19, Z+13	; 0x0d
    4022:	8b 81       	ldd	r24, Y+3	; 0x03
    4024:	9c 81       	ldd	r25, Y+4	; 0x04
    4026:	b9 01       	movw	r22, r18
    4028:	68 0f       	add	r22, r24
    402a:	79 1f       	adc	r23, r25
    402c:	2b 81       	ldd	r18, Y+3	; 0x03
    402e:	3c 81       	ldd	r19, Y+4	; 0x04
    4030:	4b 81       	ldd	r20, Y+3	; 0x03
    4032:	5c 81       	ldd	r21, Y+4	; 0x04
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	9a 81       	ldd	r25, Y+2	; 0x02
    4038:	d6 de       	rcall	.-596    	; 0x3de6 <prvInsertTimerInActiveList>
                    break;
    403a:	1d c0       	rjmp	.+58     	; 0x4076 <prvProcessReceivedCommands+0x1b6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	9a 81       	ldd	r25, Y+2	; 0x02
    4040:	dc 01       	movw	r26, r24
    4042:	53 96       	adiw	r26, 0x13	; 19
    4044:	8c 91       	ld	r24, X
    4046:	88 2f       	mov	r24, r24
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	82 70       	andi	r24, 0x02	; 2
    404c:	99 27       	eor	r25, r25
    404e:	89 2b       	or	r24, r25
    4050:	29 f4       	brne	.+10     	; 0x405c <prvProcessReceivedCommands+0x19c>
                        {
                            vPortFree( pxTimer );
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	9a 81       	ldd	r25, Y+2	; 0x02
    4056:	0e 94 ae 01 	call	0x35c	; 0x35c <vPortFree>
    405a:	0d c0       	rjmp	.+26     	; 0x4076 <prvProcessReceivedCommands+0x1b6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
    4060:	fc 01       	movw	r30, r24
    4062:	83 89       	ldd	r24, Z+19	; 0x13
    4064:	28 2f       	mov	r18, r24
    4066:	2e 7f       	andi	r18, 0xFE	; 254
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	9a 81       	ldd	r25, Y+2	; 0x02
    406c:	dc 01       	movw	r26, r24
    406e:	53 96       	adiw	r26, 0x13	; 19
    4070:	2c 93       	st	X, r18
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    4072:	01 c0       	rjmp	.+2      	; 0x4076 <prvProcessReceivedCommands+0x1b6>

                default    :
                    /* Don't expect to get here. */
                    break;
    4074:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4076:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    407a:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    407e:	9e 01       	movw	r18, r28
    4080:	2a 5f       	subi	r18, 0xFA	; 250
    4082:	3f 4f       	sbci	r19, 0xFF	; 255
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	b9 01       	movw	r22, r18
    408a:	0e 94 88 08 	call	0x1110	; 0x1110 <xQueueReceive>
    408e:	88 23       	and	r24, r24
    4090:	09 f0       	breq	.+2      	; 0x4094 <prvProcessReceivedCommands+0x1d4>
    4092:	23 cf       	rjmp	.-442    	; 0x3eda <prvProcessReceivedCommands+0x1a>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    4094:	00 00       	nop
    4096:	2b 96       	adiw	r28, 0x0b	; 11
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	1f 91       	pop	r17
    40a8:	0f 91       	pop	r16
    40aa:	08 95       	ret

000040ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    40ac:	0f 93       	push	r16
    40ae:	1f 93       	push	r17
    40b0:	cf 93       	push	r28
    40b2:	df 93       	push	r29
    40b4:	cd b7       	in	r28, 0x3d	; 61
    40b6:	de b7       	in	r29, 0x3e	; 62
    40b8:	29 97       	sbiw	r28, 0x09	; 9
    40ba:	0f b6       	in	r0, 0x3f	; 63
    40bc:	f8 94       	cli
    40be:	de bf       	out	0x3e, r29	; 62
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    40c4:	68 c0       	rjmp	.+208    	; 0x4196 <prvSwitchTimerLists+0xea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    40c6:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    40ca:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    40ce:	fc 01       	movw	r30, r24
    40d0:	85 81       	ldd	r24, Z+5	; 0x05
    40d2:	96 81       	ldd	r25, Z+6	; 0x06
    40d4:	fc 01       	movw	r30, r24
    40d6:	80 81       	ld	r24, Z
    40d8:	91 81       	ldd	r25, Z+1	; 0x01
    40da:	9a 83       	std	Y+2, r25	; 0x02
    40dc:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    40de:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    40e2:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    40e6:	fc 01       	movw	r30, r24
    40e8:	85 81       	ldd	r24, Z+5	; 0x05
    40ea:	96 81       	ldd	r25, Z+6	; 0x06
    40ec:	fc 01       	movw	r30, r24
    40ee:	86 81       	ldd	r24, Z+6	; 0x06
    40f0:	97 81       	ldd	r25, Z+7	; 0x07
    40f2:	9c 83       	std	Y+4, r25	; 0x04
    40f4:	8b 83       	std	Y+3, r24	; 0x03
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    40f6:	8b 81       	ldd	r24, Y+3	; 0x03
    40f8:	9c 81       	ldd	r25, Y+4	; 0x04
    40fa:	02 96       	adiw	r24, 0x02	; 2
    40fc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	9c 81       	ldd	r25, Y+4	; 0x04
    4104:	fc 01       	movw	r30, r24
    4106:	20 89       	ldd	r18, Z+16	; 0x10
    4108:	31 89       	ldd	r19, Z+17	; 0x11
    410a:	8b 81       	ldd	r24, Y+3	; 0x03
    410c:	9c 81       	ldd	r25, Y+4	; 0x04
    410e:	f9 01       	movw	r30, r18
    4110:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4112:	8b 81       	ldd	r24, Y+3	; 0x03
    4114:	9c 81       	ldd	r25, Y+4	; 0x04
    4116:	fc 01       	movw	r30, r24
    4118:	83 89       	ldd	r24, Z+19	; 0x13
    411a:	88 2f       	mov	r24, r24
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	84 70       	andi	r24, 0x04	; 4
    4120:	99 27       	eor	r25, r25
    4122:	89 2b       	or	r24, r25
    4124:	c1 f1       	breq	.+112    	; 0x4196 <prvSwitchTimerLists+0xea>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4126:	8b 81       	ldd	r24, Y+3	; 0x03
    4128:	9c 81       	ldd	r25, Y+4	; 0x04
    412a:	fc 01       	movw	r30, r24
    412c:	24 85       	ldd	r18, Z+12	; 0x0c
    412e:	35 85       	ldd	r19, Z+13	; 0x0d
    4130:	89 81       	ldd	r24, Y+1	; 0x01
    4132:	9a 81       	ldd	r25, Y+2	; 0x02
    4134:	82 0f       	add	r24, r18
    4136:	93 1f       	adc	r25, r19
    4138:	9e 83       	std	Y+6, r25	; 0x06
    413a:	8d 83       	std	Y+5, r24	; 0x05
            if( xReloadTime > xNextExpireTime )
    413c:	2d 81       	ldd	r18, Y+5	; 0x05
    413e:	3e 81       	ldd	r19, Y+6	; 0x06
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	82 17       	cp	r24, r18
    4146:	93 07       	cpc	r25, r19
    4148:	d8 f4       	brcc	.+54     	; 0x4180 <prvSwitchTimerLists+0xd4>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    414a:	8b 81       	ldd	r24, Y+3	; 0x03
    414c:	9c 81       	ldd	r25, Y+4	; 0x04
    414e:	2d 81       	ldd	r18, Y+5	; 0x05
    4150:	3e 81       	ldd	r19, Y+6	; 0x06
    4152:	fc 01       	movw	r30, r24
    4154:	33 83       	std	Z+3, r19	; 0x03
    4156:	22 83       	std	Z+2, r18	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4158:	8b 81       	ldd	r24, Y+3	; 0x03
    415a:	9c 81       	ldd	r25, Y+4	; 0x04
    415c:	2b 81       	ldd	r18, Y+3	; 0x03
    415e:	3c 81       	ldd	r19, Y+4	; 0x04
    4160:	fc 01       	movw	r30, r24
    4162:	31 87       	std	Z+9, r19	; 0x09
    4164:	20 87       	std	Z+8, r18	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4166:	8b 81       	ldd	r24, Y+3	; 0x03
    4168:	9c 81       	ldd	r25, Y+4	; 0x04
    416a:	9c 01       	movw	r18, r24
    416c:	2e 5f       	subi	r18, 0xFE	; 254
    416e:	3f 4f       	sbci	r19, 0xFF	; 255
    4170:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    4174:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    4178:	b9 01       	movw	r22, r18
    417a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInsert>
    417e:	0b c0       	rjmp	.+22     	; 0x4196 <prvSwitchTimerLists+0xea>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4180:	49 81       	ldd	r20, Y+1	; 0x01
    4182:	5a 81       	ldd	r21, Y+2	; 0x02
    4184:	8b 81       	ldd	r24, Y+3	; 0x03
    4186:	9c 81       	ldd	r25, Y+4	; 0x04
    4188:	00 e0       	ldi	r16, 0x00	; 0
    418a:	10 e0       	ldi	r17, 0x00	; 0
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	a6 dc       	rcall	.-1716   	; 0x3ae0 <xTimerGenericCommand>
    4194:	8f 83       	std	Y+7, r24	; 0x07

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4196:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    419a:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    419e:	fc 01       	movw	r30, r24
    41a0:	80 81       	ld	r24, Z
    41a2:	88 23       	and	r24, r24
    41a4:	09 f0       	breq	.+2      	; 0x41a8 <prvSwitchTimerLists+0xfc>
    41a6:	8f cf       	rjmp	.-226    	; 0x40c6 <prvSwitchTimerLists+0x1a>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    41a8:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <pxCurrentTimerList>
    41ac:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <pxCurrentTimerList+0x1>
    41b0:	99 87       	std	Y+9, r25	; 0x09
    41b2:	88 87       	std	Y+8, r24	; 0x08
    pxCurrentTimerList = pxOverflowTimerList;
    41b4:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <pxOverflowTimerList>
    41b8:	90 91 2b 09 	lds	r25, 0x092B	; 0x80092b <pxOverflowTimerList+0x1>
    41bc:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <pxCurrentTimerList+0x1>
    41c0:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    41c4:	88 85       	ldd	r24, Y+8	; 0x08
    41c6:	99 85       	ldd	r25, Y+9	; 0x09
    41c8:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <pxOverflowTimerList+0x1>
    41cc:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <pxOverflowTimerList>
}
    41d0:	00 00       	nop
    41d2:	29 96       	adiw	r28, 0x09	; 9
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	f8 94       	cli
    41d8:	de bf       	out	0x3e, r29	; 62
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	cd bf       	out	0x3d, r28	; 61
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    41e4:	0f 91       	pop	r16
    41e6:	08 95       	ret

000041e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    41e8:	cf 93       	push	r28
    41ea:	df 93       	push	r29
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    41f6:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <xTimerQueue>
    41fa:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <xTimerQueue+0x1>
    41fe:	89 2b       	or	r24, r25
    4200:	e9 f4       	brne	.+58     	; 0x423c <prvCheckForValidListAndQueue+0x54>
        {
            vListInitialise( &xActiveTimerList1 );
    4202:	86 e1       	ldi	r24, 0x16	; 22
    4204:	99 e0       	ldi	r25, 0x09	; 9
    4206:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    420a:	8f e1       	ldi	r24, 0x1F	; 31
    420c:	99 e0       	ldi	r25, 0x09	; 9
    420e:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    4212:	86 e1       	ldi	r24, 0x16	; 22
    4214:	99 e0       	ldi	r25, 0x09	; 9
    4216:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <pxCurrentTimerList+0x1>
    421a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    421e:	8f e1       	ldi	r24, 0x1F	; 31
    4220:	99 e0       	ldi	r25, 0x09	; 9
    4222:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <pxOverflowTimerList+0x1>
    4226:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    422a:	40 e0       	ldi	r20, 0x00	; 0
    422c:	65 e0       	ldi	r22, 0x05	; 5
    422e:	8a e0       	ldi	r24, 0x0A	; 10
    4230:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericCreate>
    4234:	90 93 2d 09 	sts	0x092D, r25	; 0x80092d <xTimerQueue+0x1>
    4238:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    423c:	0f 90       	pop	r0
    423e:	0f be       	out	0x3f, r0	; 63
}
    4240:	00 00       	nop
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	08 95       	ret

00004248 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    4248:	cf 93       	push	r28
    424a:	df 93       	push	r29
    424c:	cd b7       	in	r28, 0x3d	; 61
    424e:	de b7       	in	r29, 0x3e	; 62
//     if (serialEventRun) serialEventRun();
}
    4250:	00 00       	nop
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	08 95       	ret

00004258 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    4258:	cf 93       	push	r28
    425a:	df 93       	push	r29
    425c:	cd b7       	in	r28, 0x3d	; 61
    425e:	de b7       	in	r29, 0x3e	; 62
    4260:	2e 97       	sbiw	r28, 0x0e	; 14
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    426c:	84 e2       	ldi	r24, 0x24	; 36
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	24 e2       	ldi	r18, 0x24	; 36
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	f9 01       	movw	r30, r18
    4276:	20 81       	ld	r18, Z
    4278:	20 68       	ori	r18, 0x80	; 128
    427a:	fc 01       	movw	r30, r24
    427c:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    427e:	85 e2       	ldi	r24, 0x25	; 37
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	25 e2       	ldi	r18, 0x25	; 37
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	f9 01       	movw	r30, r18
    4288:	20 81       	ld	r18, Z
    428a:	20 68       	ori	r18, 0x80	; 128
    428c:	fc 01       	movw	r30, r24
    428e:	20 83       	st	Z, r18
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	a8 e4       	ldi	r26, 0x48	; 72
    4296:	b2 e4       	ldi	r27, 0x42	; 66
    4298:	89 83       	std	Y+1, r24	; 0x01
    429a:	9a 83       	std	Y+2, r25	; 0x02
    429c:	ab 83       	std	Y+3, r26	; 0x03
    429e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	4a e7       	ldi	r20, 0x7A	; 122
    42a6:	55 e4       	ldi	r21, 0x45	; 69
    42a8:	69 81       	ldd	r22, Y+1	; 0x01
    42aa:	7a 81       	ldd	r23, Y+2	; 0x02
    42ac:	8b 81       	ldd	r24, Y+3	; 0x03
    42ae:	9c 81       	ldd	r25, Y+4	; 0x04
    42b0:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__mulsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	8d 83       	std	Y+5, r24	; 0x05
    42ba:	9e 83       	std	Y+6, r25	; 0x06
    42bc:	af 83       	std	Y+7, r26	; 0x07
    42be:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    42c0:	20 e0       	ldi	r18, 0x00	; 0
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	40 e8       	ldi	r20, 0x80	; 128
    42c6:	5f e3       	ldi	r21, 0x3F	; 63
    42c8:	6d 81       	ldd	r22, Y+5	; 0x05
    42ca:	7e 81       	ldd	r23, Y+6	; 0x06
    42cc:	8f 81       	ldd	r24, Y+7	; 0x07
    42ce:	98 85       	ldd	r25, Y+8	; 0x08
    42d0:	0e 94 1c 34 	call	0x6838	; 0x6838 <__cmpsf2>
    42d4:	88 23       	and	r24, r24
    42d6:	2c f4       	brge	.+10     	; 0x42e2 <vApplicationMallocFailedHook+0x8a>
		__ticks = 1;
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	9a 87       	std	Y+10, r25	; 0x0a
    42de:	89 87       	std	Y+9, r24	; 0x09
    42e0:	3f c0       	rjmp	.+126    	; 0x4360 <vApplicationMallocFailedHook+0x108>
	else if (__tmp > 65535)
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	3f ef       	ldi	r19, 0xFF	; 255
    42e6:	4f e7       	ldi	r20, 0x7F	; 127
    42e8:	57 e4       	ldi	r21, 0x47	; 71
    42ea:	6d 81       	ldd	r22, Y+5	; 0x05
    42ec:	7e 81       	ldd	r23, Y+6	; 0x06
    42ee:	8f 81       	ldd	r24, Y+7	; 0x07
    42f0:	98 85       	ldd	r25, Y+8	; 0x08
    42f2:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <__gesf2>
    42f6:	18 16       	cp	r1, r24
    42f8:	4c f5       	brge	.+82     	; 0x434c <vApplicationMallocFailedHook+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	40 e2       	ldi	r20, 0x20	; 32
    4300:	51 e4       	ldi	r21, 0x41	; 65
    4302:	69 81       	ldd	r22, Y+1	; 0x01
    4304:	7a 81       	ldd	r23, Y+2	; 0x02
    4306:	8b 81       	ldd	r24, Y+3	; 0x03
    4308:	9c 81       	ldd	r25, Y+4	; 0x04
    430a:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__mulsf3>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	bc 01       	movw	r22, r24
    4314:	cd 01       	movw	r24, r26
    4316:	0e 94 8d 34 	call	0x691a	; 0x691a <__fixunssfsi>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	9a 87       	std	Y+10, r25	; 0x0a
    4320:	89 87       	std	Y+9, r24	; 0x09
    4322:	0f c0       	rjmp	.+30     	; 0x4342 <vApplicationMallocFailedHook+0xea>
    4324:	80 e9       	ldi	r24, 0x90	; 144
    4326:	91 e0       	ldi	r25, 0x01	; 1
    4328:	9c 87       	std	Y+12, r25	; 0x0c
    432a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    432c:	8b 85       	ldd	r24, Y+11	; 0x0b
    432e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4330:	01 97       	sbiw	r24, 0x01	; 1
    4332:	f1 f7       	brne	.-4      	; 0x4330 <vApplicationMallocFailedHook+0xd8>
    4334:	9c 87       	std	Y+12, r25	; 0x0c
    4336:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4338:	89 85       	ldd	r24, Y+9	; 0x09
    433a:	9a 85       	ldd	r25, Y+10	; 0x0a
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	9a 87       	std	Y+10, r25	; 0x0a
    4340:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4342:	89 85       	ldd	r24, Y+9	; 0x09
    4344:	9a 85       	ldd	r25, Y+10	; 0x0a
    4346:	89 2b       	or	r24, r25
    4348:	69 f7       	brne	.-38     	; 0x4324 <vApplicationMallocFailedHook+0xcc>
    434a:	14 c0       	rjmp	.+40     	; 0x4374 <vApplicationMallocFailedHook+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    434c:	6d 81       	ldd	r22, Y+5	; 0x05
    434e:	7e 81       	ldd	r23, Y+6	; 0x06
    4350:	8f 81       	ldd	r24, Y+7	; 0x07
    4352:	98 85       	ldd	r25, Y+8	; 0x08
    4354:	0e 94 8d 34 	call	0x691a	; 0x691a <__fixunssfsi>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	9a 87       	std	Y+10, r25	; 0x0a
    435e:	89 87       	std	Y+9, r24	; 0x09
    4360:	89 85       	ldd	r24, Y+9	; 0x09
    4362:	9a 85       	ldd	r25, Y+10	; 0x0a
    4364:	9e 87       	std	Y+14, r25	; 0x0e
    4366:	8d 87       	std	Y+13, r24	; 0x0d
    4368:	8d 85       	ldd	r24, Y+13	; 0x0d
    436a:	9e 85       	ldd	r25, Y+14	; 0x0e
    436c:	01 97       	sbiw	r24, 0x01	; 1
    436e:	f1 f7       	brne	.-4      	; 0x436c <vApplicationMallocFailedHook+0x114>
    4370:	9e 87       	std	Y+14, r25	; 0x0e
    4372:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    4374:	83 e2       	ldi	r24, 0x23	; 35
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	23 e2       	ldi	r18, 0x23	; 35
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	f9 01       	movw	r30, r18
    437e:	20 81       	ld	r18, Z
    4380:	20 68       	ori	r18, 0x80	; 128
    4382:	fc 01       	movw	r30, r24
    4384:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED fast blink.

#endif

    }
    4386:	84 cf       	rjmp	.-248    	; 0x4290 <vApplicationMallocFailedHook+0x38>

00004388 <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	62 97       	sbiw	r28, 0x12	; 18
    4392:	0f b6       	in	r0, 0x3f	; 63
    4394:	f8 94       	cli
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	cd bf       	out	0x3d, r28	; 61
    439c:	98 8b       	std	Y+16, r25	; 0x10
    439e:	8f 87       	std	Y+15, r24	; 0x0f
    43a0:	7a 8b       	std	Y+18, r23	; 0x12
    43a2:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    43a4:	84 e2       	ldi	r24, 0x24	; 36
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	24 e2       	ldi	r18, 0x24	; 36
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	f9 01       	movw	r30, r18
    43ae:	20 81       	ld	r18, Z
    43b0:	20 68       	ori	r18, 0x80	; 128
    43b2:	fc 01       	movw	r30, r24
    43b4:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    43b6:	85 e2       	ldi	r24, 0x25	; 37
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	25 e2       	ldi	r18, 0x25	; 37
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	f9 01       	movw	r30, r18
    43c0:	20 81       	ld	r18, Z
    43c2:	20 68       	ori	r18, 0x80	; 128
    43c4:	fc 01       	movw	r30, r24
    43c6:	20 83       	st	Z, r18
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	aa ef       	ldi	r26, 0xFA	; 250
    43ce:	b4 e4       	ldi	r27, 0x44	; 68
    43d0:	89 83       	std	Y+1, r24	; 0x01
    43d2:	9a 83       	std	Y+2, r25	; 0x02
    43d4:	ab 83       	std	Y+3, r26	; 0x03
    43d6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	4a e7       	ldi	r20, 0x7A	; 122
    43de:	55 e4       	ldi	r21, 0x45	; 69
    43e0:	69 81       	ldd	r22, Y+1	; 0x01
    43e2:	7a 81       	ldd	r23, Y+2	; 0x02
    43e4:	8b 81       	ldd	r24, Y+3	; 0x03
    43e6:	9c 81       	ldd	r25, Y+4	; 0x04
    43e8:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__mulsf3>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	8d 83       	std	Y+5, r24	; 0x05
    43f2:	9e 83       	std	Y+6, r25	; 0x06
    43f4:	af 83       	std	Y+7, r26	; 0x07
    43f6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	40 e8       	ldi	r20, 0x80	; 128
    43fe:	5f e3       	ldi	r21, 0x3F	; 63
    4400:	6d 81       	ldd	r22, Y+5	; 0x05
    4402:	7e 81       	ldd	r23, Y+6	; 0x06
    4404:	8f 81       	ldd	r24, Y+7	; 0x07
    4406:	98 85       	ldd	r25, Y+8	; 0x08
    4408:	0e 94 1c 34 	call	0x6838	; 0x6838 <__cmpsf2>
    440c:	88 23       	and	r24, r24
    440e:	2c f4       	brge	.+10     	; 0x441a <vApplicationStackOverflowHook+0x92>
		__ticks = 1;
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	9a 87       	std	Y+10, r25	; 0x0a
    4416:	89 87       	std	Y+9, r24	; 0x09
    4418:	3f c0       	rjmp	.+126    	; 0x4498 <vApplicationStackOverflowHook+0x110>
	else if (__tmp > 65535)
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	3f ef       	ldi	r19, 0xFF	; 255
    441e:	4f e7       	ldi	r20, 0x7F	; 127
    4420:	57 e4       	ldi	r21, 0x47	; 71
    4422:	6d 81       	ldd	r22, Y+5	; 0x05
    4424:	7e 81       	ldd	r23, Y+6	; 0x06
    4426:	8f 81       	ldd	r24, Y+7	; 0x07
    4428:	98 85       	ldd	r25, Y+8	; 0x08
    442a:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <__gesf2>
    442e:	18 16       	cp	r1, r24
    4430:	4c f5       	brge	.+82     	; 0x4484 <vApplicationStackOverflowHook+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	40 e2       	ldi	r20, 0x20	; 32
    4438:	51 e4       	ldi	r21, 0x41	; 65
    443a:	69 81       	ldd	r22, Y+1	; 0x01
    443c:	7a 81       	ldd	r23, Y+2	; 0x02
    443e:	8b 81       	ldd	r24, Y+3	; 0x03
    4440:	9c 81       	ldd	r25, Y+4	; 0x04
    4442:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__mulsf3>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	bc 01       	movw	r22, r24
    444c:	cd 01       	movw	r24, r26
    444e:	0e 94 8d 34 	call	0x691a	; 0x691a <__fixunssfsi>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	9a 87       	std	Y+10, r25	; 0x0a
    4458:	89 87       	std	Y+9, r24	; 0x09
    445a:	0f c0       	rjmp	.+30     	; 0x447a <vApplicationStackOverflowHook+0xf2>
    445c:	80 e9       	ldi	r24, 0x90	; 144
    445e:	91 e0       	ldi	r25, 0x01	; 1
    4460:	9c 87       	std	Y+12, r25	; 0x0c
    4462:	8b 87       	std	Y+11, r24	; 0x0b
    4464:	8b 85       	ldd	r24, Y+11	; 0x0b
    4466:	9c 85       	ldd	r25, Y+12	; 0x0c
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <vApplicationStackOverflowHook+0xe0>
    446c:	9c 87       	std	Y+12, r25	; 0x0c
    446e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4470:	89 85       	ldd	r24, Y+9	; 0x09
    4472:	9a 85       	ldd	r25, Y+10	; 0x0a
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	9a 87       	std	Y+10, r25	; 0x0a
    4478:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    447a:	89 85       	ldd	r24, Y+9	; 0x09
    447c:	9a 85       	ldd	r25, Y+10	; 0x0a
    447e:	89 2b       	or	r24, r25
    4480:	69 f7       	brne	.-38     	; 0x445c <vApplicationStackOverflowHook+0xd4>
    4482:	14 c0       	rjmp	.+40     	; 0x44ac <vApplicationStackOverflowHook+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4484:	6d 81       	ldd	r22, Y+5	; 0x05
    4486:	7e 81       	ldd	r23, Y+6	; 0x06
    4488:	8f 81       	ldd	r24, Y+7	; 0x07
    448a:	98 85       	ldd	r25, Y+8	; 0x08
    448c:	0e 94 8d 34 	call	0x691a	; 0x691a <__fixunssfsi>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	9a 87       	std	Y+10, r25	; 0x0a
    4496:	89 87       	std	Y+9, r24	; 0x09
    4498:	89 85       	ldd	r24, Y+9	; 0x09
    449a:	9a 85       	ldd	r25, Y+10	; 0x0a
    449c:	9e 87       	std	Y+14, r25	; 0x0e
    449e:	8d 87       	std	Y+13, r24	; 0x0d
    44a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a4:	01 97       	sbiw	r24, 0x01	; 1
    44a6:	f1 f7       	brne	.-4      	; 0x44a4 <vApplicationStackOverflowHook+0x11c>
    44a8:	9e 87       	std	Y+14, r25	; 0x0e
    44aa:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    44ac:	83 e2       	ldi	r24, 0x23	; 35
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	23 e2       	ldi	r18, 0x23	; 35
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	f9 01       	movw	r30, r18
    44b6:	20 81       	ld	r18, Z
    44b8:	20 68       	ori	r18, 0x80	; 128
    44ba:	fc 01       	movw	r30, r24
    44bc:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

    }
    44be:	84 cf       	rjmp	.-248    	; 0x43c8 <vApplicationStackOverflowHook+0x40>

000044c0 <m_print>:
 *  Author: drags
 */ 
#include "Headers/m_lora_includes.h"

void m_print(char message[], SemaphoreHandle_t pxSemaphore)
{
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	00 d0       	rcall	.+0      	; 0x44c6 <m_print+0x6>
    44c6:	1f 92       	push	r1
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	9a 83       	std	Y+2, r25	; 0x02
    44ce:	89 83       	std	Y+1, r24	; 0x01
    44d0:	7c 83       	std	Y+4, r23	; 0x04
    44d2:	6b 83       	std	Y+3, r22	; 0x03
	xSemaphoreTake(pxSemaphore, portMAX_DELAY);
    44d4:	8b 81       	ldd	r24, Y+3	; 0x03
    44d6:	9c 81       	ldd	r25, Y+4	; 0x04
    44d8:	6f ef       	ldi	r22, 0xFF	; 255
    44da:	7f ef       	ldi	r23, 0xFF	; 255
    44dc:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("%s\n",message);
    44e0:	89 81       	ldd	r24, Y+1	; 0x01
    44e2:	9a 81       	ldd	r25, Y+2	; 0x02
    44e4:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <puts>
	xSemaphoreGive(pxSemaphore);
    44e8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ea:	9c 81       	ldd	r25, Y+4	; 0x04
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	40 e0       	ldi	r20, 0x00	; 0
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	60 e0       	ldi	r22, 0x00	; 0
    44f4:	70 e0       	ldi	r23, 0x00	; 0
    44f6:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
    44fa:	00 00       	nop
    44fc:	0f 90       	pop	r0
    44fe:	0f 90       	pop	r0
    4500:	0f 90       	pop	r0
    4502:	0f 90       	pop	r0
    4504:	df 91       	pop	r29
    4506:	cf 91       	pop	r28
    4508:	08 95       	ret

0000450a <create_all_tasks>:
/*
	This method creates all the tasks
*/

void create_all_tasks(UBaseType_t lora_reset_task_priority)
{
    450a:	ef 92       	push	r14
    450c:	ff 92       	push	r15
    450e:	0f 93       	push	r16
    4510:	cf 93       	push	r28
    4512:	df 93       	push	r29
    4514:	1f 92       	push	r1
    4516:	cd b7       	in	r28, 0x3d	; 61
    4518:	de b7       	in	r29, 0x3e	; 62
    451a:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
    451c:	e1 2c       	mov	r14, r1
    451e:	f1 2c       	mov	r15, r1
    4520:	09 81       	ldd	r16, Y+1	; 0x01
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	48 e8       	ldi	r20, 0x88	; 136
    4528:	51 e0       	ldi	r21, 0x01	; 1
    452a:	6e e2       	ldi	r22, 0x2E	; 46
    452c:	72 e0       	ldi	r23, 0x02	; 2
    452e:	86 ef       	ldi	r24, 0xF6	; 246
    4530:	94 e2       	ldi	r25, 0x24	; 36
    4532:	0e 94 df 10 	call	0x21be	; 0x21be <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_reset_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    4536:	e1 2c       	mov	r14, r1
    4538:	f1 2c       	mov	r15, r1
    453a:	00 e0       	ldi	r16, 0x00	; 0
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	40 ec       	ldi	r20, 0xC0	; 192
    4542:	50 e0       	ldi	r21, 0x00	; 0
    4544:	65 e3       	ldi	r22, 0x35	; 53
    4546:	72 e0       	ldi	r23, 0x02	; 2
    4548:	87 e0       	ldi	r24, 0x07	; 7
    454a:	96 e2       	ldi	r25, 0x26	; 38
    454c:	0e 94 df 10 	call	0x21be	; 0x21be <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, ( tskIDLE_PRIORITY )
	, NULL );
	
	xTaskCreate(
    4550:	e1 2c       	mov	r14, r1
    4552:	f1 2c       	mov	r15, r1
    4554:	00 e0       	ldi	r16, 0x00	; 0
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	40 ec       	ldi	r20, 0xC0	; 192
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	67 e4       	ldi	r22, 0x47	; 71
    4560:	72 e0       	ldi	r23, 0x02	; 2
    4562:	80 e9       	ldi	r24, 0x90	; 144
    4564:	95 e2       	ldi	r25, 0x25	; 37
    4566:	0e 94 df 10 	call	0x21be	; 0x21be <xTaskCreate>
	//, "Print Measurements Task"
	//, configMINIMAL_STACK_SIZE
	//, NULL
	//, ( tskIDLE_PRIORITY )
	//, NULL );
}
    456a:	00 00       	nop
    456c:	0f 90       	pop	r0
    456e:	df 91       	pop	r29
    4570:	cf 91       	pop	r28
    4572:	0f 91       	pop	r16
    4574:	ff 90       	pop	r15
    4576:	ef 90       	pop	r14
    4578:	08 95       	ret

0000457a <create_all_timers>:
void timer_5_mins_callback(TimerHandle_t pxTimer);

TimerHandle_t xTimer_5_mins;

void create_all_timers()
{
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62

	xTimer_5_mins = xTimerCreate("5 minutes timer",
    4586:	0d e2       	ldi	r16, 0x2D	; 45
    4588:	11 e0       	ldi	r17, 0x01	; 1
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	41 e0       	ldi	r20, 0x01	; 1
    4590:	62 ee       	ldi	r22, 0xE2	; 226
    4592:	74 e0       	ldi	r23, 0x04	; 4
    4594:	88 e5       	ldi	r24, 0x58	; 88
    4596:	92 e0       	ldi	r25, 0x02	; 2
    4598:	07 da       	rcall	.-3058   	; 0x39a8 <xTimerCreate>
    459a:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <xTimer_5_mins+0x1>
    459e:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <xTimer_5_mins>
	//xTimer_send_data = xTimerCreate("Data Sending Timer",
			//(1000/portTICK_PERIOD_MS),
			//pdTRUE,
			//(void *)3,
			//send_data_timer_callback);		
    45a2:	00 00       	nop
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	1f 91       	pop	r17
    45aa:	0f 91       	pop	r16
    45ac:	08 95       	ret

000045ae <lora_reset>:


void lora_setup(void);

void lora_reset()
{
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
	lora_driver_reset_rn2483(1); // Activate reset line
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <lora_driver_reset_rn2483>
	vTaskDelay(2);
    45bc:	82 e0       	ldi	r24, 0x02	; 2
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
	lora_driver_reset_rn2483(0); // Release reset line
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <lora_driver_reset_rn2483>
	vTaskDelay(150); // Wait for tranceiver module to wake up after reset
    45ca:	86 e9       	ldi	r24, 0x96	; 150
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    45d2:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <lora_driver_flush_buffers>
	
	lora_setup();
    45d6:	04 d0       	rcall	.+8      	; 0x45e0 <lora_setup>
    45d8:	00 00       	nop
    45da:	df 91       	pop	r29
    45dc:	cf 91       	pop	r28
    45de:	08 95       	ret

000045e0 <lora_setup>:
#include "../Headers/m_lora_includes.h"

static char _out_buf[100];

void lora_setup(void)
{
    45e0:	cf 93       	push	r28
    45e2:	df 93       	push	r29
    45e4:	1f 92       	push	r1
    45e6:	1f 92       	push	r1
    45e8:	cd b7       	in	r28, 0x3d	; 61
    45ea:	de b7       	in	r29, 0x3e	; 62
	/*
		Hardware reset of LoRaWAN transceiver
	*/
	

	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <led_slow_blink>

	// Factory reset the transceiver
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    45f2:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    45f6:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    45fa:	6f ef       	ldi	r22, 0xFF	; 255
    45fc:	7f ef       	ldi	r23, 0xFF	; 255
    45fe:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    4602:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <lora_driver_rn2483_factory_reset>
    4606:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    460a:	29 2f       	mov	r18, r25
    460c:	2f 93       	push	r18
    460e:	8f 93       	push	r24
    4610:	88 e6       	ldi	r24, 0x68	; 104
    4612:	92 e0       	ldi	r25, 0x02	; 2
    4614:	89 2f       	mov	r24, r25
    4616:	8f 93       	push	r24
    4618:	88 e6       	ldi	r24, 0x68	; 104
    461a:	92 e0       	ldi	r25, 0x02	; 2
    461c:	8f 93       	push	r24
    461e:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    462a:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    462e:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	40 e0       	ldi	r20, 0x00	; 0
    4636:	50 e0       	ldi	r21, 0x00	; 0
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	70 e0       	ldi	r23, 0x00	; 0
    463c:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
	
	// Configure to EU868 LoRaWAN standards
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4640:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4644:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4648:	6f ef       	ldi	r22, 0xFF	; 255
    464a:	7f ef       	ldi	r23, 0xFF	; 255
    464c:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    4650:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <lora_driver_configure_to_eu868>
    4654:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    4658:	29 2f       	mov	r18, r25
    465a:	2f 93       	push	r18
    465c:	8f 93       	push	r24
    465e:	8b e7       	ldi	r24, 0x7B	; 123
    4660:	92 e0       	ldi	r25, 0x02	; 2
    4662:	89 2f       	mov	r24, r25
    4664:	8f 93       	push	r24
    4666:	8b e7       	ldi	r24, 0x7B	; 123
    4668:	92 e0       	ldi	r25, 0x02	; 2
    466a:	8f 93       	push	r24
    466c:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    4670:	0f 90       	pop	r0
    4672:	0f 90       	pop	r0
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4678:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    467c:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	40 e0       	ldi	r20, 0x00	; 0
    4684:	50 e0       	ldi	r21, 0x00	; 0
    4686:	60 e0       	ldi	r22, 0x00	; 0
    4688:	70 e0       	ldi	r23, 0x00	; 0
    468a:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    468e:	82 e3       	ldi	r24, 0x32	; 50
    4690:	99 e0       	ldi	r25, 0x09	; 9
    4692:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <lora_driver_get_rn2483_hweui>
    4696:	8a 83       	std	Y+2, r24	; 0x02
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4698:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    469c:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    46a0:	6f ef       	ldi	r22, 0xFF	; 255
    46a2:	7f ef       	ldi	r23, 0xFF	; 255
    46a4:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    46a8:	8a 81       	ldd	r24, Y+2	; 0x02
    46aa:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    46ae:	9c 01       	movw	r18, r24
    46b0:	82 e3       	ldi	r24, 0x32	; 50
    46b2:	99 e0       	ldi	r25, 0x09	; 9
    46b4:	89 2f       	mov	r24, r25
    46b6:	8f 93       	push	r24
    46b8:	82 e3       	ldi	r24, 0x32	; 50
    46ba:	99 e0       	ldi	r25, 0x09	; 9
    46bc:	8f 93       	push	r24
    46be:	83 2f       	mov	r24, r19
    46c0:	8f 93       	push	r24
    46c2:	82 2f       	mov	r24, r18
    46c4:	8f 93       	push	r24
    46c6:	84 e9       	ldi	r24, 0x94	; 148
    46c8:	92 e0       	ldi	r25, 0x02	; 2
    46ca:	89 2f       	mov	r24, r25
    46cc:	8f 93       	push	r24
    46ce:	84 e9       	ldi	r24, 0x94	; 148
    46d0:	92 e0       	ldi	r25, 0x02	; 2
    46d2:	8f 93       	push	r24
    46d4:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    46e4:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    46e8:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	40 e0       	ldi	r20, 0x00	; 0
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    46fa:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    46fe:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4702:	6f ef       	ldi	r22, 0xFF	; 255
    4704:	7f ef       	ldi	r23, 0xFF	; 255
    4706:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    470a:	82 e3       	ldi	r24, 0x32	; 50
    470c:	99 e0       	ldi	r25, 0x09	; 9
    470e:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <lora_driver_set_device_identifier>
    4712:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    4716:	29 2f       	mov	r18, r25
    4718:	2f 93       	push	r18
    471a:	8f 93       	push	r24
    471c:	82 e3       	ldi	r24, 0x32	; 50
    471e:	99 e0       	ldi	r25, 0x09	; 9
    4720:	89 2f       	mov	r24, r25
    4722:	8f 93       	push	r24
    4724:	82 e3       	ldi	r24, 0x32	; 50
    4726:	99 e0       	ldi	r25, 0x09	; 9
    4728:	8f 93       	push	r24
    472a:	88 ea       	ldi	r24, 0xA8	; 168
    472c:	92 e0       	ldi	r25, 0x02	; 2
    472e:	89 2f       	mov	r24, r25
    4730:	8f 93       	push	r24
    4732:	88 ea       	ldi	r24, 0xA8	; 168
    4734:	92 e0       	ldi	r25, 0x02	; 2
    4736:	8f 93       	push	r24
    4738:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4748:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    474c:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	50 e0       	ldi	r21, 0x00	; 0
    4756:	60 e0       	ldi	r22, 0x00	; 0
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
	
	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    475e:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4762:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4766:	6f ef       	ldi	r22, 0xFF	; 255
    4768:	7f ef       	ldi	r23, 0xFF	; 255
    476a:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    476e:	42 e3       	ldi	r20, 0x32	; 50
    4770:	59 e0       	ldi	r21, 0x09	; 9
    4772:	6d eb       	ldi	r22, 0xBD	; 189
    4774:	72 e0       	ldi	r23, 0x02	; 2
    4776:	8e ed       	ldi	r24, 0xDE	; 222
    4778:	92 e0       	ldi	r25, 0x02	; 2
    477a:	0e 94 46 30 	call	0x608c	; 0x608c <lora_driver_set_otaa_identity>
    477e:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    4782:	29 2f       	mov	r18, r25
    4784:	2f 93       	push	r18
    4786:	8f 93       	push	r24
    4788:	82 e3       	ldi	r24, 0x32	; 50
    478a:	99 e0       	ldi	r25, 0x09	; 9
    478c:	89 2f       	mov	r24, r25
    478e:	8f 93       	push	r24
    4790:	82 e3       	ldi	r24, 0x32	; 50
    4792:	99 e0       	ldi	r25, 0x09	; 9
    4794:	8f 93       	push	r24
    4796:	8d eb       	ldi	r24, 0xBD	; 189
    4798:	92 e0       	ldi	r25, 0x02	; 2
    479a:	89 2f       	mov	r24, r25
    479c:	8f 93       	push	r24
    479e:	8d eb       	ldi	r24, 0xBD	; 189
    47a0:	92 e0       	ldi	r25, 0x02	; 2
    47a2:	8f 93       	push	r24
    47a4:	8e ed       	ldi	r24, 0xDE	; 222
    47a6:	92 e0       	ldi	r25, 0x02	; 2
    47a8:	89 2f       	mov	r24, r25
    47aa:	8f 93       	push	r24
    47ac:	8e ed       	ldi	r24, 0xDE	; 222
    47ae:	92 e0       	ldi	r25, 0x02	; 2
    47b0:	8f 93       	push	r24
    47b2:	8f ee       	ldi	r24, 0xEF	; 239
    47b4:	92 e0       	ldi	r25, 0x02	; 2
    47b6:	89 2f       	mov	r24, r25
    47b8:	8f 93       	push	r24
    47ba:	8f ee       	ldi	r24, 0xEF	; 239
    47bc:	92 e0       	ldi	r25, 0x02	; 2
    47be:	8f 93       	push	r24
    47c0:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    47c4:	8d b7       	in	r24, 0x3d	; 61
    47c6:	9e b7       	in	r25, 0x3e	; 62
    47c8:	0a 96       	adiw	r24, 0x0a	; 10
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	f8 94       	cli
    47ce:	de bf       	out	0x3e, r29	; 62
    47d0:	0f be       	out	0x3f, r0	; 63
    47d2:	cd bf       	out	0x3d, r28	; 61
	xSemaphoreGive(xSemaphore_print);
    47d4:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    47d8:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	40 e0       	ldi	r20, 0x00	; 0
    47e0:	50 e0       	ldi	r21, 0x00	; 0
    47e2:	60 e0       	ldi	r22, 0x00	; 0
    47e4:	70 e0       	ldi	r23, 0x00	; 0
    47e6:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>

	// Save all the MAC settings in the transceiver
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    47ea:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    47ee:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    47f2:	6f ef       	ldi	r22, 0xFF	; 255
    47f4:	7f ef       	ldi	r23, 0xFF	; 255
    47f6:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    47fa:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <lora_driver_save_mac>
    47fe:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    4802:	29 2f       	mov	r18, r25
    4804:	2f 93       	push	r18
    4806:	8f 93       	push	r24
    4808:	85 e2       	ldi	r24, 0x25	; 37
    480a:	93 e0       	ldi	r25, 0x03	; 3
    480c:	89 2f       	mov	r24, r25
    480e:	8f 93       	push	r24
    4810:	85 e2       	ldi	r24, 0x25	; 37
    4812:	93 e0       	ldi	r25, 0x03	; 3
    4814:	8f 93       	push	r24
    4816:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4822:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4826:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	40 e0       	ldi	r20, 0x00	; 0
    482e:	50 e0       	ldi	r21, 0x00	; 0
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	70 e0       	ldi	r23, 0x00	; 0
    4834:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>

	// Enable Adaptive Data Rate
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4838:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    483c:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4840:	6f ef       	ldi	r22, 0xFF	; 255
    4842:	7f ef       	ldi	r23, 0xFF	; 255
    4844:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <lora_driver_set_adaptive_data_rate>
    484e:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    4852:	29 2f       	mov	r18, r25
    4854:	2f 93       	push	r18
    4856:	8f 93       	push	r24
    4858:	84 e3       	ldi	r24, 0x34	; 52
    485a:	93 e0       	ldi	r25, 0x03	; 3
    485c:	89 2f       	mov	r24, r25
    485e:	8f 93       	push	r24
    4860:	84 e3       	ldi	r24, 0x34	; 52
    4862:	93 e0       	ldi	r25, 0x03	; 3
    4864:	8f 93       	push	r24
    4866:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
    4872:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4876:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	40 e0       	ldi	r20, 0x00	; 0
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	60 e0       	ldi	r22, 0x00	; 0
    4882:	70 e0       	ldi	r23, 0x00	; 0
    4884:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
	
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
    4888:	85 e0       	ldi	r24, 0x05	; 5
    488a:	89 83       	std	Y+1, r24	; 0x01
	do {
		rc = lora_driver_join(LoRa_OTAA);
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <lora_driver_join>
    4892:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network Tries Left:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    4894:	8a 81       	ldd	r24, Y+2	; 0x02
    4896:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    489a:	9c 01       	movw	r18, r24
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	88 2f       	mov	r24, r24
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	43 2f       	mov	r20, r19
    48a4:	4f 93       	push	r20
    48a6:	2f 93       	push	r18
    48a8:	29 2f       	mov	r18, r25
    48aa:	2f 93       	push	r18
    48ac:	8f 93       	push	r24
    48ae:	85 e5       	ldi	r24, 0x55	; 85
    48b0:	93 e0       	ldi	r25, 0x03	; 3
    48b2:	89 2f       	mov	r24, r25
    48b4:	8f 93       	push	r24
    48b6:	85 e5       	ldi	r24, 0x55	; 85
    48b8:	93 e0       	ldi	r25, 0x03	; 3
    48ba:	8f 93       	push	r24
    48bc:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0

		if ( rc != LoRa_ACCEPTED)
    48cc:	8a 81       	ldd	r24, Y+2	; 0x02
    48ce:	88 30       	cpi	r24, 0x08	; 8
    48d0:	71 f0       	breq	.+28     	; 0x48ee <lora_setup+0x30e>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(5000/portTICK_PERIOD_MS);
    48d8:	88 e3       	ldi	r24, 0x38	; 56
    48da:	91 e0       	ldi	r25, 0x01	; 1
    48dc:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    48e0:	89 81       	ldd	r24, Y+1	; 0x01
    48e2:	81 50       	subi	r24, 0x01	; 1
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	88 23       	and	r24, r24
    48ea:	81 f6       	brne	.-96     	; 0x488c <lora_setup+0x2ac>
    48ec:	01 c0       	rjmp	.+2      	; 0x48f0 <lora_setup+0x310>
			// Wait 5 sec and lets try again
			vTaskDelay(5000/portTICK_PERIOD_MS);
		}
		else
		{
			break;
    48ee:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LoRa_ACCEPTED)
    48f0:	8a 81       	ldd	r24, Y+2	; 0x02
    48f2:	88 30       	cpi	r24, 0x08	; 8
    48f4:	21 f4       	brne	.+8      	; 0x48fe <lora_setup+0x31e>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	0e 94 ca 2c 	call	0x5994	; 0x5994 <led_led_on>
		while (1)
		{
			taskYIELD();
		}
	}
    48fc:	09 c0       	rjmp	.+18     	; 0x4910 <lora_setup+0x330>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	0e 94 a3 2c 	call	0x5946	; 0x5946 <led_fast_blink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    490a:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
		}
    490e:	fd cf       	rjmp	.-6      	; 0x490a <lora_setup+0x32a>
	}
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	df 91       	pop	r29
    4916:	cf 91       	pop	r28
    4918:	08 95       	ret

0000491a <global_init>:
SemaphoreHandle_t xSemaphore_temperature;
SemaphoreHandle_t xSemaphore_view_data;
SemaphoreHandle_t xSemaphore_buffer;

void global_init()
{
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    491e:	cd b7       	in	r28, 0x3d	; 61
    4920:	de b7       	in	r29, 0x3e	; 62
	stdioCreate(0);
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	33 d2       	rcall	.+1126   	; 0x4d8c <stdioCreate>
	
	sei(); // enables interrupts
    4926:	78 94       	sei
	
	xSemaphore_print = xSemaphoreCreateBinary();
    4928:	43 e0       	ldi	r20, 0x03	; 3
    492a:	60 e0       	ldi	r22, 0x00	; 0
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericCreate>
    4932:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <xSemaphore_print+0x1>
    4936:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <xSemaphore_print>
	
	xSemaphore_co2 = xSemaphoreCreateMutex();
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	0e 94 63 07 	call	0xec6	; 0xec6 <xQueueCreateMutex>
    4940:	90 93 13 0b 	sts	0x0B13, r25	; 0x800b13 <xSemaphore_co2+0x1>
    4944:	80 93 12 0b 	sts	0x0B12, r24	; 0x800b12 <xSemaphore_co2>
	xSemaphore_temperature = xSemaphoreCreateMutex();
    4948:	81 e0       	ldi	r24, 0x01	; 1
    494a:	0e 94 63 07 	call	0xec6	; 0xec6 <xQueueCreateMutex>
    494e:	90 93 11 0b 	sts	0x0B11, r25	; 0x800b11 <xSemaphore_temperature+0x1>
    4952:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <xSemaphore_temperature>
	xSemaphore_view_data = xSemaphoreCreateMutex();
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	0e 94 63 07 	call	0xec6	; 0xec6 <xQueueCreateMutex>
    495c:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <xSemaphore_view_data+0x1>
    4960:	80 93 0a 0b 	sts	0x0B0A, r24	; 0x800b0a <xSemaphore_view_data>
	xSemaphore_buffer = xSemaphoreCreateMutex();
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	0e 94 63 07 	call	0xec6	; 0xec6 <xQueueCreateMutex>
    496a:	90 93 0f 0b 	sts	0x0B0F, r25	; 0x800b0f <xSemaphore_buffer+0x1>
    496e:	80 93 0e 0b 	sts	0x0B0E, r24	; 0x800b0e <xSemaphore_buffer>
	
	xSemaphoreGive(xSemaphore_print);
    4972:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4976:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	40 e0       	ldi	r20, 0x00	; 0
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	60 e0       	ldi	r22, 0x00	; 0
    4982:	70 e0       	ldi	r23, 0x00	; 0
    4984:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
	
	//xMessageBuffer = xMessageBufferCreate( sizeof (m_data) * 3);
	xQueue = xQueueCreate(2,sizeof (m_data *));
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	62 e0       	ldi	r22, 0x02	; 2
    498c:	82 e0       	ldi	r24, 0x02	; 2
    498e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericCreate>
    4992:	90 93 15 0b 	sts	0x0B15, r25	; 0x800b15 <xQueue+0x1>
    4996:	80 93 14 0b 	sts	0x0B14, r24	; 0x800b14 <xQueue>
	
	/*
		Initialize LoRa Driver
	*/

	hal_create(LED_TASK_PRIORITY);
    499a:	82 e0       	ldi	r24, 0x02	; 2
    499c:	c8 d5       	rcall	.+2960   	; 0x552e <hal_create>
	lora_driver_create(ser_USART1);
    499e:	81 e0       	ldi	r24, 0x01	; 1
    49a0:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <lora_driver_create>
	m_print("LoRa driver created.\n",xSemaphore_print);
    49a4:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    49a8:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    49ac:	bc 01       	movw	r22, r24
    49ae:	86 e7       	ldi	r24, 0x76	; 118
    49b0:	93 e0       	ldi	r25, 0x03	; 3
	
	/*
		Initialize the Temperature Driver
	*/
	if ( HIH8120_OK == hih8120Create() )
    49b2:	86 dd       	rcall	.-1268   	; 0x44c0 <m_print>
    49b4:	1b d6       	rcall	.+3126   	; 0x55ec <hih8120Create>
    49b6:	88 23       	and	r24, r24
    49b8:	41 f4       	brne	.+16     	; 0x49ca <global_init+0xb0>
	{
		m_print("Temp/Humidity driver created.\n",xSemaphore_print);
    49ba:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    49be:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    49c2:	bc 01       	movw	r22, r24
    49c4:	8c e8       	ldi	r24, 0x8C	; 140
    49c6:	93 e0       	ldi	r25, 0x03	; 3
    49c8:	7b dd       	rcall	.-1290   	; 0x44c0 <m_print>
	}
	
	/* 
		Initialize MH-Z19 CO2 Driver
	*/
	mh_z19_create(ser_USART3, measure_co2_callback);
    49ca:	69 e1       	ldi	r22, 0x19	; 25
    49cc:	71 e0       	ldi	r23, 0x01	; 1
    49ce:	83 e0       	ldi	r24, 0x03	; 3
    49d0:	0e 94 90 31 	call	0x6320	; 0x6320 <mh_z19_create>
	m_print("CO2 driver created.\n",xSemaphore_print);
    49d4:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    49d8:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    49dc:	bc 01       	movw	r22, r24
    49de:	8b ea       	ldi	r24, 0xAB	; 171
    49e0:	93 e0       	ldi	r25, 0x03	; 3
    49e2:	6e dd       	rcall	.-1316   	; 0x44c0 <m_print>
	
}
    49e4:	00 00       	nop
    49e6:	df 91       	pop	r29
    49e8:	cf 91       	pop	r28
    49ea:	08 95       	ret

000049ec <lora_send_data_task>:

/*
	Task that sends data to the server
*/
void lora_send_data_task(void *pvParameters)
{
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	00 d0       	rcall	.+0      	; 0x49f2 <lora_send_data_task+0x6>
    49f2:	00 d0       	rcall	.+0      	; 0x49f4 <lora_send_data_task+0x8>
    49f4:	cd b7       	in	r28, 0x3d	; 61
    49f6:	de b7       	in	r29, 0x3e	; 62
    49f8:	9e 83       	std	Y+6, r25	; 0x06
    49fa:	8d 83       	std	Y+5, r24	; 0x05
	m_data data;
	//int xRecievedBytes;
	

	lora_reset();
    49fc:	d8 dd       	rcall	.-1104   	; 0x45ae <lora_reset>

	_uplink_payload.len = 4;
    49fe:	84 e0       	ldi	r24, 0x04	; 4
    4a00:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <_uplink_payload+0x1>
	_uplink_payload.port_no = 2;
    4a04:	82 e0       	ldi	r24, 0x02	; 2
    4a06:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <_uplink_payload>


	while (1)
	{
		xSemaphoreTake(xSemaphore_view_data, portMAX_DELAY);
    4a0a:	80 91 0a 0b 	lds	r24, 0x0B0A	; 0x800b0a <xSemaphore_view_data>
    4a0e:	90 91 0b 0b 	lds	r25, 0x0B0B	; 0x800b0b <xSemaphore_view_data+0x1>
    4a12:	6f ef       	ldi	r22, 0xFF	; 255
    4a14:	7f ef       	ldi	r23, 0xFF	; 255
    4a16:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
		
		m_print("\nData Sending Task running!\n",xSemaphore_print);
    4a1a:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4a1e:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4a22:	bc 01       	movw	r22, r24
    4a24:	80 ec       	ldi	r24, 0xC0	; 192
    4a26:	93 e0       	ldi	r25, 0x03	; 3
    4a28:	4b dd       	rcall	.-1386   	; 0x44c0 <m_print>
		
		
		vTaskDelay(1000/portTICK_PERIOD_MS);
    4a2a:	8e e3       	ldi	r24, 0x3E	; 62
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
		//,0 );
		//
		//for (int i = 0; i < xRecievedBytes; i++)
		//{
			
		if (xQueueReceive(xQueue, & ( data ), 0) != pdTRUE)
    4a32:	80 91 14 0b 	lds	r24, 0x0B14	; 0x800b14 <xQueue>
    4a36:	90 91 15 0b 	lds	r25, 0x0B15	; 0x800b15 <xQueue+0x1>
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	50 e0       	ldi	r21, 0x00	; 0
    4a3e:	9e 01       	movw	r18, r28
    4a40:	2f 5f       	subi	r18, 0xFF	; 255
    4a42:	3f 4f       	sbci	r19, 0xFF	; 255
    4a44:	b9 01       	movw	r22, r18
    4a46:	0e 94 88 08 	call	0x1110	; 0x1110 <xQueueReceive>
    4a4a:	81 30       	cpi	r24, 0x01	; 1
    4a4c:	49 f0       	breq	.+18     	; 0x4a60 <lora_send_data_task+0x74>
		{
			m_print("Unable to receive data from queue!\n",xSemaphore_print);
    4a4e:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4a52:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4a56:	bc 01       	movw	r22, r24
    4a58:	8d ed       	ldi	r24, 0xDD	; 221
    4a5a:	93 e0       	ldi	r25, 0x03	; 3
    4a5c:	31 dd       	rcall	.-1438   	; 0x44c0 <m_print>
    4a5e:	d5 cf       	rjmp	.-86     	; 0x4a0a <lora_send_data_task+0x1e>
		}
		else 
		{	
			_uplink_payload.bytes[0] = data.type >> 8;
    4a60:	89 81       	ldd	r24, Y+1	; 0x01
    4a62:	9a 81       	ldd	r25, Y+2	; 0x02
    4a64:	89 2f       	mov	r24, r25
    4a66:	99 0f       	add	r25, r25
    4a68:	99 0b       	sbc	r25, r25
    4a6a:	80 93 98 09 	sts	0x0998, r24	; 0x800998 <_uplink_payload+0x2>
			_uplink_payload.bytes[1] = data.type & 0xFF;
    4a6e:	89 81       	ldd	r24, Y+1	; 0x01
    4a70:	9a 81       	ldd	r25, Y+2	; 0x02
    4a72:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <_uplink_payload+0x3>
			_uplink_payload.bytes[2] = data.value >> 8;
    4a76:	8b 81       	ldd	r24, Y+3	; 0x03
    4a78:	9c 81       	ldd	r25, Y+4	; 0x04
    4a7a:	89 2f       	mov	r24, r25
    4a7c:	99 0f       	add	r25, r25
    4a7e:	99 0b       	sbc	r25, r25
    4a80:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <_uplink_payload+0x4>
			_uplink_payload.bytes[3] = data.value & 0xFF;	
    4a84:	8b 81       	ldd	r24, Y+3	; 0x03
    4a86:	9c 81       	ldd	r25, Y+4	; 0x04
    4a88:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <_uplink_payload+0x5>
			
			xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4a8c:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4a90:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4a94:	6f ef       	ldi	r22, 0xFF	; 255
    4a96:	7f ef       	ldi	r23, 0xFF	; 255
    4a98:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
			printf("Received measurement for sending: type: %d, val: %d\n\n",data.type, data.value);
    4a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    4a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    4aa0:	89 81       	ldd	r24, Y+1	; 0x01
    4aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa4:	43 2f       	mov	r20, r19
    4aa6:	4f 93       	push	r20
    4aa8:	2f 93       	push	r18
    4aaa:	29 2f       	mov	r18, r25
    4aac:	2f 93       	push	r18
    4aae:	8f 93       	push	r24
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	94 e0       	ldi	r25, 0x04	; 4
    4ab4:	89 2f       	mov	r24, r25
    4ab6:	8f 93       	push	r24
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	94 e0       	ldi	r25, 0x04	; 4
    4abc:	8f 93       	push	r24
    4abe:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    4ac2:	0f 90       	pop	r0
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
			vTaskDelay(1);
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
			xSemaphoreGive(xSemaphore_print);
    4ad6:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4ada:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4ade:	20 e0       	ldi	r18, 0x00	; 0
    4ae0:	40 e0       	ldi	r20, 0x00	; 0
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	60 e0       	ldi	r22, 0x00	; 0
    4ae6:	70 e0       	ldi	r23, 0x00	; 0
    4ae8:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>

			led_short_puls(led_ST4);  // OPTIONAL
    4aec:	83 e0       	ldi	r24, 0x03	; 3
    4aee:	82 d7       	rcall	.+3844   	; 0x59f4 <led_short_puls>
			printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
    4af0:	66 e9       	ldi	r22, 0x96	; 150
    4af2:	79 e0       	ldi	r23, 0x09	; 9
    4af4:	81 e0       	ldi	r24, 0x01	; 1
    4af6:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <lora_driver_sent_upload_message>
    4afa:	0e 94 67 30 	call	0x60ce	; 0x60ce <lora_driver_map_return_code_to_text>
    4afe:	29 2f       	mov	r18, r25
    4b00:	2f 93       	push	r18
    4b02:	8f 93       	push	r24
    4b04:	87 e3       	ldi	r24, 0x37	; 55
    4b06:	94 e0       	ldi	r25, 0x04	; 4
    4b08:	89 2f       	mov	r24, r25
    4b0a:	8f 93       	push	r24
    4b0c:	87 e3       	ldi	r24, 0x37	; 55
    4b0e:	94 e0       	ldi	r25, 0x04	; 4
    4b10:	8f 93       	push	r24
    4b12:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
		}
	}
    4b1e:	75 cf       	rjmp	.-278    	; 0x4a0a <lora_send_data_task+0x1e>

00004b20 <measure_co2_task>:
 */ 
#include "../Headers/m_lora_includes.h"


void measure_co2_task(void *pvParameters)
{
    4b20:	cf 93       	push	r28
    4b22:	df 93       	push	r29
    4b24:	00 d0       	rcall	.+0      	; 0x4b26 <measure_co2_task+0x6>
    4b26:	00 d0       	rcall	.+0      	; 0x4b28 <measure_co2_task+0x8>
    4b28:	cd b7       	in	r28, 0x3d	; 61
    4b2a:	de b7       	in	r29, 0x3e	; 62
    4b2c:	9e 83       	std	Y+6, r25	; 0x06
    4b2e:	8d 83       	std	Y+5, r24	; 0x05
	m_data co2; //= {1, 0};
	
	while (1)
	{
		
		xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
    4b30:	80 91 12 0b 	lds	r24, 0x0B12	; 0x800b12 <xSemaphore_co2>
    4b34:	90 91 13 0b 	lds	r25, 0x0B13	; 0x800b13 <xSemaphore_co2+0x1>
    4b38:	6f ef       	ldi	r22, 0xFF	; 255
    4b3a:	7f ef       	ldi	r23, 0xFF	; 255
    4b3c:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
		
		m_print("\nMeasuring CO2 task running!\n",xSemaphore_print);
    4b40:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4b44:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4b48:	bc 01       	movw	r22, r24
    4b4a:	8c e4       	ldi	r24, 0x4C	; 76
    4b4c:	94 e0       	ldi	r25, 0x04	; 4
    4b4e:	b8 dc       	rcall	.-1680   	; 0x44c0 <m_print>
		
		if (mh_z19_take_meassuring() != MHZ19_OK)
    4b50:	0e 94 bf 31 	call	0x637e	; 0x637e <mh_z19_take_meassuring>
    4b54:	88 23       	and	r24, r24
    4b56:	41 f0       	breq	.+16     	; 0x4b68 <measure_co2_task+0x48>
		{
			m_print("Error measuring CO2 value!\n",xSemaphore_print);
    4b58:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4b5c:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4b60:	bc 01       	movw	r22, r24
    4b62:	8a e6       	ldi	r24, 0x6A	; 106
    4b64:	94 e0       	ldi	r25, 0x04	; 4
    4b66:	ac dc       	rcall	.-1704   	; 0x44c0 <m_print>
		}
	
		co2.type = 1;
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	9a 83       	std	Y+2, r25	; 0x02
    4b6e:	89 83       	std	Y+1, r24	; 0x01
		co2.value = (int) co2_value;
    4b70:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <co2_value>
    4b74:	90 91 07 0b 	lds	r25, 0x0B07	; 0x800b07 <co2_value+0x1>
    4b78:	9c 83       	std	Y+4, r25	; 0x04
    4b7a:	8b 83       	std	Y+3, r24	; 0x03
		
		//write_to_buffer(xMessageBuffer, co2);
		if (xQueueSend(xQueue, (void *) &co2, portMAX_DELAY) != pdPASS)
    4b7c:	80 91 14 0b 	lds	r24, 0x0B14	; 0x800b14 <xQueue>
    4b80:	90 91 15 0b 	lds	r25, 0x0B15	; 0x800b15 <xQueue+0x1>
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	4f ef       	ldi	r20, 0xFF	; 255
    4b88:	5f ef       	ldi	r21, 0xFF	; 255
    4b8a:	be 01       	movw	r22, r28
    4b8c:	6f 5f       	subi	r22, 0xFF	; 255
    4b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b90:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
    4b94:	81 30       	cpi	r24, 0x01	; 1
    4b96:	49 f0       	breq	.+18     	; 0x4baa <measure_co2_task+0x8a>
		{
			m_print("Queue is full! Failed to send CO2!\n",xSemaphore_print);
    4b98:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4b9c:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4ba0:	bc 01       	movw	r22, r24
    4ba2:	86 e8       	ldi	r24, 0x86	; 134
    4ba4:	94 e0       	ldi	r25, 0x04	; 4
    4ba6:	8c dc       	rcall	.-1768   	; 0x44c0 <m_print>
    4ba8:	2d c0       	rjmp	.+90     	; 0x4c04 <measure_co2_task+0xe4>
		}
		else
		{
			xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4baa:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4bae:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4bb2:	6f ef       	ldi	r22, 0xFF	; 255
    4bb4:	7f ef       	ldi	r23, 0xFF	; 255
    4bb6:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
			printf("CO2 (type: %d, val: %u) sent to queue!\n", co2.type, (unsigned int)co2.value);
    4bba:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    4bbe:	9c 01       	movw	r18, r24
    4bc0:	89 81       	ldd	r24, Y+1	; 0x01
    4bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc4:	43 2f       	mov	r20, r19
    4bc6:	4f 93       	push	r20
    4bc8:	2f 93       	push	r18
    4bca:	29 2f       	mov	r18, r25
    4bcc:	2f 93       	push	r18
    4bce:	8f 93       	push	r24
    4bd0:	8a ea       	ldi	r24, 0xAA	; 170
    4bd2:	94 e0       	ldi	r25, 0x04	; 4
    4bd4:	89 2f       	mov	r24, r25
    4bd6:	8f 93       	push	r24
    4bd8:	8a ea       	ldi	r24, 0xAA	; 170
    4bda:	94 e0       	ldi	r25, 0x04	; 4
    4bdc:	8f 93       	push	r24
    4bde:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    4be2:	0f 90       	pop	r0
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	0f 90       	pop	r0
			xSemaphoreGive(xSemaphore_print);
    4bee:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4bf2:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	40 e0       	ldi	r20, 0x00	; 0
    4bfa:	50 e0       	ldi	r21, 0x00	; 0
    4bfc:	60 e0       	ldi	r22, 0x00	; 0
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
		
		}
		vTaskDelay(10000/portTICK_PERIOD_MS);
    4c04:	81 e7       	ldi	r24, 0x71	; 113
    4c06:	92 e0       	ldi	r25, 0x02	; 2
    4c08:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
	}
    4c0c:	91 cf       	rjmp	.-222    	; 0x4b30 <measure_co2_task+0x10>

00004c0e <measure_temp_task>:
#include "../Headers/m_lora_includes.h"

void lora_reset();

void measure_temp_task(void *pvParameters)
{
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	00 d0       	rcall	.+0      	; 0x4c14 <measure_temp_task+0x6>
    4c14:	00 d0       	rcall	.+0      	; 0x4c16 <measure_temp_task+0x8>
    4c16:	cd b7       	in	r28, 0x3d	; 61
    4c18:	de b7       	in	r29, 0x3e	; 62
    4c1a:	9e 83       	std	Y+6, r25	; 0x06
    4c1c:	8d 83       	std	Y+5, r24	; 0x05
	
	//lora_reset();
	
	while (1)
	{
		xSemaphoreTake(xSemaphore_temperature, portMAX_DELAY);
    4c1e:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <xSemaphore_temperature>
    4c22:	90 91 11 0b 	lds	r25, 0x0B11	; 0x800b11 <xSemaphore_temperature+0x1>
    4c26:	6f ef       	ldi	r22, 0xFF	; 255
    4c28:	7f ef       	ldi	r23, 0xFF	; 255
    4c2a:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
		
		m_print("\nMeasuring Temperature Task running!\n",xSemaphore_print);
    4c2e:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
    4c32:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4c36:	bc 01       	movw	r22, r24
    4c38:	82 ed       	ldi	r24, 0xD2	; 210
    4c3a:	94 e0       	ldi	r25, 0x04	; 4
    4c3c:	41 dc       	rcall	.-1918   	; 0x44c0 <m_print>
		

		if ( HIH8120_OK != hih8120Wakeup() )
    4c3e:	ed d4       	rcall	.+2522   	; 0x561a <hih8120Wakeup>
    4c40:	88 23       	and	r24, r24
    4c42:	41 f0       	breq	.+16     	; 0x4c54 <measure_temp_task+0x46>
    4c44:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
		{
			m_print("Error in waking up the sensors!",xSemaphore_print);
    4c48:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4c4c:	bc 01       	movw	r22, r24
    4c4e:	88 ef       	ldi	r24, 0xF8	; 248
    4c50:	94 e0       	ldi	r25, 0x04	; 4
    4c52:	36 dc       	rcall	.-1940   	; 0x44c0 <m_print>
    4c54:	86 e0       	ldi	r24, 0x06	; 6
		}
		
		vTaskDelay(100/portTICK_PERIOD_MS);
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
		
	
		if ( HIH8120_OK !=  hih8120Meassure() )
    4c5c:	f2 d4       	rcall	.+2532   	; 0x5642 <hih8120Meassure>
    4c5e:	88 23       	and	r24, r24
    4c60:	49 f0       	breq	.+18     	; 0x4c74 <measure_temp_task+0x66>
    4c62:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
		{
			m_print("Error in measuring the temperature!",xSemaphore_print);			
    4c66:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4c6a:	bc 01       	movw	r22, r24
    4c6c:	88 e1       	ldi	r24, 0x18	; 24
    4c6e:	95 e0       	ldi	r25, 0x05	; 5
    4c70:	27 dc       	rcall	.-1970   	; 0x44c0 <m_print>
    4c72:	4e c0       	rjmp	.+156    	; 0x4d10 <measure_temp_task+0x102>
    4c74:	83 e0       	ldi	r24, 0x03	; 3
		}
		else
		{	
			vTaskDelay(50/portTICK_PERIOD_MS);
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
			temperature.type = 2;
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	9a 83       	std	Y+2, r25	; 0x02
    4c82:	89 83       	std	Y+1, r24	; 0x01
			temperature.value = hih8120GetTemperature_x10();
    4c84:	09 d5       	rcall	.+2578   	; 0x5698 <hih8120GetTemperature_x10>
    4c86:	9c 83       	std	Y+4, r25	; 0x04
    4c88:	8b 83       	std	Y+3, r24	; 0x03
    4c8a:	80 91 14 0b 	lds	r24, 0x0B14	; 0x800b14 <xQueue>
				
			//write_to_buffer(xMessageBuffer,temperature);
			if (xQueueSend(xQueue, (void *) &temperature, portMAX_DELAY) != pdPASS)
    4c8e:	90 91 15 0b 	lds	r25, 0x0B15	; 0x800b15 <xQueue+0x1>
    4c92:	20 e0       	ldi	r18, 0x00	; 0
    4c94:	4f ef       	ldi	r20, 0xFF	; 255
    4c96:	5f ef       	ldi	r21, 0xFF	; 255
    4c98:	be 01       	movw	r22, r28
    4c9a:	6f 5f       	subi	r22, 0xFF	; 255
    4c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c9e:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
    4ca2:	81 30       	cpi	r24, 0x01	; 1
    4ca4:	49 f0       	breq	.+18     	; 0x4cb8 <measure_temp_task+0xaa>
    4ca6:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
			{
				m_print("Queue is full! Failed to send temperature!\n",xSemaphore_print);
    4caa:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4cae:	bc 01       	movw	r22, r24
    4cb0:	8c e3       	ldi	r24, 0x3C	; 60
    4cb2:	95 e0       	ldi	r25, 0x05	; 5
    4cb4:	05 dc       	rcall	.-2038   	; 0x44c0 <m_print>
    4cb6:	2c c0       	rjmp	.+88     	; 0x4d10 <measure_temp_task+0x102>
    4cb8:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
			}
			else
			{
				xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4cbc:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4cc0:	6f ef       	ldi	r22, 0xFF	; 255
    4cc2:	7f ef       	ldi	r23, 0xFF	; 255
    4cc4:	0e 94 31 09 	call	0x1262	; 0x1262 <xQueueSemaphoreTake>
    4cc8:	2b 81       	ldd	r18, Y+3	; 0x03
				printf("Temperature(type: %d, val: %d) sent!\n", temperature.type,temperature.value);
    4cca:	3c 81       	ldd	r19, Y+4	; 0x04
    4ccc:	89 81       	ldd	r24, Y+1	; 0x01
    4cce:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd0:	43 2f       	mov	r20, r19
    4cd2:	4f 93       	push	r20
    4cd4:	2f 93       	push	r18
    4cd6:	29 2f       	mov	r18, r25
    4cd8:	2f 93       	push	r18
    4cda:	8f 93       	push	r24
    4cdc:	88 e6       	ldi	r24, 0x68	; 104
    4cde:	95 e0       	ldi	r25, 0x05	; 5
    4ce0:	89 2f       	mov	r24, r25
    4ce2:	8f 93       	push	r24
    4ce4:	88 e6       	ldi	r24, 0x68	; 104
    4ce6:	95 e0       	ldi	r25, 0x05	; 5
    4ce8:	8f 93       	push	r24
    4cea:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printf>
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	0f 90       	pop	r0
    4cf4:	0f 90       	pop	r0
    4cf6:	0f 90       	pop	r0
    4cf8:	0f 90       	pop	r0
    4cfa:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <xSemaphore_print>
				xSemaphoreGive(xSemaphore_print);
    4cfe:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <xSemaphore_print+0x1>
    4d02:	20 e0       	ldi	r18, 0x00	; 0
    4d04:	40 e0       	ldi	r20, 0x00	; 0
    4d06:	50 e0       	ldi	r21, 0x00	; 0
    4d08:	60 e0       	ldi	r22, 0x00	; 0
    4d0a:	70 e0       	ldi	r23, 0x00	; 0
    4d0c:	0e 94 81 07 	call	0xf02	; 0xf02 <xQueueGenericSend>
    4d10:	8e e3       	ldi	r24, 0x3E	; 62
			}
		}
		
		//m_print("Temperature sent to the message buffer!\n",xSemaphore_print);
		vTaskDelay(1000/portTICK_PERIOD_MS);
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
    4d18:	82 cf       	rjmp	.-252    	; 0x4c1e <measure_temp_task+0x10>

00004d1a <main>:
void create_all_tasks(UBaseType_t lora_handler_task_priority);
void create_all_timers();
void lora_setup(void);

int main(void)
{				
    4d1a:	0f 93       	push	r16
    4d1c:	1f 93       	push	r17
    4d1e:	cf 93       	push	r28
    4d20:	df 93       	push	r29
    4d22:	cd b7       	in	r28, 0x3d	; 61
    4d24:	de b7       	in	r29, 0x3e	; 62
	global_init();
    4d26:	f9 dd       	rcall	.-1038   	; 0x491a <global_init>
	
	create_all_timers();
    4d28:	28 dc       	rcall	.-1968   	; 0x457a <create_all_timers>
	
	create_all_tasks(LORA_RESET_TASK_PRIORITY);
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	ee db       	rcall	.-2084   	; 0x450a <create_all_tasks>
    4d2e:	0e 94 b5 13 	call	0x276a	; 0x276a <xTaskGetTickCount>
	
	xTimerStart(xTimer_5_mins,0);
    4d32:	ac 01       	movw	r20, r24
    4d34:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <xTimer_5_mins>
    4d38:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <xTimer_5_mins+0x1>
    4d3c:	00 e0       	ldi	r16, 0x00	; 0
    4d3e:	10 e0       	ldi	r17, 0x00	; 0
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	61 e0       	ldi	r22, 0x01	; 1
    4d46:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <xTimerGenericCommand>
    4d4a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <vTaskStartScheduler>
					
	vTaskStartScheduler();
    4d4e:	ff cf       	rjmp	.-2      	; 0x4d4e <main+0x34>

00004d50 <usart_getchar>:
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	1f 92       	push	r1
    4d56:	cd b7       	in	r28, 0x3d	; 61
    4d58:	de b7       	in	r29, 0x3e	; 62
    4d5a:	be 01       	movw	r22, r28
    4d5c:	6f 5f       	subi	r22, 0xFF	; 255
    4d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d60:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <_com_serial_instance>
    4d64:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <_com_serial_instance+0x1>
    4d68:	4f d1       	rcall	.+670    	; 0x5008 <serial_get_byte>
    4d6a:	81 11       	cpse	r24, r1
    4d6c:	f6 cf       	rjmp	.-20     	; 0x4d5a <usart_getchar+0xa>
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	0f 90       	pop	r0
    4d74:	df 91       	pop	r29
    4d76:	cf 91       	pop	r28
    4d78:	08 95       	ret

00004d7a <usart_putchar>:
    4d7a:	68 2f       	mov	r22, r24
    4d7c:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <_com_serial_instance>
    4d80:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <_com_serial_instance+0x1>
    4d84:	cc d0       	rcall	.+408    	; 0x4f1e <serial_send_byte>
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	08 95       	ret

00004d8c <stdioCreate>:
    4d8c:	8f 92       	push	r8
    4d8e:	9f 92       	push	r9
    4d90:	af 92       	push	r10
    4d92:	cf 92       	push	r12
    4d94:	ef 92       	push	r14
    4d96:	0f 93       	push	r16
    4d98:	81 2c       	mov	r8, r1
    4d9a:	91 2c       	mov	r9, r1
    4d9c:	68 94       	set
    4d9e:	aa 24       	eor	r10, r10
    4da0:	a7 f8       	bld	r10, 7
    4da2:	68 94       	set
    4da4:	cc 24       	eor	r12, r12
    4da6:	c7 f8       	bld	r12, 7
    4da8:	e1 2c       	mov	r14, r1
    4daa:	00 e0       	ldi	r16, 0x00	; 0
    4dac:	23 e0       	ldi	r18, 0x03	; 3
    4dae:	40 e0       	ldi	r20, 0x00	; 0
    4db0:	51 ee       	ldi	r21, 0xE1	; 225
    4db2:	60 e0       	ldi	r22, 0x00	; 0
    4db4:	70 e0       	ldi	r23, 0x00	; 0
    4db6:	13 d0       	rcall	.+38     	; 0x4dde <serial_new_instance>
    4db8:	90 93 ad 09 	sts	0x09AD, r25	; 0x8009ad <_com_serial_instance+0x1>
    4dbc:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_com_serial_instance>
    4dc0:	e0 e3       	ldi	r30, 0x30	; 48
    4dc2:	fb e0       	ldi	r31, 0x0B	; 11
    4dc4:	86 e0       	ldi	r24, 0x06	; 6
    4dc6:	92 e0       	ldi	r25, 0x02	; 2
    4dc8:	91 83       	std	Z+1, r25	; 0x01
    4dca:	80 83       	st	Z, r24
    4dcc:	93 83       	std	Z+3, r25	; 0x03
    4dce:	82 83       	std	Z+2, r24	; 0x02
    4dd0:	0f 91       	pop	r16
    4dd2:	ef 90       	pop	r14
    4dd4:	cf 90       	pop	r12
    4dd6:	af 90       	pop	r10
    4dd8:	9f 90       	pop	r9
    4dda:	8f 90       	pop	r8
    4ddc:	08 95       	ret

00004dde <serial_new_instance>:
    4dde:	2f 92       	push	r2
    4de0:	3f 92       	push	r3
    4de2:	4f 92       	push	r4
    4de4:	5f 92       	push	r5
    4de6:	6f 92       	push	r6
    4de8:	7f 92       	push	r7
    4dea:	8f 92       	push	r8
    4dec:	9f 92       	push	r9
    4dee:	af 92       	push	r10
    4df0:	cf 92       	push	r12
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	0f 93       	push	r16
    4df8:	1f 93       	push	r17
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	f8 2e       	mov	r15, r24
    4e04:	2a 01       	movw	r4, r20
    4e06:	3b 01       	movw	r6, r22
    4e08:	88 e0       	ldi	r24, 0x08	; 8
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <malloc>
    4e10:	8c 01       	movw	r16, r24
    4e12:	8f 2d       	mov	r24, r15
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	88 0f       	add	r24, r24
    4e18:	99 1f       	adc	r25, r25
    4e1a:	fc 01       	movw	r30, r24
    4e1c:	e2 55       	subi	r30, 0x52	; 82
    4e1e:	f6 4f       	sbci	r31, 0xF6	; 246
    4e20:	11 83       	std	Z+1, r17	; 0x01
    4e22:	00 83       	st	Z, r16
    4e24:	fc 01       	movw	r30, r24
    4e26:	ec 5e       	subi	r30, 0xEC	; 236
    4e28:	fd 4f       	sbci	r31, 0xFD	; 253
    4e2a:	80 81       	ld	r24, Z
    4e2c:	91 81       	ldd	r25, Z+1	; 0x01
    4e2e:	d8 01       	movw	r26, r16
    4e30:	8d 93       	st	X+, r24
    4e32:	9c 93       	st	X, r25
    4e34:	6c 2d       	mov	r22, r12
    4e36:	70 e0       	ldi	r23, 0x00	; 0
    4e38:	84 e0       	ldi	r24, 0x04	; 4
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <calloc>
    4e40:	1c 01       	movw	r2, r24
    4e42:	61 e0       	ldi	r22, 0x01	; 1
    4e44:	70 e0       	ldi	r23, 0x00	; 0
    4e46:	86 e0       	ldi	r24, 0x06	; 6
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <calloc>
    4e4e:	7c 01       	movw	r14, r24
    4e50:	4c 2d       	mov	r20, r12
    4e52:	b1 01       	movw	r22, r2
    4e54:	4d d3       	rcall	.+1690   	; 0x54f0 <fifo_init>
    4e56:	f8 01       	movw	r30, r16
    4e58:	f5 82       	std	Z+5, r15	; 0x05
    4e5a:	e4 82       	std	Z+4, r14	; 0x04
    4e5c:	6a 2d       	mov	r22, r10
    4e5e:	70 e0       	ldi	r23, 0x00	; 0
    4e60:	84 e0       	ldi	r24, 0x04	; 4
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <calloc>
    4e68:	1c 01       	movw	r2, r24
    4e6a:	61 e0       	ldi	r22, 0x01	; 1
    4e6c:	70 e0       	ldi	r23, 0x00	; 0
    4e6e:	86 e0       	ldi	r24, 0x06	; 6
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <calloc>
    4e76:	7c 01       	movw	r14, r24
    4e78:	4a 2d       	mov	r20, r10
    4e7a:	b1 01       	movw	r22, r2
    4e7c:	39 d3       	rcall	.+1650   	; 0x54f0 <fifo_init>
    4e7e:	d8 01       	movw	r26, r16
    4e80:	13 96       	adiw	r26, 0x03	; 3
    4e82:	fc 92       	st	X, r15
    4e84:	ee 92       	st	-X, r14
    4e86:	12 97       	sbiw	r26, 0x02	; 2
    4e88:	17 96       	adiw	r26, 0x07	; 7
    4e8a:	9c 92       	st	X, r9
    4e8c:	8e 92       	st	-X, r8
    4e8e:	16 97       	sbiw	r26, 0x06	; 6
    4e90:	ff b6       	in	r15, 0x3f	; 63
    4e92:	f8 94       	cli
    4e94:	ed 91       	ld	r30, X+
    4e96:	fc 91       	ld	r31, X
    4e98:	11 97       	sbiw	r26, 0x01	; 1
    4e9a:	36 97       	sbiw	r30, 0x06	; 6
    4e9c:	80 81       	ld	r24, Z
    4e9e:	82 60       	ori	r24, 0x02	; 2
    4ea0:	80 83       	st	Z, r24
    4ea2:	8d 90       	ld	r8, X+
    4ea4:	9c 90       	ld	r9, X
    4ea6:	c3 01       	movw	r24, r6
    4ea8:	b2 01       	movw	r22, r4
    4eaa:	0e 94 b9 34 	call	0x6972	; 0x6972 <__floatunsisf>
    4eae:	20 e0       	ldi	r18, 0x00	; 0
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	40 e0       	ldi	r20, 0x00	; 0
    4eb4:	51 e4       	ldi	r21, 0x41	; 65
    4eb6:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__mulsf3>
    4eba:	9b 01       	movw	r18, r22
    4ebc:	ac 01       	movw	r20, r24
    4ebe:	60 e0       	ldi	r22, 0x00	; 0
    4ec0:	74 e2       	ldi	r23, 0x24	; 36
    4ec2:	84 e7       	ldi	r24, 0x74	; 116
    4ec4:	9b e4       	ldi	r25, 0x4B	; 75
    4ec6:	0e 94 20 34 	call	0x6840	; 0x6840 <__divsf3>
    4eca:	20 e0       	ldi	r18, 0x00	; 0
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	40 e8       	ldi	r20, 0x80	; 128
    4ed0:	5f e3       	ldi	r21, 0x3F	; 63
    4ed2:	0e 94 b7 33 	call	0x676e	; 0x676e <__subsf3>
    4ed6:	0e 94 8d 34 	call	0x691a	; 0x691a <__fixunssfsi>
    4eda:	f4 01       	movw	r30, r8
    4edc:	32 97       	sbiw	r30, 0x02	; 2
    4ede:	60 83       	st	Z, r22
    4ee0:	d8 01       	movw	r26, r16
    4ee2:	ed 91       	ld	r30, X+
    4ee4:	fc 91       	ld	r31, X
    4ee6:	11 97       	sbiw	r26, 0x01	; 1
    4ee8:	35 97       	sbiw	r30, 0x05	; 5
    4eea:	88 e9       	ldi	r24, 0x98	; 152
    4eec:	80 83       	st	Z, r24
    4eee:	ed 91       	ld	r30, X+
    4ef0:	fc 91       	ld	r31, X
    4ef2:	34 97       	sbiw	r30, 0x04	; 4
    4ef4:	86 e0       	ldi	r24, 0x06	; 6
    4ef6:	80 83       	st	Z, r24
    4ef8:	ff be       	out	0x3f, r15	; 63
    4efa:	c8 01       	movw	r24, r16
    4efc:	df 91       	pop	r29
    4efe:	cf 91       	pop	r28
    4f00:	1f 91       	pop	r17
    4f02:	0f 91       	pop	r16
    4f04:	ff 90       	pop	r15
    4f06:	ef 90       	pop	r14
    4f08:	cf 90       	pop	r12
    4f0a:	af 90       	pop	r10
    4f0c:	9f 90       	pop	r9
    4f0e:	8f 90       	pop	r8
    4f10:	7f 90       	pop	r7
    4f12:	6f 90       	pop	r6
    4f14:	5f 90       	pop	r5
    4f16:	4f 90       	pop	r4
    4f18:	3f 90       	pop	r3
    4f1a:	2f 90       	pop	r2
    4f1c:	08 95       	ret

00004f1e <serial_send_byte>:
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	ec 01       	movw	r28, r24
    4f24:	ea 81       	ldd	r30, Y+2	; 0x02
    4f26:	fb 81       	ldd	r31, Y+3	; 0x03
    4f28:	93 81       	ldd	r25, Z+3	; 0x03
    4f2a:	82 81       	ldd	r24, Z+2	; 0x02
    4f2c:	25 81       	ldd	r18, Z+5	; 0x05
    4f2e:	98 1b       	sub	r25, r24
    4f30:	92 23       	and	r25, r18
    4f32:	84 81       	ldd	r24, Z+4	; 0x04
    4f34:	98 17       	cp	r25, r24
    4f36:	a1 f0       	breq	.+40     	; 0x4f60 <serial_send_byte+0x42>
    4f38:	93 81       	ldd	r25, Z+3	; 0x03
    4f3a:	26 95       	lsr	r18
    4f3c:	29 23       	and	r18, r25
    4f3e:	a0 81       	ld	r26, Z
    4f40:	b1 81       	ldd	r27, Z+1	; 0x01
    4f42:	a2 0f       	add	r26, r18
    4f44:	b1 1d       	adc	r27, r1
    4f46:	6c 93       	st	X, r22
    4f48:	9f 5f       	subi	r25, 0xFF	; 255
    4f4a:	25 81       	ldd	r18, Z+5	; 0x05
    4f4c:	92 23       	and	r25, r18
    4f4e:	93 83       	std	Z+3, r25	; 0x03
    4f50:	e8 81       	ld	r30, Y
    4f52:	f9 81       	ldd	r31, Y+1	; 0x01
    4f54:	35 97       	sbiw	r30, 0x05	; 5
    4f56:	80 81       	ld	r24, Z
    4f58:	80 62       	ori	r24, 0x20	; 32
    4f5a:	80 83       	st	Z, r24
    4f5c:	80 e0       	ldi	r24, 0x00	; 0
    4f5e:	01 c0       	rjmp	.+2      	; 0x4f62 <serial_send_byte+0x44>
    4f60:	82 e0       	ldi	r24, 0x02	; 2
    4f62:	df 91       	pop	r29
    4f64:	cf 91       	pop	r28
    4f66:	08 95       	ret

00004f68 <serial_send_bytes>:
    4f68:	ef 92       	push	r14
    4f6a:	ff 92       	push	r15
    4f6c:	0f 93       	push	r16
    4f6e:	1f 93       	push	r17
    4f70:	cf 93       	push	r28
    4f72:	df 93       	push	r29
    4f74:	7c 01       	movw	r14, r24
    4f76:	dc 01       	movw	r26, r24
    4f78:	12 96       	adiw	r26, 0x02	; 2
    4f7a:	ed 91       	ld	r30, X+
    4f7c:	fc 91       	ld	r31, X
    4f7e:	13 97       	sbiw	r26, 0x03	; 3
    4f80:	93 81       	ldd	r25, Z+3	; 0x03
    4f82:	82 81       	ldd	r24, Z+2	; 0x02
    4f84:	98 1b       	sub	r25, r24
    4f86:	85 81       	ldd	r24, Z+5	; 0x05
    4f88:	98 23       	and	r25, r24
    4f8a:	84 81       	ldd	r24, Z+4	; 0x04
    4f8c:	89 1b       	sub	r24, r25
    4f8e:	86 17       	cp	r24, r22
    4f90:	98 f1       	brcs	.+102    	; 0x4ff8 <serial_send_bytes+0x90>
    4f92:	66 23       	and	r22, r22
    4f94:	41 f1       	breq	.+80     	; 0x4fe6 <serial_send_bytes+0x7e>
    4f96:	84 2f       	mov	r24, r20
    4f98:	95 2f       	mov	r25, r21
    4f9a:	dc 01       	movw	r26, r24
    4f9c:	61 50       	subi	r22, 0x01	; 1
    4f9e:	46 2f       	mov	r20, r22
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	4f 5f       	subi	r20, 0xFF	; 255
    4fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    4fa6:	48 0f       	add	r20, r24
    4fa8:	59 1f       	adc	r21, r25
    4faa:	e7 01       	movw	r28, r14
    4fac:	ea 81       	ldd	r30, Y+2	; 0x02
    4fae:	fb 81       	ldd	r31, Y+3	; 0x03
    4fb0:	93 81       	ldd	r25, Z+3	; 0x03
    4fb2:	82 81       	ldd	r24, Z+2	; 0x02
    4fb4:	25 81       	ldd	r18, Z+5	; 0x05
    4fb6:	98 1b       	sub	r25, r24
    4fb8:	92 23       	and	r25, r18
    4fba:	84 81       	ldd	r24, Z+4	; 0x04
    4fbc:	98 17       	cp	r25, r24
    4fbe:	79 f0       	breq	.+30     	; 0x4fde <serial_send_bytes+0x76>
    4fc0:	8c 91       	ld	r24, X
    4fc2:	93 81       	ldd	r25, Z+3	; 0x03
    4fc4:	26 95       	lsr	r18
    4fc6:	29 23       	and	r18, r25
    4fc8:	60 81       	ld	r22, Z
    4fca:	71 81       	ldd	r23, Z+1	; 0x01
    4fcc:	8b 01       	movw	r16, r22
    4fce:	02 0f       	add	r16, r18
    4fd0:	11 1d       	adc	r17, r1
    4fd2:	e8 01       	movw	r28, r16
    4fd4:	88 83       	st	Y, r24
    4fd6:	9f 5f       	subi	r25, 0xFF	; 255
    4fd8:	85 81       	ldd	r24, Z+5	; 0x05
    4fda:	98 23       	and	r25, r24
    4fdc:	93 83       	std	Z+3, r25	; 0x03
    4fde:	11 96       	adiw	r26, 0x01	; 1
    4fe0:	a4 17       	cp	r26, r20
    4fe2:	b5 07       	cpc	r27, r21
    4fe4:	11 f7       	brne	.-60     	; 0x4faa <serial_send_bytes+0x42>
    4fe6:	d7 01       	movw	r26, r14
    4fe8:	ed 91       	ld	r30, X+
    4fea:	fc 91       	ld	r31, X
    4fec:	35 97       	sbiw	r30, 0x05	; 5
    4fee:	80 81       	ld	r24, Z
    4ff0:	80 62       	ori	r24, 0x20	; 32
    4ff2:	80 83       	st	Z, r24
    4ff4:	80 e0       	ldi	r24, 0x00	; 0
    4ff6:	01 c0       	rjmp	.+2      	; 0x4ffa <serial_send_bytes+0x92>
    4ff8:	82 e0       	ldi	r24, 0x02	; 2
    4ffa:	df 91       	pop	r29
    4ffc:	cf 91       	pop	r28
    4ffe:	1f 91       	pop	r17
    5000:	0f 91       	pop	r16
    5002:	ff 90       	pop	r15
    5004:	ef 90       	pop	r14
    5006:	08 95       	ret

00005008 <serial_get_byte>:
    5008:	dc 01       	movw	r26, r24
    500a:	14 96       	adiw	r26, 0x04	; 4
    500c:	ed 91       	ld	r30, X+
    500e:	fc 91       	ld	r31, X
    5010:	15 97       	sbiw	r26, 0x05	; 5
    5012:	93 81       	ldd	r25, Z+3	; 0x03
    5014:	82 81       	ldd	r24, Z+2	; 0x02
    5016:	98 17       	cp	r25, r24
    5018:	89 f0       	breq	.+34     	; 0x503c <serial_get_byte+0x34>
    501a:	92 81       	ldd	r25, Z+2	; 0x02
    501c:	85 81       	ldd	r24, Z+5	; 0x05
    501e:	86 95       	lsr	r24
    5020:	89 23       	and	r24, r25
    5022:	a0 81       	ld	r26, Z
    5024:	b1 81       	ldd	r27, Z+1	; 0x01
    5026:	a8 0f       	add	r26, r24
    5028:	b1 1d       	adc	r27, r1
    502a:	8c 91       	ld	r24, X
    502c:	db 01       	movw	r26, r22
    502e:	8c 93       	st	X, r24
    5030:	9f 5f       	subi	r25, 0xFF	; 255
    5032:	85 81       	ldd	r24, Z+5	; 0x05
    5034:	98 23       	and	r25, r24
    5036:	92 83       	std	Z+2, r25	; 0x02
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	08 95       	ret
    503c:	83 e0       	ldi	r24, 0x03	; 3
    503e:	08 95       	ret

00005040 <__vector_25>:
    5040:	1f 92       	push	r1
    5042:	0f 92       	push	r0
    5044:	0f b6       	in	r0, 0x3f	; 63
    5046:	0f 92       	push	r0
    5048:	11 24       	eor	r1, r1
    504a:	0b b6       	in	r0, 0x3b	; 59
    504c:	0f 92       	push	r0
    504e:	2f 93       	push	r18
    5050:	3f 93       	push	r19
    5052:	4f 93       	push	r20
    5054:	5f 93       	push	r21
    5056:	6f 93       	push	r22
    5058:	7f 93       	push	r23
    505a:	8f 93       	push	r24
    505c:	9f 93       	push	r25
    505e:	af 93       	push	r26
    5060:	bf 93       	push	r27
    5062:	cf 93       	push	r28
    5064:	df 93       	push	r29
    5066:	ef 93       	push	r30
    5068:	ff 93       	push	r31
    506a:	a0 91 ae 09 	lds	r26, 0x09AE	; 0x8009ae <_ser_handle>
    506e:	b0 91 af 09 	lds	r27, 0x09AF	; 0x8009af <_ser_handle+0x1>
    5072:	10 97       	sbiw	r26, 0x00	; 0
    5074:	11 f1       	breq	.+68     	; 0x50ba <__vector_25+0x7a>
    5076:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    507a:	14 96       	adiw	r26, 0x04	; 4
    507c:	ed 91       	ld	r30, X+
    507e:	fc 91       	ld	r31, X
    5080:	15 97       	sbiw	r26, 0x05	; 5
    5082:	93 81       	ldd	r25, Z+3	; 0x03
    5084:	82 81       	ldd	r24, Z+2	; 0x02
    5086:	25 81       	ldd	r18, Z+5	; 0x05
    5088:	98 1b       	sub	r25, r24
    508a:	92 23       	and	r25, r18
    508c:	84 81       	ldd	r24, Z+4	; 0x04
    508e:	98 17       	cp	r25, r24
    5090:	61 f0       	breq	.+24     	; 0x50aa <__vector_25+0x6a>
    5092:	83 81       	ldd	r24, Z+3	; 0x03
    5094:	26 95       	lsr	r18
    5096:	28 23       	and	r18, r24
    5098:	c0 81       	ld	r28, Z
    509a:	d1 81       	ldd	r29, Z+1	; 0x01
    509c:	c2 0f       	add	r28, r18
    509e:	d1 1d       	adc	r29, r1
    50a0:	68 83       	st	Y, r22
    50a2:	8f 5f       	subi	r24, 0xFF	; 255
    50a4:	95 81       	ldd	r25, Z+5	; 0x05
    50a6:	89 23       	and	r24, r25
    50a8:	83 83       	std	Z+3, r24	; 0x03
    50aa:	16 96       	adiw	r26, 0x06	; 6
    50ac:	ed 91       	ld	r30, X+
    50ae:	fc 91       	ld	r31, X
    50b0:	17 97       	sbiw	r26, 0x07	; 7
    50b2:	30 97       	sbiw	r30, 0x00	; 0
    50b4:	11 f0       	breq	.+4      	; 0x50ba <__vector_25+0x7a>
    50b6:	cd 01       	movw	r24, r26
    50b8:	19 95       	eicall
    50ba:	ff 91       	pop	r31
    50bc:	ef 91       	pop	r30
    50be:	df 91       	pop	r29
    50c0:	cf 91       	pop	r28
    50c2:	bf 91       	pop	r27
    50c4:	af 91       	pop	r26
    50c6:	9f 91       	pop	r25
    50c8:	8f 91       	pop	r24
    50ca:	7f 91       	pop	r23
    50cc:	6f 91       	pop	r22
    50ce:	5f 91       	pop	r21
    50d0:	4f 91       	pop	r20
    50d2:	3f 91       	pop	r19
    50d4:	2f 91       	pop	r18
    50d6:	0f 90       	pop	r0
    50d8:	0b be       	out	0x3b, r0	; 59
    50da:	0f 90       	pop	r0
    50dc:	0f be       	out	0x3f, r0	; 63
    50de:	0f 90       	pop	r0
    50e0:	1f 90       	pop	r1
    50e2:	18 95       	reti

000050e4 <__vector_26>:
    50e4:	1f 92       	push	r1
    50e6:	0f 92       	push	r0
    50e8:	0f b6       	in	r0, 0x3f	; 63
    50ea:	0f 92       	push	r0
    50ec:	11 24       	eor	r1, r1
    50ee:	0b b6       	in	r0, 0x3b	; 59
    50f0:	0f 92       	push	r0
    50f2:	2f 93       	push	r18
    50f4:	8f 93       	push	r24
    50f6:	9f 93       	push	r25
    50f8:	af 93       	push	r26
    50fa:	bf 93       	push	r27
    50fc:	ef 93       	push	r30
    50fe:	ff 93       	push	r31
    5100:	e0 91 ae 09 	lds	r30, 0x09AE	; 0x8009ae <_ser_handle>
    5104:	f0 91 af 09 	lds	r31, 0x09AF	; 0x8009af <_ser_handle+0x1>
    5108:	30 97       	sbiw	r30, 0x00	; 0
    510a:	b9 f0       	breq	.+46     	; 0x513a <__vector_26+0x56>
    510c:	02 80       	ldd	r0, Z+2	; 0x02
    510e:	f3 81       	ldd	r31, Z+3	; 0x03
    5110:	e0 2d       	mov	r30, r0
    5112:	93 81       	ldd	r25, Z+3	; 0x03
    5114:	82 81       	ldd	r24, Z+2	; 0x02
    5116:	98 17       	cp	r25, r24
    5118:	b1 f0       	breq	.+44     	; 0x5146 <__vector_26+0x62>
    511a:	92 81       	ldd	r25, Z+2	; 0x02
    511c:	85 81       	ldd	r24, Z+5	; 0x05
    511e:	28 2f       	mov	r18, r24
    5120:	26 95       	lsr	r18
    5122:	29 23       	and	r18, r25
    5124:	a0 81       	ld	r26, Z
    5126:	b1 81       	ldd	r27, Z+1	; 0x01
    5128:	a2 0f       	add	r26, r18
    512a:	b1 1d       	adc	r27, r1
    512c:	2c 91       	ld	r18, X
    512e:	9f 5f       	subi	r25, 0xFF	; 255
    5130:	89 23       	and	r24, r25
    5132:	82 83       	std	Z+2, r24	; 0x02
    5134:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5138:	0b c0       	rjmp	.+22     	; 0x5150 <__vector_26+0x6c>
    513a:	e1 ec       	ldi	r30, 0xC1	; 193
    513c:	f0 e0       	ldi	r31, 0x00	; 0
    513e:	80 81       	ld	r24, Z
    5140:	8f 7d       	andi	r24, 0xDF	; 223
    5142:	80 83       	st	Z, r24
    5144:	05 c0       	rjmp	.+10     	; 0x5150 <__vector_26+0x6c>
    5146:	e1 ec       	ldi	r30, 0xC1	; 193
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	80 81       	ld	r24, Z
    514c:	8f 7d       	andi	r24, 0xDF	; 223
    514e:	80 83       	st	Z, r24
    5150:	ff 91       	pop	r31
    5152:	ef 91       	pop	r30
    5154:	bf 91       	pop	r27
    5156:	af 91       	pop	r26
    5158:	9f 91       	pop	r25
    515a:	8f 91       	pop	r24
    515c:	2f 91       	pop	r18
    515e:	0f 90       	pop	r0
    5160:	0b be       	out	0x3b, r0	; 59
    5162:	0f 90       	pop	r0
    5164:	0f be       	out	0x3f, r0	; 63
    5166:	0f 90       	pop	r0
    5168:	1f 90       	pop	r1
    516a:	18 95       	reti

0000516c <__vector_36>:
    516c:	1f 92       	push	r1
    516e:	0f 92       	push	r0
    5170:	0f b6       	in	r0, 0x3f	; 63
    5172:	0f 92       	push	r0
    5174:	11 24       	eor	r1, r1
    5176:	0b b6       	in	r0, 0x3b	; 59
    5178:	0f 92       	push	r0
    517a:	2f 93       	push	r18
    517c:	3f 93       	push	r19
    517e:	4f 93       	push	r20
    5180:	5f 93       	push	r21
    5182:	6f 93       	push	r22
    5184:	7f 93       	push	r23
    5186:	8f 93       	push	r24
    5188:	9f 93       	push	r25
    518a:	af 93       	push	r26
    518c:	bf 93       	push	r27
    518e:	cf 93       	push	r28
    5190:	df 93       	push	r29
    5192:	ef 93       	push	r30
    5194:	ff 93       	push	r31
    5196:	a0 91 b0 09 	lds	r26, 0x09B0	; 0x8009b0 <_ser_handle+0x2>
    519a:	b0 91 b1 09 	lds	r27, 0x09B1	; 0x8009b1 <_ser_handle+0x3>
    519e:	10 97       	sbiw	r26, 0x00	; 0
    51a0:	11 f1       	breq	.+68     	; 0x51e6 <__vector_36+0x7a>
    51a2:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    51a6:	14 96       	adiw	r26, 0x04	; 4
    51a8:	ed 91       	ld	r30, X+
    51aa:	fc 91       	ld	r31, X
    51ac:	15 97       	sbiw	r26, 0x05	; 5
    51ae:	93 81       	ldd	r25, Z+3	; 0x03
    51b0:	82 81       	ldd	r24, Z+2	; 0x02
    51b2:	25 81       	ldd	r18, Z+5	; 0x05
    51b4:	98 1b       	sub	r25, r24
    51b6:	92 23       	and	r25, r18
    51b8:	84 81       	ldd	r24, Z+4	; 0x04
    51ba:	98 17       	cp	r25, r24
    51bc:	61 f0       	breq	.+24     	; 0x51d6 <__vector_36+0x6a>
    51be:	83 81       	ldd	r24, Z+3	; 0x03
    51c0:	26 95       	lsr	r18
    51c2:	28 23       	and	r18, r24
    51c4:	c0 81       	ld	r28, Z
    51c6:	d1 81       	ldd	r29, Z+1	; 0x01
    51c8:	c2 0f       	add	r28, r18
    51ca:	d1 1d       	adc	r29, r1
    51cc:	68 83       	st	Y, r22
    51ce:	8f 5f       	subi	r24, 0xFF	; 255
    51d0:	95 81       	ldd	r25, Z+5	; 0x05
    51d2:	89 23       	and	r24, r25
    51d4:	83 83       	std	Z+3, r24	; 0x03
    51d6:	16 96       	adiw	r26, 0x06	; 6
    51d8:	ed 91       	ld	r30, X+
    51da:	fc 91       	ld	r31, X
    51dc:	17 97       	sbiw	r26, 0x07	; 7
    51de:	30 97       	sbiw	r30, 0x00	; 0
    51e0:	11 f0       	breq	.+4      	; 0x51e6 <__vector_36+0x7a>
    51e2:	cd 01       	movw	r24, r26
    51e4:	19 95       	eicall
    51e6:	ff 91       	pop	r31
    51e8:	ef 91       	pop	r30
    51ea:	df 91       	pop	r29
    51ec:	cf 91       	pop	r28
    51ee:	bf 91       	pop	r27
    51f0:	af 91       	pop	r26
    51f2:	9f 91       	pop	r25
    51f4:	8f 91       	pop	r24
    51f6:	7f 91       	pop	r23
    51f8:	6f 91       	pop	r22
    51fa:	5f 91       	pop	r21
    51fc:	4f 91       	pop	r20
    51fe:	3f 91       	pop	r19
    5200:	2f 91       	pop	r18
    5202:	0f 90       	pop	r0
    5204:	0b be       	out	0x3b, r0	; 59
    5206:	0f 90       	pop	r0
    5208:	0f be       	out	0x3f, r0	; 63
    520a:	0f 90       	pop	r0
    520c:	1f 90       	pop	r1
    520e:	18 95       	reti

00005210 <__vector_37>:
    5210:	1f 92       	push	r1
    5212:	0f 92       	push	r0
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	0f 92       	push	r0
    5218:	11 24       	eor	r1, r1
    521a:	0b b6       	in	r0, 0x3b	; 59
    521c:	0f 92       	push	r0
    521e:	2f 93       	push	r18
    5220:	8f 93       	push	r24
    5222:	9f 93       	push	r25
    5224:	af 93       	push	r26
    5226:	bf 93       	push	r27
    5228:	ef 93       	push	r30
    522a:	ff 93       	push	r31
    522c:	e0 91 b0 09 	lds	r30, 0x09B0	; 0x8009b0 <_ser_handle+0x2>
    5230:	f0 91 b1 09 	lds	r31, 0x09B1	; 0x8009b1 <_ser_handle+0x3>
    5234:	30 97       	sbiw	r30, 0x00	; 0
    5236:	b9 f0       	breq	.+46     	; 0x5266 <__vector_37+0x56>
    5238:	02 80       	ldd	r0, Z+2	; 0x02
    523a:	f3 81       	ldd	r31, Z+3	; 0x03
    523c:	e0 2d       	mov	r30, r0
    523e:	93 81       	ldd	r25, Z+3	; 0x03
    5240:	82 81       	ldd	r24, Z+2	; 0x02
    5242:	98 17       	cp	r25, r24
    5244:	b1 f0       	breq	.+44     	; 0x5272 <__vector_37+0x62>
    5246:	92 81       	ldd	r25, Z+2	; 0x02
    5248:	85 81       	ldd	r24, Z+5	; 0x05
    524a:	28 2f       	mov	r18, r24
    524c:	26 95       	lsr	r18
    524e:	29 23       	and	r18, r25
    5250:	a0 81       	ld	r26, Z
    5252:	b1 81       	ldd	r27, Z+1	; 0x01
    5254:	a2 0f       	add	r26, r18
    5256:	b1 1d       	adc	r27, r1
    5258:	2c 91       	ld	r18, X
    525a:	9f 5f       	subi	r25, 0xFF	; 255
    525c:	89 23       	and	r24, r25
    525e:	82 83       	std	Z+2, r24	; 0x02
    5260:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5264:	0b c0       	rjmp	.+22     	; 0x527c <__vector_37+0x6c>
    5266:	e9 ec       	ldi	r30, 0xC9	; 201
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	80 81       	ld	r24, Z
    526c:	8f 7d       	andi	r24, 0xDF	; 223
    526e:	80 83       	st	Z, r24
    5270:	05 c0       	rjmp	.+10     	; 0x527c <__vector_37+0x6c>
    5272:	e9 ec       	ldi	r30, 0xC9	; 201
    5274:	f0 e0       	ldi	r31, 0x00	; 0
    5276:	80 81       	ld	r24, Z
    5278:	8f 7d       	andi	r24, 0xDF	; 223
    527a:	80 83       	st	Z, r24
    527c:	ff 91       	pop	r31
    527e:	ef 91       	pop	r30
    5280:	bf 91       	pop	r27
    5282:	af 91       	pop	r26
    5284:	9f 91       	pop	r25
    5286:	8f 91       	pop	r24
    5288:	2f 91       	pop	r18
    528a:	0f 90       	pop	r0
    528c:	0b be       	out	0x3b, r0	; 59
    528e:	0f 90       	pop	r0
    5290:	0f be       	out	0x3f, r0	; 63
    5292:	0f 90       	pop	r0
    5294:	1f 90       	pop	r1
    5296:	18 95       	reti

00005298 <__vector_51>:
    5298:	1f 92       	push	r1
    529a:	0f 92       	push	r0
    529c:	0f b6       	in	r0, 0x3f	; 63
    529e:	0f 92       	push	r0
    52a0:	11 24       	eor	r1, r1
    52a2:	0b b6       	in	r0, 0x3b	; 59
    52a4:	0f 92       	push	r0
    52a6:	2f 93       	push	r18
    52a8:	3f 93       	push	r19
    52aa:	4f 93       	push	r20
    52ac:	5f 93       	push	r21
    52ae:	6f 93       	push	r22
    52b0:	7f 93       	push	r23
    52b2:	8f 93       	push	r24
    52b4:	9f 93       	push	r25
    52b6:	af 93       	push	r26
    52b8:	bf 93       	push	r27
    52ba:	cf 93       	push	r28
    52bc:	df 93       	push	r29
    52be:	ef 93       	push	r30
    52c0:	ff 93       	push	r31
    52c2:	a0 91 b2 09 	lds	r26, 0x09B2	; 0x8009b2 <_ser_handle+0x4>
    52c6:	b0 91 b3 09 	lds	r27, 0x09B3	; 0x8009b3 <_ser_handle+0x5>
    52ca:	10 97       	sbiw	r26, 0x00	; 0
    52cc:	11 f1       	breq	.+68     	; 0x5312 <__vector_51+0x7a>
    52ce:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    52d2:	14 96       	adiw	r26, 0x04	; 4
    52d4:	ed 91       	ld	r30, X+
    52d6:	fc 91       	ld	r31, X
    52d8:	15 97       	sbiw	r26, 0x05	; 5
    52da:	93 81       	ldd	r25, Z+3	; 0x03
    52dc:	82 81       	ldd	r24, Z+2	; 0x02
    52de:	25 81       	ldd	r18, Z+5	; 0x05
    52e0:	98 1b       	sub	r25, r24
    52e2:	92 23       	and	r25, r18
    52e4:	84 81       	ldd	r24, Z+4	; 0x04
    52e6:	98 17       	cp	r25, r24
    52e8:	61 f0       	breq	.+24     	; 0x5302 <__vector_51+0x6a>
    52ea:	83 81       	ldd	r24, Z+3	; 0x03
    52ec:	26 95       	lsr	r18
    52ee:	28 23       	and	r18, r24
    52f0:	c0 81       	ld	r28, Z
    52f2:	d1 81       	ldd	r29, Z+1	; 0x01
    52f4:	c2 0f       	add	r28, r18
    52f6:	d1 1d       	adc	r29, r1
    52f8:	68 83       	st	Y, r22
    52fa:	8f 5f       	subi	r24, 0xFF	; 255
    52fc:	95 81       	ldd	r25, Z+5	; 0x05
    52fe:	89 23       	and	r24, r25
    5300:	83 83       	std	Z+3, r24	; 0x03
    5302:	16 96       	adiw	r26, 0x06	; 6
    5304:	ed 91       	ld	r30, X+
    5306:	fc 91       	ld	r31, X
    5308:	17 97       	sbiw	r26, 0x07	; 7
    530a:	30 97       	sbiw	r30, 0x00	; 0
    530c:	11 f0       	breq	.+4      	; 0x5312 <__vector_51+0x7a>
    530e:	cd 01       	movw	r24, r26
    5310:	19 95       	eicall
    5312:	ff 91       	pop	r31
    5314:	ef 91       	pop	r30
    5316:	df 91       	pop	r29
    5318:	cf 91       	pop	r28
    531a:	bf 91       	pop	r27
    531c:	af 91       	pop	r26
    531e:	9f 91       	pop	r25
    5320:	8f 91       	pop	r24
    5322:	7f 91       	pop	r23
    5324:	6f 91       	pop	r22
    5326:	5f 91       	pop	r21
    5328:	4f 91       	pop	r20
    532a:	3f 91       	pop	r19
    532c:	2f 91       	pop	r18
    532e:	0f 90       	pop	r0
    5330:	0b be       	out	0x3b, r0	; 59
    5332:	0f 90       	pop	r0
    5334:	0f be       	out	0x3f, r0	; 63
    5336:	0f 90       	pop	r0
    5338:	1f 90       	pop	r1
    533a:	18 95       	reti

0000533c <__vector_52>:
    533c:	1f 92       	push	r1
    533e:	0f 92       	push	r0
    5340:	0f b6       	in	r0, 0x3f	; 63
    5342:	0f 92       	push	r0
    5344:	11 24       	eor	r1, r1
    5346:	0b b6       	in	r0, 0x3b	; 59
    5348:	0f 92       	push	r0
    534a:	2f 93       	push	r18
    534c:	8f 93       	push	r24
    534e:	9f 93       	push	r25
    5350:	af 93       	push	r26
    5352:	bf 93       	push	r27
    5354:	ef 93       	push	r30
    5356:	ff 93       	push	r31
    5358:	e0 91 b2 09 	lds	r30, 0x09B2	; 0x8009b2 <_ser_handle+0x4>
    535c:	f0 91 b3 09 	lds	r31, 0x09B3	; 0x8009b3 <_ser_handle+0x5>
    5360:	30 97       	sbiw	r30, 0x00	; 0
    5362:	b9 f0       	breq	.+46     	; 0x5392 <__vector_52+0x56>
    5364:	02 80       	ldd	r0, Z+2	; 0x02
    5366:	f3 81       	ldd	r31, Z+3	; 0x03
    5368:	e0 2d       	mov	r30, r0
    536a:	93 81       	ldd	r25, Z+3	; 0x03
    536c:	82 81       	ldd	r24, Z+2	; 0x02
    536e:	98 17       	cp	r25, r24
    5370:	b1 f0       	breq	.+44     	; 0x539e <__vector_52+0x62>
    5372:	92 81       	ldd	r25, Z+2	; 0x02
    5374:	85 81       	ldd	r24, Z+5	; 0x05
    5376:	28 2f       	mov	r18, r24
    5378:	26 95       	lsr	r18
    537a:	29 23       	and	r18, r25
    537c:	a0 81       	ld	r26, Z
    537e:	b1 81       	ldd	r27, Z+1	; 0x01
    5380:	a2 0f       	add	r26, r18
    5382:	b1 1d       	adc	r27, r1
    5384:	2c 91       	ld	r18, X
    5386:	9f 5f       	subi	r25, 0xFF	; 255
    5388:	89 23       	and	r24, r25
    538a:	82 83       	std	Z+2, r24	; 0x02
    538c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5390:	0b c0       	rjmp	.+22     	; 0x53a8 <__vector_52+0x6c>
    5392:	e1 ed       	ldi	r30, 0xD1	; 209
    5394:	f0 e0       	ldi	r31, 0x00	; 0
    5396:	80 81       	ld	r24, Z
    5398:	8f 7d       	andi	r24, 0xDF	; 223
    539a:	80 83       	st	Z, r24
    539c:	05 c0       	rjmp	.+10     	; 0x53a8 <__vector_52+0x6c>
    539e:	e1 ed       	ldi	r30, 0xD1	; 209
    53a0:	f0 e0       	ldi	r31, 0x00	; 0
    53a2:	80 81       	ld	r24, Z
    53a4:	8f 7d       	andi	r24, 0xDF	; 223
    53a6:	80 83       	st	Z, r24
    53a8:	ff 91       	pop	r31
    53aa:	ef 91       	pop	r30
    53ac:	bf 91       	pop	r27
    53ae:	af 91       	pop	r26
    53b0:	9f 91       	pop	r25
    53b2:	8f 91       	pop	r24
    53b4:	2f 91       	pop	r18
    53b6:	0f 90       	pop	r0
    53b8:	0b be       	out	0x3b, r0	; 59
    53ba:	0f 90       	pop	r0
    53bc:	0f be       	out	0x3f, r0	; 63
    53be:	0f 90       	pop	r0
    53c0:	1f 90       	pop	r1
    53c2:	18 95       	reti

000053c4 <__vector_54>:
    53c4:	1f 92       	push	r1
    53c6:	0f 92       	push	r0
    53c8:	0f b6       	in	r0, 0x3f	; 63
    53ca:	0f 92       	push	r0
    53cc:	11 24       	eor	r1, r1
    53ce:	0b b6       	in	r0, 0x3b	; 59
    53d0:	0f 92       	push	r0
    53d2:	2f 93       	push	r18
    53d4:	3f 93       	push	r19
    53d6:	4f 93       	push	r20
    53d8:	5f 93       	push	r21
    53da:	6f 93       	push	r22
    53dc:	7f 93       	push	r23
    53de:	8f 93       	push	r24
    53e0:	9f 93       	push	r25
    53e2:	af 93       	push	r26
    53e4:	bf 93       	push	r27
    53e6:	cf 93       	push	r28
    53e8:	df 93       	push	r29
    53ea:	ef 93       	push	r30
    53ec:	ff 93       	push	r31
    53ee:	a0 91 b4 09 	lds	r26, 0x09B4	; 0x8009b4 <_ser_handle+0x6>
    53f2:	b0 91 b5 09 	lds	r27, 0x09B5	; 0x8009b5 <_ser_handle+0x7>
    53f6:	10 97       	sbiw	r26, 0x00	; 0
    53f8:	11 f1       	breq	.+68     	; 0x543e <__vector_54+0x7a>
    53fa:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    53fe:	14 96       	adiw	r26, 0x04	; 4
    5400:	ed 91       	ld	r30, X+
    5402:	fc 91       	ld	r31, X
    5404:	15 97       	sbiw	r26, 0x05	; 5
    5406:	93 81       	ldd	r25, Z+3	; 0x03
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	25 81       	ldd	r18, Z+5	; 0x05
    540c:	98 1b       	sub	r25, r24
    540e:	92 23       	and	r25, r18
    5410:	84 81       	ldd	r24, Z+4	; 0x04
    5412:	98 17       	cp	r25, r24
    5414:	61 f0       	breq	.+24     	; 0x542e <__vector_54+0x6a>
    5416:	83 81       	ldd	r24, Z+3	; 0x03
    5418:	26 95       	lsr	r18
    541a:	28 23       	and	r18, r24
    541c:	c0 81       	ld	r28, Z
    541e:	d1 81       	ldd	r29, Z+1	; 0x01
    5420:	c2 0f       	add	r28, r18
    5422:	d1 1d       	adc	r29, r1
    5424:	68 83       	st	Y, r22
    5426:	8f 5f       	subi	r24, 0xFF	; 255
    5428:	95 81       	ldd	r25, Z+5	; 0x05
    542a:	89 23       	and	r24, r25
    542c:	83 83       	std	Z+3, r24	; 0x03
    542e:	16 96       	adiw	r26, 0x06	; 6
    5430:	ed 91       	ld	r30, X+
    5432:	fc 91       	ld	r31, X
    5434:	17 97       	sbiw	r26, 0x07	; 7
    5436:	30 97       	sbiw	r30, 0x00	; 0
    5438:	11 f0       	breq	.+4      	; 0x543e <__vector_54+0x7a>
    543a:	cd 01       	movw	r24, r26
    543c:	19 95       	eicall
    543e:	ff 91       	pop	r31
    5440:	ef 91       	pop	r30
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	bf 91       	pop	r27
    5448:	af 91       	pop	r26
    544a:	9f 91       	pop	r25
    544c:	8f 91       	pop	r24
    544e:	7f 91       	pop	r23
    5450:	6f 91       	pop	r22
    5452:	5f 91       	pop	r21
    5454:	4f 91       	pop	r20
    5456:	3f 91       	pop	r19
    5458:	2f 91       	pop	r18
    545a:	0f 90       	pop	r0
    545c:	0b be       	out	0x3b, r0	; 59
    545e:	0f 90       	pop	r0
    5460:	0f be       	out	0x3f, r0	; 63
    5462:	0f 90       	pop	r0
    5464:	1f 90       	pop	r1
    5466:	18 95       	reti

00005468 <__vector_55>:
    5468:	1f 92       	push	r1
    546a:	0f 92       	push	r0
    546c:	0f b6       	in	r0, 0x3f	; 63
    546e:	0f 92       	push	r0
    5470:	11 24       	eor	r1, r1
    5472:	0b b6       	in	r0, 0x3b	; 59
    5474:	0f 92       	push	r0
    5476:	2f 93       	push	r18
    5478:	8f 93       	push	r24
    547a:	9f 93       	push	r25
    547c:	af 93       	push	r26
    547e:	bf 93       	push	r27
    5480:	ef 93       	push	r30
    5482:	ff 93       	push	r31
    5484:	e0 91 b4 09 	lds	r30, 0x09B4	; 0x8009b4 <_ser_handle+0x6>
    5488:	f0 91 b5 09 	lds	r31, 0x09B5	; 0x8009b5 <_ser_handle+0x7>
    548c:	30 97       	sbiw	r30, 0x00	; 0
    548e:	b9 f0       	breq	.+46     	; 0x54be <__vector_55+0x56>
    5490:	02 80       	ldd	r0, Z+2	; 0x02
    5492:	f3 81       	ldd	r31, Z+3	; 0x03
    5494:	e0 2d       	mov	r30, r0
    5496:	93 81       	ldd	r25, Z+3	; 0x03
    5498:	82 81       	ldd	r24, Z+2	; 0x02
    549a:	98 17       	cp	r25, r24
    549c:	b1 f0       	breq	.+44     	; 0x54ca <__vector_55+0x62>
    549e:	92 81       	ldd	r25, Z+2	; 0x02
    54a0:	85 81       	ldd	r24, Z+5	; 0x05
    54a2:	28 2f       	mov	r18, r24
    54a4:	26 95       	lsr	r18
    54a6:	29 23       	and	r18, r25
    54a8:	a0 81       	ld	r26, Z
    54aa:	b1 81       	ldd	r27, Z+1	; 0x01
    54ac:	a2 0f       	add	r26, r18
    54ae:	b1 1d       	adc	r27, r1
    54b0:	2c 91       	ld	r18, X
    54b2:	9f 5f       	subi	r25, 0xFF	; 255
    54b4:	89 23       	and	r24, r25
    54b6:	82 83       	std	Z+2, r24	; 0x02
    54b8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    54bc:	0b c0       	rjmp	.+22     	; 0x54d4 <__vector_55+0x6c>
    54be:	e1 e3       	ldi	r30, 0x31	; 49
    54c0:	f1 e0       	ldi	r31, 0x01	; 1
    54c2:	80 81       	ld	r24, Z
    54c4:	8f 7d       	andi	r24, 0xDF	; 223
    54c6:	80 83       	st	Z, r24
    54c8:	05 c0       	rjmp	.+10     	; 0x54d4 <__vector_55+0x6c>
    54ca:	e1 e3       	ldi	r30, 0x31	; 49
    54cc:	f1 e0       	ldi	r31, 0x01	; 1
    54ce:	80 81       	ld	r24, Z
    54d0:	8f 7d       	andi	r24, 0xDF	; 223
    54d2:	80 83       	st	Z, r24
    54d4:	ff 91       	pop	r31
    54d6:	ef 91       	pop	r30
    54d8:	bf 91       	pop	r27
    54da:	af 91       	pop	r26
    54dc:	9f 91       	pop	r25
    54de:	8f 91       	pop	r24
    54e0:	2f 91       	pop	r18
    54e2:	0f 90       	pop	r0
    54e4:	0b be       	out	0x3b, r0	; 59
    54e6:	0f 90       	pop	r0
    54e8:	0f be       	out	0x3f, r0	; 63
    54ea:	0f 90       	pop	r0
    54ec:	1f 90       	pop	r1
    54ee:	18 95       	reti

000054f0 <fifo_init>:
    54f0:	fc 01       	movw	r30, r24
    54f2:	41 11       	cpse	r20, r1
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <fifo_init+0xa>
    54f6:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <abort>
    54fa:	84 2f       	mov	r24, r20
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	9c 01       	movw	r18, r24
    5500:	21 50       	subi	r18, 0x01	; 1
    5502:	31 09       	sbc	r19, r1
    5504:	82 23       	and	r24, r18
    5506:	93 23       	and	r25, r19
    5508:	89 2b       	or	r24, r25
    550a:	11 f0       	breq	.+4      	; 0x5510 <fifo_init+0x20>
    550c:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <abort>
    5510:	41 38       	cpi	r20, 0x81	; 129
    5512:	10 f0       	brcs	.+4      	; 0x5518 <fifo_init+0x28>
    5514:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <abort>
    5518:	12 82       	std	Z+2, r1	; 0x02
    551a:	13 82       	std	Z+3, r1	; 0x03
    551c:	44 83       	std	Z+4, r20	; 0x04
    551e:	44 0f       	add	r20, r20
    5520:	41 50       	subi	r20, 0x01	; 1
    5522:	45 83       	std	Z+5, r20	; 0x05
    5524:	71 83       	std	Z+1, r23	; 0x01
    5526:	60 83       	st	Z, r22
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	08 95       	ret

0000552e <hal_create>:
    552e:	e6 e1       	ldi	r30, 0x16	; 22
    5530:	fb e0       	ldi	r31, 0x0B	; 11
    5532:	28 ee       	ldi	r18, 0xE8	; 232
    5534:	30 e3       	ldi	r19, 0x30	; 48
    5536:	31 83       	std	Z+1, r19	; 0x01
    5538:	20 83       	st	Z, r18
    553a:	2b ee       	ldi	r18, 0xEB	; 235
    553c:	30 e3       	ldi	r19, 0x30	; 48
    553e:	33 83       	std	Z+3, r19	; 0x03
    5540:	22 83       	std	Z+2, r18	; 0x02
    5542:	26 ef       	ldi	r18, 0xF6	; 246
    5544:	30 e3       	ldi	r19, 0x30	; 48
    5546:	35 83       	std	Z+5, r19	; 0x05
    5548:	24 83       	std	Z+4, r18	; 0x04
    554a:	2a ef       	ldi	r18, 0xFA	; 250
    554c:	30 e3       	ldi	r19, 0x30	; 48
    554e:	37 83       	std	Z+7, r19	; 0x07
    5550:	26 83       	std	Z+6, r18	; 0x06
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	31 e3       	ldi	r19, 0x31	; 49
    5556:	31 87       	std	Z+9, r19	; 0x09
    5558:	20 87       	std	Z+8, r18	; 0x08
    555a:	2c e0       	ldi	r18, 0x0C	; 12
    555c:	31 e3       	ldi	r19, 0x31	; 49
    555e:	33 87       	std	Z+11, r19	; 0x0b
    5560:	22 87       	std	Z+10, r18	; 0x0a
    5562:	21 e1       	ldi	r18, 0x11	; 17
    5564:	31 e3       	ldi	r19, 0x31	; 49
    5566:	35 87       	std	Z+13, r19	; 0x0d
    5568:	24 87       	std	Z+12, r18	; 0x0c
    556a:	2d e1       	ldi	r18, 0x1D	; 29
    556c:	31 e3       	ldi	r19, 0x31	; 49
    556e:	37 87       	std	Z+15, r19	; 0x0f
    5570:	26 87       	std	Z+14, r18	; 0x0e
    5572:	2d ef       	ldi	r18, 0xFD	; 253
    5574:	30 e3       	ldi	r19, 0x30	; 48
    5576:	31 8b       	std	Z+17, r19	; 0x11
    5578:	20 8b       	std	Z+16, r18	; 0x10
    557a:	22 e2       	ldi	r18, 0x22	; 34
    557c:	31 e3       	ldi	r19, 0x31	; 49
    557e:	33 8b       	std	Z+19, r19	; 0x13
    5580:	22 8b       	std	Z+18, r18	; 0x12
    5582:	2f e2       	ldi	r18, 0x2F	; 47
    5584:	31 e3       	ldi	r19, 0x31	; 49
    5586:	35 8b       	std	Z+21, r19	; 0x15
    5588:	24 8b       	std	Z+20, r18	; 0x14
    558a:	68 2f       	mov	r22, r24
    558c:	cf 01       	movw	r24, r30
    558e:	2f c1       	rjmp	.+606    	; 0x57ee <led_create>
    5590:	08 95       	ret

00005592 <_hihTwiCallback>:
    5592:	65 30       	cpi	r22, 0x05	; 5
    5594:	f1 f4       	brne	.+60     	; 0x55d2 <_hihTwiCallback+0x40>
    5596:	fa 01       	movw	r30, r20
    5598:	80 81       	ld	r24, Z
    559a:	8f 73       	andi	r24, 0x3F	; 63
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	98 2f       	mov	r25, r24
    55a0:	88 27       	eor	r24, r24
    55a2:	21 81       	ldd	r18, Z+1	; 0x01
    55a4:	82 2b       	or	r24, r18
    55a6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    55aa:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    55ae:	82 81       	ldd	r24, Z+2	; 0x02
    55b0:	f0 e4       	ldi	r31, 0x40	; 64
    55b2:	8f 9f       	mul	r24, r31
    55b4:	c0 01       	movw	r24, r0
    55b6:	11 24       	eor	r1, r1
    55b8:	fa 01       	movw	r30, r20
    55ba:	23 81       	ldd	r18, Z+3	; 0x03
    55bc:	26 95       	lsr	r18
    55be:	26 95       	lsr	r18
    55c0:	82 2b       	or	r24, r18
    55c2:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    55c6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <_measuringIsReady>
    55d0:	08 95       	ret
    55d2:	64 30       	cpi	r22, 0x04	; 4
    55d4:	51 f0       	breq	.+20     	; 0x55ea <_hihTwiCallback+0x58>
    55d6:	80 e0       	ldi	r24, 0x00	; 0
    55d8:	90 e4       	ldi	r25, 0x40	; 64
    55da:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    55de:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    55e2:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    55e6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    55ea:	08 95       	ret

000055ec <hih8120Create>:
    55ec:	0f 93       	push	r16
    55ee:	1f 93       	push	r17
    55f0:	09 ec       	ldi	r16, 0xC9	; 201
    55f2:	1a e2       	ldi	r17, 0x2A	; 42
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	34 e2       	ldi	r19, 0x24	; 36
    55f8:	44 ef       	ldi	r20, 0xF4	; 244
    55fa:	50 e0       	ldi	r21, 0x00	; 0
    55fc:	60 e0       	ldi	r22, 0x00	; 0
    55fe:	87 e2       	ldi	r24, 0x27	; 39
    5600:	ff d6       	rcall	.+3582   	; 0x6400 <twiCreate>
    5602:	90 93 b8 09 	sts	0x09B8, r25	; 0x8009b8 <_hih8120Handler+0x1>
    5606:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <_hih8120Handler>
    560a:	21 e0       	ldi	r18, 0x01	; 1
    560c:	89 2b       	or	r24, r25
    560e:	09 f0       	breq	.+2      	; 0x5612 <hih8120Create+0x26>
    5610:	20 e0       	ldi	r18, 0x00	; 0
    5612:	82 2f       	mov	r24, r18
    5614:	1f 91       	pop	r17
    5616:	0f 91       	pop	r16
    5618:	08 95       	ret

0000561a <hih8120Wakeup>:
    561a:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_hih8120Handler>
    561e:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <_hih8120Handler+0x1>
    5622:	00 97       	sbiw	r24, 0x00	; 0
    5624:	51 f0       	breq	.+20     	; 0x563a <hih8120Wakeup+0x20>
    5626:	40 e0       	ldi	r20, 0x00	; 0
    5628:	60 e0       	ldi	r22, 0x00	; 0
    562a:	70 e0       	ldi	r23, 0x00	; 0
    562c:	3a d7       	rcall	.+3700   	; 0x64a2 <twiTransmit>
    562e:	84 30       	cpi	r24, 0x04	; 4
    5630:	31 f4       	brne	.+12     	; 0x563e <hih8120Wakeup+0x24>
    5632:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <_measuringIsReady>
    5636:	80 e0       	ldi	r24, 0x00	; 0
    5638:	08 95       	ret
    563a:	82 e0       	ldi	r24, 0x02	; 2
    563c:	08 95       	ret
    563e:	83 e0       	ldi	r24, 0x03	; 3
    5640:	08 95       	ret

00005642 <hih8120Meassure>:
    5642:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_hih8120Handler>
    5646:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <_hih8120Handler+0x1>
    564a:	00 97       	sbiw	r24, 0x00	; 0
    564c:	31 f0       	breq	.+12     	; 0x565a <hih8120Meassure+0x18>
    564e:	64 e0       	ldi	r22, 0x04	; 4
    5650:	74 d7       	rcall	.+3816   	; 0x653a <twiReceive>
    5652:	85 30       	cpi	r24, 0x05	; 5
    5654:	21 f0       	breq	.+8      	; 0x565e <hih8120Meassure+0x1c>
    5656:	83 e0       	ldi	r24, 0x03	; 3
    5658:	08 95       	ret
    565a:	82 e0       	ldi	r24, 0x02	; 2
    565c:	08 95       	ret
    565e:	80 e0       	ldi	r24, 0x00	; 0
    5660:	08 95       	ret

00005662 <hih8120GetTemperature>:
    5662:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    5666:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	0e 94 b9 34 	call	0x6972	; 0x6972 <__floatunsisf>
    5672:	20 e0       	ldi	r18, 0x00	; 0
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	45 e2       	ldi	r20, 0x25	; 37
    5678:	53 e4       	ldi	r21, 0x43	; 67
    567a:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__mulsf3>
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	38 ef       	ldi	r19, 0xF8	; 248
    5682:	4f e7       	ldi	r20, 0x7F	; 127
    5684:	56 e4       	ldi	r21, 0x46	; 70
    5686:	0e 94 20 34 	call	0x6840	; 0x6840 <__divsf3>
    568a:	20 e0       	ldi	r18, 0x00	; 0
    568c:	30 e0       	ldi	r19, 0x00	; 0
    568e:	40 e2       	ldi	r20, 0x20	; 32
    5690:	52 e4       	ldi	r21, 0x42	; 66
    5692:	0c 94 b7 33 	jmp	0x676e	; 0x676e <__subsf3>
    5696:	08 95       	ret

00005698 <hih8120GetTemperature_x10>:
    5698:	e4 df       	rcall	.-56     	; 0x5662 <hih8120GetTemperature>
    569a:	20 e0       	ldi	r18, 0x00	; 0
    569c:	30 e0       	ldi	r19, 0x00	; 0
    569e:	40 e2       	ldi	r20, 0x20	; 32
    56a0:	51 e4       	ldi	r21, 0x41	; 65
    56a2:	0e 94 6f 35 	call	0x6ade	; 0x6ade <__mulsf3>
    56a6:	0e 94 88 34 	call	0x6910	; 0x6910 <__fixsfsi>
    56aa:	cb 01       	movw	r24, r22
    56ac:	08 95       	ret

000056ae <_turn_off>:
    56ae:	cf 93       	push	r28
    56b0:	df 93       	push	r29
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	fc 01       	movw	r30, r24
    56b6:	ee 0f       	add	r30, r30
    56b8:	ff 1f       	adc	r31, r31
    56ba:	e8 0f       	add	r30, r24
    56bc:	f9 1f       	adc	r31, r25
    56be:	ee 0f       	add	r30, r30
    56c0:	ff 1f       	adc	r31, r31
    56c2:	e7 54       	subi	r30, 0x47	; 71
    56c4:	f6 4f       	sbci	r31, 0xF6	; 246
    56c6:	23 81       	ldd	r18, Z+3	; 0x03
    56c8:	21 11       	cpse	r18, r1
    56ca:	0a c0       	rjmp	.+20     	; 0x56e0 <_turn_off+0x32>
    56cc:	ef 01       	movw	r28, r30
    56ce:	e0 91 1e 0b 	lds	r30, 0x0B1E	; 0x800b1e <register_access+0x8>
    56d2:	f0 91 1f 0b 	lds	r31, 0x0B1F	; 0x800b1f <register_access+0x9>
    56d6:	6a 81       	ldd	r22, Y+2	; 0x02
    56d8:	88 81       	ld	r24, Y
    56da:	99 81       	ldd	r25, Y+1	; 0x01
    56dc:	19 95       	eicall
    56de:	12 c0       	rjmp	.+36     	; 0x5704 <_turn_off+0x56>
    56e0:	dc 01       	movw	r26, r24
    56e2:	aa 0f       	add	r26, r26
    56e4:	bb 1f       	adc	r27, r27
    56e6:	ed 01       	movw	r28, r26
    56e8:	c8 0f       	add	r28, r24
    56ea:	d9 1f       	adc	r29, r25
    56ec:	cc 0f       	add	r28, r28
    56ee:	dd 1f       	adc	r29, r29
    56f0:	c7 54       	subi	r28, 0x47	; 71
    56f2:	d6 4f       	sbci	r29, 0xF6	; 246
    56f4:	e0 91 28 0b 	lds	r30, 0x0B28	; 0x800b28 <register_access+0x12>
    56f8:	f0 91 29 0b 	lds	r31, 0x0B29	; 0x800b29 <register_access+0x13>
    56fc:	6a 81       	ldd	r22, Y+2	; 0x02
    56fe:	88 81       	ld	r24, Y
    5700:	99 81       	ldd	r25, Y+1	; 0x01
    5702:	19 95       	eicall
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	08 95       	ret

0000570a <_turn_on>:
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	fc 01       	movw	r30, r24
    5712:	ee 0f       	add	r30, r30
    5714:	ff 1f       	adc	r31, r31
    5716:	e8 0f       	add	r30, r24
    5718:	f9 1f       	adc	r31, r25
    571a:	ee 0f       	add	r30, r30
    571c:	ff 1f       	adc	r31, r31
    571e:	e7 54       	subi	r30, 0x47	; 71
    5720:	f6 4f       	sbci	r31, 0xF6	; 246
    5722:	23 81       	ldd	r18, Z+3	; 0x03
    5724:	21 11       	cpse	r18, r1
    5726:	0a c0       	rjmp	.+20     	; 0x573c <_turn_on+0x32>
    5728:	ef 01       	movw	r28, r30
    572a:	e0 91 28 0b 	lds	r30, 0x0B28	; 0x800b28 <register_access+0x12>
    572e:	f0 91 29 0b 	lds	r31, 0x0B29	; 0x800b29 <register_access+0x13>
    5732:	6a 81       	ldd	r22, Y+2	; 0x02
    5734:	88 81       	ld	r24, Y
    5736:	99 81       	ldd	r25, Y+1	; 0x01
    5738:	19 95       	eicall
    573a:	12 c0       	rjmp	.+36     	; 0x5760 <_turn_on+0x56>
    573c:	dc 01       	movw	r26, r24
    573e:	aa 0f       	add	r26, r26
    5740:	bb 1f       	adc	r27, r27
    5742:	ed 01       	movw	r28, r26
    5744:	c8 0f       	add	r28, r24
    5746:	d9 1f       	adc	r29, r25
    5748:	cc 0f       	add	r28, r28
    574a:	dd 1f       	adc	r29, r29
    574c:	c7 54       	subi	r28, 0x47	; 71
    574e:	d6 4f       	sbci	r29, 0xF6	; 246
    5750:	e0 91 1e 0b 	lds	r30, 0x0B1E	; 0x800b1e <register_access+0x8>
    5754:	f0 91 1f 0b 	lds	r31, 0x0B1F	; 0x800b1f <register_access+0x9>
    5758:	6a 81       	ldd	r22, Y+2	; 0x02
    575a:	88 81       	ld	r24, Y
    575c:	99 81       	ldd	r25, Y+1	; 0x01
    575e:	19 95       	eicall
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	08 95       	ret

00005766 <_hal_led_task>:
    5766:	8b ed       	ldi	r24, 0xDB	; 219
    5768:	95 e0       	ldi	r25, 0x05	; 5
    576a:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <puts>
    576e:	0f 2e       	mov	r0, r31
    5770:	f6 e1       	ldi	r31, 0x16	; 22
    5772:	cf 2e       	mov	r12, r31
    5774:	fb e0       	ldi	r31, 0x0B	; 11
    5776:	df 2e       	mov	r13, r31
    5778:	f0 2d       	mov	r31, r0
    577a:	04 e0       	ldi	r16, 0x04	; 4
    577c:	c9 eb       	ldi	r28, 0xB9	; 185
    577e:	d9 e0       	ldi	r29, 0x09	; 9
    5780:	10 e0       	ldi	r17, 0x00	; 0
    5782:	8c 81       	ldd	r24, Y+4	; 0x04
    5784:	81 30       	cpi	r24, 0x01	; 1
    5786:	69 f0       	breq	.+26     	; 0x57a2 <_hal_led_task+0x3c>
    5788:	e8 f0       	brcs	.+58     	; 0x57c4 <_hal_led_task+0x5e>
    578a:	82 30       	cpi	r24, 0x02	; 2
    578c:	39 f5       	brne	.+78     	; 0x57dc <_hal_led_task+0x76>
    578e:	d6 01       	movw	r26, r12
    5790:	1c 96       	adiw	r26, 0x0c	; 12
    5792:	ed 91       	ld	r30, X+
    5794:	fc 91       	ld	r31, X
    5796:	1d 97       	sbiw	r26, 0x0d	; 13
    5798:	6a 81       	ldd	r22, Y+2	; 0x02
    579a:	88 81       	ld	r24, Y
    579c:	99 81       	ldd	r25, Y+1	; 0x01
    579e:	19 95       	eicall
    57a0:	1d c0       	rjmp	.+58     	; 0x57dc <_hal_led_task+0x76>
    57a2:	8d 81       	ldd	r24, Y+5	; 0x05
    57a4:	8f 5f       	subi	r24, 0xFF	; 255
    57a6:	8a 30       	cpi	r24, 0x0A	; 10
    57a8:	10 f4       	brcc	.+4      	; 0x57ae <_hal_led_task+0x48>
    57aa:	8d 83       	std	Y+5, r24	; 0x05
    57ac:	17 c0       	rjmp	.+46     	; 0x57dc <_hal_led_task+0x76>
    57ae:	1d 82       	std	Y+5, r1	; 0x05
    57b0:	d6 01       	movw	r26, r12
    57b2:	1c 96       	adiw	r26, 0x0c	; 12
    57b4:	ed 91       	ld	r30, X+
    57b6:	fc 91       	ld	r31, X
    57b8:	1d 97       	sbiw	r26, 0x0d	; 13
    57ba:	6a 81       	ldd	r22, Y+2	; 0x02
    57bc:	88 81       	ld	r24, Y
    57be:	99 81       	ldd	r25, Y+1	; 0x01
    57c0:	19 95       	eicall
    57c2:	0c c0       	rjmp	.+24     	; 0x57dc <_hal_led_task+0x76>
    57c4:	8d 81       	ldd	r24, Y+5	; 0x05
    57c6:	88 23       	and	r24, r24
    57c8:	31 f0       	breq	.+12     	; 0x57d6 <_hal_led_task+0x70>
    57ca:	81 2f       	mov	r24, r17
    57cc:	9e df       	rcall	.-196    	; 0x570a <_turn_on>
    57ce:	8d 81       	ldd	r24, Y+5	; 0x05
    57d0:	81 50       	subi	r24, 0x01	; 1
    57d2:	8d 83       	std	Y+5, r24	; 0x05
    57d4:	03 c0       	rjmp	.+6      	; 0x57dc <_hal_led_task+0x76>
    57d6:	0c 83       	std	Y+4, r16	; 0x04
    57d8:	81 2f       	mov	r24, r17
    57da:	69 df       	rcall	.-302    	; 0x56ae <_turn_off>
    57dc:	1f 5f       	subi	r17, 0xFF	; 255
    57de:	26 96       	adiw	r28, 0x06	; 6
    57e0:	14 30       	cpi	r17, 0x04	; 4
    57e2:	79 f6       	brne	.-98     	; 0x5782 <_hal_led_task+0x1c>
    57e4:	85 e0       	ldi	r24, 0x05	; 5
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskDelay>
    57ec:	c7 cf       	rjmp	.-114    	; 0x577c <_hal_led_task+0x16>

000057ee <led_create>:
    57ee:	cf 92       	push	r12
    57f0:	df 92       	push	r13
    57f2:	ef 92       	push	r14
    57f4:	ff 92       	push	r15
    57f6:	0f 93       	push	r16
    57f8:	1f 93       	push	r17
    57fa:	cf 93       	push	r28
    57fc:	df 93       	push	r29
    57fe:	06 2f       	mov	r16, r22
    5800:	0f 2e       	mov	r0, r31
    5802:	f6 e1       	ldi	r31, 0x16	; 22
    5804:	ef 2e       	mov	r14, r31
    5806:	fb e0       	ldi	r31, 0x0B	; 11
    5808:	ff 2e       	mov	r15, r31
    580a:	f0 2d       	mov	r31, r0
    580c:	d7 01       	movw	r26, r14
    580e:	18 96       	adiw	r26, 0x08	; 8
    5810:	ed 91       	ld	r30, X+
    5812:	fc 91       	ld	r31, X
    5814:	19 97       	sbiw	r26, 0x09	; 9
    5816:	66 e0       	ldi	r22, 0x06	; 6
    5818:	87 e2       	ldi	r24, 0x27	; 39
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	19 95       	eicall
    581e:	c9 eb       	ldi	r28, 0xB9	; 185
    5820:	d9 e0       	ldi	r29, 0x09	; 9
    5822:	0f 2e       	mov	r0, r31
    5824:	f8 e2       	ldi	r31, 0x28	; 40
    5826:	cf 2e       	mov	r12, r31
    5828:	d1 2c       	mov	r13, r1
    582a:	f0 2d       	mov	r31, r0
    582c:	d9 82       	std	Y+1, r13	; 0x01
    582e:	c8 82       	st	Y, r12
    5830:	86 e0       	ldi	r24, 0x06	; 6
    5832:	8a 83       	std	Y+2, r24	; 0x02
    5834:	1b 82       	std	Y+3, r1	; 0x03
    5836:	14 e0       	ldi	r17, 0x04	; 4
    5838:	1c 83       	std	Y+4, r17	; 0x04
    583a:	80 e0       	ldi	r24, 0x00	; 0
    583c:	38 df       	rcall	.-400    	; 0x56ae <_turn_off>
    583e:	d7 01       	movw	r26, r14
    5840:	18 96       	adiw	r26, 0x08	; 8
    5842:	ed 91       	ld	r30, X+
    5844:	fc 91       	ld	r31, X
    5846:	19 97       	sbiw	r26, 0x09	; 9
    5848:	67 e0       	ldi	r22, 0x07	; 7
    584a:	87 e2       	ldi	r24, 0x27	; 39
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	19 95       	eicall
    5850:	df 82       	std	Y+7, r13	; 0x07
    5852:	ce 82       	std	Y+6, r12	; 0x06
    5854:	87 e0       	ldi	r24, 0x07	; 7
    5856:	88 87       	std	Y+8, r24	; 0x08
    5858:	19 86       	std	Y+9, r1	; 0x09
    585a:	1a 87       	std	Y+10, r17	; 0x0a
    585c:	81 e0       	ldi	r24, 0x01	; 1
    585e:	27 df       	rcall	.-434    	; 0x56ae <_turn_off>
    5860:	d7 01       	movw	r26, r14
    5862:	18 96       	adiw	r26, 0x08	; 8
    5864:	ed 91       	ld	r30, X+
    5866:	fc 91       	ld	r31, X
    5868:	19 97       	sbiw	r26, 0x09	; 9
    586a:	65 e0       	ldi	r22, 0x05	; 5
    586c:	83 e3       	ldi	r24, 0x33	; 51
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	19 95       	eicall
    5872:	d7 01       	movw	r26, r14
    5874:	18 96       	adiw	r26, 0x08	; 8
    5876:	ed 91       	ld	r30, X+
    5878:	fc 91       	ld	r31, X
    587a:	19 97       	sbiw	r26, 0x09	; 9
    587c:	61 e0       	ldi	r22, 0x01	; 1
    587e:	84 e3       	ldi	r24, 0x34	; 52
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	19 95       	eicall
    5884:	84 e3       	ldi	r24, 0x34	; 52
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	9d 87       	std	Y+13, r25	; 0x0d
    588a:	8c 87       	std	Y+12, r24	; 0x0c
    588c:	85 e0       	ldi	r24, 0x05	; 5
    588e:	8e 87       	std	Y+14, r24	; 0x0e
    5890:	1f 86       	std	Y+15, r1	; 0x0f
    5892:	18 8b       	std	Y+16, r17	; 0x10
    5894:	82 e0       	ldi	r24, 0x02	; 2
    5896:	0b df       	rcall	.-490    	; 0x56ae <_turn_off>
    5898:	d7 01       	movw	r26, r14
    589a:	18 96       	adiw	r26, 0x08	; 8
    589c:	ed 91       	ld	r30, X+
    589e:	fc 91       	ld	r31, X
    58a0:	19 97       	sbiw	r26, 0x09	; 9
    58a2:	64 e0       	ldi	r22, 0x04	; 4
    58a4:	81 e0       	ldi	r24, 0x01	; 1
    58a6:	91 e0       	ldi	r25, 0x01	; 1
    58a8:	19 95       	eicall
    58aa:	d7 01       	movw	r26, r14
    58ac:	18 96       	adiw	r26, 0x08	; 8
    58ae:	ed 91       	ld	r30, X+
    58b0:	fc 91       	ld	r31, X
    58b2:	19 97       	sbiw	r26, 0x09	; 9
    58b4:	61 e0       	ldi	r22, 0x01	; 1
    58b6:	82 e0       	ldi	r24, 0x02	; 2
    58b8:	91 e0       	ldi	r25, 0x01	; 1
    58ba:	19 95       	eicall
    58bc:	82 e0       	ldi	r24, 0x02	; 2
    58be:	91 e0       	ldi	r25, 0x01	; 1
    58c0:	9b 8b       	std	Y+19, r25	; 0x13
    58c2:	8a 8b       	std	Y+18, r24	; 0x12
    58c4:	1c 8b       	std	Y+20, r17	; 0x14
    58c6:	1d 8a       	std	Y+21, r1	; 0x15
    58c8:	1e 8b       	std	Y+22, r17	; 0x16
    58ca:	83 e0       	ldi	r24, 0x03	; 3
    58cc:	f0 de       	rcall	.-544    	; 0x56ae <_turn_off>
    58ce:	e1 2c       	mov	r14, r1
    58d0:	f1 2c       	mov	r15, r1
    58d2:	20 e0       	ldi	r18, 0x00	; 0
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	40 ec       	ldi	r20, 0xC0	; 192
    58d8:	50 e0       	ldi	r21, 0x00	; 0
    58da:	62 ef       	ldi	r22, 0xF2	; 242
    58dc:	75 e0       	ldi	r23, 0x05	; 5
    58de:	83 eb       	ldi	r24, 0xB3	; 179
    58e0:	9b e2       	ldi	r25, 0x2B	; 43
    58e2:	0e 94 df 10 	call	0x21be	; 0x21be <xTaskCreate>
    58e6:	df 91       	pop	r29
    58e8:	cf 91       	pop	r28
    58ea:	1f 91       	pop	r17
    58ec:	0f 91       	pop	r16
    58ee:	ff 90       	pop	r15
    58f0:	ef 90       	pop	r14
    58f2:	df 90       	pop	r13
    58f4:	cf 90       	pop	r12
    58f6:	08 95       	ret

000058f8 <led_slow_blink>:
    58f8:	0f 93       	push	r16
    58fa:	1f 93       	push	r17
    58fc:	cf 93       	push	r28
    58fe:	df 93       	push	r29
    5900:	c8 2f       	mov	r28, r24
    5902:	d0 e0       	ldi	r29, 0x00	; 0
    5904:	8e 01       	movw	r16, r28
    5906:	00 0f       	add	r16, r16
    5908:	11 1f       	adc	r17, r17
    590a:	d8 01       	movw	r26, r16
    590c:	ac 0f       	add	r26, r28
    590e:	bd 1f       	adc	r27, r29
    5910:	aa 0f       	add	r26, r26
    5912:	bb 1f       	adc	r27, r27
    5914:	a7 54       	subi	r26, 0x47	; 71
    5916:	b6 4f       	sbci	r27, 0xF6	; 246
    5918:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <register_access+0xc>
    591c:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <register_access+0xd>
    5920:	12 96       	adiw	r26, 0x02	; 2
    5922:	6c 91       	ld	r22, X
    5924:	12 97       	sbiw	r26, 0x02	; 2
    5926:	8d 91       	ld	r24, X+
    5928:	9c 91       	ld	r25, X
    592a:	19 95       	eicall
    592c:	c0 0f       	add	r28, r16
    592e:	d1 1f       	adc	r29, r17
    5930:	cc 0f       	add	r28, r28
    5932:	dd 1f       	adc	r29, r29
    5934:	c7 54       	subi	r28, 0x47	; 71
    5936:	d6 4f       	sbci	r29, 0xF6	; 246
    5938:	81 e0       	ldi	r24, 0x01	; 1
    593a:	8c 83       	std	Y+4, r24	; 0x04
    593c:	df 91       	pop	r29
    593e:	cf 91       	pop	r28
    5940:	1f 91       	pop	r17
    5942:	0f 91       	pop	r16
    5944:	08 95       	ret

00005946 <led_fast_blink>:
    5946:	0f 93       	push	r16
    5948:	1f 93       	push	r17
    594a:	cf 93       	push	r28
    594c:	df 93       	push	r29
    594e:	c8 2f       	mov	r28, r24
    5950:	d0 e0       	ldi	r29, 0x00	; 0
    5952:	8e 01       	movw	r16, r28
    5954:	00 0f       	add	r16, r16
    5956:	11 1f       	adc	r17, r17
    5958:	d8 01       	movw	r26, r16
    595a:	ac 0f       	add	r26, r28
    595c:	bd 1f       	adc	r27, r29
    595e:	aa 0f       	add	r26, r26
    5960:	bb 1f       	adc	r27, r27
    5962:	a7 54       	subi	r26, 0x47	; 71
    5964:	b6 4f       	sbci	r27, 0xF6	; 246
    5966:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <register_access+0xc>
    596a:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <register_access+0xd>
    596e:	12 96       	adiw	r26, 0x02	; 2
    5970:	6c 91       	ld	r22, X
    5972:	12 97       	sbiw	r26, 0x02	; 2
    5974:	8d 91       	ld	r24, X+
    5976:	9c 91       	ld	r25, X
    5978:	19 95       	eicall
    597a:	c0 0f       	add	r28, r16
    597c:	d1 1f       	adc	r29, r17
    597e:	cc 0f       	add	r28, r28
    5980:	dd 1f       	adc	r29, r29
    5982:	c7 54       	subi	r28, 0x47	; 71
    5984:	d6 4f       	sbci	r29, 0xF6	; 246
    5986:	82 e0       	ldi	r24, 0x02	; 2
    5988:	8c 83       	std	Y+4, r24	; 0x04
    598a:	df 91       	pop	r29
    598c:	cf 91       	pop	r28
    598e:	1f 91       	pop	r17
    5990:	0f 91       	pop	r16
    5992:	08 95       	ret

00005994 <led_led_on>:
    5994:	28 2f       	mov	r18, r24
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	f9 01       	movw	r30, r18
    599a:	ee 0f       	add	r30, r30
    599c:	ff 1f       	adc	r31, r31
    599e:	e2 0f       	add	r30, r18
    59a0:	f3 1f       	adc	r31, r19
    59a2:	ee 0f       	add	r30, r30
    59a4:	ff 1f       	adc	r31, r31
    59a6:	e7 54       	subi	r30, 0x47	; 71
    59a8:	f6 4f       	sbci	r31, 0xF6	; 246
    59aa:	93 e0       	ldi	r25, 0x03	; 3
    59ac:	94 83       	std	Z+4, r25	; 0x04
    59ae:	ad ce       	rjmp	.-678    	; 0x570a <_turn_on>
    59b0:	08 95       	ret

000059b2 <led_led_off>:
    59b2:	28 2f       	mov	r18, r24
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	f9 01       	movw	r30, r18
    59b8:	ee 0f       	add	r30, r30
    59ba:	ff 1f       	adc	r31, r31
    59bc:	e2 0f       	add	r30, r18
    59be:	f3 1f       	adc	r31, r19
    59c0:	ee 0f       	add	r30, r30
    59c2:	ff 1f       	adc	r31, r31
    59c4:	e7 54       	subi	r30, 0x47	; 71
    59c6:	f6 4f       	sbci	r31, 0xF6	; 246
    59c8:	94 e0       	ldi	r25, 0x04	; 4
    59ca:	94 83       	std	Z+4, r25	; 0x04
    59cc:	70 ce       	rjmp	.-800    	; 0x56ae <_turn_off>
    59ce:	08 95       	ret

000059d0 <led_long_puls>:
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	fc 01       	movw	r30, r24
    59d4:	ee 0f       	add	r30, r30
    59d6:	ff 1f       	adc	r31, r31
    59d8:	df 01       	movw	r26, r30
    59da:	a8 0f       	add	r26, r24
    59dc:	b9 1f       	adc	r27, r25
    59de:	aa 0f       	add	r26, r26
    59e0:	bb 1f       	adc	r27, r27
    59e2:	a7 54       	subi	r26, 0x47	; 71
    59e4:	b6 4f       	sbci	r27, 0xF6	; 246
    59e6:	24 e0       	ldi	r18, 0x04	; 4
    59e8:	15 96       	adiw	r26, 0x05	; 5
    59ea:	2c 93       	st	X, r18
    59ec:	15 97       	sbiw	r26, 0x05	; 5
    59ee:	fd 01       	movw	r30, r26
    59f0:	14 82       	std	Z+4, r1	; 0x04
    59f2:	08 95       	ret

000059f4 <led_short_puls>:
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	fc 01       	movw	r30, r24
    59f8:	ee 0f       	add	r30, r30
    59fa:	ff 1f       	adc	r31, r31
    59fc:	df 01       	movw	r26, r30
    59fe:	a8 0f       	add	r26, r24
    5a00:	b9 1f       	adc	r27, r25
    5a02:	aa 0f       	add	r26, r26
    5a04:	bb 1f       	adc	r27, r27
    5a06:	a7 54       	subi	r26, 0x47	; 71
    5a08:	b6 4f       	sbci	r27, 0xF6	; 246
    5a0a:	21 e0       	ldi	r18, 0x01	; 1
    5a0c:	15 96       	adiw	r26, 0x05	; 5
    5a0e:	2c 93       	st	X, r18
    5a10:	15 97       	sbiw	r26, 0x05	; 5
    5a12:	fd 01       	movw	r30, r26
    5a14:	14 82       	std	Z+4, r1	; 0x04
    5a16:	08 95       	ret

00005a18 <_serial_call_back>:
    5a18:	0f 93       	push	r16
    5a1a:	1f 93       	push	r17
    5a1c:	cf 93       	push	r28
    5a1e:	df 93       	push	r29
    5a20:	1f 92       	push	r1
    5a22:	1f 92       	push	r1
    5a24:	cd b7       	in	r28, 0x3d	; 61
    5a26:	de b7       	in	r29, 0x3e	; 62
    5a28:	8c 01       	movw	r16, r24
    5a2a:	19 82       	std	Y+1, r1	; 0x01
    5a2c:	2d c0       	rjmp	.+90     	; 0x5a88 <_serial_call_back+0x70>
    5a2e:	e0 91 35 0a 	lds	r30, 0x0A35	; 0x800a35 <rec_buf_inp.2926>
    5a32:	ec 32       	cpi	r30, 0x2C	; 44
    5a34:	50 f4       	brcc	.+20     	; 0x5a4a <_serial_call_back+0x32>
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	8e 0f       	add	r24, r30
    5a3a:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <rec_buf_inp.2926>
    5a3e:	f0 e0       	ldi	r31, 0x00	; 0
    5a40:	eb 59       	subi	r30, 0x9B	; 155
    5a42:	f5 4f       	sbci	r31, 0xF5	; 245
    5a44:	8a 81       	ldd	r24, Y+2	; 0x02
    5a46:	80 83       	st	Z, r24
    5a48:	02 c0       	rjmp	.+4      	; 0x5a4e <_serial_call_back+0x36>
    5a4a:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <rec_buf_inp.2926>
    5a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a50:	8a 30       	cpi	r24, 0x0A	; 10
    5a52:	d1 f4       	brne	.+52     	; 0x5a88 <_serial_call_back+0x70>
    5a54:	40 91 35 0a 	lds	r20, 0x0A35	; 0x800a35 <rec_buf_inp.2926>
    5a58:	50 e0       	ldi	r21, 0x00	; 0
    5a5a:	fa 01       	movw	r30, r20
    5a5c:	ed 59       	subi	r30, 0x9D	; 157
    5a5e:	f5 4f       	sbci	r31, 0xF5	; 245
    5a60:	10 82       	st	Z, r1
    5a62:	41 50       	subi	r20, 0x01	; 1
    5a64:	51 09       	sbc	r21, r1
    5a66:	9e 01       	movw	r18, r28
    5a68:	2f 5f       	subi	r18, 0xFF	; 255
    5a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a6c:	65 e6       	ldi	r22, 0x65	; 101
    5a6e:	7a e0       	ldi	r23, 0x0A	; 10
    5a70:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <_reply_buffer_handle>
    5a74:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <_reply_buffer_handle+0x1>
    5a78:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <xStreamBufferSendFromISR>
    5a7c:	89 81       	ldd	r24, Y+1	; 0x01
    5a7e:	81 11       	cpse	r24, r1
    5a80:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    5a84:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <rec_buf_inp.2926>
    5a88:	be 01       	movw	r22, r28
    5a8a:	6e 5f       	subi	r22, 0xFE	; 254
    5a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a8e:	c8 01       	movw	r24, r16
    5a90:	bb da       	rcall	.-2698   	; 0x5008 <serial_get_byte>
    5a92:	88 23       	and	r24, r24
    5a94:	61 f2       	breq	.-104    	; 0x5a2e <_serial_call_back+0x16>
    5a96:	0f 90       	pop	r0
    5a98:	0f 90       	pop	r0
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	1f 91       	pop	r17
    5aa0:	0f 91       	pop	r16
    5aa2:	08 95       	ret

00005aa4 <_upload_message>:
    5aa4:	0f 93       	push	r16
    5aa6:	1f 93       	push	r17
    5aa8:	cf 93       	push	r28
    5aaa:	df 93       	push	r29
    5aac:	8c 01       	movw	r16, r24
    5aae:	eb 01       	movw	r28, r22
    5ab0:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <_reply_buffer_handle>
    5ab4:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <_reply_buffer_handle+0x1>
    5ab8:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <xStreamBufferReset>
    5abc:	b8 01       	movw	r22, r16
    5abe:	81 ed       	ldi	r24, 0xD1	; 209
    5ac0:	99 e0       	ldi	r25, 0x09	; 9
    5ac2:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <strcpy>
    5ac6:	20 97       	sbiw	r28, 0x00	; 0
    5ac8:	79 f0       	breq	.+30     	; 0x5ae8 <_upload_message+0x44>
    5aca:	e1 ed       	ldi	r30, 0xD1	; 209
    5acc:	f9 e0       	ldi	r31, 0x09	; 9
    5ace:	01 90       	ld	r0, Z+
    5ad0:	00 20       	and	r0, r0
    5ad2:	e9 f7       	brne	.-6      	; 0x5ace <_upload_message+0x2a>
    5ad4:	31 97       	sbiw	r30, 0x01	; 1
    5ad6:	80 e2       	ldi	r24, 0x20	; 32
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	91 83       	std	Z+1, r25	; 0x01
    5adc:	80 83       	st	Z, r24
    5ade:	be 01       	movw	r22, r28
    5ae0:	81 ed       	ldi	r24, 0xD1	; 209
    5ae2:	99 e0       	ldi	r25, 0x09	; 9
    5ae4:	0e 94 21 37 	call	0x6e42	; 0x6e42 <strcat>
    5ae8:	e1 ed       	ldi	r30, 0xD1	; 209
    5aea:	f9 e0       	ldi	r31, 0x09	; 9
    5aec:	df 01       	movw	r26, r30
    5aee:	0d 90       	ld	r0, X+
    5af0:	00 20       	and	r0, r0
    5af2:	e9 f7       	brne	.-6      	; 0x5aee <_upload_message+0x4a>
    5af4:	11 97       	sbiw	r26, 0x01	; 1
    5af6:	8d e0       	ldi	r24, 0x0D	; 13
    5af8:	9a e0       	ldi	r25, 0x0A	; 10
    5afa:	11 96       	adiw	r26, 0x01	; 1
    5afc:	9c 93       	st	X, r25
    5afe:	8e 93       	st	-X, r24
    5b00:	12 96       	adiw	r26, 0x02	; 2
    5b02:	1c 92       	st	X, r1
    5b04:	01 90       	ld	r0, Z+
    5b06:	00 20       	and	r0, r0
    5b08:	e9 f7       	brne	.-6      	; 0x5b04 <_upload_message+0x60>
    5b0a:	31 97       	sbiw	r30, 0x01	; 1
    5b0c:	e1 5d       	subi	r30, 0xD1	; 209
    5b0e:	f9 40       	sbci	r31, 0x09	; 9
    5b10:	ae 2f       	mov	r26, r30
    5b12:	81 ed       	ldi	r24, 0xD1	; 209
    5b14:	99 e0       	ldi	r25, 0x09	; 9
    5b16:	ac 01       	movw	r20, r24
    5b18:	6a 2f       	mov	r22, r26
    5b1a:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <_rn2483_serial>
    5b1e:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <_rn2483_serial+0x1>
    5b22:	22 da       	rcall	.-3004   	; 0x4f68 <serial_send_bytes>
    5b24:	81 11       	cpse	r24, r1
    5b26:	0f c0       	rjmp	.+30     	; 0x5b46 <_upload_message+0xa2>
    5b28:	28 e2       	ldi	r18, 0x28	; 40
    5b2a:	35 e0       	ldi	r19, 0x05	; 5
    5b2c:	4d e2       	ldi	r20, 0x2D	; 45
    5b2e:	50 e0       	ldi	r21, 0x00	; 0
    5b30:	6f eb       	ldi	r22, 0xBF	; 191
    5b32:	7a e0       	ldi	r23, 0x0A	; 10
    5b34:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <_reply_buffer_handle>
    5b38:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <_reply_buffer_handle+0x1>
    5b3c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <xStreamBufferReceive>
    5b40:	8f eb       	ldi	r24, 0xBF	; 191
    5b42:	9a e0       	ldi	r25, 0x0A	; 10
    5b44:	02 c0       	rjmp	.+4      	; 0x5b4a <_upload_message+0xa6>
    5b46:	80 e0       	ldi	r24, 0x00	; 0
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	df 91       	pop	r29
    5b4c:	cf 91       	pop	r28
    5b4e:	1f 91       	pop	r17
    5b50:	0f 91       	pop	r16
    5b52:	08 95       	ret

00005b54 <_reply2return_code>:
    5b54:	af 92       	push	r10
    5b56:	bf 92       	push	r11
    5b58:	cf 92       	push	r12
    5b5a:	df 92       	push	r13
    5b5c:	ef 92       	push	r14
    5b5e:	ff 92       	push	r15
    5b60:	0f 93       	push	r16
    5b62:	1f 93       	push	r17
    5b64:	cf 93       	push	r28
    5b66:	df 93       	push	r29
    5b68:	6c 01       	movw	r12, r24
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	01 90       	ld	r0, Z+
    5b6e:	00 20       	and	r0, r0
    5b70:	e9 f7       	brne	.-6      	; 0x5b6c <_reply2return_code+0x18>
    5b72:	31 97       	sbiw	r30, 0x01	; 1
    5b74:	7f 01       	movw	r14, r30
    5b76:	e8 1a       	sub	r14, r24
    5b78:	f9 0a       	sbc	r15, r25
    5b7a:	0e e7       	ldi	r16, 0x7E	; 126
    5b7c:	18 e0       	ldi	r17, 0x08	; 8
    5b7e:	c0 e0       	ldi	r28, 0x00	; 0
    5b80:	d0 e0       	ldi	r29, 0x00	; 0
    5b82:	f8 01       	movw	r30, r16
    5b84:	60 81       	ld	r22, Z
    5b86:	71 81       	ldd	r23, Z+1	; 0x01
    5b88:	a7 01       	movw	r20, r14
    5b8a:	c6 01       	movw	r24, r12
    5b8c:	0e 94 33 37 	call	0x6e66	; 0x6e66 <strncasecmp>
    5b90:	89 2b       	or	r24, r25
    5b92:	49 f4       	brne	.+18     	; 0x5ba6 <_reply2return_code+0x52>
    5b94:	fe 01       	movw	r30, r28
    5b96:	ee 0f       	add	r30, r30
    5b98:	ff 1f       	adc	r31, r31
    5b9a:	ec 0f       	add	r30, r28
    5b9c:	fd 1f       	adc	r31, r29
    5b9e:	e3 58       	subi	r30, 0x83	; 131
    5ba0:	f7 4f       	sbci	r31, 0xF7	; 247
    5ba2:	80 81       	ld	r24, Z
    5ba4:	07 c0       	rjmp	.+14     	; 0x5bb4 <_reply2return_code+0x60>
    5ba6:	21 96       	adiw	r28, 0x01	; 1
    5ba8:	0d 5f       	subi	r16, 0xFD	; 253
    5baa:	1f 4f       	sbci	r17, 0xFF	; 255
    5bac:	c1 31       	cpi	r28, 0x11	; 17
    5bae:	d1 05       	cpc	r29, r1
    5bb0:	41 f7       	brne	.-48     	; 0x5b82 <_reply2return_code+0x2e>
    5bb2:	80 e1       	ldi	r24, 0x10	; 16
    5bb4:	df 91       	pop	r29
    5bb6:	cf 91       	pop	r28
    5bb8:	1f 91       	pop	r17
    5bba:	0f 91       	pop	r16
    5bbc:	ff 90       	pop	r15
    5bbe:	ef 90       	pop	r14
    5bc0:	df 90       	pop	r13
    5bc2:	cf 90       	pop	r12
    5bc4:	bf 90       	pop	r11
    5bc6:	af 90       	pop	r10
    5bc8:	08 95       	ret

00005bca <_upload_message_rc>:
    5bca:	6c df       	rcall	.-296    	; 0x5aa4 <_upload_message>
    5bcc:	c3 cf       	rjmp	.-122    	; 0x5b54 <_reply2return_code>
    5bce:	08 95       	ret

00005bd0 <lora_driver_flush_buffers>:
    5bd0:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <_reply_buffer_handle>
    5bd4:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <_reply_buffer_handle+0x1>
    5bd8:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <xStreamBufferReset>
    5bdc:	08 95       	ret

00005bde <lora_driver_create>:
    5bde:	8f 92       	push	r8
    5be0:	9f 92       	push	r9
    5be2:	af 92       	push	r10
    5be4:	cf 92       	push	r12
    5be6:	ef 92       	push	r14
    5be8:	0f 93       	push	r16
    5bea:	cf 93       	push	r28
    5bec:	c8 2f       	mov	r28, r24
    5bee:	41 e0       	ldi	r20, 0x01	; 1
    5bf0:	60 e0       	ldi	r22, 0x00	; 0
    5bf2:	70 e0       	ldi	r23, 0x00	; 0
    5bf4:	88 ec       	ldi	r24, 0xC8	; 200
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	0e 94 32 0c 	call	0x1864	; 0x1864 <xStreamBufferGenericCreate>
    5bfc:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <_reply_buffer_handle+0x1>
    5c00:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <_reply_buffer_handle>
    5c04:	0f 2e       	mov	r0, r31
    5c06:	fc e0       	ldi	r31, 0x0C	; 12
    5c08:	8f 2e       	mov	r8, r31
    5c0a:	fd e2       	ldi	r31, 0x2D	; 45
    5c0c:	9f 2e       	mov	r9, r31
    5c0e:	f0 2d       	mov	r31, r0
    5c10:	68 94       	set
    5c12:	aa 24       	eor	r10, r10
    5c14:	a6 f8       	bld	r10, 6
    5c16:	68 94       	set
    5c18:	cc 24       	eor	r12, r12
    5c1a:	c6 f8       	bld	r12, 6
    5c1c:	e1 2c       	mov	r14, r1
    5c1e:	00 e0       	ldi	r16, 0x00	; 0
    5c20:	23 e0       	ldi	r18, 0x03	; 3
    5c22:	40 e0       	ldi	r20, 0x00	; 0
    5c24:	51 ee       	ldi	r21, 0xE1	; 225
    5c26:	60 e0       	ldi	r22, 0x00	; 0
    5c28:	70 e0       	ldi	r23, 0x00	; 0
    5c2a:	8c 2f       	mov	r24, r28
    5c2c:	d8 d8       	rcall	.-3664   	; 0x4dde <serial_new_instance>
    5c2e:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <_rn2483_serial+0x1>
    5c32:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <_rn2483_serial>
    5c36:	e0 91 1e 0b 	lds	r30, 0x0B1E	; 0x800b1e <register_access+0x8>
    5c3a:	f0 91 1f 0b 	lds	r31, 0x0B1F	; 0x800b1f <register_access+0x9>
    5c3e:	64 e0       	ldi	r22, 0x04	; 4
    5c40:	87 e0       	ldi	r24, 0x07	; 7
    5c42:	91 e0       	ldi	r25, 0x01	; 1
    5c44:	19 95       	eicall
    5c46:	cf 91       	pop	r28
    5c48:	0f 91       	pop	r16
    5c4a:	ef 90       	pop	r14
    5c4c:	cf 90       	pop	r12
    5c4e:	af 90       	pop	r10
    5c50:	9f 90       	pop	r9
    5c52:	8f 90       	pop	r8
    5c54:	08 95       	ret

00005c56 <lora_driver_reset_rn2483>:
    5c56:	88 23       	and	r24, r24
    5c58:	49 f0       	breq	.+18     	; 0x5c6c <lora_driver_reset_rn2483+0x16>
    5c5a:	e0 91 28 0b 	lds	r30, 0x0B28	; 0x800b28 <register_access+0x12>
    5c5e:	f0 91 29 0b 	lds	r31, 0x0B29	; 0x800b29 <register_access+0x13>
    5c62:	64 e0       	ldi	r22, 0x04	; 4
    5c64:	88 e0       	ldi	r24, 0x08	; 8
    5c66:	91 e0       	ldi	r25, 0x01	; 1
    5c68:	19 95       	eicall
    5c6a:	08 95       	ret
    5c6c:	e0 91 1e 0b 	lds	r30, 0x0B1E	; 0x800b1e <register_access+0x8>
    5c70:	f0 91 1f 0b 	lds	r31, 0x0B1F	; 0x800b1f <register_access+0x9>
    5c74:	64 e0       	ldi	r22, 0x04	; 4
    5c76:	88 e0       	ldi	r24, 0x08	; 8
    5c78:	91 e0       	ldi	r25, 0x01	; 1
    5c7a:	19 95       	eicall
    5c7c:	08 95       	ret

00005c7e <lora_driver_rn2483_factory_reset>:
    5c7e:	60 e0       	ldi	r22, 0x00	; 0
    5c80:	70 e0       	ldi	r23, 0x00	; 0
    5c82:	89 e1       	ldi	r24, 0x19	; 25
    5c84:	96 e0       	ldi	r25, 0x06	; 6
    5c86:	0e df       	rcall	.-484    	; 0x5aa4 <_upload_message>
    5c88:	ef eb       	ldi	r30, 0xBF	; 191
    5c8a:	fa e0       	ldi	r31, 0x0A	; 10
    5c8c:	01 90       	ld	r0, Z+
    5c8e:	00 20       	and	r0, r0
    5c90:	e9 f7       	brne	.-6      	; 0x5c8c <lora_driver_rn2483_factory_reset+0xe>
    5c92:	31 97       	sbiw	r30, 0x01	; 1
    5c94:	ef 5b       	subi	r30, 0xBF	; 191
    5c96:	fa 40       	sbci	r31, 0x0A	; 10
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	75 97       	sbiw	r30, 0x15	; 21
    5c9c:	08 f0       	brcs	.+2      	; 0x5ca0 <lora_driver_rn2483_factory_reset+0x22>
    5c9e:	80 e0       	ldi	r24, 0x00	; 0
    5ca0:	08 95       	ret

00005ca2 <lora_driver_get_rn2483_hweui>:
    5ca2:	cf 93       	push	r28
    5ca4:	df 93       	push	r29
    5ca6:	ec 01       	movw	r28, r24
    5ca8:	60 e0       	ldi	r22, 0x00	; 0
    5caa:	70 e0       	ldi	r23, 0x00	; 0
    5cac:	8a e2       	ldi	r24, 0x2A	; 42
    5cae:	96 e0       	ldi	r25, 0x06	; 6
    5cb0:	f9 de       	rcall	.-526    	; 0x5aa4 <_upload_message>
    5cb2:	ef eb       	ldi	r30, 0xBF	; 191
    5cb4:	fa e0       	ldi	r31, 0x0A	; 10
    5cb6:	01 90       	ld	r0, Z+
    5cb8:	00 20       	and	r0, r0
    5cba:	e9 f7       	brne	.-6      	; 0x5cb6 <lora_driver_get_rn2483_hweui+0x14>
    5cbc:	e0 5d       	subi	r30, 0xD0	; 208
    5cbe:	fa 40       	sbci	r31, 0x0A	; 10
    5cc0:	39 f4       	brne	.+14     	; 0x5cd0 <lora_driver_get_rn2483_hweui+0x2e>
    5cc2:	6f eb       	ldi	r22, 0xBF	; 191
    5cc4:	7a e0       	ldi	r23, 0x0A	; 10
    5cc6:	ce 01       	movw	r24, r28
    5cc8:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <strcpy>
    5ccc:	80 e0       	ldi	r24, 0x00	; 0
    5cce:	02 c0       	rjmp	.+4      	; 0x5cd4 <lora_driver_get_rn2483_hweui+0x32>
    5cd0:	18 82       	st	Y, r1
    5cd2:	81 e0       	ldi	r24, 0x01	; 1
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	08 95       	ret

00005cda <lora_driver_set_device_identifier>:
    5cda:	fc 01       	movw	r30, r24
    5cdc:	01 90       	ld	r0, Z+
    5cde:	00 20       	and	r0, r0
    5ce0:	e9 f7       	brne	.-6      	; 0x5cdc <lora_driver_set_device_identifier+0x2>
    5ce2:	9f 01       	movw	r18, r30
    5ce4:	21 51       	subi	r18, 0x11	; 17
    5ce6:	31 09       	sbc	r19, r1
    5ce8:	28 17       	cp	r18, r24
    5cea:	39 07       	cpc	r19, r25
    5cec:	29 f4       	brne	.+10     	; 0x5cf8 <lora_driver_set_device_identifier+0x1e>
    5cee:	bc 01       	movw	r22, r24
    5cf0:	88 e5       	ldi	r24, 0x58	; 88
    5cf2:	96 e0       	ldi	r25, 0x06	; 6
    5cf4:	6a cf       	rjmp	.-300    	; 0x5bca <_upload_message_rc>
    5cf6:	08 95       	ret
    5cf8:	89 e0       	ldi	r24, 0x09	; 9
    5cfa:	08 95       	ret

00005cfc <lora_driver_set_application_identifier>:
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	01 90       	ld	r0, Z+
    5d00:	00 20       	and	r0, r0
    5d02:	e9 f7       	brne	.-6      	; 0x5cfe <lora_driver_set_application_identifier+0x2>
    5d04:	9f 01       	movw	r18, r30
    5d06:	21 51       	subi	r18, 0x11	; 17
    5d08:	31 09       	sbc	r19, r1
    5d0a:	28 17       	cp	r18, r24
    5d0c:	39 07       	cpc	r19, r25
    5d0e:	29 f4       	brne	.+10     	; 0x5d1a <lora_driver_set_application_identifier+0x1e>
    5d10:	bc 01       	movw	r22, r24
    5d12:	87 e6       	ldi	r24, 0x67	; 103
    5d14:	96 e0       	ldi	r25, 0x06	; 6
    5d16:	59 cf       	rjmp	.-334    	; 0x5bca <_upload_message_rc>
    5d18:	08 95       	ret
    5d1a:	89 e0       	ldi	r24, 0x09	; 9
    5d1c:	08 95       	ret

00005d1e <lora_driver_set_application_key>:
    5d1e:	fc 01       	movw	r30, r24
    5d20:	01 90       	ld	r0, Z+
    5d22:	00 20       	and	r0, r0
    5d24:	e9 f7       	brne	.-6      	; 0x5d20 <lora_driver_set_application_key+0x2>
    5d26:	9f 01       	movw	r18, r30
    5d28:	21 52       	subi	r18, 0x21	; 33
    5d2a:	31 09       	sbc	r19, r1
    5d2c:	28 17       	cp	r18, r24
    5d2e:	39 07       	cpc	r19, r25
    5d30:	29 f4       	brne	.+10     	; 0x5d3c <lora_driver_set_application_key+0x1e>
    5d32:	bc 01       	movw	r22, r24
    5d34:	86 e7       	ldi	r24, 0x76	; 118
    5d36:	96 e0       	ldi	r25, 0x06	; 6
    5d38:	48 cf       	rjmp	.-368    	; 0x5bca <_upload_message_rc>
    5d3a:	08 95       	ret
    5d3c:	89 e0       	ldi	r24, 0x09	; 9
    5d3e:	08 95       	ret

00005d40 <lora_driver_save_mac>:
    5d40:	60 e0       	ldi	r22, 0x00	; 0
    5d42:	70 e0       	ldi	r23, 0x00	; 0
    5d44:	85 eb       	ldi	r24, 0xB5	; 181
    5d46:	96 e0       	ldi	r25, 0x06	; 6
    5d48:	40 cf       	rjmp	.-384    	; 0x5bca <_upload_message_rc>
    5d4a:	08 95       	ret

00005d4c <lora_driver_join>:
    5d4c:	e8 2f       	mov	r30, r24
    5d4e:	f0 e0       	ldi	r31, 0x00	; 0
    5d50:	ee 0f       	add	r30, r30
    5d52:	ff 1f       	adc	r31, r31
    5d54:	e7 58       	subi	r30, 0x87	; 135
    5d56:	f7 4f       	sbci	r31, 0xF7	; 247
    5d58:	60 81       	ld	r22, Z
    5d5a:	71 81       	ldd	r23, Z+1	; 0x01
    5d5c:	8e eb       	ldi	r24, 0xBE	; 190
    5d5e:	96 e0       	ldi	r25, 0x06	; 6
    5d60:	34 df       	rcall	.-408    	; 0x5bca <_upload_message_rc>
    5d62:	81 11       	cpse	r24, r1
    5d64:	12 c0       	rjmp	.+36     	; 0x5d8a <lora_driver_join+0x3e>
    5d66:	28 e2       	ldi	r18, 0x28	; 40
    5d68:	35 e0       	ldi	r19, 0x05	; 5
    5d6a:	4d e2       	ldi	r20, 0x2D	; 45
    5d6c:	50 e0       	ldi	r21, 0x00	; 0
    5d6e:	6f eb       	ldi	r22, 0xBF	; 191
    5d70:	7a e0       	ldi	r23, 0x0A	; 10
    5d72:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <_reply_buffer_handle>
    5d76:	90 91 37 0a 	lds	r25, 0x0A37	; 0x800a37 <_reply_buffer_handle+0x1>
    5d7a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <xStreamBufferReceive>
    5d7e:	88 23       	and	r24, r24
    5d80:	21 f0       	breq	.+8      	; 0x5d8a <lora_driver_join+0x3e>
    5d82:	8f eb       	ldi	r24, 0xBF	; 191
    5d84:	9a e0       	ldi	r25, 0x0A	; 10
    5d86:	e6 ce       	rjmp	.-564    	; 0x5b54 <_reply2return_code>
    5d88:	08 95       	ret
    5d8a:	8f eb       	ldi	r24, 0xBF	; 191
    5d8c:	9a e0       	ldi	r25, 0x0A	; 10
    5d8e:	e2 ce       	rjmp	.-572    	; 0x5b54 <_reply2return_code>
    5d90:	08 95       	ret

00005d92 <lora_driver_sent_upload_message>:
    5d92:	cf 93       	push	r28
    5d94:	df 93       	push	r29
    5d96:	1f 92       	push	r1
    5d98:	cd b7       	in	r28, 0x3d	; 61
    5d9a:	de b7       	in	r29, 0x3e	; 62
    5d9c:	db 01       	movw	r26, r22
    5d9e:	11 96       	adiw	r26, 0x01	; 1
    5da0:	9c 91       	ld	r25, X
    5da2:	11 97       	sbiw	r26, 0x01	; 1
    5da4:	95 31       	cpi	r25, 0x15	; 21
    5da6:	08 f0       	brcs	.+2      	; 0x5daa <lora_driver_sent_upload_message+0x18>
    5da8:	87 c0       	rjmp	.+270    	; 0x5eb8 <lora_driver_sent_upload_message+0x126>
    5daa:	99 23       	and	r25, r25
    5dac:	81 f1       	breq	.+96     	; 0x5e0e <lora_driver_sent_upload_message+0x7c>
    5dae:	60 e0       	ldi	r22, 0x00	; 0
    5db0:	70 e0       	ldi	r23, 0x00	; 0
    5db2:	27 2f       	mov	r18, r23
    5db4:	30 e0       	ldi	r19, 0x00	; 0
    5db6:	46 2f       	mov	r20, r22
    5db8:	50 e0       	ldi	r21, 0x00	; 0
    5dba:	fd 01       	movw	r30, r26
    5dbc:	e4 0f       	add	r30, r20
    5dbe:	f5 1f       	adc	r31, r21
    5dc0:	92 81       	ldd	r25, Z+2	; 0x02
    5dc2:	92 95       	swap	r25
    5dc4:	9f 70       	andi	r25, 0x0F	; 15
    5dc6:	9a 30       	cpi	r25, 0x0A	; 10
    5dc8:	10 f0       	brcs	.+4      	; 0x5dce <lora_driver_sent_upload_message+0x3c>
    5dca:	99 5c       	subi	r25, 0xC9	; 201
    5dcc:	01 c0       	rjmp	.+2      	; 0x5dd0 <lora_driver_sent_upload_message+0x3e>
    5dce:	90 5d       	subi	r25, 0xD0	; 208
    5dd0:	f9 01       	movw	r30, r18
    5dd2:	e0 5b       	subi	r30, 0xB0	; 176
    5dd4:	f5 4f       	sbci	r31, 0xF5	; 245
    5dd6:	90 83       	st	Z, r25
    5dd8:	2f 5f       	subi	r18, 0xFF	; 255
    5dda:	3f 4f       	sbci	r19, 0xFF	; 255
    5ddc:	fd 01       	movw	r30, r26
    5dde:	e4 0f       	add	r30, r20
    5de0:	f5 1f       	adc	r31, r21
    5de2:	92 81       	ldd	r25, Z+2	; 0x02
    5de4:	9f 70       	andi	r25, 0x0F	; 15
    5de6:	49 2f       	mov	r20, r25
    5de8:	50 e0       	ldi	r21, 0x00	; 0
    5dea:	4a 30       	cpi	r20, 0x0A	; 10
    5dec:	51 05       	cpc	r21, r1
    5dee:	14 f0       	brlt	.+4      	; 0x5df4 <lora_driver_sent_upload_message+0x62>
    5df0:	99 5c       	subi	r25, 0xC9	; 201
    5df2:	01 c0       	rjmp	.+2      	; 0x5df6 <lora_driver_sent_upload_message+0x64>
    5df4:	90 5d       	subi	r25, 0xD0	; 208
    5df6:	f9 01       	movw	r30, r18
    5df8:	e0 5b       	subi	r30, 0xB0	; 176
    5dfa:	f5 4f       	sbci	r31, 0xF5	; 245
    5dfc:	90 83       	st	Z, r25
    5dfe:	7e 5f       	subi	r23, 0xFE	; 254
    5e00:	6f 5f       	subi	r22, 0xFF	; 255
    5e02:	11 96       	adiw	r26, 0x01	; 1
    5e04:	9c 91       	ld	r25, X
    5e06:	11 97       	sbiw	r26, 0x01	; 1
    5e08:	69 17       	cp	r22, r25
    5e0a:	98 f2       	brcs	.-90     	; 0x5db2 <lora_driver_sent_upload_message+0x20>
    5e0c:	01 c0       	rjmp	.+2      	; 0x5e10 <lora_driver_sent_upload_message+0x7e>
    5e0e:	70 e0       	ldi	r23, 0x00	; 0
    5e10:	e7 2f       	mov	r30, r23
    5e12:	f0 e0       	ldi	r31, 0x00	; 0
    5e14:	e0 5b       	subi	r30, 0xB0	; 176
    5e16:	f5 4f       	sbci	r31, 0xF5	; 245
    5e18:	10 82       	st	Z, r1
    5e1a:	4c 91       	ld	r20, X
    5e1c:	81 11       	cpse	r24, r1
    5e1e:	03 c0       	rjmp	.+6      	; 0x5e26 <lora_driver_sent_upload_message+0x94>
    5e20:	87 ec       	ldi	r24, 0xC7	; 199
    5e22:	96 e0       	ldi	r25, 0x06	; 6
    5e24:	02 c0       	rjmp	.+4      	; 0x5e2a <lora_driver_sent_upload_message+0x98>
    5e26:	89 ec       	ldi	r24, 0xC9	; 201
    5e28:	96 e0       	ldi	r25, 0x06	; 6
    5e2a:	20 e5       	ldi	r18, 0x50	; 80
    5e2c:	3a e0       	ldi	r19, 0x0A	; 10
    5e2e:	3f 93       	push	r19
    5e30:	2f 93       	push	r18
    5e32:	1f 92       	push	r1
    5e34:	4f 93       	push	r20
    5e36:	9f 93       	push	r25
    5e38:	8f 93       	push	r24
    5e3a:	8d ec       	ldi	r24, 0xCD	; 205
    5e3c:	96 e0       	ldi	r25, 0x06	; 6
    5e3e:	9f 93       	push	r25
    5e40:	8f 93       	push	r24
    5e42:	82 e9       	ldi	r24, 0x92	; 146
    5e44:	9a e0       	ldi	r25, 0x0A	; 10
    5e46:	9f 93       	push	r25
    5e48:	8f 93       	push	r24
    5e4a:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <sprintf>
    5e4e:	60 e0       	ldi	r22, 0x00	; 0
    5e50:	70 e0       	ldi	r23, 0x00	; 0
    5e52:	82 e9       	ldi	r24, 0x92	; 146
    5e54:	9a e0       	ldi	r25, 0x0A	; 10
    5e56:	b9 de       	rcall	.-654    	; 0x5bca <_upload_message_rc>
    5e58:	0f b6       	in	r0, 0x3f	; 63
    5e5a:	f8 94       	cli
    5e5c:	de bf       	out	0x3e, r29	; 62
    5e5e:	0f be       	out	0x3f, r0	; 63
    5e60:	cd bf       	out	0x3d, r28	; 61
    5e62:	8e 30       	cpi	r24, 0x0E	; 14
    5e64:	51 f5       	brne	.+84     	; 0x5eba <lora_driver_sent_upload_message+0x128>
    5e66:	87 e0       	ldi	r24, 0x07	; 7
    5e68:	89 83       	std	Y+1, r24	; 0x01
    5e6a:	be 01       	movw	r22, r28
    5e6c:	6f 5f       	subi	r22, 0xFF	; 255
    5e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e70:	8f eb       	ldi	r24, 0xBF	; 191
    5e72:	9a e0       	ldi	r25, 0x0A	; 10
    5e74:	38 d1       	rcall	.+624    	; 0x60e6 <decode_port_no>
    5e76:	80 93 3a 0a 	sts	0x0A3A, r24	; 0x800a3a <_downlink_payload>
    5e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    5e7c:	f0 e0       	ldi	r31, 0x00	; 0
    5e7e:	e1 54       	subi	r30, 0x41	; 65
    5e80:	f5 4f       	sbci	r31, 0xF5	; 245
    5e82:	df 01       	movw	r26, r30
    5e84:	0d 90       	ld	r0, X+
    5e86:	00 20       	and	r0, r0
    5e88:	e9 f7       	brne	.-6      	; 0x5e84 <lora_driver_sent_upload_message+0xf2>
    5e8a:	11 97       	sbiw	r26, 0x01	; 1
    5e8c:	ae 1b       	sub	r26, r30
    5e8e:	bf 0b       	sbc	r27, r31
    5e90:	aa 23       	and	r26, r26
    5e92:	81 f0       	breq	.+32     	; 0x5eb4 <lora_driver_sent_upload_message+0x122>
    5e94:	bb 27       	eor	r27, r27
    5e96:	11 97       	sbiw	r26, 0x01	; 1
    5e98:	cd 01       	movw	r24, r26
    5e9a:	0a f4       	brpl	.+2      	; 0x5e9e <lora_driver_sent_upload_message+0x10c>
    5e9c:	01 96       	adiw	r24, 0x01	; 1
    5e9e:	95 95       	asr	r25
    5ea0:	87 95       	ror	r24
    5ea2:	80 93 3b 0a 	sts	0x0A3B, r24	; 0x800a3b <_downlink_payload+0x1>
    5ea6:	af 01       	movw	r20, r30
    5ea8:	4f 5f       	subi	r20, 0xFF	; 255
    5eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    5eac:	64 e1       	ldi	r22, 0x14	; 20
    5eae:	8c e3       	ldi	r24, 0x3C	; 60
    5eb0:	9a e0       	ldi	r25, 0x0A	; 10
    5eb2:	45 d1       	rcall	.+650    	; 0x613e <decode_hexadecimal_string_bytes>
    5eb4:	8e e0       	ldi	r24, 0x0E	; 14
    5eb6:	01 c0       	rjmp	.+2      	; 0x5eba <lora_driver_sent_upload_message+0x128>
    5eb8:	84 e1       	ldi	r24, 0x14	; 20
    5eba:	0f 90       	pop	r0
    5ebc:	df 91       	pop	r29
    5ebe:	cf 91       	pop	r28
    5ec0:	08 95       	ret

00005ec2 <lora_driver_set_adaptive_data_rate>:
    5ec2:	81 30       	cpi	r24, 0x01	; 1
    5ec4:	19 f0       	breq	.+6      	; 0x5ecc <lora_driver_set_adaptive_data_rate+0xa>
    5ec6:	6d ed       	ldi	r22, 0xDD	; 221
    5ec8:	76 e0       	ldi	r23, 0x06	; 6
    5eca:	02 c0       	rjmp	.+4      	; 0x5ed0 <lora_driver_set_adaptive_data_rate+0xe>
    5ecc:	6d e9       	ldi	r22, 0x9D	; 157
    5ece:	77 e0       	ldi	r23, 0x07	; 7
    5ed0:	81 ee       	ldi	r24, 0xE1	; 225
    5ed2:	96 e0       	ldi	r25, 0x06	; 6
    5ed4:	7a ce       	rjmp	.-780    	; 0x5bca <_upload_message_rc>
    5ed6:	08 95       	ret

00005ed8 <lora_driver_configure_to_eu868>:
    5ed8:	2f 92       	push	r2
    5eda:	3f 92       	push	r3
    5edc:	4f 92       	push	r4
    5ede:	5f 92       	push	r5
    5ee0:	6f 92       	push	r6
    5ee2:	7f 92       	push	r7
    5ee4:	8f 92       	push	r8
    5ee6:	9f 92       	push	r9
    5ee8:	af 92       	push	r10
    5eea:	bf 92       	push	r11
    5eec:	cf 92       	push	r12
    5eee:	df 92       	push	r13
    5ef0:	ef 92       	push	r14
    5ef2:	ff 92       	push	r15
    5ef4:	0f 93       	push	r16
    5ef6:	1f 93       	push	r17
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
    5efc:	cd b7       	in	r28, 0x3d	; 61
    5efe:	de b7       	in	r29, 0x3e	; 62
    5f00:	a0 97       	sbiw	r28, 0x20	; 32
    5f02:	0f b6       	in	r0, 0x3f	; 63
    5f04:	f8 94       	cli
    5f06:	de bf       	out	0x3e, r29	; 62
    5f08:	0f be       	out	0x3f, r0	; 63
    5f0a:	cd bf       	out	0x3d, r28	; 61
    5f0c:	66 e2       	ldi	r22, 0x26	; 38
    5f0e:	77 e0       	ldi	r23, 0x07	; 7
    5f10:	82 e3       	ldi	r24, 0x32	; 50
    5f12:	97 e0       	ldi	r25, 0x07	; 7
    5f14:	c7 dd       	rcall	.-1138   	; 0x5aa4 <_upload_message>
    5f16:	1e de       	rcall	.-964    	; 0x5b54 <_reply2return_code>
    5f18:	81 11       	cpse	r24, r1
    5f1a:	9f c0       	rjmp	.+318    	; 0x605a <lora_driver_configure_to_eu868+0x182>
    5f1c:	80 e2       	ldi	r24, 0x20	; 32
    5f1e:	ee e8       	ldi	r30, 0x8E	; 142
    5f20:	f5 e0       	ldi	r31, 0x05	; 5
    5f22:	de 01       	movw	r26, r28
    5f24:	11 96       	adiw	r26, 0x01	; 1
    5f26:	01 90       	ld	r0, Z+
    5f28:	0d 92       	st	X+, r0
    5f2a:	8a 95       	dec	r24
    5f2c:	e1 f7       	brne	.-8      	; 0x5f26 <lora_driver_configure_to_eu868+0x4e>
    5f2e:	9e 01       	movw	r18, r28
    5f30:	2f 5f       	subi	r18, 0xFF	; 255
    5f32:	3f 4f       	sbci	r19, 0xFF	; 255
    5f34:	69 01       	movw	r12, r18
    5f36:	e1 2c       	mov	r14, r1
    5f38:	f1 2c       	mov	r15, r1
    5f3a:	0f 2e       	mov	r0, r31
    5f3c:	fe e3       	ldi	r31, 0x3E	; 62
    5f3e:	af 2e       	mov	r10, r31
    5f40:	f7 e0       	ldi	r31, 0x07	; 7
    5f42:	bf 2e       	mov	r11, r31
    5f44:	f0 2d       	mov	r31, r0
    5f46:	02 e9       	ldi	r16, 0x92	; 146
    5f48:	1a e0       	ldi	r17, 0x0A	; 10
    5f4a:	0f 2e       	mov	r0, r31
    5f4c:	f7 e5       	ldi	r31, 0x57	; 87
    5f4e:	4f 2e       	mov	r4, r31
    5f50:	f7 e0       	ldi	r31, 0x07	; 7
    5f52:	5f 2e       	mov	r5, r31
    5f54:	f0 2d       	mov	r31, r0
    5f56:	0f 2e       	mov	r0, r31
    5f58:	fe e6       	ldi	r31, 0x6E	; 110
    5f5a:	8f 2e       	mov	r8, r31
    5f5c:	f7 e0       	ldi	r31, 0x07	; 7
    5f5e:	9f 2e       	mov	r9, r31
    5f60:	f0 2d       	mov	r31, r0
    5f62:	0f 2e       	mov	r0, r31
    5f64:	f8 e8       	ldi	r31, 0x88	; 136
    5f66:	6f 2e       	mov	r6, r31
    5f68:	f7 e0       	ldi	r31, 0x07	; 7
    5f6a:	7f 2e       	mov	r7, r31
    5f6c:	f0 2d       	mov	r31, r0
    5f6e:	3e 2c       	mov	r3, r14
    5f70:	2f 2c       	mov	r2, r15
    5f72:	ff 92       	push	r15
    5f74:	ef 92       	push	r14
    5f76:	bf 92       	push	r11
    5f78:	af 92       	push	r10
    5f7a:	1f 93       	push	r17
    5f7c:	0f 93       	push	r16
    5f7e:	ce d7       	rcall	.+3996   	; 0x6f1c <sprintf>
    5f80:	60 e0       	ldi	r22, 0x00	; 0
    5f82:	70 e0       	ldi	r23, 0x00	; 0
    5f84:	c8 01       	movw	r24, r16
    5f86:	8e dd       	rcall	.-1252   	; 0x5aa4 <_upload_message>
    5f88:	e5 dd       	rcall	.-1078   	; 0x5b54 <_reply2return_code>
    5f8a:	0f 90       	pop	r0
    5f8c:	0f 90       	pop	r0
    5f8e:	0f 90       	pop	r0
    5f90:	0f 90       	pop	r0
    5f92:	0f 90       	pop	r0
    5f94:	0f 90       	pop	r0
    5f96:	81 11       	cpse	r24, r1
    5f98:	60 c0       	rjmp	.+192    	; 0x605a <lora_driver_configure_to_eu868+0x182>
    5f9a:	32 e0       	ldi	r19, 0x02	; 2
    5f9c:	3e 15       	cp	r19, r14
    5f9e:	e0 f4       	brcc	.+56     	; 0x5fd8 <lora_driver_configure_to_eu868+0x100>
    5fa0:	f6 01       	movw	r30, r12
    5fa2:	83 81       	ldd	r24, Z+3	; 0x03
    5fa4:	8f 93       	push	r24
    5fa6:	82 81       	ldd	r24, Z+2	; 0x02
    5fa8:	8f 93       	push	r24
    5faa:	81 81       	ldd	r24, Z+1	; 0x01
    5fac:	8f 93       	push	r24
    5fae:	80 81       	ld	r24, Z
    5fb0:	8f 93       	push	r24
    5fb2:	ff 92       	push	r15
    5fb4:	ef 92       	push	r14
    5fb6:	5f 92       	push	r5
    5fb8:	4f 92       	push	r4
    5fba:	1f 93       	push	r17
    5fbc:	0f 93       	push	r16
    5fbe:	ae d7       	rcall	.+3932   	; 0x6f1c <sprintf>
    5fc0:	60 e0       	ldi	r22, 0x00	; 0
    5fc2:	70 e0       	ldi	r23, 0x00	; 0
    5fc4:	c8 01       	movw	r24, r16
    5fc6:	6e dd       	rcall	.-1316   	; 0x5aa4 <_upload_message>
    5fc8:	c5 dd       	rcall	.-1142   	; 0x5b54 <_reply2return_code>
    5fca:	0f b6       	in	r0, 0x3f	; 63
    5fcc:	f8 94       	cli
    5fce:	de bf       	out	0x3e, r29	; 62
    5fd0:	0f be       	out	0x3f, r0	; 63
    5fd2:	cd bf       	out	0x3d, r28	; 61
    5fd4:	81 11       	cpse	r24, r1
    5fd6:	41 c0       	rjmp	.+130    	; 0x605a <lora_driver_configure_to_eu868+0x182>
    5fd8:	2f 92       	push	r2
    5fda:	3f 92       	push	r3
    5fdc:	9f 92       	push	r9
    5fde:	8f 92       	push	r8
    5fe0:	1f 93       	push	r17
    5fe2:	0f 93       	push	r16
    5fe4:	9b d7       	rcall	.+3894   	; 0x6f1c <sprintf>
    5fe6:	60 e0       	ldi	r22, 0x00	; 0
    5fe8:	70 e0       	ldi	r23, 0x00	; 0
    5fea:	c8 01       	movw	r24, r16
    5fec:	5b dd       	rcall	.-1354   	; 0x5aa4 <_upload_message>
    5fee:	b2 dd       	rcall	.-1180   	; 0x5b54 <_reply2return_code>
    5ff0:	0f 90       	pop	r0
    5ff2:	0f 90       	pop	r0
    5ff4:	0f 90       	pop	r0
    5ff6:	0f 90       	pop	r0
    5ff8:	0f 90       	pop	r0
    5ffa:	0f 90       	pop	r0
    5ffc:	81 11       	cpse	r24, r1
    5ffe:	2d c0       	rjmp	.+90     	; 0x605a <lora_driver_configure_to_eu868+0x182>
    6000:	2f 92       	push	r2
    6002:	3f 92       	push	r3
    6004:	7f 92       	push	r7
    6006:	6f 92       	push	r6
    6008:	1f 93       	push	r17
    600a:	0f 93       	push	r16
    600c:	87 d7       	rcall	.+3854   	; 0x6f1c <sprintf>
    600e:	60 e0       	ldi	r22, 0x00	; 0
    6010:	70 e0       	ldi	r23, 0x00	; 0
    6012:	c8 01       	movw	r24, r16
    6014:	47 dd       	rcall	.-1394   	; 0x5aa4 <_upload_message>
    6016:	9e dd       	rcall	.-1220   	; 0x5b54 <_reply2return_code>
    6018:	0f 90       	pop	r0
    601a:	0f 90       	pop	r0
    601c:	0f 90       	pop	r0
    601e:	0f 90       	pop	r0
    6020:	0f 90       	pop	r0
    6022:	0f 90       	pop	r0
    6024:	81 11       	cpse	r24, r1
    6026:	19 c0       	rjmp	.+50     	; 0x605a <lora_driver_configure_to_eu868+0x182>
    6028:	3f ef       	ldi	r19, 0xFF	; 255
    602a:	e3 1a       	sub	r14, r19
    602c:	f3 0a       	sbc	r15, r19
    602e:	84 e0       	ldi	r24, 0x04	; 4
    6030:	c8 0e       	add	r12, r24
    6032:	d1 1c       	adc	r13, r1
    6034:	98 e0       	ldi	r25, 0x08	; 8
    6036:	e9 16       	cp	r14, r25
    6038:	f1 04       	cpc	r15, r1
    603a:	09 f0       	breq	.+2      	; 0x603e <lora_driver_configure_to_eu868+0x166>
    603c:	98 cf       	rjmp	.-208    	; 0x5f6e <lora_driver_configure_to_eu868+0x96>
    603e:	60 e0       	ldi	r22, 0x00	; 0
    6040:	70 e0       	ldi	r23, 0x00	; 0
    6042:	80 ea       	ldi	r24, 0xA0	; 160
    6044:	97 e0       	ldi	r25, 0x07	; 7
    6046:	2e dd       	rcall	.-1444   	; 0x5aa4 <_upload_message>
    6048:	85 dd       	rcall	.-1270   	; 0x5b54 <_reply2return_code>
    604a:	81 11       	cpse	r24, r1
    604c:	06 c0       	rjmp	.+12     	; 0x605a <lora_driver_configure_to_eu868+0x182>
    604e:	60 e0       	ldi	r22, 0x00	; 0
    6050:	70 e0       	ldi	r23, 0x00	; 0
    6052:	81 eb       	ldi	r24, 0xB1	; 177
    6054:	97 e0       	ldi	r25, 0x07	; 7
    6056:	26 dd       	rcall	.-1460   	; 0x5aa4 <_upload_message>
    6058:	7d dd       	rcall	.-1286   	; 0x5b54 <_reply2return_code>
    605a:	a0 96       	adiw	r28, 0x20	; 32
    605c:	0f b6       	in	r0, 0x3f	; 63
    605e:	f8 94       	cli
    6060:	de bf       	out	0x3e, r29	; 62
    6062:	0f be       	out	0x3f, r0	; 63
    6064:	cd bf       	out	0x3d, r28	; 61
    6066:	df 91       	pop	r29
    6068:	cf 91       	pop	r28
    606a:	1f 91       	pop	r17
    606c:	0f 91       	pop	r16
    606e:	ff 90       	pop	r15
    6070:	ef 90       	pop	r14
    6072:	df 90       	pop	r13
    6074:	cf 90       	pop	r12
    6076:	bf 90       	pop	r11
    6078:	af 90       	pop	r10
    607a:	9f 90       	pop	r9
    607c:	8f 90       	pop	r8
    607e:	7f 90       	pop	r7
    6080:	6f 90       	pop	r6
    6082:	5f 90       	pop	r5
    6084:	4f 90       	pop	r4
    6086:	3f 90       	pop	r3
    6088:	2f 90       	pop	r2
    608a:	08 95       	ret

0000608c <lora_driver_set_otaa_identity>:
    608c:	ef 92       	push	r14
    608e:	ff 92       	push	r15
    6090:	0f 93       	push	r16
    6092:	1f 93       	push	r17
    6094:	cf 93       	push	r28
    6096:	df 93       	push	r29
    6098:	ec 01       	movw	r28, r24
    609a:	8b 01       	movw	r16, r22
    609c:	7a 01       	movw	r14, r20
    609e:	81 e0       	ldi	r24, 0x01	; 1
    60a0:	10 df       	rcall	.-480    	; 0x5ec2 <lora_driver_set_adaptive_data_rate>
    60a2:	81 11       	cpse	r24, r1
    60a4:	0d c0       	rjmp	.+26     	; 0x60c0 <lora_driver_set_otaa_identity+0x34>
    60a6:	ce 01       	movw	r24, r28
    60a8:	29 de       	rcall	.-942    	; 0x5cfc <lora_driver_set_application_identifier>
    60aa:	81 11       	cpse	r24, r1
    60ac:	09 c0       	rjmp	.+18     	; 0x60c0 <lora_driver_set_otaa_identity+0x34>
    60ae:	c8 01       	movw	r24, r16
    60b0:	36 de       	rcall	.-916    	; 0x5d1e <lora_driver_set_application_key>
    60b2:	81 11       	cpse	r24, r1
    60b4:	05 c0       	rjmp	.+10     	; 0x60c0 <lora_driver_set_otaa_identity+0x34>
    60b6:	c7 01       	movw	r24, r14
    60b8:	10 de       	rcall	.-992    	; 0x5cda <lora_driver_set_device_identifier>
    60ba:	81 11       	cpse	r24, r1
    60bc:	01 c0       	rjmp	.+2      	; 0x60c0 <lora_driver_set_otaa_identity+0x34>
    60be:	40 de       	rcall	.-896    	; 0x5d40 <lora_driver_save_mac>
    60c0:	df 91       	pop	r29
    60c2:	cf 91       	pop	r28
    60c4:	1f 91       	pop	r17
    60c6:	0f 91       	pop	r16
    60c8:	ff 90       	pop	r15
    60ca:	ef 90       	pop	r14
    60cc:	08 95       	ret

000060ce <lora_driver_map_return_code_to_text>:
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	fc 01       	movw	r30, r24
    60d2:	ee 0f       	add	r30, r30
    60d4:	ff 1f       	adc	r31, r31
    60d6:	8e 0f       	add	r24, r30
    60d8:	9f 1f       	adc	r25, r31
    60da:	fc 01       	movw	r30, r24
    60dc:	e3 58       	subi	r30, 0x83	; 131
    60de:	f7 4f       	sbci	r31, 0xF7	; 247
    60e0:	81 81       	ldd	r24, Z+1	; 0x01
    60e2:	92 81       	ldd	r25, Z+2	; 0x02
    60e4:	08 95       	ret

000060e6 <decode_port_no>:
    60e6:	dc 01       	movw	r26, r24
    60e8:	00 97       	sbiw	r24, 0x00	; 0
    60ea:	29 f1       	breq	.+74     	; 0x6136 <decode_port_no+0x50>
    60ec:	fb 01       	movw	r30, r22
    60ee:	20 81       	ld	r18, Z
    60f0:	fc 01       	movw	r30, r24
    60f2:	01 90       	ld	r0, Z+
    60f4:	00 20       	and	r0, r0
    60f6:	e9 f7       	brne	.-6      	; 0x60f2 <decode_port_no+0xc>
    60f8:	31 97       	sbiw	r30, 0x01	; 1
    60fa:	e8 1b       	sub	r30, r24
    60fc:	f9 0b       	sbc	r31, r25
    60fe:	82 2f       	mov	r24, r18
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	e8 17       	cp	r30, r24
    6104:	f9 07       	cpc	r31, r25
    6106:	c8 f0       	brcs	.+50     	; 0x613a <decode_port_no+0x54>
    6108:	80 e0       	ldi	r24, 0x00	; 0
    610a:	08 c0       	rjmp	.+16     	; 0x611c <decode_port_no+0x36>
    610c:	88 0f       	add	r24, r24
    610e:	38 2f       	mov	r19, r24
    6110:	33 0f       	add	r19, r19
    6112:	33 0f       	add	r19, r19
    6114:	83 0f       	add	r24, r19
    6116:	80 53       	subi	r24, 0x30	; 48
    6118:	89 0f       	add	r24, r25
    611a:	2f 5f       	subi	r18, 0xFF	; 255
    611c:	fd 01       	movw	r30, r26
    611e:	e2 0f       	add	r30, r18
    6120:	f1 1d       	adc	r31, r1
    6122:	90 81       	ld	r25, Z
    6124:	30 ed       	ldi	r19, 0xD0	; 208
    6126:	39 0f       	add	r19, r25
    6128:	3a 30       	cpi	r19, 0x0A	; 10
    612a:	10 f4       	brcc	.+4      	; 0x6130 <decode_port_no+0x4a>
    612c:	91 11       	cpse	r25, r1
    612e:	ee cf       	rjmp	.-36     	; 0x610c <decode_port_no+0x26>
    6130:	fb 01       	movw	r30, r22
    6132:	20 83       	st	Z, r18
    6134:	08 95       	ret
    6136:	80 e0       	ldi	r24, 0x00	; 0
    6138:	08 95       	ret
    613a:	80 e0       	ldi	r24, 0x00	; 0
    613c:	08 95       	ret

0000613e <decode_hexadecimal_string_bytes>:
    613e:	0f 93       	push	r16
    6140:	1f 93       	push	r17
    6142:	cf 93       	push	r28
    6144:	df 93       	push	r29
    6146:	dc 01       	movw	r26, r24
    6148:	ea 01       	movw	r28, r20
    614a:	20 97       	sbiw	r28, 0x00	; 0
    614c:	e1 f1       	breq	.+120    	; 0x61c6 <decode_hexadecimal_string_bytes+0x88>
    614e:	fa 01       	movw	r30, r20
    6150:	01 90       	ld	r0, Z+
    6152:	00 20       	and	r0, r0
    6154:	e9 f7       	brne	.-6      	; 0x6150 <decode_hexadecimal_string_bytes+0x12>
    6156:	31 97       	sbiw	r30, 0x01	; 1
    6158:	e4 1b       	sub	r30, r20
    615a:	f5 0b       	sbc	r31, r21
    615c:	32 97       	sbiw	r30, 0x02	; 2
    615e:	10 f5       	brcc	.+68     	; 0x61a4 <decode_hexadecimal_string_bytes+0x66>
    6160:	32 c0       	rjmp	.+100    	; 0x61c6 <decode_hexadecimal_string_bytes+0x88>
    6162:	8d 01       	movw	r16, r26
    6164:	04 0f       	add	r16, r20
    6166:	15 1f       	adc	r17, r21
    6168:	30 e0       	ldi	r19, 0x00	; 0
    616a:	ae 01       	movw	r20, r28
    616c:	42 0f       	add	r20, r18
    616e:	53 1f       	adc	r21, r19
    6170:	fa 01       	movw	r30, r20
    6172:	90 81       	ld	r25, Z
    6174:	91 34       	cpi	r25, 0x41	; 65
    6176:	28 f0       	brcs	.+10     	; 0x6182 <decode_hexadecimal_string_bytes+0x44>
    6178:	97 53       	subi	r25, 0x37	; 55
    617a:	59 2f       	mov	r21, r25
    617c:	52 95       	swap	r21
    617e:	50 7f       	andi	r21, 0xF0	; 240
    6180:	03 c0       	rjmp	.+6      	; 0x6188 <decode_hexadecimal_string_bytes+0x4a>
    6182:	59 2f       	mov	r21, r25
    6184:	52 95       	swap	r21
    6186:	50 7f       	andi	r21, 0xF0	; 240
    6188:	2c 0f       	add	r18, r28
    618a:	3d 1f       	adc	r19, r29
    618c:	f9 01       	movw	r30, r18
    618e:	91 81       	ldd	r25, Z+1	; 0x01
    6190:	91 34       	cpi	r25, 0x41	; 65
    6192:	10 f0       	brcs	.+4      	; 0x6198 <decode_hexadecimal_string_bytes+0x5a>
    6194:	97 53       	subi	r25, 0x37	; 55
    6196:	01 c0       	rjmp	.+2      	; 0x619a <decode_hexadecimal_string_bytes+0x5c>
    6198:	90 53       	subi	r25, 0x30	; 48
    619a:	95 0f       	add	r25, r21
    619c:	f8 01       	movw	r30, r16
    619e:	90 83       	st	Z, r25
    61a0:	8f 5f       	subi	r24, 0xFF	; 255
    61a2:	01 c0       	rjmp	.+2      	; 0x61a6 <decode_hexadecimal_string_bytes+0x68>
    61a4:	80 e0       	ldi	r24, 0x00	; 0
    61a6:	28 2f       	mov	r18, r24
    61a8:	22 0f       	add	r18, r18
    61aa:	48 2f       	mov	r20, r24
    61ac:	50 e0       	ldi	r21, 0x00	; 0
    61ae:	fe 01       	movw	r30, r28
    61b0:	01 90       	ld	r0, Z+
    61b2:	00 20       	and	r0, r0
    61b4:	e9 f7       	brne	.-6      	; 0x61b0 <decode_hexadecimal_string_bytes+0x72>
    61b6:	31 97       	sbiw	r30, 0x01	; 1
    61b8:	ec 1b       	sub	r30, r28
    61ba:	fd 0b       	sbc	r31, r29
    61bc:	4e 17       	cp	r20, r30
    61be:	5f 07       	cpc	r21, r31
    61c0:	10 f4       	brcc	.+4      	; 0x61c6 <decode_hexadecimal_string_bytes+0x88>
    61c2:	86 13       	cpse	r24, r22
    61c4:	ce cf       	rjmp	.-100    	; 0x6162 <decode_hexadecimal_string_bytes+0x24>
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	1f 91       	pop	r17
    61cc:	0f 91       	pop	r16
    61ce:	08 95       	ret

000061d0 <reg_read_register>:
    61d0:	fc 01       	movw	r30, r24
    61d2:	80 81       	ld	r24, Z
    61d4:	08 95       	ret

000061d6 <reg_read_bit>:
    61d6:	fc 01       	movw	r30, r24
    61d8:	20 81       	ld	r18, Z
    61da:	81 e0       	ldi	r24, 0x01	; 1
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	02 c0       	rjmp	.+4      	; 0x61e4 <reg_read_bit+0xe>
    61e0:	88 0f       	add	r24, r24
    61e2:	99 1f       	adc	r25, r25
    61e4:	6a 95       	dec	r22
    61e6:	e2 f7       	brpl	.-8      	; 0x61e0 <reg_read_bit+0xa>
    61e8:	82 23       	and	r24, r18
    61ea:	08 95       	ret

000061ec <reg_read_bits>:
    61ec:	fc 01       	movw	r30, r24
    61ee:	80 81       	ld	r24, Z
    61f0:	86 23       	and	r24, r22
    61f2:	08 95       	ret

000061f4 <reg_set_register>:
    61f4:	fc 01       	movw	r30, r24
    61f6:	60 83       	st	Z, r22
    61f8:	08 95       	ret

000061fa <reg_clear_register>:
    61fa:	fc 01       	movw	r30, r24
    61fc:	10 82       	st	Z, r1
    61fe:	08 95       	ret

00006200 <reg_set_bit>:
    6200:	fc 01       	movw	r30, r24
    6202:	40 81       	ld	r20, Z
    6204:	21 e0       	ldi	r18, 0x01	; 1
    6206:	30 e0       	ldi	r19, 0x00	; 0
    6208:	02 c0       	rjmp	.+4      	; 0x620e <reg_set_bit+0xe>
    620a:	22 0f       	add	r18, r18
    620c:	33 1f       	adc	r19, r19
    620e:	6a 95       	dec	r22
    6210:	e2 f7       	brpl	.-8      	; 0x620a <reg_set_bit+0xa>
    6212:	24 2b       	or	r18, r20
    6214:	20 83       	st	Z, r18
    6216:	08 95       	ret

00006218 <reg_set_bits>:
    6218:	fc 01       	movw	r30, r24
    621a:	20 81       	ld	r18, Z
    621c:	62 2b       	or	r22, r18
    621e:	60 83       	st	Z, r22
    6220:	08 95       	ret

00006222 <reg_toggle_bit>:
    6222:	fc 01       	movw	r30, r24
    6224:	40 81       	ld	r20, Z
    6226:	21 e0       	ldi	r18, 0x01	; 1
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	02 c0       	rjmp	.+4      	; 0x6230 <reg_toggle_bit+0xe>
    622c:	22 0f       	add	r18, r18
    622e:	33 1f       	adc	r19, r19
    6230:	6a 95       	dec	r22
    6232:	e2 f7       	brpl	.-8      	; 0x622c <reg_toggle_bit+0xa>
    6234:	24 27       	eor	r18, r20
    6236:	20 83       	st	Z, r18
    6238:	08 95       	ret

0000623a <reg_toggle_bits>:
    623a:	fc 01       	movw	r30, r24
    623c:	20 81       	ld	r18, Z
    623e:	62 27       	eor	r22, r18
    6240:	60 83       	st	Z, r22
    6242:	08 95       	ret

00006244 <reg_clear_bit>:
    6244:	fc 01       	movw	r30, r24
    6246:	90 81       	ld	r25, Z
    6248:	21 e0       	ldi	r18, 0x01	; 1
    624a:	30 e0       	ldi	r19, 0x00	; 0
    624c:	02 c0       	rjmp	.+4      	; 0x6252 <reg_clear_bit+0xe>
    624e:	22 0f       	add	r18, r18
    6250:	33 1f       	adc	r19, r19
    6252:	6a 95       	dec	r22
    6254:	e2 f7       	brpl	.-8      	; 0x624e <reg_clear_bit+0xa>
    6256:	20 95       	com	r18
    6258:	29 23       	and	r18, r25
    625a:	20 83       	st	Z, r18
    625c:	08 95       	ret

0000625e <reg_clear_bits>:
    625e:	fc 01       	movw	r30, r24
    6260:	90 81       	ld	r25, Z
    6262:	60 95       	com	r22
    6264:	69 23       	and	r22, r25
    6266:	60 83       	st	Z, r22
    6268:	08 95       	ret

0000626a <_serial_call_back>:
    626a:	80 91 ef 0a 	lds	r24, 0x0AEF	; 0x800aef <crc_sum.1941>
    626e:	86 0f       	add	r24, r22
    6270:	80 93 ef 0a 	sts	0x0AEF, r24	; 0x800aef <crc_sum.1941>
    6274:	90 91 f2 0a 	lds	r25, 0x0AF2	; 0x800af2 <_mh_state>
    6278:	91 30       	cpi	r25, 0x01	; 1
    627a:	79 f0       	breq	.+30     	; 0x629a <_serial_call_back+0x30>
    627c:	28 f0       	brcs	.+10     	; 0x6288 <_serial_call_back+0x1e>
    627e:	92 30       	cpi	r25, 0x02	; 2
    6280:	a9 f0       	breq	.+42     	; 0x62ac <_serial_call_back+0x42>
    6282:	93 30       	cpi	r25, 0x03	; 3
    6284:	19 f1       	breq	.+70     	; 0x62cc <_serial_call_back+0x62>
    6286:	08 95       	ret
    6288:	6f 3f       	cpi	r22, 0xFF	; 255
    628a:	09 f0       	breq	.+2      	; 0x628e <_serial_call_back+0x24>
    628c:	48 c0       	rjmp	.+144    	; 0x631e <_serial_call_back+0xb4>
    628e:	10 92 ef 0a 	sts	0x0AEF, r1	; 0x800aef <crc_sum.1941>
    6292:	81 e0       	ldi	r24, 0x01	; 1
    6294:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <_mh_state>
    6298:	08 95       	ret
    629a:	66 38       	cpi	r22, 0x86	; 134
    629c:	09 f0       	breq	.+2      	; 0x62a0 <_serial_call_back+0x36>
    629e:	3f c0       	rjmp	.+126    	; 0x631e <_serial_call_back+0xb4>
    62a0:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <inDex.1939>
    62a4:	82 e0       	ldi	r24, 0x02	; 2
    62a6:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <_mh_state>
    62aa:	08 95       	ret
    62ac:	e0 91 ee 0a 	lds	r30, 0x0AEE	; 0x800aee <inDex.1939>
    62b0:	81 e0       	ldi	r24, 0x01	; 1
    62b2:	8e 0f       	add	r24, r30
    62b4:	80 93 ee 0a 	sts	0x0AEE, r24	; 0x800aee <inDex.1939>
    62b8:	f0 e0       	ldi	r31, 0x00	; 0
    62ba:	e4 51       	subi	r30, 0x14	; 20
    62bc:	f5 4f       	sbci	r31, 0xF5	; 245
    62be:	60 83       	st	Z, r22
    62c0:	82 30       	cpi	r24, 0x02	; 2
    62c2:	69 f5       	brne	.+90     	; 0x631e <_serial_call_back+0xb4>
    62c4:	83 e0       	ldi	r24, 0x03	; 3
    62c6:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <_mh_state>
    62ca:	08 95       	ret
    62cc:	90 91 ee 0a 	lds	r25, 0x0AEE	; 0x800aee <inDex.1939>
    62d0:	21 e0       	ldi	r18, 0x01	; 1
    62d2:	29 0f       	add	r18, r25
    62d4:	20 93 ee 0a 	sts	0x0AEE, r18	; 0x800aee <inDex.1939>
    62d8:	96 30       	cpi	r25, 0x06	; 6
    62da:	09 f5       	brne	.+66     	; 0x631e <_serial_call_back+0xb4>
    62dc:	81 11       	cpse	r24, r1
    62de:	0e c0       	rjmp	.+28     	; 0x62fc <_serial_call_back+0x92>
    62e0:	ec ee       	ldi	r30, 0xEC	; 236
    62e2:	fa e0       	ldi	r31, 0x0A	; 10
    62e4:	80 81       	ld	r24, Z
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	98 2f       	mov	r25, r24
    62ea:	88 27       	eor	r24, r24
    62ec:	21 81       	ldd	r18, Z+1	; 0x01
    62ee:	82 0f       	add	r24, r18
    62f0:	91 1d       	adc	r25, r1
    62f2:	90 93 f4 0a 	sts	0x0AF4, r25	; 0x800af4 <_ppm+0x1>
    62f6:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <_ppm>
    62fa:	04 c0       	rjmp	.+8      	; 0x6304 <_serial_call_back+0x9a>
    62fc:	10 92 f4 0a 	sts	0x0AF4, r1	; 0x800af4 <_ppm+0x1>
    6300:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <_ppm>
    6304:	10 92 f2 0a 	sts	0x0AF2, r1	; 0x800af2 <_mh_state>
    6308:	e0 91 f0 0a 	lds	r30, 0x0AF0	; 0x800af0 <_app_call_back>
    630c:	f0 91 f1 0a 	lds	r31, 0x0AF1	; 0x800af1 <_app_call_back+0x1>
    6310:	30 97       	sbiw	r30, 0x00	; 0
    6312:	29 f0       	breq	.+10     	; 0x631e <_serial_call_back+0xb4>
    6314:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <_ppm>
    6318:	90 91 f4 0a 	lds	r25, 0x0AF4	; 0x800af4 <_ppm+0x1>
    631c:	19 95       	eicall
    631e:	08 95       	ret

00006320 <mh_z19_create>:
    6320:	8f 92       	push	r8
    6322:	9f 92       	push	r9
    6324:	af 92       	push	r10
    6326:	cf 92       	push	r12
    6328:	ef 92       	push	r14
    632a:	0f 93       	push	r16
    632c:	cf 93       	push	r28
    632e:	df 93       	push	r29
    6330:	eb 01       	movw	r28, r22
    6332:	0f 2e       	mov	r0, r31
    6334:	f5 e3       	ldi	r31, 0x35	; 53
    6336:	8f 2e       	mov	r8, r31
    6338:	f1 e3       	ldi	r31, 0x31	; 49
    633a:	9f 2e       	mov	r9, r31
    633c:	f0 2d       	mov	r31, r0
    633e:	68 94       	set
    6340:	aa 24       	eor	r10, r10
    6342:	a4 f8       	bld	r10, 4
    6344:	68 94       	set
    6346:	cc 24       	eor	r12, r12
    6348:	c4 f8       	bld	r12, 4
    634a:	e1 2c       	mov	r14, r1
    634c:	00 e0       	ldi	r16, 0x00	; 0
    634e:	23 e0       	ldi	r18, 0x03	; 3
    6350:	40 e8       	ldi	r20, 0x80	; 128
    6352:	55 e2       	ldi	r21, 0x25	; 37
    6354:	60 e0       	ldi	r22, 0x00	; 0
    6356:	70 e0       	ldi	r23, 0x00	; 0
    6358:	0e 94 ef 26 	call	0x4dde	; 0x4dde <serial_new_instance>
    635c:	90 93 f6 0a 	sts	0x0AF6, r25	; 0x800af6 <_serial+0x1>
    6360:	80 93 f5 0a 	sts	0x0AF5, r24	; 0x800af5 <_serial>
    6364:	d0 93 f1 0a 	sts	0x0AF1, r29	; 0x800af1 <_app_call_back+0x1>
    6368:	c0 93 f0 0a 	sts	0x0AF0, r28	; 0x800af0 <_app_call_back>
    636c:	df 91       	pop	r29
    636e:	cf 91       	pop	r28
    6370:	0f 91       	pop	r16
    6372:	ef 90       	pop	r14
    6374:	cf 90       	pop	r12
    6376:	af 90       	pop	r10
    6378:	9f 90       	pop	r9
    637a:	8f 90       	pop	r8
    637c:	08 95       	ret

0000637e <mh_z19_take_meassuring>:
    637e:	cf 93       	push	r28
    6380:	df 93       	push	r29
    6382:	cd b7       	in	r28, 0x3d	; 61
    6384:	de b7       	in	r29, 0x3e	; 62
    6386:	29 97       	sbiw	r28, 0x09	; 9
    6388:	0f b6       	in	r0, 0x3f	; 63
    638a:	f8 94       	cli
    638c:	de bf       	out	0x3e, r29	; 62
    638e:	0f be       	out	0x3f, r0	; 63
    6390:	cd bf       	out	0x3d, r28	; 61
    6392:	89 e0       	ldi	r24, 0x09	; 9
    6394:	ee ea       	ldi	r30, 0xAE	; 174
    6396:	f5 e0       	ldi	r31, 0x05	; 5
    6398:	9e 01       	movw	r18, r28
    639a:	2f 5f       	subi	r18, 0xFF	; 255
    639c:	3f 4f       	sbci	r19, 0xFF	; 255
    639e:	d9 01       	movw	r26, r18
    63a0:	01 90       	ld	r0, Z+
    63a2:	0d 92       	st	X+, r0
    63a4:	8a 95       	dec	r24
    63a6:	e1 f7       	brne	.-8      	; 0x63a0 <mh_z19_take_meassuring+0x22>
    63a8:	10 92 f4 0a 	sts	0x0AF4, r1	; 0x800af4 <_ppm+0x1>
    63ac:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <_ppm>
    63b0:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <_serial>
    63b4:	90 91 f6 0a 	lds	r25, 0x0AF6	; 0x800af6 <_serial+0x1>
    63b8:	00 97       	sbiw	r24, 0x00	; 0
    63ba:	39 f0       	breq	.+14     	; 0x63ca <mh_z19_take_meassuring+0x4c>
    63bc:	42 2f       	mov	r20, r18
    63be:	53 2f       	mov	r21, r19
    63c0:	69 e0       	ldi	r22, 0x09	; 9
    63c2:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <serial_send_bytes>
    63c6:	80 e0       	ldi	r24, 0x00	; 0
    63c8:	01 c0       	rjmp	.+2      	; 0x63cc <mh_z19_take_meassuring+0x4e>
    63ca:	82 e0       	ldi	r24, 0x02	; 2
    63cc:	29 96       	adiw	r28, 0x09	; 9
    63ce:	0f b6       	in	r0, 0x3f	; 63
    63d0:	f8 94       	cli
    63d2:	de bf       	out	0x3e, r29	; 62
    63d4:	0f be       	out	0x3f, r0	; 63
    63d6:	cd bf       	out	0x3d, r28	; 61
    63d8:	df 91       	pop	r29
    63da:	cf 91       	pop	r28
    63dc:	08 95       	ret

000063de <_initTwiInterface>:
    63de:	80 91 05 0b 	lds	r24, 0x0B05	; 0x800b05 <_twiIsInitiated>
    63e2:	81 11       	cpse	r24, r1
    63e4:	0c c0       	rjmp	.+24     	; 0x63fe <_initTwiInterface+0x20>
    63e6:	8c e0       	ldi	r24, 0x0C	; 12
    63e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    63ec:	8f ef       	ldi	r24, 0xFF	; 255
    63ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    63f2:	84 e0       	ldi	r24, 0x04	; 4
    63f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    63f8:	81 e0       	ldi	r24, 0x01	; 1
    63fa:	80 93 05 0b 	sts	0x0B05, r24	; 0x800b05 <_twiIsInitiated>
    63fe:	08 95       	ret

00006400 <twiCreate>:
    6400:	af 92       	push	r10
    6402:	bf 92       	push	r11
    6404:	cf 92       	push	r12
    6406:	df 92       	push	r13
    6408:	ef 92       	push	r14
    640a:	ff 92       	push	r15
    640c:	0f 93       	push	r16
    640e:	1f 93       	push	r17
    6410:	cf 93       	push	r28
    6412:	df 93       	push	r29
    6414:	a8 2e       	mov	r10, r24
    6416:	b6 2e       	mov	r11, r22
    6418:	69 01       	movw	r12, r18
    641a:	7a 01       	movw	r14, r20
    641c:	84 e0       	ldi	r24, 0x04	; 4
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	db d3       	rcall	.+1974   	; 0x6bd8 <malloc>
    6422:	ec 01       	movw	r28, r24
    6424:	89 2b       	or	r24, r25
    6426:	61 f1       	breq	.+88     	; 0x6480 <twiCreate+0x80>
    6428:	a8 82       	st	Y, r10
    642a:	81 e0       	ldi	r24, 0x01	; 1
    642c:	b8 12       	cpse	r11, r24
    642e:	12 c0       	rjmp	.+36     	; 0x6454 <twiCreate+0x54>
    6430:	c7 01       	movw	r24, r14
    6432:	b6 01       	movw	r22, r12
    6434:	20 ea       	ldi	r18, 0xA0	; 160
    6436:	36 e8       	ldi	r19, 0x86	; 134
    6438:	41 e0       	ldi	r20, 0x01	; 1
    643a:	50 e0       	ldi	r21, 0x00	; 0
    643c:	6e d1       	rcall	.+732    	; 0x671a <__udivmodsi4>
    643e:	da 01       	movw	r26, r20
    6440:	c9 01       	movw	r24, r18
    6442:	40 97       	sbiw	r24, 0x10	; 16
    6444:	a1 09       	sbc	r26, r1
    6446:	b1 09       	sbc	r27, r1
    6448:	b6 95       	lsr	r27
    644a:	a7 95       	ror	r26
    644c:	97 95       	ror	r25
    644e:	87 95       	ror	r24
    6450:	89 83       	std	Y+1, r24	; 0x01
    6452:	11 c0       	rjmp	.+34     	; 0x6476 <twiCreate+0x76>
    6454:	c7 01       	movw	r24, r14
    6456:	b6 01       	movw	r22, r12
    6458:	20 e8       	ldi	r18, 0x80	; 128
    645a:	3a e1       	ldi	r19, 0x1A	; 26
    645c:	46 e0       	ldi	r20, 0x06	; 6
    645e:	50 e0       	ldi	r21, 0x00	; 0
    6460:	5c d1       	rcall	.+696    	; 0x671a <__udivmodsi4>
    6462:	da 01       	movw	r26, r20
    6464:	c9 01       	movw	r24, r18
    6466:	40 97       	sbiw	r24, 0x10	; 16
    6468:	a1 09       	sbc	r26, r1
    646a:	b1 09       	sbc	r27, r1
    646c:	b6 95       	lsr	r27
    646e:	a7 95       	ror	r26
    6470:	97 95       	ror	r25
    6472:	87 95       	ror	r24
    6474:	89 83       	std	Y+1, r24	; 0x01
    6476:	1b 83       	std	Y+3, r17	; 0x03
    6478:	0a 83       	std	Y+2, r16	; 0x02
    647a:	8c 2f       	mov	r24, r28
    647c:	9d 2f       	mov	r25, r29
    647e:	02 c0       	rjmp	.+4      	; 0x6484 <twiCreate+0x84>
    6480:	80 e0       	ldi	r24, 0x00	; 0
    6482:	90 e0       	ldi	r25, 0x00	; 0
    6484:	df 91       	pop	r29
    6486:	cf 91       	pop	r28
    6488:	1f 91       	pop	r17
    648a:	0f 91       	pop	r16
    648c:	ff 90       	pop	r15
    648e:	ef 90       	pop	r14
    6490:	df 90       	pop	r13
    6492:	cf 90       	pop	r12
    6494:	bf 90       	pop	r11
    6496:	af 90       	pop	r10
    6498:	08 95       	ret

0000649a <twiIsBusy>:
    649a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    649e:	81 70       	andi	r24, 0x01	; 1
    64a0:	08 95       	ret

000064a2 <twiTransmit>:
    64a2:	ff 92       	push	r15
    64a4:	0f 93       	push	r16
    64a6:	1f 93       	push	r17
    64a8:	cf 93       	push	r28
    64aa:	df 93       	push	r29
    64ac:	00 97       	sbiw	r24, 0x00	; 0
    64ae:	d1 f1       	breq	.+116    	; 0x6524 <twiTransmit+0x82>
    64b0:	4a 30       	cpi	r20, 0x0A	; 10
    64b2:	d0 f5       	brcc	.+116    	; 0x6528 <twiTransmit+0x86>
    64b4:	f4 2e       	mov	r15, r20
    64b6:	8b 01       	movw	r16, r22
    64b8:	ec 01       	movw	r28, r24
    64ba:	ef df       	rcall	.-34     	; 0x649a <twiIsBusy>
    64bc:	81 11       	cpse	r24, r1
    64be:	36 c0       	rjmp	.+108    	; 0x652c <twiTransmit+0x8a>
    64c0:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <_twiCurrentHandler>
    64c4:	90 91 f9 0a 	lds	r25, 0x0AF9	; 0x800af9 <_twiCurrentHandler+0x1>
    64c8:	c8 17       	cp	r28, r24
    64ca:	d9 07       	cpc	r29, r25
    64cc:	41 f0       	breq	.+16     	; 0x64de <twiTransmit+0x3c>
    64ce:	87 df       	rcall	.-242    	; 0x63de <_initTwiInterface>
    64d0:	89 81       	ldd	r24, Y+1	; 0x01
    64d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    64d6:	d0 93 f9 0a 	sts	0x0AF9, r29	; 0x800af9 <_twiCurrentHandler+0x1>
    64da:	c0 93 f8 0a 	sts	0x0AF8, r28	; 0x800af8 <_twiCurrentHandler>
    64de:	81 e0       	ldi	r24, 0x01	; 1
    64e0:	8f 0d       	add	r24, r15
    64e2:	80 93 fa 0a 	sts	0x0AFA, r24	; 0x800afa <_twiMessageLen>
    64e6:	88 81       	ld	r24, Y
    64e8:	88 0f       	add	r24, r24
    64ea:	80 93 fb 0a 	sts	0x0AFB, r24	; 0x800afb <_twiMessageBuffer>
    64ee:	ff 20       	and	r15, r15
    64f0:	89 f0       	breq	.+34     	; 0x6514 <twiTransmit+0x72>
    64f2:	f8 01       	movw	r30, r16
    64f4:	ac ef       	ldi	r26, 0xFC	; 252
    64f6:	ba e0       	ldi	r27, 0x0A	; 10
    64f8:	4f ef       	ldi	r20, 0xFF	; 255
    64fa:	4f 0d       	add	r20, r15
    64fc:	64 2f       	mov	r22, r20
    64fe:	70 e0       	ldi	r23, 0x00	; 0
    6500:	cb 01       	movw	r24, r22
    6502:	01 96       	adiw	r24, 0x01	; 1
    6504:	b8 01       	movw	r22, r16
    6506:	68 0f       	add	r22, r24
    6508:	79 1f       	adc	r23, r25
    650a:	81 91       	ld	r24, Z+
    650c:	8d 93       	st	X+, r24
    650e:	e6 17       	cp	r30, r22
    6510:	f7 07       	cpc	r31, r23
    6512:	d9 f7       	brne	.-10     	; 0x650a <twiTransmit+0x68>
    6514:	88 ef       	ldi	r24, 0xF8	; 248
    6516:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    651a:	85 ea       	ldi	r24, 0xA5	; 165
    651c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6520:	84 e0       	ldi	r24, 0x04	; 4
    6522:	05 c0       	rjmp	.+10     	; 0x652e <twiTransmit+0x8c>
    6524:	86 e0       	ldi	r24, 0x06	; 6
    6526:	03 c0       	rjmp	.+6      	; 0x652e <twiTransmit+0x8c>
    6528:	87 e0       	ldi	r24, 0x07	; 7
    652a:	01 c0       	rjmp	.+2      	; 0x652e <twiTransmit+0x8c>
    652c:	82 e0       	ldi	r24, 0x02	; 2
    652e:	df 91       	pop	r29
    6530:	cf 91       	pop	r28
    6532:	1f 91       	pop	r17
    6534:	0f 91       	pop	r16
    6536:	ff 90       	pop	r15
    6538:	08 95       	ret

0000653a <twiReceive>:
    653a:	1f 93       	push	r17
    653c:	cf 93       	push	r28
    653e:	df 93       	push	r29
    6540:	00 97       	sbiw	r24, 0x00	; 0
    6542:	29 f1       	breq	.+74     	; 0x658e <twiReceive+0x54>
    6544:	6b 30       	cpi	r22, 0x0B	; 11
    6546:	28 f5       	brcc	.+74     	; 0x6592 <twiReceive+0x58>
    6548:	16 2f       	mov	r17, r22
    654a:	ec 01       	movw	r28, r24
    654c:	a6 df       	rcall	.-180    	; 0x649a <twiIsBusy>
    654e:	81 11       	cpse	r24, r1
    6550:	22 c0       	rjmp	.+68     	; 0x6596 <twiReceive+0x5c>
    6552:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <_twiCurrentHandler>
    6556:	90 91 f9 0a 	lds	r25, 0x0AF9	; 0x800af9 <_twiCurrentHandler+0x1>
    655a:	c8 17       	cp	r28, r24
    655c:	d9 07       	cpc	r29, r25
    655e:	41 f0       	breq	.+16     	; 0x6570 <twiReceive+0x36>
    6560:	3e df       	rcall	.-388    	; 0x63de <_initTwiInterface>
    6562:	89 81       	ldd	r24, Y+1	; 0x01
    6564:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    6568:	d0 93 f9 0a 	sts	0x0AF9, r29	; 0x800af9 <_twiCurrentHandler+0x1>
    656c:	c0 93 f8 0a 	sts	0x0AF8, r28	; 0x800af8 <_twiCurrentHandler>
    6570:	10 93 fa 0a 	sts	0x0AFA, r17	; 0x800afa <_twiMessageLen>
    6574:	88 81       	ld	r24, Y
    6576:	88 0f       	add	r24, r24
    6578:	81 60       	ori	r24, 0x01	; 1
    657a:	80 93 fb 0a 	sts	0x0AFB, r24	; 0x800afb <_twiMessageBuffer>
    657e:	88 ef       	ldi	r24, 0xF8	; 248
    6580:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    6584:	85 ea       	ldi	r24, 0xA5	; 165
    6586:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    658a:	85 e0       	ldi	r24, 0x05	; 5
    658c:	05 c0       	rjmp	.+10     	; 0x6598 <twiReceive+0x5e>
    658e:	86 e0       	ldi	r24, 0x06	; 6
    6590:	03 c0       	rjmp	.+6      	; 0x6598 <twiReceive+0x5e>
    6592:	87 e0       	ldi	r24, 0x07	; 7
    6594:	01 c0       	rjmp	.+2      	; 0x6598 <twiReceive+0x5e>
    6596:	82 e0       	ldi	r24, 0x02	; 2
    6598:	df 91       	pop	r29
    659a:	cf 91       	pop	r28
    659c:	1f 91       	pop	r17
    659e:	08 95       	ret

000065a0 <__vector_39>:
    65a0:	1f 92       	push	r1
    65a2:	0f 92       	push	r0
    65a4:	0f b6       	in	r0, 0x3f	; 63
    65a6:	0f 92       	push	r0
    65a8:	11 24       	eor	r1, r1
    65aa:	0b b6       	in	r0, 0x3b	; 59
    65ac:	0f 92       	push	r0
    65ae:	2f 93       	push	r18
    65b0:	3f 93       	push	r19
    65b2:	4f 93       	push	r20
    65b4:	5f 93       	push	r21
    65b6:	6f 93       	push	r22
    65b8:	7f 93       	push	r23
    65ba:	8f 93       	push	r24
    65bc:	9f 93       	push	r25
    65be:	af 93       	push	r26
    65c0:	bf 93       	push	r27
    65c2:	ef 93       	push	r30
    65c4:	ff 93       	push	r31
    65c6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    65ca:	8e 2f       	mov	r24, r30
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	fc 01       	movw	r30, r24
    65d0:	38 97       	sbiw	r30, 0x08	; 8
    65d2:	e1 35       	cpi	r30, 0x51	; 81
    65d4:	f1 05       	cpc	r31, r1
    65d6:	08 f0       	brcs	.+2      	; 0x65da <__vector_39+0x3a>
    65d8:	75 c0       	rjmp	.+234    	; 0x66c4 <__vector_39+0x124>
    65da:	88 27       	eor	r24, r24
    65dc:	e4 58       	subi	r30, 0x84	; 132
    65de:	ff 4f       	sbci	r31, 0xFF	; 255
    65e0:	8f 4f       	sbci	r24, 0xFF	; 255
    65e2:	bd c0       	rjmp	.+378    	; 0x675e <__tablejump2__>
    65e4:	10 92 f7 0a 	sts	0x0AF7, r1	; 0x800af7 <_index.1885>
    65e8:	e0 91 f7 0a 	lds	r30, 0x0AF7	; 0x800af7 <_index.1885>
    65ec:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <_twiMessageLen>
    65f0:	e8 17       	cp	r30, r24
    65f2:	70 f4       	brcc	.+28     	; 0x6610 <__vector_39+0x70>
    65f4:	81 e0       	ldi	r24, 0x01	; 1
    65f6:	8e 0f       	add	r24, r30
    65f8:	80 93 f7 0a 	sts	0x0AF7, r24	; 0x800af7 <_index.1885>
    65fc:	f0 e0       	ldi	r31, 0x00	; 0
    65fe:	e5 50       	subi	r30, 0x05	; 5
    6600:	f5 4f       	sbci	r31, 0xF5	; 245
    6602:	80 81       	ld	r24, Z
    6604:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6608:	85 e8       	ldi	r24, 0x85	; 133
    660a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    660e:	72 c0       	rjmp	.+228    	; 0x66f4 <__vector_39+0x154>
    6610:	84 e9       	ldi	r24, 0x94	; 148
    6612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6616:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <_twiCurrentHandler>
    661a:	90 91 f9 0a 	lds	r25, 0x0AF9	; 0x800af9 <_twiCurrentHandler+0x1>
    661e:	dc 01       	movw	r26, r24
    6620:	12 96       	adiw	r26, 0x02	; 2
    6622:	ed 91       	ld	r30, X+
    6624:	fc 91       	ld	r31, X
    6626:	13 97       	sbiw	r26, 0x03	; 3
    6628:	30 97       	sbiw	r30, 0x00	; 0
    662a:	09 f4       	brne	.+2      	; 0x662e <__vector_39+0x8e>
    662c:	63 c0       	rjmp	.+198    	; 0x66f4 <__vector_39+0x154>
    662e:	20 e0       	ldi	r18, 0x00	; 0
    6630:	40 e0       	ldi	r20, 0x00	; 0
    6632:	50 e0       	ldi	r21, 0x00	; 0
    6634:	64 e0       	ldi	r22, 0x04	; 4
    6636:	19 95       	eicall
    6638:	5d c0       	rjmp	.+186    	; 0x66f4 <__vector_39+0x154>
    663a:	e0 91 f7 0a 	lds	r30, 0x0AF7	; 0x800af7 <_index.1885>
    663e:	81 e0       	ldi	r24, 0x01	; 1
    6640:	8e 0f       	add	r24, r30
    6642:	80 93 f7 0a 	sts	0x0AF7, r24	; 0x800af7 <_index.1885>
    6646:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    664a:	f0 e0       	ldi	r31, 0x00	; 0
    664c:	e5 50       	subi	r30, 0x05	; 5
    664e:	f5 4f       	sbci	r31, 0xF5	; 245
    6650:	80 83       	st	Z, r24
    6652:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6656:	80 34       	cpi	r24, 0x40	; 64
    6658:	11 f4       	brne	.+4      	; 0x665e <__vector_39+0xbe>
    665a:	10 92 f7 0a 	sts	0x0AF7, r1	; 0x800af7 <_index.1885>
    665e:	20 91 f7 0a 	lds	r18, 0x0AF7	; 0x800af7 <_index.1885>
    6662:	30 e0       	ldi	r19, 0x00	; 0
    6664:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <_twiMessageLen>
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	01 97       	sbiw	r24, 0x01	; 1
    666c:	28 17       	cp	r18, r24
    666e:	39 07       	cpc	r19, r25
    6670:	24 f4       	brge	.+8      	; 0x667a <__vector_39+0xda>
    6672:	85 ec       	ldi	r24, 0xC5	; 197
    6674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6678:	3d c0       	rjmp	.+122    	; 0x66f4 <__vector_39+0x154>
    667a:	85 e8       	ldi	r24, 0x85	; 133
    667c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6680:	39 c0       	rjmp	.+114    	; 0x66f4 <__vector_39+0x154>
    6682:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6686:	e0 91 f7 0a 	lds	r30, 0x0AF7	; 0x800af7 <_index.1885>
    668a:	f0 e0       	ldi	r31, 0x00	; 0
    668c:	e5 50       	subi	r30, 0x05	; 5
    668e:	f5 4f       	sbci	r31, 0xF5	; 245
    6690:	80 83       	st	Z, r24
    6692:	84 e9       	ldi	r24, 0x94	; 148
    6694:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6698:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <_twiCurrentHandler>
    669c:	90 91 f9 0a 	lds	r25, 0x0AF9	; 0x800af9 <_twiCurrentHandler+0x1>
    66a0:	dc 01       	movw	r26, r24
    66a2:	12 96       	adiw	r26, 0x02	; 2
    66a4:	ed 91       	ld	r30, X+
    66a6:	fc 91       	ld	r31, X
    66a8:	13 97       	sbiw	r26, 0x03	; 3
    66aa:	30 97       	sbiw	r30, 0x00	; 0
    66ac:	19 f1       	breq	.+70     	; 0x66f4 <__vector_39+0x154>
    66ae:	20 91 fa 0a 	lds	r18, 0x0AFA	; 0x800afa <_twiMessageLen>
    66b2:	4b ef       	ldi	r20, 0xFB	; 251
    66b4:	5a e0       	ldi	r21, 0x0A	; 10
    66b6:	65 e0       	ldi	r22, 0x05	; 5
    66b8:	19 95       	eicall
    66ba:	1c c0       	rjmp	.+56     	; 0x66f4 <__vector_39+0x154>
    66bc:	85 ea       	ldi	r24, 0xA5	; 165
    66be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    66c2:	18 c0       	rjmp	.+48     	; 0x66f4 <__vector_39+0x154>
    66c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    66c8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    66cc:	84 e0       	ldi	r24, 0x04	; 4
    66ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    66d2:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <_twiCurrentHandler>
    66d6:	90 91 f9 0a 	lds	r25, 0x0AF9	; 0x800af9 <_twiCurrentHandler+0x1>
    66da:	dc 01       	movw	r26, r24
    66dc:	12 96       	adiw	r26, 0x02	; 2
    66de:	ed 91       	ld	r30, X+
    66e0:	fc 91       	ld	r31, X
    66e2:	13 97       	sbiw	r26, 0x03	; 3
    66e4:	30 97       	sbiw	r30, 0x00	; 0
    66e6:	31 f0       	breq	.+12     	; 0x66f4 <__vector_39+0x154>
    66e8:	20 e0       	ldi	r18, 0x00	; 0
    66ea:	40 e0       	ldi	r20, 0x00	; 0
    66ec:	50 e0       	ldi	r21, 0x00	; 0
    66ee:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    66f2:	19 95       	eicall
    66f4:	ff 91       	pop	r31
    66f6:	ef 91       	pop	r30
    66f8:	bf 91       	pop	r27
    66fa:	af 91       	pop	r26
    66fc:	9f 91       	pop	r25
    66fe:	8f 91       	pop	r24
    6700:	7f 91       	pop	r23
    6702:	6f 91       	pop	r22
    6704:	5f 91       	pop	r21
    6706:	4f 91       	pop	r20
    6708:	3f 91       	pop	r19
    670a:	2f 91       	pop	r18
    670c:	0f 90       	pop	r0
    670e:	0b be       	out	0x3b, r0	; 59
    6710:	0f 90       	pop	r0
    6712:	0f be       	out	0x3f, r0	; 63
    6714:	0f 90       	pop	r0
    6716:	1f 90       	pop	r1
    6718:	18 95       	reti

0000671a <__udivmodsi4>:
    671a:	a1 e2       	ldi	r26, 0x21	; 33
    671c:	1a 2e       	mov	r1, r26
    671e:	aa 1b       	sub	r26, r26
    6720:	bb 1b       	sub	r27, r27
    6722:	fd 01       	movw	r30, r26
    6724:	0d c0       	rjmp	.+26     	; 0x6740 <__udivmodsi4_ep>

00006726 <__udivmodsi4_loop>:
    6726:	aa 1f       	adc	r26, r26
    6728:	bb 1f       	adc	r27, r27
    672a:	ee 1f       	adc	r30, r30
    672c:	ff 1f       	adc	r31, r31
    672e:	a2 17       	cp	r26, r18
    6730:	b3 07       	cpc	r27, r19
    6732:	e4 07       	cpc	r30, r20
    6734:	f5 07       	cpc	r31, r21
    6736:	20 f0       	brcs	.+8      	; 0x6740 <__udivmodsi4_ep>
    6738:	a2 1b       	sub	r26, r18
    673a:	b3 0b       	sbc	r27, r19
    673c:	e4 0b       	sbc	r30, r20
    673e:	f5 0b       	sbc	r31, r21

00006740 <__udivmodsi4_ep>:
    6740:	66 1f       	adc	r22, r22
    6742:	77 1f       	adc	r23, r23
    6744:	88 1f       	adc	r24, r24
    6746:	99 1f       	adc	r25, r25
    6748:	1a 94       	dec	r1
    674a:	69 f7       	brne	.-38     	; 0x6726 <__udivmodsi4_loop>
    674c:	60 95       	com	r22
    674e:	70 95       	com	r23
    6750:	80 95       	com	r24
    6752:	90 95       	com	r25
    6754:	9b 01       	movw	r18, r22
    6756:	ac 01       	movw	r20, r24
    6758:	bd 01       	movw	r22, r26
    675a:	cf 01       	movw	r24, r30
    675c:	08 95       	ret

0000675e <__tablejump2__>:
    675e:	ee 0f       	add	r30, r30
    6760:	ff 1f       	adc	r31, r31
    6762:	88 1f       	adc	r24, r24
    6764:	8b bf       	out	0x3b, r24	; 59
    6766:	07 90       	elpm	r0, Z+
    6768:	f6 91       	elpm	r31, Z
    676a:	e0 2d       	mov	r30, r0
    676c:	19 94       	eijmp

0000676e <__subsf3>:
    676e:	50 58       	subi	r21, 0x80	; 128

00006770 <__addsf3>:
    6770:	bb 27       	eor	r27, r27
    6772:	aa 27       	eor	r26, r26
    6774:	0e d0       	rcall	.+28     	; 0x6792 <__addsf3x>
    6776:	75 c1       	rjmp	.+746    	; 0x6a62 <__fp_round>
    6778:	66 d1       	rcall	.+716    	; 0x6a46 <__fp_pscA>
    677a:	30 f0       	brcs	.+12     	; 0x6788 <__addsf3+0x18>
    677c:	6b d1       	rcall	.+726    	; 0x6a54 <__fp_pscB>
    677e:	20 f0       	brcs	.+8      	; 0x6788 <__addsf3+0x18>
    6780:	31 f4       	brne	.+12     	; 0x678e <__addsf3+0x1e>
    6782:	9f 3f       	cpi	r25, 0xFF	; 255
    6784:	11 f4       	brne	.+4      	; 0x678a <__addsf3+0x1a>
    6786:	1e f4       	brtc	.+6      	; 0x678e <__addsf3+0x1e>
    6788:	5b c1       	rjmp	.+694    	; 0x6a40 <__fp_nan>
    678a:	0e f4       	brtc	.+2      	; 0x678e <__addsf3+0x1e>
    678c:	e0 95       	com	r30
    678e:	e7 fb       	bst	r30, 7
    6790:	51 c1       	rjmp	.+674    	; 0x6a34 <__fp_inf>

00006792 <__addsf3x>:
    6792:	e9 2f       	mov	r30, r25
    6794:	77 d1       	rcall	.+750    	; 0x6a84 <__fp_split3>
    6796:	80 f3       	brcs	.-32     	; 0x6778 <__addsf3+0x8>
    6798:	ba 17       	cp	r27, r26
    679a:	62 07       	cpc	r22, r18
    679c:	73 07       	cpc	r23, r19
    679e:	84 07       	cpc	r24, r20
    67a0:	95 07       	cpc	r25, r21
    67a2:	18 f0       	brcs	.+6      	; 0x67aa <__addsf3x+0x18>
    67a4:	71 f4       	brne	.+28     	; 0x67c2 <__addsf3x+0x30>
    67a6:	9e f5       	brtc	.+102    	; 0x680e <__addsf3x+0x7c>
    67a8:	8f c1       	rjmp	.+798    	; 0x6ac8 <__fp_zero>
    67aa:	0e f4       	brtc	.+2      	; 0x67ae <__addsf3x+0x1c>
    67ac:	e0 95       	com	r30
    67ae:	0b 2e       	mov	r0, r27
    67b0:	ba 2f       	mov	r27, r26
    67b2:	a0 2d       	mov	r26, r0
    67b4:	0b 01       	movw	r0, r22
    67b6:	b9 01       	movw	r22, r18
    67b8:	90 01       	movw	r18, r0
    67ba:	0c 01       	movw	r0, r24
    67bc:	ca 01       	movw	r24, r20
    67be:	a0 01       	movw	r20, r0
    67c0:	11 24       	eor	r1, r1
    67c2:	ff 27       	eor	r31, r31
    67c4:	59 1b       	sub	r21, r25
    67c6:	99 f0       	breq	.+38     	; 0x67ee <__addsf3x+0x5c>
    67c8:	59 3f       	cpi	r21, 0xF9	; 249
    67ca:	50 f4       	brcc	.+20     	; 0x67e0 <__addsf3x+0x4e>
    67cc:	50 3e       	cpi	r21, 0xE0	; 224
    67ce:	68 f1       	brcs	.+90     	; 0x682a <__addsf3x+0x98>
    67d0:	1a 16       	cp	r1, r26
    67d2:	f0 40       	sbci	r31, 0x00	; 0
    67d4:	a2 2f       	mov	r26, r18
    67d6:	23 2f       	mov	r18, r19
    67d8:	34 2f       	mov	r19, r20
    67da:	44 27       	eor	r20, r20
    67dc:	58 5f       	subi	r21, 0xF8	; 248
    67de:	f3 cf       	rjmp	.-26     	; 0x67c6 <__addsf3x+0x34>
    67e0:	46 95       	lsr	r20
    67e2:	37 95       	ror	r19
    67e4:	27 95       	ror	r18
    67e6:	a7 95       	ror	r26
    67e8:	f0 40       	sbci	r31, 0x00	; 0
    67ea:	53 95       	inc	r21
    67ec:	c9 f7       	brne	.-14     	; 0x67e0 <__addsf3x+0x4e>
    67ee:	7e f4       	brtc	.+30     	; 0x680e <__addsf3x+0x7c>
    67f0:	1f 16       	cp	r1, r31
    67f2:	ba 0b       	sbc	r27, r26
    67f4:	62 0b       	sbc	r22, r18
    67f6:	73 0b       	sbc	r23, r19
    67f8:	84 0b       	sbc	r24, r20
    67fa:	ba f0       	brmi	.+46     	; 0x682a <__addsf3x+0x98>
    67fc:	91 50       	subi	r25, 0x01	; 1
    67fe:	a1 f0       	breq	.+40     	; 0x6828 <__addsf3x+0x96>
    6800:	ff 0f       	add	r31, r31
    6802:	bb 1f       	adc	r27, r27
    6804:	66 1f       	adc	r22, r22
    6806:	77 1f       	adc	r23, r23
    6808:	88 1f       	adc	r24, r24
    680a:	c2 f7       	brpl	.-16     	; 0x67fc <__addsf3x+0x6a>
    680c:	0e c0       	rjmp	.+28     	; 0x682a <__addsf3x+0x98>
    680e:	ba 0f       	add	r27, r26
    6810:	62 1f       	adc	r22, r18
    6812:	73 1f       	adc	r23, r19
    6814:	84 1f       	adc	r24, r20
    6816:	48 f4       	brcc	.+18     	; 0x682a <__addsf3x+0x98>
    6818:	87 95       	ror	r24
    681a:	77 95       	ror	r23
    681c:	67 95       	ror	r22
    681e:	b7 95       	ror	r27
    6820:	f7 95       	ror	r31
    6822:	9e 3f       	cpi	r25, 0xFE	; 254
    6824:	08 f0       	brcs	.+2      	; 0x6828 <__addsf3x+0x96>
    6826:	b3 cf       	rjmp	.-154    	; 0x678e <__addsf3+0x1e>
    6828:	93 95       	inc	r25
    682a:	88 0f       	add	r24, r24
    682c:	08 f0       	brcs	.+2      	; 0x6830 <__addsf3x+0x9e>
    682e:	99 27       	eor	r25, r25
    6830:	ee 0f       	add	r30, r30
    6832:	97 95       	ror	r25
    6834:	87 95       	ror	r24
    6836:	08 95       	ret

00006838 <__cmpsf2>:
    6838:	d9 d0       	rcall	.+434    	; 0x69ec <__fp_cmp>
    683a:	08 f4       	brcc	.+2      	; 0x683e <__cmpsf2+0x6>
    683c:	81 e0       	ldi	r24, 0x01	; 1
    683e:	08 95       	ret

00006840 <__divsf3>:
    6840:	0c d0       	rcall	.+24     	; 0x685a <__divsf3x>
    6842:	0f c1       	rjmp	.+542    	; 0x6a62 <__fp_round>
    6844:	07 d1       	rcall	.+526    	; 0x6a54 <__fp_pscB>
    6846:	40 f0       	brcs	.+16     	; 0x6858 <__divsf3+0x18>
    6848:	fe d0       	rcall	.+508    	; 0x6a46 <__fp_pscA>
    684a:	30 f0       	brcs	.+12     	; 0x6858 <__divsf3+0x18>
    684c:	21 f4       	brne	.+8      	; 0x6856 <__divsf3+0x16>
    684e:	5f 3f       	cpi	r21, 0xFF	; 255
    6850:	19 f0       	breq	.+6      	; 0x6858 <__divsf3+0x18>
    6852:	f0 c0       	rjmp	.+480    	; 0x6a34 <__fp_inf>
    6854:	51 11       	cpse	r21, r1
    6856:	39 c1       	rjmp	.+626    	; 0x6aca <__fp_szero>
    6858:	f3 c0       	rjmp	.+486    	; 0x6a40 <__fp_nan>

0000685a <__divsf3x>:
    685a:	14 d1       	rcall	.+552    	; 0x6a84 <__fp_split3>
    685c:	98 f3       	brcs	.-26     	; 0x6844 <__divsf3+0x4>

0000685e <__divsf3_pse>:
    685e:	99 23       	and	r25, r25
    6860:	c9 f3       	breq	.-14     	; 0x6854 <__divsf3+0x14>
    6862:	55 23       	and	r21, r21
    6864:	b1 f3       	breq	.-20     	; 0x6852 <__divsf3+0x12>
    6866:	95 1b       	sub	r25, r21
    6868:	55 0b       	sbc	r21, r21
    686a:	bb 27       	eor	r27, r27
    686c:	aa 27       	eor	r26, r26
    686e:	62 17       	cp	r22, r18
    6870:	73 07       	cpc	r23, r19
    6872:	84 07       	cpc	r24, r20
    6874:	38 f0       	brcs	.+14     	; 0x6884 <__divsf3_pse+0x26>
    6876:	9f 5f       	subi	r25, 0xFF	; 255
    6878:	5f 4f       	sbci	r21, 0xFF	; 255
    687a:	22 0f       	add	r18, r18
    687c:	33 1f       	adc	r19, r19
    687e:	44 1f       	adc	r20, r20
    6880:	aa 1f       	adc	r26, r26
    6882:	a9 f3       	breq	.-22     	; 0x686e <__divsf3_pse+0x10>
    6884:	33 d0       	rcall	.+102    	; 0x68ec <__divsf3_pse+0x8e>
    6886:	0e 2e       	mov	r0, r30
    6888:	3a f0       	brmi	.+14     	; 0x6898 <__divsf3_pse+0x3a>
    688a:	e0 e8       	ldi	r30, 0x80	; 128
    688c:	30 d0       	rcall	.+96     	; 0x68ee <__divsf3_pse+0x90>
    688e:	91 50       	subi	r25, 0x01	; 1
    6890:	50 40       	sbci	r21, 0x00	; 0
    6892:	e6 95       	lsr	r30
    6894:	00 1c       	adc	r0, r0
    6896:	ca f7       	brpl	.-14     	; 0x688a <__divsf3_pse+0x2c>
    6898:	29 d0       	rcall	.+82     	; 0x68ec <__divsf3_pse+0x8e>
    689a:	fe 2f       	mov	r31, r30
    689c:	27 d0       	rcall	.+78     	; 0x68ec <__divsf3_pse+0x8e>
    689e:	66 0f       	add	r22, r22
    68a0:	77 1f       	adc	r23, r23
    68a2:	88 1f       	adc	r24, r24
    68a4:	bb 1f       	adc	r27, r27
    68a6:	26 17       	cp	r18, r22
    68a8:	37 07       	cpc	r19, r23
    68aa:	48 07       	cpc	r20, r24
    68ac:	ab 07       	cpc	r26, r27
    68ae:	b0 e8       	ldi	r27, 0x80	; 128
    68b0:	09 f0       	breq	.+2      	; 0x68b4 <__divsf3_pse+0x56>
    68b2:	bb 0b       	sbc	r27, r27
    68b4:	80 2d       	mov	r24, r0
    68b6:	bf 01       	movw	r22, r30
    68b8:	ff 27       	eor	r31, r31
    68ba:	93 58       	subi	r25, 0x83	; 131
    68bc:	5f 4f       	sbci	r21, 0xFF	; 255
    68be:	2a f0       	brmi	.+10     	; 0x68ca <__divsf3_pse+0x6c>
    68c0:	9e 3f       	cpi	r25, 0xFE	; 254
    68c2:	51 05       	cpc	r21, r1
    68c4:	68 f0       	brcs	.+26     	; 0x68e0 <__divsf3_pse+0x82>
    68c6:	b6 c0       	rjmp	.+364    	; 0x6a34 <__fp_inf>
    68c8:	00 c1       	rjmp	.+512    	; 0x6aca <__fp_szero>
    68ca:	5f 3f       	cpi	r21, 0xFF	; 255
    68cc:	ec f3       	brlt	.-6      	; 0x68c8 <__divsf3_pse+0x6a>
    68ce:	98 3e       	cpi	r25, 0xE8	; 232
    68d0:	dc f3       	brlt	.-10     	; 0x68c8 <__divsf3_pse+0x6a>
    68d2:	86 95       	lsr	r24
    68d4:	77 95       	ror	r23
    68d6:	67 95       	ror	r22
    68d8:	b7 95       	ror	r27
    68da:	f7 95       	ror	r31
    68dc:	9f 5f       	subi	r25, 0xFF	; 255
    68de:	c9 f7       	brne	.-14     	; 0x68d2 <__divsf3_pse+0x74>
    68e0:	88 0f       	add	r24, r24
    68e2:	91 1d       	adc	r25, r1
    68e4:	96 95       	lsr	r25
    68e6:	87 95       	ror	r24
    68e8:	97 f9       	bld	r25, 7
    68ea:	08 95       	ret
    68ec:	e1 e0       	ldi	r30, 0x01	; 1
    68ee:	66 0f       	add	r22, r22
    68f0:	77 1f       	adc	r23, r23
    68f2:	88 1f       	adc	r24, r24
    68f4:	bb 1f       	adc	r27, r27
    68f6:	62 17       	cp	r22, r18
    68f8:	73 07       	cpc	r23, r19
    68fa:	84 07       	cpc	r24, r20
    68fc:	ba 07       	cpc	r27, r26
    68fe:	20 f0       	brcs	.+8      	; 0x6908 <__divsf3_pse+0xaa>
    6900:	62 1b       	sub	r22, r18
    6902:	73 0b       	sbc	r23, r19
    6904:	84 0b       	sbc	r24, r20
    6906:	ba 0b       	sbc	r27, r26
    6908:	ee 1f       	adc	r30, r30
    690a:	88 f7       	brcc	.-30     	; 0x68ee <__divsf3_pse+0x90>
    690c:	e0 95       	com	r30
    690e:	08 95       	ret

00006910 <__fixsfsi>:
    6910:	04 d0       	rcall	.+8      	; 0x691a <__fixunssfsi>
    6912:	68 94       	set
    6914:	b1 11       	cpse	r27, r1
    6916:	d9 c0       	rjmp	.+434    	; 0x6aca <__fp_szero>
    6918:	08 95       	ret

0000691a <__fixunssfsi>:
    691a:	bc d0       	rcall	.+376    	; 0x6a94 <__fp_splitA>
    691c:	88 f0       	brcs	.+34     	; 0x6940 <__fixunssfsi+0x26>
    691e:	9f 57       	subi	r25, 0x7F	; 127
    6920:	90 f0       	brcs	.+36     	; 0x6946 <__fixunssfsi+0x2c>
    6922:	b9 2f       	mov	r27, r25
    6924:	99 27       	eor	r25, r25
    6926:	b7 51       	subi	r27, 0x17	; 23
    6928:	a0 f0       	brcs	.+40     	; 0x6952 <__fixunssfsi+0x38>
    692a:	d1 f0       	breq	.+52     	; 0x6960 <__fixunssfsi+0x46>
    692c:	66 0f       	add	r22, r22
    692e:	77 1f       	adc	r23, r23
    6930:	88 1f       	adc	r24, r24
    6932:	99 1f       	adc	r25, r25
    6934:	1a f0       	brmi	.+6      	; 0x693c <__fixunssfsi+0x22>
    6936:	ba 95       	dec	r27
    6938:	c9 f7       	brne	.-14     	; 0x692c <__fixunssfsi+0x12>
    693a:	12 c0       	rjmp	.+36     	; 0x6960 <__fixunssfsi+0x46>
    693c:	b1 30       	cpi	r27, 0x01	; 1
    693e:	81 f0       	breq	.+32     	; 0x6960 <__fixunssfsi+0x46>
    6940:	c3 d0       	rcall	.+390    	; 0x6ac8 <__fp_zero>
    6942:	b1 e0       	ldi	r27, 0x01	; 1
    6944:	08 95       	ret
    6946:	c0 c0       	rjmp	.+384    	; 0x6ac8 <__fp_zero>
    6948:	67 2f       	mov	r22, r23
    694a:	78 2f       	mov	r23, r24
    694c:	88 27       	eor	r24, r24
    694e:	b8 5f       	subi	r27, 0xF8	; 248
    6950:	39 f0       	breq	.+14     	; 0x6960 <__fixunssfsi+0x46>
    6952:	b9 3f       	cpi	r27, 0xF9	; 249
    6954:	cc f3       	brlt	.-14     	; 0x6948 <__fixunssfsi+0x2e>
    6956:	86 95       	lsr	r24
    6958:	77 95       	ror	r23
    695a:	67 95       	ror	r22
    695c:	b3 95       	inc	r27
    695e:	d9 f7       	brne	.-10     	; 0x6956 <__fixunssfsi+0x3c>
    6960:	3e f4       	brtc	.+14     	; 0x6970 <__fixunssfsi+0x56>
    6962:	90 95       	com	r25
    6964:	80 95       	com	r24
    6966:	70 95       	com	r23
    6968:	61 95       	neg	r22
    696a:	7f 4f       	sbci	r23, 0xFF	; 255
    696c:	8f 4f       	sbci	r24, 0xFF	; 255
    696e:	9f 4f       	sbci	r25, 0xFF	; 255
    6970:	08 95       	ret

00006972 <__floatunsisf>:
    6972:	e8 94       	clt
    6974:	09 c0       	rjmp	.+18     	; 0x6988 <__floatsisf+0x12>

00006976 <__floatsisf>:
    6976:	97 fb       	bst	r25, 7
    6978:	3e f4       	brtc	.+14     	; 0x6988 <__floatsisf+0x12>
    697a:	90 95       	com	r25
    697c:	80 95       	com	r24
    697e:	70 95       	com	r23
    6980:	61 95       	neg	r22
    6982:	7f 4f       	sbci	r23, 0xFF	; 255
    6984:	8f 4f       	sbci	r24, 0xFF	; 255
    6986:	9f 4f       	sbci	r25, 0xFF	; 255
    6988:	99 23       	and	r25, r25
    698a:	a9 f0       	breq	.+42     	; 0x69b6 <__floatsisf+0x40>
    698c:	f9 2f       	mov	r31, r25
    698e:	96 e9       	ldi	r25, 0x96	; 150
    6990:	bb 27       	eor	r27, r27
    6992:	93 95       	inc	r25
    6994:	f6 95       	lsr	r31
    6996:	87 95       	ror	r24
    6998:	77 95       	ror	r23
    699a:	67 95       	ror	r22
    699c:	b7 95       	ror	r27
    699e:	f1 11       	cpse	r31, r1
    69a0:	f8 cf       	rjmp	.-16     	; 0x6992 <__floatsisf+0x1c>
    69a2:	fa f4       	brpl	.+62     	; 0x69e2 <__floatsisf+0x6c>
    69a4:	bb 0f       	add	r27, r27
    69a6:	11 f4       	brne	.+4      	; 0x69ac <__floatsisf+0x36>
    69a8:	60 ff       	sbrs	r22, 0
    69aa:	1b c0       	rjmp	.+54     	; 0x69e2 <__floatsisf+0x6c>
    69ac:	6f 5f       	subi	r22, 0xFF	; 255
    69ae:	7f 4f       	sbci	r23, 0xFF	; 255
    69b0:	8f 4f       	sbci	r24, 0xFF	; 255
    69b2:	9f 4f       	sbci	r25, 0xFF	; 255
    69b4:	16 c0       	rjmp	.+44     	; 0x69e2 <__floatsisf+0x6c>
    69b6:	88 23       	and	r24, r24
    69b8:	11 f0       	breq	.+4      	; 0x69be <__floatsisf+0x48>
    69ba:	96 e9       	ldi	r25, 0x96	; 150
    69bc:	11 c0       	rjmp	.+34     	; 0x69e0 <__floatsisf+0x6a>
    69be:	77 23       	and	r23, r23
    69c0:	21 f0       	breq	.+8      	; 0x69ca <__floatsisf+0x54>
    69c2:	9e e8       	ldi	r25, 0x8E	; 142
    69c4:	87 2f       	mov	r24, r23
    69c6:	76 2f       	mov	r23, r22
    69c8:	05 c0       	rjmp	.+10     	; 0x69d4 <__floatsisf+0x5e>
    69ca:	66 23       	and	r22, r22
    69cc:	71 f0       	breq	.+28     	; 0x69ea <__floatsisf+0x74>
    69ce:	96 e8       	ldi	r25, 0x86	; 134
    69d0:	86 2f       	mov	r24, r22
    69d2:	70 e0       	ldi	r23, 0x00	; 0
    69d4:	60 e0       	ldi	r22, 0x00	; 0
    69d6:	2a f0       	brmi	.+10     	; 0x69e2 <__floatsisf+0x6c>
    69d8:	9a 95       	dec	r25
    69da:	66 0f       	add	r22, r22
    69dc:	77 1f       	adc	r23, r23
    69de:	88 1f       	adc	r24, r24
    69e0:	da f7       	brpl	.-10     	; 0x69d8 <__floatsisf+0x62>
    69e2:	88 0f       	add	r24, r24
    69e4:	96 95       	lsr	r25
    69e6:	87 95       	ror	r24
    69e8:	97 f9       	bld	r25, 7
    69ea:	08 95       	ret

000069ec <__fp_cmp>:
    69ec:	99 0f       	add	r25, r25
    69ee:	00 08       	sbc	r0, r0
    69f0:	55 0f       	add	r21, r21
    69f2:	aa 0b       	sbc	r26, r26
    69f4:	e0 e8       	ldi	r30, 0x80	; 128
    69f6:	fe ef       	ldi	r31, 0xFE	; 254
    69f8:	16 16       	cp	r1, r22
    69fa:	17 06       	cpc	r1, r23
    69fc:	e8 07       	cpc	r30, r24
    69fe:	f9 07       	cpc	r31, r25
    6a00:	c0 f0       	brcs	.+48     	; 0x6a32 <__fp_cmp+0x46>
    6a02:	12 16       	cp	r1, r18
    6a04:	13 06       	cpc	r1, r19
    6a06:	e4 07       	cpc	r30, r20
    6a08:	f5 07       	cpc	r31, r21
    6a0a:	98 f0       	brcs	.+38     	; 0x6a32 <__fp_cmp+0x46>
    6a0c:	62 1b       	sub	r22, r18
    6a0e:	73 0b       	sbc	r23, r19
    6a10:	84 0b       	sbc	r24, r20
    6a12:	95 0b       	sbc	r25, r21
    6a14:	39 f4       	brne	.+14     	; 0x6a24 <__fp_cmp+0x38>
    6a16:	0a 26       	eor	r0, r26
    6a18:	61 f0       	breq	.+24     	; 0x6a32 <__fp_cmp+0x46>
    6a1a:	23 2b       	or	r18, r19
    6a1c:	24 2b       	or	r18, r20
    6a1e:	25 2b       	or	r18, r21
    6a20:	21 f4       	brne	.+8      	; 0x6a2a <__fp_cmp+0x3e>
    6a22:	08 95       	ret
    6a24:	0a 26       	eor	r0, r26
    6a26:	09 f4       	brne	.+2      	; 0x6a2a <__fp_cmp+0x3e>
    6a28:	a1 40       	sbci	r26, 0x01	; 1
    6a2a:	a6 95       	lsr	r26
    6a2c:	8f ef       	ldi	r24, 0xFF	; 255
    6a2e:	81 1d       	adc	r24, r1
    6a30:	81 1d       	adc	r24, r1
    6a32:	08 95       	ret

00006a34 <__fp_inf>:
    6a34:	97 f9       	bld	r25, 7
    6a36:	9f 67       	ori	r25, 0x7F	; 127
    6a38:	80 e8       	ldi	r24, 0x80	; 128
    6a3a:	70 e0       	ldi	r23, 0x00	; 0
    6a3c:	60 e0       	ldi	r22, 0x00	; 0
    6a3e:	08 95       	ret

00006a40 <__fp_nan>:
    6a40:	9f ef       	ldi	r25, 0xFF	; 255
    6a42:	80 ec       	ldi	r24, 0xC0	; 192
    6a44:	08 95       	ret

00006a46 <__fp_pscA>:
    6a46:	00 24       	eor	r0, r0
    6a48:	0a 94       	dec	r0
    6a4a:	16 16       	cp	r1, r22
    6a4c:	17 06       	cpc	r1, r23
    6a4e:	18 06       	cpc	r1, r24
    6a50:	09 06       	cpc	r0, r25
    6a52:	08 95       	ret

00006a54 <__fp_pscB>:
    6a54:	00 24       	eor	r0, r0
    6a56:	0a 94       	dec	r0
    6a58:	12 16       	cp	r1, r18
    6a5a:	13 06       	cpc	r1, r19
    6a5c:	14 06       	cpc	r1, r20
    6a5e:	05 06       	cpc	r0, r21
    6a60:	08 95       	ret

00006a62 <__fp_round>:
    6a62:	09 2e       	mov	r0, r25
    6a64:	03 94       	inc	r0
    6a66:	00 0c       	add	r0, r0
    6a68:	11 f4       	brne	.+4      	; 0x6a6e <__fp_round+0xc>
    6a6a:	88 23       	and	r24, r24
    6a6c:	52 f0       	brmi	.+20     	; 0x6a82 <__fp_round+0x20>
    6a6e:	bb 0f       	add	r27, r27
    6a70:	40 f4       	brcc	.+16     	; 0x6a82 <__fp_round+0x20>
    6a72:	bf 2b       	or	r27, r31
    6a74:	11 f4       	brne	.+4      	; 0x6a7a <__fp_round+0x18>
    6a76:	60 ff       	sbrs	r22, 0
    6a78:	04 c0       	rjmp	.+8      	; 0x6a82 <__fp_round+0x20>
    6a7a:	6f 5f       	subi	r22, 0xFF	; 255
    6a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    6a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    6a80:	9f 4f       	sbci	r25, 0xFF	; 255
    6a82:	08 95       	ret

00006a84 <__fp_split3>:
    6a84:	57 fd       	sbrc	r21, 7
    6a86:	90 58       	subi	r25, 0x80	; 128
    6a88:	44 0f       	add	r20, r20
    6a8a:	55 1f       	adc	r21, r21
    6a8c:	59 f0       	breq	.+22     	; 0x6aa4 <__fp_splitA+0x10>
    6a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    6a90:	71 f0       	breq	.+28     	; 0x6aae <__fp_splitA+0x1a>
    6a92:	47 95       	ror	r20

00006a94 <__fp_splitA>:
    6a94:	88 0f       	add	r24, r24
    6a96:	97 fb       	bst	r25, 7
    6a98:	99 1f       	adc	r25, r25
    6a9a:	61 f0       	breq	.+24     	; 0x6ab4 <__fp_splitA+0x20>
    6a9c:	9f 3f       	cpi	r25, 0xFF	; 255
    6a9e:	79 f0       	breq	.+30     	; 0x6abe <__fp_splitA+0x2a>
    6aa0:	87 95       	ror	r24
    6aa2:	08 95       	ret
    6aa4:	12 16       	cp	r1, r18
    6aa6:	13 06       	cpc	r1, r19
    6aa8:	14 06       	cpc	r1, r20
    6aaa:	55 1f       	adc	r21, r21
    6aac:	f2 cf       	rjmp	.-28     	; 0x6a92 <__fp_split3+0xe>
    6aae:	46 95       	lsr	r20
    6ab0:	f1 df       	rcall	.-30     	; 0x6a94 <__fp_splitA>
    6ab2:	08 c0       	rjmp	.+16     	; 0x6ac4 <__fp_splitA+0x30>
    6ab4:	16 16       	cp	r1, r22
    6ab6:	17 06       	cpc	r1, r23
    6ab8:	18 06       	cpc	r1, r24
    6aba:	99 1f       	adc	r25, r25
    6abc:	f1 cf       	rjmp	.-30     	; 0x6aa0 <__fp_splitA+0xc>
    6abe:	86 95       	lsr	r24
    6ac0:	71 05       	cpc	r23, r1
    6ac2:	61 05       	cpc	r22, r1
    6ac4:	08 94       	sec
    6ac6:	08 95       	ret

00006ac8 <__fp_zero>:
    6ac8:	e8 94       	clt

00006aca <__fp_szero>:
    6aca:	bb 27       	eor	r27, r27
    6acc:	66 27       	eor	r22, r22
    6ace:	77 27       	eor	r23, r23
    6ad0:	cb 01       	movw	r24, r22
    6ad2:	97 f9       	bld	r25, 7
    6ad4:	08 95       	ret

00006ad6 <__gesf2>:
    6ad6:	8a df       	rcall	.-236    	; 0x69ec <__fp_cmp>
    6ad8:	08 f4       	brcc	.+2      	; 0x6adc <__gesf2+0x6>
    6ada:	8f ef       	ldi	r24, 0xFF	; 255
    6adc:	08 95       	ret

00006ade <__mulsf3>:
    6ade:	0b d0       	rcall	.+22     	; 0x6af6 <__mulsf3x>
    6ae0:	c0 cf       	rjmp	.-128    	; 0x6a62 <__fp_round>
    6ae2:	b1 df       	rcall	.-158    	; 0x6a46 <__fp_pscA>
    6ae4:	28 f0       	brcs	.+10     	; 0x6af0 <__mulsf3+0x12>
    6ae6:	b6 df       	rcall	.-148    	; 0x6a54 <__fp_pscB>
    6ae8:	18 f0       	brcs	.+6      	; 0x6af0 <__mulsf3+0x12>
    6aea:	95 23       	and	r25, r21
    6aec:	09 f0       	breq	.+2      	; 0x6af0 <__mulsf3+0x12>
    6aee:	a2 cf       	rjmp	.-188    	; 0x6a34 <__fp_inf>
    6af0:	a7 cf       	rjmp	.-178    	; 0x6a40 <__fp_nan>
    6af2:	11 24       	eor	r1, r1
    6af4:	ea cf       	rjmp	.-44     	; 0x6aca <__fp_szero>

00006af6 <__mulsf3x>:
    6af6:	c6 df       	rcall	.-116    	; 0x6a84 <__fp_split3>
    6af8:	a0 f3       	brcs	.-24     	; 0x6ae2 <__mulsf3+0x4>

00006afa <__mulsf3_pse>:
    6afa:	95 9f       	mul	r25, r21
    6afc:	d1 f3       	breq	.-12     	; 0x6af2 <__mulsf3+0x14>
    6afe:	95 0f       	add	r25, r21
    6b00:	50 e0       	ldi	r21, 0x00	; 0
    6b02:	55 1f       	adc	r21, r21
    6b04:	62 9f       	mul	r22, r18
    6b06:	f0 01       	movw	r30, r0
    6b08:	72 9f       	mul	r23, r18
    6b0a:	bb 27       	eor	r27, r27
    6b0c:	f0 0d       	add	r31, r0
    6b0e:	b1 1d       	adc	r27, r1
    6b10:	63 9f       	mul	r22, r19
    6b12:	aa 27       	eor	r26, r26
    6b14:	f0 0d       	add	r31, r0
    6b16:	b1 1d       	adc	r27, r1
    6b18:	aa 1f       	adc	r26, r26
    6b1a:	64 9f       	mul	r22, r20
    6b1c:	66 27       	eor	r22, r22
    6b1e:	b0 0d       	add	r27, r0
    6b20:	a1 1d       	adc	r26, r1
    6b22:	66 1f       	adc	r22, r22
    6b24:	82 9f       	mul	r24, r18
    6b26:	22 27       	eor	r18, r18
    6b28:	b0 0d       	add	r27, r0
    6b2a:	a1 1d       	adc	r26, r1
    6b2c:	62 1f       	adc	r22, r18
    6b2e:	73 9f       	mul	r23, r19
    6b30:	b0 0d       	add	r27, r0
    6b32:	a1 1d       	adc	r26, r1
    6b34:	62 1f       	adc	r22, r18
    6b36:	83 9f       	mul	r24, r19
    6b38:	a0 0d       	add	r26, r0
    6b3a:	61 1d       	adc	r22, r1
    6b3c:	22 1f       	adc	r18, r18
    6b3e:	74 9f       	mul	r23, r20
    6b40:	33 27       	eor	r19, r19
    6b42:	a0 0d       	add	r26, r0
    6b44:	61 1d       	adc	r22, r1
    6b46:	23 1f       	adc	r18, r19
    6b48:	84 9f       	mul	r24, r20
    6b4a:	60 0d       	add	r22, r0
    6b4c:	21 1d       	adc	r18, r1
    6b4e:	82 2f       	mov	r24, r18
    6b50:	76 2f       	mov	r23, r22
    6b52:	6a 2f       	mov	r22, r26
    6b54:	11 24       	eor	r1, r1
    6b56:	9f 57       	subi	r25, 0x7F	; 127
    6b58:	50 40       	sbci	r21, 0x00	; 0
    6b5a:	8a f0       	brmi	.+34     	; 0x6b7e <__mulsf3_pse+0x84>
    6b5c:	e1 f0       	breq	.+56     	; 0x6b96 <__mulsf3_pse+0x9c>
    6b5e:	88 23       	and	r24, r24
    6b60:	4a f0       	brmi	.+18     	; 0x6b74 <__mulsf3_pse+0x7a>
    6b62:	ee 0f       	add	r30, r30
    6b64:	ff 1f       	adc	r31, r31
    6b66:	bb 1f       	adc	r27, r27
    6b68:	66 1f       	adc	r22, r22
    6b6a:	77 1f       	adc	r23, r23
    6b6c:	88 1f       	adc	r24, r24
    6b6e:	91 50       	subi	r25, 0x01	; 1
    6b70:	50 40       	sbci	r21, 0x00	; 0
    6b72:	a9 f7       	brne	.-22     	; 0x6b5e <__mulsf3_pse+0x64>
    6b74:	9e 3f       	cpi	r25, 0xFE	; 254
    6b76:	51 05       	cpc	r21, r1
    6b78:	70 f0       	brcs	.+28     	; 0x6b96 <__mulsf3_pse+0x9c>
    6b7a:	5c cf       	rjmp	.-328    	; 0x6a34 <__fp_inf>
    6b7c:	a6 cf       	rjmp	.-180    	; 0x6aca <__fp_szero>
    6b7e:	5f 3f       	cpi	r21, 0xFF	; 255
    6b80:	ec f3       	brlt	.-6      	; 0x6b7c <__mulsf3_pse+0x82>
    6b82:	98 3e       	cpi	r25, 0xE8	; 232
    6b84:	dc f3       	brlt	.-10     	; 0x6b7c <__mulsf3_pse+0x82>
    6b86:	86 95       	lsr	r24
    6b88:	77 95       	ror	r23
    6b8a:	67 95       	ror	r22
    6b8c:	b7 95       	ror	r27
    6b8e:	f7 95       	ror	r31
    6b90:	e7 95       	ror	r30
    6b92:	9f 5f       	subi	r25, 0xFF	; 255
    6b94:	c1 f7       	brne	.-16     	; 0x6b86 <__mulsf3_pse+0x8c>
    6b96:	fe 2b       	or	r31, r30
    6b98:	88 0f       	add	r24, r24
    6b9a:	91 1d       	adc	r25, r1
    6b9c:	96 95       	lsr	r25
    6b9e:	87 95       	ror	r24
    6ba0:	97 f9       	bld	r25, 7
    6ba2:	08 95       	ret

00006ba4 <calloc>:
    6ba4:	0f 93       	push	r16
    6ba6:	1f 93       	push	r17
    6ba8:	cf 93       	push	r28
    6baa:	df 93       	push	r29
    6bac:	86 9f       	mul	r24, r22
    6bae:	80 01       	movw	r16, r0
    6bb0:	87 9f       	mul	r24, r23
    6bb2:	10 0d       	add	r17, r0
    6bb4:	96 9f       	mul	r25, r22
    6bb6:	10 0d       	add	r17, r0
    6bb8:	11 24       	eor	r1, r1
    6bba:	c8 01       	movw	r24, r16
    6bbc:	0d d0       	rcall	.+26     	; 0x6bd8 <malloc>
    6bbe:	ec 01       	movw	r28, r24
    6bc0:	00 97       	sbiw	r24, 0x00	; 0
    6bc2:	21 f0       	breq	.+8      	; 0x6bcc <calloc+0x28>
    6bc4:	a8 01       	movw	r20, r16
    6bc6:	60 e0       	ldi	r22, 0x00	; 0
    6bc8:	70 e0       	ldi	r23, 0x00	; 0
    6bca:	34 d1       	rcall	.+616    	; 0x6e34 <memset>
    6bcc:	ce 01       	movw	r24, r28
    6bce:	df 91       	pop	r29
    6bd0:	cf 91       	pop	r28
    6bd2:	1f 91       	pop	r17
    6bd4:	0f 91       	pop	r16
    6bd6:	08 95       	ret

00006bd8 <malloc>:
    6bd8:	0f 93       	push	r16
    6bda:	1f 93       	push	r17
    6bdc:	cf 93       	push	r28
    6bde:	df 93       	push	r29
    6be0:	82 30       	cpi	r24, 0x02	; 2
    6be2:	91 05       	cpc	r25, r1
    6be4:	10 f4       	brcc	.+4      	; 0x6bea <malloc+0x12>
    6be6:	82 e0       	ldi	r24, 0x02	; 2
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	e0 91 2e 0b 	lds	r30, 0x0B2E	; 0x800b2e <__flp>
    6bee:	f0 91 2f 0b 	lds	r31, 0x0B2F	; 0x800b2f <__flp+0x1>
    6bf2:	20 e0       	ldi	r18, 0x00	; 0
    6bf4:	30 e0       	ldi	r19, 0x00	; 0
    6bf6:	a0 e0       	ldi	r26, 0x00	; 0
    6bf8:	b0 e0       	ldi	r27, 0x00	; 0
    6bfa:	30 97       	sbiw	r30, 0x00	; 0
    6bfc:	19 f1       	breq	.+70     	; 0x6c44 <malloc+0x6c>
    6bfe:	40 81       	ld	r20, Z
    6c00:	51 81       	ldd	r21, Z+1	; 0x01
    6c02:	02 81       	ldd	r16, Z+2	; 0x02
    6c04:	13 81       	ldd	r17, Z+3	; 0x03
    6c06:	48 17       	cp	r20, r24
    6c08:	59 07       	cpc	r21, r25
    6c0a:	c8 f0       	brcs	.+50     	; 0x6c3e <malloc+0x66>
    6c0c:	84 17       	cp	r24, r20
    6c0e:	95 07       	cpc	r25, r21
    6c10:	69 f4       	brne	.+26     	; 0x6c2c <malloc+0x54>
    6c12:	10 97       	sbiw	r26, 0x00	; 0
    6c14:	31 f0       	breq	.+12     	; 0x6c22 <malloc+0x4a>
    6c16:	12 96       	adiw	r26, 0x02	; 2
    6c18:	0c 93       	st	X, r16
    6c1a:	12 97       	sbiw	r26, 0x02	; 2
    6c1c:	13 96       	adiw	r26, 0x03	; 3
    6c1e:	1c 93       	st	X, r17
    6c20:	27 c0       	rjmp	.+78     	; 0x6c70 <malloc+0x98>
    6c22:	00 93 2e 0b 	sts	0x0B2E, r16	; 0x800b2e <__flp>
    6c26:	10 93 2f 0b 	sts	0x0B2F, r17	; 0x800b2f <__flp+0x1>
    6c2a:	22 c0       	rjmp	.+68     	; 0x6c70 <malloc+0x98>
    6c2c:	21 15       	cp	r18, r1
    6c2e:	31 05       	cpc	r19, r1
    6c30:	19 f0       	breq	.+6      	; 0x6c38 <malloc+0x60>
    6c32:	42 17       	cp	r20, r18
    6c34:	53 07       	cpc	r21, r19
    6c36:	18 f4       	brcc	.+6      	; 0x6c3e <malloc+0x66>
    6c38:	9a 01       	movw	r18, r20
    6c3a:	bd 01       	movw	r22, r26
    6c3c:	ef 01       	movw	r28, r30
    6c3e:	df 01       	movw	r26, r30
    6c40:	f8 01       	movw	r30, r16
    6c42:	db cf       	rjmp	.-74     	; 0x6bfa <malloc+0x22>
    6c44:	21 15       	cp	r18, r1
    6c46:	31 05       	cpc	r19, r1
    6c48:	f9 f0       	breq	.+62     	; 0x6c88 <malloc+0xb0>
    6c4a:	28 1b       	sub	r18, r24
    6c4c:	39 0b       	sbc	r19, r25
    6c4e:	24 30       	cpi	r18, 0x04	; 4
    6c50:	31 05       	cpc	r19, r1
    6c52:	80 f4       	brcc	.+32     	; 0x6c74 <malloc+0x9c>
    6c54:	8a 81       	ldd	r24, Y+2	; 0x02
    6c56:	9b 81       	ldd	r25, Y+3	; 0x03
    6c58:	61 15       	cp	r22, r1
    6c5a:	71 05       	cpc	r23, r1
    6c5c:	21 f0       	breq	.+8      	; 0x6c66 <malloc+0x8e>
    6c5e:	fb 01       	movw	r30, r22
    6c60:	93 83       	std	Z+3, r25	; 0x03
    6c62:	82 83       	std	Z+2, r24	; 0x02
    6c64:	04 c0       	rjmp	.+8      	; 0x6c6e <malloc+0x96>
    6c66:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <__flp+0x1>
    6c6a:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <__flp>
    6c6e:	fe 01       	movw	r30, r28
    6c70:	32 96       	adiw	r30, 0x02	; 2
    6c72:	44 c0       	rjmp	.+136    	; 0x6cfc <malloc+0x124>
    6c74:	fe 01       	movw	r30, r28
    6c76:	e2 0f       	add	r30, r18
    6c78:	f3 1f       	adc	r31, r19
    6c7a:	81 93       	st	Z+, r24
    6c7c:	91 93       	st	Z+, r25
    6c7e:	22 50       	subi	r18, 0x02	; 2
    6c80:	31 09       	sbc	r19, r1
    6c82:	39 83       	std	Y+1, r19	; 0x01
    6c84:	28 83       	st	Y, r18
    6c86:	3a c0       	rjmp	.+116    	; 0x6cfc <malloc+0x124>
    6c88:	20 91 2c 0b 	lds	r18, 0x0B2C	; 0x800b2c <__brkval>
    6c8c:	30 91 2d 0b 	lds	r19, 0x0B2D	; 0x800b2d <__brkval+0x1>
    6c90:	23 2b       	or	r18, r19
    6c92:	41 f4       	brne	.+16     	; 0x6ca4 <malloc+0xcc>
    6c94:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6c98:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6c9c:	30 93 2d 0b 	sts	0x0B2D, r19	; 0x800b2d <__brkval+0x1>
    6ca0:	20 93 2c 0b 	sts	0x0B2C, r18	; 0x800b2c <__brkval>
    6ca4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6ca8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    6cac:	21 15       	cp	r18, r1
    6cae:	31 05       	cpc	r19, r1
    6cb0:	41 f4       	brne	.+16     	; 0x6cc2 <malloc+0xea>
    6cb2:	2d b7       	in	r18, 0x3d	; 61
    6cb4:	3e b7       	in	r19, 0x3e	; 62
    6cb6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6cba:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6cbe:	24 1b       	sub	r18, r20
    6cc0:	35 0b       	sbc	r19, r21
    6cc2:	e0 91 2c 0b 	lds	r30, 0x0B2C	; 0x800b2c <__brkval>
    6cc6:	f0 91 2d 0b 	lds	r31, 0x0B2D	; 0x800b2d <__brkval+0x1>
    6cca:	e2 17       	cp	r30, r18
    6ccc:	f3 07       	cpc	r31, r19
    6cce:	a0 f4       	brcc	.+40     	; 0x6cf8 <malloc+0x120>
    6cd0:	2e 1b       	sub	r18, r30
    6cd2:	3f 0b       	sbc	r19, r31
    6cd4:	28 17       	cp	r18, r24
    6cd6:	39 07       	cpc	r19, r25
    6cd8:	78 f0       	brcs	.+30     	; 0x6cf8 <malloc+0x120>
    6cda:	ac 01       	movw	r20, r24
    6cdc:	4e 5f       	subi	r20, 0xFE	; 254
    6cde:	5f 4f       	sbci	r21, 0xFF	; 255
    6ce0:	24 17       	cp	r18, r20
    6ce2:	35 07       	cpc	r19, r21
    6ce4:	48 f0       	brcs	.+18     	; 0x6cf8 <malloc+0x120>
    6ce6:	4e 0f       	add	r20, r30
    6ce8:	5f 1f       	adc	r21, r31
    6cea:	50 93 2d 0b 	sts	0x0B2D, r21	; 0x800b2d <__brkval+0x1>
    6cee:	40 93 2c 0b 	sts	0x0B2C, r20	; 0x800b2c <__brkval>
    6cf2:	81 93       	st	Z+, r24
    6cf4:	91 93       	st	Z+, r25
    6cf6:	02 c0       	rjmp	.+4      	; 0x6cfc <malloc+0x124>
    6cf8:	e0 e0       	ldi	r30, 0x00	; 0
    6cfa:	f0 e0       	ldi	r31, 0x00	; 0
    6cfc:	cf 01       	movw	r24, r30
    6cfe:	df 91       	pop	r29
    6d00:	cf 91       	pop	r28
    6d02:	1f 91       	pop	r17
    6d04:	0f 91       	pop	r16
    6d06:	08 95       	ret

00006d08 <free>:
    6d08:	cf 93       	push	r28
    6d0a:	df 93       	push	r29
    6d0c:	00 97       	sbiw	r24, 0x00	; 0
    6d0e:	09 f4       	brne	.+2      	; 0x6d12 <free+0xa>
    6d10:	81 c0       	rjmp	.+258    	; 0x6e14 <free+0x10c>
    6d12:	fc 01       	movw	r30, r24
    6d14:	32 97       	sbiw	r30, 0x02	; 2
    6d16:	13 82       	std	Z+3, r1	; 0x03
    6d18:	12 82       	std	Z+2, r1	; 0x02
    6d1a:	a0 91 2e 0b 	lds	r26, 0x0B2E	; 0x800b2e <__flp>
    6d1e:	b0 91 2f 0b 	lds	r27, 0x0B2F	; 0x800b2f <__flp+0x1>
    6d22:	10 97       	sbiw	r26, 0x00	; 0
    6d24:	81 f4       	brne	.+32     	; 0x6d46 <free+0x3e>
    6d26:	20 81       	ld	r18, Z
    6d28:	31 81       	ldd	r19, Z+1	; 0x01
    6d2a:	82 0f       	add	r24, r18
    6d2c:	93 1f       	adc	r25, r19
    6d2e:	20 91 2c 0b 	lds	r18, 0x0B2C	; 0x800b2c <__brkval>
    6d32:	30 91 2d 0b 	lds	r19, 0x0B2D	; 0x800b2d <__brkval+0x1>
    6d36:	28 17       	cp	r18, r24
    6d38:	39 07       	cpc	r19, r25
    6d3a:	51 f5       	brne	.+84     	; 0x6d90 <free+0x88>
    6d3c:	f0 93 2d 0b 	sts	0x0B2D, r31	; 0x800b2d <__brkval+0x1>
    6d40:	e0 93 2c 0b 	sts	0x0B2C, r30	; 0x800b2c <__brkval>
    6d44:	67 c0       	rjmp	.+206    	; 0x6e14 <free+0x10c>
    6d46:	ed 01       	movw	r28, r26
    6d48:	20 e0       	ldi	r18, 0x00	; 0
    6d4a:	30 e0       	ldi	r19, 0x00	; 0
    6d4c:	ce 17       	cp	r28, r30
    6d4e:	df 07       	cpc	r29, r31
    6d50:	40 f4       	brcc	.+16     	; 0x6d62 <free+0x5a>
    6d52:	4a 81       	ldd	r20, Y+2	; 0x02
    6d54:	5b 81       	ldd	r21, Y+3	; 0x03
    6d56:	9e 01       	movw	r18, r28
    6d58:	41 15       	cp	r20, r1
    6d5a:	51 05       	cpc	r21, r1
    6d5c:	f1 f0       	breq	.+60     	; 0x6d9a <free+0x92>
    6d5e:	ea 01       	movw	r28, r20
    6d60:	f5 cf       	rjmp	.-22     	; 0x6d4c <free+0x44>
    6d62:	d3 83       	std	Z+3, r29	; 0x03
    6d64:	c2 83       	std	Z+2, r28	; 0x02
    6d66:	40 81       	ld	r20, Z
    6d68:	51 81       	ldd	r21, Z+1	; 0x01
    6d6a:	84 0f       	add	r24, r20
    6d6c:	95 1f       	adc	r25, r21
    6d6e:	c8 17       	cp	r28, r24
    6d70:	d9 07       	cpc	r29, r25
    6d72:	59 f4       	brne	.+22     	; 0x6d8a <free+0x82>
    6d74:	88 81       	ld	r24, Y
    6d76:	99 81       	ldd	r25, Y+1	; 0x01
    6d78:	84 0f       	add	r24, r20
    6d7a:	95 1f       	adc	r25, r21
    6d7c:	02 96       	adiw	r24, 0x02	; 2
    6d7e:	91 83       	std	Z+1, r25	; 0x01
    6d80:	80 83       	st	Z, r24
    6d82:	8a 81       	ldd	r24, Y+2	; 0x02
    6d84:	9b 81       	ldd	r25, Y+3	; 0x03
    6d86:	93 83       	std	Z+3, r25	; 0x03
    6d88:	82 83       	std	Z+2, r24	; 0x02
    6d8a:	21 15       	cp	r18, r1
    6d8c:	31 05       	cpc	r19, r1
    6d8e:	29 f4       	brne	.+10     	; 0x6d9a <free+0x92>
    6d90:	f0 93 2f 0b 	sts	0x0B2F, r31	; 0x800b2f <__flp+0x1>
    6d94:	e0 93 2e 0b 	sts	0x0B2E, r30	; 0x800b2e <__flp>
    6d98:	3d c0       	rjmp	.+122    	; 0x6e14 <free+0x10c>
    6d9a:	e9 01       	movw	r28, r18
    6d9c:	fb 83       	std	Y+3, r31	; 0x03
    6d9e:	ea 83       	std	Y+2, r30	; 0x02
    6da0:	49 91       	ld	r20, Y+
    6da2:	59 91       	ld	r21, Y+
    6da4:	c4 0f       	add	r28, r20
    6da6:	d5 1f       	adc	r29, r21
    6da8:	ec 17       	cp	r30, r28
    6daa:	fd 07       	cpc	r31, r29
    6dac:	61 f4       	brne	.+24     	; 0x6dc6 <free+0xbe>
    6dae:	80 81       	ld	r24, Z
    6db0:	91 81       	ldd	r25, Z+1	; 0x01
    6db2:	84 0f       	add	r24, r20
    6db4:	95 1f       	adc	r25, r21
    6db6:	02 96       	adiw	r24, 0x02	; 2
    6db8:	e9 01       	movw	r28, r18
    6dba:	99 83       	std	Y+1, r25	; 0x01
    6dbc:	88 83       	st	Y, r24
    6dbe:	82 81       	ldd	r24, Z+2	; 0x02
    6dc0:	93 81       	ldd	r25, Z+3	; 0x03
    6dc2:	9b 83       	std	Y+3, r25	; 0x03
    6dc4:	8a 83       	std	Y+2, r24	; 0x02
    6dc6:	e0 e0       	ldi	r30, 0x00	; 0
    6dc8:	f0 e0       	ldi	r31, 0x00	; 0
    6dca:	12 96       	adiw	r26, 0x02	; 2
    6dcc:	8d 91       	ld	r24, X+
    6dce:	9c 91       	ld	r25, X
    6dd0:	13 97       	sbiw	r26, 0x03	; 3
    6dd2:	00 97       	sbiw	r24, 0x00	; 0
    6dd4:	19 f0       	breq	.+6      	; 0x6ddc <free+0xd4>
    6dd6:	fd 01       	movw	r30, r26
    6dd8:	dc 01       	movw	r26, r24
    6dda:	f7 cf       	rjmp	.-18     	; 0x6dca <free+0xc2>
    6ddc:	8d 91       	ld	r24, X+
    6dde:	9c 91       	ld	r25, X
    6de0:	11 97       	sbiw	r26, 0x01	; 1
    6de2:	9d 01       	movw	r18, r26
    6de4:	2e 5f       	subi	r18, 0xFE	; 254
    6de6:	3f 4f       	sbci	r19, 0xFF	; 255
    6de8:	82 0f       	add	r24, r18
    6dea:	93 1f       	adc	r25, r19
    6dec:	20 91 2c 0b 	lds	r18, 0x0B2C	; 0x800b2c <__brkval>
    6df0:	30 91 2d 0b 	lds	r19, 0x0B2D	; 0x800b2d <__brkval+0x1>
    6df4:	28 17       	cp	r18, r24
    6df6:	39 07       	cpc	r19, r25
    6df8:	69 f4       	brne	.+26     	; 0x6e14 <free+0x10c>
    6dfa:	30 97       	sbiw	r30, 0x00	; 0
    6dfc:	29 f4       	brne	.+10     	; 0x6e08 <free+0x100>
    6dfe:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <__flp+0x1>
    6e02:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <__flp>
    6e06:	02 c0       	rjmp	.+4      	; 0x6e0c <free+0x104>
    6e08:	13 82       	std	Z+3, r1	; 0x03
    6e0a:	12 82       	std	Z+2, r1	; 0x02
    6e0c:	b0 93 2d 0b 	sts	0x0B2D, r27	; 0x800b2d <__brkval+0x1>
    6e10:	a0 93 2c 0b 	sts	0x0B2C, r26	; 0x800b2c <__brkval>
    6e14:	df 91       	pop	r29
    6e16:	cf 91       	pop	r28
    6e18:	08 95       	ret

00006e1a <abort>:
    6e1a:	81 e0       	ldi	r24, 0x01	; 1
    6e1c:	90 e0       	ldi	r25, 0x00	; 0
    6e1e:	f8 94       	cli
    6e20:	58 c3       	rjmp	.+1712   	; 0x74d2 <_exit>

00006e22 <memcpy>:
    6e22:	fb 01       	movw	r30, r22
    6e24:	dc 01       	movw	r26, r24
    6e26:	02 c0       	rjmp	.+4      	; 0x6e2c <memcpy+0xa>
    6e28:	01 90       	ld	r0, Z+
    6e2a:	0d 92       	st	X+, r0
    6e2c:	41 50       	subi	r20, 0x01	; 1
    6e2e:	50 40       	sbci	r21, 0x00	; 0
    6e30:	d8 f7       	brcc	.-10     	; 0x6e28 <memcpy+0x6>
    6e32:	08 95       	ret

00006e34 <memset>:
    6e34:	dc 01       	movw	r26, r24
    6e36:	01 c0       	rjmp	.+2      	; 0x6e3a <memset+0x6>
    6e38:	6d 93       	st	X+, r22
    6e3a:	41 50       	subi	r20, 0x01	; 1
    6e3c:	50 40       	sbci	r21, 0x00	; 0
    6e3e:	e0 f7       	brcc	.-8      	; 0x6e38 <memset+0x4>
    6e40:	08 95       	ret

00006e42 <strcat>:
    6e42:	fb 01       	movw	r30, r22
    6e44:	dc 01       	movw	r26, r24
    6e46:	0d 90       	ld	r0, X+
    6e48:	00 20       	and	r0, r0
    6e4a:	e9 f7       	brne	.-6      	; 0x6e46 <strcat+0x4>
    6e4c:	11 97       	sbiw	r26, 0x01	; 1
    6e4e:	01 90       	ld	r0, Z+
    6e50:	0d 92       	st	X+, r0
    6e52:	00 20       	and	r0, r0
    6e54:	e1 f7       	brne	.-8      	; 0x6e4e <strcat+0xc>
    6e56:	08 95       	ret

00006e58 <strcpy>:
    6e58:	fb 01       	movw	r30, r22
    6e5a:	dc 01       	movw	r26, r24
    6e5c:	01 90       	ld	r0, Z+
    6e5e:	0d 92       	st	X+, r0
    6e60:	00 20       	and	r0, r0
    6e62:	e1 f7       	brne	.-8      	; 0x6e5c <strcpy+0x4>
    6e64:	08 95       	ret

00006e66 <strncasecmp>:
    6e66:	fb 01       	movw	r30, r22
    6e68:	dc 01       	movw	r26, r24
    6e6a:	41 50       	subi	r20, 0x01	; 1
    6e6c:	50 40       	sbci	r21, 0x00	; 0
    6e6e:	88 f0       	brcs	.+34     	; 0x6e92 <strncasecmp+0x2c>
    6e70:	8d 91       	ld	r24, X+
    6e72:	81 34       	cpi	r24, 0x41	; 65
    6e74:	1c f0       	brlt	.+6      	; 0x6e7c <strncasecmp+0x16>
    6e76:	8b 35       	cpi	r24, 0x5B	; 91
    6e78:	0c f4       	brge	.+2      	; 0x6e7c <strncasecmp+0x16>
    6e7a:	80 5e       	subi	r24, 0xE0	; 224
    6e7c:	61 91       	ld	r22, Z+
    6e7e:	61 34       	cpi	r22, 0x41	; 65
    6e80:	1c f0       	brlt	.+6      	; 0x6e88 <strncasecmp+0x22>
    6e82:	6b 35       	cpi	r22, 0x5B	; 91
    6e84:	0c f4       	brge	.+2      	; 0x6e88 <strncasecmp+0x22>
    6e86:	60 5e       	subi	r22, 0xE0	; 224
    6e88:	86 1b       	sub	r24, r22
    6e8a:	61 11       	cpse	r22, r1
    6e8c:	71 f3       	breq	.-36     	; 0x6e6a <strncasecmp+0x4>
    6e8e:	99 0b       	sbc	r25, r25
    6e90:	08 95       	ret
    6e92:	88 1b       	sub	r24, r24
    6e94:	fc cf       	rjmp	.-8      	; 0x6e8e <strncasecmp+0x28>

00006e96 <printf>:
    6e96:	cf 93       	push	r28
    6e98:	df 93       	push	r29
    6e9a:	cd b7       	in	r28, 0x3d	; 61
    6e9c:	de b7       	in	r29, 0x3e	; 62
    6e9e:	ae 01       	movw	r20, r28
    6ea0:	4a 5f       	subi	r20, 0xFA	; 250
    6ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea4:	fa 01       	movw	r30, r20
    6ea6:	61 91       	ld	r22, Z+
    6ea8:	71 91       	ld	r23, Z+
    6eaa:	af 01       	movw	r20, r30
    6eac:	80 91 32 0b 	lds	r24, 0x0B32	; 0x800b32 <__iob+0x2>
    6eb0:	90 91 33 0b 	lds	r25, 0x0B33	; 0x800b33 <__iob+0x3>
    6eb4:	61 d0       	rcall	.+194    	; 0x6f78 <vfprintf>
    6eb6:	df 91       	pop	r29
    6eb8:	cf 91       	pop	r28
    6eba:	08 95       	ret

00006ebc <puts>:
    6ebc:	0f 93       	push	r16
    6ebe:	1f 93       	push	r17
    6ec0:	cf 93       	push	r28
    6ec2:	df 93       	push	r29
    6ec4:	e0 91 32 0b 	lds	r30, 0x0B32	; 0x800b32 <__iob+0x2>
    6ec8:	f0 91 33 0b 	lds	r31, 0x0B33	; 0x800b33 <__iob+0x3>
    6ecc:	23 81       	ldd	r18, Z+3	; 0x03
    6ece:	21 ff       	sbrs	r18, 1
    6ed0:	1b c0       	rjmp	.+54     	; 0x6f08 <puts+0x4c>
    6ed2:	8c 01       	movw	r16, r24
    6ed4:	d0 e0       	ldi	r29, 0x00	; 0
    6ed6:	c0 e0       	ldi	r28, 0x00	; 0
    6ed8:	f8 01       	movw	r30, r16
    6eda:	81 91       	ld	r24, Z+
    6edc:	8f 01       	movw	r16, r30
    6ede:	60 91 32 0b 	lds	r22, 0x0B32	; 0x800b32 <__iob+0x2>
    6ee2:	70 91 33 0b 	lds	r23, 0x0B33	; 0x800b33 <__iob+0x3>
    6ee6:	db 01       	movw	r26, r22
    6ee8:	18 96       	adiw	r26, 0x08	; 8
    6eea:	ed 91       	ld	r30, X+
    6eec:	fc 91       	ld	r31, X
    6eee:	19 97       	sbiw	r26, 0x09	; 9
    6ef0:	88 23       	and	r24, r24
    6ef2:	31 f0       	breq	.+12     	; 0x6f00 <puts+0x44>
    6ef4:	19 95       	eicall
    6ef6:	89 2b       	or	r24, r25
    6ef8:	79 f3       	breq	.-34     	; 0x6ed8 <puts+0x1c>
    6efa:	df ef       	ldi	r29, 0xFF	; 255
    6efc:	cf ef       	ldi	r28, 0xFF	; 255
    6efe:	ec cf       	rjmp	.-40     	; 0x6ed8 <puts+0x1c>
    6f00:	8a e0       	ldi	r24, 0x0A	; 10
    6f02:	19 95       	eicall
    6f04:	89 2b       	or	r24, r25
    6f06:	19 f0       	breq	.+6      	; 0x6f0e <puts+0x52>
    6f08:	8f ef       	ldi	r24, 0xFF	; 255
    6f0a:	9f ef       	ldi	r25, 0xFF	; 255
    6f0c:	02 c0       	rjmp	.+4      	; 0x6f12 <puts+0x56>
    6f0e:	8d 2f       	mov	r24, r29
    6f10:	9c 2f       	mov	r25, r28
    6f12:	df 91       	pop	r29
    6f14:	cf 91       	pop	r28
    6f16:	1f 91       	pop	r17
    6f18:	0f 91       	pop	r16
    6f1a:	08 95       	ret

00006f1c <sprintf>:
    6f1c:	0f 93       	push	r16
    6f1e:	1f 93       	push	r17
    6f20:	cf 93       	push	r28
    6f22:	df 93       	push	r29
    6f24:	cd b7       	in	r28, 0x3d	; 61
    6f26:	de b7       	in	r29, 0x3e	; 62
    6f28:	2e 97       	sbiw	r28, 0x0e	; 14
    6f2a:	0f b6       	in	r0, 0x3f	; 63
    6f2c:	f8 94       	cli
    6f2e:	de bf       	out	0x3e, r29	; 62
    6f30:	0f be       	out	0x3f, r0	; 63
    6f32:	cd bf       	out	0x3d, r28	; 61
    6f34:	0e 89       	ldd	r16, Y+22	; 0x16
    6f36:	1f 89       	ldd	r17, Y+23	; 0x17
    6f38:	86 e0       	ldi	r24, 0x06	; 6
    6f3a:	8c 83       	std	Y+4, r24	; 0x04
    6f3c:	1a 83       	std	Y+2, r17	; 0x02
    6f3e:	09 83       	std	Y+1, r16	; 0x01
    6f40:	8f ef       	ldi	r24, 0xFF	; 255
    6f42:	9f e7       	ldi	r25, 0x7F	; 127
    6f44:	9e 83       	std	Y+6, r25	; 0x06
    6f46:	8d 83       	std	Y+5, r24	; 0x05
    6f48:	ae 01       	movw	r20, r28
    6f4a:	46 5e       	subi	r20, 0xE6	; 230
    6f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    6f4e:	68 8d       	ldd	r22, Y+24	; 0x18
    6f50:	79 8d       	ldd	r23, Y+25	; 0x19
    6f52:	ce 01       	movw	r24, r28
    6f54:	01 96       	adiw	r24, 0x01	; 1
    6f56:	10 d0       	rcall	.+32     	; 0x6f78 <vfprintf>
    6f58:	ef 81       	ldd	r30, Y+7	; 0x07
    6f5a:	f8 85       	ldd	r31, Y+8	; 0x08
    6f5c:	e0 0f       	add	r30, r16
    6f5e:	f1 1f       	adc	r31, r17
    6f60:	10 82       	st	Z, r1
    6f62:	2e 96       	adiw	r28, 0x0e	; 14
    6f64:	0f b6       	in	r0, 0x3f	; 63
    6f66:	f8 94       	cli
    6f68:	de bf       	out	0x3e, r29	; 62
    6f6a:	0f be       	out	0x3f, r0	; 63
    6f6c:	cd bf       	out	0x3d, r28	; 61
    6f6e:	df 91       	pop	r29
    6f70:	cf 91       	pop	r28
    6f72:	1f 91       	pop	r17
    6f74:	0f 91       	pop	r16
    6f76:	08 95       	ret

00006f78 <vfprintf>:
    6f78:	2f 92       	push	r2
    6f7a:	3f 92       	push	r3
    6f7c:	4f 92       	push	r4
    6f7e:	5f 92       	push	r5
    6f80:	6f 92       	push	r6
    6f82:	7f 92       	push	r7
    6f84:	8f 92       	push	r8
    6f86:	9f 92       	push	r9
    6f88:	af 92       	push	r10
    6f8a:	bf 92       	push	r11
    6f8c:	cf 92       	push	r12
    6f8e:	df 92       	push	r13
    6f90:	ef 92       	push	r14
    6f92:	ff 92       	push	r15
    6f94:	0f 93       	push	r16
    6f96:	1f 93       	push	r17
    6f98:	cf 93       	push	r28
    6f9a:	df 93       	push	r29
    6f9c:	cd b7       	in	r28, 0x3d	; 61
    6f9e:	de b7       	in	r29, 0x3e	; 62
    6fa0:	2b 97       	sbiw	r28, 0x0b	; 11
    6fa2:	0f b6       	in	r0, 0x3f	; 63
    6fa4:	f8 94       	cli
    6fa6:	de bf       	out	0x3e, r29	; 62
    6fa8:	0f be       	out	0x3f, r0	; 63
    6faa:	cd bf       	out	0x3d, r28	; 61
    6fac:	6c 01       	movw	r12, r24
    6fae:	7b 01       	movw	r14, r22
    6fb0:	8a 01       	movw	r16, r20
    6fb2:	fc 01       	movw	r30, r24
    6fb4:	17 82       	std	Z+7, r1	; 0x07
    6fb6:	16 82       	std	Z+6, r1	; 0x06
    6fb8:	83 81       	ldd	r24, Z+3	; 0x03
    6fba:	81 ff       	sbrs	r24, 1
    6fbc:	bf c1       	rjmp	.+894    	; 0x733c <vfprintf+0x3c4>
    6fbe:	ce 01       	movw	r24, r28
    6fc0:	01 96       	adiw	r24, 0x01	; 1
    6fc2:	3c 01       	movw	r6, r24
    6fc4:	f6 01       	movw	r30, r12
    6fc6:	93 81       	ldd	r25, Z+3	; 0x03
    6fc8:	f7 01       	movw	r30, r14
    6fca:	93 fd       	sbrc	r25, 3
    6fcc:	85 91       	lpm	r24, Z+
    6fce:	93 ff       	sbrs	r25, 3
    6fd0:	81 91       	ld	r24, Z+
    6fd2:	7f 01       	movw	r14, r30
    6fd4:	88 23       	and	r24, r24
    6fd6:	09 f4       	brne	.+2      	; 0x6fda <vfprintf+0x62>
    6fd8:	ad c1       	rjmp	.+858    	; 0x7334 <vfprintf+0x3bc>
    6fda:	85 32       	cpi	r24, 0x25	; 37
    6fdc:	39 f4       	brne	.+14     	; 0x6fec <vfprintf+0x74>
    6fde:	93 fd       	sbrc	r25, 3
    6fe0:	85 91       	lpm	r24, Z+
    6fe2:	93 ff       	sbrs	r25, 3
    6fe4:	81 91       	ld	r24, Z+
    6fe6:	7f 01       	movw	r14, r30
    6fe8:	85 32       	cpi	r24, 0x25	; 37
    6fea:	21 f4       	brne	.+8      	; 0x6ff4 <vfprintf+0x7c>
    6fec:	b6 01       	movw	r22, r12
    6fee:	90 e0       	ldi	r25, 0x00	; 0
    6ff0:	d6 d1       	rcall	.+940    	; 0x739e <fputc>
    6ff2:	e8 cf       	rjmp	.-48     	; 0x6fc4 <vfprintf+0x4c>
    6ff4:	91 2c       	mov	r9, r1
    6ff6:	21 2c       	mov	r2, r1
    6ff8:	31 2c       	mov	r3, r1
    6ffa:	ff e1       	ldi	r31, 0x1F	; 31
    6ffc:	f3 15       	cp	r31, r3
    6ffe:	d8 f0       	brcs	.+54     	; 0x7036 <vfprintf+0xbe>
    7000:	8b 32       	cpi	r24, 0x2B	; 43
    7002:	79 f0       	breq	.+30     	; 0x7022 <vfprintf+0xaa>
    7004:	38 f4       	brcc	.+14     	; 0x7014 <vfprintf+0x9c>
    7006:	80 32       	cpi	r24, 0x20	; 32
    7008:	79 f0       	breq	.+30     	; 0x7028 <vfprintf+0xb0>
    700a:	83 32       	cpi	r24, 0x23	; 35
    700c:	a1 f4       	brne	.+40     	; 0x7036 <vfprintf+0xbe>
    700e:	23 2d       	mov	r18, r3
    7010:	20 61       	ori	r18, 0x10	; 16
    7012:	1d c0       	rjmp	.+58     	; 0x704e <vfprintf+0xd6>
    7014:	8d 32       	cpi	r24, 0x2D	; 45
    7016:	61 f0       	breq	.+24     	; 0x7030 <vfprintf+0xb8>
    7018:	80 33       	cpi	r24, 0x30	; 48
    701a:	69 f4       	brne	.+26     	; 0x7036 <vfprintf+0xbe>
    701c:	23 2d       	mov	r18, r3
    701e:	21 60       	ori	r18, 0x01	; 1
    7020:	16 c0       	rjmp	.+44     	; 0x704e <vfprintf+0xd6>
    7022:	83 2d       	mov	r24, r3
    7024:	82 60       	ori	r24, 0x02	; 2
    7026:	38 2e       	mov	r3, r24
    7028:	e3 2d       	mov	r30, r3
    702a:	e4 60       	ori	r30, 0x04	; 4
    702c:	3e 2e       	mov	r3, r30
    702e:	2a c0       	rjmp	.+84     	; 0x7084 <vfprintf+0x10c>
    7030:	f3 2d       	mov	r31, r3
    7032:	f8 60       	ori	r31, 0x08	; 8
    7034:	1d c0       	rjmp	.+58     	; 0x7070 <vfprintf+0xf8>
    7036:	37 fc       	sbrc	r3, 7
    7038:	2d c0       	rjmp	.+90     	; 0x7094 <vfprintf+0x11c>
    703a:	20 ed       	ldi	r18, 0xD0	; 208
    703c:	28 0f       	add	r18, r24
    703e:	2a 30       	cpi	r18, 0x0A	; 10
    7040:	40 f0       	brcs	.+16     	; 0x7052 <vfprintf+0xda>
    7042:	8e 32       	cpi	r24, 0x2E	; 46
    7044:	b9 f4       	brne	.+46     	; 0x7074 <vfprintf+0xfc>
    7046:	36 fc       	sbrc	r3, 6
    7048:	75 c1       	rjmp	.+746    	; 0x7334 <vfprintf+0x3bc>
    704a:	23 2d       	mov	r18, r3
    704c:	20 64       	ori	r18, 0x40	; 64
    704e:	32 2e       	mov	r3, r18
    7050:	19 c0       	rjmp	.+50     	; 0x7084 <vfprintf+0x10c>
    7052:	36 fe       	sbrs	r3, 6
    7054:	06 c0       	rjmp	.+12     	; 0x7062 <vfprintf+0xea>
    7056:	8a e0       	ldi	r24, 0x0A	; 10
    7058:	98 9e       	mul	r9, r24
    705a:	20 0d       	add	r18, r0
    705c:	11 24       	eor	r1, r1
    705e:	92 2e       	mov	r9, r18
    7060:	11 c0       	rjmp	.+34     	; 0x7084 <vfprintf+0x10c>
    7062:	ea e0       	ldi	r30, 0x0A	; 10
    7064:	2e 9e       	mul	r2, r30
    7066:	20 0d       	add	r18, r0
    7068:	11 24       	eor	r1, r1
    706a:	22 2e       	mov	r2, r18
    706c:	f3 2d       	mov	r31, r3
    706e:	f0 62       	ori	r31, 0x20	; 32
    7070:	3f 2e       	mov	r3, r31
    7072:	08 c0       	rjmp	.+16     	; 0x7084 <vfprintf+0x10c>
    7074:	8c 36       	cpi	r24, 0x6C	; 108
    7076:	21 f4       	brne	.+8      	; 0x7080 <vfprintf+0x108>
    7078:	83 2d       	mov	r24, r3
    707a:	80 68       	ori	r24, 0x80	; 128
    707c:	38 2e       	mov	r3, r24
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <vfprintf+0x10c>
    7080:	88 36       	cpi	r24, 0x68	; 104
    7082:	41 f4       	brne	.+16     	; 0x7094 <vfprintf+0x11c>
    7084:	f7 01       	movw	r30, r14
    7086:	93 fd       	sbrc	r25, 3
    7088:	85 91       	lpm	r24, Z+
    708a:	93 ff       	sbrs	r25, 3
    708c:	81 91       	ld	r24, Z+
    708e:	7f 01       	movw	r14, r30
    7090:	81 11       	cpse	r24, r1
    7092:	b3 cf       	rjmp	.-154    	; 0x6ffa <vfprintf+0x82>
    7094:	98 2f       	mov	r25, r24
    7096:	9f 7d       	andi	r25, 0xDF	; 223
    7098:	95 54       	subi	r25, 0x45	; 69
    709a:	93 30       	cpi	r25, 0x03	; 3
    709c:	28 f4       	brcc	.+10     	; 0x70a8 <vfprintf+0x130>
    709e:	0c 5f       	subi	r16, 0xFC	; 252
    70a0:	1f 4f       	sbci	r17, 0xFF	; 255
    70a2:	9f e3       	ldi	r25, 0x3F	; 63
    70a4:	99 83       	std	Y+1, r25	; 0x01
    70a6:	0d c0       	rjmp	.+26     	; 0x70c2 <vfprintf+0x14a>
    70a8:	83 36       	cpi	r24, 0x63	; 99
    70aa:	31 f0       	breq	.+12     	; 0x70b8 <vfprintf+0x140>
    70ac:	83 37       	cpi	r24, 0x73	; 115
    70ae:	71 f0       	breq	.+28     	; 0x70cc <vfprintf+0x154>
    70b0:	83 35       	cpi	r24, 0x53	; 83
    70b2:	09 f0       	breq	.+2      	; 0x70b6 <vfprintf+0x13e>
    70b4:	55 c0       	rjmp	.+170    	; 0x7160 <vfprintf+0x1e8>
    70b6:	20 c0       	rjmp	.+64     	; 0x70f8 <vfprintf+0x180>
    70b8:	f8 01       	movw	r30, r16
    70ba:	80 81       	ld	r24, Z
    70bc:	89 83       	std	Y+1, r24	; 0x01
    70be:	0e 5f       	subi	r16, 0xFE	; 254
    70c0:	1f 4f       	sbci	r17, 0xFF	; 255
    70c2:	88 24       	eor	r8, r8
    70c4:	83 94       	inc	r8
    70c6:	91 2c       	mov	r9, r1
    70c8:	53 01       	movw	r10, r6
    70ca:	12 c0       	rjmp	.+36     	; 0x70f0 <vfprintf+0x178>
    70cc:	28 01       	movw	r4, r16
    70ce:	f2 e0       	ldi	r31, 0x02	; 2
    70d0:	4f 0e       	add	r4, r31
    70d2:	51 1c       	adc	r5, r1
    70d4:	f8 01       	movw	r30, r16
    70d6:	a0 80       	ld	r10, Z
    70d8:	b1 80       	ldd	r11, Z+1	; 0x01
    70da:	36 fe       	sbrs	r3, 6
    70dc:	03 c0       	rjmp	.+6      	; 0x70e4 <vfprintf+0x16c>
    70de:	69 2d       	mov	r22, r9
    70e0:	70 e0       	ldi	r23, 0x00	; 0
    70e2:	02 c0       	rjmp	.+4      	; 0x70e8 <vfprintf+0x170>
    70e4:	6f ef       	ldi	r22, 0xFF	; 255
    70e6:	7f ef       	ldi	r23, 0xFF	; 255
    70e8:	c5 01       	movw	r24, r10
    70ea:	4e d1       	rcall	.+668    	; 0x7388 <strnlen>
    70ec:	4c 01       	movw	r8, r24
    70ee:	82 01       	movw	r16, r4
    70f0:	f3 2d       	mov	r31, r3
    70f2:	ff 77       	andi	r31, 0x7F	; 127
    70f4:	3f 2e       	mov	r3, r31
    70f6:	15 c0       	rjmp	.+42     	; 0x7122 <vfprintf+0x1aa>
    70f8:	28 01       	movw	r4, r16
    70fa:	22 e0       	ldi	r18, 0x02	; 2
    70fc:	42 0e       	add	r4, r18
    70fe:	51 1c       	adc	r5, r1
    7100:	f8 01       	movw	r30, r16
    7102:	a0 80       	ld	r10, Z
    7104:	b1 80       	ldd	r11, Z+1	; 0x01
    7106:	36 fe       	sbrs	r3, 6
    7108:	03 c0       	rjmp	.+6      	; 0x7110 <vfprintf+0x198>
    710a:	69 2d       	mov	r22, r9
    710c:	70 e0       	ldi	r23, 0x00	; 0
    710e:	02 c0       	rjmp	.+4      	; 0x7114 <vfprintf+0x19c>
    7110:	6f ef       	ldi	r22, 0xFF	; 255
    7112:	7f ef       	ldi	r23, 0xFF	; 255
    7114:	c5 01       	movw	r24, r10
    7116:	2d d1       	rcall	.+602    	; 0x7372 <strnlen_P>
    7118:	4c 01       	movw	r8, r24
    711a:	f3 2d       	mov	r31, r3
    711c:	f0 68       	ori	r31, 0x80	; 128
    711e:	3f 2e       	mov	r3, r31
    7120:	82 01       	movw	r16, r4
    7122:	33 fc       	sbrc	r3, 3
    7124:	19 c0       	rjmp	.+50     	; 0x7158 <vfprintf+0x1e0>
    7126:	82 2d       	mov	r24, r2
    7128:	90 e0       	ldi	r25, 0x00	; 0
    712a:	88 16       	cp	r8, r24
    712c:	99 06       	cpc	r9, r25
    712e:	a0 f4       	brcc	.+40     	; 0x7158 <vfprintf+0x1e0>
    7130:	b6 01       	movw	r22, r12
    7132:	80 e2       	ldi	r24, 0x20	; 32
    7134:	90 e0       	ldi	r25, 0x00	; 0
    7136:	33 d1       	rcall	.+614    	; 0x739e <fputc>
    7138:	2a 94       	dec	r2
    713a:	f5 cf       	rjmp	.-22     	; 0x7126 <vfprintf+0x1ae>
    713c:	f5 01       	movw	r30, r10
    713e:	37 fc       	sbrc	r3, 7
    7140:	85 91       	lpm	r24, Z+
    7142:	37 fe       	sbrs	r3, 7
    7144:	81 91       	ld	r24, Z+
    7146:	5f 01       	movw	r10, r30
    7148:	b6 01       	movw	r22, r12
    714a:	90 e0       	ldi	r25, 0x00	; 0
    714c:	28 d1       	rcall	.+592    	; 0x739e <fputc>
    714e:	21 10       	cpse	r2, r1
    7150:	2a 94       	dec	r2
    7152:	21 e0       	ldi	r18, 0x01	; 1
    7154:	82 1a       	sub	r8, r18
    7156:	91 08       	sbc	r9, r1
    7158:	81 14       	cp	r8, r1
    715a:	91 04       	cpc	r9, r1
    715c:	79 f7       	brne	.-34     	; 0x713c <vfprintf+0x1c4>
    715e:	e1 c0       	rjmp	.+450    	; 0x7322 <vfprintf+0x3aa>
    7160:	84 36       	cpi	r24, 0x64	; 100
    7162:	11 f0       	breq	.+4      	; 0x7168 <vfprintf+0x1f0>
    7164:	89 36       	cpi	r24, 0x69	; 105
    7166:	39 f5       	brne	.+78     	; 0x71b6 <vfprintf+0x23e>
    7168:	f8 01       	movw	r30, r16
    716a:	37 fe       	sbrs	r3, 7
    716c:	07 c0       	rjmp	.+14     	; 0x717c <vfprintf+0x204>
    716e:	60 81       	ld	r22, Z
    7170:	71 81       	ldd	r23, Z+1	; 0x01
    7172:	82 81       	ldd	r24, Z+2	; 0x02
    7174:	93 81       	ldd	r25, Z+3	; 0x03
    7176:	0c 5f       	subi	r16, 0xFC	; 252
    7178:	1f 4f       	sbci	r17, 0xFF	; 255
    717a:	08 c0       	rjmp	.+16     	; 0x718c <vfprintf+0x214>
    717c:	60 81       	ld	r22, Z
    717e:	71 81       	ldd	r23, Z+1	; 0x01
    7180:	07 2e       	mov	r0, r23
    7182:	00 0c       	add	r0, r0
    7184:	88 0b       	sbc	r24, r24
    7186:	99 0b       	sbc	r25, r25
    7188:	0e 5f       	subi	r16, 0xFE	; 254
    718a:	1f 4f       	sbci	r17, 0xFF	; 255
    718c:	f3 2d       	mov	r31, r3
    718e:	ff 76       	andi	r31, 0x6F	; 111
    7190:	3f 2e       	mov	r3, r31
    7192:	97 ff       	sbrs	r25, 7
    7194:	09 c0       	rjmp	.+18     	; 0x71a8 <vfprintf+0x230>
    7196:	90 95       	com	r25
    7198:	80 95       	com	r24
    719a:	70 95       	com	r23
    719c:	61 95       	neg	r22
    719e:	7f 4f       	sbci	r23, 0xFF	; 255
    71a0:	8f 4f       	sbci	r24, 0xFF	; 255
    71a2:	9f 4f       	sbci	r25, 0xFF	; 255
    71a4:	f0 68       	ori	r31, 0x80	; 128
    71a6:	3f 2e       	mov	r3, r31
    71a8:	2a e0       	ldi	r18, 0x0A	; 10
    71aa:	30 e0       	ldi	r19, 0x00	; 0
    71ac:	a3 01       	movw	r20, r6
    71ae:	33 d1       	rcall	.+614    	; 0x7416 <__ultoa_invert>
    71b0:	88 2e       	mov	r8, r24
    71b2:	86 18       	sub	r8, r6
    71b4:	44 c0       	rjmp	.+136    	; 0x723e <vfprintf+0x2c6>
    71b6:	85 37       	cpi	r24, 0x75	; 117
    71b8:	31 f4       	brne	.+12     	; 0x71c6 <vfprintf+0x24e>
    71ba:	23 2d       	mov	r18, r3
    71bc:	2f 7e       	andi	r18, 0xEF	; 239
    71be:	b2 2e       	mov	r11, r18
    71c0:	2a e0       	ldi	r18, 0x0A	; 10
    71c2:	30 e0       	ldi	r19, 0x00	; 0
    71c4:	25 c0       	rjmp	.+74     	; 0x7210 <vfprintf+0x298>
    71c6:	93 2d       	mov	r25, r3
    71c8:	99 7f       	andi	r25, 0xF9	; 249
    71ca:	b9 2e       	mov	r11, r25
    71cc:	8f 36       	cpi	r24, 0x6F	; 111
    71ce:	c1 f0       	breq	.+48     	; 0x7200 <vfprintf+0x288>
    71d0:	18 f4       	brcc	.+6      	; 0x71d8 <vfprintf+0x260>
    71d2:	88 35       	cpi	r24, 0x58	; 88
    71d4:	79 f0       	breq	.+30     	; 0x71f4 <vfprintf+0x27c>
    71d6:	ae c0       	rjmp	.+348    	; 0x7334 <vfprintf+0x3bc>
    71d8:	80 37       	cpi	r24, 0x70	; 112
    71da:	19 f0       	breq	.+6      	; 0x71e2 <vfprintf+0x26a>
    71dc:	88 37       	cpi	r24, 0x78	; 120
    71de:	21 f0       	breq	.+8      	; 0x71e8 <vfprintf+0x270>
    71e0:	a9 c0       	rjmp	.+338    	; 0x7334 <vfprintf+0x3bc>
    71e2:	e9 2f       	mov	r30, r25
    71e4:	e0 61       	ori	r30, 0x10	; 16
    71e6:	be 2e       	mov	r11, r30
    71e8:	b4 fe       	sbrs	r11, 4
    71ea:	0d c0       	rjmp	.+26     	; 0x7206 <vfprintf+0x28e>
    71ec:	fb 2d       	mov	r31, r11
    71ee:	f4 60       	ori	r31, 0x04	; 4
    71f0:	bf 2e       	mov	r11, r31
    71f2:	09 c0       	rjmp	.+18     	; 0x7206 <vfprintf+0x28e>
    71f4:	34 fe       	sbrs	r3, 4
    71f6:	0a c0       	rjmp	.+20     	; 0x720c <vfprintf+0x294>
    71f8:	29 2f       	mov	r18, r25
    71fa:	26 60       	ori	r18, 0x06	; 6
    71fc:	b2 2e       	mov	r11, r18
    71fe:	06 c0       	rjmp	.+12     	; 0x720c <vfprintf+0x294>
    7200:	28 e0       	ldi	r18, 0x08	; 8
    7202:	30 e0       	ldi	r19, 0x00	; 0
    7204:	05 c0       	rjmp	.+10     	; 0x7210 <vfprintf+0x298>
    7206:	20 e1       	ldi	r18, 0x10	; 16
    7208:	30 e0       	ldi	r19, 0x00	; 0
    720a:	02 c0       	rjmp	.+4      	; 0x7210 <vfprintf+0x298>
    720c:	20 e1       	ldi	r18, 0x10	; 16
    720e:	32 e0       	ldi	r19, 0x02	; 2
    7210:	f8 01       	movw	r30, r16
    7212:	b7 fe       	sbrs	r11, 7
    7214:	07 c0       	rjmp	.+14     	; 0x7224 <vfprintf+0x2ac>
    7216:	60 81       	ld	r22, Z
    7218:	71 81       	ldd	r23, Z+1	; 0x01
    721a:	82 81       	ldd	r24, Z+2	; 0x02
    721c:	93 81       	ldd	r25, Z+3	; 0x03
    721e:	0c 5f       	subi	r16, 0xFC	; 252
    7220:	1f 4f       	sbci	r17, 0xFF	; 255
    7222:	06 c0       	rjmp	.+12     	; 0x7230 <vfprintf+0x2b8>
    7224:	60 81       	ld	r22, Z
    7226:	71 81       	ldd	r23, Z+1	; 0x01
    7228:	80 e0       	ldi	r24, 0x00	; 0
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	0e 5f       	subi	r16, 0xFE	; 254
    722e:	1f 4f       	sbci	r17, 0xFF	; 255
    7230:	a3 01       	movw	r20, r6
    7232:	f1 d0       	rcall	.+482    	; 0x7416 <__ultoa_invert>
    7234:	88 2e       	mov	r8, r24
    7236:	86 18       	sub	r8, r6
    7238:	fb 2d       	mov	r31, r11
    723a:	ff 77       	andi	r31, 0x7F	; 127
    723c:	3f 2e       	mov	r3, r31
    723e:	36 fe       	sbrs	r3, 6
    7240:	0d c0       	rjmp	.+26     	; 0x725c <vfprintf+0x2e4>
    7242:	23 2d       	mov	r18, r3
    7244:	2e 7f       	andi	r18, 0xFE	; 254
    7246:	a2 2e       	mov	r10, r18
    7248:	89 14       	cp	r8, r9
    724a:	58 f4       	brcc	.+22     	; 0x7262 <vfprintf+0x2ea>
    724c:	34 fe       	sbrs	r3, 4
    724e:	0b c0       	rjmp	.+22     	; 0x7266 <vfprintf+0x2ee>
    7250:	32 fc       	sbrc	r3, 2
    7252:	09 c0       	rjmp	.+18     	; 0x7266 <vfprintf+0x2ee>
    7254:	83 2d       	mov	r24, r3
    7256:	8e 7e       	andi	r24, 0xEE	; 238
    7258:	a8 2e       	mov	r10, r24
    725a:	05 c0       	rjmp	.+10     	; 0x7266 <vfprintf+0x2ee>
    725c:	b8 2c       	mov	r11, r8
    725e:	a3 2c       	mov	r10, r3
    7260:	03 c0       	rjmp	.+6      	; 0x7268 <vfprintf+0x2f0>
    7262:	b8 2c       	mov	r11, r8
    7264:	01 c0       	rjmp	.+2      	; 0x7268 <vfprintf+0x2f0>
    7266:	b9 2c       	mov	r11, r9
    7268:	a4 fe       	sbrs	r10, 4
    726a:	0f c0       	rjmp	.+30     	; 0x728a <vfprintf+0x312>
    726c:	fe 01       	movw	r30, r28
    726e:	e8 0d       	add	r30, r8
    7270:	f1 1d       	adc	r31, r1
    7272:	80 81       	ld	r24, Z
    7274:	80 33       	cpi	r24, 0x30	; 48
    7276:	21 f4       	brne	.+8      	; 0x7280 <vfprintf+0x308>
    7278:	9a 2d       	mov	r25, r10
    727a:	99 7e       	andi	r25, 0xE9	; 233
    727c:	a9 2e       	mov	r10, r25
    727e:	09 c0       	rjmp	.+18     	; 0x7292 <vfprintf+0x31a>
    7280:	a2 fe       	sbrs	r10, 2
    7282:	06 c0       	rjmp	.+12     	; 0x7290 <vfprintf+0x318>
    7284:	b3 94       	inc	r11
    7286:	b3 94       	inc	r11
    7288:	04 c0       	rjmp	.+8      	; 0x7292 <vfprintf+0x31a>
    728a:	8a 2d       	mov	r24, r10
    728c:	86 78       	andi	r24, 0x86	; 134
    728e:	09 f0       	breq	.+2      	; 0x7292 <vfprintf+0x31a>
    7290:	b3 94       	inc	r11
    7292:	a3 fc       	sbrc	r10, 3
    7294:	10 c0       	rjmp	.+32     	; 0x72b6 <vfprintf+0x33e>
    7296:	a0 fe       	sbrs	r10, 0
    7298:	06 c0       	rjmp	.+12     	; 0x72a6 <vfprintf+0x32e>
    729a:	b2 14       	cp	r11, r2
    729c:	80 f4       	brcc	.+32     	; 0x72be <vfprintf+0x346>
    729e:	28 0c       	add	r2, r8
    72a0:	92 2c       	mov	r9, r2
    72a2:	9b 18       	sub	r9, r11
    72a4:	0d c0       	rjmp	.+26     	; 0x72c0 <vfprintf+0x348>
    72a6:	b2 14       	cp	r11, r2
    72a8:	58 f4       	brcc	.+22     	; 0x72c0 <vfprintf+0x348>
    72aa:	b6 01       	movw	r22, r12
    72ac:	80 e2       	ldi	r24, 0x20	; 32
    72ae:	90 e0       	ldi	r25, 0x00	; 0
    72b0:	76 d0       	rcall	.+236    	; 0x739e <fputc>
    72b2:	b3 94       	inc	r11
    72b4:	f8 cf       	rjmp	.-16     	; 0x72a6 <vfprintf+0x32e>
    72b6:	b2 14       	cp	r11, r2
    72b8:	18 f4       	brcc	.+6      	; 0x72c0 <vfprintf+0x348>
    72ba:	2b 18       	sub	r2, r11
    72bc:	02 c0       	rjmp	.+4      	; 0x72c2 <vfprintf+0x34a>
    72be:	98 2c       	mov	r9, r8
    72c0:	21 2c       	mov	r2, r1
    72c2:	a4 fe       	sbrs	r10, 4
    72c4:	0f c0       	rjmp	.+30     	; 0x72e4 <vfprintf+0x36c>
    72c6:	b6 01       	movw	r22, r12
    72c8:	80 e3       	ldi	r24, 0x30	; 48
    72ca:	90 e0       	ldi	r25, 0x00	; 0
    72cc:	68 d0       	rcall	.+208    	; 0x739e <fputc>
    72ce:	a2 fe       	sbrs	r10, 2
    72d0:	16 c0       	rjmp	.+44     	; 0x72fe <vfprintf+0x386>
    72d2:	a1 fc       	sbrc	r10, 1
    72d4:	03 c0       	rjmp	.+6      	; 0x72dc <vfprintf+0x364>
    72d6:	88 e7       	ldi	r24, 0x78	; 120
    72d8:	90 e0       	ldi	r25, 0x00	; 0
    72da:	02 c0       	rjmp	.+4      	; 0x72e0 <vfprintf+0x368>
    72dc:	88 e5       	ldi	r24, 0x58	; 88
    72de:	90 e0       	ldi	r25, 0x00	; 0
    72e0:	b6 01       	movw	r22, r12
    72e2:	0c c0       	rjmp	.+24     	; 0x72fc <vfprintf+0x384>
    72e4:	8a 2d       	mov	r24, r10
    72e6:	86 78       	andi	r24, 0x86	; 134
    72e8:	51 f0       	breq	.+20     	; 0x72fe <vfprintf+0x386>
    72ea:	a1 fe       	sbrs	r10, 1
    72ec:	02 c0       	rjmp	.+4      	; 0x72f2 <vfprintf+0x37a>
    72ee:	8b e2       	ldi	r24, 0x2B	; 43
    72f0:	01 c0       	rjmp	.+2      	; 0x72f4 <vfprintf+0x37c>
    72f2:	80 e2       	ldi	r24, 0x20	; 32
    72f4:	a7 fc       	sbrc	r10, 7
    72f6:	8d e2       	ldi	r24, 0x2D	; 45
    72f8:	b6 01       	movw	r22, r12
    72fa:	90 e0       	ldi	r25, 0x00	; 0
    72fc:	50 d0       	rcall	.+160    	; 0x739e <fputc>
    72fe:	89 14       	cp	r8, r9
    7300:	30 f4       	brcc	.+12     	; 0x730e <vfprintf+0x396>
    7302:	b6 01       	movw	r22, r12
    7304:	80 e3       	ldi	r24, 0x30	; 48
    7306:	90 e0       	ldi	r25, 0x00	; 0
    7308:	4a d0       	rcall	.+148    	; 0x739e <fputc>
    730a:	9a 94       	dec	r9
    730c:	f8 cf       	rjmp	.-16     	; 0x72fe <vfprintf+0x386>
    730e:	8a 94       	dec	r8
    7310:	f3 01       	movw	r30, r6
    7312:	e8 0d       	add	r30, r8
    7314:	f1 1d       	adc	r31, r1
    7316:	80 81       	ld	r24, Z
    7318:	b6 01       	movw	r22, r12
    731a:	90 e0       	ldi	r25, 0x00	; 0
    731c:	40 d0       	rcall	.+128    	; 0x739e <fputc>
    731e:	81 10       	cpse	r8, r1
    7320:	f6 cf       	rjmp	.-20     	; 0x730e <vfprintf+0x396>
    7322:	22 20       	and	r2, r2
    7324:	09 f4       	brne	.+2      	; 0x7328 <vfprintf+0x3b0>
    7326:	4e ce       	rjmp	.-868    	; 0x6fc4 <vfprintf+0x4c>
    7328:	b6 01       	movw	r22, r12
    732a:	80 e2       	ldi	r24, 0x20	; 32
    732c:	90 e0       	ldi	r25, 0x00	; 0
    732e:	37 d0       	rcall	.+110    	; 0x739e <fputc>
    7330:	2a 94       	dec	r2
    7332:	f7 cf       	rjmp	.-18     	; 0x7322 <vfprintf+0x3aa>
    7334:	f6 01       	movw	r30, r12
    7336:	86 81       	ldd	r24, Z+6	; 0x06
    7338:	97 81       	ldd	r25, Z+7	; 0x07
    733a:	02 c0       	rjmp	.+4      	; 0x7340 <vfprintf+0x3c8>
    733c:	8f ef       	ldi	r24, 0xFF	; 255
    733e:	9f ef       	ldi	r25, 0xFF	; 255
    7340:	2b 96       	adiw	r28, 0x0b	; 11
    7342:	0f b6       	in	r0, 0x3f	; 63
    7344:	f8 94       	cli
    7346:	de bf       	out	0x3e, r29	; 62
    7348:	0f be       	out	0x3f, r0	; 63
    734a:	cd bf       	out	0x3d, r28	; 61
    734c:	df 91       	pop	r29
    734e:	cf 91       	pop	r28
    7350:	1f 91       	pop	r17
    7352:	0f 91       	pop	r16
    7354:	ff 90       	pop	r15
    7356:	ef 90       	pop	r14
    7358:	df 90       	pop	r13
    735a:	cf 90       	pop	r12
    735c:	bf 90       	pop	r11
    735e:	af 90       	pop	r10
    7360:	9f 90       	pop	r9
    7362:	8f 90       	pop	r8
    7364:	7f 90       	pop	r7
    7366:	6f 90       	pop	r6
    7368:	5f 90       	pop	r5
    736a:	4f 90       	pop	r4
    736c:	3f 90       	pop	r3
    736e:	2f 90       	pop	r2
    7370:	08 95       	ret

00007372 <strnlen_P>:
    7372:	fc 01       	movw	r30, r24
    7374:	05 90       	lpm	r0, Z+
    7376:	61 50       	subi	r22, 0x01	; 1
    7378:	70 40       	sbci	r23, 0x00	; 0
    737a:	01 10       	cpse	r0, r1
    737c:	d8 f7       	brcc	.-10     	; 0x7374 <strnlen_P+0x2>
    737e:	80 95       	com	r24
    7380:	90 95       	com	r25
    7382:	8e 0f       	add	r24, r30
    7384:	9f 1f       	adc	r25, r31
    7386:	08 95       	ret

00007388 <strnlen>:
    7388:	fc 01       	movw	r30, r24
    738a:	61 50       	subi	r22, 0x01	; 1
    738c:	70 40       	sbci	r23, 0x00	; 0
    738e:	01 90       	ld	r0, Z+
    7390:	01 10       	cpse	r0, r1
    7392:	d8 f7       	brcc	.-10     	; 0x738a <strnlen+0x2>
    7394:	80 95       	com	r24
    7396:	90 95       	com	r25
    7398:	8e 0f       	add	r24, r30
    739a:	9f 1f       	adc	r25, r31
    739c:	08 95       	ret

0000739e <fputc>:
    739e:	0f 93       	push	r16
    73a0:	1f 93       	push	r17
    73a2:	cf 93       	push	r28
    73a4:	df 93       	push	r29
    73a6:	fb 01       	movw	r30, r22
    73a8:	23 81       	ldd	r18, Z+3	; 0x03
    73aa:	21 fd       	sbrc	r18, 1
    73ac:	03 c0       	rjmp	.+6      	; 0x73b4 <fputc+0x16>
    73ae:	8f ef       	ldi	r24, 0xFF	; 255
    73b0:	9f ef       	ldi	r25, 0xFF	; 255
    73b2:	2c c0       	rjmp	.+88     	; 0x740c <fputc+0x6e>
    73b4:	22 ff       	sbrs	r18, 2
    73b6:	16 c0       	rjmp	.+44     	; 0x73e4 <fputc+0x46>
    73b8:	46 81       	ldd	r20, Z+6	; 0x06
    73ba:	57 81       	ldd	r21, Z+7	; 0x07
    73bc:	24 81       	ldd	r18, Z+4	; 0x04
    73be:	35 81       	ldd	r19, Z+5	; 0x05
    73c0:	42 17       	cp	r20, r18
    73c2:	53 07       	cpc	r21, r19
    73c4:	44 f4       	brge	.+16     	; 0x73d6 <fputc+0x38>
    73c6:	a0 81       	ld	r26, Z
    73c8:	b1 81       	ldd	r27, Z+1	; 0x01
    73ca:	9d 01       	movw	r18, r26
    73cc:	2f 5f       	subi	r18, 0xFF	; 255
    73ce:	3f 4f       	sbci	r19, 0xFF	; 255
    73d0:	31 83       	std	Z+1, r19	; 0x01
    73d2:	20 83       	st	Z, r18
    73d4:	8c 93       	st	X, r24
    73d6:	26 81       	ldd	r18, Z+6	; 0x06
    73d8:	37 81       	ldd	r19, Z+7	; 0x07
    73da:	2f 5f       	subi	r18, 0xFF	; 255
    73dc:	3f 4f       	sbci	r19, 0xFF	; 255
    73de:	37 83       	std	Z+7, r19	; 0x07
    73e0:	26 83       	std	Z+6, r18	; 0x06
    73e2:	14 c0       	rjmp	.+40     	; 0x740c <fputc+0x6e>
    73e4:	8b 01       	movw	r16, r22
    73e6:	ec 01       	movw	r28, r24
    73e8:	fb 01       	movw	r30, r22
    73ea:	00 84       	ldd	r0, Z+8	; 0x08
    73ec:	f1 85       	ldd	r31, Z+9	; 0x09
    73ee:	e0 2d       	mov	r30, r0
    73f0:	19 95       	eicall
    73f2:	89 2b       	or	r24, r25
    73f4:	e1 f6       	brne	.-72     	; 0x73ae <fputc+0x10>
    73f6:	d8 01       	movw	r26, r16
    73f8:	16 96       	adiw	r26, 0x06	; 6
    73fa:	8d 91       	ld	r24, X+
    73fc:	9c 91       	ld	r25, X
    73fe:	17 97       	sbiw	r26, 0x07	; 7
    7400:	01 96       	adiw	r24, 0x01	; 1
    7402:	17 96       	adiw	r26, 0x07	; 7
    7404:	9c 93       	st	X, r25
    7406:	8e 93       	st	-X, r24
    7408:	16 97       	sbiw	r26, 0x06	; 6
    740a:	ce 01       	movw	r24, r28
    740c:	df 91       	pop	r29
    740e:	cf 91       	pop	r28
    7410:	1f 91       	pop	r17
    7412:	0f 91       	pop	r16
    7414:	08 95       	ret

00007416 <__ultoa_invert>:
    7416:	fa 01       	movw	r30, r20
    7418:	aa 27       	eor	r26, r26
    741a:	28 30       	cpi	r18, 0x08	; 8
    741c:	51 f1       	breq	.+84     	; 0x7472 <__ultoa_invert+0x5c>
    741e:	20 31       	cpi	r18, 0x10	; 16
    7420:	81 f1       	breq	.+96     	; 0x7482 <__ultoa_invert+0x6c>
    7422:	e8 94       	clt
    7424:	6f 93       	push	r22
    7426:	6e 7f       	andi	r22, 0xFE	; 254
    7428:	6e 5f       	subi	r22, 0xFE	; 254
    742a:	7f 4f       	sbci	r23, 0xFF	; 255
    742c:	8f 4f       	sbci	r24, 0xFF	; 255
    742e:	9f 4f       	sbci	r25, 0xFF	; 255
    7430:	af 4f       	sbci	r26, 0xFF	; 255
    7432:	b1 e0       	ldi	r27, 0x01	; 1
    7434:	3e d0       	rcall	.+124    	; 0x74b2 <__ultoa_invert+0x9c>
    7436:	b4 e0       	ldi	r27, 0x04	; 4
    7438:	3c d0       	rcall	.+120    	; 0x74b2 <__ultoa_invert+0x9c>
    743a:	67 0f       	add	r22, r23
    743c:	78 1f       	adc	r23, r24
    743e:	89 1f       	adc	r24, r25
    7440:	9a 1f       	adc	r25, r26
    7442:	a1 1d       	adc	r26, r1
    7444:	68 0f       	add	r22, r24
    7446:	79 1f       	adc	r23, r25
    7448:	8a 1f       	adc	r24, r26
    744a:	91 1d       	adc	r25, r1
    744c:	a1 1d       	adc	r26, r1
    744e:	6a 0f       	add	r22, r26
    7450:	71 1d       	adc	r23, r1
    7452:	81 1d       	adc	r24, r1
    7454:	91 1d       	adc	r25, r1
    7456:	a1 1d       	adc	r26, r1
    7458:	20 d0       	rcall	.+64     	; 0x749a <__ultoa_invert+0x84>
    745a:	09 f4       	brne	.+2      	; 0x745e <__ultoa_invert+0x48>
    745c:	68 94       	set
    745e:	3f 91       	pop	r19
    7460:	2a e0       	ldi	r18, 0x0A	; 10
    7462:	26 9f       	mul	r18, r22
    7464:	11 24       	eor	r1, r1
    7466:	30 19       	sub	r19, r0
    7468:	30 5d       	subi	r19, 0xD0	; 208
    746a:	31 93       	st	Z+, r19
    746c:	de f6       	brtc	.-74     	; 0x7424 <__ultoa_invert+0xe>
    746e:	cf 01       	movw	r24, r30
    7470:	08 95       	ret
    7472:	46 2f       	mov	r20, r22
    7474:	47 70       	andi	r20, 0x07	; 7
    7476:	40 5d       	subi	r20, 0xD0	; 208
    7478:	41 93       	st	Z+, r20
    747a:	b3 e0       	ldi	r27, 0x03	; 3
    747c:	0f d0       	rcall	.+30     	; 0x749c <__ultoa_invert+0x86>
    747e:	c9 f7       	brne	.-14     	; 0x7472 <__ultoa_invert+0x5c>
    7480:	f6 cf       	rjmp	.-20     	; 0x746e <__ultoa_invert+0x58>
    7482:	46 2f       	mov	r20, r22
    7484:	4f 70       	andi	r20, 0x0F	; 15
    7486:	40 5d       	subi	r20, 0xD0	; 208
    7488:	4a 33       	cpi	r20, 0x3A	; 58
    748a:	18 f0       	brcs	.+6      	; 0x7492 <__ultoa_invert+0x7c>
    748c:	49 5d       	subi	r20, 0xD9	; 217
    748e:	31 fd       	sbrc	r19, 1
    7490:	40 52       	subi	r20, 0x20	; 32
    7492:	41 93       	st	Z+, r20
    7494:	02 d0       	rcall	.+4      	; 0x749a <__ultoa_invert+0x84>
    7496:	a9 f7       	brne	.-22     	; 0x7482 <__ultoa_invert+0x6c>
    7498:	ea cf       	rjmp	.-44     	; 0x746e <__ultoa_invert+0x58>
    749a:	b4 e0       	ldi	r27, 0x04	; 4
    749c:	a6 95       	lsr	r26
    749e:	97 95       	ror	r25
    74a0:	87 95       	ror	r24
    74a2:	77 95       	ror	r23
    74a4:	67 95       	ror	r22
    74a6:	ba 95       	dec	r27
    74a8:	c9 f7       	brne	.-14     	; 0x749c <__ultoa_invert+0x86>
    74aa:	00 97       	sbiw	r24, 0x00	; 0
    74ac:	61 05       	cpc	r22, r1
    74ae:	71 05       	cpc	r23, r1
    74b0:	08 95       	ret
    74b2:	9b 01       	movw	r18, r22
    74b4:	ac 01       	movw	r20, r24
    74b6:	0a 2e       	mov	r0, r26
    74b8:	06 94       	lsr	r0
    74ba:	57 95       	ror	r21
    74bc:	47 95       	ror	r20
    74be:	37 95       	ror	r19
    74c0:	27 95       	ror	r18
    74c2:	ba 95       	dec	r27
    74c4:	c9 f7       	brne	.-14     	; 0x74b8 <__ultoa_invert+0xa2>
    74c6:	62 0f       	add	r22, r18
    74c8:	73 1f       	adc	r23, r19
    74ca:	84 1f       	adc	r24, r20
    74cc:	95 1f       	adc	r25, r21
    74ce:	a0 1d       	adc	r26, r0
    74d0:	08 95       	ret

000074d2 <_exit>:
    74d2:	f8 94       	cli

000074d4 <__stop_program>:
    74d4:	ff cf       	rjmp	.-2      	; 0x74d4 <__stop_program>
