
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000448  00800200  0000466e  00004702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000466e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000267  00800648  00800648  00004b4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000968  00000000  00000000  00004be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c14b  00000000  00000000  00005550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003077  00000000  00000000  0001169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b18  00000000  00000000  00014712  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ec4  00000000  00000000  0001a22c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039e7  00000000  00000000  0001c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aedc  00000000  00000000  0001fad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0002a9b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c5       	rjmp	.+2760   	; 0xafa <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__vector_25>
      68:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__vector_36>
      94:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__vector_51>
      d0:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__vector_54>
      dc:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	11 1c       	adc	r1, r1
      fa:	81 1c       	adc	r8, r1
      fc:	81 1c       	adc	r8, r1
      fe:	81 1c       	adc	r8, r1
     100:	81 1c       	adc	r8, r1
     102:	81 1c       	adc	r8, r1
     104:	81 1c       	adc	r8, r1
     106:	81 1c       	adc	r8, r1
     108:	11 1c       	adc	r1, r1
     10a:	81 1c       	adc	r8, r1
     10c:	81 1c       	adc	r8, r1
     10e:	81 1c       	adc	r8, r1
     110:	81 1c       	adc	r8, r1
     112:	81 1c       	adc	r8, r1
     114:	81 1c       	adc	r8, r1
     116:	81 1c       	adc	r8, r1
     118:	13 1c       	adc	r1, r3
     11a:	81 1c       	adc	r8, r1
     11c:	81 1c       	adc	r8, r1
     11e:	81 1c       	adc	r8, r1
     120:	81 1c       	adc	r8, r1
     122:	81 1c       	adc	r8, r1
     124:	81 1c       	adc	r8, r1
     126:	81 1c       	adc	r8, r1
     128:	81 1c       	adc	r8, r1
     12a:	81 1c       	adc	r8, r1
     12c:	81 1c       	adc	r8, r1
     12e:	81 1c       	adc	r8, r1
     130:	81 1c       	adc	r8, r1
     132:	81 1c       	adc	r8, r1
     134:	81 1c       	adc	r8, r1
     136:	81 1c       	adc	r8, r1
     138:	13 1c       	adc	r1, r3
     13a:	81 1c       	adc	r8, r1
     13c:	81 1c       	adc	r8, r1
     13e:	81 1c       	adc	r8, r1
     140:	81 1c       	adc	r8, r1
     142:	81 1c       	adc	r8, r1
     144:	81 1c       	adc	r8, r1
     146:	81 1c       	adc	r8, r1
     148:	81 1c       	adc	r8, r1
     14a:	81 1c       	adc	r8, r1
     14c:	81 1c       	adc	r8, r1
     14e:	81 1c       	adc	r8, r1
     150:	81 1c       	adc	r8, r1
     152:	81 1c       	adc	r8, r1
     154:	81 1c       	adc	r8, r1
     156:	81 1c       	adc	r8, r1
     158:	7d 1c       	adc	r7, r13
     15a:	81 1c       	adc	r8, r1
     15c:	81 1c       	adc	r8, r1
     15e:	81 1c       	adc	r8, r1
     160:	81 1c       	adc	r8, r1
     162:	81 1c       	adc	r8, r1
     164:	81 1c       	adc	r8, r1
     166:	81 1c       	adc	r8, r1
     168:	48 1c       	adc	r4, r8
     16a:	81 1c       	adc	r8, r1
     16c:	81 1c       	adc	r8, r1
     16e:	81 1c       	adc	r8, r1
     170:	81 1c       	adc	r8, r1
     172:	81 1c       	adc	r8, r1
     174:	81 1c       	adc	r8, r1
     176:	81 1c       	adc	r8, r1
     178:	81 1c       	adc	r8, r1
     17a:	81 1c       	adc	r8, r1
     17c:	81 1c       	adc	r8, r1
     17e:	81 1c       	adc	r8, r1
     180:	81 1c       	adc	r8, r1
     182:	81 1c       	adc	r8, r1
     184:	81 1c       	adc	r8, r1
     186:	81 1c       	adc	r8, r1
     188:	3c 1c       	adc	r3, r12
     18a:	81 1c       	adc	r8, r1
     18c:	81 1c       	adc	r8, r1
     18e:	81 1c       	adc	r8, r1
     190:	81 1c       	adc	r8, r1
     192:	81 1c       	adc	r8, r1
     194:	81 1c       	adc	r8, r1
     196:	81 1c       	adc	r8, r1
     198:	60 1c       	adc	r6, r0

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0a ed       	ldi	r16, 0xDA	; 218
     19c:	16 e0       	ldi	r17, 0x06	; 6
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e0       	ldi	r31, 0x07	; 7
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	fd d2       	rcall	.+1530   	; 0x7c6 <uxListRemove>
     1cc:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <uxCurrentNumberOfTasks>
     1d6:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	7b d2       	rcall	.+1270   	; 0x6e0 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	79 d2       	rcall	.+1266   	; 0x6e0 <vPortFree>
     1ee:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	b8 d3       	rcall	.+1904   	; 0x970 <vPortYield>
     200:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxCurrentTimerList>
     22a:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 13 0c 	call	0x1826	; 0x1826 <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 65 11 	call	0x22ca	; 0x22ca <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <xTaskResumeAll>
     25c:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxCurrentTimerList>
     260:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	a9 d2       	rcall	.+1362   	; 0x7c6 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 a6 10 	call	0x214c	; 0x214c <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 1e 11 	call	0x223c	; 0x223c <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
     2d0:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
     2d4:	a7 d6       	rcall	.+3406   	; 0x1024 <vQueueWaitForMessageRestricted>
     2d6:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	48 d3       	rcall	.+1680   	; 0x970 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
     2e2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	61 d2       	rcall	.+1218   	; 0x7c6 <uxListRemove>
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 65 11 	call	0x22ca	; 0x22ca <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__tablejump2__>
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 a6 10 	call	0x214c	; 0x214c <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 1e 11 	call	0x223c	; 0x223c <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 a6 10 	call	0x214c	; 0x214c <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	8e d1       	rcall	.+796    	; 0x6e0 <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
     3d8:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
     3dc:	9a d5       	rcall	.+2868   	; 0xf12 <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
     3e4:	0e 94 13 0c 	call	0x1826	; 0x1826 <vTaskSuspendAll>
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 65 11 	call	0x22ca	; 0x22ca <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
     3f6:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxOverflowTimerList>
     3fa:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	16 e0       	ldi	r17, 0x06	; 6
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	ee e6       	ldi	r30, 0x6E	; 110
     424:	f6 e4       	ldi	r31, 0x46	; 70
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a8 34       	cpi	r26, 0x48	; 72
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	28 e0       	ldi	r18, 0x08	; 8
     438:	a8 e4       	ldi	r26, 0x48	; 72
     43a:	b6 e0       	ldi	r27, 0x06	; 6
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	af 3a       	cpi	r26, 0xAF	; 175
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 ee 11 	call	0x23dc	; 0x23dc <main>
     44a:	0c 94 35 23 	jmp	0x466a	; 0x466a <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <lora_handler_create>:

/*
	This method creates a task that sends data to the server
*/
void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
	xTaskCreate(
     456:	e1 2c       	mov	r14, r1
     458:	f1 2c       	mov	r15, r1
     45a:	08 2f       	mov	r16, r24
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	48 e8       	ldi	r20, 0x88	; 136
     462:	51 e0       	ldi	r21, 0x01	; 1
     464:	6d e3       	ldi	r22, 0x3D	; 61
     466:	72 e0       	ldi	r23, 0x02	; 2
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	08 95       	ret

00000478 <lora_setup>:
#include "../Headers/m_lora_includes.h"

static char _out_buf[100];

void lora_setup(void)
{
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     488:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <lora_driver_rn2483_factory_reset>
     48c:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	84 e4       	ldi	r24, 0x44	; 68
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	0e 94 17 20 	call	0x402e	; 0x402e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     4a0:	0e 94 26 1a 	call	0x344c	; 0x344c <lora_driver_configure_to_eu868>
     4a4:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	87 e5       	ldi	r24, 0x57	; 87
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	0e 94 17 20 	call	0x402e	; 0x402e <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     4b8:	88 e4       	ldi	r24, 0x48	; 72
     4ba:	96 e0       	ldi	r25, 0x06	; 6
     4bc:	0e 94 0d 19 	call	0x321a	; 0x321a <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     4c0:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     4c4:	c8 e4       	ldi	r28, 0x48	; 72
     4c6:	d6 e0       	ldi	r29, 0x06	; 6
     4c8:	df 93       	push	r29
     4ca:	cf 93       	push	r28
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	80 e7       	ldi	r24, 0x70	; 112
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 17 20 	call	0x402e	; 0x402e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 28 19 	call	0x3250	; 0x3250 <lora_driver_set_device_identifier>
     4e2:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	84 e8       	ldi	r24, 0x84	; 132
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	9f 93       	push	r25
     4f4:	8f 93       	push	r24
     4f6:	0e 94 17 20 	call	0x402e	; 0x402e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     4fa:	ae 01       	movw	r20, r28
     4fc:	69 e9       	ldi	r22, 0x99	; 153
     4fe:	72 e0       	ldi	r23, 0x02	; 2
     500:	8a eb       	ldi	r24, 0xBA	; 186
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 00 1b 	call	0x3600	; 0x3600 <lora_driver_set_otaa_identity>
     508:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	89 e9       	ldi	r24, 0x99	; 153
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	9f 93       	push	r25
     51a:	8f 93       	push	r24
     51c:	8a eb       	ldi	r24, 0xBA	; 186
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	9f 93       	push	r25
     522:	8f 93       	push	r24
     524:	8b ec       	ldi	r24, 0xCB	; 203
     526:	92 e0       	ldi	r25, 0x02	; 2
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	0e 94 17 20 	call	0x402e	; 0x402e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     530:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lora_driver_save_mac>
     534:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	93 e0       	ldi	r25, 0x03	; 3
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	0e 94 17 20 	call	0x402e	; 0x402e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     548:	8d b7       	in	r24, 0x3d	; 61
     54a:	9e b7       	in	r25, 0x3e	; 62
     54c:	82 96       	adiw	r24, 0x22	; 34
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	9e bf       	out	0x3e, r25	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	8d bf       	out	0x3d, r24	; 61
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 1b 1a 	call	0x3436	; 0x3436 <lora_driver_set_adaptive_data_rate>
     55e:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	80 e1       	ldi	r24, 0x10	; 16
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	0e 94 17 20 	call	0x402e	; 0x402e <printf>
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	c5 e0       	ldi	r28, 0x05	; 5
     57c:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     57e:	01 e3       	ldi	r16, 0x31	; 49
     580:	13 e0       	ldi	r17, 0x03	; 3
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 61 19 	call	0x32c2	; 0x32c2 <lora_driver_join>
     588:	f8 2e       	mov	r15, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     58a:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	0e 94 17 20 	call	0x402e	; 0x402e <printf>

		if ( rc != LoRa_ACCEPTED)
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	88 e0       	ldi	r24, 0x08	; 8
     5ac:	f8 16       	cp	r15, r24
     5ae:	99 f0       	breq	.+38     	; 0x5d6 <lora_setup+0x15e>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     5b6:	8f e2       	ldi	r24, 0x2F	; 47
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskDelay>
     5be:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     5c0:	01 f7       	brne	.-64     	; 0x582 <lora_setup+0x10a>
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <lora_setup+0x150>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     5c4:	d5 d1       	rcall	.+938    	; 0x970 <vPortYield>
     5c6:	fe cf       	rjmp	.-4      	; 0x5c4 <lora_setup+0x14c>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 98 17 	call	0x2f30	; 0x2f30 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <led_fast_blink>
     5d4:	f7 cf       	rjmp	.-18     	; 0x5c4 <lora_setup+0x14c>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <led_led_on>
		while (1)
		{
			taskYIELD();
		}
	}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	08 95       	ret

000005e8 <driver_init>:

#include "../Headers/m_lora_includes.h"

void driver_init()
{
	stdioCreate(0);
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 13 12 	call	0x2426	; 0x2426 <stdioCreate>
	
	sei(); // enables interrupts
     5ee:	78 94       	sei
	
	/*
		Initialize LoRa Driver
	*/
	
	hal_create(LED_TASK_PRIORITY);
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <hal_create>
	lora_driver_create(ser_USART1);	
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <lora_driver_create>
     5fc:	08 95       	ret

000005fe <lora_handler_task>:
void lora_handler_task(void *pvParameters)
{
	/*
		Hardware reset of LoRaWAN transceiver
	*/
	lora_driver_reset_rn2483(1); // Activate reset line
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 e7 18 	call	0x31ce	; 0x31ce <lora_driver_reset_rn2483>
	vTaskDelay(2); 
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskDelay>
	lora_driver_reset_rn2483(0); // Release reset line
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 e7 18 	call	0x31ce	; 0x31ce <lora_driver_reset_rn2483>
	vTaskDelay(150); // Wait for transceiver module to wake up after reset
     612:	86 e9       	ldi	r24, 0x96	; 150
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskDelay>
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     61a:	0e 94 a4 18 	call	0x3148	; 0x3148 <lora_driver_flush_buffers>

	lora_setup();
     61e:	2c df       	rcall	.-424    	; 0x478 <lora_setup>

	_uplink_payload.len = 6;
     620:	ec ea       	ldi	r30, 0xAC	; 172
     622:	f6 e0       	ldi	r31, 0x06	; 6
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	80 83       	st	Z, r24
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     62c:	ef 01       	movw	r28, r30
     62e:	0f 2e       	mov	r0, r31
     630:	f0 e3       	ldi	r31, 0x30	; 48
     632:	af 2e       	mov	r10, r31
     634:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
     636:	0f 2e       	mov	r0, r31
     638:	f9 e3       	ldi	r31, 0x39	; 57
     63a:	bf 2e       	mov	r11, r31
     63c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
     63e:	68 94       	set
     640:	cc 24       	eor	r12, r12
     642:	c1 f8       	bld	r12, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
     644:	0f 2e       	mov	r0, r31
     646:	f3 ea       	ldi	r31, 0xA3	; 163
     648:	df 2e       	mov	r13, r31
     64a:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     64c:	68 94       	set
     64e:	ee 24       	eor	r14, r14
     650:	e2 f8       	bld	r14, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     652:	0f 2e       	mov	r0, r31
     654:	fa e1       	ldi	r31, 0x1A	; 26
     656:	ff 2e       	mov	r15, r31
     658:	f0 2d       	mov	r31, r0

		led_short_puls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
     65a:	01 e5       	ldi	r16, 0x51	; 81
     65c:	13 e0       	ldi	r17, 0x03	; 3
	_uplink_payload.port_no = 2;


	for(;;)
	{
		vTaskDelay(pdMS_TO_TICKS(5000UL));
     65e:	8f e2       	ldi	r24, 0x2F	; 47
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskDelay>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     666:	aa 82       	std	Y+2, r10	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     668:	bb 82       	std	Y+3, r11	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     66a:	cc 82       	std	Y+4, r12	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     66c:	dd 82       	std	Y+5, r13	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     66e:	ee 82       	std	Y+6, r14	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     670:	ff 82       	std	Y+7, r15	; 0x07

		led_short_puls(led_ST4);  // OPTIONAL
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
     678:	be 01       	movw	r22, r28
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 84 19 	call	0x3308	; 0x3308 <lora_driver_sent_upload_message>
     680:	0e 94 21 1b 	call	0x3642	; 0x3642 <lora_driver_map_return_code_to_text>
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	1f 93       	push	r17
     68a:	0f 93       	push	r16
     68c:	0e 94 17 20 	call	0x402e	; 0x402e <printf>
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	e2 cf       	rjmp	.-60     	; 0x65e <lora_handler_task+0x60>

0000069a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     69a:	e8 e0       	ldi	r30, 0x08	; 8
     69c:	f1 e0       	ldi	r31, 0x01	; 1
     69e:	90 81       	ld	r25, Z
     6a0:	90 7f       	andi	r25, 0xF0	; 240
     6a2:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     6a4:	90 81       	ld	r25, Z
     6a6:	8f 70       	andi	r24, 0x0F	; 15
     6a8:	98 2b       	or	r25, r24
     6aa:	90 83       	st	Z, r25
     6ac:	08 95       	ret

000006ae <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     6ae:	e8 e0       	ldi	r30, 0x08	; 8
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	80 81       	ld	r24, Z
     6b4:	80 7f       	andi	r24, 0xF0	; 240
     6b6:	80 83       	st	Z, r24
     6b8:	08 95       	ret

000006ba <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     6c0:	0e 94 13 0c 	call	0x1826	; 0x1826 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     6c4:	ce 01       	movw	r24, r28
     6c6:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <malloc>
     6ca:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6cc:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     6d0:	20 97       	sbiw	r28, 0x00	; 0
     6d2:	11 f4       	brne	.+4      	; 0x6d8 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     6d4:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     6d8:	ce 01       	movw	r24, r28
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
    if( pv )
     6e4:	00 97       	sbiw	r24, 0x00	; 0
     6e6:	41 f0       	breq	.+16     	; 0x6f8 <vPortFree+0x18>
     6e8:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     6ea:	0e 94 13 0c 	call	0x1826	; 0x1826 <vTaskSuspendAll>
        {
            free( pv );
     6ee:	ce 01       	movw	r24, r28
     6f0:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     6f4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <xTaskResumeAll>
    }
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6fe:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     700:	03 96       	adiw	r24, 0x03	; 3
     702:	92 83       	std	Z+2, r25	; 0x02
     704:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     706:	2f ef       	ldi	r18, 0xFF	; 255
     708:	3f ef       	ldi	r19, 0xFF	; 255
     70a:	34 83       	std	Z+4, r19	; 0x04
     70c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     70e:	96 83       	std	Z+6, r25	; 0x06
     710:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     712:	90 87       	std	Z+8, r25	; 0x08
     714:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     716:	10 82       	st	Z, r1
     718:	08 95       	ret

0000071a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     71a:	fc 01       	movw	r30, r24
     71c:	11 86       	std	Z+9, r1	; 0x09
     71e:	10 86       	std	Z+8, r1	; 0x08
     720:	08 95       	ret

00000722 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	9c 01       	movw	r18, r24
     728:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     72a:	dc 01       	movw	r26, r24
     72c:	11 96       	adiw	r26, 0x01	; 1
     72e:	cd 91       	ld	r28, X+
     730:	dc 91       	ld	r29, X
     732:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     734:	d3 83       	std	Z+3, r29	; 0x03
     736:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     738:	8c 81       	ldd	r24, Y+4	; 0x04
     73a:	9d 81       	ldd	r25, Y+5	; 0x05
     73c:	95 83       	std	Z+5, r25	; 0x05
     73e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	9d 81       	ldd	r25, Y+5	; 0x05
     744:	dc 01       	movw	r26, r24
     746:	13 96       	adiw	r26, 0x03	; 3
     748:	7c 93       	st	X, r23
     74a:	6e 93       	st	-X, r22
     74c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     74e:	7d 83       	std	Y+5, r23	; 0x05
     750:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     752:	31 87       	std	Z+9, r19	; 0x09
     754:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     756:	f9 01       	movw	r30, r18
     758:	80 81       	ld	r24, Z
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	80 83       	st	Z, r24
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     76a:	48 81       	ld	r20, Y
     76c:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     76e:	4f 3f       	cpi	r20, 0xFF	; 255
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	52 07       	cpc	r21, r18
     774:	21 f4       	brne	.+8      	; 0x77e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     776:	fc 01       	movw	r30, r24
     778:	a7 81       	ldd	r26, Z+7	; 0x07
     77a:	b0 85       	ldd	r27, Z+8	; 0x08
     77c:	0d c0       	rjmp	.+26     	; 0x798 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     77e:	dc 01       	movw	r26, r24
     780:	13 96       	adiw	r26, 0x03	; 3
     782:	01 c0       	rjmp	.+2      	; 0x786 <vListInsert+0x22>
     784:	df 01       	movw	r26, r30
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	ed 91       	ld	r30, X+
     78a:	fc 91       	ld	r31, X
     78c:	13 97       	sbiw	r26, 0x03	; 3
     78e:	20 81       	ld	r18, Z
     790:	31 81       	ldd	r19, Z+1	; 0x01
     792:	42 17       	cp	r20, r18
     794:	53 07       	cpc	r21, r19
     796:	b0 f7       	brcc	.-20     	; 0x784 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     798:	12 96       	adiw	r26, 0x02	; 2
     79a:	ed 91       	ld	r30, X+
     79c:	fc 91       	ld	r31, X
     79e:	13 97       	sbiw	r26, 0x03	; 3
     7a0:	fb 83       	std	Y+3, r31	; 0x03
     7a2:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7a4:	d5 83       	std	Z+5, r29	; 0x05
     7a6:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     7a8:	bd 83       	std	Y+5, r27	; 0x05
     7aa:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	dc 93       	st	X, r29
     7b0:	ce 93       	st	-X, r28
     7b2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     7b4:	99 87       	std	Y+9, r25	; 0x09
     7b6:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 81       	ld	r18, Z
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	20 83       	st	Z, r18
}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     7cc:	a0 85       	ldd	r26, Z+8	; 0x08
     7ce:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7d0:	c2 81       	ldd	r28, Z+2	; 0x02
     7d2:	d3 81       	ldd	r29, Z+3	; 0x03
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	95 81       	ldd	r25, Z+5	; 0x05
     7d8:	9d 83       	std	Y+5, r25	; 0x05
     7da:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7dc:	c4 81       	ldd	r28, Z+4	; 0x04
     7de:	d5 81       	ldd	r29, Z+5	; 0x05
     7e0:	82 81       	ldd	r24, Z+2	; 0x02
     7e2:	93 81       	ldd	r25, Z+3	; 0x03
     7e4:	9b 83       	std	Y+3, r25	; 0x03
     7e6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     7e8:	11 96       	adiw	r26, 0x01	; 1
     7ea:	8d 91       	ld	r24, X+
     7ec:	9c 91       	ld	r25, X
     7ee:	12 97       	sbiw	r26, 0x02	; 2
     7f0:	e8 17       	cp	r30, r24
     7f2:	f9 07       	cpc	r31, r25
     7f4:	31 f4       	brne	.+12     	; 0x802 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     7f6:	84 81       	ldd	r24, Z+4	; 0x04
     7f8:	95 81       	ldd	r25, Z+5	; 0x05
     7fa:	12 96       	adiw	r26, 0x02	; 2
     7fc:	9c 93       	st	X, r25
     7fe:	8e 93       	st	-X, r24
     800:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     802:	11 86       	std	Z+9, r1	; 0x09
     804:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     806:	8c 91       	ld	r24, X
     808:	81 50       	subi	r24, 0x01	; 1
     80a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     80c:	8c 91       	ld	r24, X
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     814:	31 e1       	ldi	r19, 0x11	; 17
     816:	fc 01       	movw	r30, r24
     818:	30 83       	st	Z, r19
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	22 e2       	ldi	r18, 0x22	; 34
     81e:	20 83       	st	Z, r18
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	a3 e3       	ldi	r26, 0x33	; 51
     824:	a0 83       	st	Z, r26
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	60 83       	st	Z, r22
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	70 83       	st	Z, r23
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	10 82       	st	Z, r1
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	10 82       	st	Z, r1
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	60 e8       	ldi	r22, 0x80	; 128
     83a:	60 83       	st	Z, r22
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	10 82       	st	Z, r1
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	10 82       	st	Z, r1
     844:	31 97       	sbiw	r30, 0x01	; 1
     846:	10 82       	st	Z, r1
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	62 e0       	ldi	r22, 0x02	; 2
     84c:	60 83       	st	Z, r22
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	63 e0       	ldi	r22, 0x03	; 3
     852:	60 83       	st	Z, r22
     854:	31 97       	sbiw	r30, 0x01	; 1
     856:	64 e0       	ldi	r22, 0x04	; 4
     858:	60 83       	st	Z, r22
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	65 e0       	ldi	r22, 0x05	; 5
     85e:	60 83       	st	Z, r22
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	66 e0       	ldi	r22, 0x06	; 6
     864:	60 83       	st	Z, r22
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	67 e0       	ldi	r22, 0x07	; 7
     86a:	60 83       	st	Z, r22
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	68 e0       	ldi	r22, 0x08	; 8
     870:	60 83       	st	Z, r22
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	69 e0       	ldi	r22, 0x09	; 9
     876:	60 83       	st	Z, r22
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	60 e1       	ldi	r22, 0x10	; 16
     87c:	60 83       	st	Z, r22
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	30 83       	st	Z, r19
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	32 e1       	ldi	r19, 0x12	; 18
     886:	30 83       	st	Z, r19
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	33 e1       	ldi	r19, 0x13	; 19
     88c:	30 83       	st	Z, r19
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	34 e1       	ldi	r19, 0x14	; 20
     892:	30 83       	st	Z, r19
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	35 e1       	ldi	r19, 0x15	; 21
     898:	30 83       	st	Z, r19
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	36 e1       	ldi	r19, 0x16	; 22
     89e:	30 83       	st	Z, r19
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	37 e1       	ldi	r19, 0x17	; 23
     8a4:	30 83       	st	Z, r19
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	38 e1       	ldi	r19, 0x18	; 24
     8aa:	30 83       	st	Z, r19
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	39 e1       	ldi	r19, 0x19	; 25
     8b0:	30 83       	st	Z, r19
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	30 e2       	ldi	r19, 0x20	; 32
     8b6:	30 83       	st	Z, r19
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	31 e2       	ldi	r19, 0x21	; 33
     8bc:	30 83       	st	Z, r19
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	20 83       	st	Z, r18
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	23 e2       	ldi	r18, 0x23	; 35
     8c6:	20 83       	st	Z, r18
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	40 83       	st	Z, r20
     8cc:	31 97       	sbiw	r30, 0x01	; 1
     8ce:	50 83       	st	Z, r21
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	26 e2       	ldi	r18, 0x26	; 38
     8d4:	20 83       	st	Z, r18
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	27 e2       	ldi	r18, 0x27	; 39
     8da:	20 83       	st	Z, r18
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	28 e2       	ldi	r18, 0x28	; 40
     8e0:	20 83       	st	Z, r18
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	29 e2       	ldi	r18, 0x29	; 41
     8e6:	20 83       	st	Z, r18
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	20 e3       	ldi	r18, 0x30	; 48
     8ec:	20 83       	st	Z, r18
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	21 e3       	ldi	r18, 0x31	; 49
     8f2:	20 83       	st	Z, r18
     8f4:	89 97       	sbiw	r24, 0x29	; 41
     8f6:	08 95       	ret

000008f8 <xPortStartScheduler>:
     8f8:	a8 95       	wdr
     8fa:	90 ec       	ldi	r25, 0xC0	; 192
     8fc:	88 e1       	ldi	r24, 0x18	; 24
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	a8 95       	wdr
     904:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     908:	0f be       	out	0x3f, r0	; 63
     90a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     90e:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     912:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     916:	cd 91       	ld	r28, X+
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	dd 91       	ld	r29, X+
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	6f 90       	pop	r6
     952:	5f 90       	pop	r5
     954:	4f 90       	pop	r4
     956:	3f 90       	pop	r3
     958:	2f 90       	pop	r2
     95a:	1f 90       	pop	r1
     95c:	0f 90       	pop	r0
     95e:	0c be       	out	0x3c, r0	; 60
     960:	0f 90       	pop	r0
     962:	0b be       	out	0x3b, r0	; 59
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	08 95       	ret
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	08 95       	ret

00000970 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	0f 92       	push	r0
     978:	0b b6       	in	r0, 0x3b	; 59
     97a:	0f 92       	push	r0
     97c:	0c b6       	in	r0, 0x3c	; 60
     97e:	0f 92       	push	r0
     980:	1f 92       	push	r1
     982:	11 24       	eor	r1, r1
     984:	2f 92       	push	r2
     986:	3f 92       	push	r3
     988:	4f 92       	push	r4
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	2f 93       	push	r18
     9a6:	3f 93       	push	r19
     9a8:	4f 93       	push	r20
     9aa:	5f 93       	push	r21
     9ac:	6f 93       	push	r22
     9ae:	7f 93       	push	r23
     9b0:	8f 93       	push	r24
     9b2:	9f 93       	push	r25
     9b4:	af 93       	push	r26
     9b6:	bf 93       	push	r27
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
     9c0:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     9c4:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     9c8:	0d b6       	in	r0, 0x3d	; 61
     9ca:	0d 92       	st	X+, r0
     9cc:	0e b6       	in	r0, 0x3e	; 62
     9ce:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     9d0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     9d4:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     9d8:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     9dc:	cd 91       	ld	r28, X+
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	dd 91       	ld	r29, X+
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	7f 90       	pop	r7
     a16:	6f 90       	pop	r6
     a18:	5f 90       	pop	r5
     a1a:	4f 90       	pop	r4
     a1c:	3f 90       	pop	r3
     a1e:	2f 90       	pop	r2
     a20:	1f 90       	pop	r1
     a22:	0f 90       	pop	r0
     a24:	0c be       	out	0x3c, r0	; 60
     a26:	0f 90       	pop	r0
     a28:	0b be       	out	0x3b, r0	; 59
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a30:	08 95       	ret

00000a32 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     a32:	0f 92       	push	r0
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	0f 92       	push	r0
     a3a:	0b b6       	in	r0, 0x3b	; 59
     a3c:	0f 92       	push	r0
     a3e:	0c b6       	in	r0, 0x3c	; 60
     a40:	0f 92       	push	r0
     a42:	1f 92       	push	r1
     a44:	11 24       	eor	r1, r1
     a46:	2f 92       	push	r2
     a48:	3f 92       	push	r3
     a4a:	4f 92       	push	r4
     a4c:	5f 92       	push	r5
     a4e:	6f 92       	push	r6
     a50:	7f 92       	push	r7
     a52:	8f 92       	push	r8
     a54:	9f 92       	push	r9
     a56:	af 92       	push	r10
     a58:	bf 92       	push	r11
     a5a:	cf 92       	push	r12
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
     a82:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     a86:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     a8a:	0d b6       	in	r0, 0x3d	; 61
     a8c:	0d 92       	st	X+, r0
     a8e:	0e b6       	in	r0, 0x3e	; 62
     a90:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     a92:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     a94:	d8 d6       	rcall	.+3504   	; 0x1846 <xTaskIncrementTick>
     a96:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a98:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     a9c:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     aa0:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     aa4:	cd 91       	ld	r28, X+
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	dd 91       	ld	r29, X+
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	bf 90       	pop	r11
     ad6:	af 90       	pop	r10
     ad8:	9f 90       	pop	r9
     ada:	8f 90       	pop	r8
     adc:	7f 90       	pop	r7
     ade:	6f 90       	pop	r6
     ae0:	5f 90       	pop	r5
     ae2:	4f 90       	pop	r4
     ae4:	3f 90       	pop	r3
     ae6:	2f 90       	pop	r2
     ae8:	1f 90       	pop	r1
     aea:	0f 90       	pop	r0
     aec:	0c be       	out	0x3c, r0	; 60
     aee:	0f 90       	pop	r0
     af0:	0b be       	out	0x3b, r0	; 59
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     af8:	08 95       	ret

00000afa <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     afa:	9b df       	rcall	.-202    	; 0xa32 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     afc:	18 95       	reti

00000afe <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	0f 92       	push	r0
     b04:	fc 01       	movw	r30, r24
     b06:	92 8d       	ldd	r25, Z+26	; 0x1a
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	91 11       	cpse	r25, r1
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	08 95       	ret

00000b14 <prvCopyDataToQueue>:
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
     b1e:	04 2f       	mov	r16, r20
     b20:	1a 8d       	ldd	r17, Y+26	; 0x1a
     b22:	4c 8d       	ldd	r20, Y+28	; 0x1c
     b24:	41 11       	cpse	r20, r1
     b26:	0c c0       	rjmp	.+24     	; 0xb40 <prvCopyDataToQueue+0x2c>
     b28:	88 81       	ld	r24, Y
     b2a:	99 81       	ldd	r25, Y+1	; 0x01
     b2c:	89 2b       	or	r24, r25
     b2e:	09 f0       	breq	.+2      	; 0xb32 <prvCopyDataToQueue+0x1e>
     b30:	42 c0       	rjmp	.+132    	; 0xbb6 <prvCopyDataToQueue+0xa2>
     b32:	8c 81       	ldd	r24, Y+4	; 0x04
     b34:	9d 81       	ldd	r25, Y+5	; 0x05
     b36:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <xTaskPriorityDisinherit>
     b3a:	1d 82       	std	Y+5, r1	; 0x05
     b3c:	1c 82       	std	Y+4, r1	; 0x04
     b3e:	42 c0       	rjmp	.+132    	; 0xbc4 <prvCopyDataToQueue+0xb0>
     b40:	01 11       	cpse	r16, r1
     b42:	17 c0       	rjmp	.+46     	; 0xb72 <prvCopyDataToQueue+0x5e>
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	9b 81       	ldd	r25, Y+3	; 0x03
     b4a:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <memcpy>
     b4e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	9b 81       	ldd	r25, Y+3	; 0x03
     b54:	82 0f       	add	r24, r18
     b56:	91 1d       	adc	r25, r1
     b58:	9b 83       	std	Y+3, r25	; 0x03
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	2c 81       	ldd	r18, Y+4	; 0x04
     b5e:	3d 81       	ldd	r19, Y+5	; 0x05
     b60:	82 17       	cp	r24, r18
     b62:	93 07       	cpc	r25, r19
     b64:	50 f1       	brcs	.+84     	; 0xbba <prvCopyDataToQueue+0xa6>
     b66:	88 81       	ld	r24, Y
     b68:	99 81       	ldd	r25, Y+1	; 0x01
     b6a:	9b 83       	std	Y+3, r25	; 0x03
     b6c:	8a 83       	std	Y+2, r24	; 0x02
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	29 c0       	rjmp	.+82     	; 0xbc4 <prvCopyDataToQueue+0xb0>
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <memcpy>
     b7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	91 95       	neg	r25
     b82:	81 95       	neg	r24
     b84:	91 09       	sbc	r25, r1
     b86:	2e 81       	ldd	r18, Y+6	; 0x06
     b88:	3f 81       	ldd	r19, Y+7	; 0x07
     b8a:	28 0f       	add	r18, r24
     b8c:	39 1f       	adc	r19, r25
     b8e:	3f 83       	std	Y+7, r19	; 0x07
     b90:	2e 83       	std	Y+6, r18	; 0x06
     b92:	48 81       	ld	r20, Y
     b94:	59 81       	ldd	r21, Y+1	; 0x01
     b96:	24 17       	cp	r18, r20
     b98:	35 07       	cpc	r19, r21
     b9a:	30 f4       	brcc	.+12     	; 0xba8 <prvCopyDataToQueue+0x94>
     b9c:	2c 81       	ldd	r18, Y+4	; 0x04
     b9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ba0:	82 0f       	add	r24, r18
     ba2:	93 1f       	adc	r25, r19
     ba4:	9f 83       	std	Y+7, r25	; 0x07
     ba6:	8e 83       	std	Y+6, r24	; 0x06
     ba8:	02 30       	cpi	r16, 0x02	; 2
     baa:	49 f4       	brne	.+18     	; 0xbbe <prvCopyDataToQueue+0xaa>
     bac:	11 23       	and	r17, r17
     bae:	49 f0       	breq	.+18     	; 0xbc2 <prvCopyDataToQueue+0xae>
     bb0:	11 50       	subi	r17, 0x01	; 1
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <prvCopyDataToQueue+0xb0>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <prvCopyDataToQueue+0xb0>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <prvCopyDataToQueue+0xb0>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <prvCopyDataToQueue+0xb0>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	1f 5f       	subi	r17, 0xFF	; 255
     bc6:	1a 8f       	std	Y+26, r17	; 0x1a
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	08 95       	ret

00000bd2 <prvCopyDataFromQueue>:
     bd2:	fc 01       	movw	r30, r24
     bd4:	44 8d       	ldd	r20, Z+28	; 0x1c
     bd6:	44 23       	and	r20, r20
     bd8:	a9 f0       	breq	.+42     	; 0xc04 <prvCopyDataFromQueue+0x32>
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	26 81       	ldd	r18, Z+6	; 0x06
     bde:	37 81       	ldd	r19, Z+7	; 0x07
     be0:	24 0f       	add	r18, r20
     be2:	35 1f       	adc	r19, r21
     be4:	37 83       	std	Z+7, r19	; 0x07
     be6:	26 83       	std	Z+6, r18	; 0x06
     be8:	84 81       	ldd	r24, Z+4	; 0x04
     bea:	95 81       	ldd	r25, Z+5	; 0x05
     bec:	28 17       	cp	r18, r24
     bee:	39 07       	cpc	r19, r25
     bf0:	20 f0       	brcs	.+8      	; 0xbfa <prvCopyDataFromQueue+0x28>
     bf2:	80 81       	ld	r24, Z
     bf4:	91 81       	ldd	r25, Z+1	; 0x01
     bf6:	97 83       	std	Z+7, r25	; 0x07
     bf8:	86 83       	std	Z+6, r24	; 0x06
     bfa:	cb 01       	movw	r24, r22
     bfc:	66 81       	ldd	r22, Z+6	; 0x06
     bfe:	77 81       	ldd	r23, Z+7	; 0x07
     c00:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <memcpy>
     c04:	08 95       	ret

00000c06 <prvUnlockQueue>:
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	8c 01       	movw	r16, r24
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	0f 92       	push	r0
     c18:	fc 01       	movw	r30, r24
     c1a:	c6 8d       	ldd	r28, Z+30	; 0x1e
     c1c:	1c 16       	cp	r1, r28
     c1e:	ac f4       	brge	.+42     	; 0xc4a <prvUnlockQueue+0x44>
     c20:	81 89       	ldd	r24, Z+17	; 0x11
     c22:	81 11       	cpse	r24, r1
     c24:	06 c0       	rjmp	.+12     	; 0xc32 <prvUnlockQueue+0x2c>
     c26:	11 c0       	rjmp	.+34     	; 0xc4a <prvUnlockQueue+0x44>
     c28:	f8 01       	movw	r30, r16
     c2a:	81 89       	ldd	r24, Z+17	; 0x11
     c2c:	81 11       	cpse	r24, r1
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <prvUnlockQueue+0x34>
     c30:	0c c0       	rjmp	.+24     	; 0xc4a <prvUnlockQueue+0x44>
     c32:	78 01       	movw	r14, r16
     c34:	f1 e1       	ldi	r31, 0x11	; 17
     c36:	ef 0e       	add	r14, r31
     c38:	f1 1c       	adc	r15, r1
     c3a:	c7 01       	movw	r24, r14
     c3c:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <xTaskRemoveFromEventList>
     c40:	81 11       	cpse	r24, r1
     c42:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <vTaskMissedYield>
     c46:	c1 50       	subi	r28, 0x01	; 1
     c48:	79 f7       	brne	.-34     	; 0xc28 <prvUnlockQueue+0x22>
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	f8 01       	movw	r30, r16
     c4e:	86 8f       	std	Z+30, r24	; 0x1e
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	0f 92       	push	r0
     c5a:	c5 8d       	ldd	r28, Z+29	; 0x1d
     c5c:	1c 16       	cp	r1, r28
     c5e:	a4 f4       	brge	.+40     	; 0xc88 <prvUnlockQueue+0x82>
     c60:	80 85       	ldd	r24, Z+8	; 0x08
     c62:	81 11       	cpse	r24, r1
     c64:	06 c0       	rjmp	.+12     	; 0xc72 <prvUnlockQueue+0x6c>
     c66:	10 c0       	rjmp	.+32     	; 0xc88 <prvUnlockQueue+0x82>
     c68:	f8 01       	movw	r30, r16
     c6a:	80 85       	ldd	r24, Z+8	; 0x08
     c6c:	81 11       	cpse	r24, r1
     c6e:	05 c0       	rjmp	.+10     	; 0xc7a <prvUnlockQueue+0x74>
     c70:	0b c0       	rjmp	.+22     	; 0xc88 <prvUnlockQueue+0x82>
     c72:	78 01       	movw	r14, r16
     c74:	f8 e0       	ldi	r31, 0x08	; 8
     c76:	ef 0e       	add	r14, r31
     c78:	f1 1c       	adc	r15, r1
     c7a:	c7 01       	movw	r24, r14
     c7c:	e3 d7       	rcall	.+4038   	; 0x1c44 <xTaskRemoveFromEventList>
     c7e:	81 11       	cpse	r24, r1
     c80:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <vTaskMissedYield>
     c84:	c1 50       	subi	r28, 0x01	; 1
     c86:	81 f7       	brne	.-32     	; 0xc68 <prvUnlockQueue+0x62>
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	f8 01       	movw	r30, r16
     c8c:	85 8f       	std	Z+29, r24	; 0x1d
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	08 95       	ret

00000c9e <xQueueGenericReset>:
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	0f 92       	push	r0
     caa:	e8 81       	ld	r30, Y
     cac:	f9 81       	ldd	r31, Y+1	; 0x01
     cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	82 9f       	mul	r24, r18
     cb8:	a0 01       	movw	r20, r0
     cba:	83 9f       	mul	r24, r19
     cbc:	50 0d       	add	r21, r0
     cbe:	92 9f       	mul	r25, r18
     cc0:	50 0d       	add	r21, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	4e 0f       	add	r20, r30
     cc6:	5f 1f       	adc	r21, r31
     cc8:	5d 83       	std	Y+5, r21	; 0x05
     cca:	4c 83       	std	Y+4, r20	; 0x04
     ccc:	1a 8e       	std	Y+26, r1	; 0x1a
     cce:	fb 83       	std	Y+3, r31	; 0x03
     cd0:	ea 83       	std	Y+2, r30	; 0x02
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	82 9f       	mul	r24, r18
     cd6:	a0 01       	movw	r20, r0
     cd8:	83 9f       	mul	r24, r19
     cda:	50 0d       	add	r21, r0
     cdc:	92 9f       	mul	r25, r18
     cde:	50 0d       	add	r21, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	cf 01       	movw	r24, r30
     ce4:	84 0f       	add	r24, r20
     ce6:	95 1f       	adc	r25, r21
     ce8:	9f 83       	std	Y+7, r25	; 0x07
     cea:	8e 83       	std	Y+6, r24	; 0x06
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	8d 8f       	std	Y+29, r24	; 0x1d
     cf0:	8e 8f       	std	Y+30, r24	; 0x1e
     cf2:	61 11       	cpse	r22, r1
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <xQueueGenericReset+0x6c>
     cf6:	88 85       	ldd	r24, Y+8	; 0x08
     cf8:	88 23       	and	r24, r24
     cfa:	69 f0       	breq	.+26     	; 0xd16 <xQueueGenericReset+0x78>
     cfc:	ce 01       	movw	r24, r28
     cfe:	08 96       	adiw	r24, 0x08	; 8
     d00:	a1 d7       	rcall	.+3906   	; 0x1c44 <xTaskRemoveFromEventList>
     d02:	88 23       	and	r24, r24
     d04:	41 f0       	breq	.+16     	; 0xd16 <xQueueGenericReset+0x78>
     d06:	34 de       	rcall	.-920    	; 0x970 <vPortYield>
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <xQueueGenericReset+0x78>
     d0a:	ce 01       	movw	r24, r28
     d0c:	08 96       	adiw	r24, 0x08	; 8
     d0e:	f7 dc       	rcall	.-1554   	; 0x6fe <vListInitialise>
     d10:	ce 01       	movw	r24, r28
     d12:	41 96       	adiw	r24, 0x11	; 17
     d14:	f4 dc       	rcall	.-1560   	; 0x6fe <vListInitialise>
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <xQueueGenericCreate>:
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	08 2f       	mov	r16, r24
     d2e:	16 2f       	mov	r17, r22
     d30:	f4 2e       	mov	r15, r20
     d32:	66 23       	and	r22, r22
     d34:	b9 f0       	breq	.+46     	; 0xd64 <xQueueGenericCreate+0x42>
     d36:	86 9f       	mul	r24, r22
     d38:	c0 01       	movw	r24, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	81 96       	adiw	r24, 0x21	; 33
     d3e:	bd dc       	rcall	.-1670   	; 0x6ba <pvPortMalloc>
     d40:	ec 01       	movw	r28, r24
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	41 f4       	brne	.+16     	; 0xd56 <xQueueGenericCreate+0x34>
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <xQueueGenericCreate+0x4e>
     d48:	0b 8f       	std	Y+27, r16	; 0x1b
     d4a:	1c 8f       	std	Y+28, r17	; 0x1c
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	ce 01       	movw	r24, r28
     d50:	a6 df       	rcall	.-180    	; 0xc9e <xQueueGenericReset>
     d52:	f8 a2       	std	Y+32, r15	; 0x20
     d54:	0d c0       	rjmp	.+26     	; 0xd70 <xQueueGenericCreate+0x4e>
     d56:	81 96       	adiw	r24, 0x21	; 33
     d58:	99 83       	std	Y+1, r25	; 0x01
     d5a:	88 83       	st	Y, r24
     d5c:	f5 cf       	rjmp	.-22     	; 0xd48 <xQueueGenericCreate+0x26>
     d5e:	d9 83       	std	Y+1, r29	; 0x01
     d60:	c8 83       	st	Y, r28
     d62:	f2 cf       	rjmp	.-28     	; 0xd48 <xQueueGenericCreate+0x26>
     d64:	81 e2       	ldi	r24, 0x21	; 33
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a8 dc       	rcall	.-1712   	; 0x6ba <pvPortMalloc>
     d6a:	ec 01       	movw	r28, r24
     d6c:	89 2b       	or	r24, r25
     d6e:	b9 f7       	brne	.-18     	; 0xd5e <xQueueGenericCreate+0x3c>
     d70:	ce 01       	movw	r24, r28
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	08 95       	ret

00000d7e <xQueueGenericSend>:
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	00 d0       	rcall	.+0      	; 0xd96 <xQueueGenericSend+0x18>
     d96:	1f 92       	push	r1
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	8c 01       	movw	r16, r24
     da0:	6b 01       	movw	r12, r22
     da2:	5d 83       	std	Y+5, r21	; 0x05
     da4:	4c 83       	std	Y+4, r20	; 0x04
     da6:	a2 2e       	mov	r10, r18
     da8:	b1 2c       	mov	r11, r1
     daa:	99 24       	eor	r9, r9
     dac:	93 94       	inc	r9
     dae:	7c 01       	movw	r14, r24
     db0:	88 e0       	ldi	r24, 0x08	; 8
     db2:	e8 0e       	add	r14, r24
     db4:	f1 1c       	adc	r15, r1
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	0f 92       	push	r0
     dbc:	f8 01       	movw	r30, r16
     dbe:	92 8d       	ldd	r25, Z+26	; 0x1a
     dc0:	83 8d       	ldd	r24, Z+27	; 0x1b
     dc2:	98 17       	cp	r25, r24
     dc4:	18 f0       	brcs	.+6      	; 0xdcc <xQueueGenericSend+0x4e>
     dc6:	f2 e0       	ldi	r31, 0x02	; 2
     dc8:	af 12       	cpse	r10, r31
     dca:	15 c0       	rjmp	.+42     	; 0xdf6 <xQueueGenericSend+0x78>
     dcc:	4a 2d       	mov	r20, r10
     dce:	b6 01       	movw	r22, r12
     dd0:	c8 01       	movw	r24, r16
     dd2:	a0 de       	rcall	.-704    	; 0xb14 <prvCopyDataToQueue>
     dd4:	f8 01       	movw	r30, r16
     dd6:	91 89       	ldd	r25, Z+17	; 0x11
     dd8:	99 23       	and	r25, r25
     dda:	39 f0       	breq	.+14     	; 0xdea <xQueueGenericSend+0x6c>
     ddc:	c8 01       	movw	r24, r16
     dde:	41 96       	adiw	r24, 0x11	; 17
     de0:	31 d7       	rcall	.+3682   	; 0x1c44 <xTaskRemoveFromEventList>
     de2:	88 23       	and	r24, r24
     de4:	21 f0       	breq	.+8      	; 0xdee <xQueueGenericSend+0x70>
     de6:	c4 dd       	rcall	.-1144   	; 0x970 <vPortYield>
     de8:	02 c0       	rjmp	.+4      	; 0xdee <xQueueGenericSend+0x70>
     dea:	81 11       	cpse	r24, r1
     dec:	c1 dd       	rcall	.-1150   	; 0x970 <vPortYield>
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	45 c0       	rjmp	.+138    	; 0xe80 <xQueueGenericSend+0x102>
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	9d 81       	ldd	r25, Y+5	; 0x05
     dfa:	89 2b       	or	r24, r25
     dfc:	21 f4       	brne	.+8      	; 0xe06 <xQueueGenericSend+0x88>
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	3d c0       	rjmp	.+122    	; 0xe80 <xQueueGenericSend+0x102>
     e06:	b1 10       	cpse	r11, r1
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <xQueueGenericSend+0x94>
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	62 d7       	rcall	.+3780   	; 0x1cd4 <vTaskInternalSetTimeOutState>
     e10:	b9 2c       	mov	r11, r9
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	07 d5       	rcall	.+2574   	; 0x1826 <vTaskSuspendAll>
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	0f 92       	push	r0
     e1e:	f8 01       	movw	r30, r16
     e20:	85 8d       	ldd	r24, Z+29	; 0x1d
     e22:	8f 3f       	cpi	r24, 0xFF	; 255
     e24:	09 f4       	brne	.+2      	; 0xe28 <xQueueGenericSend+0xaa>
     e26:	15 8e       	std	Z+29, r1	; 0x1d
     e28:	f8 01       	movw	r30, r16
     e2a:	86 8d       	ldd	r24, Z+30	; 0x1e
     e2c:	8f 3f       	cpi	r24, 0xFF	; 255
     e2e:	09 f4       	brne	.+2      	; 0xe32 <xQueueGenericSend+0xb4>
     e30:	16 8e       	std	Z+30, r1	; 0x1e
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	be 01       	movw	r22, r28
     e38:	6c 5f       	subi	r22, 0xFC	; 252
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	54 d7       	rcall	.+3752   	; 0x1cea <xTaskCheckForTimeOut>
     e42:	81 11       	cpse	r24, r1
     e44:	19 c0       	rjmp	.+50     	; 0xe78 <xQueueGenericSend+0xfa>
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	0f 92       	push	r0
     e4c:	f8 01       	movw	r30, r16
     e4e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e50:	83 8d       	ldd	r24, Z+27	; 0x1b
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	98 13       	cpse	r25, r24
     e58:	0b c0       	rjmp	.+22     	; 0xe70 <xQueueGenericSend+0xf2>
     e5a:	6c 81       	ldd	r22, Y+4	; 0x04
     e5c:	7d 81       	ldd	r23, Y+5	; 0x05
     e5e:	c7 01       	movw	r24, r14
     e60:	c8 d6       	rcall	.+3472   	; 0x1bf2 <vTaskPlaceOnEventList>
     e62:	c8 01       	movw	r24, r16
     e64:	d0 de       	rcall	.-608    	; 0xc06 <prvUnlockQueue>
     e66:	a9 d5       	rcall	.+2898   	; 0x19ba <xTaskResumeAll>
     e68:	81 11       	cpse	r24, r1
     e6a:	a5 cf       	rjmp	.-182    	; 0xdb6 <xQueueGenericSend+0x38>
     e6c:	81 dd       	rcall	.-1278   	; 0x970 <vPortYield>
     e6e:	a3 cf       	rjmp	.-186    	; 0xdb6 <xQueueGenericSend+0x38>
     e70:	c8 01       	movw	r24, r16
     e72:	c9 de       	rcall	.-622    	; 0xc06 <prvUnlockQueue>
     e74:	a2 d5       	rcall	.+2884   	; 0x19ba <xTaskResumeAll>
     e76:	9f cf       	rjmp	.-194    	; 0xdb6 <xQueueGenericSend+0x38>
     e78:	c8 01       	movw	r24, r16
     e7a:	c5 de       	rcall	.-630    	; 0xc06 <prvUnlockQueue>
     e7c:	9e d5       	rcall	.+2876   	; 0x19ba <xTaskResumeAll>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	08 95       	ret

00000ea2 <xQueueGenericSendFromISR>:
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	8a 01       	movw	r16, r20
     eb0:	fc 01       	movw	r30, r24
     eb2:	52 8d       	ldd	r21, Z+26	; 0x1a
     eb4:	33 8d       	ldd	r19, Z+27	; 0x1b
     eb6:	53 17       	cp	r21, r19
     eb8:	10 f0       	brcs	.+4      	; 0xebe <xQueueGenericSendFromISR+0x1c>
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	e1 f4       	brne	.+56     	; 0xef6 <xQueueGenericSendFromISR+0x54>
     ebe:	42 2f       	mov	r20, r18
     ec0:	78 01       	movw	r14, r16
     ec2:	ec 01       	movw	r28, r24
     ec4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ec6:	26 de       	rcall	.-948    	; 0xb14 <prvCopyDataToQueue>
     ec8:	1f 3f       	cpi	r17, 0xFF	; 255
     eca:	79 f4       	brne	.+30     	; 0xeea <xQueueGenericSendFromISR+0x48>
     ecc:	89 89       	ldd	r24, Y+17	; 0x11
     ece:	88 23       	and	r24, r24
     ed0:	a1 f0       	breq	.+40     	; 0xefa <xQueueGenericSendFromISR+0x58>
     ed2:	ce 01       	movw	r24, r28
     ed4:	41 96       	adiw	r24, 0x11	; 17
     ed6:	b6 d6       	rcall	.+3436   	; 0x1c44 <xTaskRemoveFromEventList>
     ed8:	88 23       	and	r24, r24
     eda:	89 f0       	breq	.+34     	; 0xefe <xQueueGenericSendFromISR+0x5c>
     edc:	e1 14       	cp	r14, r1
     ede:	f1 04       	cpc	r15, r1
     ee0:	81 f0       	breq	.+32     	; 0xf02 <xQueueGenericSendFromISR+0x60>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	f7 01       	movw	r30, r14
     ee6:	80 83       	st	Z, r24
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <xQueueGenericSendFromISR+0x62>
     eea:	ff 24       	eor	r15, r15
     eec:	f3 94       	inc	r15
     eee:	f1 0e       	add	r15, r17
     ef0:	fe 8e       	std	Y+30, r15	; 0x1e
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <xQueueGenericSendFromISR+0x62>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <xQueueGenericSendFromISR+0x62>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <xQueueGenericSendFromISR+0x62>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <xQueueGenericSendFromISR+0x62>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	08 95       	ret

00000f12 <xQueueReceive>:
     f12:	9f 92       	push	r9
     f14:	af 92       	push	r10
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	00 d0       	rcall	.+0      	; 0xf2a <xQueueReceive+0x18>
     f2a:	1f 92       	push	r1
     f2c:	1f 92       	push	r1
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	8c 01       	movw	r16, r24
     f34:	5b 01       	movw	r10, r22
     f36:	5d 83       	std	Y+5, r21	; 0x05
     f38:	4c 83       	std	Y+4, r20	; 0x04
     f3a:	e1 2c       	mov	r14, r1
     f3c:	99 24       	eor	r9, r9
     f3e:	93 94       	inc	r9
     f40:	6c 01       	movw	r12, r24
     f42:	81 e1       	ldi	r24, 0x11	; 17
     f44:	c8 0e       	add	r12, r24
     f46:	d1 1c       	adc	r13, r1
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	0f 92       	push	r0
     f4e:	f8 01       	movw	r30, r16
     f50:	f2 8c       	ldd	r15, Z+26	; 0x1a
     f52:	ff 20       	and	r15, r15
     f54:	91 f0       	breq	.+36     	; 0xf7a <xQueueReceive+0x68>
     f56:	b5 01       	movw	r22, r10
     f58:	c8 01       	movw	r24, r16
     f5a:	3b de       	rcall	.-906    	; 0xbd2 <prvCopyDataFromQueue>
     f5c:	fa 94       	dec	r15
     f5e:	f8 01       	movw	r30, r16
     f60:	f2 8e       	std	Z+26, r15	; 0x1a
     f62:	80 85       	ldd	r24, Z+8	; 0x08
     f64:	88 23       	and	r24, r24
     f66:	29 f0       	breq	.+10     	; 0xf72 <xQueueReceive+0x60>
     f68:	c8 01       	movw	r24, r16
     f6a:	08 96       	adiw	r24, 0x08	; 8
     f6c:	6b d6       	rcall	.+3286   	; 0x1c44 <xTaskRemoveFromEventList>
     f6e:	81 11       	cpse	r24, r1
     f70:	ff dc       	rcall	.-1538   	; 0x970 <vPortYield>
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	44 c0       	rjmp	.+136    	; 0x1002 <xQueueReceive+0xf0>
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	89 2b       	or	r24, r25
     f80:	21 f4       	brne	.+8      	; 0xf8a <xQueueReceive+0x78>
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	3c c0       	rjmp	.+120    	; 0x1002 <xQueueReceive+0xf0>
     f8a:	e1 10       	cpse	r14, r1
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <xQueueReceive+0x84>
     f8e:	ce 01       	movw	r24, r28
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	a0 d6       	rcall	.+3392   	; 0x1cd4 <vTaskInternalSetTimeOutState>
     f94:	e9 2c       	mov	r14, r9
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	45 d4       	rcall	.+2186   	; 0x1826 <vTaskSuspendAll>
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	0f 92       	push	r0
     fa2:	f8 01       	movw	r30, r16
     fa4:	85 8d       	ldd	r24, Z+29	; 0x1d
     fa6:	8f 3f       	cpi	r24, 0xFF	; 255
     fa8:	09 f4       	brne	.+2      	; 0xfac <xQueueReceive+0x9a>
     faa:	15 8e       	std	Z+29, r1	; 0x1d
     fac:	f8 01       	movw	r30, r16
     fae:	86 8d       	ldd	r24, Z+30	; 0x1e
     fb0:	8f 3f       	cpi	r24, 0xFF	; 255
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <xQueueReceive+0xa4>
     fb4:	16 8e       	std	Z+30, r1	; 0x1e
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	be 01       	movw	r22, r28
     fbc:	6c 5f       	subi	r22, 0xFC	; 252
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	92 d6       	rcall	.+3364   	; 0x1cea <xTaskCheckForTimeOut>
     fc6:	81 11       	cpse	r24, r1
     fc8:	13 c0       	rjmp	.+38     	; 0xff0 <xQueueReceive+0xde>
     fca:	c8 01       	movw	r24, r16
     fcc:	98 dd       	rcall	.-1232   	; 0xafe <prvIsQueueEmpty>
     fce:	88 23       	and	r24, r24
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <xQueueReceive+0xd6>
     fd2:	6c 81       	ldd	r22, Y+4	; 0x04
     fd4:	7d 81       	ldd	r23, Y+5	; 0x05
     fd6:	c6 01       	movw	r24, r12
     fd8:	0c d6       	rcall	.+3096   	; 0x1bf2 <vTaskPlaceOnEventList>
     fda:	c8 01       	movw	r24, r16
     fdc:	14 de       	rcall	.-984    	; 0xc06 <prvUnlockQueue>
     fde:	ed d4       	rcall	.+2522   	; 0x19ba <xTaskResumeAll>
     fe0:	81 11       	cpse	r24, r1
     fe2:	b2 cf       	rjmp	.-156    	; 0xf48 <xQueueReceive+0x36>
     fe4:	c5 dc       	rcall	.-1654   	; 0x970 <vPortYield>
     fe6:	b0 cf       	rjmp	.-160    	; 0xf48 <xQueueReceive+0x36>
     fe8:	c8 01       	movw	r24, r16
     fea:	0d de       	rcall	.-998    	; 0xc06 <prvUnlockQueue>
     fec:	e6 d4       	rcall	.+2508   	; 0x19ba <xTaskResumeAll>
     fee:	ac cf       	rjmp	.-168    	; 0xf48 <xQueueReceive+0x36>
     ff0:	c8 01       	movw	r24, r16
     ff2:	09 de       	rcall	.-1006   	; 0xc06 <prvUnlockQueue>
     ff4:	e2 d4       	rcall	.+2500   	; 0x19ba <xTaskResumeAll>
     ff6:	c8 01       	movw	r24, r16
     ff8:	82 dd       	rcall	.-1276   	; 0xafe <prvIsQueueEmpty>
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <xQueueReceive+0xee>
     ffe:	a4 cf       	rjmp	.-184    	; 0xf48 <xQueueReceive+0x36>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	cf 90       	pop	r12
    101c:	bf 90       	pop	r11
    101e:	af 90       	pop	r10
    1020:	9f 90       	pop	r9
    1022:	08 95       	ret

00001024 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	0f 92       	push	r0
    1030:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1032:	8f 3f       	cpi	r24, 0xFF	; 255
    1034:	09 f4       	brne	.+2      	; 0x1038 <vQueueWaitForMessageRestricted+0x14>
    1036:	1d 8e       	std	Y+29, r1	; 0x1d
    1038:	8e 8d       	ldd	r24, Y+30	; 0x1e
    103a:	8f 3f       	cpi	r24, 0xFF	; 255
    103c:	09 f4       	brne	.+2      	; 0x1040 <vQueueWaitForMessageRestricted+0x1c>
    103e:	1e 8e       	std	Y+30, r1	; 0x1e
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1044:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1046:	81 11       	cpse	r24, r1
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    104a:	ce 01       	movw	r24, r28
    104c:	41 96       	adiw	r24, 0x11	; 17
    104e:	e2 d5       	rcall	.+3012   	; 0x1c14 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1050:	ce 01       	movw	r24, r28
    1052:	d9 dd       	rcall	.-1102   	; 0xc06 <prvUnlockQueue>
    }
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    105a:	fc 01       	movw	r30, r24
    105c:	44 81       	ldd	r20, Z+4	; 0x04
    105e:	55 81       	ldd	r21, Z+5	; 0x05
    1060:	22 81       	ldd	r18, Z+2	; 0x02
    1062:	33 81       	ldd	r19, Z+3	; 0x03
    1064:	24 0f       	add	r18, r20
    1066:	35 1f       	adc	r19, r21
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	b9 01       	movw	r22, r18
    106e:	68 1b       	sub	r22, r24
    1070:	79 0b       	sbc	r23, r25
    1072:	cb 01       	movw	r24, r22
    1074:	64 17       	cp	r22, r20
    1076:	75 07       	cpc	r23, r21
    1078:	10 f0       	brcs	.+4      	; 0x107e <prvBytesInBuffer+0x24>
    107a:	84 1b       	sub	r24, r20
    107c:	95 0b       	sbc	r25, r21
    107e:	08 95       	ret

00001080 <prvWriteBytesToBuffer>:
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	6c 01       	movw	r12, r24
    1096:	5b 01       	movw	r10, r22
    1098:	7a 01       	movw	r14, r20
    109a:	fc 01       	movw	r30, r24
    109c:	c2 81       	ldd	r28, Z+2	; 0x02
    109e:	d3 81       	ldd	r29, Z+3	; 0x03
    10a0:	04 81       	ldd	r16, Z+4	; 0x04
    10a2:	15 81       	ldd	r17, Z+5	; 0x05
    10a4:	0c 1b       	sub	r16, r28
    10a6:	1d 0b       	sbc	r17, r29
    10a8:	40 17       	cp	r20, r16
    10aa:	51 07       	cpc	r21, r17
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <prvWriteBytesToBuffer+0x30>
    10ae:	8a 01       	movw	r16, r20
    10b0:	f6 01       	movw	r30, r12
    10b2:	84 85       	ldd	r24, Z+12	; 0x0c
    10b4:	95 85       	ldd	r25, Z+13	; 0x0d
    10b6:	a8 01       	movw	r20, r16
    10b8:	b5 01       	movw	r22, r10
    10ba:	8c 0f       	add	r24, r28
    10bc:	9d 1f       	adc	r25, r29
    10be:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <memcpy>
    10c2:	0e 15       	cp	r16, r14
    10c4:	1f 05       	cpc	r17, r15
    10c6:	58 f4       	brcc	.+22     	; 0x10de <prvWriteBytesToBuffer+0x5e>
    10c8:	a7 01       	movw	r20, r14
    10ca:	40 1b       	sub	r20, r16
    10cc:	51 0b       	sbc	r21, r17
    10ce:	b5 01       	movw	r22, r10
    10d0:	60 0f       	add	r22, r16
    10d2:	71 1f       	adc	r23, r17
    10d4:	f6 01       	movw	r30, r12
    10d6:	84 85       	ldd	r24, Z+12	; 0x0c
    10d8:	95 85       	ldd	r25, Z+13	; 0x0d
    10da:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <memcpy>
    10de:	ce 01       	movw	r24, r28
    10e0:	8e 0d       	add	r24, r14
    10e2:	9f 1d       	adc	r25, r15
    10e4:	f6 01       	movw	r30, r12
    10e6:	24 81       	ldd	r18, Z+4	; 0x04
    10e8:	35 81       	ldd	r19, Z+5	; 0x05
    10ea:	82 17       	cp	r24, r18
    10ec:	93 07       	cpc	r25, r19
    10ee:	10 f0       	brcs	.+4      	; 0x10f4 <prvWriteBytesToBuffer+0x74>
    10f0:	82 1b       	sub	r24, r18
    10f2:	93 0b       	sbc	r25, r19
    10f4:	f6 01       	movw	r30, r12
    10f6:	93 83       	std	Z+3, r25	; 0x03
    10f8:	82 83       	std	Z+2, r24	; 0x02
    10fa:	c7 01       	movw	r24, r14
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	bf 90       	pop	r11
    110e:	af 90       	pop	r10
    1110:	08 95       	ret

00001112 <prvWriteMessageToBuffer>:
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	1f 92       	push	r1
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	5a 83       	std	Y+2, r21	; 0x02
    112c:	49 83       	std	Y+1, r20	; 0x01
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	c9 f0       	breq	.+50     	; 0x1166 <prvWriteMessageToBuffer+0x54>
    1134:	6b 01       	movw	r12, r22
    1136:	7c 01       	movw	r14, r24
    1138:	fc 01       	movw	r30, r24
    113a:	86 85       	ldd	r24, Z+14	; 0x0e
    113c:	80 fd       	sbrc	r24, 0
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <prvWriteMessageToBuffer+0x3e>
    1140:	ca 01       	movw	r24, r20
    1142:	24 17       	cp	r18, r20
    1144:	35 07       	cpc	r19, r21
    1146:	08 f4       	brcc	.+2      	; 0x114a <prvWriteMessageToBuffer+0x38>
    1148:	c9 01       	movw	r24, r18
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	11 c0       	rjmp	.+34     	; 0x1172 <prvWriteMessageToBuffer+0x60>
    1150:	20 17       	cp	r18, r16
    1152:	31 07       	cpc	r19, r17
    1154:	58 f0       	brcs	.+22     	; 0x116c <prvWriteMessageToBuffer+0x5a>
    1156:	42 e0       	ldi	r20, 0x02	; 2
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	be 01       	movw	r22, r28
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	c7 01       	movw	r24, r14
    1162:	8e df       	rcall	.-228    	; 0x1080 <prvWriteBytesToBuffer>
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <prvWriteMessageToBuffer+0x60>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	08 c0       	rjmp	.+16     	; 0x117c <prvWriteMessageToBuffer+0x6a>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	05 c0       	rjmp	.+10     	; 0x117c <prvWriteMessageToBuffer+0x6a>
    1172:	49 81       	ldd	r20, Y+1	; 0x01
    1174:	5a 81       	ldd	r21, Y+2	; 0x02
    1176:	b6 01       	movw	r22, r12
    1178:	c7 01       	movw	r24, r14
    117a:	82 df       	rcall	.-252    	; 0x1080 <prvWriteBytesToBuffer>
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	08 95       	ret

00001192 <prvReadBytesFromBuffer>:
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	7c 01       	movw	r14, r24
    11a8:	5b 01       	movw	r10, r22
    11aa:	e9 01       	movw	r28, r18
    11ac:	42 17       	cp	r20, r18
    11ae:	53 07       	cpc	r21, r19
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <prvReadBytesFromBuffer+0x22>
    11b2:	ea 01       	movw	r28, r20
    11b4:	20 97       	sbiw	r28, 0x00	; 0
    11b6:	79 f1       	breq	.+94     	; 0x1216 <prvReadBytesFromBuffer+0x84>
    11b8:	f7 01       	movw	r30, r14
    11ba:	00 81       	ld	r16, Z
    11bc:	11 81       	ldd	r17, Z+1	; 0x01
    11be:	c4 80       	ldd	r12, Z+4	; 0x04
    11c0:	d5 80       	ldd	r13, Z+5	; 0x05
    11c2:	c0 1a       	sub	r12, r16
    11c4:	d1 0a       	sbc	r13, r17
    11c6:	cc 15       	cp	r28, r12
    11c8:	dd 05       	cpc	r29, r13
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <prvReadBytesFromBuffer+0x3c>
    11cc:	6e 01       	movw	r12, r28
    11ce:	f7 01       	movw	r30, r14
    11d0:	64 85       	ldd	r22, Z+12	; 0x0c
    11d2:	75 85       	ldd	r23, Z+13	; 0x0d
    11d4:	60 0f       	add	r22, r16
    11d6:	71 1f       	adc	r23, r17
    11d8:	a6 01       	movw	r20, r12
    11da:	c5 01       	movw	r24, r10
    11dc:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <memcpy>
    11e0:	cc 16       	cp	r12, r28
    11e2:	dd 06       	cpc	r13, r29
    11e4:	58 f4       	brcc	.+22     	; 0x11fc <prvReadBytesFromBuffer+0x6a>
    11e6:	ae 01       	movw	r20, r28
    11e8:	4c 19       	sub	r20, r12
    11ea:	5d 09       	sbc	r21, r13
    11ec:	f7 01       	movw	r30, r14
    11ee:	64 85       	ldd	r22, Z+12	; 0x0c
    11f0:	75 85       	ldd	r23, Z+13	; 0x0d
    11f2:	c5 01       	movw	r24, r10
    11f4:	8c 0d       	add	r24, r12
    11f6:	9d 1d       	adc	r25, r13
    11f8:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <memcpy>
    11fc:	0c 0f       	add	r16, r28
    11fe:	1d 1f       	adc	r17, r29
    1200:	f7 01       	movw	r30, r14
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	08 17       	cp	r16, r24
    1208:	19 07       	cpc	r17, r25
    120a:	10 f0       	brcs	.+4      	; 0x1210 <prvReadBytesFromBuffer+0x7e>
    120c:	08 1b       	sub	r16, r24
    120e:	19 0b       	sbc	r17, r25
    1210:	f7 01       	movw	r30, r14
    1212:	11 83       	std	Z+1, r17	; 0x01
    1214:	00 83       	st	Z, r16
    1216:	ce 01       	movw	r24, r28
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	08 95       	ret

0000122e <xStreamBufferGenericCreate>:
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	eb 01       	movw	r28, r22
    123a:	11 e0       	ldi	r17, 0x01	; 1
    123c:	41 30       	cpi	r20, 0x01	; 1
    123e:	09 f0       	breq	.+2      	; 0x1242 <xStreamBufferGenericCreate+0x14>
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	20 97       	sbiw	r28, 0x00	; 0
    1244:	11 f4       	brne	.+4      	; 0x124a <xStreamBufferGenericCreate+0x1c>
    1246:	c1 e0       	ldi	r28, 0x01	; 1
    1248:	d0 e0       	ldi	r29, 0x00	; 0
    124a:	7c 01       	movw	r14, r24
    124c:	2f ef       	ldi	r18, 0xFF	; 255
    124e:	e2 1a       	sub	r14, r18
    1250:	f2 0a       	sbc	r15, r18
    1252:	41 96       	adiw	r24, 0x11	; 17
    1254:	32 da       	rcall	.-2972   	; 0x6ba <pvPortMalloc>
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	81 f0       	breq	.+32     	; 0x127a <xStreamBufferGenericCreate+0x4c>
    125a:	20 e1       	ldi	r18, 0x10	; 16
    125c:	fc 01       	movw	r30, r24
    125e:	11 92       	st	Z+, r1
    1260:	2a 95       	dec	r18
    1262:	e9 f7       	brne	.-6      	; 0x125e <xStreamBufferGenericCreate+0x30>
    1264:	9c 01       	movw	r18, r24
    1266:	20 5f       	subi	r18, 0xF0	; 240
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	fc 01       	movw	r30, r24
    126c:	35 87       	std	Z+13, r19	; 0x0d
    126e:	24 87       	std	Z+12, r18	; 0x0c
    1270:	f5 82       	std	Z+5, r15	; 0x05
    1272:	e4 82       	std	Z+4, r14	; 0x04
    1274:	d7 83       	std	Z+7, r29	; 0x07
    1276:	c6 83       	std	Z+6, r28	; 0x06
    1278:	16 87       	std	Z+14, r17	; 0x0e
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	08 95       	ret

00001286 <xStreamBufferReset>:
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	fc 01       	movw	r30, r24
    128c:	27 85       	ldd	r18, Z+15	; 0x0f
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
    1294:	80 85       	ldd	r24, Z+8	; 0x08
    1296:	91 85       	ldd	r25, Z+9	; 0x09
    1298:	89 2b       	or	r24, r25
    129a:	d1 f4       	brne	.+52     	; 0x12d0 <xStreamBufferReset+0x4a>
    129c:	82 85       	ldd	r24, Z+10	; 0x0a
    129e:	93 85       	ldd	r25, Z+11	; 0x0b
    12a0:	89 2b       	or	r24, r25
    12a2:	c1 f4       	brne	.+48     	; 0x12d4 <xStreamBufferReset+0x4e>
    12a4:	86 85       	ldd	r24, Z+14	; 0x0e
    12a6:	46 81       	ldd	r20, Z+6	; 0x06
    12a8:	57 81       	ldd	r21, Z+7	; 0x07
    12aa:	64 81       	ldd	r22, Z+4	; 0x04
    12ac:	75 81       	ldd	r23, Z+5	; 0x05
    12ae:	a4 85       	ldd	r26, Z+12	; 0x0c
    12b0:	b5 85       	ldd	r27, Z+13	; 0x0d
    12b2:	90 e1       	ldi	r25, 0x10	; 16
    12b4:	ef 01       	movw	r28, r30
    12b6:	19 92       	st	Y+, r1
    12b8:	9a 95       	dec	r25
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <xStreamBufferReset+0x30>
    12bc:	b5 87       	std	Z+13, r27	; 0x0d
    12be:	a4 87       	std	Z+12, r26	; 0x0c
    12c0:	75 83       	std	Z+5, r23	; 0x05
    12c2:	64 83       	std	Z+4, r22	; 0x04
    12c4:	57 83       	std	Z+7, r21	; 0x07
    12c6:	46 83       	std	Z+6, r20	; 0x06
    12c8:	86 87       	std	Z+14, r24	; 0x0e
    12ca:	27 87       	std	Z+15, r18	; 0x0f
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <xStreamBufferReset+0x50>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <xStreamBufferReset+0x50>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <xStreamBufferSpacesAvailable>:
    12e0:	fc 01       	movw	r30, r24
    12e2:	24 81       	ldd	r18, Z+4	; 0x04
    12e4:	35 81       	ldd	r19, Z+5	; 0x05
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	42 81       	ldd	r20, Z+2	; 0x02
    12ec:	53 81       	ldd	r21, Z+3	; 0x03
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	84 1b       	sub	r24, r20
    12f6:	95 0b       	sbc	r25, r21
    12f8:	82 17       	cp	r24, r18
    12fa:	93 07       	cpc	r25, r19
    12fc:	10 f0       	brcs	.+4      	; 0x1302 <xStreamBufferSpacesAvailable+0x22>
    12fe:	82 1b       	sub	r24, r18
    1300:	93 0b       	sbc	r25, r19
    1302:	08 95       	ret

00001304 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	ec 01       	movw	r28, r24
    131a:	5b 01       	movw	r10, r22
    131c:	6a 01       	movw	r12, r20
    131e:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1320:	8e 85       	ldd	r24, Y+14	; 0x0e
    1322:	80 ff       	sbrs	r24, 0
    1324:	04 c0       	rjmp	.+8      	; 0x132e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1326:	8a 01       	movw	r16, r20
    1328:	0e 5f       	subi	r16, 0xFE	; 254
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    132e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1330:	ce 01       	movw	r24, r28
    1332:	d6 df       	rcall	.-84     	; 0x12e0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1334:	9c 01       	movw	r18, r24
    1336:	a6 01       	movw	r20, r12
    1338:	b5 01       	movw	r22, r10
    133a:	ce 01       	movw	r24, r28
    133c:	ea de       	rcall	.-556    	; 0x1112 <prvWriteMessageToBuffer>
    133e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1340:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1342:	b1 f0       	breq	.+44     	; 0x1370 <xStreamBufferSendFromISR+0x6c>
    1344:	ce 01       	movw	r24, r28
    1346:	89 de       	rcall	.-750    	; 0x105a <prvBytesInBuffer>
    1348:	2e 81       	ldd	r18, Y+6	; 0x06
    134a:	3f 81       	ldd	r19, Y+7	; 0x07
    134c:	82 17       	cp	r24, r18
    134e:	93 07       	cpc	r25, r19
    1350:	78 f0       	brcs	.+30     	; 0x1370 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1352:	88 85       	ldd	r24, Y+8	; 0x08
    1354:	99 85       	ldd	r25, Y+9	; 0x09
    1356:	89 2b       	or	r24, r25
    1358:	59 f0       	breq	.+22     	; 0x1370 <xStreamBufferSendFromISR+0x6c>
    135a:	88 85       	ldd	r24, Y+8	; 0x08
    135c:	99 85       	ldd	r25, Y+9	; 0x09
    135e:	00 e0       	ldi	r16, 0x00	; 0
    1360:	10 e0       	ldi	r17, 0x00	; 0
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	ba 01       	movw	r22, r20
    136a:	4c d6       	rcall	.+3224   	; 0x2004 <xTaskGenericNotifyFromISR>
    136c:	19 86       	std	Y+9, r1	; 0x09
    136e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1370:	c6 01       	movw	r24, r12
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	08 95       	ret

00001388 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1388:	6f 92       	push	r6
    138a:	7f 92       	push	r7
    138c:	8f 92       	push	r8
    138e:	9f 92       	push	r9
    1390:	af 92       	push	r10
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	1f 92       	push	r1
    13a6:	1f 92       	push	r1
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	6c 01       	movw	r12, r24
    13ae:	3b 01       	movw	r6, r22
    13b0:	4a 01       	movw	r8, r20
    13b2:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13b4:	fc 01       	movw	r30, r24
    13b6:	86 85       	ldd	r24, Z+14	; 0x0e
    13b8:	80 fd       	sbrc	r24, 0
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    13bc:	a1 2c       	mov	r10, r1
    13be:	b1 2c       	mov	r11, r1
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13c2:	68 94       	set
    13c4:	aa 24       	eor	r10, r10
    13c6:	a1 f8       	bld	r10, 1
    13c8:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13ca:	e1 14       	cp	r14, r1
    13cc:	f1 04       	cpc	r15, r1
    13ce:	29 f1       	breq	.+74     	; 0x141a <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13d6:	c6 01       	movw	r24, r12
    13d8:	40 de       	rcall	.-896    	; 0x105a <prvBytesInBuffer>
    13da:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    13dc:	a8 16       	cp	r10, r24
    13de:	b9 06       	cpc	r11, r25
    13e0:	38 f0       	brcs	.+14     	; 0x13f0 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    13e6:	9e d6       	rcall	.+3388   	; 0x2124 <xTaskNotifyStateClear>
    13e8:	b9 d4       	rcall	.+2418   	; 0x1d5c <xTaskGetCurrentTaskHandle>
    13ea:	f6 01       	movw	r30, r12
    13ec:	91 87       	std	Z+9, r25	; 0x09
    13ee:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    13f4:	a0 16       	cp	r10, r16
    13f6:	b1 06       	cpc	r11, r17
    13f8:	b0 f0       	brcs	.+44     	; 0x1426 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13fa:	00 e0       	ldi	r16, 0x00	; 0
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	a9 01       	movw	r20, r18
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	cb 01       	movw	r24, r22
    140a:	fb d4       	rcall	.+2550   	; 0x1e02 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    140c:	f6 01       	movw	r30, r12
    140e:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1410:	10 86       	std	Z+8, r1	; 0x08
    1412:	c6 01       	movw	r24, r12
    1414:	22 de       	rcall	.-956    	; 0x105a <prvBytesInBuffer>
    1416:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <xStreamBufferReceive+0x98>
    141a:	c6 01       	movw	r24, r12
    141c:	1e de       	rcall	.-964    	; 0x105a <prvBytesInBuffer>
    141e:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1420:	a0 16       	cp	r10, r16
    1422:	b1 06       	cpc	r11, r17
    1424:	b8 f5       	brcc	.+110    	; 0x1494 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1426:	a1 14       	cp	r10, r1
    1428:	b1 04       	cpc	r11, r1
    142a:	c1 f0       	breq	.+48     	; 0x145c <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    142c:	f6 01       	movw	r30, r12
    142e:	e0 80       	ld	r14, Z
    1430:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1432:	98 01       	movw	r18, r16
    1434:	a5 01       	movw	r20, r10
    1436:	be 01       	movw	r22, r28
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	c6 01       	movw	r24, r12
    143e:	a9 de       	rcall	.-686    	; 0x1192 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1444:	0a 19       	sub	r16, r10
    1446:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1448:	88 16       	cp	r8, r24
    144a:	99 06       	cpc	r9, r25
    144c:	30 f4       	brcc	.+12     	; 0x145a <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    144e:	f6 01       	movw	r30, r12
    1450:	f1 82       	std	Z+1, r15	; 0x01
    1452:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1454:	81 2c       	mov	r8, r1
    1456:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1458:	01 c0       	rjmp	.+2      	; 0x145c <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    145a:	4c 01       	movw	r8, r24
    145c:	98 01       	movw	r18, r16
    145e:	a4 01       	movw	r20, r8
    1460:	b3 01       	movw	r22, r6
    1462:	c6 01       	movw	r24, r12
    1464:	96 de       	rcall	.-724    	; 0x1192 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1466:	7c 01       	movw	r14, r24
    1468:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    146a:	b1 f0       	breq	.+44     	; 0x1498 <xStreamBufferReceive+0x110>
    146c:	dc d1       	rcall	.+952    	; 0x1826 <vTaskSuspendAll>
    146e:	f6 01       	movw	r30, r12
    1470:	82 85       	ldd	r24, Z+10	; 0x0a
    1472:	93 85       	ldd	r25, Z+11	; 0x0b
    1474:	89 2b       	or	r24, r25
    1476:	61 f0       	breq	.+24     	; 0x1490 <xStreamBufferReceive+0x108>
    1478:	82 85       	ldd	r24, Z+10	; 0x0a
    147a:	93 85       	ldd	r25, Z+11	; 0x0b
    147c:	00 e0       	ldi	r16, 0x00	; 0
    147e:	10 e0       	ldi	r17, 0x00	; 0
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	ba 01       	movw	r22, r20
    1488:	3f d5       	rcall	.+2686   	; 0x1f08 <xTaskGenericNotify>
    148a:	f6 01       	movw	r30, r12
    148c:	13 86       	std	Z+11, r1	; 0x0b
    148e:	12 86       	std	Z+10, r1	; 0x0a
    1490:	94 d2       	rcall	.+1320   	; 0x19ba <xTaskResumeAll>
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1494:	e1 2c       	mov	r14, r1
    1496:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1498:	c7 01       	movw	r24, r14
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	af 90       	pop	r10
    14b2:	9f 90       	pop	r9
    14b4:	8f 90       	pop	r8
    14b6:	7f 90       	pop	r7
    14b8:	6f 90       	pop	r6
    14ba:	08 95       	ret

000014bc <prvResetNextTaskUnblockTime>:
    14bc:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    14c0:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    14c4:	80 81       	ld	r24, Z
    14c6:	81 11       	cpse	r24, r1
    14c8:	07 c0       	rjmp	.+14     	; 0x14d8 <prvResetNextTaskUnblockTime+0x1c>
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    14d2:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    14d6:	08 95       	ret
    14d8:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    14dc:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    14e0:	05 80       	ldd	r0, Z+5	; 0x05
    14e2:	f6 81       	ldd	r31, Z+6	; 0x06
    14e4:	e0 2d       	mov	r30, r0
    14e6:	06 80       	ldd	r0, Z+6	; 0x06
    14e8:	f7 81       	ldd	r31, Z+7	; 0x07
    14ea:	e0 2d       	mov	r30, r0
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    14f4:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    14f8:	08 95       	ret

000014fa <prvAddCurrentTaskToDelayedList>:
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ec 01       	movw	r28, r24
    1506:	f6 2e       	mov	r15, r22
    1508:	00 91 cd 06 	lds	r16, 0x06CD	; 0x8006cd <xTickCount>
    150c:	10 91 ce 06 	lds	r17, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1510:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    1514:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1518:	02 96       	adiw	r24, 0x02	; 2
    151a:	55 d9       	rcall	.-3414   	; 0x7c6 <uxListRemove>
    151c:	cf 3f       	cpi	r28, 0xFF	; 255
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	d8 07       	cpc	r29, r24
    1522:	61 f4       	brne	.+24     	; 0x153c <prvAddCurrentTaskToDelayedList+0x42>
    1524:	ff 20       	and	r15, r15
    1526:	51 f0       	breq	.+20     	; 0x153c <prvAddCurrentTaskToDelayedList+0x42>
    1528:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    152c:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1530:	6e 5f       	subi	r22, 0xFE	; 254
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	80 ed       	ldi	r24, 0xD0	; 208
    1536:	96 e0       	ldi	r25, 0x06	; 6
    1538:	f4 d8       	rcall	.-3608   	; 0x722 <vListInsertEnd>
    153a:	2d c0       	rjmp	.+90     	; 0x1596 <prvAddCurrentTaskToDelayedList+0x9c>
    153c:	c0 0f       	add	r28, r16
    153e:	d1 1f       	adc	r29, r17
    1540:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1544:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1548:	d3 83       	std	Z+3, r29	; 0x03
    154a:	c2 83       	std	Z+2, r28	; 0x02
    154c:	c0 17       	cp	r28, r16
    154e:	d1 07       	cpc	r29, r17
    1550:	60 f4       	brcc	.+24     	; 0x156a <prvAddCurrentTaskToDelayedList+0x70>
    1552:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1556:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    155a:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <pxOverflowDelayedTaskList>
    155e:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    1562:	6e 5f       	subi	r22, 0xFE	; 254
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	fe d8       	rcall	.-3588   	; 0x764 <vListInsert>
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <prvAddCurrentTaskToDelayedList+0x9c>
    156a:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    156e:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1572:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    1576:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    157a:	6e 5f       	subi	r22, 0xFE	; 254
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	f2 d8       	rcall	.-3612   	; 0x764 <vListInsert>
    1580:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextTaskUnblockTime>
    1584:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    1588:	c8 17       	cp	r28, r24
    158a:	d9 07       	cpc	r29, r25
    158c:	20 f4       	brcc	.+8      	; 0x1596 <prvAddCurrentTaskToDelayedList+0x9c>
    158e:	d0 93 c6 06 	sts	0x06C6, r29	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    1592:	c0 93 c5 06 	sts	0x06C5, r28	; 0x8006c5 <xNextTaskUnblockTime>
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	08 95       	ret

000015a2 <xTaskCreate>:
    15a2:	4f 92       	push	r4
    15a4:	5f 92       	push	r5
    15a6:	6f 92       	push	r6
    15a8:	7f 92       	push	r7
    15aa:	8f 92       	push	r8
    15ac:	9f 92       	push	r9
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	4c 01       	movw	r8, r24
    15c2:	6b 01       	movw	r12, r22
    15c4:	5a 01       	movw	r10, r20
    15c6:	29 01       	movw	r4, r18
    15c8:	ca 01       	movw	r24, r20
    15ca:	77 d8       	rcall	.-3858   	; 0x6ba <pvPortMalloc>
    15cc:	3c 01       	movw	r6, r24
    15ce:	89 2b       	or	r24, r25
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <xTaskCreate+0x32>
    15d2:	e6 c0       	rjmp	.+460    	; 0x17a0 <xTaskCreate+0x1fe>
    15d4:	8c e2       	ldi	r24, 0x2C	; 44
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	70 d8       	rcall	.-3872   	; 0x6ba <pvPortMalloc>
    15da:	ec 01       	movw	r28, r24
    15dc:	89 2b       	or	r24, r25
    15de:	99 f0       	breq	.+38     	; 0x1606 <xTaskCreate+0x64>
    15e0:	78 8e       	std	Y+24, r7	; 0x18
    15e2:	6f 8a       	std	Y+23, r6	; 0x17
    15e4:	a5 01       	movw	r20, r10
    15e6:	65 ea       	ldi	r22, 0xA5	; 165
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	c3 01       	movw	r24, r6
    15ec:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <memset>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	a8 1a       	sub	r10, r24
    15f4:	b1 08       	sbc	r11, r1
    15f6:	8f 89       	ldd	r24, Y+23	; 0x17
    15f8:	98 8d       	ldd	r25, Y+24	; 0x18
    15fa:	a8 0e       	add	r10, r24
    15fc:	b9 1e       	adc	r11, r25
    15fe:	c1 14       	cp	r12, r1
    1600:	d1 04       	cpc	r13, r1
    1602:	21 f4       	brne	.+8      	; 0x160c <xTaskCreate+0x6a>
    1604:	1f c0       	rjmp	.+62     	; 0x1644 <xTaskCreate+0xa2>
    1606:	c3 01       	movw	r24, r6
    1608:	6b d8       	rcall	.-3882   	; 0x6e0 <vPortFree>
    160a:	ca c0       	rjmp	.+404    	; 0x17a0 <xTaskCreate+0x1fe>
    160c:	d6 01       	movw	r26, r12
    160e:	8c 91       	ld	r24, X
    1610:	89 8f       	std	Y+25, r24	; 0x19
    1612:	8c 91       	ld	r24, X
    1614:	88 23       	and	r24, r24
    1616:	a1 f0       	breq	.+40     	; 0x1640 <xTaskCreate+0x9e>
    1618:	ae 01       	movw	r20, r28
    161a:	46 5e       	subi	r20, 0xE6	; 230
    161c:	5f 4f       	sbci	r21, 0xFF	; 255
    161e:	f6 01       	movw	r30, r12
    1620:	31 96       	adiw	r30, 0x01	; 1
    1622:	b8 e0       	ldi	r27, 0x08	; 8
    1624:	cb 0e       	add	r12, r27
    1626:	d1 1c       	adc	r13, r1
    1628:	cf 01       	movw	r24, r30
    162a:	21 91       	ld	r18, Z+
    162c:	da 01       	movw	r26, r20
    162e:	2d 93       	st	X+, r18
    1630:	ad 01       	movw	r20, r26
    1632:	dc 01       	movw	r26, r24
    1634:	8c 91       	ld	r24, X
    1636:	88 23       	and	r24, r24
    1638:	19 f0       	breq	.+6      	; 0x1640 <xTaskCreate+0x9e>
    163a:	ec 15       	cp	r30, r12
    163c:	fd 05       	cpc	r31, r13
    163e:	a1 f7       	brne	.-24     	; 0x1628 <xTaskCreate+0x86>
    1640:	18 a2       	std	Y+32, r1	; 0x20
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <xTaskCreate+0xa4>
    1644:	19 8e       	std	Y+25, r1	; 0x19
    1646:	04 30       	cpi	r16, 0x04	; 4
    1648:	08 f0       	brcs	.+2      	; 0x164c <xTaskCreate+0xaa>
    164a:	03 e0       	ldi	r16, 0x03	; 3
    164c:	0e 8b       	std	Y+22, r16	; 0x16
    164e:	0b a3       	std	Y+35, r16	; 0x23
    1650:	1c a2       	std	Y+36, r1	; 0x24
    1652:	6e 01       	movw	r12, r28
    1654:	b2 e0       	ldi	r27, 0x02	; 2
    1656:	cb 0e       	add	r12, r27
    1658:	d1 1c       	adc	r13, r1
    165a:	c6 01       	movw	r24, r12
    165c:	5e d8       	rcall	.-3908   	; 0x71a <vListInitialiseItem>
    165e:	ce 01       	movw	r24, r28
    1660:	0c 96       	adiw	r24, 0x0c	; 12
    1662:	5b d8       	rcall	.-3914   	; 0x71a <vListInitialiseItem>
    1664:	d9 87       	std	Y+9, r29	; 0x09
    1666:	c8 87       	std	Y+8, r28	; 0x08
    1668:	84 e0       	ldi	r24, 0x04	; 4
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	80 1b       	sub	r24, r16
    166e:	91 09       	sbc	r25, r1
    1670:	9d 87       	std	Y+13, r25	; 0x0d
    1672:	8c 87       	std	Y+12, r24	; 0x0c
    1674:	db 8b       	std	Y+19, r29	; 0x13
    1676:	ca 8b       	std	Y+18, r28	; 0x12
    1678:	1e a2       	std	Y+38, r1	; 0x26
    167a:	1d a2       	std	Y+37, r1	; 0x25
    167c:	1f a2       	std	Y+39, r1	; 0x27
    167e:	18 a6       	std	Y+40, r1	; 0x28
    1680:	19 a6       	std	Y+41, r1	; 0x29
    1682:	1a a6       	std	Y+42, r1	; 0x2a
    1684:	1b a6       	std	Y+43, r1	; 0x2b
    1686:	a2 01       	movw	r20, r4
    1688:	b4 01       	movw	r22, r8
    168a:	c5 01       	movw	r24, r10
    168c:	c3 d8       	rcall	.-3706   	; 0x814 <pxPortInitialiseStack>
    168e:	99 83       	std	Y+1, r25	; 0x01
    1690:	88 83       	st	Y, r24
    1692:	e1 14       	cp	r14, r1
    1694:	f1 04       	cpc	r15, r1
    1696:	19 f0       	breq	.+6      	; 0x169e <xTaskCreate+0xfc>
    1698:	f7 01       	movw	r30, r14
    169a:	d1 83       	std	Z+1, r29	; 0x01
    169c:	c0 83       	st	Z, r28
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	0f 92       	push	r0
    16a4:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
    16aa:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <uxCurrentNumberOfTasks>
    16ae:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    16b2:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    16b6:	89 2b       	or	r24, r25
    16b8:	91 f5       	brne	.+100    	; 0x171e <xTaskCreate+0x17c>
    16ba:	d0 93 27 07 	sts	0x0727, r29	; 0x800727 <pxCurrentTCB+0x1>
    16be:	c0 93 26 07 	sts	0x0726, r28	; 0x800726 <pxCurrentTCB>
    16c2:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <xTaskCreate+0x12a>
    16ca:	39 c0       	rjmp	.+114    	; 0x173e <xTaskCreate+0x19c>
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	97 e0       	ldi	r25, 0x07	; 7
    16d0:	16 d8       	rcall	.-4052   	; 0x6fe <vListInitialise>
    16d2:	8b e0       	ldi	r24, 0x0B	; 11
    16d4:	97 e0       	ldi	r25, 0x07	; 7
    16d6:	13 d8       	rcall	.-4058   	; 0x6fe <vListInitialise>
    16d8:	84 e1       	ldi	r24, 0x14	; 20
    16da:	97 e0       	ldi	r25, 0x07	; 7
    16dc:	10 d8       	rcall	.-4064   	; 0x6fe <vListInitialise>
    16de:	8d e1       	ldi	r24, 0x1D	; 29
    16e0:	97 e0       	ldi	r25, 0x07	; 7
    16e2:	0d d8       	rcall	.-4070   	; 0x6fe <vListInitialise>
    16e4:	89 ef       	ldi	r24, 0xF9	; 249
    16e6:	96 e0       	ldi	r25, 0x06	; 6
    16e8:	0a d8       	rcall	.-4076   	; 0x6fe <vListInitialise>
    16ea:	80 ef       	ldi	r24, 0xF0	; 240
    16ec:	96 e0       	ldi	r25, 0x06	; 6
    16ee:	07 d8       	rcall	.-4082   	; 0x6fe <vListInitialise>
    16f0:	83 ee       	ldi	r24, 0xE3	; 227
    16f2:	96 e0       	ldi	r25, 0x06	; 6
    16f4:	04 d8       	rcall	.-4088   	; 0x6fe <vListInitialise>
    16f6:	8a ed       	ldi	r24, 0xDA	; 218
    16f8:	96 e0       	ldi	r25, 0x06	; 6
    16fa:	01 d8       	rcall	.-4094   	; 0x6fe <vListInitialise>
    16fc:	80 ed       	ldi	r24, 0xD0	; 208
    16fe:	96 e0       	ldi	r25, 0x06	; 6
    1700:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    1704:	89 ef       	ldi	r24, 0xF9	; 249
    1706:	96 e0       	ldi	r25, 0x06	; 6
    1708:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <pxDelayedTaskList+0x1>
    170c:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <pxDelayedTaskList>
    1710:	80 ef       	ldi	r24, 0xF0	; 240
    1712:	96 e0       	ldi	r25, 0x06	; 6
    1714:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    1718:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <pxOverflowDelayedTaskList>
    171c:	10 c0       	rjmp	.+32     	; 0x173e <xTaskCreate+0x19c>
    171e:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <xSchedulerRunning>
    1722:	81 11       	cpse	r24, r1
    1724:	0c c0       	rjmp	.+24     	; 0x173e <xTaskCreate+0x19c>
    1726:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    172a:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    172e:	96 89       	ldd	r25, Z+22	; 0x16
    1730:	8e 89       	ldd	r24, Y+22	; 0x16
    1732:	89 17       	cp	r24, r25
    1734:	20 f0       	brcs	.+8      	; 0x173e <xTaskCreate+0x19c>
    1736:	d0 93 27 07 	sts	0x0727, r29	; 0x800727 <pxCurrentTCB+0x1>
    173a:	c0 93 26 07 	sts	0x0726, r28	; 0x800726 <pxCurrentTCB>
    173e:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <uxTaskNumber>
    1742:	8f 5f       	subi	r24, 0xFF	; 255
    1744:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <uxTaskNumber>
    1748:	89 a3       	std	Y+33, r24	; 0x21
    174a:	8e 89       	ldd	r24, Y+22	; 0x16
    174c:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1750:	98 17       	cp	r25, r24
    1752:	10 f4       	brcc	.+4      	; 0x1758 <xTaskCreate+0x1b6>
    1754:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9c 01       	movw	r18, r24
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	22 0f       	add	r18, r18
    1766:	33 1f       	adc	r19, r19
    1768:	82 0f       	add	r24, r18
    176a:	93 1f       	adc	r25, r19
    176c:	b6 01       	movw	r22, r12
    176e:	8e 5f       	subi	r24, 0xFE	; 254
    1770:	98 4f       	sbci	r25, 0xF8	; 248
    1772:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <xSchedulerRunning>
    177e:	88 23       	and	r24, r24
    1780:	59 f0       	breq	.+22     	; 0x1798 <xTaskCreate+0x1f6>
    1782:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1786:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    178a:	96 89       	ldd	r25, Z+22	; 0x16
    178c:	8e 89       	ldd	r24, Y+22	; 0x16
    178e:	98 17       	cp	r25, r24
    1790:	28 f4       	brcc	.+10     	; 0x179c <xTaskCreate+0x1fa>
    1792:	ee d8       	rcall	.-3620   	; 0x970 <vPortYield>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <xTaskCreate+0x200>
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <xTaskCreate+0x200>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <xTaskCreate+0x200>
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	9f 90       	pop	r9
    17b6:	8f 90       	pop	r8
    17b8:	7f 90       	pop	r7
    17ba:	6f 90       	pop	r6
    17bc:	5f 90       	pop	r5
    17be:	4f 90       	pop	r4
    17c0:	08 95       	ret

000017c2 <vTaskStartScheduler>:
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	0f 2e       	mov	r0, r31
    17ca:	f3 ec       	ldi	r31, 0xC3	; 195
    17cc:	ef 2e       	mov	r14, r31
    17ce:	f6 e0       	ldi	r31, 0x06	; 6
    17d0:	ff 2e       	mov	r15, r31
    17d2:	f0 2d       	mov	r31, r0
    17d4:	00 e0       	ldi	r16, 0x00	; 0
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 ec       	ldi	r20, 0xC0	; 192
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	66 e6       	ldi	r22, 0x66	; 102
    17e0:	73 e0       	ldi	r23, 0x03	; 3
    17e2:	8d ec       	ldi	r24, 0xCD	; 205
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	dd de       	rcall	.-582    	; 0x15a2 <xTaskCreate>
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	c9 f4       	brne	.+50     	; 0x181e <vTaskStartScheduler+0x5c>
    17ec:	07 d5       	rcall	.+2574   	; 0x21fc <xTimerCreateTimerTask>
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	b1 f4       	brne	.+44     	; 0x181e <vTaskStartScheduler+0x5c>
    17f2:	f8 94       	cli
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	9f ef       	ldi	r25, 0xFF	; 255
    17f8:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    17fc:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <xSchedulerRunning>
    1806:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <xTickCount+0x1>
    180a:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <xTickCount>
    180e:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1812:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1816:	85 a1       	ldd	r24, Z+37	; 0x25
    1818:	0e 94 4d 03 	call	0x69a	; 0x69a <task_switch_in>
    181c:	6d d8       	rcall	.-3878   	; 0x8f8 <xPortStartScheduler>
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	08 95       	ret

00001826 <vTaskSuspendAll>:
    1826:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxSchedulerSuspended>
    1830:	08 95       	ret

00001832 <xTaskGetTickCount>:
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	0f 92       	push	r0
    1838:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <xTickCount>
    183c:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	08 95       	ret

00001846 <xTaskIncrementTick>:
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    185a:	81 11       	cpse	r24, r1
    185c:	98 c0       	rjmp	.+304    	; 0x198e <xTaskIncrementTick+0x148>
    185e:	e0 90 cd 06 	lds	r14, 0x06CD	; 0x8006cd <xTickCount>
    1862:	f0 90 ce 06 	lds	r15, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	e8 1a       	sub	r14, r24
    186a:	f8 0a       	sbc	r15, r24
    186c:	f0 92 ce 06 	sts	0x06CE, r15	; 0x8006ce <xTickCount+0x1>
    1870:	e0 92 cd 06 	sts	0x06CD, r14	; 0x8006cd <xTickCount>
    1874:	e1 14       	cp	r14, r1
    1876:	f1 04       	cpc	r15, r1
    1878:	b1 f4       	brne	.+44     	; 0x18a6 <xTaskIncrementTick+0x60>
    187a:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    187e:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    1882:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <pxOverflowDelayedTaskList>
    1886:	30 91 ed 06 	lds	r19, 0x06ED	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    188a:	30 93 ef 06 	sts	0x06EF, r19	; 0x8006ef <pxDelayedTaskList+0x1>
    188e:	20 93 ee 06 	sts	0x06EE, r18	; 0x8006ee <pxDelayedTaskList>
    1892:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    1896:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <pxOverflowDelayedTaskList>
    189a:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <xNumOfOverflows>
    18a4:	0b de       	rcall	.-1002   	; 0x14bc <prvResetNextTaskUnblockTime>
    18a6:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextTaskUnblockTime>
    18aa:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    18ae:	e8 16       	cp	r14, r24
    18b0:	f9 06       	cpc	r15, r25
    18b2:	10 f4       	brcc	.+4      	; 0x18b8 <xTaskIncrementTick+0x72>
    18b4:	d1 2c       	mov	r13, r1
    18b6:	53 c0       	rjmp	.+166    	; 0x195e <xTaskIncrementTick+0x118>
    18b8:	d1 2c       	mov	r13, r1
    18ba:	cc 24       	eor	r12, r12
    18bc:	c3 94       	inc	r12
    18be:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    18c2:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    18c6:	80 81       	ld	r24, Z
    18c8:	81 11       	cpse	r24, r1
    18ca:	07 c0       	rjmp	.+14     	; 0x18da <xTaskIncrementTick+0x94>
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
    18ce:	9f ef       	ldi	r25, 0xFF	; 255
    18d0:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    18d4:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    18d8:	42 c0       	rjmp	.+132    	; 0x195e <xTaskIncrementTick+0x118>
    18da:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    18de:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    18e2:	05 80       	ldd	r0, Z+5	; 0x05
    18e4:	f6 81       	ldd	r31, Z+6	; 0x06
    18e6:	e0 2d       	mov	r30, r0
    18e8:	c6 81       	ldd	r28, Z+6	; 0x06
    18ea:	d7 81       	ldd	r29, Z+7	; 0x07
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	e8 16       	cp	r14, r24
    18f2:	f9 06       	cpc	r15, r25
    18f4:	28 f4       	brcc	.+10     	; 0x1900 <xTaskIncrementTick+0xba>
    18f6:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    18fa:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    18fe:	2f c0       	rjmp	.+94     	; 0x195e <xTaskIncrementTick+0x118>
    1900:	8e 01       	movw	r16, r28
    1902:	0e 5f       	subi	r16, 0xFE	; 254
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	c8 01       	movw	r24, r16
    1908:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    190c:	8c 89       	ldd	r24, Y+20	; 0x14
    190e:	9d 89       	ldd	r25, Y+21	; 0x15
    1910:	89 2b       	or	r24, r25
    1912:	21 f0       	breq	.+8      	; 0x191c <xTaskIncrementTick+0xd6>
    1914:	ce 01       	movw	r24, r28
    1916:	0c 96       	adiw	r24, 0x0c	; 12
    1918:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    191c:	8e 89       	ldd	r24, Y+22	; 0x16
    191e:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1922:	98 17       	cp	r25, r24
    1924:	10 f4       	brcc	.+4      	; 0x192a <xTaskIncrementTick+0xe4>
    1926:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 01       	movw	r18, r24
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	22 0f       	add	r18, r18
    1934:	33 1f       	adc	r19, r19
    1936:	22 0f       	add	r18, r18
    1938:	33 1f       	adc	r19, r19
    193a:	82 0f       	add	r24, r18
    193c:	93 1f       	adc	r25, r19
    193e:	b8 01       	movw	r22, r16
    1940:	8e 5f       	subi	r24, 0xFE	; 254
    1942:	98 4f       	sbci	r25, 0xF8	; 248
    1944:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1948:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    194c:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1950:	9e 89       	ldd	r25, Y+22	; 0x16
    1952:	86 89       	ldd	r24, Z+22	; 0x16
    1954:	98 17       	cp	r25, r24
    1956:	08 f4       	brcc	.+2      	; 0x195a <xTaskIncrementTick+0x114>
    1958:	b2 cf       	rjmp	.-156    	; 0x18be <xTaskIncrementTick+0x78>
    195a:	dc 2c       	mov	r13, r12
    195c:	b0 cf       	rjmp	.-160    	; 0x18be <xTaskIncrementTick+0x78>
    195e:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1962:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1966:	86 89       	ldd	r24, Z+22	; 0x16
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	fc 01       	movw	r30, r24
    196c:	ee 0f       	add	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	ee 0f       	add	r30, r30
    1976:	ff 1f       	adc	r31, r31
    1978:	8e 0f       	add	r24, r30
    197a:	9f 1f       	adc	r25, r31
    197c:	fc 01       	movw	r30, r24
    197e:	ee 5f       	subi	r30, 0xFE	; 254
    1980:	f8 4f       	sbci	r31, 0xF8	; 248
    1982:	80 81       	ld	r24, Z
    1984:	82 30       	cpi	r24, 0x02	; 2
    1986:	48 f0       	brcs	.+18     	; 0x199a <xTaskIncrementTick+0x154>
    1988:	dd 24       	eor	r13, r13
    198a:	d3 94       	inc	r13
    198c:	06 c0       	rjmp	.+12     	; 0x199a <xTaskIncrementTick+0x154>
    198e:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <uxPendedTicks>
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <uxPendedTicks>
    1998:	d1 2c       	mov	r13, r1
    199a:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xYieldPending>
    199e:	88 23       	and	r24, r24
    19a0:	11 f0       	breq	.+4      	; 0x19a6 <xTaskIncrementTick+0x160>
    19a2:	dd 24       	eor	r13, r13
    19a4:	d3 94       	inc	r13
    19a6:	8d 2d       	mov	r24, r13
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	08 95       	ret

000019ba <xTaskResumeAll>:
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	0f 92       	push	r0
    19ce:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    19d2:	81 50       	subi	r24, 0x01	; 1
    19d4:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxSchedulerSuspended>
    19d8:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    19dc:	81 11       	cpse	r24, r1
    19de:	5d c0       	rjmp	.+186    	; 0x1a9a <xTaskResumeAll+0xe0>
    19e0:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
    19e4:	81 11       	cpse	r24, r1
    19e6:	33 c0       	rjmp	.+102    	; 0x1a4e <xTaskResumeAll+0x94>
    19e8:	5b c0       	rjmp	.+182    	; 0x1aa0 <xTaskResumeAll+0xe6>
    19ea:	d7 01       	movw	r26, r14
    19ec:	15 96       	adiw	r26, 0x05	; 5
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	16 97       	sbiw	r26, 0x06	; 6
    19f4:	c6 81       	ldd	r28, Z+6	; 0x06
    19f6:	d7 81       	ldd	r29, Z+7	; 0x07
    19f8:	ce 01       	movw	r24, r28
    19fa:	0c 96       	adiw	r24, 0x0c	; 12
    19fc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    1a00:	8e 01       	movw	r16, r28
    1a02:	0e 5f       	subi	r16, 0xFE	; 254
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	c8 01       	movw	r24, r16
    1a08:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    1a0c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a0e:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1a12:	98 17       	cp	r25, r24
    1a14:	10 f4       	brcc	.+4      	; 0x1a1a <xTaskResumeAll+0x60>
    1a16:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9c 01       	movw	r18, r24
    1a1e:	22 0f       	add	r18, r18
    1a20:	33 1f       	adc	r19, r19
    1a22:	22 0f       	add	r18, r18
    1a24:	33 1f       	adc	r19, r19
    1a26:	22 0f       	add	r18, r18
    1a28:	33 1f       	adc	r19, r19
    1a2a:	82 0f       	add	r24, r18
    1a2c:	93 1f       	adc	r25, r19
    1a2e:	b8 01       	movw	r22, r16
    1a30:	8e 5f       	subi	r24, 0xFE	; 254
    1a32:	98 4f       	sbci	r25, 0xF8	; 248
    1a34:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1a38:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1a3c:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1a40:	9e 89       	ldd	r25, Y+22	; 0x16
    1a42:	86 89       	ldd	r24, Z+22	; 0x16
    1a44:	98 17       	cp	r25, r24
    1a46:	68 f0       	brcs	.+26     	; 0x1a62 <xTaskResumeAll+0xa8>
    1a48:	d0 92 c9 06 	sts	0x06C9, r13	; 0x8006c9 <xYieldPending>
    1a4c:	0a c0       	rjmp	.+20     	; 0x1a62 <xTaskResumeAll+0xa8>
    1a4e:	c0 e0       	ldi	r28, 0x00	; 0
    1a50:	d0 e0       	ldi	r29, 0x00	; 0
    1a52:	0f 2e       	mov	r0, r31
    1a54:	f3 ee       	ldi	r31, 0xE3	; 227
    1a56:	ef 2e       	mov	r14, r31
    1a58:	f6 e0       	ldi	r31, 0x06	; 6
    1a5a:	ff 2e       	mov	r15, r31
    1a5c:	f0 2d       	mov	r31, r0
    1a5e:	dd 24       	eor	r13, r13
    1a60:	d3 94       	inc	r13
    1a62:	f7 01       	movw	r30, r14
    1a64:	80 81       	ld	r24, Z
    1a66:	81 11       	cpse	r24, r1
    1a68:	c0 cf       	rjmp	.-128    	; 0x19ea <xTaskResumeAll+0x30>
    1a6a:	cd 2b       	or	r28, r29
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <xTaskResumeAll+0xb6>
    1a6e:	26 dd       	rcall	.-1460   	; 0x14bc <prvResetNextTaskUnblockTime>
    1a70:	c0 91 ca 06 	lds	r28, 0x06CA	; 0x8006ca <uxPendedTicks>
    1a74:	cc 23       	and	r28, r28
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <xTaskResumeAll+0xd0>
    1a78:	d1 e0       	ldi	r29, 0x01	; 1
    1a7a:	e5 de       	rcall	.-566    	; 0x1846 <xTaskIncrementTick>
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	d0 93 c9 06 	sts	0x06C9, r29	; 0x8006c9 <xYieldPending>
    1a82:	c1 50       	subi	r28, 0x01	; 1
    1a84:	d1 f7       	brne	.-12     	; 0x1a7a <xTaskResumeAll+0xc0>
    1a86:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <uxPendedTicks>
    1a8a:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xYieldPending>
    1a8e:	88 23       	and	r24, r24
    1a90:	31 f0       	breq	.+12     	; 0x1a9e <xTaskResumeAll+0xe4>
    1a92:	0e 94 b8 04 	call	0x970	; 0x970 <vPortYield>
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <xTaskResumeAll+0xe6>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <xTaskResumeAll+0xe6>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	08 95       	ret

00001ab4 <vTaskDelay>:
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	ec 01       	movw	r28, r24
    1aba:	89 2b       	or	r24, r25
    1abc:	39 f0       	breq	.+14     	; 0x1acc <vTaskDelay+0x18>
    1abe:	b3 de       	rcall	.-666    	; 0x1826 <vTaskSuspendAll>
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	1a dd       	rcall	.-1484   	; 0x14fa <prvAddCurrentTaskToDelayedList>
    1ac6:	79 df       	rcall	.-270    	; 0x19ba <xTaskResumeAll>
    1ac8:	81 11       	cpse	r24, r1
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <vTaskDelay+0x1c>
    1acc:	0e 94 b8 04 	call	0x970	; 0x970 <vPortYield>
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	08 95       	ret

00001ad6 <vTaskSwitchContext>:
    1ad6:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1ada:	88 23       	and	r24, r24
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <vTaskSwitchContext+0x10>
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1ae4:	08 95       	ret
    1ae6:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <xYieldPending>
    1aea:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1aee:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1af2:	85 a1       	ldd	r24, Z+37	; 0x25
    1af4:	0e 94 57 03 	call	0x6ae	; 0x6ae <task_switch_out>
    1af8:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
    1afc:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1b00:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1b04:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1b08:	2d 91       	ld	r18, X+
    1b0a:	3c 91       	ld	r19, X
    1b0c:	87 89       	ldd	r24, Z+23	; 0x17
    1b0e:	90 8d       	ldd	r25, Z+24	; 0x18
    1b10:	82 17       	cp	r24, r18
    1b12:	93 07       	cpc	r25, r19
    1b14:	58 f0       	brcs	.+22     	; 0x1b2c <vTaskSwitchContext+0x56>
    1b16:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1b1a:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1b1e:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    1b22:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1b26:	67 5e       	subi	r22, 0xE7	; 231
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	4b d4       	rcall	.+2198   	; 0x23c2 <vApplicationStackOverflowHook>
    1b2c:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1b30:	82 2f       	mov	r24, r18
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	fc 01       	movw	r30, r24
    1b36:	ee 0f       	add	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	e8 0f       	add	r30, r24
    1b44:	f9 1f       	adc	r31, r25
    1b46:	ee 5f       	subi	r30, 0xFE	; 254
    1b48:	f8 4f       	sbci	r31, 0xF8	; 248
    1b4a:	30 81       	ld	r19, Z
    1b4c:	31 11       	cpse	r19, r1
    1b4e:	11 c0       	rjmp	.+34     	; 0x1b72 <vTaskSwitchContext+0x9c>
    1b50:	21 50       	subi	r18, 0x01	; 1
    1b52:	82 2f       	mov	r24, r18
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	fc 01       	movw	r30, r24
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	e8 0f       	add	r30, r24
    1b66:	f9 1f       	adc	r31, r25
    1b68:	ee 5f       	subi	r30, 0xFE	; 254
    1b6a:	f8 4f       	sbci	r31, 0xF8	; 248
    1b6c:	30 81       	ld	r19, Z
    1b6e:	33 23       	and	r19, r19
    1b70:	79 f3       	breq	.-34     	; 0x1b50 <vTaskSwitchContext+0x7a>
    1b72:	ac 01       	movw	r20, r24
    1b74:	44 0f       	add	r20, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	44 0f       	add	r20, r20
    1b7a:	55 1f       	adc	r21, r21
    1b7c:	44 0f       	add	r20, r20
    1b7e:	55 1f       	adc	r21, r21
    1b80:	48 0f       	add	r20, r24
    1b82:	59 1f       	adc	r21, r25
    1b84:	da 01       	movw	r26, r20
    1b86:	ae 5f       	subi	r26, 0xFE	; 254
    1b88:	b8 4f       	sbci	r27, 0xF8	; 248
    1b8a:	11 96       	adiw	r26, 0x01	; 1
    1b8c:	ed 91       	ld	r30, X+
    1b8e:	fc 91       	ld	r31, X
    1b90:	12 97       	sbiw	r26, 0x02	; 2
    1b92:	02 80       	ldd	r0, Z+2	; 0x02
    1b94:	f3 81       	ldd	r31, Z+3	; 0x03
    1b96:	e0 2d       	mov	r30, r0
    1b98:	12 96       	adiw	r26, 0x02	; 2
    1b9a:	fc 93       	st	X, r31
    1b9c:	ee 93       	st	-X, r30
    1b9e:	11 97       	sbiw	r26, 0x01	; 1
    1ba0:	4b 5f       	subi	r20, 0xFB	; 251
    1ba2:	58 4f       	sbci	r21, 0xF8	; 248
    1ba4:	e4 17       	cp	r30, r20
    1ba6:	f5 07       	cpc	r31, r21
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <vTaskSwitchContext+0xde>
    1baa:	42 81       	ldd	r20, Z+2	; 0x02
    1bac:	53 81       	ldd	r21, Z+3	; 0x03
    1bae:	fd 01       	movw	r30, r26
    1bb0:	52 83       	std	Z+2, r21	; 0x02
    1bb2:	41 83       	std	Z+1, r20	; 0x01
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	8e 0f       	add	r24, r30
    1bc4:	9f 1f       	adc	r25, r31
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	ee 5f       	subi	r30, 0xFE	; 254
    1bca:	f8 4f       	sbci	r31, 0xF8	; 248
    1bcc:	01 80       	ldd	r0, Z+1	; 0x01
    1bce:	f2 81       	ldd	r31, Z+2	; 0x02
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	86 81       	ldd	r24, Z+6	; 0x06
    1bd4:	97 81       	ldd	r25, Z+7	; 0x07
    1bd6:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxCurrentTCB+0x1>
    1bda:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxCurrentTCB>
    1bde:	20 93 cc 06 	sts	0x06CC, r18	; 0x8006cc <uxTopReadyPriority>
    1be2:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1be6:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1bea:	85 a1       	ldd	r24, Z+37	; 0x25
    1bec:	0c 94 4d 03 	jmp	0x69a	; 0x69a <task_switch_in>
    1bf0:	08 95       	ret

00001bf2 <vTaskPlaceOnEventList>:
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	eb 01       	movw	r28, r22
    1bf8:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1bfc:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1c00:	64 5f       	subi	r22, 0xF4	; 244
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255
    1c04:	0e 94 b2 03 	call	0x764	; 0x764 <vListInsert>
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	76 dc       	rcall	.-1812   	; 0x14fa <prvAddCurrentTaskToDelayedList>
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <vTaskPlaceOnEventListRestricted>:
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	8b 01       	movw	r16, r22
    1c1c:	c4 2f       	mov	r28, r20
    1c1e:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1c22:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1c26:	64 5f       	subi	r22, 0xF4	; 244
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1c2e:	cc 23       	and	r28, r28
    1c30:	11 f0       	breq	.+4      	; 0x1c36 <vTaskPlaceOnEventListRestricted+0x22>
    1c32:	0f ef       	ldi	r16, 0xFF	; 255
    1c34:	1f ef       	ldi	r17, 0xFF	; 255
    1c36:	6c 2f       	mov	r22, r28
    1c38:	c8 01       	movw	r24, r16
    1c3a:	5f dc       	rcall	.-1858   	; 0x14fa <prvAddCurrentTaskToDelayedList>
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <xTaskRemoveFromEventList>:
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	15 96       	adiw	r26, 0x05	; 5
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	16 97       	sbiw	r26, 0x06	; 6
    1c56:	c6 81       	ldd	r28, Z+6	; 0x06
    1c58:	d7 81       	ldd	r29, Z+7	; 0x07
    1c5a:	8e 01       	movw	r16, r28
    1c5c:	04 5f       	subi	r16, 0xF4	; 244
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	c8 01       	movw	r24, r16
    1c62:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    1c66:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1c6a:	81 11       	cpse	r24, r1
    1c6c:	1c c0       	rjmp	.+56     	; 0x1ca6 <xTaskRemoveFromEventList+0x62>
    1c6e:	0a 50       	subi	r16, 0x0A	; 10
    1c70:	11 09       	sbc	r17, r1
    1c72:	c8 01       	movw	r24, r16
    1c74:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    1c78:	8e 89       	ldd	r24, Y+22	; 0x16
    1c7a:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1c7e:	98 17       	cp	r25, r24
    1c80:	10 f4       	brcc	.+4      	; 0x1c86 <xTaskRemoveFromEventList+0x42>
    1c82:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 01       	movw	r18, r24
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	82 0f       	add	r24, r18
    1c98:	93 1f       	adc	r25, r19
    1c9a:	b8 01       	movw	r22, r16
    1c9c:	8e 5f       	subi	r24, 0xFE	; 254
    1c9e:	98 4f       	sbci	r25, 0xF8	; 248
    1ca0:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <xTaskRemoveFromEventList+0x6c>
    1ca6:	b8 01       	movw	r22, r16
    1ca8:	83 ee       	ldi	r24, 0xE3	; 227
    1caa:	96 e0       	ldi	r25, 0x06	; 6
    1cac:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1cb0:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1cb4:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1cb8:	9e 89       	ldd	r25, Y+22	; 0x16
    1cba:	86 89       	ldd	r24, Z+22	; 0x16
    1cbc:	89 17       	cp	r24, r25
    1cbe:	20 f4       	brcc	.+8      	; 0x1cc8 <xTaskRemoveFromEventList+0x84>
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <xTaskRemoveFromEventList+0x86>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <vTaskInternalSetTimeOutState>:
    1cd4:	20 91 c8 06 	lds	r18, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    1cd8:	fc 01       	movw	r30, r24
    1cda:	20 83       	st	Z, r18
    1cdc:	20 91 cd 06 	lds	r18, 0x06CD	; 0x8006cd <xTickCount>
    1ce0:	30 91 ce 06 	lds	r19, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1ce4:	32 83       	std	Z+2, r19	; 0x02
    1ce6:	21 83       	std	Z+1, r18	; 0x01
    1ce8:	08 95       	ret

00001cea <xTaskCheckForTimeOut>:
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	0f 92       	push	r0
    1cf4:	20 91 cd 06 	lds	r18, 0x06CD	; 0x8006cd <xTickCount>
    1cf8:	30 91 ce 06 	lds	r19, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1cfc:	db 01       	movw	r26, r22
    1cfe:	4d 91       	ld	r20, X+
    1d00:	5c 91       	ld	r21, X
    1d02:	4f 3f       	cpi	r20, 0xFF	; 255
    1d04:	bf ef       	ldi	r27, 0xFF	; 255
    1d06:	5b 07       	cpc	r21, r27
    1d08:	e9 f0       	breq	.+58     	; 0x1d44 <xTaskCheckForTimeOut+0x5a>
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d10:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    1d14:	b8 81       	ld	r27, Y
    1d16:	ba 17       	cp	r27, r26
    1d18:	19 f0       	breq	.+6      	; 0x1d20 <xTaskCheckForTimeOut+0x36>
    1d1a:	2e 17       	cp	r18, r30
    1d1c:	3f 07       	cpc	r19, r31
    1d1e:	a0 f4       	brcc	.+40     	; 0x1d48 <xTaskCheckForTimeOut+0x5e>
    1d20:	2e 1b       	sub	r18, r30
    1d22:	3f 0b       	sbc	r19, r31
    1d24:	24 17       	cp	r18, r20
    1d26:	35 07       	cpc	r19, r21
    1d28:	40 f4       	brcc	.+16     	; 0x1d3a <xTaskCheckForTimeOut+0x50>
    1d2a:	fb 01       	movw	r30, r22
    1d2c:	42 1b       	sub	r20, r18
    1d2e:	53 0b       	sbc	r21, r19
    1d30:	51 83       	std	Z+1, r21	; 0x01
    1d32:	40 83       	st	Z, r20
    1d34:	cf df       	rcall	.-98     	; 0x1cd4 <vTaskInternalSetTimeOutState>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	08 c0       	rjmp	.+16     	; 0x1d4a <xTaskCheckForTimeOut+0x60>
    1d3a:	fb 01       	movw	r30, r22
    1d3c:	11 82       	std	Z+1, r1	; 0x01
    1d3e:	10 82       	st	Z, r1
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <xTaskCheckForTimeOut+0x60>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <xTaskCheckForTimeOut+0x60>
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <vTaskMissedYield>:
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1d5a:	08 95       	ret

00001d5c <xTaskGetCurrentTaskHandle>:
    1d5c:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    1d60:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1d64:	08 95       	ret

00001d66 <xTaskGetSchedulerState>:
    1d66:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <xSchedulerRunning>
    1d6a:	88 23       	and	r24, r24
    1d6c:	31 f0       	breq	.+12     	; 0x1d7a <xTaskGetSchedulerState+0x14>
    1d6e:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1d72:	88 23       	and	r24, r24
    1d74:	21 f0       	breq	.+8      	; 0x1d7e <xTaskGetSchedulerState+0x18>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	08 95       	ret
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	08 95       	ret
    1d7e:	82 e0       	ldi	r24, 0x02	; 2
    1d80:	08 95       	ret

00001d82 <xTaskPriorityDisinherit>:
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	89 2b       	or	r24, r25
    1d8e:	79 f1       	breq	.+94     	; 0x1dee <xTaskPriorityDisinherit+0x6c>
    1d90:	84 a1       	ldd	r24, Z+36	; 0x24
    1d92:	81 50       	subi	r24, 0x01	; 1
    1d94:	84 a3       	std	Z+36, r24	; 0x24
    1d96:	26 89       	ldd	r18, Z+22	; 0x16
    1d98:	93 a1       	ldd	r25, Z+35	; 0x23
    1d9a:	29 17       	cp	r18, r25
    1d9c:	51 f1       	breq	.+84     	; 0x1df2 <xTaskPriorityDisinherit+0x70>
    1d9e:	81 11       	cpse	r24, r1
    1da0:	2a c0       	rjmp	.+84     	; 0x1df6 <xTaskPriorityDisinherit+0x74>
    1da2:	ef 01       	movw	r28, r30
    1da4:	8f 01       	movw	r16, r30
    1da6:	0e 5f       	subi	r16, 0xFE	; 254
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	c8 01       	movw	r24, r16
    1dac:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    1db0:	8b a1       	ldd	r24, Y+35	; 0x23
    1db2:	8e 8b       	std	Y+22, r24	; 0x16
    1db4:	24 e0       	ldi	r18, 0x04	; 4
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	28 1b       	sub	r18, r24
    1dba:	31 09       	sbc	r19, r1
    1dbc:	3d 87       	std	Y+13, r19	; 0x0d
    1dbe:	2c 87       	std	Y+12, r18	; 0x0c
    1dc0:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1dc4:	98 17       	cp	r25, r24
    1dc6:	10 f4       	brcc	.+4      	; 0x1dcc <xTaskPriorityDisinherit+0x4a>
    1dc8:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 01       	movw	r18, r24
    1dd0:	22 0f       	add	r18, r18
    1dd2:	33 1f       	adc	r19, r19
    1dd4:	22 0f       	add	r18, r18
    1dd6:	33 1f       	adc	r19, r19
    1dd8:	22 0f       	add	r18, r18
    1dda:	33 1f       	adc	r19, r19
    1ddc:	82 0f       	add	r24, r18
    1dde:	93 1f       	adc	r25, r19
    1de0:	b8 01       	movw	r22, r16
    1de2:	8e 5f       	subi	r24, 0xFE	; 254
    1de4:	98 4f       	sbci	r25, 0xF8	; 248
    1de6:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	05 c0       	rjmp	.+10     	; 0x1df8 <xTaskPriorityDisinherit+0x76>
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <xTaskPriorityDisinherit+0x76>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <xTaskPriorityDisinherit+0x76>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <xTaskNotifyWait>:
    1e02:	4f 92       	push	r4
    1e04:	5f 92       	push	r5
    1e06:	6f 92       	push	r6
    1e08:	7f 92       	push	r7
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	49 01       	movw	r8, r18
    1e1c:	5a 01       	movw	r10, r20
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	0f 92       	push	r0
    1e24:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e28:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e2c:	23 a5       	ldd	r18, Z+43	; 0x2b
    1e2e:	22 30       	cpi	r18, 0x02	; 2
    1e30:	21 f1       	breq	.+72     	; 0x1e7a <xTaskNotifyWait+0x78>
    1e32:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e36:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e3a:	47 a0       	ldd	r4, Z+39	; 0x27
    1e3c:	50 a4       	ldd	r5, Z+40	; 0x28
    1e3e:	61 a4       	ldd	r6, Z+41	; 0x29
    1e40:	72 a4       	ldd	r7, Z+42	; 0x2a
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	80 95       	com	r24
    1e48:	90 95       	com	r25
    1e4a:	a0 95       	com	r26
    1e4c:	b0 95       	com	r27
    1e4e:	84 21       	and	r24, r4
    1e50:	95 21       	and	r25, r5
    1e52:	a6 21       	and	r26, r6
    1e54:	b7 21       	and	r27, r7
    1e56:	87 a3       	std	Z+39, r24	; 0x27
    1e58:	90 a7       	std	Z+40, r25	; 0x28
    1e5a:	a1 a7       	std	Z+41, r26	; 0x29
    1e5c:	b2 a7       	std	Z+42, r27	; 0x2a
    1e5e:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e62:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	83 a7       	std	Z+43, r24	; 0x2b
    1e6a:	e1 14       	cp	r14, r1
    1e6c:	f1 04       	cpc	r15, r1
    1e6e:	29 f0       	breq	.+10     	; 0x1e7a <xTaskNotifyWait+0x78>
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	c7 01       	movw	r24, r14
    1e74:	42 db       	rcall	.-2428   	; 0x14fa <prvAddCurrentTaskToDelayedList>
    1e76:	0e 94 b8 04 	call	0x970	; 0x970 <vPortYield>
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	0f 92       	push	r0
    1e84:	01 15       	cp	r16, r1
    1e86:	11 05       	cpc	r17, r1
    1e88:	69 f0       	breq	.+26     	; 0x1ea4 <xTaskNotifyWait+0xa2>
    1e8a:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e8e:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e92:	87 a1       	ldd	r24, Z+39	; 0x27
    1e94:	90 a5       	ldd	r25, Z+40	; 0x28
    1e96:	a1 a5       	ldd	r26, Z+41	; 0x29
    1e98:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
    1ea4:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1ea8:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1eac:	83 a5       	ldd	r24, Z+43	; 0x2b
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	b1 f4       	brne	.+44     	; 0x1ede <xTaskNotifyWait+0xdc>
    1eb2:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1eb6:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1eba:	87 a1       	ldd	r24, Z+39	; 0x27
    1ebc:	90 a5       	ldd	r25, Z+40	; 0x28
    1ebe:	a1 a5       	ldd	r26, Z+41	; 0x29
    1ec0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1ec2:	80 94       	com	r8
    1ec4:	90 94       	com	r9
    1ec6:	a0 94       	com	r10
    1ec8:	b0 94       	com	r11
    1eca:	88 22       	and	r8, r24
    1ecc:	99 22       	and	r9, r25
    1ece:	aa 22       	and	r10, r26
    1ed0:	bb 22       	and	r11, r27
    1ed2:	87 a2       	std	Z+39, r8	; 0x27
    1ed4:	90 a6       	std	Z+40, r9	; 0x28
    1ed6:	a1 a6       	std	Z+41, r10	; 0x29
    1ed8:	b2 a6       	std	Z+42, r11	; 0x2a
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <xTaskNotifyWait+0xde>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1ee4:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1ee8:	13 a6       	std	Z+43, r1	; 0x2b
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	bf 90       	pop	r11
    1ef8:	af 90       	pop	r10
    1efa:	9f 90       	pop	r9
    1efc:	8f 90       	pop	r8
    1efe:	7f 90       	pop	r7
    1f00:	6f 90       	pop	r6
    1f02:	5f 90       	pop	r5
    1f04:	4f 90       	pop	r4
    1f06:	08 95       	ret

00001f08 <xTaskGenericNotify>:
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	fc 01       	movw	r30, r24
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	0f 92       	push	r0
    1f18:	01 15       	cp	r16, r1
    1f1a:	11 05       	cpc	r17, r1
    1f1c:	49 f0       	breq	.+18     	; 0x1f30 <xTaskGenericNotify+0x28>
    1f1e:	87 a1       	ldd	r24, Z+39	; 0x27
    1f20:	90 a5       	ldd	r25, Z+40	; 0x28
    1f22:	a1 a5       	ldd	r26, Z+41	; 0x29
    1f24:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1f26:	e8 01       	movw	r28, r16
    1f28:	88 83       	st	Y, r24
    1f2a:	99 83       	std	Y+1, r25	; 0x01
    1f2c:	aa 83       	std	Y+2, r26	; 0x02
    1f2e:	bb 83       	std	Y+3, r27	; 0x03
    1f30:	83 a5       	ldd	r24, Z+43	; 0x2b
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	93 a7       	std	Z+43, r25	; 0x2b
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	b1 f0       	breq	.+44     	; 0x1f66 <xTaskGenericNotify+0x5e>
    1f3a:	18 f4       	brcc	.+6      	; 0x1f42 <xTaskGenericNotify+0x3a>
    1f3c:	21 30       	cpi	r18, 0x01	; 1
    1f3e:	31 f0       	breq	.+12     	; 0x1f4c <xTaskGenericNotify+0x44>
    1f40:	2a c0       	rjmp	.+84     	; 0x1f96 <xTaskGenericNotify+0x8e>
    1f42:	23 30       	cpi	r18, 0x03	; 3
    1f44:	e9 f0       	breq	.+58     	; 0x1f80 <xTaskGenericNotify+0x78>
    1f46:	24 30       	cpi	r18, 0x04	; 4
    1f48:	01 f1       	breq	.+64     	; 0x1f8a <xTaskGenericNotify+0x82>
    1f4a:	25 c0       	rjmp	.+74     	; 0x1f96 <xTaskGenericNotify+0x8e>
    1f4c:	07 a1       	ldd	r16, Z+39	; 0x27
    1f4e:	10 a5       	ldd	r17, Z+40	; 0x28
    1f50:	21 a5       	ldd	r18, Z+41	; 0x29
    1f52:	32 a5       	ldd	r19, Z+42	; 0x2a
    1f54:	40 2b       	or	r20, r16
    1f56:	51 2b       	or	r21, r17
    1f58:	62 2b       	or	r22, r18
    1f5a:	73 2b       	or	r23, r19
    1f5c:	47 a3       	std	Z+39, r20	; 0x27
    1f5e:	50 a7       	std	Z+40, r21	; 0x28
    1f60:	61 a7       	std	Z+41, r22	; 0x29
    1f62:	72 a7       	std	Z+42, r23	; 0x2a
    1f64:	18 c0       	rjmp	.+48     	; 0x1f96 <xTaskGenericNotify+0x8e>
    1f66:	47 a1       	ldd	r20, Z+39	; 0x27
    1f68:	50 a5       	ldd	r21, Z+40	; 0x28
    1f6a:	61 a5       	ldd	r22, Z+41	; 0x29
    1f6c:	72 a5       	ldd	r23, Z+42	; 0x2a
    1f6e:	4f 5f       	subi	r20, 0xFF	; 255
    1f70:	5f 4f       	sbci	r21, 0xFF	; 255
    1f72:	6f 4f       	sbci	r22, 0xFF	; 255
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	47 a3       	std	Z+39, r20	; 0x27
    1f78:	50 a7       	std	Z+40, r21	; 0x28
    1f7a:	61 a7       	std	Z+41, r22	; 0x29
    1f7c:	72 a7       	std	Z+42, r23	; 0x2a
    1f7e:	0b c0       	rjmp	.+22     	; 0x1f96 <xTaskGenericNotify+0x8e>
    1f80:	47 a3       	std	Z+39, r20	; 0x27
    1f82:	50 a7       	std	Z+40, r21	; 0x28
    1f84:	61 a7       	std	Z+41, r22	; 0x29
    1f86:	72 a7       	std	Z+42, r23	; 0x2a
    1f88:	06 c0       	rjmp	.+12     	; 0x1f96 <xTaskGenericNotify+0x8e>
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	79 f1       	breq	.+94     	; 0x1fec <xTaskGenericNotify+0xe4>
    1f8e:	47 a3       	std	Z+39, r20	; 0x27
    1f90:	50 a7       	std	Z+40, r21	; 0x28
    1f92:	61 a7       	std	Z+41, r22	; 0x29
    1f94:	72 a7       	std	Z+42, r23	; 0x2a
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	59 f5       	brne	.+86     	; 0x1ff0 <xTaskGenericNotify+0xe8>
    1f9a:	ef 01       	movw	r28, r30
    1f9c:	8f 01       	movw	r16, r30
    1f9e:	0e 5f       	subi	r16, 0xFE	; 254
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	c8 01       	movw	r24, r16
    1fa4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    1fa8:	8e 89       	ldd	r24, Y+22	; 0x16
    1faa:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1fae:	98 17       	cp	r25, r24
    1fb0:	10 f4       	brcc	.+4      	; 0x1fb6 <xTaskGenericNotify+0xae>
    1fb2:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9c 01       	movw	r18, r24
    1fba:	22 0f       	add	r18, r18
    1fbc:	33 1f       	adc	r19, r19
    1fbe:	22 0f       	add	r18, r18
    1fc0:	33 1f       	adc	r19, r19
    1fc2:	22 0f       	add	r18, r18
    1fc4:	33 1f       	adc	r19, r19
    1fc6:	82 0f       	add	r24, r18
    1fc8:	93 1f       	adc	r25, r19
    1fca:	b8 01       	movw	r22, r16
    1fcc:	8e 5f       	subi	r24, 0xFE	; 254
    1fce:	98 4f       	sbci	r25, 0xF8	; 248
    1fd0:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    1fd4:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1fd8:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1fdc:	9e 89       	ldd	r25, Y+22	; 0x16
    1fde:	86 89       	ldd	r24, Z+22	; 0x16
    1fe0:	89 17       	cp	r24, r25
    1fe2:	40 f4       	brcc	.+16     	; 0x1ff4 <xTaskGenericNotify+0xec>
    1fe4:	0e 94 b8 04 	call	0x970	; 0x970 <vPortYield>
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <xTaskGenericNotify+0xee>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <xTaskGenericNotify+0xee>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <xTaskGenericNotify+0xee>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <xTaskGenericNotifyFromISR>:
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	fc 01       	movw	r30, r24
    2012:	01 15       	cp	r16, r1
    2014:	11 05       	cpc	r17, r1
    2016:	49 f0       	breq	.+18     	; 0x202a <xTaskGenericNotifyFromISR+0x26>
    2018:	87 a1       	ldd	r24, Z+39	; 0x27
    201a:	90 a5       	ldd	r25, Z+40	; 0x28
    201c:	a1 a5       	ldd	r26, Z+41	; 0x29
    201e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2020:	e8 01       	movw	r28, r16
    2022:	88 83       	st	Y, r24
    2024:	99 83       	std	Y+1, r25	; 0x01
    2026:	aa 83       	std	Y+2, r26	; 0x02
    2028:	bb 83       	std	Y+3, r27	; 0x03
    202a:	83 a5       	ldd	r24, Z+43	; 0x2b
    202c:	92 e0       	ldi	r25, 0x02	; 2
    202e:	93 a7       	std	Z+43, r25	; 0x2b
    2030:	22 30       	cpi	r18, 0x02	; 2
    2032:	b1 f0       	breq	.+44     	; 0x2060 <xTaskGenericNotifyFromISR+0x5c>
    2034:	18 f4       	brcc	.+6      	; 0x203c <xTaskGenericNotifyFromISR+0x38>
    2036:	21 30       	cpi	r18, 0x01	; 1
    2038:	31 f0       	breq	.+12     	; 0x2046 <xTaskGenericNotifyFromISR+0x42>
    203a:	2b c0       	rjmp	.+86     	; 0x2092 <xTaskGenericNotifyFromISR+0x8e>
    203c:	23 30       	cpi	r18, 0x03	; 3
    203e:	e9 f0       	breq	.+58     	; 0x207a <xTaskGenericNotifyFromISR+0x76>
    2040:	24 30       	cpi	r18, 0x04	; 4
    2042:	01 f1       	breq	.+64     	; 0x2084 <xTaskGenericNotifyFromISR+0x80>
    2044:	26 c0       	rjmp	.+76     	; 0x2092 <xTaskGenericNotifyFromISR+0x8e>
    2046:	07 a1       	ldd	r16, Z+39	; 0x27
    2048:	10 a5       	ldd	r17, Z+40	; 0x28
    204a:	21 a5       	ldd	r18, Z+41	; 0x29
    204c:	32 a5       	ldd	r19, Z+42	; 0x2a
    204e:	40 2b       	or	r20, r16
    2050:	51 2b       	or	r21, r17
    2052:	62 2b       	or	r22, r18
    2054:	73 2b       	or	r23, r19
    2056:	47 a3       	std	Z+39, r20	; 0x27
    2058:	50 a7       	std	Z+40, r21	; 0x28
    205a:	61 a7       	std	Z+41, r22	; 0x29
    205c:	72 a7       	std	Z+42, r23	; 0x2a
    205e:	19 c0       	rjmp	.+50     	; 0x2092 <xTaskGenericNotifyFromISR+0x8e>
    2060:	47 a1       	ldd	r20, Z+39	; 0x27
    2062:	50 a5       	ldd	r21, Z+40	; 0x28
    2064:	61 a5       	ldd	r22, Z+41	; 0x29
    2066:	72 a5       	ldd	r23, Z+42	; 0x2a
    2068:	4f 5f       	subi	r20, 0xFF	; 255
    206a:	5f 4f       	sbci	r21, 0xFF	; 255
    206c:	6f 4f       	sbci	r22, 0xFF	; 255
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	47 a3       	std	Z+39, r20	; 0x27
    2072:	50 a7       	std	Z+40, r21	; 0x28
    2074:	61 a7       	std	Z+41, r22	; 0x29
    2076:	72 a7       	std	Z+42, r23	; 0x2a
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <xTaskGenericNotifyFromISR+0x8e>
    207a:	47 a3       	std	Z+39, r20	; 0x27
    207c:	50 a7       	std	Z+40, r21	; 0x28
    207e:	61 a7       	std	Z+41, r22	; 0x29
    2080:	72 a7       	std	Z+42, r23	; 0x2a
    2082:	07 c0       	rjmp	.+14     	; 0x2092 <xTaskGenericNotifyFromISR+0x8e>
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	09 f4       	brne	.+2      	; 0x208a <xTaskGenericNotifyFromISR+0x86>
    2088:	41 c0       	rjmp	.+130    	; 0x210c <xTaskGenericNotifyFromISR+0x108>
    208a:	47 a3       	std	Z+39, r20	; 0x27
    208c:	50 a7       	std	Z+40, r21	; 0x28
    208e:	61 a7       	std	Z+41, r22	; 0x29
    2090:	72 a7       	std	Z+42, r23	; 0x2a
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	e9 f5       	brne	.+122    	; 0x2110 <xTaskGenericNotifyFromISR+0x10c>
    2096:	ef 01       	movw	r28, r30
    2098:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    209c:	81 11       	cpse	r24, r1
    209e:	1d c0       	rjmp	.+58     	; 0x20da <xTaskGenericNotifyFromISR+0xd6>
    20a0:	8f 01       	movw	r16, r30
    20a2:	0e 5f       	subi	r16, 0xFE	; 254
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	c8 01       	movw	r24, r16
    20a8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
    20ac:	8e 89       	ldd	r24, Y+22	; 0x16
    20ae:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    20b2:	98 17       	cp	r25, r24
    20b4:	10 f4       	brcc	.+4      	; 0x20ba <xTaskGenericNotifyFromISR+0xb6>
    20b6:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9c 01       	movw	r18, r24
    20be:	22 0f       	add	r18, r18
    20c0:	33 1f       	adc	r19, r19
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	22 0f       	add	r18, r18
    20c8:	33 1f       	adc	r19, r19
    20ca:	82 0f       	add	r24, r18
    20cc:	93 1f       	adc	r25, r19
    20ce:	b8 01       	movw	r22, r16
    20d0:	8e 5f       	subi	r24, 0xFE	; 254
    20d2:	98 4f       	sbci	r25, 0xF8	; 248
    20d4:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    20d8:	07 c0       	rjmp	.+14     	; 0x20e8 <xTaskGenericNotifyFromISR+0xe4>
    20da:	bf 01       	movw	r22, r30
    20dc:	64 5f       	subi	r22, 0xF4	; 244
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	83 ee       	ldi	r24, 0xE3	; 227
    20e2:	96 e0       	ldi	r25, 0x06	; 6
    20e4:	0e 94 91 03 	call	0x722	; 0x722 <vListInsertEnd>
    20e8:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    20ec:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    20f0:	9e 89       	ldd	r25, Y+22	; 0x16
    20f2:	86 89       	ldd	r24, Z+22	; 0x16
    20f4:	89 17       	cp	r24, r25
    20f6:	70 f4       	brcc	.+28     	; 0x2114 <xTaskGenericNotifyFromISR+0x110>
    20f8:	e1 14       	cp	r14, r1
    20fa:	f1 04       	cpc	r15, r1
    20fc:	19 f0       	breq	.+6      	; 0x2104 <xTaskGenericNotifyFromISR+0x100>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	f7 01       	movw	r30, r14
    2102:	80 83       	st	Z, r24
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <xTaskGenericNotifyFromISR+0x112>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	03 c0       	rjmp	.+6      	; 0x2116 <xTaskGenericNotifyFromISR+0x112>
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <xTaskGenericNotifyFromISR+0x112>
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	08 95       	ret

00002124 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	21 f4       	brne	.+8      	; 0x2130 <xTaskNotifyStateClear+0xc>
    2128:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    212c:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2136:	fc 01       	movw	r30, r24
    2138:	23 a5       	ldd	r18, Z+43	; 0x2b
    213a:	22 30       	cpi	r18, 0x02	; 2
    213c:	19 f4       	brne	.+6      	; 0x2144 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    213e:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2144:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    214a:	08 95       	ret

0000214c <prvInsertTimerInActiveList>:
    214c:	fc 01       	movw	r30, r24
    214e:	73 83       	std	Z+3, r23	; 0x03
    2150:	62 83       	std	Z+2, r22	; 0x02
    2152:	91 87       	std	Z+9, r25	; 0x09
    2154:	80 87       	std	Z+8, r24	; 0x08
    2156:	46 17       	cp	r20, r22
    2158:	57 07       	cpc	r21, r23
    215a:	90 f0       	brcs	.+36     	; 0x2180 <prvInsertTimerInActiveList+0x34>
    215c:	42 1b       	sub	r20, r18
    215e:	53 0b       	sbc	r21, r19
    2160:	84 85       	ldd	r24, Z+12	; 0x0c
    2162:	95 85       	ldd	r25, Z+13	; 0x0d
    2164:	48 17       	cp	r20, r24
    2166:	59 07       	cpc	r21, r25
    2168:	e0 f4       	brcc	.+56     	; 0x21a2 <prvInsertTimerInActiveList+0x56>
    216a:	bf 01       	movw	r22, r30
    216c:	6e 5f       	subi	r22, 0xFE	; 254
    216e:	7f 4f       	sbci	r23, 0xFF	; 255
    2170:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxOverflowTimerList>
    2174:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxOverflowTimerList+0x1>
    2178:	0e 94 b2 03 	call	0x764	; 0x764 <vListInsert>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	08 95       	ret
    2180:	42 17       	cp	r20, r18
    2182:	53 07       	cpc	r21, r19
    2184:	18 f4       	brcc	.+6      	; 0x218c <prvInsertTimerInActiveList+0x40>
    2186:	62 17       	cp	r22, r18
    2188:	73 07       	cpc	r23, r19
    218a:	68 f4       	brcc	.+26     	; 0x21a6 <prvInsertTimerInActiveList+0x5a>
    218c:	bf 01       	movw	r22, r30
    218e:	6e 5f       	subi	r22, 0xFE	; 254
    2190:	7f 4f       	sbci	r23, 0xFF	; 255
    2192:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <pxCurrentTimerList>
    2196:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
    219a:	0e 94 b2 03 	call	0x764	; 0x764 <vListInsert>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	08 95       	ret
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	08 95       	ret
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	08 95       	ret

000021aa <prvCheckForValidListAndQueue>:
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	0f 92       	push	r0
    21b0:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    21b4:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    21b8:	89 2b       	or	r24, r25
    21ba:	e9 f4       	brne	.+58     	; 0x21f6 <prvCheckForValidListAndQueue+0x4c>
    21bc:	8b e3       	ldi	r24, 0x3B	; 59
    21be:	97 e0       	ldi	r25, 0x07	; 7
    21c0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    21c4:	82 e3       	ldi	r24, 0x32	; 50
    21c6:	97 e0       	ldi	r25, 0x07	; 7
    21c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    21cc:	8b e3       	ldi	r24, 0x3B	; 59
    21ce:	97 e0       	ldi	r25, 0x07	; 7
    21d0:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <pxCurrentTimerList+0x1>
    21d4:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <pxCurrentTimerList>
    21d8:	82 e3       	ldi	r24, 0x32	; 50
    21da:	97 e0       	ldi	r25, 0x07	; 7
    21dc:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <pxOverflowTimerList+0x1>
    21e0:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <pxOverflowTimerList>
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	65 e0       	ldi	r22, 0x05	; 5
    21e8:	8a e0       	ldi	r24, 0x0A	; 10
    21ea:	0e 94 91 06 	call	0xd22	; 0xd22 <xQueueGenericCreate>
    21ee:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <xTimerQueue+0x1>
    21f2:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <xTimerQueue>
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	08 95       	ret

000021fc <xTimerCreateTimerTask>:
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	d3 df       	rcall	.-90     	; 0x21aa <prvCheckForValidListAndQueue>
    2204:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    2208:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    220c:	89 2b       	or	r24, r25
    220e:	89 f0       	breq	.+34     	; 0x2232 <__stack+0x33>
    2210:	0f 2e       	mov	r0, r31
    2212:	fa e2       	ldi	r31, 0x2A	; 42
    2214:	ef 2e       	mov	r14, r31
    2216:	f7 e0       	ldi	r31, 0x07	; 7
    2218:	ff 2e       	mov	r15, r31
    221a:	f0 2d       	mov	r31, r0
    221c:	03 e0       	ldi	r16, 0x03	; 3
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	45 e5       	ldi	r20, 0x55	; 85
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	6b e6       	ldi	r22, 0x6B	; 107
    2228:	73 e0       	ldi	r23, 0x03	; 3
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	b9 d9       	rcall	.-3214   	; 0x15a2 <xTaskCreate>
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <__stack+0x35>
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	0f 91       	pop	r16
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	08 95       	ret

0000223c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    223c:	0f 93       	push	r16
    223e:	1f 93       	push	r17
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	00 d0       	rcall	.+0      	; 0x2246 <xTimerGenericCommand+0xa>
    2246:	1f 92       	push	r1
    2248:	1f 92       	push	r1
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    224e:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <xTimerQueue>
    2252:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <xTimerQueue+0x1>
    2256:	30 97       	sbiw	r30, 0x00	; 0
    2258:	69 f1       	breq	.+90     	; 0x22b4 <xTimerGenericCommand+0x78>
    225a:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    225c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    225e:	5b 83       	std	Y+3, r21	; 0x03
    2260:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2262:	9d 83       	std	Y+5, r25	; 0x05
    2264:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2266:	66 30       	cpi	r22, 0x06	; 6
    2268:	e4 f4       	brge	.+56     	; 0x22a2 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    226a:	7d dd       	rcall	.-1286   	; 0x1d66 <xTaskGetSchedulerState>
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	61 f4       	brne	.+24     	; 0x2288 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	a8 01       	movw	r20, r16
    2274:	be 01       	movw	r22, r28
    2276:	6f 5f       	subi	r22, 0xFF	; 255
    2278:	7f 4f       	sbci	r23, 0xFF	; 255
    227a:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    227e:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    2282:	0e 94 bf 06 	call	0xd7e	; 0xd7e <xQueueGenericSend>
    2286:	17 c0       	rjmp	.+46     	; 0x22b6 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	be 01       	movw	r22, r28
    2290:	6f 5f       	subi	r22, 0xFF	; 255
    2292:	7f 4f       	sbci	r23, 0xFF	; 255
    2294:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    2298:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    229c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <xQueueGenericSend>
    22a0:	0a c0       	rjmp	.+20     	; 0x22b6 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	ad 01       	movw	r20, r26
    22a6:	be 01       	movw	r22, r28
    22a8:	6f 5f       	subi	r22, 0xFF	; 255
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	cf 01       	movw	r24, r30
    22ae:	0e 94 51 07 	call	0xea2	; 0xea2 <xQueueGenericSendFromISR>
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    22e0:	a8 da       	rcall	.-2736   	; 0x1832 <xTaskGetTickCount>
    22e2:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    22e4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <xLastTime.2432>
    22e8:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <xLastTime.2432+0x1>
    22ec:	e8 16       	cp	r14, r24
    22ee:	f9 06       	cpc	r15, r25
    22f0:	08 f0       	brcs	.+2      	; 0x22f4 <prvSampleTimeNow+0x2a>
    22f2:	47 c0       	rjmp	.+142    	; 0x2382 <prvSampleTimeNow+0xb8>
    22f4:	2f c0       	rjmp	.+94     	; 0x2354 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    22f6:	05 80       	ldd	r0, Z+5	; 0x05
    22f8:	f6 81       	ldd	r31, Z+6	; 0x06
    22fa:	e0 2d       	mov	r30, r0
    22fc:	a0 80       	ld	r10, Z
    22fe:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2300:	c6 81       	ldd	r28, Z+6	; 0x06
    2302:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2304:	8e 01       	movw	r16, r28
    2306:	0e 5f       	subi	r16, 0xFE	; 254
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	c8 01       	movw	r24, r16
    230c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2310:	e8 89       	ldd	r30, Y+16	; 0x10
    2312:	f9 89       	ldd	r31, Y+17	; 0x11
    2314:	ce 01       	movw	r24, r28
    2316:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	82 ff       	sbrs	r24, 2
    231c:	1b c0       	rjmp	.+54     	; 0x2354 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    231e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2320:	9d 85       	ldd	r25, Y+13	; 0x0d
    2322:	8a 0d       	add	r24, r10
    2324:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2326:	a8 16       	cp	r10, r24
    2328:	b9 06       	cpc	r11, r25
    232a:	60 f4       	brcc	.+24     	; 0x2344 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    232c:	9b 83       	std	Y+3, r25	; 0x03
    232e:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2330:	d9 87       	std	Y+9, r29	; 0x09
    2332:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2334:	b8 01       	movw	r22, r16
    2336:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <pxCurrentTimerList>
    233a:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
    233e:	0e 94 b2 03 	call	0x764	; 0x764 <vListInsert>
    2342:	08 c0       	rjmp	.+16     	; 0x2354 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2344:	00 e0       	ldi	r16, 0x00	; 0
    2346:	10 e0       	ldi	r17, 0x00	; 0
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	a5 01       	movw	r20, r10
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	ce 01       	movw	r24, r28
    2352:	74 df       	rcall	.-280    	; 0x223c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2354:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxCurrentTimerList>
    2358:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
    235c:	80 81       	ld	r24, Z
    235e:	81 11       	cpse	r24, r1
    2360:	ca cf       	rjmp	.-108    	; 0x22f6 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2362:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxOverflowTimerList>
    2366:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxOverflowTimerList+0x1>
    236a:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <pxCurrentTimerList+0x1>
    236e:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2372:	f0 93 2f 07 	sts	0x072F, r31	; 0x80072f <pxOverflowTimerList+0x1>
    2376:	e0 93 2e 07 	sts	0x072E, r30	; 0x80072e <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	f6 01       	movw	r30, r12
    237e:	80 83       	st	Z, r24
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2382:	f6 01       	movw	r30, r12
    2384:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2386:	f0 92 29 07 	sts	0x0729, r15	; 0x800729 <xLastTime.2432+0x1>
    238a:	e0 92 28 07 	sts	0x0728, r14	; 0x800728 <xLastTime.2432>

    return xTimeNow;
}
    238e:	c7 01       	movw	r24, r14
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
    239c:	df 90       	pop	r13
    239e:	cf 90       	pop	r12
    23a0:	bf 90       	pop	r11
    23a2:	af 90       	pop	r10
    23a4:	08 95       	ret

000023a6 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    23a6:	08 95       	ret

000023a8 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    23a8:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    23aa:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23ac:	2f ef       	ldi	r18, 0xFF	; 255
    23ae:	80 e7       	ldi	r24, 0x70	; 112
    23b0:	92 e0       	ldi	r25, 0x02	; 2
    23b2:	21 50       	subi	r18, 0x01	; 1
    23b4:	80 40       	sbci	r24, 0x00	; 0
    23b6:	90 40       	sbci	r25, 0x00	; 0
    23b8:	e1 f7       	brne	.-8      	; 0x23b2 <vApplicationMallocFailedHook+0xa>
    23ba:	00 c0       	rjmp	.+0      	; 0x23bc <vApplicationMallocFailedHook+0x14>
    23bc:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    23be:	1f 9a       	sbi	0x03, 7	; 3
    23c0:	f5 cf       	rjmp	.-22     	; 0x23ac <vApplicationMallocFailedHook+0x4>

000023c2 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    23c2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    23c4:	2f 9a       	sbi	0x05, 7	; 5
    23c6:	2f ef       	ldi	r18, 0xFF	; 255
    23c8:	87 ea       	ldi	r24, 0xA7	; 167
    23ca:	91 e6       	ldi	r25, 0x61	; 97
    23cc:	21 50       	subi	r18, 0x01	; 1
    23ce:	80 40       	sbci	r24, 0x00	; 0
    23d0:	90 40       	sbci	r25, 0x00	; 0
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <vApplicationStackOverflowHook+0xa>
    23d4:	00 c0       	rjmp	.+0      	; 0x23d6 <vApplicationStackOverflowHook+0x14>
    23d6:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    23d8:	1f 9a       	sbi	0x03, 7	; 3
    23da:	f5 cf       	rjmp	.-22     	; 0x23c6 <vApplicationStackOverflowHook+0x4>

000023dc <main>:
void driver_init();
void lora_handler_create(UBaseType_t lora_handler_task_priority);

int main(void)
{			
	driver_init();
    23dc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <driver_init>
	
	lora_handler_create(LORA_HANDLER_TASK_PRIORITY);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	0e 94 28 02 	call	0x450	; 0x450 <lora_handler_create>
				
	vTaskStartScheduler();
    23e6:	ed d9       	rcall	.-3110   	; 0x17c2 <vTaskStartScheduler>
    23e8:	ff cf       	rjmp	.-2      	; 0x23e8 <main+0xc>

000023ea <usart_getchar>:
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	1f 92       	push	r1
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	be 01       	movw	r22, r28
    23f6:	6f 5f       	subi	r22, 0xFF	; 255
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <_com_serial_instance>
    23fe:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <_com_serial_instance+0x1>
    2402:	4f d1       	rcall	.+670    	; 0x26a2 <serial_get_byte>
    2404:	81 11       	cpse	r24, r1
    2406:	f6 cf       	rjmp	.-20     	; 0x23f4 <usart_getchar+0xa>
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0f 90       	pop	r0
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <usart_putchar>:
    2414:	68 2f       	mov	r22, r24
    2416:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <_com_serial_instance>
    241a:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <_com_serial_instance+0x1>
    241e:	cc d0       	rcall	.+408    	; 0x25b8 <serial_send_byte>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	08 95       	ret

00002426 <stdioCreate>:
    2426:	8f 92       	push	r8
    2428:	9f 92       	push	r9
    242a:	af 92       	push	r10
    242c:	cf 92       	push	r12
    242e:	ef 92       	push	r14
    2430:	0f 93       	push	r16
    2432:	81 2c       	mov	r8, r1
    2434:	91 2c       	mov	r9, r1
    2436:	68 94       	set
    2438:	aa 24       	eor	r10, r10
    243a:	a7 f8       	bld	r10, 7
    243c:	68 94       	set
    243e:	cc 24       	eor	r12, r12
    2440:	c7 f8       	bld	r12, 7
    2442:	e1 2c       	mov	r14, r1
    2444:	00 e0       	ldi	r16, 0x00	; 0
    2446:	23 e0       	ldi	r18, 0x03	; 3
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	51 ee       	ldi	r21, 0xE1	; 225
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	13 d0       	rcall	.+38     	; 0x2478 <serial_new_instance>
    2452:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <_com_serial_instance+0x1>
    2456:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <_com_serial_instance>
    245a:	e9 ea       	ldi	r30, 0xA9	; 169
    245c:	f8 e0       	ldi	r31, 0x08	; 8
    245e:	86 e0       	ldi	r24, 0x06	; 6
    2460:	92 e0       	ldi	r25, 0x02	; 2
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	93 83       	std	Z+3, r25	; 0x03
    2468:	82 83       	std	Z+2, r24	; 0x02
    246a:	0f 91       	pop	r16
    246c:	ef 90       	pop	r14
    246e:	cf 90       	pop	r12
    2470:	af 90       	pop	r10
    2472:	9f 90       	pop	r9
    2474:	8f 90       	pop	r8
    2476:	08 95       	ret

00002478 <serial_new_instance>:
    2478:	2f 92       	push	r2
    247a:	3f 92       	push	r3
    247c:	4f 92       	push	r4
    247e:	5f 92       	push	r5
    2480:	6f 92       	push	r6
    2482:	7f 92       	push	r7
    2484:	8f 92       	push	r8
    2486:	9f 92       	push	r9
    2488:	af 92       	push	r10
    248a:	cf 92       	push	r12
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	f8 2e       	mov	r15, r24
    249e:	2a 01       	movw	r4, r20
    24a0:	3b 01       	movw	r6, r22
    24a2:	88 e0       	ldi	r24, 0x08	; 8
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <malloc>
    24aa:	8c 01       	movw	r16, r24
    24ac:	8f 2d       	mov	r24, r15
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	fc 01       	movw	r30, r24
    24b6:	ea 5b       	subi	r30, 0xBA	; 186
    24b8:	f8 4f       	sbci	r31, 0xF8	; 248
    24ba:	11 83       	std	Z+1, r17	; 0x01
    24bc:	00 83       	st	Z, r16
    24be:	fc 01       	movw	r30, r24
    24c0:	ec 5e       	subi	r30, 0xEC	; 236
    24c2:	fd 4f       	sbci	r31, 0xFD	; 253
    24c4:	80 81       	ld	r24, Z
    24c6:	91 81       	ldd	r25, Z+1	; 0x01
    24c8:	d8 01       	movw	r26, r16
    24ca:	8d 93       	st	X+, r24
    24cc:	9c 93       	st	X, r25
    24ce:	6c 2d       	mov	r22, r12
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	84 e0       	ldi	r24, 0x04	; 4
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <calloc>
    24da:	1c 01       	movw	r2, r24
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	86 e0       	ldi	r24, 0x06	; 6
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <calloc>
    24e8:	7c 01       	movw	r14, r24
    24ea:	4c 2d       	mov	r20, r12
    24ec:	b1 01       	movw	r22, r2
    24ee:	4d d3       	rcall	.+1690   	; 0x2b8a <fifo_init>
    24f0:	f8 01       	movw	r30, r16
    24f2:	f5 82       	std	Z+5, r15	; 0x05
    24f4:	e4 82       	std	Z+4, r14	; 0x04
    24f6:	6a 2d       	mov	r22, r10
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	84 e0       	ldi	r24, 0x04	; 4
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <calloc>
    2502:	1c 01       	movw	r2, r24
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	86 e0       	ldi	r24, 0x06	; 6
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <calloc>
    2510:	7c 01       	movw	r14, r24
    2512:	4a 2d       	mov	r20, r10
    2514:	b1 01       	movw	r22, r2
    2516:	39 d3       	rcall	.+1650   	; 0x2b8a <fifo_init>
    2518:	d8 01       	movw	r26, r16
    251a:	13 96       	adiw	r26, 0x03	; 3
    251c:	fc 92       	st	X, r15
    251e:	ee 92       	st	-X, r14
    2520:	12 97       	sbiw	r26, 0x02	; 2
    2522:	17 96       	adiw	r26, 0x07	; 7
    2524:	9c 92       	st	X, r9
    2526:	8e 92       	st	-X, r8
    2528:	16 97       	sbiw	r26, 0x06	; 6
    252a:	ff b6       	in	r15, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	ed 91       	ld	r30, X+
    2530:	fc 91       	ld	r31, X
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	36 97       	sbiw	r30, 0x06	; 6
    2536:	80 81       	ld	r24, Z
    2538:	82 60       	ori	r24, 0x02	; 2
    253a:	80 83       	st	Z, r24
    253c:	8d 90       	ld	r8, X+
    253e:	9c 90       	ld	r9, X
    2540:	c3 01       	movw	r24, r6
    2542:	b2 01       	movw	r22, r4
    2544:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__floatunsisf>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__mulsf3>
    2554:	9b 01       	movw	r18, r22
    2556:	ac 01       	movw	r20, r24
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	74 e2       	ldi	r23, 0x24	; 36
    255c:	84 e7       	ldi	r24, 0x74	; 116
    255e:	9b e4       	ldi	r25, 0x4B	; 75
    2560:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <__divsf3>
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__subsf3>
    2570:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__fixunssfsi>
    2574:	f4 01       	movw	r30, r8
    2576:	32 97       	sbiw	r30, 0x02	; 2
    2578:	60 83       	st	Z, r22
    257a:	d8 01       	movw	r26, r16
    257c:	ed 91       	ld	r30, X+
    257e:	fc 91       	ld	r31, X
    2580:	11 97       	sbiw	r26, 0x01	; 1
    2582:	35 97       	sbiw	r30, 0x05	; 5
    2584:	88 e9       	ldi	r24, 0x98	; 152
    2586:	80 83       	st	Z, r24
    2588:	ed 91       	ld	r30, X+
    258a:	fc 91       	ld	r31, X
    258c:	34 97       	sbiw	r30, 0x04	; 4
    258e:	86 e0       	ldi	r24, 0x06	; 6
    2590:	80 83       	st	Z, r24
    2592:	ff be       	out	0x3f, r15	; 63
    2594:	c8 01       	movw	r24, r16
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	ef 90       	pop	r14
    25a2:	cf 90       	pop	r12
    25a4:	af 90       	pop	r10
    25a6:	9f 90       	pop	r9
    25a8:	8f 90       	pop	r8
    25aa:	7f 90       	pop	r7
    25ac:	6f 90       	pop	r6
    25ae:	5f 90       	pop	r5
    25b0:	4f 90       	pop	r4
    25b2:	3f 90       	pop	r3
    25b4:	2f 90       	pop	r2
    25b6:	08 95       	ret

000025b8 <serial_send_byte>:
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	ec 01       	movw	r28, r24
    25be:	ea 81       	ldd	r30, Y+2	; 0x02
    25c0:	fb 81       	ldd	r31, Y+3	; 0x03
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	25 81       	ldd	r18, Z+5	; 0x05
    25c8:	98 1b       	sub	r25, r24
    25ca:	92 23       	and	r25, r18
    25cc:	84 81       	ldd	r24, Z+4	; 0x04
    25ce:	98 17       	cp	r25, r24
    25d0:	a1 f0       	breq	.+40     	; 0x25fa <serial_send_byte+0x42>
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	26 95       	lsr	r18
    25d6:	29 23       	and	r18, r25
    25d8:	a0 81       	ld	r26, Z
    25da:	b1 81       	ldd	r27, Z+1	; 0x01
    25dc:	a2 0f       	add	r26, r18
    25de:	b1 1d       	adc	r27, r1
    25e0:	6c 93       	st	X, r22
    25e2:	9f 5f       	subi	r25, 0xFF	; 255
    25e4:	25 81       	ldd	r18, Z+5	; 0x05
    25e6:	92 23       	and	r25, r18
    25e8:	93 83       	std	Z+3, r25	; 0x03
    25ea:	e8 81       	ld	r30, Y
    25ec:	f9 81       	ldd	r31, Y+1	; 0x01
    25ee:	35 97       	sbiw	r30, 0x05	; 5
    25f0:	80 81       	ld	r24, Z
    25f2:	80 62       	ori	r24, 0x20	; 32
    25f4:	80 83       	st	Z, r24
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	01 c0       	rjmp	.+2      	; 0x25fc <serial_send_byte+0x44>
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	08 95       	ret

00002602 <serial_send_bytes>:
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	7c 01       	movw	r14, r24
    2610:	dc 01       	movw	r26, r24
    2612:	12 96       	adiw	r26, 0x02	; 2
    2614:	ed 91       	ld	r30, X+
    2616:	fc 91       	ld	r31, X
    2618:	13 97       	sbiw	r26, 0x03	; 3
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	98 1b       	sub	r25, r24
    2620:	85 81       	ldd	r24, Z+5	; 0x05
    2622:	98 23       	and	r25, r24
    2624:	84 81       	ldd	r24, Z+4	; 0x04
    2626:	89 1b       	sub	r24, r25
    2628:	86 17       	cp	r24, r22
    262a:	98 f1       	brcs	.+102    	; 0x2692 <serial_send_bytes+0x90>
    262c:	66 23       	and	r22, r22
    262e:	41 f1       	breq	.+80     	; 0x2680 <serial_send_bytes+0x7e>
    2630:	84 2f       	mov	r24, r20
    2632:	95 2f       	mov	r25, r21
    2634:	dc 01       	movw	r26, r24
    2636:	61 50       	subi	r22, 0x01	; 1
    2638:	46 2f       	mov	r20, r22
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	4f 5f       	subi	r20, 0xFF	; 255
    263e:	5f 4f       	sbci	r21, 0xFF	; 255
    2640:	48 0f       	add	r20, r24
    2642:	59 1f       	adc	r21, r25
    2644:	e7 01       	movw	r28, r14
    2646:	ea 81       	ldd	r30, Y+2	; 0x02
    2648:	fb 81       	ldd	r31, Y+3	; 0x03
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	25 81       	ldd	r18, Z+5	; 0x05
    2650:	98 1b       	sub	r25, r24
    2652:	92 23       	and	r25, r18
    2654:	84 81       	ldd	r24, Z+4	; 0x04
    2656:	98 17       	cp	r25, r24
    2658:	79 f0       	breq	.+30     	; 0x2678 <serial_send_bytes+0x76>
    265a:	8c 91       	ld	r24, X
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	26 95       	lsr	r18
    2660:	29 23       	and	r18, r25
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	8b 01       	movw	r16, r22
    2668:	02 0f       	add	r16, r18
    266a:	11 1d       	adc	r17, r1
    266c:	e8 01       	movw	r28, r16
    266e:	88 83       	st	Y, r24
    2670:	9f 5f       	subi	r25, 0xFF	; 255
    2672:	85 81       	ldd	r24, Z+5	; 0x05
    2674:	98 23       	and	r25, r24
    2676:	93 83       	std	Z+3, r25	; 0x03
    2678:	11 96       	adiw	r26, 0x01	; 1
    267a:	a4 17       	cp	r26, r20
    267c:	b5 07       	cpc	r27, r21
    267e:	11 f7       	brne	.-60     	; 0x2644 <serial_send_bytes+0x42>
    2680:	d7 01       	movw	r26, r14
    2682:	ed 91       	ld	r30, X+
    2684:	fc 91       	ld	r31, X
    2686:	35 97       	sbiw	r30, 0x05	; 5
    2688:	80 81       	ld	r24, Z
    268a:	80 62       	ori	r24, 0x20	; 32
    268c:	80 83       	st	Z, r24
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <serial_send_bytes+0x92>
    2692:	82 e0       	ldi	r24, 0x02	; 2
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	08 95       	ret

000026a2 <serial_get_byte>:
    26a2:	dc 01       	movw	r26, r24
    26a4:	14 96       	adiw	r26, 0x04	; 4
    26a6:	ed 91       	ld	r30, X+
    26a8:	fc 91       	ld	r31, X
    26aa:	15 97       	sbiw	r26, 0x05	; 5
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	98 17       	cp	r25, r24
    26b2:	89 f0       	breq	.+34     	; 0x26d6 <serial_get_byte+0x34>
    26b4:	92 81       	ldd	r25, Z+2	; 0x02
    26b6:	85 81       	ldd	r24, Z+5	; 0x05
    26b8:	86 95       	lsr	r24
    26ba:	89 23       	and	r24, r25
    26bc:	a0 81       	ld	r26, Z
    26be:	b1 81       	ldd	r27, Z+1	; 0x01
    26c0:	a8 0f       	add	r26, r24
    26c2:	b1 1d       	adc	r27, r1
    26c4:	8c 91       	ld	r24, X
    26c6:	db 01       	movw	r26, r22
    26c8:	8c 93       	st	X, r24
    26ca:	9f 5f       	subi	r25, 0xFF	; 255
    26cc:	85 81       	ldd	r24, Z+5	; 0x05
    26ce:	98 23       	and	r25, r24
    26d0:	92 83       	std	Z+2, r25	; 0x02
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	08 95       	ret
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	08 95       	ret

000026da <__vector_25>:
    26da:	1f 92       	push	r1
    26dc:	0f 92       	push	r0
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	0f 92       	push	r0
    26e2:	11 24       	eor	r1, r1
    26e4:	0b b6       	in	r0, 0x3b	; 59
    26e6:	0f 92       	push	r0
    26e8:	2f 93       	push	r18
    26ea:	3f 93       	push	r19
    26ec:	4f 93       	push	r20
    26ee:	5f 93       	push	r21
    26f0:	6f 93       	push	r22
    26f2:	7f 93       	push	r23
    26f4:	8f 93       	push	r24
    26f6:	9f 93       	push	r25
    26f8:	af 93       	push	r26
    26fa:	bf 93       	push	r27
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	ef 93       	push	r30
    2702:	ff 93       	push	r31
    2704:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <_ser_handle>
    2708:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <_ser_handle+0x1>
    270c:	10 97       	sbiw	r26, 0x00	; 0
    270e:	11 f1       	breq	.+68     	; 0x2754 <__vector_25+0x7a>
    2710:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2714:	14 96       	adiw	r26, 0x04	; 4
    2716:	ed 91       	ld	r30, X+
    2718:	fc 91       	ld	r31, X
    271a:	15 97       	sbiw	r26, 0x05	; 5
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	25 81       	ldd	r18, Z+5	; 0x05
    2722:	98 1b       	sub	r25, r24
    2724:	92 23       	and	r25, r18
    2726:	84 81       	ldd	r24, Z+4	; 0x04
    2728:	98 17       	cp	r25, r24
    272a:	61 f0       	breq	.+24     	; 0x2744 <__vector_25+0x6a>
    272c:	83 81       	ldd	r24, Z+3	; 0x03
    272e:	26 95       	lsr	r18
    2730:	28 23       	and	r18, r24
    2732:	c0 81       	ld	r28, Z
    2734:	d1 81       	ldd	r29, Z+1	; 0x01
    2736:	c2 0f       	add	r28, r18
    2738:	d1 1d       	adc	r29, r1
    273a:	68 83       	st	Y, r22
    273c:	8f 5f       	subi	r24, 0xFF	; 255
    273e:	95 81       	ldd	r25, Z+5	; 0x05
    2740:	89 23       	and	r24, r25
    2742:	83 83       	std	Z+3, r24	; 0x03
    2744:	16 96       	adiw	r26, 0x06	; 6
    2746:	ed 91       	ld	r30, X+
    2748:	fc 91       	ld	r31, X
    274a:	17 97       	sbiw	r26, 0x07	; 7
    274c:	30 97       	sbiw	r30, 0x00	; 0
    274e:	11 f0       	breq	.+4      	; 0x2754 <__vector_25+0x7a>
    2750:	cd 01       	movw	r24, r26
    2752:	19 95       	eicall
    2754:	ff 91       	pop	r31
    2756:	ef 91       	pop	r30
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	bf 91       	pop	r27
    275e:	af 91       	pop	r26
    2760:	9f 91       	pop	r25
    2762:	8f 91       	pop	r24
    2764:	7f 91       	pop	r23
    2766:	6f 91       	pop	r22
    2768:	5f 91       	pop	r21
    276a:	4f 91       	pop	r20
    276c:	3f 91       	pop	r19
    276e:	2f 91       	pop	r18
    2770:	0f 90       	pop	r0
    2772:	0b be       	out	0x3b, r0	; 59
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	0f 90       	pop	r0
    277a:	1f 90       	pop	r1
    277c:	18 95       	reti

0000277e <__vector_26>:
    277e:	1f 92       	push	r1
    2780:	0f 92       	push	r0
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	0f 92       	push	r0
    2786:	11 24       	eor	r1, r1
    2788:	0b b6       	in	r0, 0x3b	; 59
    278a:	0f 92       	push	r0
    278c:	2f 93       	push	r18
    278e:	8f 93       	push	r24
    2790:	9f 93       	push	r25
    2792:	af 93       	push	r26
    2794:	bf 93       	push	r27
    2796:	ef 93       	push	r30
    2798:	ff 93       	push	r31
    279a:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <_ser_handle>
    279e:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <_ser_handle+0x1>
    27a2:	30 97       	sbiw	r30, 0x00	; 0
    27a4:	b9 f0       	breq	.+46     	; 0x27d4 <__vector_26+0x56>
    27a6:	02 80       	ldd	r0, Z+2	; 0x02
    27a8:	f3 81       	ldd	r31, Z+3	; 0x03
    27aa:	e0 2d       	mov	r30, r0
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	98 17       	cp	r25, r24
    27b2:	b1 f0       	breq	.+44     	; 0x27e0 <__vector_26+0x62>
    27b4:	92 81       	ldd	r25, Z+2	; 0x02
    27b6:	85 81       	ldd	r24, Z+5	; 0x05
    27b8:	28 2f       	mov	r18, r24
    27ba:	26 95       	lsr	r18
    27bc:	29 23       	and	r18, r25
    27be:	a0 81       	ld	r26, Z
    27c0:	b1 81       	ldd	r27, Z+1	; 0x01
    27c2:	a2 0f       	add	r26, r18
    27c4:	b1 1d       	adc	r27, r1
    27c6:	2c 91       	ld	r18, X
    27c8:	9f 5f       	subi	r25, 0xFF	; 255
    27ca:	89 23       	and	r24, r25
    27cc:	82 83       	std	Z+2, r24	; 0x02
    27ce:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    27d2:	0b c0       	rjmp	.+22     	; 0x27ea <__vector_26+0x6c>
    27d4:	e1 ec       	ldi	r30, 0xC1	; 193
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	8f 7d       	andi	r24, 0xDF	; 223
    27dc:	80 83       	st	Z, r24
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <__vector_26+0x6c>
    27e0:	e1 ec       	ldi	r30, 0xC1	; 193
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	8f 7d       	andi	r24, 0xDF	; 223
    27e8:	80 83       	st	Z, r24
    27ea:	ff 91       	pop	r31
    27ec:	ef 91       	pop	r30
    27ee:	bf 91       	pop	r27
    27f0:	af 91       	pop	r26
    27f2:	9f 91       	pop	r25
    27f4:	8f 91       	pop	r24
    27f6:	2f 91       	pop	r18
    27f8:	0f 90       	pop	r0
    27fa:	0b be       	out	0x3b, r0	; 59
    27fc:	0f 90       	pop	r0
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	0f 90       	pop	r0
    2802:	1f 90       	pop	r1
    2804:	18 95       	reti

00002806 <__vector_36>:
    2806:	1f 92       	push	r1
    2808:	0f 92       	push	r0
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	0f 92       	push	r0
    280e:	11 24       	eor	r1, r1
    2810:	0b b6       	in	r0, 0x3b	; 59
    2812:	0f 92       	push	r0
    2814:	2f 93       	push	r18
    2816:	3f 93       	push	r19
    2818:	4f 93       	push	r20
    281a:	5f 93       	push	r21
    281c:	6f 93       	push	r22
    281e:	7f 93       	push	r23
    2820:	8f 93       	push	r24
    2822:	9f 93       	push	r25
    2824:	af 93       	push	r26
    2826:	bf 93       	push	r27
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	ef 93       	push	r30
    282e:	ff 93       	push	r31
    2830:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <_ser_handle+0x2>
    2834:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <_ser_handle+0x3>
    2838:	10 97       	sbiw	r26, 0x00	; 0
    283a:	11 f1       	breq	.+68     	; 0x2880 <__vector_36+0x7a>
    283c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2840:	14 96       	adiw	r26, 0x04	; 4
    2842:	ed 91       	ld	r30, X+
    2844:	fc 91       	ld	r31, X
    2846:	15 97       	sbiw	r26, 0x05	; 5
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	25 81       	ldd	r18, Z+5	; 0x05
    284e:	98 1b       	sub	r25, r24
    2850:	92 23       	and	r25, r18
    2852:	84 81       	ldd	r24, Z+4	; 0x04
    2854:	98 17       	cp	r25, r24
    2856:	61 f0       	breq	.+24     	; 0x2870 <__vector_36+0x6a>
    2858:	83 81       	ldd	r24, Z+3	; 0x03
    285a:	26 95       	lsr	r18
    285c:	28 23       	and	r18, r24
    285e:	c0 81       	ld	r28, Z
    2860:	d1 81       	ldd	r29, Z+1	; 0x01
    2862:	c2 0f       	add	r28, r18
    2864:	d1 1d       	adc	r29, r1
    2866:	68 83       	st	Y, r22
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	95 81       	ldd	r25, Z+5	; 0x05
    286c:	89 23       	and	r24, r25
    286e:	83 83       	std	Z+3, r24	; 0x03
    2870:	16 96       	adiw	r26, 0x06	; 6
    2872:	ed 91       	ld	r30, X+
    2874:	fc 91       	ld	r31, X
    2876:	17 97       	sbiw	r26, 0x07	; 7
    2878:	30 97       	sbiw	r30, 0x00	; 0
    287a:	11 f0       	breq	.+4      	; 0x2880 <__vector_36+0x7a>
    287c:	cd 01       	movw	r24, r26
    287e:	19 95       	eicall
    2880:	ff 91       	pop	r31
    2882:	ef 91       	pop	r30
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	bf 91       	pop	r27
    288a:	af 91       	pop	r26
    288c:	9f 91       	pop	r25
    288e:	8f 91       	pop	r24
    2890:	7f 91       	pop	r23
    2892:	6f 91       	pop	r22
    2894:	5f 91       	pop	r21
    2896:	4f 91       	pop	r20
    2898:	3f 91       	pop	r19
    289a:	2f 91       	pop	r18
    289c:	0f 90       	pop	r0
    289e:	0b be       	out	0x3b, r0	; 59
    28a0:	0f 90       	pop	r0
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	0f 90       	pop	r0
    28a6:	1f 90       	pop	r1
    28a8:	18 95       	reti

000028aa <__vector_37>:
    28aa:	1f 92       	push	r1
    28ac:	0f 92       	push	r0
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	0f 92       	push	r0
    28b2:	11 24       	eor	r1, r1
    28b4:	0b b6       	in	r0, 0x3b	; 59
    28b6:	0f 92       	push	r0
    28b8:	2f 93       	push	r18
    28ba:	8f 93       	push	r24
    28bc:	9f 93       	push	r25
    28be:	af 93       	push	r26
    28c0:	bf 93       	push	r27
    28c2:	ef 93       	push	r30
    28c4:	ff 93       	push	r31
    28c6:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <_ser_handle+0x2>
    28ca:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <_ser_handle+0x3>
    28ce:	30 97       	sbiw	r30, 0x00	; 0
    28d0:	b9 f0       	breq	.+46     	; 0x2900 <__vector_37+0x56>
    28d2:	02 80       	ldd	r0, Z+2	; 0x02
    28d4:	f3 81       	ldd	r31, Z+3	; 0x03
    28d6:	e0 2d       	mov	r30, r0
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	98 17       	cp	r25, r24
    28de:	b1 f0       	breq	.+44     	; 0x290c <__vector_37+0x62>
    28e0:	92 81       	ldd	r25, Z+2	; 0x02
    28e2:	85 81       	ldd	r24, Z+5	; 0x05
    28e4:	28 2f       	mov	r18, r24
    28e6:	26 95       	lsr	r18
    28e8:	29 23       	and	r18, r25
    28ea:	a0 81       	ld	r26, Z
    28ec:	b1 81       	ldd	r27, Z+1	; 0x01
    28ee:	a2 0f       	add	r26, r18
    28f0:	b1 1d       	adc	r27, r1
    28f2:	2c 91       	ld	r18, X
    28f4:	9f 5f       	subi	r25, 0xFF	; 255
    28f6:	89 23       	and	r24, r25
    28f8:	82 83       	std	Z+2, r24	; 0x02
    28fa:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    28fe:	0b c0       	rjmp	.+22     	; 0x2916 <__vector_37+0x6c>
    2900:	e9 ec       	ldi	r30, 0xC9	; 201
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	8f 7d       	andi	r24, 0xDF	; 223
    2908:	80 83       	st	Z, r24
    290a:	05 c0       	rjmp	.+10     	; 0x2916 <__vector_37+0x6c>
    290c:	e9 ec       	ldi	r30, 0xC9	; 201
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	8f 7d       	andi	r24, 0xDF	; 223
    2914:	80 83       	st	Z, r24
    2916:	ff 91       	pop	r31
    2918:	ef 91       	pop	r30
    291a:	bf 91       	pop	r27
    291c:	af 91       	pop	r26
    291e:	9f 91       	pop	r25
    2920:	8f 91       	pop	r24
    2922:	2f 91       	pop	r18
    2924:	0f 90       	pop	r0
    2926:	0b be       	out	0x3b, r0	; 59
    2928:	0f 90       	pop	r0
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	0f 90       	pop	r0
    292e:	1f 90       	pop	r1
    2930:	18 95       	reti

00002932 <__vector_51>:
    2932:	1f 92       	push	r1
    2934:	0f 92       	push	r0
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	0f 92       	push	r0
    293a:	11 24       	eor	r1, r1
    293c:	0b b6       	in	r0, 0x3b	; 59
    293e:	0f 92       	push	r0
    2940:	2f 93       	push	r18
    2942:	3f 93       	push	r19
    2944:	4f 93       	push	r20
    2946:	5f 93       	push	r21
    2948:	6f 93       	push	r22
    294a:	7f 93       	push	r23
    294c:	8f 93       	push	r24
    294e:	9f 93       	push	r25
    2950:	af 93       	push	r26
    2952:	bf 93       	push	r27
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	ef 93       	push	r30
    295a:	ff 93       	push	r31
    295c:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <_ser_handle+0x4>
    2960:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <_ser_handle+0x5>
    2964:	10 97       	sbiw	r26, 0x00	; 0
    2966:	11 f1       	breq	.+68     	; 0x29ac <__vector_51+0x7a>
    2968:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    296c:	14 96       	adiw	r26, 0x04	; 4
    296e:	ed 91       	ld	r30, X+
    2970:	fc 91       	ld	r31, X
    2972:	15 97       	sbiw	r26, 0x05	; 5
    2974:	93 81       	ldd	r25, Z+3	; 0x03
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	25 81       	ldd	r18, Z+5	; 0x05
    297a:	98 1b       	sub	r25, r24
    297c:	92 23       	and	r25, r18
    297e:	84 81       	ldd	r24, Z+4	; 0x04
    2980:	98 17       	cp	r25, r24
    2982:	61 f0       	breq	.+24     	; 0x299c <__vector_51+0x6a>
    2984:	83 81       	ldd	r24, Z+3	; 0x03
    2986:	26 95       	lsr	r18
    2988:	28 23       	and	r18, r24
    298a:	c0 81       	ld	r28, Z
    298c:	d1 81       	ldd	r29, Z+1	; 0x01
    298e:	c2 0f       	add	r28, r18
    2990:	d1 1d       	adc	r29, r1
    2992:	68 83       	st	Y, r22
    2994:	8f 5f       	subi	r24, 0xFF	; 255
    2996:	95 81       	ldd	r25, Z+5	; 0x05
    2998:	89 23       	and	r24, r25
    299a:	83 83       	std	Z+3, r24	; 0x03
    299c:	16 96       	adiw	r26, 0x06	; 6
    299e:	ed 91       	ld	r30, X+
    29a0:	fc 91       	ld	r31, X
    29a2:	17 97       	sbiw	r26, 0x07	; 7
    29a4:	30 97       	sbiw	r30, 0x00	; 0
    29a6:	11 f0       	breq	.+4      	; 0x29ac <__vector_51+0x7a>
    29a8:	cd 01       	movw	r24, r26
    29aa:	19 95       	eicall
    29ac:	ff 91       	pop	r31
    29ae:	ef 91       	pop	r30
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	bf 91       	pop	r27
    29b6:	af 91       	pop	r26
    29b8:	9f 91       	pop	r25
    29ba:	8f 91       	pop	r24
    29bc:	7f 91       	pop	r23
    29be:	6f 91       	pop	r22
    29c0:	5f 91       	pop	r21
    29c2:	4f 91       	pop	r20
    29c4:	3f 91       	pop	r19
    29c6:	2f 91       	pop	r18
    29c8:	0f 90       	pop	r0
    29ca:	0b be       	out	0x3b, r0	; 59
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	0f 90       	pop	r0
    29d2:	1f 90       	pop	r1
    29d4:	18 95       	reti

000029d6 <__vector_52>:
    29d6:	1f 92       	push	r1
    29d8:	0f 92       	push	r0
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	0f 92       	push	r0
    29de:	11 24       	eor	r1, r1
    29e0:	0b b6       	in	r0, 0x3b	; 59
    29e2:	0f 92       	push	r0
    29e4:	2f 93       	push	r18
    29e6:	8f 93       	push	r24
    29e8:	9f 93       	push	r25
    29ea:	af 93       	push	r26
    29ec:	bf 93       	push	r27
    29ee:	ef 93       	push	r30
    29f0:	ff 93       	push	r31
    29f2:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <_ser_handle+0x4>
    29f6:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <_ser_handle+0x5>
    29fa:	30 97       	sbiw	r30, 0x00	; 0
    29fc:	b9 f0       	breq	.+46     	; 0x2a2c <__vector_52+0x56>
    29fe:	02 80       	ldd	r0, Z+2	; 0x02
    2a00:	f3 81       	ldd	r31, Z+3	; 0x03
    2a02:	e0 2d       	mov	r30, r0
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	98 17       	cp	r25, r24
    2a0a:	b1 f0       	breq	.+44     	; 0x2a38 <__vector_52+0x62>
    2a0c:	92 81       	ldd	r25, Z+2	; 0x02
    2a0e:	85 81       	ldd	r24, Z+5	; 0x05
    2a10:	28 2f       	mov	r18, r24
    2a12:	26 95       	lsr	r18
    2a14:	29 23       	and	r18, r25
    2a16:	a0 81       	ld	r26, Z
    2a18:	b1 81       	ldd	r27, Z+1	; 0x01
    2a1a:	a2 0f       	add	r26, r18
    2a1c:	b1 1d       	adc	r27, r1
    2a1e:	2c 91       	ld	r18, X
    2a20:	9f 5f       	subi	r25, 0xFF	; 255
    2a22:	89 23       	and	r24, r25
    2a24:	82 83       	std	Z+2, r24	; 0x02
    2a26:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2a2a:	0b c0       	rjmp	.+22     	; 0x2a42 <__vector_52+0x6c>
    2a2c:	e1 ed       	ldi	r30, 0xD1	; 209
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	8f 7d       	andi	r24, 0xDF	; 223
    2a34:	80 83       	st	Z, r24
    2a36:	05 c0       	rjmp	.+10     	; 0x2a42 <__vector_52+0x6c>
    2a38:	e1 ed       	ldi	r30, 0xD1	; 209
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8f 7d       	andi	r24, 0xDF	; 223
    2a40:	80 83       	st	Z, r24
    2a42:	ff 91       	pop	r31
    2a44:	ef 91       	pop	r30
    2a46:	bf 91       	pop	r27
    2a48:	af 91       	pop	r26
    2a4a:	9f 91       	pop	r25
    2a4c:	8f 91       	pop	r24
    2a4e:	2f 91       	pop	r18
    2a50:	0f 90       	pop	r0
    2a52:	0b be       	out	0x3b, r0	; 59
    2a54:	0f 90       	pop	r0
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	0f 90       	pop	r0
    2a5a:	1f 90       	pop	r1
    2a5c:	18 95       	reti

00002a5e <__vector_54>:
    2a5e:	1f 92       	push	r1
    2a60:	0f 92       	push	r0
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	0f 92       	push	r0
    2a66:	11 24       	eor	r1, r1
    2a68:	0b b6       	in	r0, 0x3b	; 59
    2a6a:	0f 92       	push	r0
    2a6c:	2f 93       	push	r18
    2a6e:	3f 93       	push	r19
    2a70:	4f 93       	push	r20
    2a72:	5f 93       	push	r21
    2a74:	6f 93       	push	r22
    2a76:	7f 93       	push	r23
    2a78:	8f 93       	push	r24
    2a7a:	9f 93       	push	r25
    2a7c:	af 93       	push	r26
    2a7e:	bf 93       	push	r27
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	ef 93       	push	r30
    2a86:	ff 93       	push	r31
    2a88:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <_ser_handle+0x6>
    2a8c:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <_ser_handle+0x7>
    2a90:	10 97       	sbiw	r26, 0x00	; 0
    2a92:	11 f1       	breq	.+68     	; 0x2ad8 <__vector_54+0x7a>
    2a94:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2a98:	14 96       	adiw	r26, 0x04	; 4
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	15 97       	sbiw	r26, 0x05	; 5
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	25 81       	ldd	r18, Z+5	; 0x05
    2aa6:	98 1b       	sub	r25, r24
    2aa8:	92 23       	and	r25, r18
    2aaa:	84 81       	ldd	r24, Z+4	; 0x04
    2aac:	98 17       	cp	r25, r24
    2aae:	61 f0       	breq	.+24     	; 0x2ac8 <__vector_54+0x6a>
    2ab0:	83 81       	ldd	r24, Z+3	; 0x03
    2ab2:	26 95       	lsr	r18
    2ab4:	28 23       	and	r18, r24
    2ab6:	c0 81       	ld	r28, Z
    2ab8:	d1 81       	ldd	r29, Z+1	; 0x01
    2aba:	c2 0f       	add	r28, r18
    2abc:	d1 1d       	adc	r29, r1
    2abe:	68 83       	st	Y, r22
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	95 81       	ldd	r25, Z+5	; 0x05
    2ac4:	89 23       	and	r24, r25
    2ac6:	83 83       	std	Z+3, r24	; 0x03
    2ac8:	16 96       	adiw	r26, 0x06	; 6
    2aca:	ed 91       	ld	r30, X+
    2acc:	fc 91       	ld	r31, X
    2ace:	17 97       	sbiw	r26, 0x07	; 7
    2ad0:	30 97       	sbiw	r30, 0x00	; 0
    2ad2:	11 f0       	breq	.+4      	; 0x2ad8 <__vector_54+0x7a>
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	19 95       	eicall
    2ad8:	ff 91       	pop	r31
    2ada:	ef 91       	pop	r30
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	bf 91       	pop	r27
    2ae2:	af 91       	pop	r26
    2ae4:	9f 91       	pop	r25
    2ae6:	8f 91       	pop	r24
    2ae8:	7f 91       	pop	r23
    2aea:	6f 91       	pop	r22
    2aec:	5f 91       	pop	r21
    2aee:	4f 91       	pop	r20
    2af0:	3f 91       	pop	r19
    2af2:	2f 91       	pop	r18
    2af4:	0f 90       	pop	r0
    2af6:	0b be       	out	0x3b, r0	; 59
    2af8:	0f 90       	pop	r0
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	0f 90       	pop	r0
    2afe:	1f 90       	pop	r1
    2b00:	18 95       	reti

00002b02 <__vector_55>:
    2b02:	1f 92       	push	r1
    2b04:	0f 92       	push	r0
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	0f 92       	push	r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	0b b6       	in	r0, 0x3b	; 59
    2b0e:	0f 92       	push	r0
    2b10:	2f 93       	push	r18
    2b12:	8f 93       	push	r24
    2b14:	9f 93       	push	r25
    2b16:	af 93       	push	r26
    2b18:	bf 93       	push	r27
    2b1a:	ef 93       	push	r30
    2b1c:	ff 93       	push	r31
    2b1e:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <_ser_handle+0x6>
    2b22:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <_ser_handle+0x7>
    2b26:	30 97       	sbiw	r30, 0x00	; 0
    2b28:	b9 f0       	breq	.+46     	; 0x2b58 <__vector_55+0x56>
    2b2a:	02 80       	ldd	r0, Z+2	; 0x02
    2b2c:	f3 81       	ldd	r31, Z+3	; 0x03
    2b2e:	e0 2d       	mov	r30, r0
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	98 17       	cp	r25, r24
    2b36:	b1 f0       	breq	.+44     	; 0x2b64 <__vector_55+0x62>
    2b38:	92 81       	ldd	r25, Z+2	; 0x02
    2b3a:	85 81       	ldd	r24, Z+5	; 0x05
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	26 95       	lsr	r18
    2b40:	29 23       	and	r18, r25
    2b42:	a0 81       	ld	r26, Z
    2b44:	b1 81       	ldd	r27, Z+1	; 0x01
    2b46:	a2 0f       	add	r26, r18
    2b48:	b1 1d       	adc	r27, r1
    2b4a:	2c 91       	ld	r18, X
    2b4c:	9f 5f       	subi	r25, 0xFF	; 255
    2b4e:	89 23       	and	r24, r25
    2b50:	82 83       	std	Z+2, r24	; 0x02
    2b52:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2b56:	0b c0       	rjmp	.+22     	; 0x2b6e <__vector_55+0x6c>
    2b58:	e1 e3       	ldi	r30, 0x31	; 49
    2b5a:	f1 e0       	ldi	r31, 0x01	; 1
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8f 7d       	andi	r24, 0xDF	; 223
    2b60:	80 83       	st	Z, r24
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <__vector_55+0x6c>
    2b64:	e1 e3       	ldi	r30, 0x31	; 49
    2b66:	f1 e0       	ldi	r31, 0x01	; 1
    2b68:	80 81       	ld	r24, Z
    2b6a:	8f 7d       	andi	r24, 0xDF	; 223
    2b6c:	80 83       	st	Z, r24
    2b6e:	ff 91       	pop	r31
    2b70:	ef 91       	pop	r30
    2b72:	bf 91       	pop	r27
    2b74:	af 91       	pop	r26
    2b76:	9f 91       	pop	r25
    2b78:	8f 91       	pop	r24
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 90       	pop	r0
    2b7e:	0b be       	out	0x3b, r0	; 59
    2b80:	0f 90       	pop	r0
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	0f 90       	pop	r0
    2b86:	1f 90       	pop	r1
    2b88:	18 95       	reti

00002b8a <fifo_init>:
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	41 11       	cpse	r20, r1
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <fifo_init+0xa>
    2b90:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <abort>
    2b94:	84 2f       	mov	r24, r20
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9c 01       	movw	r18, r24
    2b9a:	21 50       	subi	r18, 0x01	; 1
    2b9c:	31 09       	sbc	r19, r1
    2b9e:	82 23       	and	r24, r18
    2ba0:	93 23       	and	r25, r19
    2ba2:	89 2b       	or	r24, r25
    2ba4:	11 f0       	breq	.+4      	; 0x2baa <fifo_init+0x20>
    2ba6:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <abort>
    2baa:	41 38       	cpi	r20, 0x81	; 129
    2bac:	10 f0       	brcs	.+4      	; 0x2bb2 <fifo_init+0x28>
    2bae:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <abort>
    2bb2:	12 82       	std	Z+2, r1	; 0x02
    2bb4:	13 82       	std	Z+3, r1	; 0x03
    2bb6:	44 83       	std	Z+4, r20	; 0x04
    2bb8:	44 0f       	add	r20, r20
    2bba:	41 50       	subi	r20, 0x01	; 1
    2bbc:	45 83       	std	Z+5, r20	; 0x05
    2bbe:	71 83       	std	Z+1, r23	; 0x01
    2bc0:	60 83       	st	Z, r22
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	08 95       	ret

00002bc8 <hal_create>:
    2bc8:	ef e8       	ldi	r30, 0x8F	; 143
    2bca:	f8 e0       	ldi	r31, 0x08	; 8
    2bcc:	22 ea       	ldi	r18, 0xA2	; 162
    2bce:	3b e1       	ldi	r19, 0x1B	; 27
    2bd0:	31 83       	std	Z+1, r19	; 0x01
    2bd2:	20 83       	st	Z, r18
    2bd4:	25 ea       	ldi	r18, 0xA5	; 165
    2bd6:	3b e1       	ldi	r19, 0x1B	; 27
    2bd8:	33 83       	std	Z+3, r19	; 0x03
    2bda:	22 83       	std	Z+2, r18	; 0x02
    2bdc:	20 eb       	ldi	r18, 0xB0	; 176
    2bde:	3b e1       	ldi	r19, 0x1B	; 27
    2be0:	35 83       	std	Z+5, r19	; 0x05
    2be2:	24 83       	std	Z+4, r18	; 0x04
    2be4:	24 eb       	ldi	r18, 0xB4	; 180
    2be6:	3b e1       	ldi	r19, 0x1B	; 27
    2be8:	37 83       	std	Z+7, r19	; 0x07
    2bea:	26 83       	std	Z+6, r18	; 0x06
    2bec:	2a eb       	ldi	r18, 0xBA	; 186
    2bee:	3b e1       	ldi	r19, 0x1B	; 27
    2bf0:	31 87       	std	Z+9, r19	; 0x09
    2bf2:	20 87       	std	Z+8, r18	; 0x08
    2bf4:	26 ec       	ldi	r18, 0xC6	; 198
    2bf6:	3b e1       	ldi	r19, 0x1B	; 27
    2bf8:	33 87       	std	Z+11, r19	; 0x0b
    2bfa:	22 87       	std	Z+10, r18	; 0x0a
    2bfc:	2b ec       	ldi	r18, 0xCB	; 203
    2bfe:	3b e1       	ldi	r19, 0x1B	; 27
    2c00:	35 87       	std	Z+13, r19	; 0x0d
    2c02:	24 87       	std	Z+12, r18	; 0x0c
    2c04:	27 ed       	ldi	r18, 0xD7	; 215
    2c06:	3b e1       	ldi	r19, 0x1B	; 27
    2c08:	37 87       	std	Z+15, r19	; 0x0f
    2c0a:	26 87       	std	Z+14, r18	; 0x0e
    2c0c:	27 eb       	ldi	r18, 0xB7	; 183
    2c0e:	3b e1       	ldi	r19, 0x1B	; 27
    2c10:	31 8b       	std	Z+17, r19	; 0x11
    2c12:	20 8b       	std	Z+16, r18	; 0x10
    2c14:	2c ed       	ldi	r18, 0xDC	; 220
    2c16:	3b e1       	ldi	r19, 0x1B	; 27
    2c18:	33 8b       	std	Z+19, r19	; 0x13
    2c1a:	22 8b       	std	Z+18, r18	; 0x12
    2c1c:	29 ee       	ldi	r18, 0xE9	; 233
    2c1e:	3b e1       	ldi	r19, 0x1B	; 27
    2c20:	35 8b       	std	Z+21, r19	; 0x15
    2c22:	24 8b       	std	Z+20, r18	; 0x14
    2c24:	68 2f       	mov	r22, r24
    2c26:	cf 01       	movw	r24, r30
    2c28:	a1 c0       	rjmp	.+322    	; 0x2d6c <led_create>
    2c2a:	08 95       	ret

00002c2c <_turn_off>:
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	fc 01       	movw	r30, r24
    2c34:	ee 0f       	add	r30, r30
    2c36:	ff 1f       	adc	r31, r31
    2c38:	e8 0f       	add	r30, r24
    2c3a:	f9 1f       	adc	r31, r25
    2c3c:	ee 0f       	add	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	e2 5b       	subi	r30, 0xB2	; 178
    2c42:	f8 4f       	sbci	r31, 0xF8	; 248
    2c44:	23 81       	ldd	r18, Z+3	; 0x03
    2c46:	21 11       	cpse	r18, r1
    2c48:	0a c0       	rjmp	.+20     	; 0x2c5e <_turn_off+0x32>
    2c4a:	ef 01       	movw	r28, r30
    2c4c:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    2c50:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    2c54:	6a 81       	ldd	r22, Y+2	; 0x02
    2c56:	88 81       	ld	r24, Y
    2c58:	99 81       	ldd	r25, Y+1	; 0x01
    2c5a:	19 95       	eicall
    2c5c:	12 c0       	rjmp	.+36     	; 0x2c82 <_turn_off+0x56>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	aa 0f       	add	r26, r26
    2c62:	bb 1f       	adc	r27, r27
    2c64:	ed 01       	movw	r28, r26
    2c66:	c8 0f       	add	r28, r24
    2c68:	d9 1f       	adc	r29, r25
    2c6a:	cc 0f       	add	r28, r28
    2c6c:	dd 1f       	adc	r29, r29
    2c6e:	c2 5b       	subi	r28, 0xB2	; 178
    2c70:	d8 4f       	sbci	r29, 0xF8	; 248
    2c72:	e0 91 a1 08 	lds	r30, 0x08A1	; 0x8008a1 <register_access+0x12>
    2c76:	f0 91 a2 08 	lds	r31, 0x08A2	; 0x8008a2 <register_access+0x13>
    2c7a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c7c:	88 81       	ld	r24, Y
    2c7e:	99 81       	ldd	r25, Y+1	; 0x01
    2c80:	19 95       	eicall
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	08 95       	ret

00002c88 <_turn_on>:
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	fc 01       	movw	r30, r24
    2c90:	ee 0f       	add	r30, r30
    2c92:	ff 1f       	adc	r31, r31
    2c94:	e8 0f       	add	r30, r24
    2c96:	f9 1f       	adc	r31, r25
    2c98:	ee 0f       	add	r30, r30
    2c9a:	ff 1f       	adc	r31, r31
    2c9c:	e2 5b       	subi	r30, 0xB2	; 178
    2c9e:	f8 4f       	sbci	r31, 0xF8	; 248
    2ca0:	23 81       	ldd	r18, Z+3	; 0x03
    2ca2:	21 11       	cpse	r18, r1
    2ca4:	0a c0       	rjmp	.+20     	; 0x2cba <_turn_on+0x32>
    2ca6:	ef 01       	movw	r28, r30
    2ca8:	e0 91 a1 08 	lds	r30, 0x08A1	; 0x8008a1 <register_access+0x12>
    2cac:	f0 91 a2 08 	lds	r31, 0x08A2	; 0x8008a2 <register_access+0x13>
    2cb0:	6a 81       	ldd	r22, Y+2	; 0x02
    2cb2:	88 81       	ld	r24, Y
    2cb4:	99 81       	ldd	r25, Y+1	; 0x01
    2cb6:	19 95       	eicall
    2cb8:	12 c0       	rjmp	.+36     	; 0x2cde <_turn_on+0x56>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	aa 0f       	add	r26, r26
    2cbe:	bb 1f       	adc	r27, r27
    2cc0:	ed 01       	movw	r28, r26
    2cc2:	c8 0f       	add	r28, r24
    2cc4:	d9 1f       	adc	r29, r25
    2cc6:	cc 0f       	add	r28, r28
    2cc8:	dd 1f       	adc	r29, r29
    2cca:	c2 5b       	subi	r28, 0xB2	; 178
    2ccc:	d8 4f       	sbci	r29, 0xF8	; 248
    2cce:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    2cd2:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    2cd6:	6a 81       	ldd	r22, Y+2	; 0x02
    2cd8:	88 81       	ld	r24, Y
    2cda:	99 81       	ldd	r25, Y+1	; 0x01
    2cdc:	19 95       	eicall
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	08 95       	ret

00002ce4 <_hal_led_task>:
    2ce4:	83 e7       	ldi	r24, 0x73	; 115
    2ce6:	93 e0       	ldi	r25, 0x03	; 3
    2ce8:	0e 94 2a 20 	call	0x4054	; 0x4054 <puts>
    2cec:	0f 2e       	mov	r0, r31
    2cee:	ff e8       	ldi	r31, 0x8F	; 143
    2cf0:	cf 2e       	mov	r12, r31
    2cf2:	f8 e0       	ldi	r31, 0x08	; 8
    2cf4:	df 2e       	mov	r13, r31
    2cf6:	f0 2d       	mov	r31, r0
    2cf8:	04 e0       	ldi	r16, 0x04	; 4
    2cfa:	ce e4       	ldi	r28, 0x4E	; 78
    2cfc:	d7 e0       	ldi	r29, 0x07	; 7
    2cfe:	10 e0       	ldi	r17, 0x00	; 0
    2d00:	8c 81       	ldd	r24, Y+4	; 0x04
    2d02:	81 30       	cpi	r24, 0x01	; 1
    2d04:	69 f0       	breq	.+26     	; 0x2d20 <_hal_led_task+0x3c>
    2d06:	e8 f0       	brcs	.+58     	; 0x2d42 <_hal_led_task+0x5e>
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	39 f5       	brne	.+78     	; 0x2d5a <_hal_led_task+0x76>
    2d0c:	d6 01       	movw	r26, r12
    2d0e:	1c 96       	adiw	r26, 0x0c	; 12
    2d10:	ed 91       	ld	r30, X+
    2d12:	fc 91       	ld	r31, X
    2d14:	1d 97       	sbiw	r26, 0x0d	; 13
    2d16:	6a 81       	ldd	r22, Y+2	; 0x02
    2d18:	88 81       	ld	r24, Y
    2d1a:	99 81       	ldd	r25, Y+1	; 0x01
    2d1c:	19 95       	eicall
    2d1e:	1d c0       	rjmp	.+58     	; 0x2d5a <_hal_led_task+0x76>
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	8f 5f       	subi	r24, 0xFF	; 255
    2d24:	8a 30       	cpi	r24, 0x0A	; 10
    2d26:	10 f4       	brcc	.+4      	; 0x2d2c <_hal_led_task+0x48>
    2d28:	8d 83       	std	Y+5, r24	; 0x05
    2d2a:	17 c0       	rjmp	.+46     	; 0x2d5a <_hal_led_task+0x76>
    2d2c:	1d 82       	std	Y+5, r1	; 0x05
    2d2e:	d6 01       	movw	r26, r12
    2d30:	1c 96       	adiw	r26, 0x0c	; 12
    2d32:	ed 91       	ld	r30, X+
    2d34:	fc 91       	ld	r31, X
    2d36:	1d 97       	sbiw	r26, 0x0d	; 13
    2d38:	6a 81       	ldd	r22, Y+2	; 0x02
    2d3a:	88 81       	ld	r24, Y
    2d3c:	99 81       	ldd	r25, Y+1	; 0x01
    2d3e:	19 95       	eicall
    2d40:	0c c0       	rjmp	.+24     	; 0x2d5a <_hal_led_task+0x76>
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	88 23       	and	r24, r24
    2d46:	31 f0       	breq	.+12     	; 0x2d54 <_hal_led_task+0x70>
    2d48:	81 2f       	mov	r24, r17
    2d4a:	9e df       	rcall	.-196    	; 0x2c88 <_turn_on>
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <_hal_led_task+0x76>
    2d54:	0c 83       	std	Y+4, r16	; 0x04
    2d56:	81 2f       	mov	r24, r17
    2d58:	69 df       	rcall	.-302    	; 0x2c2c <_turn_off>
    2d5a:	1f 5f       	subi	r17, 0xFF	; 255
    2d5c:	26 96       	adiw	r28, 0x06	; 6
    2d5e:	14 30       	cpi	r17, 0x04	; 4
    2d60:	79 f6       	brne	.-98     	; 0x2d00 <_hal_led_task+0x1c>
    2d62:	85 e0       	ldi	r24, 0x05	; 5
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskDelay>
    2d6a:	c7 cf       	rjmp	.-114    	; 0x2cfa <_hal_led_task+0x16>

00002d6c <led_create>:
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	06 2f       	mov	r16, r22
    2d7e:	0f 2e       	mov	r0, r31
    2d80:	ff e8       	ldi	r31, 0x8F	; 143
    2d82:	ef 2e       	mov	r14, r31
    2d84:	f8 e0       	ldi	r31, 0x08	; 8
    2d86:	ff 2e       	mov	r15, r31
    2d88:	f0 2d       	mov	r31, r0
    2d8a:	d7 01       	movw	r26, r14
    2d8c:	18 96       	adiw	r26, 0x08	; 8
    2d8e:	ed 91       	ld	r30, X+
    2d90:	fc 91       	ld	r31, X
    2d92:	19 97       	sbiw	r26, 0x09	; 9
    2d94:	66 e0       	ldi	r22, 0x06	; 6
    2d96:	87 e2       	ldi	r24, 0x27	; 39
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	19 95       	eicall
    2d9c:	ce e4       	ldi	r28, 0x4E	; 78
    2d9e:	d7 e0       	ldi	r29, 0x07	; 7
    2da0:	0f 2e       	mov	r0, r31
    2da2:	f8 e2       	ldi	r31, 0x28	; 40
    2da4:	cf 2e       	mov	r12, r31
    2da6:	d1 2c       	mov	r13, r1
    2da8:	f0 2d       	mov	r31, r0
    2daa:	d9 82       	std	Y+1, r13	; 0x01
    2dac:	c8 82       	st	Y, r12
    2dae:	86 e0       	ldi	r24, 0x06	; 6
    2db0:	8a 83       	std	Y+2, r24	; 0x02
    2db2:	1b 82       	std	Y+3, r1	; 0x03
    2db4:	14 e0       	ldi	r17, 0x04	; 4
    2db6:	1c 83       	std	Y+4, r17	; 0x04
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	38 df       	rcall	.-400    	; 0x2c2c <_turn_off>
    2dbc:	d7 01       	movw	r26, r14
    2dbe:	18 96       	adiw	r26, 0x08	; 8
    2dc0:	ed 91       	ld	r30, X+
    2dc2:	fc 91       	ld	r31, X
    2dc4:	19 97       	sbiw	r26, 0x09	; 9
    2dc6:	67 e0       	ldi	r22, 0x07	; 7
    2dc8:	87 e2       	ldi	r24, 0x27	; 39
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	19 95       	eicall
    2dce:	df 82       	std	Y+7, r13	; 0x07
    2dd0:	ce 82       	std	Y+6, r12	; 0x06
    2dd2:	87 e0       	ldi	r24, 0x07	; 7
    2dd4:	88 87       	std	Y+8, r24	; 0x08
    2dd6:	19 86       	std	Y+9, r1	; 0x09
    2dd8:	1a 87       	std	Y+10, r17	; 0x0a
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	27 df       	rcall	.-434    	; 0x2c2c <_turn_off>
    2dde:	d7 01       	movw	r26, r14
    2de0:	18 96       	adiw	r26, 0x08	; 8
    2de2:	ed 91       	ld	r30, X+
    2de4:	fc 91       	ld	r31, X
    2de6:	19 97       	sbiw	r26, 0x09	; 9
    2de8:	65 e0       	ldi	r22, 0x05	; 5
    2dea:	83 e3       	ldi	r24, 0x33	; 51
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	19 95       	eicall
    2df0:	d7 01       	movw	r26, r14
    2df2:	18 96       	adiw	r26, 0x08	; 8
    2df4:	ed 91       	ld	r30, X+
    2df6:	fc 91       	ld	r31, X
    2df8:	19 97       	sbiw	r26, 0x09	; 9
    2dfa:	61 e0       	ldi	r22, 0x01	; 1
    2dfc:	84 e3       	ldi	r24, 0x34	; 52
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	19 95       	eicall
    2e02:	84 e3       	ldi	r24, 0x34	; 52
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9d 87       	std	Y+13, r25	; 0x0d
    2e08:	8c 87       	std	Y+12, r24	; 0x0c
    2e0a:	85 e0       	ldi	r24, 0x05	; 5
    2e0c:	8e 87       	std	Y+14, r24	; 0x0e
    2e0e:	1f 86       	std	Y+15, r1	; 0x0f
    2e10:	18 8b       	std	Y+16, r17	; 0x10
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	0b df       	rcall	.-490    	; 0x2c2c <_turn_off>
    2e16:	d7 01       	movw	r26, r14
    2e18:	18 96       	adiw	r26, 0x08	; 8
    2e1a:	ed 91       	ld	r30, X+
    2e1c:	fc 91       	ld	r31, X
    2e1e:	19 97       	sbiw	r26, 0x09	; 9
    2e20:	64 e0       	ldi	r22, 0x04	; 4
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	19 95       	eicall
    2e28:	d7 01       	movw	r26, r14
    2e2a:	18 96       	adiw	r26, 0x08	; 8
    2e2c:	ed 91       	ld	r30, X+
    2e2e:	fc 91       	ld	r31, X
    2e30:	19 97       	sbiw	r26, 0x09	; 9
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	82 e0       	ldi	r24, 0x02	; 2
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	19 95       	eicall
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	9b 8b       	std	Y+19, r25	; 0x13
    2e40:	8a 8b       	std	Y+18, r24	; 0x12
    2e42:	1c 8b       	std	Y+20, r17	; 0x14
    2e44:	1d 8a       	std	Y+21, r1	; 0x15
    2e46:	1e 8b       	std	Y+22, r17	; 0x16
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	f0 de       	rcall	.-544    	; 0x2c2c <_turn_off>
    2e4c:	e1 2c       	mov	r14, r1
    2e4e:	f1 2c       	mov	r15, r1
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 ec       	ldi	r20, 0xC0	; 192
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	6a e8       	ldi	r22, 0x8A	; 138
    2e5a:	73 e0       	ldi	r23, 0x03	; 3
    2e5c:	82 e7       	ldi	r24, 0x72	; 114
    2e5e:	96 e1       	ldi	r25, 0x16	; 22
    2e60:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <xTaskCreate>
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	df 90       	pop	r13
    2e72:	cf 90       	pop	r12
    2e74:	08 95       	ret

00002e76 <led_slow_blink>:
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	c8 2f       	mov	r28, r24
    2e80:	d0 e0       	ldi	r29, 0x00	; 0
    2e82:	8e 01       	movw	r16, r28
    2e84:	00 0f       	add	r16, r16
    2e86:	11 1f       	adc	r17, r17
    2e88:	d8 01       	movw	r26, r16
    2e8a:	ac 0f       	add	r26, r28
    2e8c:	bd 1f       	adc	r27, r29
    2e8e:	aa 0f       	add	r26, r26
    2e90:	bb 1f       	adc	r27, r27
    2e92:	a2 5b       	subi	r26, 0xB2	; 178
    2e94:	b8 4f       	sbci	r27, 0xF8	; 248
    2e96:	e0 91 9b 08 	lds	r30, 0x089B	; 0x80089b <register_access+0xc>
    2e9a:	f0 91 9c 08 	lds	r31, 0x089C	; 0x80089c <register_access+0xd>
    2e9e:	12 96       	adiw	r26, 0x02	; 2
    2ea0:	6c 91       	ld	r22, X
    2ea2:	12 97       	sbiw	r26, 0x02	; 2
    2ea4:	8d 91       	ld	r24, X+
    2ea6:	9c 91       	ld	r25, X
    2ea8:	19 95       	eicall
    2eaa:	c0 0f       	add	r28, r16
    2eac:	d1 1f       	adc	r29, r17
    2eae:	cc 0f       	add	r28, r28
    2eb0:	dd 1f       	adc	r29, r29
    2eb2:	c2 5b       	subi	r28, 0xB2	; 178
    2eb4:	d8 4f       	sbci	r29, 0xF8	; 248
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	8c 83       	std	Y+4, r24	; 0x04
    2eba:	df 91       	pop	r29
    2ebc:	cf 91       	pop	r28
    2ebe:	1f 91       	pop	r17
    2ec0:	0f 91       	pop	r16
    2ec2:	08 95       	ret

00002ec4 <led_fast_blink>:
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	c8 2f       	mov	r28, r24
    2ece:	d0 e0       	ldi	r29, 0x00	; 0
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	00 0f       	add	r16, r16
    2ed4:	11 1f       	adc	r17, r17
    2ed6:	d8 01       	movw	r26, r16
    2ed8:	ac 0f       	add	r26, r28
    2eda:	bd 1f       	adc	r27, r29
    2edc:	aa 0f       	add	r26, r26
    2ede:	bb 1f       	adc	r27, r27
    2ee0:	a2 5b       	subi	r26, 0xB2	; 178
    2ee2:	b8 4f       	sbci	r27, 0xF8	; 248
    2ee4:	e0 91 9b 08 	lds	r30, 0x089B	; 0x80089b <register_access+0xc>
    2ee8:	f0 91 9c 08 	lds	r31, 0x089C	; 0x80089c <register_access+0xd>
    2eec:	12 96       	adiw	r26, 0x02	; 2
    2eee:	6c 91       	ld	r22, X
    2ef0:	12 97       	sbiw	r26, 0x02	; 2
    2ef2:	8d 91       	ld	r24, X+
    2ef4:	9c 91       	ld	r25, X
    2ef6:	19 95       	eicall
    2ef8:	c0 0f       	add	r28, r16
    2efa:	d1 1f       	adc	r29, r17
    2efc:	cc 0f       	add	r28, r28
    2efe:	dd 1f       	adc	r29, r29
    2f00:	c2 5b       	subi	r28, 0xB2	; 178
    2f02:	d8 4f       	sbci	r29, 0xF8	; 248
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	8c 83       	std	Y+4, r24	; 0x04
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	08 95       	ret

00002f12 <led_led_on>:
    2f12:	28 2f       	mov	r18, r24
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	f9 01       	movw	r30, r18
    2f18:	ee 0f       	add	r30, r30
    2f1a:	ff 1f       	adc	r31, r31
    2f1c:	e2 0f       	add	r30, r18
    2f1e:	f3 1f       	adc	r31, r19
    2f20:	ee 0f       	add	r30, r30
    2f22:	ff 1f       	adc	r31, r31
    2f24:	e2 5b       	subi	r30, 0xB2	; 178
    2f26:	f8 4f       	sbci	r31, 0xF8	; 248
    2f28:	93 e0       	ldi	r25, 0x03	; 3
    2f2a:	94 83       	std	Z+4, r25	; 0x04
    2f2c:	ad ce       	rjmp	.-678    	; 0x2c88 <_turn_on>
    2f2e:	08 95       	ret

00002f30 <led_led_off>:
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	f9 01       	movw	r30, r18
    2f36:	ee 0f       	add	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	e2 0f       	add	r30, r18
    2f3c:	f3 1f       	adc	r31, r19
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	e2 5b       	subi	r30, 0xB2	; 178
    2f44:	f8 4f       	sbci	r31, 0xF8	; 248
    2f46:	94 e0       	ldi	r25, 0x04	; 4
    2f48:	94 83       	std	Z+4, r25	; 0x04
    2f4a:	70 ce       	rjmp	.-800    	; 0x2c2c <_turn_off>
    2f4c:	08 95       	ret

00002f4e <led_long_puls>:
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	fc 01       	movw	r30, r24
    2f52:	ee 0f       	add	r30, r30
    2f54:	ff 1f       	adc	r31, r31
    2f56:	df 01       	movw	r26, r30
    2f58:	a8 0f       	add	r26, r24
    2f5a:	b9 1f       	adc	r27, r25
    2f5c:	aa 0f       	add	r26, r26
    2f5e:	bb 1f       	adc	r27, r27
    2f60:	a2 5b       	subi	r26, 0xB2	; 178
    2f62:	b8 4f       	sbci	r27, 0xF8	; 248
    2f64:	24 e0       	ldi	r18, 0x04	; 4
    2f66:	15 96       	adiw	r26, 0x05	; 5
    2f68:	2c 93       	st	X, r18
    2f6a:	15 97       	sbiw	r26, 0x05	; 5
    2f6c:	fd 01       	movw	r30, r26
    2f6e:	14 82       	std	Z+4, r1	; 0x04
    2f70:	08 95       	ret

00002f72 <led_short_puls>:
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	fc 01       	movw	r30, r24
    2f76:	ee 0f       	add	r30, r30
    2f78:	ff 1f       	adc	r31, r31
    2f7a:	df 01       	movw	r26, r30
    2f7c:	a8 0f       	add	r26, r24
    2f7e:	b9 1f       	adc	r27, r25
    2f80:	aa 0f       	add	r26, r26
    2f82:	bb 1f       	adc	r27, r27
    2f84:	a2 5b       	subi	r26, 0xB2	; 178
    2f86:	b8 4f       	sbci	r27, 0xF8	; 248
    2f88:	21 e0       	ldi	r18, 0x01	; 1
    2f8a:	15 96       	adiw	r26, 0x05	; 5
    2f8c:	2c 93       	st	X, r18
    2f8e:	15 97       	sbiw	r26, 0x05	; 5
    2f90:	fd 01       	movw	r30, r26
    2f92:	14 82       	std	Z+4, r1	; 0x04
    2f94:	08 95       	ret

00002f96 <_serial_call_back>:
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	1f 92       	push	r1
    2fa0:	1f 92       	push	r1
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	8c 01       	movw	r16, r24
    2fa8:	19 82       	std	Y+1, r1	; 0x01
    2faa:	2d c0       	rjmp	.+90     	; 0x3006 <_serial_call_back+0x70>
    2fac:	e0 91 ca 07 	lds	r30, 0x07CA	; 0x8007ca <rec_buf_inp.2926>
    2fb0:	ec 32       	cpi	r30, 0x2C	; 44
    2fb2:	50 f4       	brcc	.+20     	; 0x2fc8 <_serial_call_back+0x32>
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	8e 0f       	add	r24, r30
    2fb8:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <rec_buf_inp.2926>
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	e6 50       	subi	r30, 0x06	; 6
    2fc0:	f8 4f       	sbci	r31, 0xF8	; 248
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	80 83       	st	Z, r24
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <_serial_call_back+0x36>
    2fc8:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <rec_buf_inp.2926>
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	8a 30       	cpi	r24, 0x0A	; 10
    2fd0:	d1 f4       	brne	.+52     	; 0x3006 <_serial_call_back+0x70>
    2fd2:	40 91 ca 07 	lds	r20, 0x07CA	; 0x8007ca <rec_buf_inp.2926>
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	fa 01       	movw	r30, r20
    2fda:	e8 50       	subi	r30, 0x08	; 8
    2fdc:	f8 4f       	sbci	r31, 0xF8	; 248
    2fde:	10 82       	st	Z, r1
    2fe0:	41 50       	subi	r20, 0x01	; 1
    2fe2:	51 09       	sbc	r21, r1
    2fe4:	9e 01       	movw	r18, r28
    2fe6:	2f 5f       	subi	r18, 0xFF	; 255
    2fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fea:	6a ef       	ldi	r22, 0xFA	; 250
    2fec:	77 e0       	ldi	r23, 0x07	; 7
    2fee:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    2ff2:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    2ff6:	0e 94 82 09 	call	0x1304	; 0x1304 <xStreamBufferSendFromISR>
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	81 11       	cpse	r24, r1
    2ffe:	0e 94 b8 04 	call	0x970	; 0x970 <vPortYield>
    3002:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <rec_buf_inp.2926>
    3006:	be 01       	movw	r22, r28
    3008:	6e 5f       	subi	r22, 0xFE	; 254
    300a:	7f 4f       	sbci	r23, 0xFF	; 255
    300c:	c8 01       	movw	r24, r16
    300e:	49 db       	rcall	.-2414   	; 0x26a2 <serial_get_byte>
    3010:	88 23       	and	r24, r24
    3012:	61 f2       	breq	.-104    	; 0x2fac <_serial_call_back+0x16>
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	08 95       	ret

00003022 <_upload_message>:
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	8c 01       	movw	r16, r24
    302c:	eb 01       	movw	r28, r22
    302e:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    3032:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    3036:	0e 94 43 09 	call	0x1286	; 0x1286 <xStreamBufferReset>
    303a:	b8 01       	movw	r22, r16
    303c:	86 e6       	ldi	r24, 0x66	; 102
    303e:	97 e0       	ldi	r25, 0x07	; 7
    3040:	d7 d7       	rcall	.+4014   	; 0x3ff0 <strcpy>
    3042:	20 97       	sbiw	r28, 0x00	; 0
    3044:	71 f0       	breq	.+28     	; 0x3062 <_upload_message+0x40>
    3046:	e6 e6       	ldi	r30, 0x66	; 102
    3048:	f7 e0       	ldi	r31, 0x07	; 7
    304a:	01 90       	ld	r0, Z+
    304c:	00 20       	and	r0, r0
    304e:	e9 f7       	brne	.-6      	; 0x304a <_upload_message+0x28>
    3050:	31 97       	sbiw	r30, 0x01	; 1
    3052:	80 e2       	ldi	r24, 0x20	; 32
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	80 83       	st	Z, r24
    305a:	be 01       	movw	r22, r28
    305c:	86 e6       	ldi	r24, 0x66	; 102
    305e:	97 e0       	ldi	r25, 0x07	; 7
    3060:	bc d7       	rcall	.+3960   	; 0x3fda <strcat>
    3062:	e6 e6       	ldi	r30, 0x66	; 102
    3064:	f7 e0       	ldi	r31, 0x07	; 7
    3066:	df 01       	movw	r26, r30
    3068:	0d 90       	ld	r0, X+
    306a:	00 20       	and	r0, r0
    306c:	e9 f7       	brne	.-6      	; 0x3068 <_upload_message+0x46>
    306e:	11 97       	sbiw	r26, 0x01	; 1
    3070:	8d e0       	ldi	r24, 0x0D	; 13
    3072:	9a e0       	ldi	r25, 0x0A	; 10
    3074:	11 96       	adiw	r26, 0x01	; 1
    3076:	9c 93       	st	X, r25
    3078:	8e 93       	st	-X, r24
    307a:	12 96       	adiw	r26, 0x02	; 2
    307c:	1c 92       	st	X, r1
    307e:	01 90       	ld	r0, Z+
    3080:	00 20       	and	r0, r0
    3082:	e9 f7       	brne	.-6      	; 0x307e <_upload_message+0x5c>
    3084:	31 97       	sbiw	r30, 0x01	; 1
    3086:	e6 56       	subi	r30, 0x66	; 102
    3088:	f7 40       	sbci	r31, 0x07	; 7
    308a:	ae 2f       	mov	r26, r30
    308c:	86 e6       	ldi	r24, 0x66	; 102
    308e:	97 e0       	ldi	r25, 0x07	; 7
    3090:	ac 01       	movw	r20, r24
    3092:	6a 2f       	mov	r22, r26
    3094:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <_rn2483_serial>
    3098:	90 91 ce 07 	lds	r25, 0x07CE	; 0x8007ce <_rn2483_serial+0x1>
    309c:	b2 da       	rcall	.-2716   	; 0x2602 <serial_send_bytes>
    309e:	81 11       	cpse	r24, r1
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <_upload_message+0x9e>
    30a2:	28 e2       	ldi	r18, 0x28	; 40
    30a4:	35 e0       	ldi	r19, 0x05	; 5
    30a6:	4d e2       	ldi	r20, 0x2D	; 45
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	64 e5       	ldi	r22, 0x54	; 84
    30ac:	78 e0       	ldi	r23, 0x08	; 8
    30ae:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    30b2:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    30b6:	0e 94 c4 09 	call	0x1388	; 0x1388 <xStreamBufferReceive>
    30ba:	84 e5       	ldi	r24, 0x54	; 84
    30bc:	98 e0       	ldi	r25, 0x08	; 8
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <_upload_message+0xa2>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	08 95       	ret

000030ce <_reply2return_code>:
    30ce:	af 92       	push	r10
    30d0:	bf 92       	push	r11
    30d2:	cf 92       	push	r12
    30d4:	df 92       	push	r13
    30d6:	ef 92       	push	r14
    30d8:	ff 92       	push	r15
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	6c 01       	movw	r12, r24
    30e4:	fc 01       	movw	r30, r24
    30e6:	01 90       	ld	r0, Z+
    30e8:	00 20       	and	r0, r0
    30ea:	e9 f7       	brne	.-6      	; 0x30e6 <_reply2return_code+0x18>
    30ec:	31 97       	sbiw	r30, 0x01	; 1
    30ee:	7f 01       	movw	r14, r30
    30f0:	e8 1a       	sub	r14, r24
    30f2:	f9 0a       	sbc	r15, r25
    30f4:	06 e1       	ldi	r16, 0x16	; 22
    30f6:	16 e0       	ldi	r17, 0x06	; 6
    30f8:	c0 e0       	ldi	r28, 0x00	; 0
    30fa:	d0 e0       	ldi	r29, 0x00	; 0
    30fc:	f8 01       	movw	r30, r16
    30fe:	60 81       	ld	r22, Z
    3100:	71 81       	ldd	r23, Z+1	; 0x01
    3102:	a7 01       	movw	r20, r14
    3104:	c6 01       	movw	r24, r12
    3106:	7b d7       	rcall	.+3830   	; 0x3ffe <strncasecmp>
    3108:	89 2b       	or	r24, r25
    310a:	49 f4       	brne	.+18     	; 0x311e <_reply2return_code+0x50>
    310c:	fe 01       	movw	r30, r28
    310e:	ee 0f       	add	r30, r30
    3110:	ff 1f       	adc	r31, r31
    3112:	ec 0f       	add	r30, r28
    3114:	fd 1f       	adc	r31, r29
    3116:	eb 5e       	subi	r30, 0xEB	; 235
    3118:	f9 4f       	sbci	r31, 0xF9	; 249
    311a:	80 81       	ld	r24, Z
    311c:	07 c0       	rjmp	.+14     	; 0x312c <_reply2return_code+0x5e>
    311e:	21 96       	adiw	r28, 0x01	; 1
    3120:	0d 5f       	subi	r16, 0xFD	; 253
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	c1 31       	cpi	r28, 0x11	; 17
    3126:	d1 05       	cpc	r29, r1
    3128:	49 f7       	brne	.-46     	; 0x30fc <_reply2return_code+0x2e>
    312a:	80 e1       	ldi	r24, 0x10	; 16
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	bf 90       	pop	r11
    313e:	af 90       	pop	r10
    3140:	08 95       	ret

00003142 <_upload_message_rc>:
    3142:	6f df       	rcall	.-290    	; 0x3022 <_upload_message>
    3144:	c4 cf       	rjmp	.-120    	; 0x30ce <_reply2return_code>
    3146:	08 95       	ret

00003148 <lora_driver_flush_buffers>:
    3148:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    314c:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    3150:	0c 94 43 09 	jmp	0x1286	; 0x1286 <xStreamBufferReset>
    3154:	08 95       	ret

00003156 <lora_driver_create>:
    3156:	8f 92       	push	r8
    3158:	9f 92       	push	r9
    315a:	af 92       	push	r10
    315c:	cf 92       	push	r12
    315e:	ef 92       	push	r14
    3160:	0f 93       	push	r16
    3162:	cf 93       	push	r28
    3164:	c8 2f       	mov	r28, r24
    3166:	41 e0       	ldi	r20, 0x01	; 1
    3168:	60 e0       	ldi	r22, 0x00	; 0
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	88 ec       	ldi	r24, 0xC8	; 200
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 17 09 	call	0x122e	; 0x122e <xStreamBufferGenericCreate>
    3174:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <_reply_buffer_handle+0x1>
    3178:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <_reply_buffer_handle>
    317c:	0f 2e       	mov	r0, r31
    317e:	fb ec       	ldi	r31, 0xCB	; 203
    3180:	8f 2e       	mov	r8, r31
    3182:	f7 e1       	ldi	r31, 0x17	; 23
    3184:	9f 2e       	mov	r9, r31
    3186:	f0 2d       	mov	r31, r0
    3188:	68 94       	set
    318a:	aa 24       	eor	r10, r10
    318c:	a6 f8       	bld	r10, 6
    318e:	68 94       	set
    3190:	cc 24       	eor	r12, r12
    3192:	c6 f8       	bld	r12, 6
    3194:	e1 2c       	mov	r14, r1
    3196:	00 e0       	ldi	r16, 0x00	; 0
    3198:	23 e0       	ldi	r18, 0x03	; 3
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	51 ee       	ldi	r21, 0xE1	; 225
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	8c 2f       	mov	r24, r28
    31a4:	69 d9       	rcall	.-3374   	; 0x2478 <serial_new_instance>
    31a6:	90 93 ce 07 	sts	0x07CE, r25	; 0x8007ce <_rn2483_serial+0x1>
    31aa:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <_rn2483_serial>
    31ae:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    31b2:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    31b6:	64 e0       	ldi	r22, 0x04	; 4
    31b8:	87 e0       	ldi	r24, 0x07	; 7
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	19 95       	eicall
    31be:	cf 91       	pop	r28
    31c0:	0f 91       	pop	r16
    31c2:	ef 90       	pop	r14
    31c4:	cf 90       	pop	r12
    31c6:	af 90       	pop	r10
    31c8:	9f 90       	pop	r9
    31ca:	8f 90       	pop	r8
    31cc:	08 95       	ret

000031ce <lora_driver_reset_rn2483>:
    31ce:	88 23       	and	r24, r24
    31d0:	49 f0       	breq	.+18     	; 0x31e4 <lora_driver_reset_rn2483+0x16>
    31d2:	e0 91 a1 08 	lds	r30, 0x08A1	; 0x8008a1 <register_access+0x12>
    31d6:	f0 91 a2 08 	lds	r31, 0x08A2	; 0x8008a2 <register_access+0x13>
    31da:	64 e0       	ldi	r22, 0x04	; 4
    31dc:	88 e0       	ldi	r24, 0x08	; 8
    31de:	91 e0       	ldi	r25, 0x01	; 1
    31e0:	19 95       	eicall
    31e2:	08 95       	ret
    31e4:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    31e8:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    31ec:	64 e0       	ldi	r22, 0x04	; 4
    31ee:	88 e0       	ldi	r24, 0x08	; 8
    31f0:	91 e0       	ldi	r25, 0x01	; 1
    31f2:	19 95       	eicall
    31f4:	08 95       	ret

000031f6 <lora_driver_rn2483_factory_reset>:
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	81 eb       	ldi	r24, 0xB1	; 177
    31fc:	93 e0       	ldi	r25, 0x03	; 3
    31fe:	11 df       	rcall	.-478    	; 0x3022 <_upload_message>
    3200:	e4 e5       	ldi	r30, 0x54	; 84
    3202:	f8 e0       	ldi	r31, 0x08	; 8
    3204:	01 90       	ld	r0, Z+
    3206:	00 20       	and	r0, r0
    3208:	e9 f7       	brne	.-6      	; 0x3204 <lora_driver_rn2483_factory_reset+0xe>
    320a:	31 97       	sbiw	r30, 0x01	; 1
    320c:	e4 55       	subi	r30, 0x54	; 84
    320e:	f8 40       	sbci	r31, 0x08	; 8
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	75 97       	sbiw	r30, 0x15	; 21
    3214:	08 f0       	brcs	.+2      	; 0x3218 <lora_driver_rn2483_factory_reset+0x22>
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	08 95       	ret

0000321a <lora_driver_get_rn2483_hweui>:
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	ec 01       	movw	r28, r24
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	82 ec       	ldi	r24, 0xC2	; 194
    3226:	93 e0       	ldi	r25, 0x03	; 3
    3228:	fc de       	rcall	.-520    	; 0x3022 <_upload_message>
    322a:	e4 e5       	ldi	r30, 0x54	; 84
    322c:	f8 e0       	ldi	r31, 0x08	; 8
    322e:	01 90       	ld	r0, Z+
    3230:	00 20       	and	r0, r0
    3232:	e9 f7       	brne	.-6      	; 0x322e <lora_driver_get_rn2483_hweui+0x14>
    3234:	e5 56       	subi	r30, 0x65	; 101
    3236:	f8 40       	sbci	r31, 0x08	; 8
    3238:	31 f4       	brne	.+12     	; 0x3246 <lora_driver_get_rn2483_hweui+0x2c>
    323a:	64 e5       	ldi	r22, 0x54	; 84
    323c:	78 e0       	ldi	r23, 0x08	; 8
    323e:	ce 01       	movw	r24, r28
    3240:	d7 d6       	rcall	.+3502   	; 0x3ff0 <strcpy>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	02 c0       	rjmp	.+4      	; 0x324a <lora_driver_get_rn2483_hweui+0x30>
    3246:	18 82       	st	Y, r1
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	08 95       	ret

00003250 <lora_driver_set_device_identifier>:
    3250:	fc 01       	movw	r30, r24
    3252:	01 90       	ld	r0, Z+
    3254:	00 20       	and	r0, r0
    3256:	e9 f7       	brne	.-6      	; 0x3252 <lora_driver_set_device_identifier+0x2>
    3258:	9f 01       	movw	r18, r30
    325a:	21 51       	subi	r18, 0x11	; 17
    325c:	31 09       	sbc	r19, r1
    325e:	28 17       	cp	r18, r24
    3260:	39 07       	cpc	r19, r25
    3262:	29 f4       	brne	.+10     	; 0x326e <lora_driver_set_device_identifier+0x1e>
    3264:	bc 01       	movw	r22, r24
    3266:	80 ef       	ldi	r24, 0xF0	; 240
    3268:	93 e0       	ldi	r25, 0x03	; 3
    326a:	6b cf       	rjmp	.-298    	; 0x3142 <_upload_message_rc>
    326c:	08 95       	ret
    326e:	89 e0       	ldi	r24, 0x09	; 9
    3270:	08 95       	ret

00003272 <lora_driver_set_application_identifier>:
    3272:	fc 01       	movw	r30, r24
    3274:	01 90       	ld	r0, Z+
    3276:	00 20       	and	r0, r0
    3278:	e9 f7       	brne	.-6      	; 0x3274 <lora_driver_set_application_identifier+0x2>
    327a:	9f 01       	movw	r18, r30
    327c:	21 51       	subi	r18, 0x11	; 17
    327e:	31 09       	sbc	r19, r1
    3280:	28 17       	cp	r18, r24
    3282:	39 07       	cpc	r19, r25
    3284:	29 f4       	brne	.+10     	; 0x3290 <lora_driver_set_application_identifier+0x1e>
    3286:	bc 01       	movw	r22, r24
    3288:	8f ef       	ldi	r24, 0xFF	; 255
    328a:	93 e0       	ldi	r25, 0x03	; 3
    328c:	5a cf       	rjmp	.-332    	; 0x3142 <_upload_message_rc>
    328e:	08 95       	ret
    3290:	89 e0       	ldi	r24, 0x09	; 9
    3292:	08 95       	ret

00003294 <lora_driver_set_application_key>:
    3294:	fc 01       	movw	r30, r24
    3296:	01 90       	ld	r0, Z+
    3298:	00 20       	and	r0, r0
    329a:	e9 f7       	brne	.-6      	; 0x3296 <lora_driver_set_application_key+0x2>
    329c:	9f 01       	movw	r18, r30
    329e:	21 52       	subi	r18, 0x21	; 33
    32a0:	31 09       	sbc	r19, r1
    32a2:	28 17       	cp	r18, r24
    32a4:	39 07       	cpc	r19, r25
    32a6:	29 f4       	brne	.+10     	; 0x32b2 <lora_driver_set_application_key+0x1e>
    32a8:	bc 01       	movw	r22, r24
    32aa:	8e e0       	ldi	r24, 0x0E	; 14
    32ac:	94 e0       	ldi	r25, 0x04	; 4
    32ae:	49 cf       	rjmp	.-366    	; 0x3142 <_upload_message_rc>
    32b0:	08 95       	ret
    32b2:	89 e0       	ldi	r24, 0x09	; 9
    32b4:	08 95       	ret

000032b6 <lora_driver_save_mac>:
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	8d e4       	ldi	r24, 0x4D	; 77
    32bc:	94 e0       	ldi	r25, 0x04	; 4
    32be:	41 cf       	rjmp	.-382    	; 0x3142 <_upload_message_rc>
    32c0:	08 95       	ret

000032c2 <lora_driver_join>:
    32c2:	e8 2f       	mov	r30, r24
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	ee 0f       	add	r30, r30
    32c8:	ff 1f       	adc	r31, r31
    32ca:	ef 5e       	subi	r30, 0xEF	; 239
    32cc:	f9 4f       	sbci	r31, 0xF9	; 249
    32ce:	60 81       	ld	r22, Z
    32d0:	71 81       	ldd	r23, Z+1	; 0x01
    32d2:	86 e5       	ldi	r24, 0x56	; 86
    32d4:	94 e0       	ldi	r25, 0x04	; 4
    32d6:	35 df       	rcall	.-406    	; 0x3142 <_upload_message_rc>
    32d8:	81 11       	cpse	r24, r1
    32da:	12 c0       	rjmp	.+36     	; 0x3300 <lora_driver_join+0x3e>
    32dc:	28 e2       	ldi	r18, 0x28	; 40
    32de:	35 e0       	ldi	r19, 0x05	; 5
    32e0:	4d e2       	ldi	r20, 0x2D	; 45
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	64 e5       	ldi	r22, 0x54	; 84
    32e6:	78 e0       	ldi	r23, 0x08	; 8
    32e8:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    32ec:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    32f0:	0e 94 c4 09 	call	0x1388	; 0x1388 <xStreamBufferReceive>
    32f4:	88 23       	and	r24, r24
    32f6:	21 f0       	breq	.+8      	; 0x3300 <lora_driver_join+0x3e>
    32f8:	84 e5       	ldi	r24, 0x54	; 84
    32fa:	98 e0       	ldi	r25, 0x08	; 8
    32fc:	e8 ce       	rjmp	.-560    	; 0x30ce <_reply2return_code>
    32fe:	08 95       	ret
    3300:	84 e5       	ldi	r24, 0x54	; 84
    3302:	98 e0       	ldi	r25, 0x08	; 8
    3304:	e4 ce       	rjmp	.-568    	; 0x30ce <_reply2return_code>
    3306:	08 95       	ret

00003308 <lora_driver_sent_upload_message>:
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	1f 92       	push	r1
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	db 01       	movw	r26, r22
    3314:	11 96       	adiw	r26, 0x01	; 1
    3316:	9c 91       	ld	r25, X
    3318:	11 97       	sbiw	r26, 0x01	; 1
    331a:	95 31       	cpi	r25, 0x15	; 21
    331c:	08 f0       	brcs	.+2      	; 0x3320 <lora_driver_sent_upload_message+0x18>
    331e:	86 c0       	rjmp	.+268    	; 0x342c <lora_driver_sent_upload_message+0x124>
    3320:	99 23       	and	r25, r25
    3322:	81 f1       	breq	.+96     	; 0x3384 <lora_driver_sent_upload_message+0x7c>
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	70 e0       	ldi	r23, 0x00	; 0
    3328:	27 2f       	mov	r18, r23
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	46 2f       	mov	r20, r22
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	fd 01       	movw	r30, r26
    3332:	e4 0f       	add	r30, r20
    3334:	f5 1f       	adc	r31, r21
    3336:	92 81       	ldd	r25, Z+2	; 0x02
    3338:	92 95       	swap	r25
    333a:	9f 70       	andi	r25, 0x0F	; 15
    333c:	9a 30       	cpi	r25, 0x0A	; 10
    333e:	10 f0       	brcs	.+4      	; 0x3344 <lora_driver_sent_upload_message+0x3c>
    3340:	99 5c       	subi	r25, 0xC9	; 201
    3342:	01 c0       	rjmp	.+2      	; 0x3346 <lora_driver_sent_upload_message+0x3e>
    3344:	90 5d       	subi	r25, 0xD0	; 208
    3346:	f9 01       	movw	r30, r18
    3348:	eb 51       	subi	r30, 0x1B	; 27
    334a:	f8 4f       	sbci	r31, 0xF8	; 248
    334c:	90 83       	st	Z, r25
    334e:	2f 5f       	subi	r18, 0xFF	; 255
    3350:	3f 4f       	sbci	r19, 0xFF	; 255
    3352:	fd 01       	movw	r30, r26
    3354:	e4 0f       	add	r30, r20
    3356:	f5 1f       	adc	r31, r21
    3358:	92 81       	ldd	r25, Z+2	; 0x02
    335a:	9f 70       	andi	r25, 0x0F	; 15
    335c:	49 2f       	mov	r20, r25
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	4a 30       	cpi	r20, 0x0A	; 10
    3362:	51 05       	cpc	r21, r1
    3364:	14 f0       	brlt	.+4      	; 0x336a <lora_driver_sent_upload_message+0x62>
    3366:	99 5c       	subi	r25, 0xC9	; 201
    3368:	01 c0       	rjmp	.+2      	; 0x336c <lora_driver_sent_upload_message+0x64>
    336a:	90 5d       	subi	r25, 0xD0	; 208
    336c:	f9 01       	movw	r30, r18
    336e:	eb 51       	subi	r30, 0x1B	; 27
    3370:	f8 4f       	sbci	r31, 0xF8	; 248
    3372:	90 83       	st	Z, r25
    3374:	7e 5f       	subi	r23, 0xFE	; 254
    3376:	6f 5f       	subi	r22, 0xFF	; 255
    3378:	11 96       	adiw	r26, 0x01	; 1
    337a:	9c 91       	ld	r25, X
    337c:	11 97       	sbiw	r26, 0x01	; 1
    337e:	69 17       	cp	r22, r25
    3380:	98 f2       	brcs	.-90     	; 0x3328 <lora_driver_sent_upload_message+0x20>
    3382:	01 c0       	rjmp	.+2      	; 0x3386 <lora_driver_sent_upload_message+0x7e>
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	e7 2f       	mov	r30, r23
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	eb 51       	subi	r30, 0x1B	; 27
    338c:	f8 4f       	sbci	r31, 0xF8	; 248
    338e:	10 82       	st	Z, r1
    3390:	4c 91       	ld	r20, X
    3392:	81 11       	cpse	r24, r1
    3394:	03 c0       	rjmp	.+6      	; 0x339c <lora_driver_sent_upload_message+0x94>
    3396:	8f e5       	ldi	r24, 0x5F	; 95
    3398:	94 e0       	ldi	r25, 0x04	; 4
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <lora_driver_sent_upload_message+0x98>
    339c:	81 e6       	ldi	r24, 0x61	; 97
    339e:	94 e0       	ldi	r25, 0x04	; 4
    33a0:	25 ee       	ldi	r18, 0xE5	; 229
    33a2:	37 e0       	ldi	r19, 0x07	; 7
    33a4:	3f 93       	push	r19
    33a6:	2f 93       	push	r18
    33a8:	1f 92       	push	r1
    33aa:	4f 93       	push	r20
    33ac:	9f 93       	push	r25
    33ae:	8f 93       	push	r24
    33b0:	85 e6       	ldi	r24, 0x65	; 101
    33b2:	94 e0       	ldi	r25, 0x04	; 4
    33b4:	9f 93       	push	r25
    33b6:	8f 93       	push	r24
    33b8:	87 e2       	ldi	r24, 0x27	; 39
    33ba:	98 e0       	ldi	r25, 0x08	; 8
    33bc:	9f 93       	push	r25
    33be:	8f 93       	push	r24
    33c0:	79 d6       	rcall	.+3314   	; 0x40b4 <sprintf>
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	87 e2       	ldi	r24, 0x27	; 39
    33c8:	98 e0       	ldi	r25, 0x08	; 8
    33ca:	bb de       	rcall	.-650    	; 0x3142 <_upload_message_rc>
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	8e 30       	cpi	r24, 0x0E	; 14
    33d8:	51 f5       	brne	.+84     	; 0x342e <lora_driver_sent_upload_message+0x126>
    33da:	87 e0       	ldi	r24, 0x07	; 7
    33dc:	89 83       	std	Y+1, r24	; 0x01
    33de:	be 01       	movw	r22, r28
    33e0:	6f 5f       	subi	r22, 0xFF	; 255
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	84 e5       	ldi	r24, 0x54	; 84
    33e6:	98 e0       	ldi	r25, 0x08	; 8
    33e8:	38 d1       	rcall	.+624    	; 0x365a <decode_port_no>
    33ea:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_downlink_payload>
    33ee:	e9 81       	ldd	r30, Y+1	; 0x01
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	ec 5a       	subi	r30, 0xAC	; 172
    33f4:	f7 4f       	sbci	r31, 0xF7	; 247
    33f6:	df 01       	movw	r26, r30
    33f8:	0d 90       	ld	r0, X+
    33fa:	00 20       	and	r0, r0
    33fc:	e9 f7       	brne	.-6      	; 0x33f8 <lora_driver_sent_upload_message+0xf0>
    33fe:	11 97       	sbiw	r26, 0x01	; 1
    3400:	ae 1b       	sub	r26, r30
    3402:	bf 0b       	sbc	r27, r31
    3404:	aa 23       	and	r26, r26
    3406:	81 f0       	breq	.+32     	; 0x3428 <lora_driver_sent_upload_message+0x120>
    3408:	bb 27       	eor	r27, r27
    340a:	11 97       	sbiw	r26, 0x01	; 1
    340c:	cd 01       	movw	r24, r26
    340e:	0a f4       	brpl	.+2      	; 0x3412 <lora_driver_sent_upload_message+0x10a>
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	95 95       	asr	r25
    3414:	87 95       	ror	r24
    3416:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <_downlink_payload+0x1>
    341a:	af 01       	movw	r20, r30
    341c:	4f 5f       	subi	r20, 0xFF	; 255
    341e:	5f 4f       	sbci	r21, 0xFF	; 255
    3420:	64 e1       	ldi	r22, 0x14	; 20
    3422:	81 ed       	ldi	r24, 0xD1	; 209
    3424:	97 e0       	ldi	r25, 0x07	; 7
    3426:	45 d1       	rcall	.+650    	; 0x36b2 <decode_hexadecimal_string_bytes>
    3428:	8e e0       	ldi	r24, 0x0E	; 14
    342a:	01 c0       	rjmp	.+2      	; 0x342e <lora_driver_sent_upload_message+0x126>
    342c:	84 e1       	ldi	r24, 0x14	; 20
    342e:	0f 90       	pop	r0
    3430:	df 91       	pop	r29
    3432:	cf 91       	pop	r28
    3434:	08 95       	ret

00003436 <lora_driver_set_adaptive_data_rate>:
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	19 f0       	breq	.+6      	; 0x3440 <lora_driver_set_adaptive_data_rate+0xa>
    343a:	65 e7       	ldi	r22, 0x75	; 117
    343c:	74 e0       	ldi	r23, 0x04	; 4
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <lora_driver_set_adaptive_data_rate+0xe>
    3440:	65 e3       	ldi	r22, 0x35	; 53
    3442:	75 e0       	ldi	r23, 0x05	; 5
    3444:	89 e7       	ldi	r24, 0x79	; 121
    3446:	94 e0       	ldi	r25, 0x04	; 4
    3448:	7c ce       	rjmp	.-776    	; 0x3142 <_upload_message_rc>
    344a:	08 95       	ret

0000344c <lora_driver_configure_to_eu868>:
    344c:	2f 92       	push	r2
    344e:	3f 92       	push	r3
    3450:	4f 92       	push	r4
    3452:	5f 92       	push	r5
    3454:	6f 92       	push	r6
    3456:	7f 92       	push	r7
    3458:	8f 92       	push	r8
    345a:	9f 92       	push	r9
    345c:	af 92       	push	r10
    345e:	bf 92       	push	r11
    3460:	cf 92       	push	r12
    3462:	df 92       	push	r13
    3464:	ef 92       	push	r14
    3466:	ff 92       	push	r15
    3468:	0f 93       	push	r16
    346a:	1f 93       	push	r17
    346c:	cf 93       	push	r28
    346e:	df 93       	push	r29
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	a0 97       	sbiw	r28, 0x20	; 32
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	6e eb       	ldi	r22, 0xBE	; 190
    3482:	74 e0       	ldi	r23, 0x04	; 4
    3484:	8a ec       	ldi	r24, 0xCA	; 202
    3486:	94 e0       	ldi	r25, 0x04	; 4
    3488:	cc dd       	rcall	.-1128   	; 0x3022 <_upload_message>
    348a:	21 de       	rcall	.-958    	; 0x30ce <_reply2return_code>
    348c:	81 11       	cpse	r24, r1
    348e:	9f c0       	rjmp	.+318    	; 0x35ce <lora_driver_configure_to_eu868+0x182>
    3490:	80 e2       	ldi	r24, 0x20	; 32
    3492:	ed e1       	ldi	r30, 0x1D	; 29
    3494:	f2 e0       	ldi	r31, 0x02	; 2
    3496:	de 01       	movw	r26, r28
    3498:	11 96       	adiw	r26, 0x01	; 1
    349a:	01 90       	ld	r0, Z+
    349c:	0d 92       	st	X+, r0
    349e:	8a 95       	dec	r24
    34a0:	e1 f7       	brne	.-8      	; 0x349a <lora_driver_configure_to_eu868+0x4e>
    34a2:	9e 01       	movw	r18, r28
    34a4:	2f 5f       	subi	r18, 0xFF	; 255
    34a6:	3f 4f       	sbci	r19, 0xFF	; 255
    34a8:	69 01       	movw	r12, r18
    34aa:	e1 2c       	mov	r14, r1
    34ac:	f1 2c       	mov	r15, r1
    34ae:	0f 2e       	mov	r0, r31
    34b0:	f6 ed       	ldi	r31, 0xD6	; 214
    34b2:	af 2e       	mov	r10, r31
    34b4:	f4 e0       	ldi	r31, 0x04	; 4
    34b6:	bf 2e       	mov	r11, r31
    34b8:	f0 2d       	mov	r31, r0
    34ba:	07 e2       	ldi	r16, 0x27	; 39
    34bc:	18 e0       	ldi	r17, 0x08	; 8
    34be:	0f 2e       	mov	r0, r31
    34c0:	ff ee       	ldi	r31, 0xEF	; 239
    34c2:	4f 2e       	mov	r4, r31
    34c4:	f4 e0       	ldi	r31, 0x04	; 4
    34c6:	5f 2e       	mov	r5, r31
    34c8:	f0 2d       	mov	r31, r0
    34ca:	0f 2e       	mov	r0, r31
    34cc:	f6 e0       	ldi	r31, 0x06	; 6
    34ce:	8f 2e       	mov	r8, r31
    34d0:	f5 e0       	ldi	r31, 0x05	; 5
    34d2:	9f 2e       	mov	r9, r31
    34d4:	f0 2d       	mov	r31, r0
    34d6:	0f 2e       	mov	r0, r31
    34d8:	f0 e2       	ldi	r31, 0x20	; 32
    34da:	6f 2e       	mov	r6, r31
    34dc:	f5 e0       	ldi	r31, 0x05	; 5
    34de:	7f 2e       	mov	r7, r31
    34e0:	f0 2d       	mov	r31, r0
    34e2:	3e 2c       	mov	r3, r14
    34e4:	2f 2c       	mov	r2, r15
    34e6:	ff 92       	push	r15
    34e8:	ef 92       	push	r14
    34ea:	bf 92       	push	r11
    34ec:	af 92       	push	r10
    34ee:	1f 93       	push	r17
    34f0:	0f 93       	push	r16
    34f2:	e0 d5       	rcall	.+3008   	; 0x40b4 <sprintf>
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	c8 01       	movw	r24, r16
    34fa:	93 dd       	rcall	.-1242   	; 0x3022 <_upload_message>
    34fc:	e8 dd       	rcall	.-1072   	; 0x30ce <_reply2return_code>
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	81 11       	cpse	r24, r1
    350c:	60 c0       	rjmp	.+192    	; 0x35ce <lora_driver_configure_to_eu868+0x182>
    350e:	32 e0       	ldi	r19, 0x02	; 2
    3510:	3e 15       	cp	r19, r14
    3512:	e0 f4       	brcc	.+56     	; 0x354c <lora_driver_configure_to_eu868+0x100>
    3514:	f6 01       	movw	r30, r12
    3516:	83 81       	ldd	r24, Z+3	; 0x03
    3518:	8f 93       	push	r24
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	8f 93       	push	r24
    351e:	81 81       	ldd	r24, Z+1	; 0x01
    3520:	8f 93       	push	r24
    3522:	80 81       	ld	r24, Z
    3524:	8f 93       	push	r24
    3526:	ff 92       	push	r15
    3528:	ef 92       	push	r14
    352a:	5f 92       	push	r5
    352c:	4f 92       	push	r4
    352e:	1f 93       	push	r17
    3530:	0f 93       	push	r16
    3532:	c0 d5       	rcall	.+2944   	; 0x40b4 <sprintf>
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	c8 01       	movw	r24, r16
    353a:	73 dd       	rcall	.-1306   	; 0x3022 <_upload_message>
    353c:	c8 dd       	rcall	.-1136   	; 0x30ce <_reply2return_code>
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	81 11       	cpse	r24, r1
    354a:	41 c0       	rjmp	.+130    	; 0x35ce <lora_driver_configure_to_eu868+0x182>
    354c:	2f 92       	push	r2
    354e:	3f 92       	push	r3
    3550:	9f 92       	push	r9
    3552:	8f 92       	push	r8
    3554:	1f 93       	push	r17
    3556:	0f 93       	push	r16
    3558:	ad d5       	rcall	.+2906   	; 0x40b4 <sprintf>
    355a:	60 e0       	ldi	r22, 0x00	; 0
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	c8 01       	movw	r24, r16
    3560:	60 dd       	rcall	.-1344   	; 0x3022 <_upload_message>
    3562:	b5 dd       	rcall	.-1174   	; 0x30ce <_reply2return_code>
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	81 11       	cpse	r24, r1
    3572:	2d c0       	rjmp	.+90     	; 0x35ce <lora_driver_configure_to_eu868+0x182>
    3574:	2f 92       	push	r2
    3576:	3f 92       	push	r3
    3578:	7f 92       	push	r7
    357a:	6f 92       	push	r6
    357c:	1f 93       	push	r17
    357e:	0f 93       	push	r16
    3580:	99 d5       	rcall	.+2866   	; 0x40b4 <sprintf>
    3582:	60 e0       	ldi	r22, 0x00	; 0
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	c8 01       	movw	r24, r16
    3588:	4c dd       	rcall	.-1384   	; 0x3022 <_upload_message>
    358a:	a1 dd       	rcall	.-1214   	; 0x30ce <_reply2return_code>
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	81 11       	cpse	r24, r1
    359a:	19 c0       	rjmp	.+50     	; 0x35ce <lora_driver_configure_to_eu868+0x182>
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	e3 1a       	sub	r14, r19
    35a0:	f3 0a       	sbc	r15, r19
    35a2:	84 e0       	ldi	r24, 0x04	; 4
    35a4:	c8 0e       	add	r12, r24
    35a6:	d1 1c       	adc	r13, r1
    35a8:	98 e0       	ldi	r25, 0x08	; 8
    35aa:	e9 16       	cp	r14, r25
    35ac:	f1 04       	cpc	r15, r1
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <lora_driver_configure_to_eu868+0x166>
    35b0:	98 cf       	rjmp	.-208    	; 0x34e2 <lora_driver_configure_to_eu868+0x96>
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	88 e3       	ldi	r24, 0x38	; 56
    35b8:	95 e0       	ldi	r25, 0x05	; 5
    35ba:	33 dd       	rcall	.-1434   	; 0x3022 <_upload_message>
    35bc:	88 dd       	rcall	.-1264   	; 0x30ce <_reply2return_code>
    35be:	81 11       	cpse	r24, r1
    35c0:	06 c0       	rjmp	.+12     	; 0x35ce <lora_driver_configure_to_eu868+0x182>
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	89 e4       	ldi	r24, 0x49	; 73
    35c8:	95 e0       	ldi	r25, 0x05	; 5
    35ca:	2b dd       	rcall	.-1450   	; 0x3022 <_upload_message>
    35cc:	80 dd       	rcall	.-1280   	; 0x30ce <_reply2return_code>
    35ce:	a0 96       	adiw	r28, 0x20	; 32
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	ff 90       	pop	r15
    35e4:	ef 90       	pop	r14
    35e6:	df 90       	pop	r13
    35e8:	cf 90       	pop	r12
    35ea:	bf 90       	pop	r11
    35ec:	af 90       	pop	r10
    35ee:	9f 90       	pop	r9
    35f0:	8f 90       	pop	r8
    35f2:	7f 90       	pop	r7
    35f4:	6f 90       	pop	r6
    35f6:	5f 90       	pop	r5
    35f8:	4f 90       	pop	r4
    35fa:	3f 90       	pop	r3
    35fc:	2f 90       	pop	r2
    35fe:	08 95       	ret

00003600 <lora_driver_set_otaa_identity>:
    3600:	ef 92       	push	r14
    3602:	ff 92       	push	r15
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	ec 01       	movw	r28, r24
    360e:	8b 01       	movw	r16, r22
    3610:	7a 01       	movw	r14, r20
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	10 df       	rcall	.-480    	; 0x3436 <lora_driver_set_adaptive_data_rate>
    3616:	81 11       	cpse	r24, r1
    3618:	0d c0       	rjmp	.+26     	; 0x3634 <lora_driver_set_otaa_identity+0x34>
    361a:	ce 01       	movw	r24, r28
    361c:	2a de       	rcall	.-940    	; 0x3272 <lora_driver_set_application_identifier>
    361e:	81 11       	cpse	r24, r1
    3620:	09 c0       	rjmp	.+18     	; 0x3634 <lora_driver_set_otaa_identity+0x34>
    3622:	c8 01       	movw	r24, r16
    3624:	37 de       	rcall	.-914    	; 0x3294 <lora_driver_set_application_key>
    3626:	81 11       	cpse	r24, r1
    3628:	05 c0       	rjmp	.+10     	; 0x3634 <lora_driver_set_otaa_identity+0x34>
    362a:	c7 01       	movw	r24, r14
    362c:	11 de       	rcall	.-990    	; 0x3250 <lora_driver_set_device_identifier>
    362e:	81 11       	cpse	r24, r1
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <lora_driver_set_otaa_identity+0x34>
    3632:	41 de       	rcall	.-894    	; 0x32b6 <lora_driver_save_mac>
    3634:	df 91       	pop	r29
    3636:	cf 91       	pop	r28
    3638:	1f 91       	pop	r17
    363a:	0f 91       	pop	r16
    363c:	ff 90       	pop	r15
    363e:	ef 90       	pop	r14
    3640:	08 95       	ret

00003642 <lora_driver_map_return_code_to_text>:
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	fc 01       	movw	r30, r24
    3646:	ee 0f       	add	r30, r30
    3648:	ff 1f       	adc	r31, r31
    364a:	8e 0f       	add	r24, r30
    364c:	9f 1f       	adc	r25, r31
    364e:	fc 01       	movw	r30, r24
    3650:	eb 5e       	subi	r30, 0xEB	; 235
    3652:	f9 4f       	sbci	r31, 0xF9	; 249
    3654:	81 81       	ldd	r24, Z+1	; 0x01
    3656:	92 81       	ldd	r25, Z+2	; 0x02
    3658:	08 95       	ret

0000365a <decode_port_no>:
    365a:	dc 01       	movw	r26, r24
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	29 f1       	breq	.+74     	; 0x36aa <decode_port_no+0x50>
    3660:	fb 01       	movw	r30, r22
    3662:	20 81       	ld	r18, Z
    3664:	fc 01       	movw	r30, r24
    3666:	01 90       	ld	r0, Z+
    3668:	00 20       	and	r0, r0
    366a:	e9 f7       	brne	.-6      	; 0x3666 <decode_port_no+0xc>
    366c:	31 97       	sbiw	r30, 0x01	; 1
    366e:	e8 1b       	sub	r30, r24
    3670:	f9 0b       	sbc	r31, r25
    3672:	82 2f       	mov	r24, r18
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	e8 17       	cp	r30, r24
    3678:	f9 07       	cpc	r31, r25
    367a:	c8 f0       	brcs	.+50     	; 0x36ae <decode_port_no+0x54>
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	08 c0       	rjmp	.+16     	; 0x3690 <decode_port_no+0x36>
    3680:	88 0f       	add	r24, r24
    3682:	38 2f       	mov	r19, r24
    3684:	33 0f       	add	r19, r19
    3686:	33 0f       	add	r19, r19
    3688:	83 0f       	add	r24, r19
    368a:	80 53       	subi	r24, 0x30	; 48
    368c:	89 0f       	add	r24, r25
    368e:	2f 5f       	subi	r18, 0xFF	; 255
    3690:	fd 01       	movw	r30, r26
    3692:	e2 0f       	add	r30, r18
    3694:	f1 1d       	adc	r31, r1
    3696:	90 81       	ld	r25, Z
    3698:	30 ed       	ldi	r19, 0xD0	; 208
    369a:	39 0f       	add	r19, r25
    369c:	3a 30       	cpi	r19, 0x0A	; 10
    369e:	10 f4       	brcc	.+4      	; 0x36a4 <decode_port_no+0x4a>
    36a0:	91 11       	cpse	r25, r1
    36a2:	ee cf       	rjmp	.-36     	; 0x3680 <decode_port_no+0x26>
    36a4:	fb 01       	movw	r30, r22
    36a6:	20 83       	st	Z, r18
    36a8:	08 95       	ret
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	08 95       	ret
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	08 95       	ret

000036b2 <decode_hexadecimal_string_bytes>:
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	dc 01       	movw	r26, r24
    36bc:	ea 01       	movw	r28, r20
    36be:	20 97       	sbiw	r28, 0x00	; 0
    36c0:	e1 f1       	breq	.+120    	; 0x373a <decode_hexadecimal_string_bytes+0x88>
    36c2:	fa 01       	movw	r30, r20
    36c4:	01 90       	ld	r0, Z+
    36c6:	00 20       	and	r0, r0
    36c8:	e9 f7       	brne	.-6      	; 0x36c4 <decode_hexadecimal_string_bytes+0x12>
    36ca:	31 97       	sbiw	r30, 0x01	; 1
    36cc:	e4 1b       	sub	r30, r20
    36ce:	f5 0b       	sbc	r31, r21
    36d0:	32 97       	sbiw	r30, 0x02	; 2
    36d2:	10 f5       	brcc	.+68     	; 0x3718 <decode_hexadecimal_string_bytes+0x66>
    36d4:	32 c0       	rjmp	.+100    	; 0x373a <decode_hexadecimal_string_bytes+0x88>
    36d6:	8d 01       	movw	r16, r26
    36d8:	04 0f       	add	r16, r20
    36da:	15 1f       	adc	r17, r21
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	ae 01       	movw	r20, r28
    36e0:	42 0f       	add	r20, r18
    36e2:	53 1f       	adc	r21, r19
    36e4:	fa 01       	movw	r30, r20
    36e6:	90 81       	ld	r25, Z
    36e8:	91 34       	cpi	r25, 0x41	; 65
    36ea:	28 f0       	brcs	.+10     	; 0x36f6 <decode_hexadecimal_string_bytes+0x44>
    36ec:	97 53       	subi	r25, 0x37	; 55
    36ee:	59 2f       	mov	r21, r25
    36f0:	52 95       	swap	r21
    36f2:	50 7f       	andi	r21, 0xF0	; 240
    36f4:	03 c0       	rjmp	.+6      	; 0x36fc <decode_hexadecimal_string_bytes+0x4a>
    36f6:	59 2f       	mov	r21, r25
    36f8:	52 95       	swap	r21
    36fa:	50 7f       	andi	r21, 0xF0	; 240
    36fc:	2c 0f       	add	r18, r28
    36fe:	3d 1f       	adc	r19, r29
    3700:	f9 01       	movw	r30, r18
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	91 34       	cpi	r25, 0x41	; 65
    3706:	10 f0       	brcs	.+4      	; 0x370c <decode_hexadecimal_string_bytes+0x5a>
    3708:	97 53       	subi	r25, 0x37	; 55
    370a:	01 c0       	rjmp	.+2      	; 0x370e <decode_hexadecimal_string_bytes+0x5c>
    370c:	90 53       	subi	r25, 0x30	; 48
    370e:	95 0f       	add	r25, r21
    3710:	f8 01       	movw	r30, r16
    3712:	90 83       	st	Z, r25
    3714:	8f 5f       	subi	r24, 0xFF	; 255
    3716:	01 c0       	rjmp	.+2      	; 0x371a <decode_hexadecimal_string_bytes+0x68>
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	28 2f       	mov	r18, r24
    371c:	22 0f       	add	r18, r18
    371e:	48 2f       	mov	r20, r24
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	fe 01       	movw	r30, r28
    3724:	01 90       	ld	r0, Z+
    3726:	00 20       	and	r0, r0
    3728:	e9 f7       	brne	.-6      	; 0x3724 <decode_hexadecimal_string_bytes+0x72>
    372a:	31 97       	sbiw	r30, 0x01	; 1
    372c:	ec 1b       	sub	r30, r28
    372e:	fd 0b       	sbc	r31, r29
    3730:	4e 17       	cp	r20, r30
    3732:	5f 07       	cpc	r21, r31
    3734:	10 f4       	brcc	.+4      	; 0x373a <decode_hexadecimal_string_bytes+0x88>
    3736:	86 13       	cpse	r24, r22
    3738:	ce cf       	rjmp	.-100    	; 0x36d6 <decode_hexadecimal_string_bytes+0x24>
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	08 95       	ret

00003744 <reg_read_register>:
    3744:	fc 01       	movw	r30, r24
    3746:	80 81       	ld	r24, Z
    3748:	08 95       	ret

0000374a <reg_read_bit>:
    374a:	fc 01       	movw	r30, r24
    374c:	20 81       	ld	r18, Z
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <reg_read_bit+0xe>
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	6a 95       	dec	r22
    375a:	e2 f7       	brpl	.-8      	; 0x3754 <reg_read_bit+0xa>
    375c:	82 23       	and	r24, r18
    375e:	08 95       	ret

00003760 <reg_read_bits>:
    3760:	fc 01       	movw	r30, r24
    3762:	80 81       	ld	r24, Z
    3764:	86 23       	and	r24, r22
    3766:	08 95       	ret

00003768 <reg_set_register>:
    3768:	fc 01       	movw	r30, r24
    376a:	60 83       	st	Z, r22
    376c:	08 95       	ret

0000376e <reg_clear_register>:
    376e:	fc 01       	movw	r30, r24
    3770:	10 82       	st	Z, r1
    3772:	08 95       	ret

00003774 <reg_set_bit>:
    3774:	fc 01       	movw	r30, r24
    3776:	40 81       	ld	r20, Z
    3778:	21 e0       	ldi	r18, 0x01	; 1
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <reg_set_bit+0xe>
    377e:	22 0f       	add	r18, r18
    3780:	33 1f       	adc	r19, r19
    3782:	6a 95       	dec	r22
    3784:	e2 f7       	brpl	.-8      	; 0x377e <reg_set_bit+0xa>
    3786:	24 2b       	or	r18, r20
    3788:	20 83       	st	Z, r18
    378a:	08 95       	ret

0000378c <reg_set_bits>:
    378c:	fc 01       	movw	r30, r24
    378e:	20 81       	ld	r18, Z
    3790:	62 2b       	or	r22, r18
    3792:	60 83       	st	Z, r22
    3794:	08 95       	ret

00003796 <reg_toggle_bit>:
    3796:	fc 01       	movw	r30, r24
    3798:	40 81       	ld	r20, Z
    379a:	21 e0       	ldi	r18, 0x01	; 1
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <reg_toggle_bit+0xe>
    37a0:	22 0f       	add	r18, r18
    37a2:	33 1f       	adc	r19, r19
    37a4:	6a 95       	dec	r22
    37a6:	e2 f7       	brpl	.-8      	; 0x37a0 <reg_toggle_bit+0xa>
    37a8:	24 27       	eor	r18, r20
    37aa:	20 83       	st	Z, r18
    37ac:	08 95       	ret

000037ae <reg_toggle_bits>:
    37ae:	fc 01       	movw	r30, r24
    37b0:	20 81       	ld	r18, Z
    37b2:	62 27       	eor	r22, r18
    37b4:	60 83       	st	Z, r22
    37b6:	08 95       	ret

000037b8 <reg_clear_bit>:
    37b8:	fc 01       	movw	r30, r24
    37ba:	90 81       	ld	r25, Z
    37bc:	21 e0       	ldi	r18, 0x01	; 1
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <reg_clear_bit+0xe>
    37c2:	22 0f       	add	r18, r18
    37c4:	33 1f       	adc	r19, r19
    37c6:	6a 95       	dec	r22
    37c8:	e2 f7       	brpl	.-8      	; 0x37c2 <reg_clear_bit+0xa>
    37ca:	20 95       	com	r18
    37cc:	29 23       	and	r18, r25
    37ce:	20 83       	st	Z, r18
    37d0:	08 95       	ret

000037d2 <reg_clear_bits>:
    37d2:	fc 01       	movw	r30, r24
    37d4:	90 81       	ld	r25, Z
    37d6:	60 95       	com	r22
    37d8:	69 23       	and	r22, r25
    37da:	60 83       	st	Z, r22
    37dc:	08 95       	ret

000037de <__vector_39>:
    37de:	1f 92       	push	r1
    37e0:	0f 92       	push	r0
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	0f 92       	push	r0
    37e6:	11 24       	eor	r1, r1
    37e8:	0b b6       	in	r0, 0x3b	; 59
    37ea:	0f 92       	push	r0
    37ec:	2f 93       	push	r18
    37ee:	3f 93       	push	r19
    37f0:	4f 93       	push	r20
    37f2:	5f 93       	push	r21
    37f4:	6f 93       	push	r22
    37f6:	7f 93       	push	r23
    37f8:	8f 93       	push	r24
    37fa:	9f 93       	push	r25
    37fc:	af 93       	push	r26
    37fe:	bf 93       	push	r27
    3800:	ef 93       	push	r30
    3802:	ff 93       	push	r31
    3804:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3808:	8e 2f       	mov	r24, r30
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	fc 01       	movw	r30, r24
    380e:	38 97       	sbiw	r30, 0x08	; 8
    3810:	e1 35       	cpi	r30, 0x51	; 81
    3812:	f1 05       	cpc	r31, r1
    3814:	08 f0       	brcs	.+2      	; 0x3818 <__vector_39+0x3a>
    3816:	75 c0       	rjmp	.+234    	; 0x3902 <__vector_39+0x124>
    3818:	88 27       	eor	r24, r24
    381a:	e4 58       	subi	r30, 0x84	; 132
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	8f 4f       	sbci	r24, 0xFF	; 255
    3820:	9b c0       	rjmp	.+310    	; 0x3958 <__tablejump2__>
    3822:	10 92 81 08 	sts	0x0881, r1	; 0x800881 <_index.1885>
    3826:	e0 91 81 08 	lds	r30, 0x0881	; 0x800881 <_index.1885>
    382a:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <_twiMessageLen>
    382e:	e8 17       	cp	r30, r24
    3830:	70 f4       	brcc	.+28     	; 0x384e <__vector_39+0x70>
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	8e 0f       	add	r24, r30
    3836:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <_index.1885>
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	eb 57       	subi	r30, 0x7B	; 123
    383e:	f7 4f       	sbci	r31, 0xF7	; 247
    3840:	80 81       	ld	r24, Z
    3842:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3846:	85 e8       	ldi	r24, 0x85	; 133
    3848:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    384c:	72 c0       	rjmp	.+228    	; 0x3932 <__vector_39+0x154>
    384e:	84 e9       	ldi	r24, 0x94	; 148
    3850:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3854:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_twiCurrentHandler>
    3858:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_twiCurrentHandler+0x1>
    385c:	dc 01       	movw	r26, r24
    385e:	12 96       	adiw	r26, 0x02	; 2
    3860:	ed 91       	ld	r30, X+
    3862:	fc 91       	ld	r31, X
    3864:	13 97       	sbiw	r26, 0x03	; 3
    3866:	30 97       	sbiw	r30, 0x00	; 0
    3868:	09 f4       	brne	.+2      	; 0x386c <__vector_39+0x8e>
    386a:	63 c0       	rjmp	.+198    	; 0x3932 <__vector_39+0x154>
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	40 e0       	ldi	r20, 0x00	; 0
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	64 e0       	ldi	r22, 0x04	; 4
    3874:	19 95       	eicall
    3876:	5d c0       	rjmp	.+186    	; 0x3932 <__vector_39+0x154>
    3878:	e0 91 81 08 	lds	r30, 0x0881	; 0x800881 <_index.1885>
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	8e 0f       	add	r24, r30
    3880:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <_index.1885>
    3884:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	eb 57       	subi	r30, 0x7B	; 123
    388c:	f7 4f       	sbci	r31, 0xF7	; 247
    388e:	80 83       	st	Z, r24
    3890:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3894:	80 34       	cpi	r24, 0x40	; 64
    3896:	11 f4       	brne	.+4      	; 0x389c <__vector_39+0xbe>
    3898:	10 92 81 08 	sts	0x0881, r1	; 0x800881 <_index.1885>
    389c:	20 91 81 08 	lds	r18, 0x0881	; 0x800881 <_index.1885>
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <_twiMessageLen>
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	28 17       	cp	r18, r24
    38ac:	39 07       	cpc	r19, r25
    38ae:	24 f4       	brge	.+8      	; 0x38b8 <__vector_39+0xda>
    38b0:	85 ec       	ldi	r24, 0xC5	; 197
    38b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38b6:	3d c0       	rjmp	.+122    	; 0x3932 <__vector_39+0x154>
    38b8:	85 e8       	ldi	r24, 0x85	; 133
    38ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38be:	39 c0       	rjmp	.+114    	; 0x3932 <__vector_39+0x154>
    38c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    38c4:	e0 91 81 08 	lds	r30, 0x0881	; 0x800881 <_index.1885>
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	eb 57       	subi	r30, 0x7B	; 123
    38cc:	f7 4f       	sbci	r31, 0xF7	; 247
    38ce:	80 83       	st	Z, r24
    38d0:	84 e9       	ldi	r24, 0x94	; 148
    38d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38d6:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_twiCurrentHandler>
    38da:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_twiCurrentHandler+0x1>
    38de:	dc 01       	movw	r26, r24
    38e0:	12 96       	adiw	r26, 0x02	; 2
    38e2:	ed 91       	ld	r30, X+
    38e4:	fc 91       	ld	r31, X
    38e6:	13 97       	sbiw	r26, 0x03	; 3
    38e8:	30 97       	sbiw	r30, 0x00	; 0
    38ea:	19 f1       	breq	.+70     	; 0x3932 <__vector_39+0x154>
    38ec:	20 91 84 08 	lds	r18, 0x0884	; 0x800884 <_twiMessageLen>
    38f0:	45 e8       	ldi	r20, 0x85	; 133
    38f2:	58 e0       	ldi	r21, 0x08	; 8
    38f4:	65 e0       	ldi	r22, 0x05	; 5
    38f6:	19 95       	eicall
    38f8:	1c c0       	rjmp	.+56     	; 0x3932 <__vector_39+0x154>
    38fa:	85 ea       	ldi	r24, 0xA5	; 165
    38fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3900:	18 c0       	rjmp	.+48     	; 0x3932 <__vector_39+0x154>
    3902:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3906:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_twiCurrentState>
    390a:	84 e0       	ldi	r24, 0x04	; 4
    390c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3910:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_twiCurrentHandler>
    3914:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_twiCurrentHandler+0x1>
    3918:	dc 01       	movw	r26, r24
    391a:	12 96       	adiw	r26, 0x02	; 2
    391c:	ed 91       	ld	r30, X+
    391e:	fc 91       	ld	r31, X
    3920:	13 97       	sbiw	r26, 0x03	; 3
    3922:	30 97       	sbiw	r30, 0x00	; 0
    3924:	31 f0       	breq	.+12     	; 0x3932 <__vector_39+0x154>
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	50 e0       	ldi	r21, 0x00	; 0
    392c:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_twiCurrentState>
    3930:	19 95       	eicall
    3932:	ff 91       	pop	r31
    3934:	ef 91       	pop	r30
    3936:	bf 91       	pop	r27
    3938:	af 91       	pop	r26
    393a:	9f 91       	pop	r25
    393c:	8f 91       	pop	r24
    393e:	7f 91       	pop	r23
    3940:	6f 91       	pop	r22
    3942:	5f 91       	pop	r21
    3944:	4f 91       	pop	r20
    3946:	3f 91       	pop	r19
    3948:	2f 91       	pop	r18
    394a:	0f 90       	pop	r0
    394c:	0b be       	out	0x3b, r0	; 59
    394e:	0f 90       	pop	r0
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	0f 90       	pop	r0
    3954:	1f 90       	pop	r1
    3956:	18 95       	reti

00003958 <__tablejump2__>:
    3958:	ee 0f       	add	r30, r30
    395a:	ff 1f       	adc	r31, r31
    395c:	88 1f       	adc	r24, r24
    395e:	8b bf       	out	0x3b, r24	; 59
    3960:	07 90       	elpm	r0, Z+
    3962:	f6 91       	elpm	r31, Z
    3964:	e0 2d       	mov	r30, r0
    3966:	19 94       	eijmp

00003968 <__subsf3>:
    3968:	50 58       	subi	r21, 0x80	; 128

0000396a <__addsf3>:
    396a:	bb 27       	eor	r27, r27
    396c:	aa 27       	eor	r26, r26
    396e:	0e d0       	rcall	.+28     	; 0x398c <__addsf3x>
    3970:	48 c1       	rjmp	.+656    	; 0x3c02 <__fp_round>
    3972:	39 d1       	rcall	.+626    	; 0x3be6 <__fp_pscA>
    3974:	30 f0       	brcs	.+12     	; 0x3982 <__addsf3+0x18>
    3976:	3e d1       	rcall	.+636    	; 0x3bf4 <__fp_pscB>
    3978:	20 f0       	brcs	.+8      	; 0x3982 <__addsf3+0x18>
    397a:	31 f4       	brne	.+12     	; 0x3988 <__addsf3+0x1e>
    397c:	9f 3f       	cpi	r25, 0xFF	; 255
    397e:	11 f4       	brne	.+4      	; 0x3984 <__addsf3+0x1a>
    3980:	1e f4       	brtc	.+6      	; 0x3988 <__addsf3+0x1e>
    3982:	2e c1       	rjmp	.+604    	; 0x3be0 <__fp_nan>
    3984:	0e f4       	brtc	.+2      	; 0x3988 <__addsf3+0x1e>
    3986:	e0 95       	com	r30
    3988:	e7 fb       	bst	r30, 7
    398a:	24 c1       	rjmp	.+584    	; 0x3bd4 <__fp_inf>

0000398c <__addsf3x>:
    398c:	e9 2f       	mov	r30, r25
    398e:	4a d1       	rcall	.+660    	; 0x3c24 <__fp_split3>
    3990:	80 f3       	brcs	.-32     	; 0x3972 <__addsf3+0x8>
    3992:	ba 17       	cp	r27, r26
    3994:	62 07       	cpc	r22, r18
    3996:	73 07       	cpc	r23, r19
    3998:	84 07       	cpc	r24, r20
    399a:	95 07       	cpc	r25, r21
    399c:	18 f0       	brcs	.+6      	; 0x39a4 <__addsf3x+0x18>
    399e:	71 f4       	brne	.+28     	; 0x39bc <__addsf3x+0x30>
    39a0:	9e f5       	brtc	.+102    	; 0x3a08 <__addsf3x+0x7c>
    39a2:	62 c1       	rjmp	.+708    	; 0x3c68 <__fp_zero>
    39a4:	0e f4       	brtc	.+2      	; 0x39a8 <__addsf3x+0x1c>
    39a6:	e0 95       	com	r30
    39a8:	0b 2e       	mov	r0, r27
    39aa:	ba 2f       	mov	r27, r26
    39ac:	a0 2d       	mov	r26, r0
    39ae:	0b 01       	movw	r0, r22
    39b0:	b9 01       	movw	r22, r18
    39b2:	90 01       	movw	r18, r0
    39b4:	0c 01       	movw	r0, r24
    39b6:	ca 01       	movw	r24, r20
    39b8:	a0 01       	movw	r20, r0
    39ba:	11 24       	eor	r1, r1
    39bc:	ff 27       	eor	r31, r31
    39be:	59 1b       	sub	r21, r25
    39c0:	99 f0       	breq	.+38     	; 0x39e8 <__addsf3x+0x5c>
    39c2:	59 3f       	cpi	r21, 0xF9	; 249
    39c4:	50 f4       	brcc	.+20     	; 0x39da <__addsf3x+0x4e>
    39c6:	50 3e       	cpi	r21, 0xE0	; 224
    39c8:	68 f1       	brcs	.+90     	; 0x3a24 <__addsf3x+0x98>
    39ca:	1a 16       	cp	r1, r26
    39cc:	f0 40       	sbci	r31, 0x00	; 0
    39ce:	a2 2f       	mov	r26, r18
    39d0:	23 2f       	mov	r18, r19
    39d2:	34 2f       	mov	r19, r20
    39d4:	44 27       	eor	r20, r20
    39d6:	58 5f       	subi	r21, 0xF8	; 248
    39d8:	f3 cf       	rjmp	.-26     	; 0x39c0 <__addsf3x+0x34>
    39da:	46 95       	lsr	r20
    39dc:	37 95       	ror	r19
    39de:	27 95       	ror	r18
    39e0:	a7 95       	ror	r26
    39e2:	f0 40       	sbci	r31, 0x00	; 0
    39e4:	53 95       	inc	r21
    39e6:	c9 f7       	brne	.-14     	; 0x39da <__addsf3x+0x4e>
    39e8:	7e f4       	brtc	.+30     	; 0x3a08 <__addsf3x+0x7c>
    39ea:	1f 16       	cp	r1, r31
    39ec:	ba 0b       	sbc	r27, r26
    39ee:	62 0b       	sbc	r22, r18
    39f0:	73 0b       	sbc	r23, r19
    39f2:	84 0b       	sbc	r24, r20
    39f4:	ba f0       	brmi	.+46     	; 0x3a24 <__addsf3x+0x98>
    39f6:	91 50       	subi	r25, 0x01	; 1
    39f8:	a1 f0       	breq	.+40     	; 0x3a22 <__addsf3x+0x96>
    39fa:	ff 0f       	add	r31, r31
    39fc:	bb 1f       	adc	r27, r27
    39fe:	66 1f       	adc	r22, r22
    3a00:	77 1f       	adc	r23, r23
    3a02:	88 1f       	adc	r24, r24
    3a04:	c2 f7       	brpl	.-16     	; 0x39f6 <__addsf3x+0x6a>
    3a06:	0e c0       	rjmp	.+28     	; 0x3a24 <__addsf3x+0x98>
    3a08:	ba 0f       	add	r27, r26
    3a0a:	62 1f       	adc	r22, r18
    3a0c:	73 1f       	adc	r23, r19
    3a0e:	84 1f       	adc	r24, r20
    3a10:	48 f4       	brcc	.+18     	; 0x3a24 <__addsf3x+0x98>
    3a12:	87 95       	ror	r24
    3a14:	77 95       	ror	r23
    3a16:	67 95       	ror	r22
    3a18:	b7 95       	ror	r27
    3a1a:	f7 95       	ror	r31
    3a1c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a1e:	08 f0       	brcs	.+2      	; 0x3a22 <__addsf3x+0x96>
    3a20:	b3 cf       	rjmp	.-154    	; 0x3988 <__addsf3+0x1e>
    3a22:	93 95       	inc	r25
    3a24:	88 0f       	add	r24, r24
    3a26:	08 f0       	brcs	.+2      	; 0x3a2a <__addsf3x+0x9e>
    3a28:	99 27       	eor	r25, r25
    3a2a:	ee 0f       	add	r30, r30
    3a2c:	97 95       	ror	r25
    3a2e:	87 95       	ror	r24
    3a30:	08 95       	ret

00003a32 <__divsf3>:
    3a32:	0c d0       	rcall	.+24     	; 0x3a4c <__divsf3x>
    3a34:	e6 c0       	rjmp	.+460    	; 0x3c02 <__fp_round>
    3a36:	de d0       	rcall	.+444    	; 0x3bf4 <__fp_pscB>
    3a38:	40 f0       	brcs	.+16     	; 0x3a4a <__divsf3+0x18>
    3a3a:	d5 d0       	rcall	.+426    	; 0x3be6 <__fp_pscA>
    3a3c:	30 f0       	brcs	.+12     	; 0x3a4a <__divsf3+0x18>
    3a3e:	21 f4       	brne	.+8      	; 0x3a48 <__divsf3+0x16>
    3a40:	5f 3f       	cpi	r21, 0xFF	; 255
    3a42:	19 f0       	breq	.+6      	; 0x3a4a <__divsf3+0x18>
    3a44:	c7 c0       	rjmp	.+398    	; 0x3bd4 <__fp_inf>
    3a46:	51 11       	cpse	r21, r1
    3a48:	10 c1       	rjmp	.+544    	; 0x3c6a <__fp_szero>
    3a4a:	ca c0       	rjmp	.+404    	; 0x3be0 <__fp_nan>

00003a4c <__divsf3x>:
    3a4c:	eb d0       	rcall	.+470    	; 0x3c24 <__fp_split3>
    3a4e:	98 f3       	brcs	.-26     	; 0x3a36 <__divsf3+0x4>

00003a50 <__divsf3_pse>:
    3a50:	99 23       	and	r25, r25
    3a52:	c9 f3       	breq	.-14     	; 0x3a46 <__divsf3+0x14>
    3a54:	55 23       	and	r21, r21
    3a56:	b1 f3       	breq	.-20     	; 0x3a44 <__divsf3+0x12>
    3a58:	95 1b       	sub	r25, r21
    3a5a:	55 0b       	sbc	r21, r21
    3a5c:	bb 27       	eor	r27, r27
    3a5e:	aa 27       	eor	r26, r26
    3a60:	62 17       	cp	r22, r18
    3a62:	73 07       	cpc	r23, r19
    3a64:	84 07       	cpc	r24, r20
    3a66:	38 f0       	brcs	.+14     	; 0x3a76 <__divsf3_pse+0x26>
    3a68:	9f 5f       	subi	r25, 0xFF	; 255
    3a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a6c:	22 0f       	add	r18, r18
    3a6e:	33 1f       	adc	r19, r19
    3a70:	44 1f       	adc	r20, r20
    3a72:	aa 1f       	adc	r26, r26
    3a74:	a9 f3       	breq	.-22     	; 0x3a60 <__divsf3_pse+0x10>
    3a76:	33 d0       	rcall	.+102    	; 0x3ade <__divsf3_pse+0x8e>
    3a78:	0e 2e       	mov	r0, r30
    3a7a:	3a f0       	brmi	.+14     	; 0x3a8a <__divsf3_pse+0x3a>
    3a7c:	e0 e8       	ldi	r30, 0x80	; 128
    3a7e:	30 d0       	rcall	.+96     	; 0x3ae0 <__divsf3_pse+0x90>
    3a80:	91 50       	subi	r25, 0x01	; 1
    3a82:	50 40       	sbci	r21, 0x00	; 0
    3a84:	e6 95       	lsr	r30
    3a86:	00 1c       	adc	r0, r0
    3a88:	ca f7       	brpl	.-14     	; 0x3a7c <__divsf3_pse+0x2c>
    3a8a:	29 d0       	rcall	.+82     	; 0x3ade <__divsf3_pse+0x8e>
    3a8c:	fe 2f       	mov	r31, r30
    3a8e:	27 d0       	rcall	.+78     	; 0x3ade <__divsf3_pse+0x8e>
    3a90:	66 0f       	add	r22, r22
    3a92:	77 1f       	adc	r23, r23
    3a94:	88 1f       	adc	r24, r24
    3a96:	bb 1f       	adc	r27, r27
    3a98:	26 17       	cp	r18, r22
    3a9a:	37 07       	cpc	r19, r23
    3a9c:	48 07       	cpc	r20, r24
    3a9e:	ab 07       	cpc	r26, r27
    3aa0:	b0 e8       	ldi	r27, 0x80	; 128
    3aa2:	09 f0       	breq	.+2      	; 0x3aa6 <__divsf3_pse+0x56>
    3aa4:	bb 0b       	sbc	r27, r27
    3aa6:	80 2d       	mov	r24, r0
    3aa8:	bf 01       	movw	r22, r30
    3aaa:	ff 27       	eor	r31, r31
    3aac:	93 58       	subi	r25, 0x83	; 131
    3aae:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab0:	2a f0       	brmi	.+10     	; 0x3abc <__divsf3_pse+0x6c>
    3ab2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ab4:	51 05       	cpc	r21, r1
    3ab6:	68 f0       	brcs	.+26     	; 0x3ad2 <__divsf3_pse+0x82>
    3ab8:	8d c0       	rjmp	.+282    	; 0x3bd4 <__fp_inf>
    3aba:	d7 c0       	rjmp	.+430    	; 0x3c6a <__fp_szero>
    3abc:	5f 3f       	cpi	r21, 0xFF	; 255
    3abe:	ec f3       	brlt	.-6      	; 0x3aba <__divsf3_pse+0x6a>
    3ac0:	98 3e       	cpi	r25, 0xE8	; 232
    3ac2:	dc f3       	brlt	.-10     	; 0x3aba <__divsf3_pse+0x6a>
    3ac4:	86 95       	lsr	r24
    3ac6:	77 95       	ror	r23
    3ac8:	67 95       	ror	r22
    3aca:	b7 95       	ror	r27
    3acc:	f7 95       	ror	r31
    3ace:	9f 5f       	subi	r25, 0xFF	; 255
    3ad0:	c9 f7       	brne	.-14     	; 0x3ac4 <__divsf3_pse+0x74>
    3ad2:	88 0f       	add	r24, r24
    3ad4:	91 1d       	adc	r25, r1
    3ad6:	96 95       	lsr	r25
    3ad8:	87 95       	ror	r24
    3ada:	97 f9       	bld	r25, 7
    3adc:	08 95       	ret
    3ade:	e1 e0       	ldi	r30, 0x01	; 1
    3ae0:	66 0f       	add	r22, r22
    3ae2:	77 1f       	adc	r23, r23
    3ae4:	88 1f       	adc	r24, r24
    3ae6:	bb 1f       	adc	r27, r27
    3ae8:	62 17       	cp	r22, r18
    3aea:	73 07       	cpc	r23, r19
    3aec:	84 07       	cpc	r24, r20
    3aee:	ba 07       	cpc	r27, r26
    3af0:	20 f0       	brcs	.+8      	; 0x3afa <__divsf3_pse+0xaa>
    3af2:	62 1b       	sub	r22, r18
    3af4:	73 0b       	sbc	r23, r19
    3af6:	84 0b       	sbc	r24, r20
    3af8:	ba 0b       	sbc	r27, r26
    3afa:	ee 1f       	adc	r30, r30
    3afc:	88 f7       	brcc	.-30     	; 0x3ae0 <__divsf3_pse+0x90>
    3afe:	e0 95       	com	r30
    3b00:	08 95       	ret

00003b02 <__fixunssfsi>:
    3b02:	98 d0       	rcall	.+304    	; 0x3c34 <__fp_splitA>
    3b04:	88 f0       	brcs	.+34     	; 0x3b28 <__fixunssfsi+0x26>
    3b06:	9f 57       	subi	r25, 0x7F	; 127
    3b08:	90 f0       	brcs	.+36     	; 0x3b2e <__fixunssfsi+0x2c>
    3b0a:	b9 2f       	mov	r27, r25
    3b0c:	99 27       	eor	r25, r25
    3b0e:	b7 51       	subi	r27, 0x17	; 23
    3b10:	a0 f0       	brcs	.+40     	; 0x3b3a <__fixunssfsi+0x38>
    3b12:	d1 f0       	breq	.+52     	; 0x3b48 <__fixunssfsi+0x46>
    3b14:	66 0f       	add	r22, r22
    3b16:	77 1f       	adc	r23, r23
    3b18:	88 1f       	adc	r24, r24
    3b1a:	99 1f       	adc	r25, r25
    3b1c:	1a f0       	brmi	.+6      	; 0x3b24 <__fixunssfsi+0x22>
    3b1e:	ba 95       	dec	r27
    3b20:	c9 f7       	brne	.-14     	; 0x3b14 <__fixunssfsi+0x12>
    3b22:	12 c0       	rjmp	.+36     	; 0x3b48 <__fixunssfsi+0x46>
    3b24:	b1 30       	cpi	r27, 0x01	; 1
    3b26:	81 f0       	breq	.+32     	; 0x3b48 <__fixunssfsi+0x46>
    3b28:	9f d0       	rcall	.+318    	; 0x3c68 <__fp_zero>
    3b2a:	b1 e0       	ldi	r27, 0x01	; 1
    3b2c:	08 95       	ret
    3b2e:	9c c0       	rjmp	.+312    	; 0x3c68 <__fp_zero>
    3b30:	67 2f       	mov	r22, r23
    3b32:	78 2f       	mov	r23, r24
    3b34:	88 27       	eor	r24, r24
    3b36:	b8 5f       	subi	r27, 0xF8	; 248
    3b38:	39 f0       	breq	.+14     	; 0x3b48 <__fixunssfsi+0x46>
    3b3a:	b9 3f       	cpi	r27, 0xF9	; 249
    3b3c:	cc f3       	brlt	.-14     	; 0x3b30 <__fixunssfsi+0x2e>
    3b3e:	86 95       	lsr	r24
    3b40:	77 95       	ror	r23
    3b42:	67 95       	ror	r22
    3b44:	b3 95       	inc	r27
    3b46:	d9 f7       	brne	.-10     	; 0x3b3e <__fixunssfsi+0x3c>
    3b48:	3e f4       	brtc	.+14     	; 0x3b58 <__fixunssfsi+0x56>
    3b4a:	90 95       	com	r25
    3b4c:	80 95       	com	r24
    3b4e:	70 95       	com	r23
    3b50:	61 95       	neg	r22
    3b52:	7f 4f       	sbci	r23, 0xFF	; 255
    3b54:	8f 4f       	sbci	r24, 0xFF	; 255
    3b56:	9f 4f       	sbci	r25, 0xFF	; 255
    3b58:	08 95       	ret

00003b5a <__floatunsisf>:
    3b5a:	e8 94       	clt
    3b5c:	09 c0       	rjmp	.+18     	; 0x3b70 <__floatsisf+0x12>

00003b5e <__floatsisf>:
    3b5e:	97 fb       	bst	r25, 7
    3b60:	3e f4       	brtc	.+14     	; 0x3b70 <__floatsisf+0x12>
    3b62:	90 95       	com	r25
    3b64:	80 95       	com	r24
    3b66:	70 95       	com	r23
    3b68:	61 95       	neg	r22
    3b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b70:	99 23       	and	r25, r25
    3b72:	a9 f0       	breq	.+42     	; 0x3b9e <__floatsisf+0x40>
    3b74:	f9 2f       	mov	r31, r25
    3b76:	96 e9       	ldi	r25, 0x96	; 150
    3b78:	bb 27       	eor	r27, r27
    3b7a:	93 95       	inc	r25
    3b7c:	f6 95       	lsr	r31
    3b7e:	87 95       	ror	r24
    3b80:	77 95       	ror	r23
    3b82:	67 95       	ror	r22
    3b84:	b7 95       	ror	r27
    3b86:	f1 11       	cpse	r31, r1
    3b88:	f8 cf       	rjmp	.-16     	; 0x3b7a <__floatsisf+0x1c>
    3b8a:	fa f4       	brpl	.+62     	; 0x3bca <__floatsisf+0x6c>
    3b8c:	bb 0f       	add	r27, r27
    3b8e:	11 f4       	brne	.+4      	; 0x3b94 <__floatsisf+0x36>
    3b90:	60 ff       	sbrs	r22, 0
    3b92:	1b c0       	rjmp	.+54     	; 0x3bca <__floatsisf+0x6c>
    3b94:	6f 5f       	subi	r22, 0xFF	; 255
    3b96:	7f 4f       	sbci	r23, 0xFF	; 255
    3b98:	8f 4f       	sbci	r24, 0xFF	; 255
    3b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9c:	16 c0       	rjmp	.+44     	; 0x3bca <__floatsisf+0x6c>
    3b9e:	88 23       	and	r24, r24
    3ba0:	11 f0       	breq	.+4      	; 0x3ba6 <__floatsisf+0x48>
    3ba2:	96 e9       	ldi	r25, 0x96	; 150
    3ba4:	11 c0       	rjmp	.+34     	; 0x3bc8 <__floatsisf+0x6a>
    3ba6:	77 23       	and	r23, r23
    3ba8:	21 f0       	breq	.+8      	; 0x3bb2 <__floatsisf+0x54>
    3baa:	9e e8       	ldi	r25, 0x8E	; 142
    3bac:	87 2f       	mov	r24, r23
    3bae:	76 2f       	mov	r23, r22
    3bb0:	05 c0       	rjmp	.+10     	; 0x3bbc <__floatsisf+0x5e>
    3bb2:	66 23       	and	r22, r22
    3bb4:	71 f0       	breq	.+28     	; 0x3bd2 <__floatsisf+0x74>
    3bb6:	96 e8       	ldi	r25, 0x86	; 134
    3bb8:	86 2f       	mov	r24, r22
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	2a f0       	brmi	.+10     	; 0x3bca <__floatsisf+0x6c>
    3bc0:	9a 95       	dec	r25
    3bc2:	66 0f       	add	r22, r22
    3bc4:	77 1f       	adc	r23, r23
    3bc6:	88 1f       	adc	r24, r24
    3bc8:	da f7       	brpl	.-10     	; 0x3bc0 <__floatsisf+0x62>
    3bca:	88 0f       	add	r24, r24
    3bcc:	96 95       	lsr	r25
    3bce:	87 95       	ror	r24
    3bd0:	97 f9       	bld	r25, 7
    3bd2:	08 95       	ret

00003bd4 <__fp_inf>:
    3bd4:	97 f9       	bld	r25, 7
    3bd6:	9f 67       	ori	r25, 0x7F	; 127
    3bd8:	80 e8       	ldi	r24, 0x80	; 128
    3bda:	70 e0       	ldi	r23, 0x00	; 0
    3bdc:	60 e0       	ldi	r22, 0x00	; 0
    3bde:	08 95       	ret

00003be0 <__fp_nan>:
    3be0:	9f ef       	ldi	r25, 0xFF	; 255
    3be2:	80 ec       	ldi	r24, 0xC0	; 192
    3be4:	08 95       	ret

00003be6 <__fp_pscA>:
    3be6:	00 24       	eor	r0, r0
    3be8:	0a 94       	dec	r0
    3bea:	16 16       	cp	r1, r22
    3bec:	17 06       	cpc	r1, r23
    3bee:	18 06       	cpc	r1, r24
    3bf0:	09 06       	cpc	r0, r25
    3bf2:	08 95       	ret

00003bf4 <__fp_pscB>:
    3bf4:	00 24       	eor	r0, r0
    3bf6:	0a 94       	dec	r0
    3bf8:	12 16       	cp	r1, r18
    3bfa:	13 06       	cpc	r1, r19
    3bfc:	14 06       	cpc	r1, r20
    3bfe:	05 06       	cpc	r0, r21
    3c00:	08 95       	ret

00003c02 <__fp_round>:
    3c02:	09 2e       	mov	r0, r25
    3c04:	03 94       	inc	r0
    3c06:	00 0c       	add	r0, r0
    3c08:	11 f4       	brne	.+4      	; 0x3c0e <__fp_round+0xc>
    3c0a:	88 23       	and	r24, r24
    3c0c:	52 f0       	brmi	.+20     	; 0x3c22 <__fp_round+0x20>
    3c0e:	bb 0f       	add	r27, r27
    3c10:	40 f4       	brcc	.+16     	; 0x3c22 <__fp_round+0x20>
    3c12:	bf 2b       	or	r27, r31
    3c14:	11 f4       	brne	.+4      	; 0x3c1a <__fp_round+0x18>
    3c16:	60 ff       	sbrs	r22, 0
    3c18:	04 c0       	rjmp	.+8      	; 0x3c22 <__fp_round+0x20>
    3c1a:	6f 5f       	subi	r22, 0xFF	; 255
    3c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c20:	9f 4f       	sbci	r25, 0xFF	; 255
    3c22:	08 95       	ret

00003c24 <__fp_split3>:
    3c24:	57 fd       	sbrc	r21, 7
    3c26:	90 58       	subi	r25, 0x80	; 128
    3c28:	44 0f       	add	r20, r20
    3c2a:	55 1f       	adc	r21, r21
    3c2c:	59 f0       	breq	.+22     	; 0x3c44 <__fp_splitA+0x10>
    3c2e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c30:	71 f0       	breq	.+28     	; 0x3c4e <__fp_splitA+0x1a>
    3c32:	47 95       	ror	r20

00003c34 <__fp_splitA>:
    3c34:	88 0f       	add	r24, r24
    3c36:	97 fb       	bst	r25, 7
    3c38:	99 1f       	adc	r25, r25
    3c3a:	61 f0       	breq	.+24     	; 0x3c54 <__fp_splitA+0x20>
    3c3c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c3e:	79 f0       	breq	.+30     	; 0x3c5e <__fp_splitA+0x2a>
    3c40:	87 95       	ror	r24
    3c42:	08 95       	ret
    3c44:	12 16       	cp	r1, r18
    3c46:	13 06       	cpc	r1, r19
    3c48:	14 06       	cpc	r1, r20
    3c4a:	55 1f       	adc	r21, r21
    3c4c:	f2 cf       	rjmp	.-28     	; 0x3c32 <__fp_split3+0xe>
    3c4e:	46 95       	lsr	r20
    3c50:	f1 df       	rcall	.-30     	; 0x3c34 <__fp_splitA>
    3c52:	08 c0       	rjmp	.+16     	; 0x3c64 <__fp_splitA+0x30>
    3c54:	16 16       	cp	r1, r22
    3c56:	17 06       	cpc	r1, r23
    3c58:	18 06       	cpc	r1, r24
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	f1 cf       	rjmp	.-30     	; 0x3c40 <__fp_splitA+0xc>
    3c5e:	86 95       	lsr	r24
    3c60:	71 05       	cpc	r23, r1
    3c62:	61 05       	cpc	r22, r1
    3c64:	08 94       	sec
    3c66:	08 95       	ret

00003c68 <__fp_zero>:
    3c68:	e8 94       	clt

00003c6a <__fp_szero>:
    3c6a:	bb 27       	eor	r27, r27
    3c6c:	66 27       	eor	r22, r22
    3c6e:	77 27       	eor	r23, r23
    3c70:	cb 01       	movw	r24, r22
    3c72:	97 f9       	bld	r25, 7
    3c74:	08 95       	ret

00003c76 <__mulsf3>:
    3c76:	0b d0       	rcall	.+22     	; 0x3c8e <__mulsf3x>
    3c78:	c4 cf       	rjmp	.-120    	; 0x3c02 <__fp_round>
    3c7a:	b5 df       	rcall	.-150    	; 0x3be6 <__fp_pscA>
    3c7c:	28 f0       	brcs	.+10     	; 0x3c88 <__mulsf3+0x12>
    3c7e:	ba df       	rcall	.-140    	; 0x3bf4 <__fp_pscB>
    3c80:	18 f0       	brcs	.+6      	; 0x3c88 <__mulsf3+0x12>
    3c82:	95 23       	and	r25, r21
    3c84:	09 f0       	breq	.+2      	; 0x3c88 <__mulsf3+0x12>
    3c86:	a6 cf       	rjmp	.-180    	; 0x3bd4 <__fp_inf>
    3c88:	ab cf       	rjmp	.-170    	; 0x3be0 <__fp_nan>
    3c8a:	11 24       	eor	r1, r1
    3c8c:	ee cf       	rjmp	.-36     	; 0x3c6a <__fp_szero>

00003c8e <__mulsf3x>:
    3c8e:	ca df       	rcall	.-108    	; 0x3c24 <__fp_split3>
    3c90:	a0 f3       	brcs	.-24     	; 0x3c7a <__mulsf3+0x4>

00003c92 <__mulsf3_pse>:
    3c92:	95 9f       	mul	r25, r21
    3c94:	d1 f3       	breq	.-12     	; 0x3c8a <__mulsf3+0x14>
    3c96:	95 0f       	add	r25, r21
    3c98:	50 e0       	ldi	r21, 0x00	; 0
    3c9a:	55 1f       	adc	r21, r21
    3c9c:	62 9f       	mul	r22, r18
    3c9e:	f0 01       	movw	r30, r0
    3ca0:	72 9f       	mul	r23, r18
    3ca2:	bb 27       	eor	r27, r27
    3ca4:	f0 0d       	add	r31, r0
    3ca6:	b1 1d       	adc	r27, r1
    3ca8:	63 9f       	mul	r22, r19
    3caa:	aa 27       	eor	r26, r26
    3cac:	f0 0d       	add	r31, r0
    3cae:	b1 1d       	adc	r27, r1
    3cb0:	aa 1f       	adc	r26, r26
    3cb2:	64 9f       	mul	r22, r20
    3cb4:	66 27       	eor	r22, r22
    3cb6:	b0 0d       	add	r27, r0
    3cb8:	a1 1d       	adc	r26, r1
    3cba:	66 1f       	adc	r22, r22
    3cbc:	82 9f       	mul	r24, r18
    3cbe:	22 27       	eor	r18, r18
    3cc0:	b0 0d       	add	r27, r0
    3cc2:	a1 1d       	adc	r26, r1
    3cc4:	62 1f       	adc	r22, r18
    3cc6:	73 9f       	mul	r23, r19
    3cc8:	b0 0d       	add	r27, r0
    3cca:	a1 1d       	adc	r26, r1
    3ccc:	62 1f       	adc	r22, r18
    3cce:	83 9f       	mul	r24, r19
    3cd0:	a0 0d       	add	r26, r0
    3cd2:	61 1d       	adc	r22, r1
    3cd4:	22 1f       	adc	r18, r18
    3cd6:	74 9f       	mul	r23, r20
    3cd8:	33 27       	eor	r19, r19
    3cda:	a0 0d       	add	r26, r0
    3cdc:	61 1d       	adc	r22, r1
    3cde:	23 1f       	adc	r18, r19
    3ce0:	84 9f       	mul	r24, r20
    3ce2:	60 0d       	add	r22, r0
    3ce4:	21 1d       	adc	r18, r1
    3ce6:	82 2f       	mov	r24, r18
    3ce8:	76 2f       	mov	r23, r22
    3cea:	6a 2f       	mov	r22, r26
    3cec:	11 24       	eor	r1, r1
    3cee:	9f 57       	subi	r25, 0x7F	; 127
    3cf0:	50 40       	sbci	r21, 0x00	; 0
    3cf2:	8a f0       	brmi	.+34     	; 0x3d16 <__mulsf3_pse+0x84>
    3cf4:	e1 f0       	breq	.+56     	; 0x3d2e <__mulsf3_pse+0x9c>
    3cf6:	88 23       	and	r24, r24
    3cf8:	4a f0       	brmi	.+18     	; 0x3d0c <__mulsf3_pse+0x7a>
    3cfa:	ee 0f       	add	r30, r30
    3cfc:	ff 1f       	adc	r31, r31
    3cfe:	bb 1f       	adc	r27, r27
    3d00:	66 1f       	adc	r22, r22
    3d02:	77 1f       	adc	r23, r23
    3d04:	88 1f       	adc	r24, r24
    3d06:	91 50       	subi	r25, 0x01	; 1
    3d08:	50 40       	sbci	r21, 0x00	; 0
    3d0a:	a9 f7       	brne	.-22     	; 0x3cf6 <__mulsf3_pse+0x64>
    3d0c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d0e:	51 05       	cpc	r21, r1
    3d10:	70 f0       	brcs	.+28     	; 0x3d2e <__mulsf3_pse+0x9c>
    3d12:	60 cf       	rjmp	.-320    	; 0x3bd4 <__fp_inf>
    3d14:	aa cf       	rjmp	.-172    	; 0x3c6a <__fp_szero>
    3d16:	5f 3f       	cpi	r21, 0xFF	; 255
    3d18:	ec f3       	brlt	.-6      	; 0x3d14 <__mulsf3_pse+0x82>
    3d1a:	98 3e       	cpi	r25, 0xE8	; 232
    3d1c:	dc f3       	brlt	.-10     	; 0x3d14 <__mulsf3_pse+0x82>
    3d1e:	86 95       	lsr	r24
    3d20:	77 95       	ror	r23
    3d22:	67 95       	ror	r22
    3d24:	b7 95       	ror	r27
    3d26:	f7 95       	ror	r31
    3d28:	e7 95       	ror	r30
    3d2a:	9f 5f       	subi	r25, 0xFF	; 255
    3d2c:	c1 f7       	brne	.-16     	; 0x3d1e <__mulsf3_pse+0x8c>
    3d2e:	fe 2b       	or	r31, r30
    3d30:	88 0f       	add	r24, r24
    3d32:	91 1d       	adc	r25, r1
    3d34:	96 95       	lsr	r25
    3d36:	87 95       	ror	r24
    3d38:	97 f9       	bld	r25, 7
    3d3a:	08 95       	ret

00003d3c <calloc>:
    3d3c:	0f 93       	push	r16
    3d3e:	1f 93       	push	r17
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    3d44:	86 9f       	mul	r24, r22
    3d46:	80 01       	movw	r16, r0
    3d48:	87 9f       	mul	r24, r23
    3d4a:	10 0d       	add	r17, r0
    3d4c:	96 9f       	mul	r25, r22
    3d4e:	10 0d       	add	r17, r0
    3d50:	11 24       	eor	r1, r1
    3d52:	c8 01       	movw	r24, r16
    3d54:	0d d0       	rcall	.+26     	; 0x3d70 <malloc>
    3d56:	ec 01       	movw	r28, r24
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	21 f0       	breq	.+8      	; 0x3d64 <calloc+0x28>
    3d5c:	a8 01       	movw	r20, r16
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	34 d1       	rcall	.+616    	; 0x3fcc <memset>
    3d64:	ce 01       	movw	r24, r28
    3d66:	df 91       	pop	r29
    3d68:	cf 91       	pop	r28
    3d6a:	1f 91       	pop	r17
    3d6c:	0f 91       	pop	r16
    3d6e:	08 95       	ret

00003d70 <malloc>:
    3d70:	0f 93       	push	r16
    3d72:	1f 93       	push	r17
    3d74:	cf 93       	push	r28
    3d76:	df 93       	push	r29
    3d78:	82 30       	cpi	r24, 0x02	; 2
    3d7a:	91 05       	cpc	r25, r1
    3d7c:	10 f4       	brcc	.+4      	; 0x3d82 <malloc+0x12>
    3d7e:	82 e0       	ldi	r24, 0x02	; 2
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	e0 91 a7 08 	lds	r30, 0x08A7	; 0x8008a7 <__flp>
    3d86:	f0 91 a8 08 	lds	r31, 0x08A8	; 0x8008a8 <__flp+0x1>
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	a0 e0       	ldi	r26, 0x00	; 0
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	30 97       	sbiw	r30, 0x00	; 0
    3d94:	19 f1       	breq	.+70     	; 0x3ddc <malloc+0x6c>
    3d96:	40 81       	ld	r20, Z
    3d98:	51 81       	ldd	r21, Z+1	; 0x01
    3d9a:	02 81       	ldd	r16, Z+2	; 0x02
    3d9c:	13 81       	ldd	r17, Z+3	; 0x03
    3d9e:	48 17       	cp	r20, r24
    3da0:	59 07       	cpc	r21, r25
    3da2:	c8 f0       	brcs	.+50     	; 0x3dd6 <malloc+0x66>
    3da4:	84 17       	cp	r24, r20
    3da6:	95 07       	cpc	r25, r21
    3da8:	69 f4       	brne	.+26     	; 0x3dc4 <malloc+0x54>
    3daa:	10 97       	sbiw	r26, 0x00	; 0
    3dac:	31 f0       	breq	.+12     	; 0x3dba <malloc+0x4a>
    3dae:	12 96       	adiw	r26, 0x02	; 2
    3db0:	0c 93       	st	X, r16
    3db2:	12 97       	sbiw	r26, 0x02	; 2
    3db4:	13 96       	adiw	r26, 0x03	; 3
    3db6:	1c 93       	st	X, r17
    3db8:	27 c0       	rjmp	.+78     	; 0x3e08 <malloc+0x98>
    3dba:	00 93 a7 08 	sts	0x08A7, r16	; 0x8008a7 <__flp>
    3dbe:	10 93 a8 08 	sts	0x08A8, r17	; 0x8008a8 <__flp+0x1>
    3dc2:	22 c0       	rjmp	.+68     	; 0x3e08 <malloc+0x98>
    3dc4:	21 15       	cp	r18, r1
    3dc6:	31 05       	cpc	r19, r1
    3dc8:	19 f0       	breq	.+6      	; 0x3dd0 <malloc+0x60>
    3dca:	42 17       	cp	r20, r18
    3dcc:	53 07       	cpc	r21, r19
    3dce:	18 f4       	brcc	.+6      	; 0x3dd6 <malloc+0x66>
    3dd0:	9a 01       	movw	r18, r20
    3dd2:	bd 01       	movw	r22, r26
    3dd4:	ef 01       	movw	r28, r30
    3dd6:	df 01       	movw	r26, r30
    3dd8:	f8 01       	movw	r30, r16
    3dda:	db cf       	rjmp	.-74     	; 0x3d92 <malloc+0x22>
    3ddc:	21 15       	cp	r18, r1
    3dde:	31 05       	cpc	r19, r1
    3de0:	f9 f0       	breq	.+62     	; 0x3e20 <malloc+0xb0>
    3de2:	28 1b       	sub	r18, r24
    3de4:	39 0b       	sbc	r19, r25
    3de6:	24 30       	cpi	r18, 0x04	; 4
    3de8:	31 05       	cpc	r19, r1
    3dea:	80 f4       	brcc	.+32     	; 0x3e0c <malloc+0x9c>
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	9b 81       	ldd	r25, Y+3	; 0x03
    3df0:	61 15       	cp	r22, r1
    3df2:	71 05       	cpc	r23, r1
    3df4:	21 f0       	breq	.+8      	; 0x3dfe <malloc+0x8e>
    3df6:	fb 01       	movw	r30, r22
    3df8:	93 83       	std	Z+3, r25	; 0x03
    3dfa:	82 83       	std	Z+2, r24	; 0x02
    3dfc:	04 c0       	rjmp	.+8      	; 0x3e06 <malloc+0x96>
    3dfe:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <__flp+0x1>
    3e02:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__flp>
    3e06:	fe 01       	movw	r30, r28
    3e08:	32 96       	adiw	r30, 0x02	; 2
    3e0a:	44 c0       	rjmp	.+136    	; 0x3e94 <malloc+0x124>
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e2 0f       	add	r30, r18
    3e10:	f3 1f       	adc	r31, r19
    3e12:	81 93       	st	Z+, r24
    3e14:	91 93       	st	Z+, r25
    3e16:	22 50       	subi	r18, 0x02	; 2
    3e18:	31 09       	sbc	r19, r1
    3e1a:	39 83       	std	Y+1, r19	; 0x01
    3e1c:	28 83       	st	Y, r18
    3e1e:	3a c0       	rjmp	.+116    	; 0x3e94 <malloc+0x124>
    3e20:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <__brkval>
    3e24:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3e28:	23 2b       	or	r18, r19
    3e2a:	41 f4       	brne	.+16     	; 0x3e3c <malloc+0xcc>
    3e2c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3e30:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3e34:	30 93 a6 08 	sts	0x08A6, r19	; 0x8008a6 <__brkval+0x1>
    3e38:	20 93 a5 08 	sts	0x08A5, r18	; 0x8008a5 <__brkval>
    3e3c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3e40:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3e44:	21 15       	cp	r18, r1
    3e46:	31 05       	cpc	r19, r1
    3e48:	41 f4       	brne	.+16     	; 0x3e5a <malloc+0xea>
    3e4a:	2d b7       	in	r18, 0x3d	; 61
    3e4c:	3e b7       	in	r19, 0x3e	; 62
    3e4e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3e52:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3e56:	24 1b       	sub	r18, r20
    3e58:	35 0b       	sbc	r19, r21
    3e5a:	e0 91 a5 08 	lds	r30, 0x08A5	; 0x8008a5 <__brkval>
    3e5e:	f0 91 a6 08 	lds	r31, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3e62:	e2 17       	cp	r30, r18
    3e64:	f3 07       	cpc	r31, r19
    3e66:	a0 f4       	brcc	.+40     	; 0x3e90 <malloc+0x120>
    3e68:	2e 1b       	sub	r18, r30
    3e6a:	3f 0b       	sbc	r19, r31
    3e6c:	28 17       	cp	r18, r24
    3e6e:	39 07       	cpc	r19, r25
    3e70:	78 f0       	brcs	.+30     	; 0x3e90 <malloc+0x120>
    3e72:	ac 01       	movw	r20, r24
    3e74:	4e 5f       	subi	r20, 0xFE	; 254
    3e76:	5f 4f       	sbci	r21, 0xFF	; 255
    3e78:	24 17       	cp	r18, r20
    3e7a:	35 07       	cpc	r19, r21
    3e7c:	48 f0       	brcs	.+18     	; 0x3e90 <malloc+0x120>
    3e7e:	4e 0f       	add	r20, r30
    3e80:	5f 1f       	adc	r21, r31
    3e82:	50 93 a6 08 	sts	0x08A6, r21	; 0x8008a6 <__brkval+0x1>
    3e86:	40 93 a5 08 	sts	0x08A5, r20	; 0x8008a5 <__brkval>
    3e8a:	81 93       	st	Z+, r24
    3e8c:	91 93       	st	Z+, r25
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <malloc+0x124>
    3e90:	e0 e0       	ldi	r30, 0x00	; 0
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	cf 01       	movw	r24, r30
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	1f 91       	pop	r17
    3e9c:	0f 91       	pop	r16
    3e9e:	08 95       	ret

00003ea0 <free>:
    3ea0:	cf 93       	push	r28
    3ea2:	df 93       	push	r29
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	09 f4       	brne	.+2      	; 0x3eaa <free+0xa>
    3ea8:	81 c0       	rjmp	.+258    	; 0x3fac <free+0x10c>
    3eaa:	fc 01       	movw	r30, r24
    3eac:	32 97       	sbiw	r30, 0x02	; 2
    3eae:	13 82       	std	Z+3, r1	; 0x03
    3eb0:	12 82       	std	Z+2, r1	; 0x02
    3eb2:	a0 91 a7 08 	lds	r26, 0x08A7	; 0x8008a7 <__flp>
    3eb6:	b0 91 a8 08 	lds	r27, 0x08A8	; 0x8008a8 <__flp+0x1>
    3eba:	10 97       	sbiw	r26, 0x00	; 0
    3ebc:	81 f4       	brne	.+32     	; 0x3ede <free+0x3e>
    3ebe:	20 81       	ld	r18, Z
    3ec0:	31 81       	ldd	r19, Z+1	; 0x01
    3ec2:	82 0f       	add	r24, r18
    3ec4:	93 1f       	adc	r25, r19
    3ec6:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <__brkval>
    3eca:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3ece:	28 17       	cp	r18, r24
    3ed0:	39 07       	cpc	r19, r25
    3ed2:	51 f5       	brne	.+84     	; 0x3f28 <free+0x88>
    3ed4:	f0 93 a6 08 	sts	0x08A6, r31	; 0x8008a6 <__brkval+0x1>
    3ed8:	e0 93 a5 08 	sts	0x08A5, r30	; 0x8008a5 <__brkval>
    3edc:	67 c0       	rjmp	.+206    	; 0x3fac <free+0x10c>
    3ede:	ed 01       	movw	r28, r26
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	ce 17       	cp	r28, r30
    3ee6:	df 07       	cpc	r29, r31
    3ee8:	40 f4       	brcc	.+16     	; 0x3efa <free+0x5a>
    3eea:	4a 81       	ldd	r20, Y+2	; 0x02
    3eec:	5b 81       	ldd	r21, Y+3	; 0x03
    3eee:	9e 01       	movw	r18, r28
    3ef0:	41 15       	cp	r20, r1
    3ef2:	51 05       	cpc	r21, r1
    3ef4:	f1 f0       	breq	.+60     	; 0x3f32 <free+0x92>
    3ef6:	ea 01       	movw	r28, r20
    3ef8:	f5 cf       	rjmp	.-22     	; 0x3ee4 <free+0x44>
    3efa:	d3 83       	std	Z+3, r29	; 0x03
    3efc:	c2 83       	std	Z+2, r28	; 0x02
    3efe:	40 81       	ld	r20, Z
    3f00:	51 81       	ldd	r21, Z+1	; 0x01
    3f02:	84 0f       	add	r24, r20
    3f04:	95 1f       	adc	r25, r21
    3f06:	c8 17       	cp	r28, r24
    3f08:	d9 07       	cpc	r29, r25
    3f0a:	59 f4       	brne	.+22     	; 0x3f22 <free+0x82>
    3f0c:	88 81       	ld	r24, Y
    3f0e:	99 81       	ldd	r25, Y+1	; 0x01
    3f10:	84 0f       	add	r24, r20
    3f12:	95 1f       	adc	r25, r21
    3f14:	02 96       	adiw	r24, 0x02	; 2
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
    3f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f1e:	93 83       	std	Z+3, r25	; 0x03
    3f20:	82 83       	std	Z+2, r24	; 0x02
    3f22:	21 15       	cp	r18, r1
    3f24:	31 05       	cpc	r19, r1
    3f26:	29 f4       	brne	.+10     	; 0x3f32 <free+0x92>
    3f28:	f0 93 a8 08 	sts	0x08A8, r31	; 0x8008a8 <__flp+0x1>
    3f2c:	e0 93 a7 08 	sts	0x08A7, r30	; 0x8008a7 <__flp>
    3f30:	3d c0       	rjmp	.+122    	; 0x3fac <free+0x10c>
    3f32:	e9 01       	movw	r28, r18
    3f34:	fb 83       	std	Y+3, r31	; 0x03
    3f36:	ea 83       	std	Y+2, r30	; 0x02
    3f38:	49 91       	ld	r20, Y+
    3f3a:	59 91       	ld	r21, Y+
    3f3c:	c4 0f       	add	r28, r20
    3f3e:	d5 1f       	adc	r29, r21
    3f40:	ec 17       	cp	r30, r28
    3f42:	fd 07       	cpc	r31, r29
    3f44:	61 f4       	brne	.+24     	; 0x3f5e <free+0xbe>
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	84 0f       	add	r24, r20
    3f4c:	95 1f       	adc	r25, r21
    3f4e:	02 96       	adiw	r24, 0x02	; 2
    3f50:	e9 01       	movw	r28, r18
    3f52:	99 83       	std	Y+1, r25	; 0x01
    3f54:	88 83       	st	Y, r24
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	9b 83       	std	Y+3, r25	; 0x03
    3f5c:	8a 83       	std	Y+2, r24	; 0x02
    3f5e:	e0 e0       	ldi	r30, 0x00	; 0
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	12 96       	adiw	r26, 0x02	; 2
    3f64:	8d 91       	ld	r24, X+
    3f66:	9c 91       	ld	r25, X
    3f68:	13 97       	sbiw	r26, 0x03	; 3
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	19 f0       	breq	.+6      	; 0x3f74 <free+0xd4>
    3f6e:	fd 01       	movw	r30, r26
    3f70:	dc 01       	movw	r26, r24
    3f72:	f7 cf       	rjmp	.-18     	; 0x3f62 <free+0xc2>
    3f74:	8d 91       	ld	r24, X+
    3f76:	9c 91       	ld	r25, X
    3f78:	11 97       	sbiw	r26, 0x01	; 1
    3f7a:	9d 01       	movw	r18, r26
    3f7c:	2e 5f       	subi	r18, 0xFE	; 254
    3f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f80:	82 0f       	add	r24, r18
    3f82:	93 1f       	adc	r25, r19
    3f84:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <__brkval>
    3f88:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3f8c:	28 17       	cp	r18, r24
    3f8e:	39 07       	cpc	r19, r25
    3f90:	69 f4       	brne	.+26     	; 0x3fac <free+0x10c>
    3f92:	30 97       	sbiw	r30, 0x00	; 0
    3f94:	29 f4       	brne	.+10     	; 0x3fa0 <free+0x100>
    3f96:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <__flp+0x1>
    3f9a:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__flp>
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <free+0x104>
    3fa0:	13 82       	std	Z+3, r1	; 0x03
    3fa2:	12 82       	std	Z+2, r1	; 0x02
    3fa4:	b0 93 a6 08 	sts	0x08A6, r27	; 0x8008a6 <__brkval+0x1>
    3fa8:	a0 93 a5 08 	sts	0x08A5, r26	; 0x8008a5 <__brkval>
    3fac:	df 91       	pop	r29
    3fae:	cf 91       	pop	r28
    3fb0:	08 95       	ret

00003fb2 <abort>:
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	f8 94       	cli
    3fb8:	58 c3       	rjmp	.+1712   	; 0x466a <_exit>

00003fba <memcpy>:
    3fba:	fb 01       	movw	r30, r22
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	02 c0       	rjmp	.+4      	; 0x3fc4 <memcpy+0xa>
    3fc0:	01 90       	ld	r0, Z+
    3fc2:	0d 92       	st	X+, r0
    3fc4:	41 50       	subi	r20, 0x01	; 1
    3fc6:	50 40       	sbci	r21, 0x00	; 0
    3fc8:	d8 f7       	brcc	.-10     	; 0x3fc0 <memcpy+0x6>
    3fca:	08 95       	ret

00003fcc <memset>:
    3fcc:	dc 01       	movw	r26, r24
    3fce:	01 c0       	rjmp	.+2      	; 0x3fd2 <memset+0x6>
    3fd0:	6d 93       	st	X+, r22
    3fd2:	41 50       	subi	r20, 0x01	; 1
    3fd4:	50 40       	sbci	r21, 0x00	; 0
    3fd6:	e0 f7       	brcc	.-8      	; 0x3fd0 <memset+0x4>
    3fd8:	08 95       	ret

00003fda <strcat>:
    3fda:	fb 01       	movw	r30, r22
    3fdc:	dc 01       	movw	r26, r24
    3fde:	0d 90       	ld	r0, X+
    3fe0:	00 20       	and	r0, r0
    3fe2:	e9 f7       	brne	.-6      	; 0x3fde <strcat+0x4>
    3fe4:	11 97       	sbiw	r26, 0x01	; 1
    3fe6:	01 90       	ld	r0, Z+
    3fe8:	0d 92       	st	X+, r0
    3fea:	00 20       	and	r0, r0
    3fec:	e1 f7       	brne	.-8      	; 0x3fe6 <strcat+0xc>
    3fee:	08 95       	ret

00003ff0 <strcpy>:
    3ff0:	fb 01       	movw	r30, r22
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	01 90       	ld	r0, Z+
    3ff6:	0d 92       	st	X+, r0
    3ff8:	00 20       	and	r0, r0
    3ffa:	e1 f7       	brne	.-8      	; 0x3ff4 <strcpy+0x4>
    3ffc:	08 95       	ret

00003ffe <strncasecmp>:
    3ffe:	fb 01       	movw	r30, r22
    4000:	dc 01       	movw	r26, r24
    4002:	41 50       	subi	r20, 0x01	; 1
    4004:	50 40       	sbci	r21, 0x00	; 0
    4006:	88 f0       	brcs	.+34     	; 0x402a <strncasecmp+0x2c>
    4008:	8d 91       	ld	r24, X+
    400a:	81 34       	cpi	r24, 0x41	; 65
    400c:	1c f0       	brlt	.+6      	; 0x4014 <strncasecmp+0x16>
    400e:	8b 35       	cpi	r24, 0x5B	; 91
    4010:	0c f4       	brge	.+2      	; 0x4014 <strncasecmp+0x16>
    4012:	80 5e       	subi	r24, 0xE0	; 224
    4014:	61 91       	ld	r22, Z+
    4016:	61 34       	cpi	r22, 0x41	; 65
    4018:	1c f0       	brlt	.+6      	; 0x4020 <strncasecmp+0x22>
    401a:	6b 35       	cpi	r22, 0x5B	; 91
    401c:	0c f4       	brge	.+2      	; 0x4020 <strncasecmp+0x22>
    401e:	60 5e       	subi	r22, 0xE0	; 224
    4020:	86 1b       	sub	r24, r22
    4022:	61 11       	cpse	r22, r1
    4024:	71 f3       	breq	.-36     	; 0x4002 <strncasecmp+0x4>
    4026:	99 0b       	sbc	r25, r25
    4028:	08 95       	ret
    402a:	88 1b       	sub	r24, r24
    402c:	fc cf       	rjmp	.-8      	; 0x4026 <strncasecmp+0x28>

0000402e <printf>:
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	ae 01       	movw	r20, r28
    4038:	4a 5f       	subi	r20, 0xFA	; 250
    403a:	5f 4f       	sbci	r21, 0xFF	; 255
    403c:	fa 01       	movw	r30, r20
    403e:	61 91       	ld	r22, Z+
    4040:	71 91       	ld	r23, Z+
    4042:	af 01       	movw	r20, r30
    4044:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__iob+0x2>
    4048:	90 91 ac 08 	lds	r25, 0x08AC	; 0x8008ac <__iob+0x3>
    404c:	61 d0       	rcall	.+194    	; 0x4110 <vfprintf>
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	08 95       	ret

00004054 <puts>:
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	e0 91 ab 08 	lds	r30, 0x08AB	; 0x8008ab <__iob+0x2>
    4060:	f0 91 ac 08 	lds	r31, 0x08AC	; 0x8008ac <__iob+0x3>
    4064:	23 81       	ldd	r18, Z+3	; 0x03
    4066:	21 ff       	sbrs	r18, 1
    4068:	1b c0       	rjmp	.+54     	; 0x40a0 <puts+0x4c>
    406a:	8c 01       	movw	r16, r24
    406c:	d0 e0       	ldi	r29, 0x00	; 0
    406e:	c0 e0       	ldi	r28, 0x00	; 0
    4070:	f8 01       	movw	r30, r16
    4072:	81 91       	ld	r24, Z+
    4074:	8f 01       	movw	r16, r30
    4076:	60 91 ab 08 	lds	r22, 0x08AB	; 0x8008ab <__iob+0x2>
    407a:	70 91 ac 08 	lds	r23, 0x08AC	; 0x8008ac <__iob+0x3>
    407e:	db 01       	movw	r26, r22
    4080:	18 96       	adiw	r26, 0x08	; 8
    4082:	ed 91       	ld	r30, X+
    4084:	fc 91       	ld	r31, X
    4086:	19 97       	sbiw	r26, 0x09	; 9
    4088:	88 23       	and	r24, r24
    408a:	31 f0       	breq	.+12     	; 0x4098 <puts+0x44>
    408c:	19 95       	eicall
    408e:	89 2b       	or	r24, r25
    4090:	79 f3       	breq	.-34     	; 0x4070 <puts+0x1c>
    4092:	df ef       	ldi	r29, 0xFF	; 255
    4094:	cf ef       	ldi	r28, 0xFF	; 255
    4096:	ec cf       	rjmp	.-40     	; 0x4070 <puts+0x1c>
    4098:	8a e0       	ldi	r24, 0x0A	; 10
    409a:	19 95       	eicall
    409c:	89 2b       	or	r24, r25
    409e:	19 f0       	breq	.+6      	; 0x40a6 <puts+0x52>
    40a0:	8f ef       	ldi	r24, 0xFF	; 255
    40a2:	9f ef       	ldi	r25, 0xFF	; 255
    40a4:	02 c0       	rjmp	.+4      	; 0x40aa <puts+0x56>
    40a6:	8d 2f       	mov	r24, r29
    40a8:	9c 2f       	mov	r25, r28
    40aa:	df 91       	pop	r29
    40ac:	cf 91       	pop	r28
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	08 95       	ret

000040b4 <sprintf>:
    40b4:	0f 93       	push	r16
    40b6:	1f 93       	push	r17
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	2e 97       	sbiw	r28, 0x0e	; 14
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
    40cc:	0e 89       	ldd	r16, Y+22	; 0x16
    40ce:	1f 89       	ldd	r17, Y+23	; 0x17
    40d0:	86 e0       	ldi	r24, 0x06	; 6
    40d2:	8c 83       	std	Y+4, r24	; 0x04
    40d4:	1a 83       	std	Y+2, r17	; 0x02
    40d6:	09 83       	std	Y+1, r16	; 0x01
    40d8:	8f ef       	ldi	r24, 0xFF	; 255
    40da:	9f e7       	ldi	r25, 0x7F	; 127
    40dc:	9e 83       	std	Y+6, r25	; 0x06
    40de:	8d 83       	std	Y+5, r24	; 0x05
    40e0:	ae 01       	movw	r20, r28
    40e2:	46 5e       	subi	r20, 0xE6	; 230
    40e4:	5f 4f       	sbci	r21, 0xFF	; 255
    40e6:	68 8d       	ldd	r22, Y+24	; 0x18
    40e8:	79 8d       	ldd	r23, Y+25	; 0x19
    40ea:	ce 01       	movw	r24, r28
    40ec:	01 96       	adiw	r24, 0x01	; 1
    40ee:	10 d0       	rcall	.+32     	; 0x4110 <vfprintf>
    40f0:	ef 81       	ldd	r30, Y+7	; 0x07
    40f2:	f8 85       	ldd	r31, Y+8	; 0x08
    40f4:	e0 0f       	add	r30, r16
    40f6:	f1 1f       	adc	r31, r17
    40f8:	10 82       	st	Z, r1
    40fa:	2e 96       	adiw	r28, 0x0e	; 14
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	f8 94       	cli
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	cd bf       	out	0x3d, r28	; 61
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	1f 91       	pop	r17
    410c:	0f 91       	pop	r16
    410e:	08 95       	ret

00004110 <vfprintf>:
    4110:	2f 92       	push	r2
    4112:	3f 92       	push	r3
    4114:	4f 92       	push	r4
    4116:	5f 92       	push	r5
    4118:	6f 92       	push	r6
    411a:	7f 92       	push	r7
    411c:	8f 92       	push	r8
    411e:	9f 92       	push	r9
    4120:	af 92       	push	r10
    4122:	bf 92       	push	r11
    4124:	cf 92       	push	r12
    4126:	df 92       	push	r13
    4128:	ef 92       	push	r14
    412a:	ff 92       	push	r15
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	2b 97       	sbiw	r28, 0x0b	; 11
    413a:	0f b6       	in	r0, 0x3f	; 63
    413c:	f8 94       	cli
    413e:	de bf       	out	0x3e, r29	; 62
    4140:	0f be       	out	0x3f, r0	; 63
    4142:	cd bf       	out	0x3d, r28	; 61
    4144:	6c 01       	movw	r12, r24
    4146:	7b 01       	movw	r14, r22
    4148:	8a 01       	movw	r16, r20
    414a:	fc 01       	movw	r30, r24
    414c:	17 82       	std	Z+7, r1	; 0x07
    414e:	16 82       	std	Z+6, r1	; 0x06
    4150:	83 81       	ldd	r24, Z+3	; 0x03
    4152:	81 ff       	sbrs	r24, 1
    4154:	bf c1       	rjmp	.+894    	; 0x44d4 <vfprintf+0x3c4>
    4156:	ce 01       	movw	r24, r28
    4158:	01 96       	adiw	r24, 0x01	; 1
    415a:	3c 01       	movw	r6, r24
    415c:	f6 01       	movw	r30, r12
    415e:	93 81       	ldd	r25, Z+3	; 0x03
    4160:	f7 01       	movw	r30, r14
    4162:	93 fd       	sbrc	r25, 3
    4164:	85 91       	lpm	r24, Z+
    4166:	93 ff       	sbrs	r25, 3
    4168:	81 91       	ld	r24, Z+
    416a:	7f 01       	movw	r14, r30
    416c:	88 23       	and	r24, r24
    416e:	09 f4       	brne	.+2      	; 0x4172 <vfprintf+0x62>
    4170:	ad c1       	rjmp	.+858    	; 0x44cc <vfprintf+0x3bc>
    4172:	85 32       	cpi	r24, 0x25	; 37
    4174:	39 f4       	brne	.+14     	; 0x4184 <vfprintf+0x74>
    4176:	93 fd       	sbrc	r25, 3
    4178:	85 91       	lpm	r24, Z+
    417a:	93 ff       	sbrs	r25, 3
    417c:	81 91       	ld	r24, Z+
    417e:	7f 01       	movw	r14, r30
    4180:	85 32       	cpi	r24, 0x25	; 37
    4182:	21 f4       	brne	.+8      	; 0x418c <vfprintf+0x7c>
    4184:	b6 01       	movw	r22, r12
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	d6 d1       	rcall	.+940    	; 0x4536 <fputc>
    418a:	e8 cf       	rjmp	.-48     	; 0x415c <vfprintf+0x4c>
    418c:	91 2c       	mov	r9, r1
    418e:	21 2c       	mov	r2, r1
    4190:	31 2c       	mov	r3, r1
    4192:	ff e1       	ldi	r31, 0x1F	; 31
    4194:	f3 15       	cp	r31, r3
    4196:	d8 f0       	brcs	.+54     	; 0x41ce <vfprintf+0xbe>
    4198:	8b 32       	cpi	r24, 0x2B	; 43
    419a:	79 f0       	breq	.+30     	; 0x41ba <vfprintf+0xaa>
    419c:	38 f4       	brcc	.+14     	; 0x41ac <vfprintf+0x9c>
    419e:	80 32       	cpi	r24, 0x20	; 32
    41a0:	79 f0       	breq	.+30     	; 0x41c0 <vfprintf+0xb0>
    41a2:	83 32       	cpi	r24, 0x23	; 35
    41a4:	a1 f4       	brne	.+40     	; 0x41ce <vfprintf+0xbe>
    41a6:	23 2d       	mov	r18, r3
    41a8:	20 61       	ori	r18, 0x10	; 16
    41aa:	1d c0       	rjmp	.+58     	; 0x41e6 <vfprintf+0xd6>
    41ac:	8d 32       	cpi	r24, 0x2D	; 45
    41ae:	61 f0       	breq	.+24     	; 0x41c8 <vfprintf+0xb8>
    41b0:	80 33       	cpi	r24, 0x30	; 48
    41b2:	69 f4       	brne	.+26     	; 0x41ce <vfprintf+0xbe>
    41b4:	23 2d       	mov	r18, r3
    41b6:	21 60       	ori	r18, 0x01	; 1
    41b8:	16 c0       	rjmp	.+44     	; 0x41e6 <vfprintf+0xd6>
    41ba:	83 2d       	mov	r24, r3
    41bc:	82 60       	ori	r24, 0x02	; 2
    41be:	38 2e       	mov	r3, r24
    41c0:	e3 2d       	mov	r30, r3
    41c2:	e4 60       	ori	r30, 0x04	; 4
    41c4:	3e 2e       	mov	r3, r30
    41c6:	2a c0       	rjmp	.+84     	; 0x421c <vfprintf+0x10c>
    41c8:	f3 2d       	mov	r31, r3
    41ca:	f8 60       	ori	r31, 0x08	; 8
    41cc:	1d c0       	rjmp	.+58     	; 0x4208 <vfprintf+0xf8>
    41ce:	37 fc       	sbrc	r3, 7
    41d0:	2d c0       	rjmp	.+90     	; 0x422c <vfprintf+0x11c>
    41d2:	20 ed       	ldi	r18, 0xD0	; 208
    41d4:	28 0f       	add	r18, r24
    41d6:	2a 30       	cpi	r18, 0x0A	; 10
    41d8:	40 f0       	brcs	.+16     	; 0x41ea <vfprintf+0xda>
    41da:	8e 32       	cpi	r24, 0x2E	; 46
    41dc:	b9 f4       	brne	.+46     	; 0x420c <vfprintf+0xfc>
    41de:	36 fc       	sbrc	r3, 6
    41e0:	75 c1       	rjmp	.+746    	; 0x44cc <vfprintf+0x3bc>
    41e2:	23 2d       	mov	r18, r3
    41e4:	20 64       	ori	r18, 0x40	; 64
    41e6:	32 2e       	mov	r3, r18
    41e8:	19 c0       	rjmp	.+50     	; 0x421c <vfprintf+0x10c>
    41ea:	36 fe       	sbrs	r3, 6
    41ec:	06 c0       	rjmp	.+12     	; 0x41fa <vfprintf+0xea>
    41ee:	8a e0       	ldi	r24, 0x0A	; 10
    41f0:	98 9e       	mul	r9, r24
    41f2:	20 0d       	add	r18, r0
    41f4:	11 24       	eor	r1, r1
    41f6:	92 2e       	mov	r9, r18
    41f8:	11 c0       	rjmp	.+34     	; 0x421c <vfprintf+0x10c>
    41fa:	ea e0       	ldi	r30, 0x0A	; 10
    41fc:	2e 9e       	mul	r2, r30
    41fe:	20 0d       	add	r18, r0
    4200:	11 24       	eor	r1, r1
    4202:	22 2e       	mov	r2, r18
    4204:	f3 2d       	mov	r31, r3
    4206:	f0 62       	ori	r31, 0x20	; 32
    4208:	3f 2e       	mov	r3, r31
    420a:	08 c0       	rjmp	.+16     	; 0x421c <vfprintf+0x10c>
    420c:	8c 36       	cpi	r24, 0x6C	; 108
    420e:	21 f4       	brne	.+8      	; 0x4218 <vfprintf+0x108>
    4210:	83 2d       	mov	r24, r3
    4212:	80 68       	ori	r24, 0x80	; 128
    4214:	38 2e       	mov	r3, r24
    4216:	02 c0       	rjmp	.+4      	; 0x421c <vfprintf+0x10c>
    4218:	88 36       	cpi	r24, 0x68	; 104
    421a:	41 f4       	brne	.+16     	; 0x422c <vfprintf+0x11c>
    421c:	f7 01       	movw	r30, r14
    421e:	93 fd       	sbrc	r25, 3
    4220:	85 91       	lpm	r24, Z+
    4222:	93 ff       	sbrs	r25, 3
    4224:	81 91       	ld	r24, Z+
    4226:	7f 01       	movw	r14, r30
    4228:	81 11       	cpse	r24, r1
    422a:	b3 cf       	rjmp	.-154    	; 0x4192 <vfprintf+0x82>
    422c:	98 2f       	mov	r25, r24
    422e:	9f 7d       	andi	r25, 0xDF	; 223
    4230:	95 54       	subi	r25, 0x45	; 69
    4232:	93 30       	cpi	r25, 0x03	; 3
    4234:	28 f4       	brcc	.+10     	; 0x4240 <vfprintf+0x130>
    4236:	0c 5f       	subi	r16, 0xFC	; 252
    4238:	1f 4f       	sbci	r17, 0xFF	; 255
    423a:	9f e3       	ldi	r25, 0x3F	; 63
    423c:	99 83       	std	Y+1, r25	; 0x01
    423e:	0d c0       	rjmp	.+26     	; 0x425a <vfprintf+0x14a>
    4240:	83 36       	cpi	r24, 0x63	; 99
    4242:	31 f0       	breq	.+12     	; 0x4250 <vfprintf+0x140>
    4244:	83 37       	cpi	r24, 0x73	; 115
    4246:	71 f0       	breq	.+28     	; 0x4264 <vfprintf+0x154>
    4248:	83 35       	cpi	r24, 0x53	; 83
    424a:	09 f0       	breq	.+2      	; 0x424e <vfprintf+0x13e>
    424c:	55 c0       	rjmp	.+170    	; 0x42f8 <vfprintf+0x1e8>
    424e:	20 c0       	rjmp	.+64     	; 0x4290 <vfprintf+0x180>
    4250:	f8 01       	movw	r30, r16
    4252:	80 81       	ld	r24, Z
    4254:	89 83       	std	Y+1, r24	; 0x01
    4256:	0e 5f       	subi	r16, 0xFE	; 254
    4258:	1f 4f       	sbci	r17, 0xFF	; 255
    425a:	88 24       	eor	r8, r8
    425c:	83 94       	inc	r8
    425e:	91 2c       	mov	r9, r1
    4260:	53 01       	movw	r10, r6
    4262:	12 c0       	rjmp	.+36     	; 0x4288 <vfprintf+0x178>
    4264:	28 01       	movw	r4, r16
    4266:	f2 e0       	ldi	r31, 0x02	; 2
    4268:	4f 0e       	add	r4, r31
    426a:	51 1c       	adc	r5, r1
    426c:	f8 01       	movw	r30, r16
    426e:	a0 80       	ld	r10, Z
    4270:	b1 80       	ldd	r11, Z+1	; 0x01
    4272:	36 fe       	sbrs	r3, 6
    4274:	03 c0       	rjmp	.+6      	; 0x427c <vfprintf+0x16c>
    4276:	69 2d       	mov	r22, r9
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	02 c0       	rjmp	.+4      	; 0x4280 <vfprintf+0x170>
    427c:	6f ef       	ldi	r22, 0xFF	; 255
    427e:	7f ef       	ldi	r23, 0xFF	; 255
    4280:	c5 01       	movw	r24, r10
    4282:	4e d1       	rcall	.+668    	; 0x4520 <strnlen>
    4284:	4c 01       	movw	r8, r24
    4286:	82 01       	movw	r16, r4
    4288:	f3 2d       	mov	r31, r3
    428a:	ff 77       	andi	r31, 0x7F	; 127
    428c:	3f 2e       	mov	r3, r31
    428e:	15 c0       	rjmp	.+42     	; 0x42ba <vfprintf+0x1aa>
    4290:	28 01       	movw	r4, r16
    4292:	22 e0       	ldi	r18, 0x02	; 2
    4294:	42 0e       	add	r4, r18
    4296:	51 1c       	adc	r5, r1
    4298:	f8 01       	movw	r30, r16
    429a:	a0 80       	ld	r10, Z
    429c:	b1 80       	ldd	r11, Z+1	; 0x01
    429e:	36 fe       	sbrs	r3, 6
    42a0:	03 c0       	rjmp	.+6      	; 0x42a8 <vfprintf+0x198>
    42a2:	69 2d       	mov	r22, r9
    42a4:	70 e0       	ldi	r23, 0x00	; 0
    42a6:	02 c0       	rjmp	.+4      	; 0x42ac <vfprintf+0x19c>
    42a8:	6f ef       	ldi	r22, 0xFF	; 255
    42aa:	7f ef       	ldi	r23, 0xFF	; 255
    42ac:	c5 01       	movw	r24, r10
    42ae:	2d d1       	rcall	.+602    	; 0x450a <strnlen_P>
    42b0:	4c 01       	movw	r8, r24
    42b2:	f3 2d       	mov	r31, r3
    42b4:	f0 68       	ori	r31, 0x80	; 128
    42b6:	3f 2e       	mov	r3, r31
    42b8:	82 01       	movw	r16, r4
    42ba:	33 fc       	sbrc	r3, 3
    42bc:	19 c0       	rjmp	.+50     	; 0x42f0 <vfprintf+0x1e0>
    42be:	82 2d       	mov	r24, r2
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	88 16       	cp	r8, r24
    42c4:	99 06       	cpc	r9, r25
    42c6:	a0 f4       	brcc	.+40     	; 0x42f0 <vfprintf+0x1e0>
    42c8:	b6 01       	movw	r22, r12
    42ca:	80 e2       	ldi	r24, 0x20	; 32
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	33 d1       	rcall	.+614    	; 0x4536 <fputc>
    42d0:	2a 94       	dec	r2
    42d2:	f5 cf       	rjmp	.-22     	; 0x42be <vfprintf+0x1ae>
    42d4:	f5 01       	movw	r30, r10
    42d6:	37 fc       	sbrc	r3, 7
    42d8:	85 91       	lpm	r24, Z+
    42da:	37 fe       	sbrs	r3, 7
    42dc:	81 91       	ld	r24, Z+
    42de:	5f 01       	movw	r10, r30
    42e0:	b6 01       	movw	r22, r12
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	28 d1       	rcall	.+592    	; 0x4536 <fputc>
    42e6:	21 10       	cpse	r2, r1
    42e8:	2a 94       	dec	r2
    42ea:	21 e0       	ldi	r18, 0x01	; 1
    42ec:	82 1a       	sub	r8, r18
    42ee:	91 08       	sbc	r9, r1
    42f0:	81 14       	cp	r8, r1
    42f2:	91 04       	cpc	r9, r1
    42f4:	79 f7       	brne	.-34     	; 0x42d4 <vfprintf+0x1c4>
    42f6:	e1 c0       	rjmp	.+450    	; 0x44ba <vfprintf+0x3aa>
    42f8:	84 36       	cpi	r24, 0x64	; 100
    42fa:	11 f0       	breq	.+4      	; 0x4300 <vfprintf+0x1f0>
    42fc:	89 36       	cpi	r24, 0x69	; 105
    42fe:	39 f5       	brne	.+78     	; 0x434e <vfprintf+0x23e>
    4300:	f8 01       	movw	r30, r16
    4302:	37 fe       	sbrs	r3, 7
    4304:	07 c0       	rjmp	.+14     	; 0x4314 <vfprintf+0x204>
    4306:	60 81       	ld	r22, Z
    4308:	71 81       	ldd	r23, Z+1	; 0x01
    430a:	82 81       	ldd	r24, Z+2	; 0x02
    430c:	93 81       	ldd	r25, Z+3	; 0x03
    430e:	0c 5f       	subi	r16, 0xFC	; 252
    4310:	1f 4f       	sbci	r17, 0xFF	; 255
    4312:	08 c0       	rjmp	.+16     	; 0x4324 <vfprintf+0x214>
    4314:	60 81       	ld	r22, Z
    4316:	71 81       	ldd	r23, Z+1	; 0x01
    4318:	07 2e       	mov	r0, r23
    431a:	00 0c       	add	r0, r0
    431c:	88 0b       	sbc	r24, r24
    431e:	99 0b       	sbc	r25, r25
    4320:	0e 5f       	subi	r16, 0xFE	; 254
    4322:	1f 4f       	sbci	r17, 0xFF	; 255
    4324:	f3 2d       	mov	r31, r3
    4326:	ff 76       	andi	r31, 0x6F	; 111
    4328:	3f 2e       	mov	r3, r31
    432a:	97 ff       	sbrs	r25, 7
    432c:	09 c0       	rjmp	.+18     	; 0x4340 <vfprintf+0x230>
    432e:	90 95       	com	r25
    4330:	80 95       	com	r24
    4332:	70 95       	com	r23
    4334:	61 95       	neg	r22
    4336:	7f 4f       	sbci	r23, 0xFF	; 255
    4338:	8f 4f       	sbci	r24, 0xFF	; 255
    433a:	9f 4f       	sbci	r25, 0xFF	; 255
    433c:	f0 68       	ori	r31, 0x80	; 128
    433e:	3f 2e       	mov	r3, r31
    4340:	2a e0       	ldi	r18, 0x0A	; 10
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	a3 01       	movw	r20, r6
    4346:	33 d1       	rcall	.+614    	; 0x45ae <__ultoa_invert>
    4348:	88 2e       	mov	r8, r24
    434a:	86 18       	sub	r8, r6
    434c:	44 c0       	rjmp	.+136    	; 0x43d6 <vfprintf+0x2c6>
    434e:	85 37       	cpi	r24, 0x75	; 117
    4350:	31 f4       	brne	.+12     	; 0x435e <vfprintf+0x24e>
    4352:	23 2d       	mov	r18, r3
    4354:	2f 7e       	andi	r18, 0xEF	; 239
    4356:	b2 2e       	mov	r11, r18
    4358:	2a e0       	ldi	r18, 0x0A	; 10
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	25 c0       	rjmp	.+74     	; 0x43a8 <vfprintf+0x298>
    435e:	93 2d       	mov	r25, r3
    4360:	99 7f       	andi	r25, 0xF9	; 249
    4362:	b9 2e       	mov	r11, r25
    4364:	8f 36       	cpi	r24, 0x6F	; 111
    4366:	c1 f0       	breq	.+48     	; 0x4398 <vfprintf+0x288>
    4368:	18 f4       	brcc	.+6      	; 0x4370 <vfprintf+0x260>
    436a:	88 35       	cpi	r24, 0x58	; 88
    436c:	79 f0       	breq	.+30     	; 0x438c <vfprintf+0x27c>
    436e:	ae c0       	rjmp	.+348    	; 0x44cc <vfprintf+0x3bc>
    4370:	80 37       	cpi	r24, 0x70	; 112
    4372:	19 f0       	breq	.+6      	; 0x437a <vfprintf+0x26a>
    4374:	88 37       	cpi	r24, 0x78	; 120
    4376:	21 f0       	breq	.+8      	; 0x4380 <vfprintf+0x270>
    4378:	a9 c0       	rjmp	.+338    	; 0x44cc <vfprintf+0x3bc>
    437a:	e9 2f       	mov	r30, r25
    437c:	e0 61       	ori	r30, 0x10	; 16
    437e:	be 2e       	mov	r11, r30
    4380:	b4 fe       	sbrs	r11, 4
    4382:	0d c0       	rjmp	.+26     	; 0x439e <vfprintf+0x28e>
    4384:	fb 2d       	mov	r31, r11
    4386:	f4 60       	ori	r31, 0x04	; 4
    4388:	bf 2e       	mov	r11, r31
    438a:	09 c0       	rjmp	.+18     	; 0x439e <vfprintf+0x28e>
    438c:	34 fe       	sbrs	r3, 4
    438e:	0a c0       	rjmp	.+20     	; 0x43a4 <vfprintf+0x294>
    4390:	29 2f       	mov	r18, r25
    4392:	26 60       	ori	r18, 0x06	; 6
    4394:	b2 2e       	mov	r11, r18
    4396:	06 c0       	rjmp	.+12     	; 0x43a4 <vfprintf+0x294>
    4398:	28 e0       	ldi	r18, 0x08	; 8
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	05 c0       	rjmp	.+10     	; 0x43a8 <vfprintf+0x298>
    439e:	20 e1       	ldi	r18, 0x10	; 16
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	02 c0       	rjmp	.+4      	; 0x43a8 <vfprintf+0x298>
    43a4:	20 e1       	ldi	r18, 0x10	; 16
    43a6:	32 e0       	ldi	r19, 0x02	; 2
    43a8:	f8 01       	movw	r30, r16
    43aa:	b7 fe       	sbrs	r11, 7
    43ac:	07 c0       	rjmp	.+14     	; 0x43bc <vfprintf+0x2ac>
    43ae:	60 81       	ld	r22, Z
    43b0:	71 81       	ldd	r23, Z+1	; 0x01
    43b2:	82 81       	ldd	r24, Z+2	; 0x02
    43b4:	93 81       	ldd	r25, Z+3	; 0x03
    43b6:	0c 5f       	subi	r16, 0xFC	; 252
    43b8:	1f 4f       	sbci	r17, 0xFF	; 255
    43ba:	06 c0       	rjmp	.+12     	; 0x43c8 <vfprintf+0x2b8>
    43bc:	60 81       	ld	r22, Z
    43be:	71 81       	ldd	r23, Z+1	; 0x01
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	0e 5f       	subi	r16, 0xFE	; 254
    43c6:	1f 4f       	sbci	r17, 0xFF	; 255
    43c8:	a3 01       	movw	r20, r6
    43ca:	f1 d0       	rcall	.+482    	; 0x45ae <__ultoa_invert>
    43cc:	88 2e       	mov	r8, r24
    43ce:	86 18       	sub	r8, r6
    43d0:	fb 2d       	mov	r31, r11
    43d2:	ff 77       	andi	r31, 0x7F	; 127
    43d4:	3f 2e       	mov	r3, r31
    43d6:	36 fe       	sbrs	r3, 6
    43d8:	0d c0       	rjmp	.+26     	; 0x43f4 <vfprintf+0x2e4>
    43da:	23 2d       	mov	r18, r3
    43dc:	2e 7f       	andi	r18, 0xFE	; 254
    43de:	a2 2e       	mov	r10, r18
    43e0:	89 14       	cp	r8, r9
    43e2:	58 f4       	brcc	.+22     	; 0x43fa <vfprintf+0x2ea>
    43e4:	34 fe       	sbrs	r3, 4
    43e6:	0b c0       	rjmp	.+22     	; 0x43fe <vfprintf+0x2ee>
    43e8:	32 fc       	sbrc	r3, 2
    43ea:	09 c0       	rjmp	.+18     	; 0x43fe <vfprintf+0x2ee>
    43ec:	83 2d       	mov	r24, r3
    43ee:	8e 7e       	andi	r24, 0xEE	; 238
    43f0:	a8 2e       	mov	r10, r24
    43f2:	05 c0       	rjmp	.+10     	; 0x43fe <vfprintf+0x2ee>
    43f4:	b8 2c       	mov	r11, r8
    43f6:	a3 2c       	mov	r10, r3
    43f8:	03 c0       	rjmp	.+6      	; 0x4400 <vfprintf+0x2f0>
    43fa:	b8 2c       	mov	r11, r8
    43fc:	01 c0       	rjmp	.+2      	; 0x4400 <vfprintf+0x2f0>
    43fe:	b9 2c       	mov	r11, r9
    4400:	a4 fe       	sbrs	r10, 4
    4402:	0f c0       	rjmp	.+30     	; 0x4422 <vfprintf+0x312>
    4404:	fe 01       	movw	r30, r28
    4406:	e8 0d       	add	r30, r8
    4408:	f1 1d       	adc	r31, r1
    440a:	80 81       	ld	r24, Z
    440c:	80 33       	cpi	r24, 0x30	; 48
    440e:	21 f4       	brne	.+8      	; 0x4418 <vfprintf+0x308>
    4410:	9a 2d       	mov	r25, r10
    4412:	99 7e       	andi	r25, 0xE9	; 233
    4414:	a9 2e       	mov	r10, r25
    4416:	09 c0       	rjmp	.+18     	; 0x442a <vfprintf+0x31a>
    4418:	a2 fe       	sbrs	r10, 2
    441a:	06 c0       	rjmp	.+12     	; 0x4428 <vfprintf+0x318>
    441c:	b3 94       	inc	r11
    441e:	b3 94       	inc	r11
    4420:	04 c0       	rjmp	.+8      	; 0x442a <vfprintf+0x31a>
    4422:	8a 2d       	mov	r24, r10
    4424:	86 78       	andi	r24, 0x86	; 134
    4426:	09 f0       	breq	.+2      	; 0x442a <vfprintf+0x31a>
    4428:	b3 94       	inc	r11
    442a:	a3 fc       	sbrc	r10, 3
    442c:	10 c0       	rjmp	.+32     	; 0x444e <vfprintf+0x33e>
    442e:	a0 fe       	sbrs	r10, 0
    4430:	06 c0       	rjmp	.+12     	; 0x443e <vfprintf+0x32e>
    4432:	b2 14       	cp	r11, r2
    4434:	80 f4       	brcc	.+32     	; 0x4456 <vfprintf+0x346>
    4436:	28 0c       	add	r2, r8
    4438:	92 2c       	mov	r9, r2
    443a:	9b 18       	sub	r9, r11
    443c:	0d c0       	rjmp	.+26     	; 0x4458 <vfprintf+0x348>
    443e:	b2 14       	cp	r11, r2
    4440:	58 f4       	brcc	.+22     	; 0x4458 <vfprintf+0x348>
    4442:	b6 01       	movw	r22, r12
    4444:	80 e2       	ldi	r24, 0x20	; 32
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	76 d0       	rcall	.+236    	; 0x4536 <fputc>
    444a:	b3 94       	inc	r11
    444c:	f8 cf       	rjmp	.-16     	; 0x443e <vfprintf+0x32e>
    444e:	b2 14       	cp	r11, r2
    4450:	18 f4       	brcc	.+6      	; 0x4458 <vfprintf+0x348>
    4452:	2b 18       	sub	r2, r11
    4454:	02 c0       	rjmp	.+4      	; 0x445a <vfprintf+0x34a>
    4456:	98 2c       	mov	r9, r8
    4458:	21 2c       	mov	r2, r1
    445a:	a4 fe       	sbrs	r10, 4
    445c:	0f c0       	rjmp	.+30     	; 0x447c <vfprintf+0x36c>
    445e:	b6 01       	movw	r22, r12
    4460:	80 e3       	ldi	r24, 0x30	; 48
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	68 d0       	rcall	.+208    	; 0x4536 <fputc>
    4466:	a2 fe       	sbrs	r10, 2
    4468:	16 c0       	rjmp	.+44     	; 0x4496 <vfprintf+0x386>
    446a:	a1 fc       	sbrc	r10, 1
    446c:	03 c0       	rjmp	.+6      	; 0x4474 <vfprintf+0x364>
    446e:	88 e7       	ldi	r24, 0x78	; 120
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	02 c0       	rjmp	.+4      	; 0x4478 <vfprintf+0x368>
    4474:	88 e5       	ldi	r24, 0x58	; 88
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	b6 01       	movw	r22, r12
    447a:	0c c0       	rjmp	.+24     	; 0x4494 <vfprintf+0x384>
    447c:	8a 2d       	mov	r24, r10
    447e:	86 78       	andi	r24, 0x86	; 134
    4480:	51 f0       	breq	.+20     	; 0x4496 <vfprintf+0x386>
    4482:	a1 fe       	sbrs	r10, 1
    4484:	02 c0       	rjmp	.+4      	; 0x448a <vfprintf+0x37a>
    4486:	8b e2       	ldi	r24, 0x2B	; 43
    4488:	01 c0       	rjmp	.+2      	; 0x448c <vfprintf+0x37c>
    448a:	80 e2       	ldi	r24, 0x20	; 32
    448c:	a7 fc       	sbrc	r10, 7
    448e:	8d e2       	ldi	r24, 0x2D	; 45
    4490:	b6 01       	movw	r22, r12
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	50 d0       	rcall	.+160    	; 0x4536 <fputc>
    4496:	89 14       	cp	r8, r9
    4498:	30 f4       	brcc	.+12     	; 0x44a6 <vfprintf+0x396>
    449a:	b6 01       	movw	r22, r12
    449c:	80 e3       	ldi	r24, 0x30	; 48
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	4a d0       	rcall	.+148    	; 0x4536 <fputc>
    44a2:	9a 94       	dec	r9
    44a4:	f8 cf       	rjmp	.-16     	; 0x4496 <vfprintf+0x386>
    44a6:	8a 94       	dec	r8
    44a8:	f3 01       	movw	r30, r6
    44aa:	e8 0d       	add	r30, r8
    44ac:	f1 1d       	adc	r31, r1
    44ae:	80 81       	ld	r24, Z
    44b0:	b6 01       	movw	r22, r12
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	40 d0       	rcall	.+128    	; 0x4536 <fputc>
    44b6:	81 10       	cpse	r8, r1
    44b8:	f6 cf       	rjmp	.-20     	; 0x44a6 <vfprintf+0x396>
    44ba:	22 20       	and	r2, r2
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <vfprintf+0x3b0>
    44be:	4e ce       	rjmp	.-868    	; 0x415c <vfprintf+0x4c>
    44c0:	b6 01       	movw	r22, r12
    44c2:	80 e2       	ldi	r24, 0x20	; 32
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	37 d0       	rcall	.+110    	; 0x4536 <fputc>
    44c8:	2a 94       	dec	r2
    44ca:	f7 cf       	rjmp	.-18     	; 0x44ba <vfprintf+0x3aa>
    44cc:	f6 01       	movw	r30, r12
    44ce:	86 81       	ldd	r24, Z+6	; 0x06
    44d0:	97 81       	ldd	r25, Z+7	; 0x07
    44d2:	02 c0       	rjmp	.+4      	; 0x44d8 <vfprintf+0x3c8>
    44d4:	8f ef       	ldi	r24, 0xFF	; 255
    44d6:	9f ef       	ldi	r25, 0xFF	; 255
    44d8:	2b 96       	adiw	r28, 0x0b	; 11
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	de bf       	out	0x3e, r29	; 62
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	1f 91       	pop	r17
    44ea:	0f 91       	pop	r16
    44ec:	ff 90       	pop	r15
    44ee:	ef 90       	pop	r14
    44f0:	df 90       	pop	r13
    44f2:	cf 90       	pop	r12
    44f4:	bf 90       	pop	r11
    44f6:	af 90       	pop	r10
    44f8:	9f 90       	pop	r9
    44fa:	8f 90       	pop	r8
    44fc:	7f 90       	pop	r7
    44fe:	6f 90       	pop	r6
    4500:	5f 90       	pop	r5
    4502:	4f 90       	pop	r4
    4504:	3f 90       	pop	r3
    4506:	2f 90       	pop	r2
    4508:	08 95       	ret

0000450a <strnlen_P>:
    450a:	fc 01       	movw	r30, r24
    450c:	05 90       	lpm	r0, Z+
    450e:	61 50       	subi	r22, 0x01	; 1
    4510:	70 40       	sbci	r23, 0x00	; 0
    4512:	01 10       	cpse	r0, r1
    4514:	d8 f7       	brcc	.-10     	; 0x450c <strnlen_P+0x2>
    4516:	80 95       	com	r24
    4518:	90 95       	com	r25
    451a:	8e 0f       	add	r24, r30
    451c:	9f 1f       	adc	r25, r31
    451e:	08 95       	ret

00004520 <strnlen>:
    4520:	fc 01       	movw	r30, r24
    4522:	61 50       	subi	r22, 0x01	; 1
    4524:	70 40       	sbci	r23, 0x00	; 0
    4526:	01 90       	ld	r0, Z+
    4528:	01 10       	cpse	r0, r1
    452a:	d8 f7       	brcc	.-10     	; 0x4522 <strnlen+0x2>
    452c:	80 95       	com	r24
    452e:	90 95       	com	r25
    4530:	8e 0f       	add	r24, r30
    4532:	9f 1f       	adc	r25, r31
    4534:	08 95       	ret

00004536 <fputc>:
    4536:	0f 93       	push	r16
    4538:	1f 93       	push	r17
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	fb 01       	movw	r30, r22
    4540:	23 81       	ldd	r18, Z+3	; 0x03
    4542:	21 fd       	sbrc	r18, 1
    4544:	03 c0       	rjmp	.+6      	; 0x454c <fputc+0x16>
    4546:	8f ef       	ldi	r24, 0xFF	; 255
    4548:	9f ef       	ldi	r25, 0xFF	; 255
    454a:	2c c0       	rjmp	.+88     	; 0x45a4 <fputc+0x6e>
    454c:	22 ff       	sbrs	r18, 2
    454e:	16 c0       	rjmp	.+44     	; 0x457c <fputc+0x46>
    4550:	46 81       	ldd	r20, Z+6	; 0x06
    4552:	57 81       	ldd	r21, Z+7	; 0x07
    4554:	24 81       	ldd	r18, Z+4	; 0x04
    4556:	35 81       	ldd	r19, Z+5	; 0x05
    4558:	42 17       	cp	r20, r18
    455a:	53 07       	cpc	r21, r19
    455c:	44 f4       	brge	.+16     	; 0x456e <fputc+0x38>
    455e:	a0 81       	ld	r26, Z
    4560:	b1 81       	ldd	r27, Z+1	; 0x01
    4562:	9d 01       	movw	r18, r26
    4564:	2f 5f       	subi	r18, 0xFF	; 255
    4566:	3f 4f       	sbci	r19, 0xFF	; 255
    4568:	31 83       	std	Z+1, r19	; 0x01
    456a:	20 83       	st	Z, r18
    456c:	8c 93       	st	X, r24
    456e:	26 81       	ldd	r18, Z+6	; 0x06
    4570:	37 81       	ldd	r19, Z+7	; 0x07
    4572:	2f 5f       	subi	r18, 0xFF	; 255
    4574:	3f 4f       	sbci	r19, 0xFF	; 255
    4576:	37 83       	std	Z+7, r19	; 0x07
    4578:	26 83       	std	Z+6, r18	; 0x06
    457a:	14 c0       	rjmp	.+40     	; 0x45a4 <fputc+0x6e>
    457c:	8b 01       	movw	r16, r22
    457e:	ec 01       	movw	r28, r24
    4580:	fb 01       	movw	r30, r22
    4582:	00 84       	ldd	r0, Z+8	; 0x08
    4584:	f1 85       	ldd	r31, Z+9	; 0x09
    4586:	e0 2d       	mov	r30, r0
    4588:	19 95       	eicall
    458a:	89 2b       	or	r24, r25
    458c:	e1 f6       	brne	.-72     	; 0x4546 <fputc+0x10>
    458e:	d8 01       	movw	r26, r16
    4590:	16 96       	adiw	r26, 0x06	; 6
    4592:	8d 91       	ld	r24, X+
    4594:	9c 91       	ld	r25, X
    4596:	17 97       	sbiw	r26, 0x07	; 7
    4598:	01 96       	adiw	r24, 0x01	; 1
    459a:	17 96       	adiw	r26, 0x07	; 7
    459c:	9c 93       	st	X, r25
    459e:	8e 93       	st	-X, r24
    45a0:	16 97       	sbiw	r26, 0x06	; 6
    45a2:	ce 01       	movw	r24, r28
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	1f 91       	pop	r17
    45aa:	0f 91       	pop	r16
    45ac:	08 95       	ret

000045ae <__ultoa_invert>:
    45ae:	fa 01       	movw	r30, r20
    45b0:	aa 27       	eor	r26, r26
    45b2:	28 30       	cpi	r18, 0x08	; 8
    45b4:	51 f1       	breq	.+84     	; 0x460a <__ultoa_invert+0x5c>
    45b6:	20 31       	cpi	r18, 0x10	; 16
    45b8:	81 f1       	breq	.+96     	; 0x461a <__ultoa_invert+0x6c>
    45ba:	e8 94       	clt
    45bc:	6f 93       	push	r22
    45be:	6e 7f       	andi	r22, 0xFE	; 254
    45c0:	6e 5f       	subi	r22, 0xFE	; 254
    45c2:	7f 4f       	sbci	r23, 0xFF	; 255
    45c4:	8f 4f       	sbci	r24, 0xFF	; 255
    45c6:	9f 4f       	sbci	r25, 0xFF	; 255
    45c8:	af 4f       	sbci	r26, 0xFF	; 255
    45ca:	b1 e0       	ldi	r27, 0x01	; 1
    45cc:	3e d0       	rcall	.+124    	; 0x464a <__ultoa_invert+0x9c>
    45ce:	b4 e0       	ldi	r27, 0x04	; 4
    45d0:	3c d0       	rcall	.+120    	; 0x464a <__ultoa_invert+0x9c>
    45d2:	67 0f       	add	r22, r23
    45d4:	78 1f       	adc	r23, r24
    45d6:	89 1f       	adc	r24, r25
    45d8:	9a 1f       	adc	r25, r26
    45da:	a1 1d       	adc	r26, r1
    45dc:	68 0f       	add	r22, r24
    45de:	79 1f       	adc	r23, r25
    45e0:	8a 1f       	adc	r24, r26
    45e2:	91 1d       	adc	r25, r1
    45e4:	a1 1d       	adc	r26, r1
    45e6:	6a 0f       	add	r22, r26
    45e8:	71 1d       	adc	r23, r1
    45ea:	81 1d       	adc	r24, r1
    45ec:	91 1d       	adc	r25, r1
    45ee:	a1 1d       	adc	r26, r1
    45f0:	20 d0       	rcall	.+64     	; 0x4632 <__ultoa_invert+0x84>
    45f2:	09 f4       	brne	.+2      	; 0x45f6 <__ultoa_invert+0x48>
    45f4:	68 94       	set
    45f6:	3f 91       	pop	r19
    45f8:	2a e0       	ldi	r18, 0x0A	; 10
    45fa:	26 9f       	mul	r18, r22
    45fc:	11 24       	eor	r1, r1
    45fe:	30 19       	sub	r19, r0
    4600:	30 5d       	subi	r19, 0xD0	; 208
    4602:	31 93       	st	Z+, r19
    4604:	de f6       	brtc	.-74     	; 0x45bc <__ultoa_invert+0xe>
    4606:	cf 01       	movw	r24, r30
    4608:	08 95       	ret
    460a:	46 2f       	mov	r20, r22
    460c:	47 70       	andi	r20, 0x07	; 7
    460e:	40 5d       	subi	r20, 0xD0	; 208
    4610:	41 93       	st	Z+, r20
    4612:	b3 e0       	ldi	r27, 0x03	; 3
    4614:	0f d0       	rcall	.+30     	; 0x4634 <__ultoa_invert+0x86>
    4616:	c9 f7       	brne	.-14     	; 0x460a <__ultoa_invert+0x5c>
    4618:	f6 cf       	rjmp	.-20     	; 0x4606 <__ultoa_invert+0x58>
    461a:	46 2f       	mov	r20, r22
    461c:	4f 70       	andi	r20, 0x0F	; 15
    461e:	40 5d       	subi	r20, 0xD0	; 208
    4620:	4a 33       	cpi	r20, 0x3A	; 58
    4622:	18 f0       	brcs	.+6      	; 0x462a <__ultoa_invert+0x7c>
    4624:	49 5d       	subi	r20, 0xD9	; 217
    4626:	31 fd       	sbrc	r19, 1
    4628:	40 52       	subi	r20, 0x20	; 32
    462a:	41 93       	st	Z+, r20
    462c:	02 d0       	rcall	.+4      	; 0x4632 <__ultoa_invert+0x84>
    462e:	a9 f7       	brne	.-22     	; 0x461a <__ultoa_invert+0x6c>
    4630:	ea cf       	rjmp	.-44     	; 0x4606 <__ultoa_invert+0x58>
    4632:	b4 e0       	ldi	r27, 0x04	; 4
    4634:	a6 95       	lsr	r26
    4636:	97 95       	ror	r25
    4638:	87 95       	ror	r24
    463a:	77 95       	ror	r23
    463c:	67 95       	ror	r22
    463e:	ba 95       	dec	r27
    4640:	c9 f7       	brne	.-14     	; 0x4634 <__ultoa_invert+0x86>
    4642:	00 97       	sbiw	r24, 0x00	; 0
    4644:	61 05       	cpc	r22, r1
    4646:	71 05       	cpc	r23, r1
    4648:	08 95       	ret
    464a:	9b 01       	movw	r18, r22
    464c:	ac 01       	movw	r20, r24
    464e:	0a 2e       	mov	r0, r26
    4650:	06 94       	lsr	r0
    4652:	57 95       	ror	r21
    4654:	47 95       	ror	r20
    4656:	37 95       	ror	r19
    4658:	27 95       	ror	r18
    465a:	ba 95       	dec	r27
    465c:	c9 f7       	brne	.-14     	; 0x4650 <__ultoa_invert+0xa2>
    465e:	62 0f       	add	r22, r18
    4660:	73 1f       	adc	r23, r19
    4662:	84 1f       	adc	r24, r20
    4664:	95 1f       	adc	r25, r21
    4666:	a0 1d       	adc	r26, r0
    4668:	08 95       	ret

0000466a <_exit>:
    466a:	f8 94       	cli

0000466c <__stop_program>:
    466c:	ff cf       	rjmp	.-2      	; 0x466c <__stop_program>
