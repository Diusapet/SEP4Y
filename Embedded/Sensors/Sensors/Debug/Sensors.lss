
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800200  000045f4  00004688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000045f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000120  00800342  00800342  000047ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000047ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a98  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d11b  00000000  00000000  00005300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000371b  00000000  00000000  0001241b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006538  00000000  00000000  00015b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002068  00000000  00000000  0001c070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e79  00000000  00000000  0001e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000afcc  00000000  00000000  00021f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a48  00000000  00000000  0002cf1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c5       	rjmp	.+2790   	; 0xb18 <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__vector_25>
      68:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__vector_36>
      94:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__vector_51>
      d0:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__vector_54>
      dc:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	0a 1c       	adc	r0, r10
      fa:	7a 1c       	adc	r7, r10
      fc:	7a 1c       	adc	r7, r10
      fe:	7a 1c       	adc	r7, r10
     100:	7a 1c       	adc	r7, r10
     102:	7a 1c       	adc	r7, r10
     104:	7a 1c       	adc	r7, r10
     106:	7a 1c       	adc	r7, r10
     108:	0a 1c       	adc	r0, r10
     10a:	7a 1c       	adc	r7, r10
     10c:	7a 1c       	adc	r7, r10
     10e:	7a 1c       	adc	r7, r10
     110:	7a 1c       	adc	r7, r10
     112:	7a 1c       	adc	r7, r10
     114:	7a 1c       	adc	r7, r10
     116:	7a 1c       	adc	r7, r10
     118:	0c 1c       	adc	r0, r12
     11a:	7a 1c       	adc	r7, r10
     11c:	7a 1c       	adc	r7, r10
     11e:	7a 1c       	adc	r7, r10
     120:	7a 1c       	adc	r7, r10
     122:	7a 1c       	adc	r7, r10
     124:	7a 1c       	adc	r7, r10
     126:	7a 1c       	adc	r7, r10
     128:	7a 1c       	adc	r7, r10
     12a:	7a 1c       	adc	r7, r10
     12c:	7a 1c       	adc	r7, r10
     12e:	7a 1c       	adc	r7, r10
     130:	7a 1c       	adc	r7, r10
     132:	7a 1c       	adc	r7, r10
     134:	7a 1c       	adc	r7, r10
     136:	7a 1c       	adc	r7, r10
     138:	0c 1c       	adc	r0, r12
     13a:	7a 1c       	adc	r7, r10
     13c:	7a 1c       	adc	r7, r10
     13e:	7a 1c       	adc	r7, r10
     140:	7a 1c       	adc	r7, r10
     142:	7a 1c       	adc	r7, r10
     144:	7a 1c       	adc	r7, r10
     146:	7a 1c       	adc	r7, r10
     148:	7a 1c       	adc	r7, r10
     14a:	7a 1c       	adc	r7, r10
     14c:	7a 1c       	adc	r7, r10
     14e:	7a 1c       	adc	r7, r10
     150:	7a 1c       	adc	r7, r10
     152:	7a 1c       	adc	r7, r10
     154:	7a 1c       	adc	r7, r10
     156:	7a 1c       	adc	r7, r10
     158:	76 1c       	adc	r7, r6
     15a:	7a 1c       	adc	r7, r10
     15c:	7a 1c       	adc	r7, r10
     15e:	7a 1c       	adc	r7, r10
     160:	7a 1c       	adc	r7, r10
     162:	7a 1c       	adc	r7, r10
     164:	7a 1c       	adc	r7, r10
     166:	7a 1c       	adc	r7, r10
     168:	41 1c       	adc	r4, r1
     16a:	7a 1c       	adc	r7, r10
     16c:	7a 1c       	adc	r7, r10
     16e:	7a 1c       	adc	r7, r10
     170:	7a 1c       	adc	r7, r10
     172:	7a 1c       	adc	r7, r10
     174:	7a 1c       	adc	r7, r10
     176:	7a 1c       	adc	r7, r10
     178:	7a 1c       	adc	r7, r10
     17a:	7a 1c       	adc	r7, r10
     17c:	7a 1c       	adc	r7, r10
     17e:	7a 1c       	adc	r7, r10
     180:	7a 1c       	adc	r7, r10
     182:	7a 1c       	adc	r7, r10
     184:	7a 1c       	adc	r7, r10
     186:	7a 1c       	adc	r7, r10
     188:	35 1c       	adc	r3, r5
     18a:	7a 1c       	adc	r7, r10
     18c:	7a 1c       	adc	r7, r10
     18e:	7a 1c       	adc	r7, r10
     190:	7a 1c       	adc	r7, r10
     192:	7a 1c       	adc	r7, r10
     194:	7a 1c       	adc	r7, r10
     196:	7a 1c       	adc	r7, r10
     198:	59 1c       	adc	r5, r9

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0a e5       	ldi	r16, 0x5A	; 90
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e8       	ldi	r31, 0x82	; 130
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f3 e0       	ldi	r31, 0x03	; 3
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	0b d3       	rcall	.+1558   	; 0x7e2 <uxListRemove>
     1cc:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <uxCurrentNumberOfTasks>
     1d6:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	89 d2       	rcall	.+1298   	; 0x6fc <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	87 d2       	rcall	.+1294   	; 0x6fc <vPortFree>
     1ee:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	c6 d3       	rcall	.+1932   	; 0x98c <vPortYield>
     200:	0e 94 56 14 	call	0x28ac	; 0x28ac <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     220:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     226:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <pxCurrentTimerList>
     22a:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     240:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     244:	c4 01       	movw	r24, r8
     246:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     258:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     25c:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <pxCurrentTimerList>
     260:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	b7 d2       	rcall	.+1390   	; 0x7e2 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 a1 13 	call	0x2742	; 0x2742 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     2c4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <xTimerQueue>
     2d0:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <xTimerQueue+0x1>
     2d4:	91 d7       	rcall	.+3874   	; 0x11f8 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     2d6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	56 d3       	rcall	.+1708   	; 0x98c <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     2e2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	6f d2       	rcall	.+1246   	; 0x7e2 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 a1 13 	call	0x2742	; 0x2742 <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	9c d1       	rcall	.+824    	; 0x6fc <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <xTimerQueue>
     3d8:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <xTimerQueue+0x1>
     3dc:	c7 d5       	rcall	.+2958   	; 0xf6c <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     3e4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     3f6:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <pxOverflowTimerList>
     3fa:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	13 e0       	ldi	r17, 0x03	; 3
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	e4 ef       	ldi	r30, 0xF4	; 244
     424:	f5 e4       	ldi	r31, 0x45	; 69
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a2 34       	cpi	r26, 0x42	; 66
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	24 e0       	ldi	r18, 0x04	; 4
     438:	a2 e4       	ldi	r26, 0x42	; 66
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a2 36       	cpi	r26, 0x62	; 98
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 71 14 	call	0x28e2	; 0x28e2 <main>
     44a:	0c 94 f8 22 	jmp	0x45f0	; 0x45f0 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <measure_co2_callback>:

SemaphoreHandle_t xSemaphore_co2;
MessageBufferHandle_t xMessageBuffer_co2;

void measure_co2_callback(uint16_t ppm)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	c8 2f       	mov	r28, r24
     456:	d9 2f       	mov	r29, r25
	uint16_t value = ppm;
	
	xMessageBufferSend( xMessageBuffer_co2
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	3f ef       	ldi	r19, 0xFF	; 255
     45c:	42 e0       	ldi	r20, 0x02	; 2
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	68 2f       	mov	r22, r24
     462:	79 2f       	mov	r23, r25
     464:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <xMessageBuffer_co2>
     468:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <xMessageBuffer_co2+0x1>
     46c:	0e 94 3f 0a 	call	0x147e	; 0x147e <xStreamBufferSend>
					, (void *) value
					, sizeof (value)
					,portMAX_DELAY );
	
	xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
     470:	6f ef       	ldi	r22, 0xFF	; 255
     472:	7f ef       	ldi	r23, 0xFF	; 255
     474:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xSemaphore_co2>
     478:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xSemaphore_co2+0x1>
     47c:	00 d6       	rcall	.+3072   	; 0x107e <xQueueSemaphoreTake>
	printf("Measured CO2 value %d sent!\n",value);
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	8e e4       	ldi	r24, 0x4E	; 78
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	0e 94 08 20 	call	0x4010	; 0x4010 <printf>
	xSemaphoreGive(xSemaphore_co2);
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xSemaphore_co2>
     49c:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xSemaphore_co2+0x1>
     4a0:	7f d4       	rcall	.+2302   	; 0xda0 <xQueueGenericSend>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <measure_co2_timer_callback>:
SemaphoreHandle_t xSemaphore_co2;
TimerHandle_t xTimer_measure_co2;

void measure_co2_timer_callback(TimerHandle_t pxTimer)
{
	xSemaphoreGive(xSemaphore_co2);
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xSemaphore_co2>
     4be:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xSemaphore_co2+0x1>
     4c2:	6e c4       	rjmp	.+2268   	; 0xda0 <xQueueGenericSend>
     4c4:	08 95       	ret

000004c6 <create_all_tasks>:

/*
	This method creates a task that sends data to the server
*/
void create_all_tasks(UBaseType_t lora_handler_task_priority)
{
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
	//, configMINIMAL_STACK_SIZE
	//, NULL
	//, tskIDLE_PRIORITY
	//, NULL );
	
	xTaskCreate(
     4cc:	e1 2c       	mov	r14, r1
     4ce:	f1 2c       	mov	r15, r1
     4d0:	00 e0       	ldi	r16, 0x00	; 0
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 ec       	ldi	r20, 0xC0	; 192
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	6b e6       	ldi	r22, 0x6B	; 107
     4dc:	72 e0       	ldi	r23, 0x02	; 2
     4de:	85 e1       	ldi	r24, 0x15	; 21
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
	
	xTaskCreate(
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 ec       	ldi	r20, 0xC0	; 192
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	6c e7       	ldi	r22, 0x7C	; 124
     4f0:	72 e0       	ldi	r23, 0x02	; 2
     4f2:	85 e2       	ldi	r24, 0x25	; 37
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <xTaskCreate>
	, "Print CO2 Task"
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
}
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	08 95       	ret

00000502 <create_all_timers>:
TimerHandle_t xTimer_read_temp;
TimerHandle_t xTimer_measure_co2;
TimerHandle_t xTimer_read_co2;

void create_all_timers()
{
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
			//(1000/portTICK_PERIOD_MS),
			//pdTRUE,
			//(void*) 1,
			//print_temp_timer_callback);
	
	xTimer_measure_co2 = xTimerCreate("CO2 Measure Timer",
     506:	08 e5       	ldi	r16, 0x58	; 88
     508:	12 e0       	ldi	r17, 0x02	; 2
     50a:	22 e0       	ldi	r18, 0x02	; 2
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	6e e3       	ldi	r22, 0x3E	; 62
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	8b e8       	ldi	r24, 0x8B	; 139
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <xTimerCreate>
     51c:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <xTimer_measure_co2+0x1>
     520:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <xTimer_measure_co2>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 2,
			measure_co2_timer_callback);
				
	xTimer_read_co2 = xTimerCreate("CO2 Read Timer",
     524:	23 e0       	ldi	r18, 0x03	; 3
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	6e e3       	ldi	r22, 0x3E	; 62
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	8d e9       	ldi	r24, 0x9D	; 157
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <xTimerCreate>
     536:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <xTimer_read_co2+0x1>
     53a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <xTimer_read_co2>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 3,
			measure_co2_timer_callback);
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <driver_init>:
MessageBufferHandle_t xMessageBuffer_temp;
MessageBufferHandle_t xMessageBuffer_co2;

void driver_init()
{
	stdioCreate(0);
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 ae 14 	call	0x295c	; 0x295c <stdioCreate>
	
	sei(); // enables interrupts
     54a:	78 94       	sei
	
	xSemaphore_temp = xSemaphoreCreateMutex();
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	be d4       	rcall	.+2428   	; 0xecc <xQueueCreateMutex>
     550:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <xSemaphore_temp+0x1>
     554:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <xSemaphore_temp>
	xSemaphore_co2 = xSemaphoreCreateMutex();
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	b8 d4       	rcall	.+2416   	; 0xecc <xQueueCreateMutex>
     55c:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <xSemaphore_co2+0x1>
     560:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <xSemaphore_co2>
	
	xMessageBuffer_temp = xMessageBufferCreate( sizeof (int));
     564:	41 e0       	ldi	r20, 0x01	; 1
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	49 d7       	rcall	.+3730   	; 0x1402 <xStreamBufferGenericCreate>
     570:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <xMessageBuffer_temp+0x1>
     574:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <xMessageBuffer_temp>
	xMessageBuffer_co2 = xMessageBufferCreate( sizeof (uint16_t));
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	3f d7       	rcall	.+3710   	; 0x1402 <xStreamBufferGenericCreate>
     584:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <xMessageBuffer_co2+0x1>
     588:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <xMessageBuffer_co2>
	
	/*
		Initialize the Temperature Driver
	*/
	if ( HIH8120_OK == hih8120Create() )
     58c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <hih8120Create>
     590:	81 11       	cpse	r24, r1
     592:	15 c0       	rjmp	.+42     	; 0x5be <driver_init+0x7a>
	{
		xSemaphoreTake(xSemaphore_temp, portMAX_DELAY);
     594:	6f ef       	ldi	r22, 0xFF	; 255
     596:	7f ef       	ldi	r23, 0xFF	; 255
     598:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <xSemaphore_temp>
     59c:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <xSemaphore_temp+0x1>
     5a0:	6e d5       	rcall	.+2780   	; 0x107e <xQueueSemaphoreTake>
		printf("Temp/Humidity driver created.\n");
     5a2:	8c ea       	ldi	r24, 0xAC	; 172
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 1b 20 	call	0x4036	; 0x4036 <puts>
		xSemaphoreGive(xSemaphore_temp);
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <xSemaphore_temp>
     5b8:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <xSemaphore_temp+0x1>
     5bc:	f1 d3       	rcall	.+2018   	; 0xda0 <xQueueGenericSend>
	
	/*
		Initialize LoRa Driver
	*/
	
	hal_create(LED_TASK_PRIORITY);
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <hal_create>
	lora_driver_create(ser_USART1);
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <lora_driver_create>
	xSemaphoreTake(xSemaphore_temp, portMAX_DELAY);
     5ca:	6f ef       	ldi	r22, 0xFF	; 255
     5cc:	7f ef       	ldi	r23, 0xFF	; 255
     5ce:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <xSemaphore_temp>
     5d2:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <xSemaphore_temp+0x1>
     5d6:	53 d5       	rcall	.+2726   	; 0x107e <xQueueSemaphoreTake>
	printf("LoRa driver created.\n");
     5d8:	8a ec       	ldi	r24, 0xCA	; 202
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 1b 20 	call	0x4036	; 0x4036 <puts>
	xSemaphoreGive(xSemaphore_temp);
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <xSemaphore_temp>
     5ee:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <xSemaphore_temp+0x1>
     5f2:	d6 d3       	rcall	.+1964   	; 0xda0 <xQueueGenericSend>
	
	/*
		Initialize MH-Z19 CO2 Driver
	*/
	
	mh_z19_create(ser_USART3, measure_co2_callback);
     5f4:	68 e2       	ldi	r22, 0x28	; 40
     5f6:	72 e0       	ldi	r23, 0x02	; 2
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	0e 94 3e 1b 	call	0x367c	; 0x367c <mh_z19_create>
	xSemaphoreTake(xSemaphore_temp, portMAX_DELAY);
     5fe:	6f ef       	ldi	r22, 0xFF	; 255
     600:	7f ef       	ldi	r23, 0xFF	; 255
     602:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <xSemaphore_temp>
     606:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <xSemaphore_temp+0x1>
     60a:	39 d5       	rcall	.+2674   	; 0x107e <xQueueSemaphoreTake>
	printf("Temp/Humidity driver created.\n");
     60c:	8c ea       	ldi	r24, 0xAC	; 172
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 1b 20 	call	0x4036	; 0x4036 <puts>
	xSemaphoreGive(xSemaphore_temp);
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <xSemaphore_temp>
     622:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <xSemaphore_temp+0x1>
     626:	bc c3       	rjmp	.+1912   	; 0xda0 <xQueueGenericSend>
     628:	08 95       	ret

0000062a <measure_co2_task>:

void measure_co2_task(void *pvParameters)
{
	while (1)
	{
		xSemaphoreTake(xSemaphore_co2, portMAX_DELAY);
     62a:	6f ef       	ldi	r22, 0xFF	; 255
     62c:	7f ef       	ldi	r23, 0xFF	; 255
     62e:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xSemaphore_co2>
     632:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xSemaphore_co2+0x1>
     636:	23 d5       	rcall	.+2630   	; 0x107e <xQueueSemaphoreTake>
		
		if (mh_z19_take_meassuring() != MHZ19_OK)
     638:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <mh_z19_take_meassuring>
     63c:	88 23       	and	r24, r24
     63e:	a9 f3       	breq	.-22     	; 0x62a <measure_co2_task>
		{
			printf("Error measuring CO2 ppm!\n");
     640:	8f ed       	ldi	r24, 0xDF	; 223
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	0e 94 1b 20 	call	0x4036	; 0x4036 <puts>
     648:	f0 cf       	rjmp	.-32     	; 0x62a <measure_co2_task>

0000064a <print_co2_task>:
							,(void *) recieved_data
							, xRecievedBytes
							,0 );
		
		xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
		printf("Received CO2 level : %d ppm\n",recieved_data);
     64a:	08 ef       	ldi	r16, 0xF8	; 248
     64c:	12 e0       	ldi	r17, 0x02	; 2
	uint16_t recieved_data;
	size_t xRecievedBytes;
	
	while (1)
	{
		xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
     64e:	6f ef       	ldi	r22, 0xFF	; 255
     650:	7f ef       	ldi	r23, 0xFF	; 255
     652:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xSemaphore_co2>
     656:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xSemaphore_co2+0x1>
     65a:	11 d5       	rcall	.+2594   	; 0x107e <xQueueSemaphoreTake>
		
		xRecievedBytes = xMessageBufferReceive(xMessageBuffer_co2
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	a7 01       	movw	r20, r14
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	6c 2f       	mov	r22, r28
     666:	d0 e0       	ldi	r29, 0x00	; 0
     668:	7d 2f       	mov	r23, r29
     66a:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <xMessageBuffer_co2>
     66e:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <xMessageBuffer_co2+0x1>
     672:	e0 d7       	rcall	.+4032   	; 0x1634 <xStreamBufferReceive>
     674:	7c 01       	movw	r14, r24
							,(void *) recieved_data
							, xRecievedBytes
							,0 );
		
		xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
     676:	6f ef       	ldi	r22, 0xFF	; 255
     678:	7f ef       	ldi	r23, 0xFF	; 255
     67a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xSemaphore_co2>
     67e:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xSemaphore_co2+0x1>
     682:	fd d4       	rcall	.+2554   	; 0x107e <xQueueSemaphoreTake>
		printf("Received CO2 level : %d ppm\n",recieved_data);
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	1f 93       	push	r17
     68a:	0f 93       	push	r16
     68c:	0e 94 08 20 	call	0x4010	; 0x4010 <printf>
		xSemaphoreGive(xSemaphore_co2);
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xSemaphore_co2>
     69e:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xSemaphore_co2+0x1>
     6a2:	7e d3       	rcall	.+1788   	; 0xda0 <xQueueGenericSend>
		vTaskDelay(10);
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <vTaskDelay>
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	cc cf       	rjmp	.-104    	; 0x64e <print_co2_task+0x4>

000006b6 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     6b6:	e8 e0       	ldi	r30, 0x08	; 8
     6b8:	f1 e0       	ldi	r31, 0x01	; 1
     6ba:	90 81       	ld	r25, Z
     6bc:	90 7f       	andi	r25, 0xF0	; 240
     6be:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     6c0:	90 81       	ld	r25, Z
     6c2:	8f 70       	andi	r24, 0x0F	; 15
     6c4:	98 2b       	or	r25, r24
     6c6:	90 83       	st	Z, r25
     6c8:	08 95       	ret

000006ca <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     6ca:	e8 e0       	ldi	r30, 0x08	; 8
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	80 81       	ld	r24, Z
     6d0:	80 7f       	andi	r24, 0xF0	; 240
     6d2:	80 83       	st	Z, r24
     6d4:	08 95       	ret

000006d6 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     6dc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     6e0:	ce 01       	movw	r24, r28
     6e2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <malloc>
     6e6:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6e8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     6ec:	20 97       	sbiw	r28, 0x00	; 0
     6ee:	11 f4       	brne	.+4      	; 0x6f4 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     6f0:	0e 94 57 14 	call	0x28ae	; 0x28ae <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     6f4:	ce 01       	movw	r24, r28
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
    if( pv )
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	41 f0       	breq	.+16     	; 0x714 <vPortFree+0x18>
     704:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     706:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <vTaskSuspendAll>
        {
            free( pv );
     70a:	ce 01       	movw	r24, r28
     70c:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     710:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <xTaskResumeAll>
    }
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     71a:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     71c:	03 96       	adiw	r24, 0x03	; 3
     71e:	92 83       	std	Z+2, r25	; 0x02
     720:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	3f ef       	ldi	r19, 0xFF	; 255
     726:	34 83       	std	Z+4, r19	; 0x04
     728:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     72a:	96 83       	std	Z+6, r25	; 0x06
     72c:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     72e:	90 87       	std	Z+8, r25	; 0x08
     730:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     732:	10 82       	st	Z, r1
     734:	08 95       	ret

00000736 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     736:	fc 01       	movw	r30, r24
     738:	11 86       	std	Z+9, r1	; 0x09
     73a:	10 86       	std	Z+8, r1	; 0x08
     73c:	08 95       	ret

0000073e <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	9c 01       	movw	r18, r24
     744:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     746:	dc 01       	movw	r26, r24
     748:	11 96       	adiw	r26, 0x01	; 1
     74a:	cd 91       	ld	r28, X+
     74c:	dc 91       	ld	r29, X
     74e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     750:	d3 83       	std	Z+3, r29	; 0x03
     752:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     754:	8c 81       	ldd	r24, Y+4	; 0x04
     756:	9d 81       	ldd	r25, Y+5	; 0x05
     758:	95 83       	std	Z+5, r25	; 0x05
     75a:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     75c:	8c 81       	ldd	r24, Y+4	; 0x04
     75e:	9d 81       	ldd	r25, Y+5	; 0x05
     760:	dc 01       	movw	r26, r24
     762:	13 96       	adiw	r26, 0x03	; 3
     764:	7c 93       	st	X, r23
     766:	6e 93       	st	-X, r22
     768:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     76a:	7d 83       	std	Y+5, r23	; 0x05
     76c:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     76e:	31 87       	std	Z+9, r19	; 0x09
     770:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     772:	f9 01       	movw	r30, r18
     774:	80 81       	ld	r24, Z
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	80 83       	st	Z, r24
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     786:	48 81       	ld	r20, Y
     788:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     78a:	4f 3f       	cpi	r20, 0xFF	; 255
     78c:	2f ef       	ldi	r18, 0xFF	; 255
     78e:	52 07       	cpc	r21, r18
     790:	21 f4       	brne	.+8      	; 0x79a <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     792:	fc 01       	movw	r30, r24
     794:	a7 81       	ldd	r26, Z+7	; 0x07
     796:	b0 85       	ldd	r27, Z+8	; 0x08
     798:	0d c0       	rjmp	.+26     	; 0x7b4 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     79a:	dc 01       	movw	r26, r24
     79c:	13 96       	adiw	r26, 0x03	; 3
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <vListInsert+0x22>
     7a0:	df 01       	movw	r26, r30
     7a2:	12 96       	adiw	r26, 0x02	; 2
     7a4:	ed 91       	ld	r30, X+
     7a6:	fc 91       	ld	r31, X
     7a8:	13 97       	sbiw	r26, 0x03	; 3
     7aa:	20 81       	ld	r18, Z
     7ac:	31 81       	ldd	r19, Z+1	; 0x01
     7ae:	42 17       	cp	r20, r18
     7b0:	53 07       	cpc	r21, r19
     7b2:	b0 f7       	brcc	.-20     	; 0x7a0 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7b4:	12 96       	adiw	r26, 0x02	; 2
     7b6:	ed 91       	ld	r30, X+
     7b8:	fc 91       	ld	r31, X
     7ba:	13 97       	sbiw	r26, 0x03	; 3
     7bc:	fb 83       	std	Y+3, r31	; 0x03
     7be:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7c0:	d5 83       	std	Z+5, r29	; 0x05
     7c2:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     7c4:	bd 83       	std	Y+5, r27	; 0x05
     7c6:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     7c8:	13 96       	adiw	r26, 0x03	; 3
     7ca:	dc 93       	st	X, r29
     7cc:	ce 93       	st	-X, r28
     7ce:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     7d0:	99 87       	std	Y+9, r25	; 0x09
     7d2:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 81       	ld	r18, Z
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	20 83       	st	Z, r18
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     7e8:	a0 85       	ldd	r26, Z+8	; 0x08
     7ea:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7ec:	c2 81       	ldd	r28, Z+2	; 0x02
     7ee:	d3 81       	ldd	r29, Z+3	; 0x03
     7f0:	84 81       	ldd	r24, Z+4	; 0x04
     7f2:	95 81       	ldd	r25, Z+5	; 0x05
     7f4:	9d 83       	std	Y+5, r25	; 0x05
     7f6:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7f8:	c4 81       	ldd	r28, Z+4	; 0x04
     7fa:	d5 81       	ldd	r29, Z+5	; 0x05
     7fc:	82 81       	ldd	r24, Z+2	; 0x02
     7fe:	93 81       	ldd	r25, Z+3	; 0x03
     800:	9b 83       	std	Y+3, r25	; 0x03
     802:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     804:	11 96       	adiw	r26, 0x01	; 1
     806:	8d 91       	ld	r24, X+
     808:	9c 91       	ld	r25, X
     80a:	12 97       	sbiw	r26, 0x02	; 2
     80c:	e8 17       	cp	r30, r24
     80e:	f9 07       	cpc	r31, r25
     810:	31 f4       	brne	.+12     	; 0x81e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     812:	84 81       	ldd	r24, Z+4	; 0x04
     814:	95 81       	ldd	r25, Z+5	; 0x05
     816:	12 96       	adiw	r26, 0x02	; 2
     818:	9c 93       	st	X, r25
     81a:	8e 93       	st	-X, r24
     81c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     81e:	11 86       	std	Z+9, r1	; 0x09
     820:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     822:	8c 91       	ld	r24, X
     824:	81 50       	subi	r24, 0x01	; 1
     826:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     828:	8c 91       	ld	r24, X
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     830:	31 e1       	ldi	r19, 0x11	; 17
     832:	fc 01       	movw	r30, r24
     834:	30 83       	st	Z, r19
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	22 e2       	ldi	r18, 0x22	; 34
     83a:	20 83       	st	Z, r18
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	a3 e3       	ldi	r26, 0x33	; 51
     840:	a0 83       	st	Z, r26
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	60 83       	st	Z, r22
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	70 83       	st	Z, r23
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	10 82       	st	Z, r1
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	10 82       	st	Z, r1
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	60 e8       	ldi	r22, 0x80	; 128
     856:	60 83       	st	Z, r22
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	10 82       	st	Z, r1
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	10 82       	st	Z, r1
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	10 82       	st	Z, r1
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	60 83       	st	Z, r22
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	63 e0       	ldi	r22, 0x03	; 3
     86e:	60 83       	st	Z, r22
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	64 e0       	ldi	r22, 0x04	; 4
     874:	60 83       	st	Z, r22
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	65 e0       	ldi	r22, 0x05	; 5
     87a:	60 83       	st	Z, r22
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	66 e0       	ldi	r22, 0x06	; 6
     880:	60 83       	st	Z, r22
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	67 e0       	ldi	r22, 0x07	; 7
     886:	60 83       	st	Z, r22
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	68 e0       	ldi	r22, 0x08	; 8
     88c:	60 83       	st	Z, r22
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	69 e0       	ldi	r22, 0x09	; 9
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	60 e1       	ldi	r22, 0x10	; 16
     898:	60 83       	st	Z, r22
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	30 83       	st	Z, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	32 e1       	ldi	r19, 0x12	; 18
     8a2:	30 83       	st	Z, r19
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	33 e1       	ldi	r19, 0x13	; 19
     8a8:	30 83       	st	Z, r19
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	34 e1       	ldi	r19, 0x14	; 20
     8ae:	30 83       	st	Z, r19
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	35 e1       	ldi	r19, 0x15	; 21
     8b4:	30 83       	st	Z, r19
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	36 e1       	ldi	r19, 0x16	; 22
     8ba:	30 83       	st	Z, r19
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	37 e1       	ldi	r19, 0x17	; 23
     8c0:	30 83       	st	Z, r19
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	38 e1       	ldi	r19, 0x18	; 24
     8c6:	30 83       	st	Z, r19
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	39 e1       	ldi	r19, 0x19	; 25
     8cc:	30 83       	st	Z, r19
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	30 e2       	ldi	r19, 0x20	; 32
     8d2:	30 83       	st	Z, r19
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	31 e2       	ldi	r19, 0x21	; 33
     8d8:	30 83       	st	Z, r19
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	20 83       	st	Z, r18
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	23 e2       	ldi	r18, 0x23	; 35
     8e2:	20 83       	st	Z, r18
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	40 83       	st	Z, r20
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	50 83       	st	Z, r21
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	26 e2       	ldi	r18, 0x26	; 38
     8f0:	20 83       	st	Z, r18
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	27 e2       	ldi	r18, 0x27	; 39
     8f6:	20 83       	st	Z, r18
     8f8:	31 97       	sbiw	r30, 0x01	; 1
     8fa:	28 e2       	ldi	r18, 0x28	; 40
     8fc:	20 83       	st	Z, r18
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	29 e2       	ldi	r18, 0x29	; 41
     902:	20 83       	st	Z, r18
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	20 e3       	ldi	r18, 0x30	; 48
     908:	20 83       	st	Z, r18
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	21 e3       	ldi	r18, 0x31	; 49
     90e:	20 83       	st	Z, r18
     910:	89 97       	sbiw	r24, 0x29	; 41
     912:	08 95       	ret

00000914 <xPortStartScheduler>:
     914:	a8 95       	wdr
     916:	90 ec       	ldi	r25, 0xC0	; 192
     918:	88 e1       	ldi	r24, 0x18	; 24
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	a8 95       	wdr
     920:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     924:	0f be       	out	0x3f, r0	; 63
     926:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     92a:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
     92e:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
     932:	cd 91       	ld	r28, X+
     934:	cd bf       	out	0x3d, r28	; 61
     936:	dd 91       	ld	r29, X+
     938:	de bf       	out	0x3e, r29	; 62
     93a:	ff 91       	pop	r31
     93c:	ef 91       	pop	r30
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	bf 91       	pop	r27
     944:	af 91       	pop	r26
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	7f 91       	pop	r23
     94c:	6f 91       	pop	r22
     94e:	5f 91       	pop	r21
     950:	4f 91       	pop	r20
     952:	3f 91       	pop	r19
     954:	2f 91       	pop	r18
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	7f 90       	pop	r7
     96c:	6f 90       	pop	r6
     96e:	5f 90       	pop	r5
     970:	4f 90       	pop	r4
     972:	3f 90       	pop	r3
     974:	2f 90       	pop	r2
     976:	1f 90       	pop	r1
     978:	0f 90       	pop	r0
     97a:	0c be       	out	0x3c, r0	; 60
     97c:	0f 90       	pop	r0
     97e:	0b be       	out	0x3b, r0	; 59
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	08 95       	ret
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	08 95       	ret

0000098c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	0f 92       	push	r0
     994:	0b b6       	in	r0, 0x3b	; 59
     996:	0f 92       	push	r0
     998:	0c b6       	in	r0, 0x3c	; 60
     99a:	0f 92       	push	r0
     99c:	1f 92       	push	r1
     99e:	11 24       	eor	r1, r1
     9a0:	2f 92       	push	r2
     9a2:	3f 92       	push	r3
     9a4:	4f 92       	push	r4
     9a6:	5f 92       	push	r5
     9a8:	6f 92       	push	r6
     9aa:	7f 92       	push	r7
     9ac:	8f 92       	push	r8
     9ae:	9f 92       	push	r9
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ef 93       	push	r30
     9da:	ff 93       	push	r31
     9dc:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
     9e0:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
     9e4:	0d b6       	in	r0, 0x3d	; 61
     9e6:	0d 92       	st	X+, r0
     9e8:	0e b6       	in	r0, 0x3e	; 62
     9ea:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     9ec:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     9f0:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
     9f4:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
     9f8:	cd 91       	ld	r28, X+
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	dd 91       	ld	r29, X+
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	bf 91       	pop	r27
     a0a:	af 91       	pop	r26
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	7f 91       	pop	r23
     a12:	6f 91       	pop	r22
     a14:	5f 91       	pop	r21
     a16:	4f 91       	pop	r20
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	bf 90       	pop	r11
     a2a:	af 90       	pop	r10
     a2c:	9f 90       	pop	r9
     a2e:	8f 90       	pop	r8
     a30:	7f 90       	pop	r7
     a32:	6f 90       	pop	r6
     a34:	5f 90       	pop	r5
     a36:	4f 90       	pop	r4
     a38:	3f 90       	pop	r3
     a3a:	2f 90       	pop	r2
     a3c:	1f 90       	pop	r1
     a3e:	0f 90       	pop	r0
     a40:	0c be       	out	0x3c, r0	; 60
     a42:	0f 90       	pop	r0
     a44:	0b be       	out	0x3b, r0	; 59
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a4c:	08 95       	ret

00000a4e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     a4e:	0f 92       	push	r0
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	0f 92       	push	r0
     a56:	0b b6       	in	r0, 0x3b	; 59
     a58:	0f 92       	push	r0
     a5a:	0c b6       	in	r0, 0x3c	; 60
     a5c:	0f 92       	push	r0
     a5e:	1f 92       	push	r1
     a60:	11 24       	eor	r1, r1
     a62:	2f 92       	push	r2
     a64:	3f 92       	push	r3
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
     a9e:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
     aa2:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
     aa6:	0d b6       	in	r0, 0x3d	; 61
     aa8:	0d 92       	st	X+, r0
     aaa:	0e b6       	in	r0, 0x3e	; 62
     aac:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     aae:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     ab0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xTaskIncrementTick>
     ab4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ab6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     aba:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
     abe:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
     ac2:	cd 91       	ld	r28, X+
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	dd 91       	ld	r29, X+
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	1f 90       	pop	r1
     b08:	0f 90       	pop	r0
     b0a:	0c be       	out	0x3c, r0	; 60
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     b16:	08 95       	ret

00000b18 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     b18:	9a df       	rcall	.-204    	; 0xa4e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     b1a:	18 95       	reti

00000b1c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	0f 92       	push	r0
     b22:	fc 01       	movw	r30, r24
     b24:	92 8d       	ldd	r25, Z+26	; 0x1a
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	91 11       	cpse	r25, r1
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	08 95       	ret

00000b32 <prvCopyDataToQueue>:
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ec 01       	movw	r28, r24
     b3c:	04 2f       	mov	r16, r20
     b3e:	1a 8d       	ldd	r17, Y+26	; 0x1a
     b40:	4c 8d       	ldd	r20, Y+28	; 0x1c
     b42:	41 11       	cpse	r20, r1
     b44:	0c c0       	rjmp	.+24     	; 0xb5e <prvCopyDataToQueue+0x2c>
     b46:	88 81       	ld	r24, Y
     b48:	99 81       	ldd	r25, Y+1	; 0x01
     b4a:	89 2b       	or	r24, r25
     b4c:	09 f0       	breq	.+2      	; 0xb50 <prvCopyDataToQueue+0x1e>
     b4e:	42 c0       	rjmp	.+132    	; 0xbd4 <prvCopyDataToQueue+0xa2>
     b50:	8c 81       	ldd	r24, Y+4	; 0x04
     b52:	9d 81       	ldd	r25, Y+5	; 0x05
     b54:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskPriorityDisinherit>
     b58:	1d 82       	std	Y+5, r1	; 0x05
     b5a:	1c 82       	std	Y+4, r1	; 0x04
     b5c:	42 c0       	rjmp	.+132    	; 0xbe2 <prvCopyDataToQueue+0xb0>
     b5e:	01 11       	cpse	r16, r1
     b60:	17 c0       	rjmp	.+46     	; 0xb90 <prvCopyDataToQueue+0x5e>
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	9b 81       	ldd	r25, Y+3	; 0x03
     b68:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memcpy>
     b6c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	9b 81       	ldd	r25, Y+3	; 0x03
     b72:	82 0f       	add	r24, r18
     b74:	91 1d       	adc	r25, r1
     b76:	9b 83       	std	Y+3, r25	; 0x03
     b78:	8a 83       	std	Y+2, r24	; 0x02
     b7a:	2c 81       	ldd	r18, Y+4	; 0x04
     b7c:	3d 81       	ldd	r19, Y+5	; 0x05
     b7e:	82 17       	cp	r24, r18
     b80:	93 07       	cpc	r25, r19
     b82:	50 f1       	brcs	.+84     	; 0xbd8 <prvCopyDataToQueue+0xa6>
     b84:	88 81       	ld	r24, Y
     b86:	99 81       	ldd	r25, Y+1	; 0x01
     b88:	9b 83       	std	Y+3, r25	; 0x03
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	29 c0       	rjmp	.+82     	; 0xbe2 <prvCopyDataToQueue+0xb0>
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	8e 81       	ldd	r24, Y+6	; 0x06
     b94:	9f 81       	ldd	r25, Y+7	; 0x07
     b96:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memcpy>
     b9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	91 95       	neg	r25
     ba0:	81 95       	neg	r24
     ba2:	91 09       	sbc	r25, r1
     ba4:	2e 81       	ldd	r18, Y+6	; 0x06
     ba6:	3f 81       	ldd	r19, Y+7	; 0x07
     ba8:	28 0f       	add	r18, r24
     baa:	39 1f       	adc	r19, r25
     bac:	3f 83       	std	Y+7, r19	; 0x07
     bae:	2e 83       	std	Y+6, r18	; 0x06
     bb0:	48 81       	ld	r20, Y
     bb2:	59 81       	ldd	r21, Y+1	; 0x01
     bb4:	24 17       	cp	r18, r20
     bb6:	35 07       	cpc	r19, r21
     bb8:	30 f4       	brcc	.+12     	; 0xbc6 <prvCopyDataToQueue+0x94>
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
     bc2:	9f 83       	std	Y+7, r25	; 0x07
     bc4:	8e 83       	std	Y+6, r24	; 0x06
     bc6:	02 30       	cpi	r16, 0x02	; 2
     bc8:	49 f4       	brne	.+18     	; 0xbdc <prvCopyDataToQueue+0xaa>
     bca:	11 23       	and	r17, r17
     bcc:	49 f0       	breq	.+18     	; 0xbe0 <prvCopyDataToQueue+0xae>
     bce:	11 50       	subi	r17, 0x01	; 1
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <prvCopyDataToQueue+0xb0>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <prvCopyDataToQueue+0xb0>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <prvCopyDataToQueue+0xb0>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <prvCopyDataToQueue+0xb0>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	1f 5f       	subi	r17, 0xFF	; 255
     be4:	1a 8f       	std	Y+26, r17	; 0x1a
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	08 95       	ret

00000bf0 <prvCopyDataFromQueue>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	44 8d       	ldd	r20, Z+28	; 0x1c
     bf4:	44 23       	and	r20, r20
     bf6:	a9 f0       	breq	.+42     	; 0xc22 <prvCopyDataFromQueue+0x32>
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	26 81       	ldd	r18, Z+6	; 0x06
     bfc:	37 81       	ldd	r19, Z+7	; 0x07
     bfe:	24 0f       	add	r18, r20
     c00:	35 1f       	adc	r19, r21
     c02:	37 83       	std	Z+7, r19	; 0x07
     c04:	26 83       	std	Z+6, r18	; 0x06
     c06:	84 81       	ldd	r24, Z+4	; 0x04
     c08:	95 81       	ldd	r25, Z+5	; 0x05
     c0a:	28 17       	cp	r18, r24
     c0c:	39 07       	cpc	r19, r25
     c0e:	20 f0       	brcs	.+8      	; 0xc18 <prvCopyDataFromQueue+0x28>
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	97 83       	std	Z+7, r25	; 0x07
     c16:	86 83       	std	Z+6, r24	; 0x06
     c18:	cb 01       	movw	r24, r22
     c1a:	66 81       	ldd	r22, Z+6	; 0x06
     c1c:	77 81       	ldd	r23, Z+7	; 0x07
     c1e:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <memcpy>
     c22:	08 95       	ret

00000c24 <prvUnlockQueue>:
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	8c 01       	movw	r16, r24
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	0f 92       	push	r0
     c36:	fc 01       	movw	r30, r24
     c38:	c6 8d       	ldd	r28, Z+30	; 0x1e
     c3a:	1c 16       	cp	r1, r28
     c3c:	ac f4       	brge	.+42     	; 0xc68 <prvUnlockQueue+0x44>
     c3e:	81 89       	ldd	r24, Z+17	; 0x11
     c40:	81 11       	cpse	r24, r1
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <prvUnlockQueue+0x2c>
     c44:	11 c0       	rjmp	.+34     	; 0xc68 <prvUnlockQueue+0x44>
     c46:	f8 01       	movw	r30, r16
     c48:	81 89       	ldd	r24, Z+17	; 0x11
     c4a:	81 11       	cpse	r24, r1
     c4c:	05 c0       	rjmp	.+10     	; 0xc58 <prvUnlockQueue+0x34>
     c4e:	0c c0       	rjmp	.+24     	; 0xc68 <prvUnlockQueue+0x44>
     c50:	78 01       	movw	r14, r16
     c52:	f1 e1       	ldi	r31, 0x11	; 17
     c54:	ef 0e       	add	r14, r31
     c56:	f1 1c       	adc	r15, r1
     c58:	c7 01       	movw	r24, r14
     c5a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xTaskRemoveFromEventList>
     c5e:	81 11       	cpse	r24, r1
     c60:	0e 94 23 10 	call	0x2046	; 0x2046 <vTaskMissedYield>
     c64:	c1 50       	subi	r28, 0x01	; 1
     c66:	79 f7       	brne	.-34     	; 0xc46 <prvUnlockQueue+0x22>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	f8 01       	movw	r30, r16
     c6c:	86 8f       	std	Z+30, r24	; 0x1e
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	0f 92       	push	r0
     c78:	c5 8d       	ldd	r28, Z+29	; 0x1d
     c7a:	1c 16       	cp	r1, r28
     c7c:	ac f4       	brge	.+42     	; 0xca8 <prvUnlockQueue+0x84>
     c7e:	80 85       	ldd	r24, Z+8	; 0x08
     c80:	81 11       	cpse	r24, r1
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <prvUnlockQueue+0x6c>
     c84:	11 c0       	rjmp	.+34     	; 0xca8 <prvUnlockQueue+0x84>
     c86:	f8 01       	movw	r30, r16
     c88:	80 85       	ldd	r24, Z+8	; 0x08
     c8a:	81 11       	cpse	r24, r1
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <prvUnlockQueue+0x74>
     c8e:	0c c0       	rjmp	.+24     	; 0xca8 <prvUnlockQueue+0x84>
     c90:	78 01       	movw	r14, r16
     c92:	f8 e0       	ldi	r31, 0x08	; 8
     c94:	ef 0e       	add	r14, r31
     c96:	f1 1c       	adc	r15, r1
     c98:	c7 01       	movw	r24, r14
     c9a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xTaskRemoveFromEventList>
     c9e:	81 11       	cpse	r24, r1
     ca0:	0e 94 23 10 	call	0x2046	; 0x2046 <vTaskMissedYield>
     ca4:	c1 50       	subi	r28, 0x01	; 1
     ca6:	79 f7       	brne	.-34     	; 0xc86 <prvUnlockQueue+0x62>
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	f8 01       	movw	r30, r16
     cac:	85 8f       	std	Z+29, r24	; 0x1d
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <xQueueGenericReset>:
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	ec 01       	movw	r28, r24
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	0f 92       	push	r0
     cca:	e8 81       	ld	r30, Y
     ccc:	f9 81       	ldd	r31, Y+1	; 0x01
     cce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cd0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	82 9f       	mul	r24, r18
     cd8:	a0 01       	movw	r20, r0
     cda:	83 9f       	mul	r24, r19
     cdc:	50 0d       	add	r21, r0
     cde:	92 9f       	mul	r25, r18
     ce0:	50 0d       	add	r21, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	4e 0f       	add	r20, r30
     ce6:	5f 1f       	adc	r21, r31
     ce8:	5d 83       	std	Y+5, r21	; 0x05
     cea:	4c 83       	std	Y+4, r20	; 0x04
     cec:	1a 8e       	std	Y+26, r1	; 0x1a
     cee:	fb 83       	std	Y+3, r31	; 0x03
     cf0:	ea 83       	std	Y+2, r30	; 0x02
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	82 9f       	mul	r24, r18
     cf6:	a0 01       	movw	r20, r0
     cf8:	83 9f       	mul	r24, r19
     cfa:	50 0d       	add	r21, r0
     cfc:	92 9f       	mul	r25, r18
     cfe:	50 0d       	add	r21, r0
     d00:	11 24       	eor	r1, r1
     d02:	cf 01       	movw	r24, r30
     d04:	84 0f       	add	r24, r20
     d06:	95 1f       	adc	r25, r21
     d08:	9f 83       	std	Y+7, r25	; 0x07
     d0a:	8e 83       	std	Y+6, r24	; 0x06
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	8d 8f       	std	Y+29, r24	; 0x1d
     d10:	8e 8f       	std	Y+30, r24	; 0x1e
     d12:	61 11       	cpse	r22, r1
     d14:	0b c0       	rjmp	.+22     	; 0xd2c <xQueueGenericReset+0x6e>
     d16:	88 85       	ldd	r24, Y+8	; 0x08
     d18:	88 23       	and	r24, r24
     d1a:	71 f0       	breq	.+28     	; 0xd38 <xQueueGenericReset+0x7a>
     d1c:	ce 01       	movw	r24, r28
     d1e:	08 96       	adiw	r24, 0x08	; 8
     d20:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xTaskRemoveFromEventList>
     d24:	88 23       	and	r24, r24
     d26:	41 f0       	breq	.+16     	; 0xd38 <xQueueGenericReset+0x7a>
     d28:	31 de       	rcall	.-926    	; 0x98c <vPortYield>
     d2a:	06 c0       	rjmp	.+12     	; 0xd38 <xQueueGenericReset+0x7a>
     d2c:	ce 01       	movw	r24, r28
     d2e:	08 96       	adiw	r24, 0x08	; 8
     d30:	f4 dc       	rcall	.-1560   	; 0x71a <vListInitialise>
     d32:	ce 01       	movw	r24, r28
     d34:	41 96       	adiw	r24, 0x11	; 17
     d36:	f1 dc       	rcall	.-1566   	; 0x71a <vListInitialise>
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <xQueueGenericCreate>:
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	08 2f       	mov	r16, r24
     d50:	16 2f       	mov	r17, r22
     d52:	f4 2e       	mov	r15, r20
     d54:	66 23       	and	r22, r22
     d56:	b9 f0       	breq	.+46     	; 0xd86 <xQueueGenericCreate+0x42>
     d58:	86 9f       	mul	r24, r22
     d5a:	c0 01       	movw	r24, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	81 96       	adiw	r24, 0x21	; 33
     d60:	ba dc       	rcall	.-1676   	; 0x6d6 <pvPortMalloc>
     d62:	ec 01       	movw	r28, r24
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	41 f4       	brne	.+16     	; 0xd78 <xQueueGenericCreate+0x34>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <xQueueGenericCreate+0x4e>
     d6a:	0b 8f       	std	Y+27, r16	; 0x1b
     d6c:	1c 8f       	std	Y+28, r17	; 0x1c
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	ce 01       	movw	r24, r28
     d72:	a5 df       	rcall	.-182    	; 0xcbe <xQueueGenericReset>
     d74:	f8 a2       	std	Y+32, r15	; 0x20
     d76:	0d c0       	rjmp	.+26     	; 0xd92 <xQueueGenericCreate+0x4e>
     d78:	81 96       	adiw	r24, 0x21	; 33
     d7a:	99 83       	std	Y+1, r25	; 0x01
     d7c:	88 83       	st	Y, r24
     d7e:	f5 cf       	rjmp	.-22     	; 0xd6a <xQueueGenericCreate+0x26>
     d80:	d9 83       	std	Y+1, r29	; 0x01
     d82:	c8 83       	st	Y, r28
     d84:	f2 cf       	rjmp	.-28     	; 0xd6a <xQueueGenericCreate+0x26>
     d86:	81 e2       	ldi	r24, 0x21	; 33
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a5 dc       	rcall	.-1718   	; 0x6d6 <pvPortMalloc>
     d8c:	ec 01       	movw	r28, r24
     d8e:	89 2b       	or	r24, r25
     d90:	b9 f7       	brne	.-18     	; 0xd80 <xQueueGenericCreate+0x3c>
     d92:	ce 01       	movw	r24, r28
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	08 95       	ret

00000da0 <xQueueGenericSend>:
     da0:	9f 92       	push	r9
     da2:	af 92       	push	r10
     da4:	bf 92       	push	r11
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <xQueueGenericSend+0x18>
     db8:	1f 92       	push	r1
     dba:	1f 92       	push	r1
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	8c 01       	movw	r16, r24
     dc2:	6b 01       	movw	r12, r22
     dc4:	5d 83       	std	Y+5, r21	; 0x05
     dc6:	4c 83       	std	Y+4, r20	; 0x04
     dc8:	a2 2e       	mov	r10, r18
     dca:	b1 2c       	mov	r11, r1
     dcc:	99 24       	eor	r9, r9
     dce:	93 94       	inc	r9
     dd0:	7c 01       	movw	r14, r24
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	e8 0e       	add	r14, r24
     dd6:	f1 1c       	adc	r15, r1
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	0f 92       	push	r0
     dde:	f8 01       	movw	r30, r16
     de0:	92 8d       	ldd	r25, Z+26	; 0x1a
     de2:	83 8d       	ldd	r24, Z+27	; 0x1b
     de4:	98 17       	cp	r25, r24
     de6:	18 f0       	brcs	.+6      	; 0xdee <xQueueGenericSend+0x4e>
     de8:	f2 e0       	ldi	r31, 0x02	; 2
     dea:	af 12       	cpse	r10, r31
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <xQueueGenericSend+0x7a>
     dee:	4a 2d       	mov	r20, r10
     df0:	b6 01       	movw	r22, r12
     df2:	c8 01       	movw	r24, r16
     df4:	9e de       	rcall	.-708    	; 0xb32 <prvCopyDataToQueue>
     df6:	f8 01       	movw	r30, r16
     df8:	91 89       	ldd	r25, Z+17	; 0x11
     dfa:	99 23       	and	r25, r25
     dfc:	41 f0       	breq	.+16     	; 0xe0e <xQueueGenericSend+0x6e>
     dfe:	c8 01       	movw	r24, r16
     e00:	41 96       	adiw	r24, 0x11	; 17
     e02:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xTaskRemoveFromEventList>
     e06:	88 23       	and	r24, r24
     e08:	21 f0       	breq	.+8      	; 0xe12 <xQueueGenericSend+0x72>
     e0a:	c0 dd       	rcall	.-1152   	; 0x98c <vPortYield>
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <xQueueGenericSend+0x72>
     e0e:	81 11       	cpse	r24, r1
     e10:	bd dd       	rcall	.-1158   	; 0x98c <vPortYield>
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	48 c0       	rjmp	.+144    	; 0xeaa <xQueueGenericSend+0x10a>
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	89 2b       	or	r24, r25
     e20:	21 f4       	brne	.+8      	; 0xe2a <xQueueGenericSend+0x8a>
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	40 c0       	rjmp	.+128    	; 0xeaa <xQueueGenericSend+0x10a>
     e2a:	b1 10       	cpse	r11, r1
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <xQueueGenericSend+0x98>
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskInternalSetTimeOutState>
     e36:	b9 2c       	mov	r11, r9
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	5d d6       	rcall	.+3258   	; 0x1af8 <vTaskSuspendAll>
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	0f 92       	push	r0
     e44:	f8 01       	movw	r30, r16
     e46:	85 8d       	ldd	r24, Z+29	; 0x1d
     e48:	8f 3f       	cpi	r24, 0xFF	; 255
     e4a:	09 f4       	brne	.+2      	; 0xe4e <xQueueGenericSend+0xae>
     e4c:	15 8e       	std	Z+29, r1	; 0x1d
     e4e:	f8 01       	movw	r30, r16
     e50:	86 8d       	ldd	r24, Z+30	; 0x1e
     e52:	8f 3f       	cpi	r24, 0xFF	; 255
     e54:	09 f4       	brne	.+2      	; 0xe58 <xQueueGenericSend+0xb8>
     e56:	16 8e       	std	Z+30, r1	; 0x1e
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	be 01       	movw	r22, r28
     e5e:	6c 5f       	subi	r22, 0xFC	; 252
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskCheckForTimeOut>
     e6a:	81 11       	cpse	r24, r1
     e6c:	1a c0       	rjmp	.+52     	; 0xea2 <xQueueGenericSend+0x102>
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	0f 92       	push	r0
     e74:	f8 01       	movw	r30, r16
     e76:	92 8d       	ldd	r25, Z+26	; 0x1a
     e78:	83 8d       	ldd	r24, Z+27	; 0x1b
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	98 13       	cpse	r25, r24
     e80:	0c c0       	rjmp	.+24     	; 0xe9a <xQueueGenericSend+0xfa>
     e82:	6c 81       	ldd	r22, Y+4	; 0x04
     e84:	7d 81       	ldd	r23, Y+5	; 0x05
     e86:	c7 01       	movw	r24, r14
     e88:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskPlaceOnEventList>
     e8c:	c8 01       	movw	r24, r16
     e8e:	ca de       	rcall	.-620    	; 0xc24 <prvUnlockQueue>
     e90:	fd d6       	rcall	.+3578   	; 0x1c8c <xTaskResumeAll>
     e92:	81 11       	cpse	r24, r1
     e94:	a1 cf       	rjmp	.-190    	; 0xdd8 <xQueueGenericSend+0x38>
     e96:	7a dd       	rcall	.-1292   	; 0x98c <vPortYield>
     e98:	9f cf       	rjmp	.-194    	; 0xdd8 <xQueueGenericSend+0x38>
     e9a:	c8 01       	movw	r24, r16
     e9c:	c3 de       	rcall	.-634    	; 0xc24 <prvUnlockQueue>
     e9e:	f6 d6       	rcall	.+3564   	; 0x1c8c <xTaskResumeAll>
     ea0:	9b cf       	rjmp	.-202    	; 0xdd8 <xQueueGenericSend+0x38>
     ea2:	c8 01       	movw	r24, r16
     ea4:	bf de       	rcall	.-642    	; 0xc24 <prvUnlockQueue>
     ea6:	f2 d6       	rcall	.+3556   	; 0x1c8c <xTaskResumeAll>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	9f 90       	pop	r9
     eca:	08 95       	ret

00000ecc <xQueueCreateMutex>:
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	48 2f       	mov	r20, r24
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	36 df       	rcall	.-404    	; 0xd44 <xQueueGenericCreate>
     ed8:	ec 01       	movw	r28, r24
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	59 f0       	breq	.+22     	; 0xef4 <xQueueCreateMutex+0x28>
     ede:	1d 82       	std	Y+5, r1	; 0x05
     ee0:	1c 82       	std	Y+4, r1	; 0x04
     ee2:	19 82       	std	Y+1, r1	; 0x01
     ee4:	18 82       	st	Y, r1
     ee6:	1e 82       	std	Y+6, r1	; 0x06
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	56 df       	rcall	.-340    	; 0xda0 <xQueueGenericSend>
     ef4:	ce 01       	movw	r24, r28
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <xQueueGenericSendFromISR>:
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	8a 01       	movw	r16, r20
     f0a:	fc 01       	movw	r30, r24
     f0c:	52 8d       	ldd	r21, Z+26	; 0x1a
     f0e:	33 8d       	ldd	r19, Z+27	; 0x1b
     f10:	53 17       	cp	r21, r19
     f12:	10 f0       	brcs	.+4      	; 0xf18 <xQueueGenericSendFromISR+0x1c>
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	e1 f4       	brne	.+56     	; 0xf50 <xQueueGenericSendFromISR+0x54>
     f18:	42 2f       	mov	r20, r18
     f1a:	78 01       	movw	r14, r16
     f1c:	ec 01       	movw	r28, r24
     f1e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f20:	08 de       	rcall	.-1008   	; 0xb32 <prvCopyDataToQueue>
     f22:	1f 3f       	cpi	r17, 0xFF	; 255
     f24:	79 f4       	brne	.+30     	; 0xf44 <xQueueGenericSendFromISR+0x48>
     f26:	89 89       	ldd	r24, Y+17	; 0x11
     f28:	88 23       	and	r24, r24
     f2a:	a1 f0       	breq	.+40     	; 0xf54 <xQueueGenericSendFromISR+0x58>
     f2c:	ce 01       	movw	r24, r28
     f2e:	41 96       	adiw	r24, 0x11	; 17
     f30:	f2 d7       	rcall	.+4068   	; 0x1f16 <xTaskRemoveFromEventList>
     f32:	88 23       	and	r24, r24
     f34:	89 f0       	breq	.+34     	; 0xf58 <xQueueGenericSendFromISR+0x5c>
     f36:	e1 14       	cp	r14, r1
     f38:	f1 04       	cpc	r15, r1
     f3a:	81 f0       	breq	.+32     	; 0xf5c <xQueueGenericSendFromISR+0x60>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	f7 01       	movw	r30, r14
     f40:	80 83       	st	Z, r24
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <xQueueGenericSendFromISR+0x62>
     f44:	ff 24       	eor	r15, r15
     f46:	f3 94       	inc	r15
     f48:	f1 0e       	add	r15, r17
     f4a:	fe 8e       	std	Y+30, r15	; 0x1e
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <xQueueGenericSendFromISR+0x62>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <xQueueGenericSendFromISR+0x62>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <xQueueGenericSendFromISR+0x62>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <xQueueGenericSendFromISR+0x62>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <xQueueReceive>:
     f6c:	9f 92       	push	r9
     f6e:	af 92       	push	r10
     f70:	bf 92       	push	r11
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	00 d0       	rcall	.+0      	; 0xf84 <xQueueReceive+0x18>
     f84:	1f 92       	push	r1
     f86:	1f 92       	push	r1
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	8c 01       	movw	r16, r24
     f8e:	5b 01       	movw	r10, r22
     f90:	5d 83       	std	Y+5, r21	; 0x05
     f92:	4c 83       	std	Y+4, r20	; 0x04
     f94:	e1 2c       	mov	r14, r1
     f96:	99 24       	eor	r9, r9
     f98:	93 94       	inc	r9
     f9a:	6c 01       	movw	r12, r24
     f9c:	81 e1       	ldi	r24, 0x11	; 17
     f9e:	c8 0e       	add	r12, r24
     fa0:	d1 1c       	adc	r13, r1
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	0f 92       	push	r0
     fa8:	f8 01       	movw	r30, r16
     faa:	f2 8c       	ldd	r15, Z+26	; 0x1a
     fac:	ff 20       	and	r15, r15
     fae:	91 f0       	breq	.+36     	; 0xfd4 <xQueueReceive+0x68>
     fb0:	b5 01       	movw	r22, r10
     fb2:	c8 01       	movw	r24, r16
     fb4:	1d de       	rcall	.-966    	; 0xbf0 <prvCopyDataFromQueue>
     fb6:	fa 94       	dec	r15
     fb8:	f8 01       	movw	r30, r16
     fba:	f2 8e       	std	Z+26, r15	; 0x1a
     fbc:	80 85       	ldd	r24, Z+8	; 0x08
     fbe:	88 23       	and	r24, r24
     fc0:	29 f0       	breq	.+10     	; 0xfcc <xQueueReceive+0x60>
     fc2:	c8 01       	movw	r24, r16
     fc4:	08 96       	adiw	r24, 0x08	; 8
     fc6:	a7 d7       	rcall	.+3918   	; 0x1f16 <xTaskRemoveFromEventList>
     fc8:	81 11       	cpse	r24, r1
     fca:	e0 dc       	rcall	.-1600   	; 0x98c <vPortYield>
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	44 c0       	rjmp	.+136    	; 0x105c <xQueueReceive+0xf0>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	89 2b       	or	r24, r25
     fda:	21 f4       	brne	.+8      	; 0xfe4 <xQueueReceive+0x78>
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	3c c0       	rjmp	.+120    	; 0x105c <xQueueReceive+0xf0>
     fe4:	e1 10       	cpse	r14, r1
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <xQueueReceive+0x84>
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	ec d7       	rcall	.+4056   	; 0x1fc6 <vTaskInternalSetTimeOutState>
     fee:	e9 2c       	mov	r14, r9
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	81 d5       	rcall	.+2818   	; 0x1af8 <vTaskSuspendAll>
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	0f 92       	push	r0
     ffc:	f8 01       	movw	r30, r16
     ffe:	85 8d       	ldd	r24, Z+29	; 0x1d
    1000:	8f 3f       	cpi	r24, 0xFF	; 255
    1002:	09 f4       	brne	.+2      	; 0x1006 <xQueueReceive+0x9a>
    1004:	15 8e       	std	Z+29, r1	; 0x1d
    1006:	f8 01       	movw	r30, r16
    1008:	86 8d       	ldd	r24, Z+30	; 0x1e
    100a:	8f 3f       	cpi	r24, 0xFF	; 255
    100c:	09 f4       	brne	.+2      	; 0x1010 <xQueueReceive+0xa4>
    100e:	16 8e       	std	Z+30, r1	; 0x1e
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	be 01       	movw	r22, r28
    1016:	6c 5f       	subi	r22, 0xFC	; 252
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	de d7       	rcall	.+4028   	; 0x1fdc <xTaskCheckForTimeOut>
    1020:	81 11       	cpse	r24, r1
    1022:	13 c0       	rjmp	.+38     	; 0x104a <xQueueReceive+0xde>
    1024:	c8 01       	movw	r24, r16
    1026:	7a dd       	rcall	.-1292   	; 0xb1c <prvIsQueueEmpty>
    1028:	88 23       	and	r24, r24
    102a:	59 f0       	breq	.+22     	; 0x1042 <xQueueReceive+0xd6>
    102c:	6c 81       	ldd	r22, Y+4	; 0x04
    102e:	7d 81       	ldd	r23, Y+5	; 0x05
    1030:	c6 01       	movw	r24, r12
    1032:	48 d7       	rcall	.+3728   	; 0x1ec4 <vTaskPlaceOnEventList>
    1034:	c8 01       	movw	r24, r16
    1036:	f6 dd       	rcall	.-1044   	; 0xc24 <prvUnlockQueue>
    1038:	29 d6       	rcall	.+3154   	; 0x1c8c <xTaskResumeAll>
    103a:	81 11       	cpse	r24, r1
    103c:	b2 cf       	rjmp	.-156    	; 0xfa2 <xQueueReceive+0x36>
    103e:	a6 dc       	rcall	.-1716   	; 0x98c <vPortYield>
    1040:	b0 cf       	rjmp	.-160    	; 0xfa2 <xQueueReceive+0x36>
    1042:	c8 01       	movw	r24, r16
    1044:	ef dd       	rcall	.-1058   	; 0xc24 <prvUnlockQueue>
    1046:	22 d6       	rcall	.+3140   	; 0x1c8c <xTaskResumeAll>
    1048:	ac cf       	rjmp	.-168    	; 0xfa2 <xQueueReceive+0x36>
    104a:	c8 01       	movw	r24, r16
    104c:	eb dd       	rcall	.-1066   	; 0xc24 <prvUnlockQueue>
    104e:	1e d6       	rcall	.+3132   	; 0x1c8c <xTaskResumeAll>
    1050:	c8 01       	movw	r24, r16
    1052:	64 dd       	rcall	.-1336   	; 0xb1c <prvIsQueueEmpty>
    1054:	88 23       	and	r24, r24
    1056:	09 f4       	brne	.+2      	; 0x105a <xQueueReceive+0xee>
    1058:	a4 cf       	rjmp	.-184    	; 0xfa2 <xQueueReceive+0x36>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	08 95       	ret

0000107e <xQueueSemaphoreTake>:
    107e:	bf 92       	push	r11
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	00 d0       	rcall	.+0      	; 0x1092 <xQueueSemaphoreTake+0x14>
    1092:	1f 92       	push	r1
    1094:	1f 92       	push	r1
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	8c 01       	movw	r16, r24
    109c:	7d 83       	std	Y+5, r23	; 0x05
    109e:	6c 83       	std	Y+4, r22	; 0x04
    10a0:	b1 2c       	mov	r11, r1
    10a2:	d1 2c       	mov	r13, r1
    10a4:	cc 24       	eor	r12, r12
    10a6:	c3 94       	inc	r12
    10a8:	7c 01       	movw	r14, r24
    10aa:	81 e1       	ldi	r24, 0x11	; 17
    10ac:	e8 0e       	add	r14, r24
    10ae:	f1 1c       	adc	r15, r1
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	0f 92       	push	r0
    10b6:	d8 01       	movw	r26, r16
    10b8:	5a 96       	adiw	r26, 0x1a	; 26
    10ba:	8c 91       	ld	r24, X
    10bc:	5a 97       	sbiw	r26, 0x1a	; 26
    10be:	88 23       	and	r24, r24
    10c0:	d9 f0       	breq	.+54     	; 0x10f8 <xQueueSemaphoreTake+0x7a>
    10c2:	81 50       	subi	r24, 0x01	; 1
    10c4:	5a 96       	adiw	r26, 0x1a	; 26
    10c6:	8c 93       	st	X, r24
    10c8:	5a 97       	sbiw	r26, 0x1a	; 26
    10ca:	8d 91       	ld	r24, X+
    10cc:	9c 91       	ld	r25, X
    10ce:	89 2b       	or	r24, r25
    10d0:	29 f4       	brne	.+10     	; 0x10dc <xQueueSemaphoreTake+0x5e>
    10d2:	0e 94 3c 11 	call	0x2278	; 0x2278 <pvTaskIncrementMutexHeldCount>
    10d6:	f8 01       	movw	r30, r16
    10d8:	95 83       	std	Z+5, r25	; 0x05
    10da:	84 83       	std	Z+4, r24	; 0x04
    10dc:	d8 01       	movw	r26, r16
    10de:	18 96       	adiw	r26, 0x08	; 8
    10e0:	8c 91       	ld	r24, X
    10e2:	88 23       	and	r24, r24
    10e4:	29 f0       	breq	.+10     	; 0x10f0 <xQueueSemaphoreTake+0x72>
    10e6:	c8 01       	movw	r24, r16
    10e8:	08 96       	adiw	r24, 0x08	; 8
    10ea:	15 d7       	rcall	.+3626   	; 0x1f16 <xTaskRemoveFromEventList>
    10ec:	81 11       	cpse	r24, r1
    10ee:	4e dc       	rcall	.-1892   	; 0x98c <vPortYield>
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	71 c0       	rjmp	.+226    	; 0x11da <xQueueSemaphoreTake+0x15c>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	89 2b       	or	r24, r25
    10fe:	21 f4       	brne	.+8      	; 0x1108 <xQueueSemaphoreTake+0x8a>
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	69 c0       	rjmp	.+210    	; 0x11da <xQueueSemaphoreTake+0x15c>
    1108:	d1 10       	cpse	r13, r1
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <xQueueSemaphoreTake+0x96>
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	5a d7       	rcall	.+3764   	; 0x1fc6 <vTaskInternalSetTimeOutState>
    1112:	dc 2c       	mov	r13, r12
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	ef d4       	rcall	.+2526   	; 0x1af8 <vTaskSuspendAll>
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	0f 92       	push	r0
    1120:	f8 01       	movw	r30, r16
    1122:	85 8d       	ldd	r24, Z+29	; 0x1d
    1124:	8f 3f       	cpi	r24, 0xFF	; 255
    1126:	09 f4       	brne	.+2      	; 0x112a <xQueueSemaphoreTake+0xac>
    1128:	15 8e       	std	Z+29, r1	; 0x1d
    112a:	d8 01       	movw	r26, r16
    112c:	5e 96       	adiw	r26, 0x1e	; 30
    112e:	8c 91       	ld	r24, X
    1130:	5e 97       	sbiw	r26, 0x1e	; 30
    1132:	8f 3f       	cpi	r24, 0xFF	; 255
    1134:	11 f4       	brne	.+4      	; 0x113a <xQueueSemaphoreTake+0xbc>
    1136:	5e 96       	adiw	r26, 0x1e	; 30
    1138:	1c 92       	st	X, r1
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	be 01       	movw	r22, r28
    1140:	6c 5f       	subi	r22, 0xFC	; 252
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	49 d7       	rcall	.+3730   	; 0x1fdc <xTaskCheckForTimeOut>
    114a:	81 11       	cpse	r24, r1
    114c:	21 c0       	rjmp	.+66     	; 0x1190 <xQueueSemaphoreTake+0x112>
    114e:	c8 01       	movw	r24, r16
    1150:	e5 dc       	rcall	.-1590   	; 0xb1c <prvIsQueueEmpty>
    1152:	88 23       	and	r24, r24
    1154:	c9 f0       	breq	.+50     	; 0x1188 <xQueueSemaphoreTake+0x10a>
    1156:	f8 01       	movw	r30, r16
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	89 2b       	or	r24, r25
    115e:	49 f4       	brne	.+18     	; 0x1172 <xQueueSemaphoreTake+0xf4>
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	0f 92       	push	r0
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	95 81       	ldd	r25, Z+5	; 0x05
    116a:	84 d7       	rcall	.+3848   	; 0x2074 <xTaskPriorityInherit>
    116c:	b8 2e       	mov	r11, r24
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	6c 81       	ldd	r22, Y+4	; 0x04
    1174:	7d 81       	ldd	r23, Y+5	; 0x05
    1176:	c7 01       	movw	r24, r14
    1178:	a5 d6       	rcall	.+3402   	; 0x1ec4 <vTaskPlaceOnEventList>
    117a:	c8 01       	movw	r24, r16
    117c:	53 dd       	rcall	.-1370   	; 0xc24 <prvUnlockQueue>
    117e:	86 d5       	rcall	.+2828   	; 0x1c8c <xTaskResumeAll>
    1180:	81 11       	cpse	r24, r1
    1182:	96 cf       	rjmp	.-212    	; 0x10b0 <xQueueSemaphoreTake+0x32>
    1184:	03 dc       	rcall	.-2042   	; 0x98c <vPortYield>
    1186:	94 cf       	rjmp	.-216    	; 0x10b0 <xQueueSemaphoreTake+0x32>
    1188:	c8 01       	movw	r24, r16
    118a:	4c dd       	rcall	.-1384   	; 0xc24 <prvUnlockQueue>
    118c:	7f d5       	rcall	.+2814   	; 0x1c8c <xTaskResumeAll>
    118e:	90 cf       	rjmp	.-224    	; 0x10b0 <xQueueSemaphoreTake+0x32>
    1190:	c8 01       	movw	r24, r16
    1192:	48 dd       	rcall	.-1392   	; 0xc24 <prvUnlockQueue>
    1194:	7b d5       	rcall	.+2806   	; 0x1c8c <xTaskResumeAll>
    1196:	c8 01       	movw	r24, r16
    1198:	c1 dc       	rcall	.-1662   	; 0xb1c <prvIsQueueEmpty>
    119a:	88 23       	and	r24, r24
    119c:	09 f4       	brne	.+2      	; 0x11a0 <xQueueSemaphoreTake+0x122>
    119e:	88 cf       	rjmp	.-240    	; 0x10b0 <xQueueSemaphoreTake+0x32>
    11a0:	bb 20       	and	r11, r11
    11a2:	d1 f0       	breq	.+52     	; 0x11d8 <xQueueSemaphoreTake+0x15a>
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	0f 92       	push	r0
    11aa:	f8 01       	movw	r30, r16
    11ac:	81 89       	ldd	r24, Z+17	; 0x11
    11ae:	88 23       	and	r24, r24
    11b0:	39 f0       	breq	.+14     	; 0x11c0 <xQueueSemaphoreTake+0x142>
    11b2:	06 88       	ldd	r0, Z+22	; 0x16
    11b4:	f7 89       	ldd	r31, Z+23	; 0x17
    11b6:	e0 2d       	mov	r30, r0
    11b8:	80 81       	ld	r24, Z
    11ba:	64 e0       	ldi	r22, 0x04	; 4
    11bc:	68 1b       	sub	r22, r24
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <xQueueSemaphoreTake+0x144>
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	d8 01       	movw	r26, r16
    11c4:	14 96       	adiw	r26, 0x04	; 4
    11c6:	8d 91       	ld	r24, X+
    11c8:	9c 91       	ld	r25, X
    11ca:	15 97       	sbiw	r26, 0x05	; 5
    11cc:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <vTaskPriorityDisinheritAfterTimeout>
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <xQueueSemaphoreTake+0x15c>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	08 95       	ret

000011f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	0f 92       	push	r0
    1204:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1206:	8f 3f       	cpi	r24, 0xFF	; 255
    1208:	09 f4       	brne	.+2      	; 0x120c <vQueueWaitForMessageRestricted+0x14>
    120a:	1d 8e       	std	Y+29, r1	; 0x1d
    120c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    120e:	8f 3f       	cpi	r24, 0xFF	; 255
    1210:	09 f4       	brne	.+2      	; 0x1214 <vQueueWaitForMessageRestricted+0x1c>
    1212:	1e 8e       	std	Y+30, r1	; 0x1e
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1218:	8a 8d       	ldd	r24, Y+26	; 0x1a
    121a:	81 11       	cpse	r24, r1
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    121e:	ce 01       	movw	r24, r28
    1220:	41 96       	adiw	r24, 0x11	; 17
    1222:	61 d6       	rcall	.+3266   	; 0x1ee6 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1224:	ce 01       	movw	r24, r28
    1226:	fe dc       	rcall	.-1540   	; 0xc24 <prvUnlockQueue>
    }
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    122e:	fc 01       	movw	r30, r24
    1230:	44 81       	ldd	r20, Z+4	; 0x04
    1232:	55 81       	ldd	r21, Z+5	; 0x05
    1234:	22 81       	ldd	r18, Z+2	; 0x02
    1236:	33 81       	ldd	r19, Z+3	; 0x03
    1238:	24 0f       	add	r18, r20
    123a:	35 1f       	adc	r19, r21
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	b9 01       	movw	r22, r18
    1242:	68 1b       	sub	r22, r24
    1244:	79 0b       	sbc	r23, r25
    1246:	cb 01       	movw	r24, r22
    1248:	64 17       	cp	r22, r20
    124a:	75 07       	cpc	r23, r21
    124c:	10 f0       	brcs	.+4      	; 0x1252 <prvBytesInBuffer+0x24>
    124e:	84 1b       	sub	r24, r20
    1250:	95 0b       	sbc	r25, r21
    1252:	08 95       	ret

00001254 <prvWriteBytesToBuffer>:
    1254:	af 92       	push	r10
    1256:	bf 92       	push	r11
    1258:	cf 92       	push	r12
    125a:	df 92       	push	r13
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	6c 01       	movw	r12, r24
    126a:	5b 01       	movw	r10, r22
    126c:	7a 01       	movw	r14, r20
    126e:	fc 01       	movw	r30, r24
    1270:	c2 81       	ldd	r28, Z+2	; 0x02
    1272:	d3 81       	ldd	r29, Z+3	; 0x03
    1274:	04 81       	ldd	r16, Z+4	; 0x04
    1276:	15 81       	ldd	r17, Z+5	; 0x05
    1278:	0c 1b       	sub	r16, r28
    127a:	1d 0b       	sbc	r17, r29
    127c:	40 17       	cp	r20, r16
    127e:	51 07       	cpc	r21, r17
    1280:	08 f4       	brcc	.+2      	; 0x1284 <prvWriteBytesToBuffer+0x30>
    1282:	8a 01       	movw	r16, r20
    1284:	f6 01       	movw	r30, r12
    1286:	84 85       	ldd	r24, Z+12	; 0x0c
    1288:	95 85       	ldd	r25, Z+13	; 0x0d
    128a:	a8 01       	movw	r20, r16
    128c:	b5 01       	movw	r22, r10
    128e:	8c 0f       	add	r24, r28
    1290:	9d 1f       	adc	r25, r29
    1292:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memcpy>
    1296:	0e 15       	cp	r16, r14
    1298:	1f 05       	cpc	r17, r15
    129a:	58 f4       	brcc	.+22     	; 0x12b2 <prvWriteBytesToBuffer+0x5e>
    129c:	a7 01       	movw	r20, r14
    129e:	40 1b       	sub	r20, r16
    12a0:	51 0b       	sbc	r21, r17
    12a2:	b5 01       	movw	r22, r10
    12a4:	60 0f       	add	r22, r16
    12a6:	71 1f       	adc	r23, r17
    12a8:	f6 01       	movw	r30, r12
    12aa:	84 85       	ldd	r24, Z+12	; 0x0c
    12ac:	95 85       	ldd	r25, Z+13	; 0x0d
    12ae:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memcpy>
    12b2:	ce 01       	movw	r24, r28
    12b4:	8e 0d       	add	r24, r14
    12b6:	9f 1d       	adc	r25, r15
    12b8:	f6 01       	movw	r30, r12
    12ba:	24 81       	ldd	r18, Z+4	; 0x04
    12bc:	35 81       	ldd	r19, Z+5	; 0x05
    12be:	82 17       	cp	r24, r18
    12c0:	93 07       	cpc	r25, r19
    12c2:	10 f0       	brcs	.+4      	; 0x12c8 <prvWriteBytesToBuffer+0x74>
    12c4:	82 1b       	sub	r24, r18
    12c6:	93 0b       	sbc	r25, r19
    12c8:	f6 01       	movw	r30, r12
    12ca:	93 83       	std	Z+3, r25	; 0x03
    12cc:	82 83       	std	Z+2, r24	; 0x02
    12ce:	c7 01       	movw	r24, r14
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	bf 90       	pop	r11
    12e2:	af 90       	pop	r10
    12e4:	08 95       	ret

000012e6 <prvWriteMessageToBuffer>:
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	1f 92       	push	r1
    12f8:	1f 92       	push	r1
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	5a 83       	std	Y+2, r21	; 0x02
    1300:	49 83       	std	Y+1, r20	; 0x01
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	c9 f0       	breq	.+50     	; 0x133a <prvWriteMessageToBuffer+0x54>
    1308:	6b 01       	movw	r12, r22
    130a:	7c 01       	movw	r14, r24
    130c:	fc 01       	movw	r30, r24
    130e:	86 85       	ldd	r24, Z+14	; 0x0e
    1310:	80 fd       	sbrc	r24, 0
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <prvWriteMessageToBuffer+0x3e>
    1314:	ca 01       	movw	r24, r20
    1316:	24 17       	cp	r18, r20
    1318:	35 07       	cpc	r19, r21
    131a:	08 f4       	brcc	.+2      	; 0x131e <prvWriteMessageToBuffer+0x38>
    131c:	c9 01       	movw	r24, r18
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	11 c0       	rjmp	.+34     	; 0x1346 <prvWriteMessageToBuffer+0x60>
    1324:	20 17       	cp	r18, r16
    1326:	31 07       	cpc	r19, r17
    1328:	58 f0       	brcs	.+22     	; 0x1340 <prvWriteMessageToBuffer+0x5a>
    132a:	42 e0       	ldi	r20, 0x02	; 2
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	be 01       	movw	r22, r28
    1330:	6f 5f       	subi	r22, 0xFF	; 255
    1332:	7f 4f       	sbci	r23, 0xFF	; 255
    1334:	c7 01       	movw	r24, r14
    1336:	8e df       	rcall	.-228    	; 0x1254 <prvWriteBytesToBuffer>
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <prvWriteMessageToBuffer+0x60>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	08 c0       	rjmp	.+16     	; 0x1350 <prvWriteMessageToBuffer+0x6a>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <prvWriteMessageToBuffer+0x6a>
    1346:	49 81       	ldd	r20, Y+1	; 0x01
    1348:	5a 81       	ldd	r21, Y+2	; 0x02
    134a:	b6 01       	movw	r22, r12
    134c:	c7 01       	movw	r24, r14
    134e:	82 df       	rcall	.-252    	; 0x1254 <prvWriteBytesToBuffer>
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	08 95       	ret

00001366 <prvReadBytesFromBuffer>:
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	7c 01       	movw	r14, r24
    137c:	5b 01       	movw	r10, r22
    137e:	e9 01       	movw	r28, r18
    1380:	42 17       	cp	r20, r18
    1382:	53 07       	cpc	r21, r19
    1384:	08 f4       	brcc	.+2      	; 0x1388 <prvReadBytesFromBuffer+0x22>
    1386:	ea 01       	movw	r28, r20
    1388:	20 97       	sbiw	r28, 0x00	; 0
    138a:	79 f1       	breq	.+94     	; 0x13ea <prvReadBytesFromBuffer+0x84>
    138c:	f7 01       	movw	r30, r14
    138e:	00 81       	ld	r16, Z
    1390:	11 81       	ldd	r17, Z+1	; 0x01
    1392:	c4 80       	ldd	r12, Z+4	; 0x04
    1394:	d5 80       	ldd	r13, Z+5	; 0x05
    1396:	c0 1a       	sub	r12, r16
    1398:	d1 0a       	sbc	r13, r17
    139a:	cc 15       	cp	r28, r12
    139c:	dd 05       	cpc	r29, r13
    139e:	08 f4       	brcc	.+2      	; 0x13a2 <prvReadBytesFromBuffer+0x3c>
    13a0:	6e 01       	movw	r12, r28
    13a2:	f7 01       	movw	r30, r14
    13a4:	64 85       	ldd	r22, Z+12	; 0x0c
    13a6:	75 85       	ldd	r23, Z+13	; 0x0d
    13a8:	60 0f       	add	r22, r16
    13aa:	71 1f       	adc	r23, r17
    13ac:	a6 01       	movw	r20, r12
    13ae:	c5 01       	movw	r24, r10
    13b0:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memcpy>
    13b4:	cc 16       	cp	r12, r28
    13b6:	dd 06       	cpc	r13, r29
    13b8:	58 f4       	brcc	.+22     	; 0x13d0 <prvReadBytesFromBuffer+0x6a>
    13ba:	ae 01       	movw	r20, r28
    13bc:	4c 19       	sub	r20, r12
    13be:	5d 09       	sbc	r21, r13
    13c0:	f7 01       	movw	r30, r14
    13c2:	64 85       	ldd	r22, Z+12	; 0x0c
    13c4:	75 85       	ldd	r23, Z+13	; 0x0d
    13c6:	c5 01       	movw	r24, r10
    13c8:	8c 0d       	add	r24, r12
    13ca:	9d 1d       	adc	r25, r13
    13cc:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <memcpy>
    13d0:	0c 0f       	add	r16, r28
    13d2:	1d 1f       	adc	r17, r29
    13d4:	f7 01       	movw	r30, r14
    13d6:	84 81       	ldd	r24, Z+4	; 0x04
    13d8:	95 81       	ldd	r25, Z+5	; 0x05
    13da:	08 17       	cp	r16, r24
    13dc:	19 07       	cpc	r17, r25
    13de:	10 f0       	brcs	.+4      	; 0x13e4 <prvReadBytesFromBuffer+0x7e>
    13e0:	08 1b       	sub	r16, r24
    13e2:	19 0b       	sbc	r17, r25
    13e4:	f7 01       	movw	r30, r14
    13e6:	11 83       	std	Z+1, r17	; 0x01
    13e8:	00 83       	st	Z, r16
    13ea:	ce 01       	movw	r24, r28
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	bf 90       	pop	r11
    13fe:	af 90       	pop	r10
    1400:	08 95       	ret

00001402 <xStreamBufferGenericCreate>:
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	eb 01       	movw	r28, r22
    140e:	11 e0       	ldi	r17, 0x01	; 1
    1410:	41 30       	cpi	r20, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <xStreamBufferGenericCreate+0x14>
    1414:	10 e0       	ldi	r17, 0x00	; 0
    1416:	20 97       	sbiw	r28, 0x00	; 0
    1418:	11 f4       	brne	.+4      	; 0x141e <xStreamBufferGenericCreate+0x1c>
    141a:	c1 e0       	ldi	r28, 0x01	; 1
    141c:	d0 e0       	ldi	r29, 0x00	; 0
    141e:	7c 01       	movw	r14, r24
    1420:	2f ef       	ldi	r18, 0xFF	; 255
    1422:	e2 1a       	sub	r14, r18
    1424:	f2 0a       	sbc	r15, r18
    1426:	41 96       	adiw	r24, 0x11	; 17
    1428:	56 d9       	rcall	.-3412   	; 0x6d6 <pvPortMalloc>
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	81 f0       	breq	.+32     	; 0x144e <xStreamBufferGenericCreate+0x4c>
    142e:	20 e1       	ldi	r18, 0x10	; 16
    1430:	fc 01       	movw	r30, r24
    1432:	11 92       	st	Z+, r1
    1434:	2a 95       	dec	r18
    1436:	e9 f7       	brne	.-6      	; 0x1432 <xStreamBufferGenericCreate+0x30>
    1438:	9c 01       	movw	r18, r24
    143a:	20 5f       	subi	r18, 0xF0	; 240
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	fc 01       	movw	r30, r24
    1440:	35 87       	std	Z+13, r19	; 0x0d
    1442:	24 87       	std	Z+12, r18	; 0x0c
    1444:	f5 82       	std	Z+5, r15	; 0x05
    1446:	e4 82       	std	Z+4, r14	; 0x04
    1448:	d7 83       	std	Z+7, r29	; 0x07
    144a:	c6 83       	std	Z+6, r28	; 0x06
    144c:	16 87       	std	Z+14, r17	; 0x0e
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	08 95       	ret

0000145a <xStreamBufferSpacesAvailable>:
    145a:	fc 01       	movw	r30, r24
    145c:	24 81       	ldd	r18, Z+4	; 0x04
    145e:	35 81       	ldd	r19, Z+5	; 0x05
    1460:	80 81       	ld	r24, Z
    1462:	91 81       	ldd	r25, Z+1	; 0x01
    1464:	42 81       	ldd	r20, Z+2	; 0x02
    1466:	53 81       	ldd	r21, Z+3	; 0x03
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	84 1b       	sub	r24, r20
    1470:	95 0b       	sbc	r25, r21
    1472:	82 17       	cp	r24, r18
    1474:	93 07       	cpc	r25, r19
    1476:	10 f0       	brcs	.+4      	; 0x147c <xStreamBufferSpacesAvailable+0x22>
    1478:	82 1b       	sub	r24, r18
    147a:	93 0b       	sbc	r25, r19
    147c:	08 95       	ret

0000147e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    147e:	4f 92       	push	r4
    1480:	5f 92       	push	r5
    1482:	6f 92       	push	r6
    1484:	7f 92       	push	r7
    1486:	8f 92       	push	r8
    1488:	9f 92       	push	r9
    148a:	af 92       	push	r10
    148c:	bf 92       	push	r11
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <xStreamBufferSend+0x22>
    14a0:	1f 92       	push	r1
    14a2:	1f 92       	push	r1
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	6c 01       	movw	r12, r24
    14aa:	2b 01       	movw	r4, r22
    14ac:	3a 01       	movw	r6, r20
    14ae:	3d 83       	std	Y+5, r19	; 0x05
    14b0:	2c 83       	std	Y+4, r18	; 0x04

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14b2:	fc 01       	movw	r30, r24
    14b4:	86 85       	ldd	r24, Z+14	; 0x0e
    14b6:	80 ff       	sbrs	r24, 0
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <xStreamBufferSend+0x46>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14ba:	4a 01       	movw	r8, r20
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	8f 0e       	add	r8, r31
    14c0:	91 1c       	adc	r9, r1
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <xStreamBufferSend+0x48>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    14c4:	4a 01       	movw	r8, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	89 2b       	or	r24, r25
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <xStreamBufferSend+0x52>
    14ce:	32 c0       	rjmp	.+100    	; 0x1534 <xStreamBufferSend+0xb6>
    {
        vTaskSetTimeOutState( &xTimeOut );
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	68 d5       	rcall	.+2768   	; 0x1fa6 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    14dc:	c6 01       	movw	r24, r12
    14de:	bd df       	rcall	.-134    	; 0x145a <xStreamBufferSpacesAvailable>
    14e0:	5c 01       	movw	r10, r24

                if( xSpace < xRequiredSpace )
    14e2:	88 15       	cp	r24, r8
    14e4:	99 05       	cpc	r25, r9
    14e6:	08 f5       	brcc	.+66     	; 0x152a <xStreamBufferSend+0xac>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    14f0:	ae d5       	rcall	.+2908   	; 0x204e <xTaskGetCurrentTaskHandle>
    14f2:	f6 01       	movw	r30, r12
    14f4:	93 87       	std	Z+11, r25	; 0x0b
    14f6:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    14fc:	ec 80       	ldd	r14, Y+4	; 0x04
    14fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1500:	00 e0       	ldi	r16, 0x00	; 0
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	cb 01       	movw	r24, r22
    1510:	c5 d6       	rcall	.+3466   	; 0x229c <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1512:	f6 01       	movw	r30, r12
    1514:	13 86       	std	Z+11, r1	; 0x0b
    1516:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1518:	be 01       	movw	r22, r28
    151a:	6c 5f       	subi	r22, 0xFC	; 252
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	ce 01       	movw	r24, r28
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	5c d5       	rcall	.+2744   	; 0x1fdc <xTaskCheckForTimeOut>
    1524:	88 23       	and	r24, r24
    1526:	b9 f2       	breq	.-82     	; 0x14d6 <xStreamBufferSend+0x58>
    1528:	02 c0       	rjmp	.+4      	; 0x152e <xStreamBufferSend+0xb0>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    152a:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	a1 14       	cp	r10, r1
    1530:	b1 04       	cpc	r11, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1532:	19 f4       	brne	.+6      	; 0x153a <xStreamBufferSend+0xbc>
    1534:	c6 01       	movw	r24, r12
    1536:	91 df       	rcall	.-222    	; 0x145a <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1538:	5c 01       	movw	r10, r24
    153a:	84 01       	movw	r16, r8
    153c:	95 01       	movw	r18, r10
    153e:	a3 01       	movw	r20, r6
    1540:	b2 01       	movw	r22, r4
    1542:	c6 01       	movw	r24, r12
    1544:	d0 de       	rcall	.-608    	; 0x12e6 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1546:	7c 01       	movw	r14, r24
    1548:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    154a:	d9 f0       	breq	.+54     	; 0x1582 <xStreamBufferSend+0x104>
    154c:	c6 01       	movw	r24, r12
    154e:	6f de       	rcall	.-802    	; 0x122e <prvBytesInBuffer>
    1550:	f6 01       	movw	r30, r12
    1552:	26 81       	ldd	r18, Z+6	; 0x06
    1554:	37 81       	ldd	r19, Z+7	; 0x07
    1556:	82 17       	cp	r24, r18
    1558:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    155a:	98 f0       	brcs	.+38     	; 0x1582 <xStreamBufferSend+0x104>
    155c:	cd d2       	rcall	.+1434   	; 0x1af8 <vTaskSuspendAll>
    155e:	f6 01       	movw	r30, r12
    1560:	80 85       	ldd	r24, Z+8	; 0x08
    1562:	91 85       	ldd	r25, Z+9	; 0x09
    1564:	89 2b       	or	r24, r25
    1566:	61 f0       	breq	.+24     	; 0x1580 <xStreamBufferSend+0x102>
    1568:	80 85       	ldd	r24, Z+8	; 0x08
    156a:	91 85       	ldd	r25, Z+9	; 0x09
    156c:	00 e0       	ldi	r16, 0x00	; 0
    156e:	10 e0       	ldi	r17, 0x00	; 0
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	ba 01       	movw	r22, r20
    1578:	14 d7       	rcall	.+3624   	; 0x23a2 <xTaskGenericNotify>
    157a:	f6 01       	movw	r30, r12
    157c:	11 86       	std	Z+9, r1	; 0x09
    157e:	10 86       	std	Z+8, r1	; 0x08
    1580:	85 d3       	rcall	.+1802   	; 0x1c8c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1582:	c7 01       	movw	r24, r14
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	bf 90       	pop	r11
    15a0:	af 90       	pop	r10
    15a2:	9f 90       	pop	r9
    15a4:	8f 90       	pop	r8
    15a6:	7f 90       	pop	r7
    15a8:	6f 90       	pop	r6
    15aa:	5f 90       	pop	r5
    15ac:	4f 90       	pop	r4
    15ae:	08 95       	ret

000015b0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	ec 01       	movw	r28, r24
    15c6:	5b 01       	movw	r10, r22
    15c8:	6a 01       	movw	r12, r20
    15ca:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ce:	80 ff       	sbrs	r24, 0
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    15d2:	8a 01       	movw	r16, r20
    15d4:	0e 5f       	subi	r16, 0xFE	; 254
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    15da:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15dc:	ce 01       	movw	r24, r28
    15de:	3d df       	rcall	.-390    	; 0x145a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    15e0:	9c 01       	movw	r18, r24
    15e2:	a6 01       	movw	r20, r12
    15e4:	b5 01       	movw	r22, r10
    15e6:	ce 01       	movw	r24, r28
    15e8:	7e de       	rcall	.-772    	; 0x12e6 <prvWriteMessageToBuffer>
    15ea:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    15ec:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    15ee:	b1 f0       	breq	.+44     	; 0x161c <xStreamBufferSendFromISR+0x6c>
    15f0:	ce 01       	movw	r24, r28
    15f2:	1d de       	rcall	.-966    	; 0x122e <prvBytesInBuffer>
    15f4:	2e 81       	ldd	r18, Y+6	; 0x06
    15f6:	3f 81       	ldd	r19, Y+7	; 0x07
    15f8:	82 17       	cp	r24, r18
    15fa:	93 07       	cpc	r25, r19
    15fc:	78 f0       	brcs	.+30     	; 0x161c <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    15fe:	88 85       	ldd	r24, Y+8	; 0x08
    1600:	99 85       	ldd	r25, Y+9	; 0x09
    1602:	89 2b       	or	r24, r25
    1604:	59 f0       	breq	.+22     	; 0x161c <xStreamBufferSendFromISR+0x6c>
    1606:	88 85       	ldd	r24, Y+8	; 0x08
    1608:	99 85       	ldd	r25, Y+9	; 0x09
    160a:	00 e0       	ldi	r16, 0x00	; 0
    160c:	10 e0       	ldi	r17, 0x00	; 0
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	ba 01       	movw	r22, r20
    1616:	43 d7       	rcall	.+3718   	; 0x249e <xTaskGenericNotifyFromISR>
    1618:	19 86       	std	Y+9, r1	; 0x09
    161a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    161c:	c6 01       	movw	r24, r12
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	08 95       	ret

00001634 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1634:	6f 92       	push	r6
    1636:	7f 92       	push	r7
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	1f 92       	push	r1
    1652:	1f 92       	push	r1
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	6c 01       	movw	r12, r24
    165a:	3b 01       	movw	r6, r22
    165c:	4a 01       	movw	r8, r20
    165e:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1660:	fc 01       	movw	r30, r24
    1662:	86 85       	ldd	r24, Z+14	; 0x0e
    1664:	80 fd       	sbrc	r24, 0
    1666:	03 c0       	rjmp	.+6      	; 0x166e <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1668:	a1 2c       	mov	r10, r1
    166a:	b1 2c       	mov	r11, r1
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    166e:	68 94       	set
    1670:	aa 24       	eor	r10, r10
    1672:	a1 f8       	bld	r10, 1
    1674:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1676:	e1 14       	cp	r14, r1
    1678:	f1 04       	cpc	r15, r1
    167a:	29 f1       	breq	.+74     	; 0x16c6 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1682:	c6 01       	movw	r24, r12
    1684:	d4 dd       	rcall	.-1112   	; 0x122e <prvBytesInBuffer>
    1686:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1688:	a8 16       	cp	r10, r24
    168a:	b9 06       	cpc	r11, r25
    168c:	38 f0       	brcs	.+14     	; 0x169c <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1692:	95 d7       	rcall	.+3882   	; 0x25be <xTaskNotifyStateClear>
    1694:	dc d4       	rcall	.+2488   	; 0x204e <xTaskGetCurrentTaskHandle>
    1696:	f6 01       	movw	r30, r12
    1698:	91 87       	std	Z+9, r25	; 0x09
    169a:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    16a0:	a0 16       	cp	r10, r16
    16a2:	b1 06       	cpc	r11, r17
    16a4:	b0 f0       	brcs	.+44     	; 0x16d2 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    16a6:	00 e0       	ldi	r16, 0x00	; 0
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	cb 01       	movw	r24, r22
    16b6:	f2 d5       	rcall	.+3044   	; 0x229c <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    16b8:	f6 01       	movw	r30, r12
    16ba:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16bc:	10 86       	std	Z+8, r1	; 0x08
    16be:	c6 01       	movw	r24, r12
    16c0:	b6 dd       	rcall	.-1172   	; 0x122e <prvBytesInBuffer>
    16c2:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <xStreamBufferReceive+0x98>
    16c6:	c6 01       	movw	r24, r12
    16c8:	b2 dd       	rcall	.-1180   	; 0x122e <prvBytesInBuffer>
    16ca:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    16cc:	a0 16       	cp	r10, r16
    16ce:	b1 06       	cpc	r11, r17
    16d0:	b8 f5       	brcc	.+110    	; 0x1740 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    16d2:	a1 14       	cp	r10, r1
    16d4:	b1 04       	cpc	r11, r1
    16d6:	c1 f0       	breq	.+48     	; 0x1708 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    16d8:	f6 01       	movw	r30, r12
    16da:	e0 80       	ld	r14, Z
    16dc:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    16de:	98 01       	movw	r18, r16
    16e0:	a5 01       	movw	r20, r10
    16e2:	be 01       	movw	r22, r28
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	c6 01       	movw	r24, r12
    16ea:	3d de       	rcall	.-902    	; 0x1366 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    16f0:	0a 19       	sub	r16, r10
    16f2:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    16f4:	88 16       	cp	r8, r24
    16f6:	99 06       	cpc	r9, r25
    16f8:	30 f4       	brcc	.+12     	; 0x1706 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    16fa:	f6 01       	movw	r30, r12
    16fc:	f1 82       	std	Z+1, r15	; 0x01
    16fe:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1700:	81 2c       	mov	r8, r1
    1702:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1706:	4c 01       	movw	r8, r24
    1708:	98 01       	movw	r18, r16
    170a:	a4 01       	movw	r20, r8
    170c:	b3 01       	movw	r22, r6
    170e:	c6 01       	movw	r24, r12
    1710:	2a de       	rcall	.-940    	; 0x1366 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1712:	7c 01       	movw	r14, r24
    1714:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1716:	b1 f0       	breq	.+44     	; 0x1744 <xStreamBufferReceive+0x110>
    1718:	ef d1       	rcall	.+990    	; 0x1af8 <vTaskSuspendAll>
    171a:	f6 01       	movw	r30, r12
    171c:	82 85       	ldd	r24, Z+10	; 0x0a
    171e:	93 85       	ldd	r25, Z+11	; 0x0b
    1720:	89 2b       	or	r24, r25
    1722:	61 f0       	breq	.+24     	; 0x173c <xStreamBufferReceive+0x108>
    1724:	82 85       	ldd	r24, Z+10	; 0x0a
    1726:	93 85       	ldd	r25, Z+11	; 0x0b
    1728:	00 e0       	ldi	r16, 0x00	; 0
    172a:	10 e0       	ldi	r17, 0x00	; 0
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	ba 01       	movw	r22, r20
    1734:	36 d6       	rcall	.+3180   	; 0x23a2 <xTaskGenericNotify>
    1736:	f6 01       	movw	r30, r12
    1738:	13 86       	std	Z+11, r1	; 0x0b
    173a:	12 86       	std	Z+10, r1	; 0x0a
    173c:	a7 d2       	rcall	.+1358   	; 0x1c8c <xTaskResumeAll>
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1740:	e1 2c       	mov	r14, r1
    1742:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1744:	c7 01       	movw	r24, r14
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	bf 90       	pop	r11
    175c:	af 90       	pop	r10
    175e:	9f 90       	pop	r9
    1760:	8f 90       	pop	r8
    1762:	7f 90       	pop	r7
    1764:	6f 90       	pop	r6
    1766:	08 95       	ret

00001768 <prvResetNextTaskUnblockTime>:
    1768:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxDelayedTaskList>
    176c:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxDelayedTaskList+0x1>
    1770:	80 81       	ld	r24, Z
    1772:	81 11       	cpse	r24, r1
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <prvResetNextTaskUnblockTime+0x1c>
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <xNextTaskUnblockTime+0x1>
    177e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <xNextTaskUnblockTime>
    1782:	08 95       	ret
    1784:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxDelayedTaskList>
    1788:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxDelayedTaskList+0x1>
    178c:	05 80       	ldd	r0, Z+5	; 0x05
    178e:	f6 81       	ldd	r31, Z+6	; 0x06
    1790:	e0 2d       	mov	r30, r0
    1792:	06 80       	ldd	r0, Z+6	; 0x06
    1794:	f7 81       	ldd	r31, Z+7	; 0x07
    1796:	e0 2d       	mov	r30, r0
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <xNextTaskUnblockTime+0x1>
    17a0:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <xNextTaskUnblockTime>
    17a4:	08 95       	ret

000017a6 <prvAddCurrentTaskToDelayedList>:
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ec 01       	movw	r28, r24
    17b2:	f6 2e       	mov	r15, r22
    17b4:	00 91 4d 03 	lds	r16, 0x034D	; 0x80034d <xTickCount>
    17b8:	10 91 4e 03 	lds	r17, 0x034E	; 0x80034e <xTickCount+0x1>
    17bc:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    17c0:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    17c4:	02 96       	adiw	r24, 0x02	; 2
    17c6:	0d d8       	rcall	.-4070   	; 0x7e2 <uxListRemove>
    17c8:	cf 3f       	cpi	r28, 0xFF	; 255
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	d8 07       	cpc	r29, r24
    17ce:	69 f4       	brne	.+26     	; 0x17ea <prvAddCurrentTaskToDelayedList+0x44>
    17d0:	ff 20       	and	r15, r15
    17d2:	59 f0       	breq	.+22     	; 0x17ea <prvAddCurrentTaskToDelayedList+0x44>
    17d4:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    17d8:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    17dc:	6e 5f       	subi	r22, 0xFE	; 254
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	80 e5       	ldi	r24, 0x50	; 80
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    17e8:	2f c0       	rjmp	.+94     	; 0x1848 <prvAddCurrentTaskToDelayedList+0xa2>
    17ea:	c0 0f       	add	r28, r16
    17ec:	d1 1f       	adc	r29, r17
    17ee:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    17f2:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    17f6:	d3 83       	std	Z+3, r29	; 0x03
    17f8:	c2 83       	std	Z+2, r28	; 0x02
    17fa:	c0 17       	cp	r28, r16
    17fc:	d1 07       	cpc	r29, r17
    17fe:	68 f4       	brcc	.+26     	; 0x181a <prvAddCurrentTaskToDelayedList+0x74>
    1800:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1804:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1808:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <pxOverflowDelayedTaskList>
    180c:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <pxOverflowDelayedTaskList+0x1>
    1810:	6e 5f       	subi	r22, 0xFE	; 254
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsert>
    1818:	17 c0       	rjmp	.+46     	; 0x1848 <prvAddCurrentTaskToDelayedList+0xa2>
    181a:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    181e:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1822:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <pxDelayedTaskList>
    1826:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <pxDelayedTaskList+0x1>
    182a:	6e 5f       	subi	r22, 0xFE	; 254
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsert>
    1832:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <xNextTaskUnblockTime>
    1836:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <xNextTaskUnblockTime+0x1>
    183a:	c8 17       	cp	r28, r24
    183c:	d9 07       	cpc	r29, r25
    183e:	20 f4       	brcc	.+8      	; 0x1848 <prvAddCurrentTaskToDelayedList+0xa2>
    1840:	d0 93 46 03 	sts	0x0346, r29	; 0x800346 <xNextTaskUnblockTime+0x1>
    1844:	c0 93 45 03 	sts	0x0345, r28	; 0x800345 <xNextTaskUnblockTime>
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	08 95       	ret

00001854 <xTaskCreate>:
    1854:	4f 92       	push	r4
    1856:	5f 92       	push	r5
    1858:	6f 92       	push	r6
    185a:	7f 92       	push	r7
    185c:	8f 92       	push	r8
    185e:	9f 92       	push	r9
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	4c 01       	movw	r8, r24
    1874:	6b 01       	movw	r12, r22
    1876:	5a 01       	movw	r10, r20
    1878:	29 01       	movw	r4, r18
    187a:	ca 01       	movw	r24, r20
    187c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <pvPortMalloc>
    1880:	3c 01       	movw	r6, r24
    1882:	89 2b       	or	r24, r25
    1884:	09 f4       	brne	.+2      	; 0x1888 <xTaskCreate+0x34>
    1886:	f4 c0       	rjmp	.+488    	; 0x1a70 <xTaskCreate+0x21c>
    1888:	8c e2       	ldi	r24, 0x2C	; 44
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <pvPortMalloc>
    1890:	ec 01       	movw	r28, r24
    1892:	89 2b       	or	r24, r25
    1894:	99 f0       	breq	.+38     	; 0x18bc <xTaskCreate+0x68>
    1896:	78 8e       	std	Y+24, r7	; 0x18
    1898:	6f 8a       	std	Y+23, r6	; 0x17
    189a:	a5 01       	movw	r20, r10
    189c:	65 ea       	ldi	r22, 0xA5	; 165
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	c3 01       	movw	r24, r6
    18a2:	0e 94 01 20 	call	0x4002	; 0x4002 <memset>
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	a8 1a       	sub	r10, r24
    18aa:	b1 08       	sbc	r11, r1
    18ac:	8f 89       	ldd	r24, Y+23	; 0x17
    18ae:	98 8d       	ldd	r25, Y+24	; 0x18
    18b0:	a8 0e       	add	r10, r24
    18b2:	b9 1e       	adc	r11, r25
    18b4:	c1 14       	cp	r12, r1
    18b6:	d1 04       	cpc	r13, r1
    18b8:	29 f4       	brne	.+10     	; 0x18c4 <xTaskCreate+0x70>
    18ba:	20 c0       	rjmp	.+64     	; 0x18fc <xTaskCreate+0xa8>
    18bc:	c3 01       	movw	r24, r6
    18be:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
    18c2:	d6 c0       	rjmp	.+428    	; 0x1a70 <xTaskCreate+0x21c>
    18c4:	d6 01       	movw	r26, r12
    18c6:	8c 91       	ld	r24, X
    18c8:	89 8f       	std	Y+25, r24	; 0x19
    18ca:	8c 91       	ld	r24, X
    18cc:	88 23       	and	r24, r24
    18ce:	a1 f0       	breq	.+40     	; 0x18f8 <xTaskCreate+0xa4>
    18d0:	ae 01       	movw	r20, r28
    18d2:	46 5e       	subi	r20, 0xE6	; 230
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255
    18d6:	f6 01       	movw	r30, r12
    18d8:	31 96       	adiw	r30, 0x01	; 1
    18da:	b8 e0       	ldi	r27, 0x08	; 8
    18dc:	cb 0e       	add	r12, r27
    18de:	d1 1c       	adc	r13, r1
    18e0:	cf 01       	movw	r24, r30
    18e2:	21 91       	ld	r18, Z+
    18e4:	da 01       	movw	r26, r20
    18e6:	2d 93       	st	X+, r18
    18e8:	ad 01       	movw	r20, r26
    18ea:	dc 01       	movw	r26, r24
    18ec:	8c 91       	ld	r24, X
    18ee:	88 23       	and	r24, r24
    18f0:	19 f0       	breq	.+6      	; 0x18f8 <xTaskCreate+0xa4>
    18f2:	ec 15       	cp	r30, r12
    18f4:	fd 05       	cpc	r31, r13
    18f6:	a1 f7       	brne	.-24     	; 0x18e0 <xTaskCreate+0x8c>
    18f8:	18 a2       	std	Y+32, r1	; 0x20
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <xTaskCreate+0xaa>
    18fc:	19 8e       	std	Y+25, r1	; 0x19
    18fe:	04 30       	cpi	r16, 0x04	; 4
    1900:	08 f0       	brcs	.+2      	; 0x1904 <xTaskCreate+0xb0>
    1902:	03 e0       	ldi	r16, 0x03	; 3
    1904:	0e 8b       	std	Y+22, r16	; 0x16
    1906:	0b a3       	std	Y+35, r16	; 0x23
    1908:	1c a2       	std	Y+36, r1	; 0x24
    190a:	6e 01       	movw	r12, r28
    190c:	b2 e0       	ldi	r27, 0x02	; 2
    190e:	cb 0e       	add	r12, r27
    1910:	d1 1c       	adc	r13, r1
    1912:	c6 01       	movw	r24, r12
    1914:	0e 94 9b 03 	call	0x736	; 0x736 <vListInitialiseItem>
    1918:	ce 01       	movw	r24, r28
    191a:	0c 96       	adiw	r24, 0x0c	; 12
    191c:	0e 94 9b 03 	call	0x736	; 0x736 <vListInitialiseItem>
    1920:	d9 87       	std	Y+9, r29	; 0x09
    1922:	c8 87       	std	Y+8, r28	; 0x08
    1924:	84 e0       	ldi	r24, 0x04	; 4
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	80 1b       	sub	r24, r16
    192a:	91 09       	sbc	r25, r1
    192c:	9d 87       	std	Y+13, r25	; 0x0d
    192e:	8c 87       	std	Y+12, r24	; 0x0c
    1930:	db 8b       	std	Y+19, r29	; 0x13
    1932:	ca 8b       	std	Y+18, r28	; 0x12
    1934:	1e a2       	std	Y+38, r1	; 0x26
    1936:	1d a2       	std	Y+37, r1	; 0x25
    1938:	1f a2       	std	Y+39, r1	; 0x27
    193a:	18 a6       	std	Y+40, r1	; 0x28
    193c:	19 a6       	std	Y+41, r1	; 0x29
    193e:	1a a6       	std	Y+42, r1	; 0x2a
    1940:	1b a6       	std	Y+43, r1	; 0x2b
    1942:	a2 01       	movw	r20, r4
    1944:	b4 01       	movw	r22, r8
    1946:	c5 01       	movw	r24, r10
    1948:	0e 94 18 04 	call	0x830	; 0x830 <pxPortInitialiseStack>
    194c:	99 83       	std	Y+1, r25	; 0x01
    194e:	88 83       	st	Y, r24
    1950:	e1 14       	cp	r14, r1
    1952:	f1 04       	cpc	r15, r1
    1954:	19 f0       	breq	.+6      	; 0x195c <xTaskCreate+0x108>
    1956:	f7 01       	movw	r30, r14
    1958:	d1 83       	std	Z+1, r29	; 0x01
    195a:	c0 83       	st	Z, r28
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	0f 92       	push	r0
    1962:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <uxCurrentNumberOfTasks>
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <uxCurrentNumberOfTasks>
    196c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1970:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1974:	89 2b       	or	r24, r25
    1976:	d1 f5       	brne	.+116    	; 0x19ec <xTaskCreate+0x198>
    1978:	d0 93 a7 03 	sts	0x03A7, r29	; 0x8003a7 <pxCurrentTCB+0x1>
    197c:	c0 93 a6 03 	sts	0x03A6, r28	; 0x8003a6 <pxCurrentTCB>
    1980:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <uxCurrentNumberOfTasks>
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	09 f0       	breq	.+2      	; 0x198a <xTaskCreate+0x136>
    1988:	41 c0       	rjmp	.+130    	; 0x1a0c <xTaskCreate+0x1b8>
    198a:	82 e8       	ldi	r24, 0x82	; 130
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    1992:	8b e8       	ldi	r24, 0x8B	; 139
    1994:	93 e0       	ldi	r25, 0x03	; 3
    1996:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    199a:	84 e9       	ldi	r24, 0x94	; 148
    199c:	93 e0       	ldi	r25, 0x03	; 3
    199e:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    19a2:	8d e9       	ldi	r24, 0x9D	; 157
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    19aa:	89 e7       	ldi	r24, 0x79	; 121
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    19b2:	80 e7       	ldi	r24, 0x70	; 112
    19b4:	93 e0       	ldi	r25, 0x03	; 3
    19b6:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    19ba:	83 e6       	ldi	r24, 0x63	; 99
    19bc:	93 e0       	ldi	r25, 0x03	; 3
    19be:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    19c2:	8a e5       	ldi	r24, 0x5A	; 90
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    19ca:	80 e5       	ldi	r24, 0x50	; 80
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
    19d2:	89 e7       	ldi	r24, 0x79	; 121
    19d4:	93 e0       	ldi	r25, 0x03	; 3
    19d6:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <pxDelayedTaskList+0x1>
    19da:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <pxDelayedTaskList>
    19de:	80 e7       	ldi	r24, 0x70	; 112
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <pxOverflowDelayedTaskList+0x1>
    19e6:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <pxOverflowDelayedTaskList>
    19ea:	10 c0       	rjmp	.+32     	; 0x1a0c <xTaskCreate+0x1b8>
    19ec:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <xSchedulerRunning>
    19f0:	81 11       	cpse	r24, r1
    19f2:	0c c0       	rjmp	.+24     	; 0x1a0c <xTaskCreate+0x1b8>
    19f4:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    19f8:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    19fc:	96 89       	ldd	r25, Z+22	; 0x16
    19fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1a00:	89 17       	cp	r24, r25
    1a02:	20 f0       	brcs	.+8      	; 0x1a0c <xTaskCreate+0x1b8>
    1a04:	d0 93 a7 03 	sts	0x03A7, r29	; 0x8003a7 <pxCurrentTCB+0x1>
    1a08:	c0 93 a6 03 	sts	0x03A6, r28	; 0x8003a6 <pxCurrentTCB>
    1a0c:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <uxTaskNumber>
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <uxTaskNumber>
    1a16:	89 a3       	std	Y+33, r24	; 0x21
    1a18:	8e 89       	ldd	r24, Y+22	; 0x16
    1a1a:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    1a1e:	98 17       	cp	r25, r24
    1a20:	10 f4       	brcc	.+4      	; 0x1a26 <xTaskCreate+0x1d2>
    1a22:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9c 01       	movw	r18, r24
    1a2a:	22 0f       	add	r18, r18
    1a2c:	33 1f       	adc	r19, r19
    1a2e:	22 0f       	add	r18, r18
    1a30:	33 1f       	adc	r19, r19
    1a32:	22 0f       	add	r18, r18
    1a34:	33 1f       	adc	r19, r19
    1a36:	82 0f       	add	r24, r18
    1a38:	93 1f       	adc	r25, r19
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	8e 57       	subi	r24, 0x7E	; 126
    1a3e:	9c 4f       	sbci	r25, 0xFC	; 252
    1a40:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <xSchedulerRunning>
    1a4c:	88 23       	and	r24, r24
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <xTaskCreate+0x214>
    1a50:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1a54:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1a58:	96 89       	ldd	r25, Z+22	; 0x16
    1a5a:	8e 89       	ldd	r24, Y+22	; 0x16
    1a5c:	98 17       	cp	r25, r24
    1a5e:	30 f4       	brcc	.+12     	; 0x1a6c <xTaskCreate+0x218>
    1a60:	0e 94 c6 04 	call	0x98c	; 0x98c <vPortYield>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <xTaskCreate+0x21e>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <xTaskCreate+0x21e>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <xTaskCreate+0x21e>
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	bf 90       	pop	r11
    1a82:	af 90       	pop	r10
    1a84:	9f 90       	pop	r9
    1a86:	8f 90       	pop	r8
    1a88:	7f 90       	pop	r7
    1a8a:	6f 90       	pop	r6
    1a8c:	5f 90       	pop	r5
    1a8e:	4f 90       	pop	r4
    1a90:	08 95       	ret

00001a92 <vTaskStartScheduler>:
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	0f 2e       	mov	r0, r31
    1a9a:	f3 e4       	ldi	r31, 0x43	; 67
    1a9c:	ef 2e       	mov	r14, r31
    1a9e:	f3 e0       	ldi	r31, 0x03	; 3
    1aa0:	ff 2e       	mov	r15, r31
    1aa2:	f0 2d       	mov	r31, r0
    1aa4:	00 e0       	ldi	r16, 0x00	; 0
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 ec       	ldi	r20, 0xC0	; 192
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	65 e1       	ldi	r22, 0x15	; 21
    1ab0:	73 e0       	ldi	r23, 0x03	; 3
    1ab2:	8d ec       	ldi	r24, 0xCD	; 205
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	ce de       	rcall	.-612    	; 0x1854 <xTaskCreate>
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	d1 f4       	brne	.+52     	; 0x1af0 <vTaskStartScheduler+0x5e>
    1abc:	ec d5       	rcall	.+3032   	; 0x2696 <xTimerCreateTimerTask>
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	b9 f4       	brne	.+46     	; 0x1af0 <vTaskStartScheduler+0x5e>
    1ac2:	f8 94       	cli
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <xNextTaskUnblockTime+0x1>
    1acc:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <xNextTaskUnblockTime>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <xSchedulerRunning>
    1ad6:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <xTickCount+0x1>
    1ada:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <xTickCount>
    1ade:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1ae2:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1ae6:	85 a1       	ldd	r24, Z+37	; 0x25
    1ae8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <task_switch_in>
    1aec:	0e 94 8a 04 	call	0x914	; 0x914 <xPortStartScheduler>
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	08 95       	ret

00001af8 <vTaskSuspendAll>:
    1af8:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    1afc:	8f 5f       	subi	r24, 0xFF	; 255
    1afe:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <__data_end>
    1b02:	08 95       	ret

00001b04 <xTaskGetTickCount>:
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	0f 92       	push	r0
    1b0a:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <xTickCount>
    1b0e:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <xTickCount+0x1>
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	08 95       	ret

00001b18 <xTaskIncrementTick>:
    1b18:	cf 92       	push	r12
    1b1a:	df 92       	push	r13
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	98 c0       	rjmp	.+304    	; 0x1c60 <xTaskIncrementTick+0x148>
    1b30:	e0 90 4d 03 	lds	r14, 0x034D	; 0x80034d <xTickCount>
    1b34:	f0 90 4e 03 	lds	r15, 0x034E	; 0x80034e <xTickCount+0x1>
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	e8 1a       	sub	r14, r24
    1b3c:	f8 0a       	sbc	r15, r24
    1b3e:	f0 92 4e 03 	sts	0x034E, r15	; 0x80034e <xTickCount+0x1>
    1b42:	e0 92 4d 03 	sts	0x034D, r14	; 0x80034d <xTickCount>
    1b46:	e1 14       	cp	r14, r1
    1b48:	f1 04       	cpc	r15, r1
    1b4a:	b1 f4       	brne	.+44     	; 0x1b78 <xTaskIncrementTick+0x60>
    1b4c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <pxDelayedTaskList>
    1b50:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <pxDelayedTaskList+0x1>
    1b54:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <pxOverflowDelayedTaskList>
    1b58:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <pxOverflowDelayedTaskList+0x1>
    1b5c:	30 93 6f 03 	sts	0x036F, r19	; 0x80036f <pxDelayedTaskList+0x1>
    1b60:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <pxDelayedTaskList>
    1b64:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <pxOverflowDelayedTaskList+0x1>
    1b68:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <pxOverflowDelayedTaskList>
    1b6c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <xNumOfOverflows>
    1b70:	8f 5f       	subi	r24, 0xFF	; 255
    1b72:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <xNumOfOverflows>
    1b76:	f8 dd       	rcall	.-1040   	; 0x1768 <prvResetNextTaskUnblockTime>
    1b78:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <xNextTaskUnblockTime>
    1b7c:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <xNextTaskUnblockTime+0x1>
    1b80:	e8 16       	cp	r14, r24
    1b82:	f9 06       	cpc	r15, r25
    1b84:	10 f4       	brcc	.+4      	; 0x1b8a <xTaskIncrementTick+0x72>
    1b86:	d1 2c       	mov	r13, r1
    1b88:	53 c0       	rjmp	.+166    	; 0x1c30 <xTaskIncrementTick+0x118>
    1b8a:	d1 2c       	mov	r13, r1
    1b8c:	cc 24       	eor	r12, r12
    1b8e:	c3 94       	inc	r12
    1b90:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxDelayedTaskList>
    1b94:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxDelayedTaskList+0x1>
    1b98:	80 81       	ld	r24, Z
    1b9a:	81 11       	cpse	r24, r1
    1b9c:	07 c0       	rjmp	.+14     	; 0x1bac <xTaskIncrementTick+0x94>
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	9f ef       	ldi	r25, 0xFF	; 255
    1ba2:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <xNextTaskUnblockTime+0x1>
    1ba6:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <xNextTaskUnblockTime>
    1baa:	42 c0       	rjmp	.+132    	; 0x1c30 <xTaskIncrementTick+0x118>
    1bac:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxDelayedTaskList>
    1bb0:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxDelayedTaskList+0x1>
    1bb4:	05 80       	ldd	r0, Z+5	; 0x05
    1bb6:	f6 81       	ldd	r31, Z+6	; 0x06
    1bb8:	e0 2d       	mov	r30, r0
    1bba:	c6 81       	ldd	r28, Z+6	; 0x06
    1bbc:	d7 81       	ldd	r29, Z+7	; 0x07
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc2:	e8 16       	cp	r14, r24
    1bc4:	f9 06       	cpc	r15, r25
    1bc6:	28 f4       	brcc	.+10     	; 0x1bd2 <xTaskIncrementTick+0xba>
    1bc8:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <xNextTaskUnblockTime+0x1>
    1bcc:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <xNextTaskUnblockTime>
    1bd0:	2f c0       	rjmp	.+94     	; 0x1c30 <xTaskIncrementTick+0x118>
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	0e 5f       	subi	r16, 0xFE	; 254
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    1bde:	8c 89       	ldd	r24, Y+20	; 0x14
    1be0:	9d 89       	ldd	r25, Y+21	; 0x15
    1be2:	89 2b       	or	r24, r25
    1be4:	21 f0       	breq	.+8      	; 0x1bee <xTaskIncrementTick+0xd6>
    1be6:	ce 01       	movw	r24, r28
    1be8:	0c 96       	adiw	r24, 0x0c	; 12
    1bea:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    1bee:	8e 89       	ldd	r24, Y+22	; 0x16
    1bf0:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    1bf4:	98 17       	cp	r25, r24
    1bf6:	10 f4       	brcc	.+4      	; 0x1bfc <xTaskIncrementTick+0xe4>
    1bf8:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9c 01       	movw	r18, r24
    1c00:	22 0f       	add	r18, r18
    1c02:	33 1f       	adc	r19, r19
    1c04:	22 0f       	add	r18, r18
    1c06:	33 1f       	adc	r19, r19
    1c08:	22 0f       	add	r18, r18
    1c0a:	33 1f       	adc	r19, r19
    1c0c:	82 0f       	add	r24, r18
    1c0e:	93 1f       	adc	r25, r19
    1c10:	b8 01       	movw	r22, r16
    1c12:	8e 57       	subi	r24, 0x7E	; 126
    1c14:	9c 4f       	sbci	r25, 0xFC	; 252
    1c16:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    1c1a:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1c1e:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1c22:	9e 89       	ldd	r25, Y+22	; 0x16
    1c24:	86 89       	ldd	r24, Z+22	; 0x16
    1c26:	98 17       	cp	r25, r24
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <xTaskIncrementTick+0x114>
    1c2a:	b2 cf       	rjmp	.-156    	; 0x1b90 <xTaskIncrementTick+0x78>
    1c2c:	dc 2c       	mov	r13, r12
    1c2e:	b0 cf       	rjmp	.-160    	; 0x1b90 <xTaskIncrementTick+0x78>
    1c30:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1c34:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1c38:	86 89       	ldd	r24, Z+22	; 0x16
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	8e 0f       	add	r24, r30
    1c4c:	9f 1f       	adc	r25, r31
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ee 57       	subi	r30, 0x7E	; 126
    1c52:	fc 4f       	sbci	r31, 0xFC	; 252
    1c54:	80 81       	ld	r24, Z
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	48 f0       	brcs	.+18     	; 0x1c6c <xTaskIncrementTick+0x154>
    1c5a:	dd 24       	eor	r13, r13
    1c5c:	d3 94       	inc	r13
    1c5e:	06 c0       	rjmp	.+12     	; 0x1c6c <xTaskIncrementTick+0x154>
    1c60:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <uxPendedTicks>
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <uxPendedTicks>
    1c6a:	d1 2c       	mov	r13, r1
    1c6c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <xYieldPending>
    1c70:	88 23       	and	r24, r24
    1c72:	11 f0       	breq	.+4      	; 0x1c78 <xTaskIncrementTick+0x160>
    1c74:	dd 24       	eor	r13, r13
    1c76:	d3 94       	inc	r13
    1c78:	8d 2d       	mov	r24, r13
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	08 95       	ret

00001c8c <xTaskResumeAll>:
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	0f 92       	push	r0
    1ca0:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    1ca4:	81 50       	subi	r24, 0x01	; 1
    1ca6:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <__data_end>
    1caa:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	5d c0       	rjmp	.+186    	; 0x1d6c <xTaskResumeAll+0xe0>
    1cb2:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <uxCurrentNumberOfTasks>
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	33 c0       	rjmp	.+102    	; 0x1d20 <xTaskResumeAll+0x94>
    1cba:	5b c0       	rjmp	.+182    	; 0x1d72 <xTaskResumeAll+0xe6>
    1cbc:	d7 01       	movw	r26, r14
    1cbe:	15 96       	adiw	r26, 0x05	; 5
    1cc0:	ed 91       	ld	r30, X+
    1cc2:	fc 91       	ld	r31, X
    1cc4:	16 97       	sbiw	r26, 0x06	; 6
    1cc6:	c6 81       	ldd	r28, Z+6	; 0x06
    1cc8:	d7 81       	ldd	r29, Z+7	; 0x07
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0c 96       	adiw	r24, 0x0c	; 12
    1cce:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	0e 5f       	subi	r16, 0xFE	; 254
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	c8 01       	movw	r24, r16
    1cda:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    1cde:	8e 89       	ldd	r24, Y+22	; 0x16
    1ce0:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    1ce4:	98 17       	cp	r25, r24
    1ce6:	10 f4       	brcc	.+4      	; 0x1cec <xTaskResumeAll+0x60>
    1ce8:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 01       	movw	r18, r24
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	82 0f       	add	r24, r18
    1cfe:	93 1f       	adc	r25, r19
    1d00:	b8 01       	movw	r22, r16
    1d02:	8e 57       	subi	r24, 0x7E	; 126
    1d04:	9c 4f       	sbci	r25, 0xFC	; 252
    1d06:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    1d0a:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1d0e:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1d12:	9e 89       	ldd	r25, Y+22	; 0x16
    1d14:	86 89       	ldd	r24, Z+22	; 0x16
    1d16:	98 17       	cp	r25, r24
    1d18:	68 f0       	brcs	.+26     	; 0x1d34 <xTaskResumeAll+0xa8>
    1d1a:	d0 92 49 03 	sts	0x0349, r13	; 0x800349 <xYieldPending>
    1d1e:	0a c0       	rjmp	.+20     	; 0x1d34 <xTaskResumeAll+0xa8>
    1d20:	c0 e0       	ldi	r28, 0x00	; 0
    1d22:	d0 e0       	ldi	r29, 0x00	; 0
    1d24:	0f 2e       	mov	r0, r31
    1d26:	f3 e6       	ldi	r31, 0x63	; 99
    1d28:	ef 2e       	mov	r14, r31
    1d2a:	f3 e0       	ldi	r31, 0x03	; 3
    1d2c:	ff 2e       	mov	r15, r31
    1d2e:	f0 2d       	mov	r31, r0
    1d30:	dd 24       	eor	r13, r13
    1d32:	d3 94       	inc	r13
    1d34:	f7 01       	movw	r30, r14
    1d36:	80 81       	ld	r24, Z
    1d38:	81 11       	cpse	r24, r1
    1d3a:	c0 cf       	rjmp	.-128    	; 0x1cbc <xTaskResumeAll+0x30>
    1d3c:	cd 2b       	or	r28, r29
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <xTaskResumeAll+0xb6>
    1d40:	13 dd       	rcall	.-1498   	; 0x1768 <prvResetNextTaskUnblockTime>
    1d42:	c0 91 4a 03 	lds	r28, 0x034A	; 0x80034a <uxPendedTicks>
    1d46:	cc 23       	and	r28, r28
    1d48:	49 f0       	breq	.+18     	; 0x1d5c <xTaskResumeAll+0xd0>
    1d4a:	d1 e0       	ldi	r29, 0x01	; 1
    1d4c:	e5 de       	rcall	.-566    	; 0x1b18 <xTaskIncrementTick>
    1d4e:	81 11       	cpse	r24, r1
    1d50:	d0 93 49 03 	sts	0x0349, r29	; 0x800349 <xYieldPending>
    1d54:	c1 50       	subi	r28, 0x01	; 1
    1d56:	d1 f7       	brne	.-12     	; 0x1d4c <xTaskResumeAll+0xc0>
    1d58:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <uxPendedTicks>
    1d5c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <xYieldPending>
    1d60:	88 23       	and	r24, r24
    1d62:	31 f0       	breq	.+12     	; 0x1d70 <xTaskResumeAll+0xe4>
    1d64:	0e 94 c6 04 	call	0x98c	; 0x98c <vPortYield>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <xTaskResumeAll+0xe6>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <xTaskResumeAll+0xe6>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	08 95       	ret

00001d86 <vTaskDelay>:
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	ec 01       	movw	r28, r24
    1d8c:	89 2b       	or	r24, r25
    1d8e:	39 f0       	breq	.+14     	; 0x1d9e <vTaskDelay+0x18>
    1d90:	b3 de       	rcall	.-666    	; 0x1af8 <vTaskSuspendAll>
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	ce 01       	movw	r24, r28
    1d96:	07 dd       	rcall	.-1522   	; 0x17a6 <prvAddCurrentTaskToDelayedList>
    1d98:	79 df       	rcall	.-270    	; 0x1c8c <xTaskResumeAll>
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vTaskDelay+0x1c>
    1d9e:	0e 94 c6 04 	call	0x98c	; 0x98c <vPortYield>
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <vTaskSwitchContext>:
    1da8:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    1dac:	88 23       	and	r24, r24
    1dae:	21 f0       	breq	.+8      	; 0x1db8 <vTaskSwitchContext+0x10>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <xYieldPending>
    1db6:	08 95       	ret
    1db8:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <xYieldPending>
    1dbc:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1dc0:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1dc4:	85 a1       	ldd	r24, Z+37	; 0x25
    1dc6:	0e 94 65 03 	call	0x6ca	; 0x6ca <task_switch_out>
    1dca:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1dce:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1dd2:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1dd6:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1dda:	2d 91       	ld	r18, X+
    1ddc:	3c 91       	ld	r19, X
    1dde:	87 89       	ldd	r24, Z+23	; 0x17
    1de0:	90 8d       	ldd	r25, Z+24	; 0x18
    1de2:	82 17       	cp	r24, r18
    1de4:	93 07       	cpc	r25, r19
    1de6:	58 f0       	brcs	.+22     	; 0x1dfe <vTaskSwitchContext+0x56>
    1de8:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1dec:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1df0:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1df4:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1df8:	67 5e       	subi	r22, 0xE7	; 231
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	65 d5       	rcall	.+2762   	; 0x28c8 <vApplicationStackOverflowHook>
    1dfe:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <uxTopReadyPriority>
    1e02:	82 2f       	mov	r24, r18
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	e8 0f       	add	r30, r24
    1e16:	f9 1f       	adc	r31, r25
    1e18:	ee 57       	subi	r30, 0x7E	; 126
    1e1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e1c:	30 81       	ld	r19, Z
    1e1e:	31 11       	cpse	r19, r1
    1e20:	11 c0       	rjmp	.+34     	; 0x1e44 <vTaskSwitchContext+0x9c>
    1e22:	21 50       	subi	r18, 0x01	; 1
    1e24:	82 2f       	mov	r24, r18
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	fc 01       	movw	r30, r24
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	e8 0f       	add	r30, r24
    1e38:	f9 1f       	adc	r31, r25
    1e3a:	ee 57       	subi	r30, 0x7E	; 126
    1e3c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e3e:	30 81       	ld	r19, Z
    1e40:	33 23       	and	r19, r19
    1e42:	79 f3       	breq	.-34     	; 0x1e22 <vTaskSwitchContext+0x7a>
    1e44:	ac 01       	movw	r20, r24
    1e46:	44 0f       	add	r20, r20
    1e48:	55 1f       	adc	r21, r21
    1e4a:	44 0f       	add	r20, r20
    1e4c:	55 1f       	adc	r21, r21
    1e4e:	44 0f       	add	r20, r20
    1e50:	55 1f       	adc	r21, r21
    1e52:	48 0f       	add	r20, r24
    1e54:	59 1f       	adc	r21, r25
    1e56:	da 01       	movw	r26, r20
    1e58:	ae 57       	subi	r26, 0x7E	; 126
    1e5a:	bc 4f       	sbci	r27, 0xFC	; 252
    1e5c:	11 96       	adiw	r26, 0x01	; 1
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	12 97       	sbiw	r26, 0x02	; 2
    1e64:	02 80       	ldd	r0, Z+2	; 0x02
    1e66:	f3 81       	ldd	r31, Z+3	; 0x03
    1e68:	e0 2d       	mov	r30, r0
    1e6a:	12 96       	adiw	r26, 0x02	; 2
    1e6c:	fc 93       	st	X, r31
    1e6e:	ee 93       	st	-X, r30
    1e70:	11 97       	sbiw	r26, 0x01	; 1
    1e72:	4b 57       	subi	r20, 0x7B	; 123
    1e74:	5c 4f       	sbci	r21, 0xFC	; 252
    1e76:	e4 17       	cp	r30, r20
    1e78:	f5 07       	cpc	r31, r21
    1e7a:	29 f4       	brne	.+10     	; 0x1e86 <vTaskSwitchContext+0xde>
    1e7c:	42 81       	ldd	r20, Z+2	; 0x02
    1e7e:	53 81       	ldd	r21, Z+3	; 0x03
    1e80:	fd 01       	movw	r30, r26
    1e82:	52 83       	std	Z+2, r21	; 0x02
    1e84:	41 83       	std	Z+1, r20	; 0x01
    1e86:	fc 01       	movw	r30, r24
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	8e 0f       	add	r24, r30
    1e96:	9f 1f       	adc	r25, r31
    1e98:	fc 01       	movw	r30, r24
    1e9a:	ee 57       	subi	r30, 0x7E	; 126
    1e9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e9e:	01 80       	ldd	r0, Z+1	; 0x01
    1ea0:	f2 81       	ldd	r31, Z+2	; 0x02
    1ea2:	e0 2d       	mov	r30, r0
    1ea4:	86 81       	ldd	r24, Z+6	; 0x06
    1ea6:	97 81       	ldd	r25, Z+7	; 0x07
    1ea8:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <pxCurrentTCB+0x1>
    1eac:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <pxCurrentTCB>
    1eb0:	20 93 4c 03 	sts	0x034C, r18	; 0x80034c <uxTopReadyPriority>
    1eb4:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1eb8:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1ebc:	85 a1       	ldd	r24, Z+37	; 0x25
    1ebe:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <task_switch_in>
    1ec2:	08 95       	ret

00001ec4 <vTaskPlaceOnEventList>:
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	eb 01       	movw	r28, r22
    1eca:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1ece:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1ed2:	64 5f       	subi	r22, 0xF4	; 244
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsert>
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	ce 01       	movw	r24, r28
    1ede:	63 dc       	rcall	.-1850   	; 0x17a6 <prvAddCurrentTaskToDelayedList>
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <vTaskPlaceOnEventListRestricted>:
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	8b 01       	movw	r16, r22
    1eee:	c4 2f       	mov	r28, r20
    1ef0:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1ef4:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1ef8:	64 5f       	subi	r22, 0xF4	; 244
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    1f00:	cc 23       	and	r28, r28
    1f02:	11 f0       	breq	.+4      	; 0x1f08 <vTaskPlaceOnEventListRestricted+0x22>
    1f04:	0f ef       	ldi	r16, 0xFF	; 255
    1f06:	1f ef       	ldi	r17, 0xFF	; 255
    1f08:	6c 2f       	mov	r22, r28
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	4c dc       	rcall	.-1896   	; 0x17a6 <prvAddCurrentTaskToDelayedList>
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	08 95       	ret

00001f16 <xTaskRemoveFromEventList>:
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	dc 01       	movw	r26, r24
    1f20:	15 96       	adiw	r26, 0x05	; 5
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	16 97       	sbiw	r26, 0x06	; 6
    1f28:	c6 81       	ldd	r28, Z+6	; 0x06
    1f2a:	d7 81       	ldd	r29, Z+7	; 0x07
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	04 5f       	subi	r16, 0xF4	; 244
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	c8 01       	movw	r24, r16
    1f34:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    1f38:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    1f3c:	81 11       	cpse	r24, r1
    1f3e:	1c c0       	rjmp	.+56     	; 0x1f78 <xTaskRemoveFromEventList+0x62>
    1f40:	0a 50       	subi	r16, 0x0A	; 10
    1f42:	11 09       	sbc	r17, r1
    1f44:	c8 01       	movw	r24, r16
    1f46:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    1f4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f4c:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    1f50:	98 17       	cp	r25, r24
    1f52:	10 f4       	brcc	.+4      	; 0x1f58 <xTaskRemoveFromEventList+0x42>
    1f54:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9c 01       	movw	r18, r24
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	22 0f       	add	r18, r18
    1f62:	33 1f       	adc	r19, r19
    1f64:	22 0f       	add	r18, r18
    1f66:	33 1f       	adc	r19, r19
    1f68:	82 0f       	add	r24, r18
    1f6a:	93 1f       	adc	r25, r19
    1f6c:	b8 01       	movw	r22, r16
    1f6e:	8e 57       	subi	r24, 0x7E	; 126
    1f70:	9c 4f       	sbci	r25, 0xFC	; 252
    1f72:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    1f76:	05 c0       	rjmp	.+10     	; 0x1f82 <xTaskRemoveFromEventList+0x6c>
    1f78:	b8 01       	movw	r22, r16
    1f7a:	83 e6       	ldi	r24, 0x63	; 99
    1f7c:	93 e0       	ldi	r25, 0x03	; 3
    1f7e:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    1f82:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    1f86:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    1f8a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f8c:	86 89       	ldd	r24, Z+22	; 0x16
    1f8e:	89 17       	cp	r24, r25
    1f90:	20 f4       	brcc	.+8      	; 0x1f9a <xTaskRemoveFromEventList+0x84>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <xYieldPending>
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <xTaskRemoveFromEventList+0x86>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <vTaskSetTimeOutState>:
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	0f 92       	push	r0
    1fac:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <xNumOfOverflows>
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	20 83       	st	Z, r18
    1fb4:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <xTickCount>
    1fb8:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <xTickCount+0x1>
    1fbc:	32 83       	std	Z+2, r19	; 0x02
    1fbe:	21 83       	std	Z+1, r18	; 0x01
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	08 95       	ret

00001fc6 <vTaskInternalSetTimeOutState>:
    1fc6:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <xNumOfOverflows>
    1fca:	fc 01       	movw	r30, r24
    1fcc:	20 83       	st	Z, r18
    1fce:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <xTickCount>
    1fd2:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <xTickCount+0x1>
    1fd6:	32 83       	std	Z+2, r19	; 0x02
    1fd8:	21 83       	std	Z+1, r18	; 0x01
    1fda:	08 95       	ret

00001fdc <xTaskCheckForTimeOut>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	0f 92       	push	r0
    1fe6:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <xTickCount>
    1fea:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <xTickCount+0x1>
    1fee:	db 01       	movw	r26, r22
    1ff0:	4d 91       	ld	r20, X+
    1ff2:	5c 91       	ld	r21, X
    1ff4:	4f 3f       	cpi	r20, 0xFF	; 255
    1ff6:	bf ef       	ldi	r27, 0xFF	; 255
    1ff8:	5b 07       	cpc	r21, r27
    1ffa:	e9 f0       	breq	.+58     	; 0x2036 <xTaskCheckForTimeOut+0x5a>
    1ffc:	ec 01       	movw	r28, r24
    1ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    2000:	fa 81       	ldd	r31, Y+2	; 0x02
    2002:	a0 91 48 03 	lds	r26, 0x0348	; 0x800348 <xNumOfOverflows>
    2006:	b8 81       	ld	r27, Y
    2008:	ba 17       	cp	r27, r26
    200a:	19 f0       	breq	.+6      	; 0x2012 <xTaskCheckForTimeOut+0x36>
    200c:	2e 17       	cp	r18, r30
    200e:	3f 07       	cpc	r19, r31
    2010:	a0 f4       	brcc	.+40     	; 0x203a <xTaskCheckForTimeOut+0x5e>
    2012:	2e 1b       	sub	r18, r30
    2014:	3f 0b       	sbc	r19, r31
    2016:	24 17       	cp	r18, r20
    2018:	35 07       	cpc	r19, r21
    201a:	40 f4       	brcc	.+16     	; 0x202c <xTaskCheckForTimeOut+0x50>
    201c:	fb 01       	movw	r30, r22
    201e:	42 1b       	sub	r20, r18
    2020:	53 0b       	sbc	r21, r19
    2022:	51 83       	std	Z+1, r21	; 0x01
    2024:	40 83       	st	Z, r20
    2026:	cf df       	rcall	.-98     	; 0x1fc6 <vTaskInternalSetTimeOutState>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	08 c0       	rjmp	.+16     	; 0x203c <xTaskCheckForTimeOut+0x60>
    202c:	fb 01       	movw	r30, r22
    202e:	11 82       	std	Z+1, r1	; 0x01
    2030:	10 82       	st	Z, r1
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	03 c0       	rjmp	.+6      	; 0x203c <xTaskCheckForTimeOut+0x60>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	01 c0       	rjmp	.+2      	; 0x203c <xTaskCheckForTimeOut+0x60>
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	0f 90       	pop	r0
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	08 95       	ret

00002046 <vTaskMissedYield>:
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <xYieldPending>
    204c:	08 95       	ret

0000204e <xTaskGetCurrentTaskHandle>:
    204e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2052:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    2056:	08 95       	ret

00002058 <xTaskGetSchedulerState>:
    2058:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <xSchedulerRunning>
    205c:	88 23       	and	r24, r24
    205e:	31 f0       	breq	.+12     	; 0x206c <xTaskGetSchedulerState+0x14>
    2060:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    2064:	88 23       	and	r24, r24
    2066:	21 f0       	breq	.+8      	; 0x2070 <xTaskGetSchedulerState+0x18>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	08 95       	ret
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	08 95       	ret
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	08 95       	ret

00002074 <xTaskPriorityInherit>:
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	fc 01       	movw	r30, r24
    207e:	89 2b       	or	r24, r25
    2080:	09 f4       	brne	.+2      	; 0x2084 <xTaskPriorityInherit+0x10>
    2082:	64 c0       	rjmp	.+200    	; 0x214c <xTaskPriorityInherit+0xd8>
    2084:	26 89       	ldd	r18, Z+22	; 0x16
    2086:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    208a:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    208e:	56 96       	adiw	r26, 0x16	; 22
    2090:	8c 91       	ld	r24, X
    2092:	28 17       	cp	r18, r24
    2094:	08 f0       	brcs	.+2      	; 0x2098 <xTaskPriorityInherit+0x24>
    2096:	4e c0       	rjmp	.+156    	; 0x2134 <xTaskPriorityInherit+0xc0>
    2098:	84 85       	ldd	r24, Z+12	; 0x0c
    209a:	95 85       	ldd	r25, Z+13	; 0x0d
    209c:	99 23       	and	r25, r25
    209e:	64 f0       	brlt	.+24     	; 0x20b8 <xTaskPriorityInherit+0x44>
    20a0:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    20a4:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    20a8:	56 96       	adiw	r26, 0x16	; 22
    20aa:	3c 91       	ld	r19, X
    20ac:	84 e0       	ldi	r24, 0x04	; 4
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	83 1b       	sub	r24, r19
    20b2:	91 09       	sbc	r25, r1
    20b4:	95 87       	std	Z+13, r25	; 0x0d
    20b6:	84 87       	std	Z+12, r24	; 0x0c
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	c9 01       	movw	r24, r18
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	28 0f       	add	r18, r24
    20ca:	39 1f       	adc	r19, r25
    20cc:	2e 57       	subi	r18, 0x7E	; 126
    20ce:	3c 4f       	sbci	r19, 0xFC	; 252
    20d0:	82 85       	ldd	r24, Z+10	; 0x0a
    20d2:	93 85       	ldd	r25, Z+11	; 0x0b
    20d4:	82 17       	cp	r24, r18
    20d6:	93 07       	cpc	r25, r19
    20d8:	21 f5       	brne	.+72     	; 0x2122 <xTaskPriorityInherit+0xae>
    20da:	8f 01       	movw	r16, r30
    20dc:	ef 01       	movw	r28, r30
    20de:	22 96       	adiw	r28, 0x02	; 2
    20e0:	ce 01       	movw	r24, r28
    20e2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    20e6:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    20ea:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    20ee:	86 89       	ldd	r24, Z+22	; 0x16
    20f0:	f8 01       	movw	r30, r16
    20f2:	86 8b       	std	Z+22, r24	; 0x16
    20f4:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    20f8:	98 17       	cp	r25, r24
    20fa:	10 f4       	brcc	.+4      	; 0x2100 <xTaskPriorityInherit+0x8c>
    20fc:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9c 01       	movw	r18, r24
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	82 0f       	add	r24, r18
    2112:	93 1f       	adc	r25, r19
    2114:	be 01       	movw	r22, r28
    2116:	8e 57       	subi	r24, 0x7E	; 126
    2118:	9c 4f       	sbci	r25, 0xFC	; 252
    211a:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	16 c0       	rjmp	.+44     	; 0x214e <xTaskPriorityInherit+0xda>
    2122:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2126:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    212a:	56 96       	adiw	r26, 0x16	; 22
    212c:	8c 91       	ld	r24, X
    212e:	86 8b       	std	Z+22, r24	; 0x16
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0d c0       	rjmp	.+26     	; 0x214e <xTaskPriorityInherit+0xda>
    2134:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2138:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	23 a1       	ldd	r18, Z+35	; 0x23
    2140:	56 96       	adiw	r26, 0x16	; 22
    2142:	9c 91       	ld	r25, X
    2144:	29 17       	cp	r18, r25
    2146:	18 f0       	brcs	.+6      	; 0x214e <xTaskPriorityInherit+0xda>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	01 c0       	rjmp	.+2      	; 0x214e <xTaskPriorityInherit+0xda>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

00002158 <xTaskPriorityDisinherit>:
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	fc 01       	movw	r30, r24
    2162:	89 2b       	or	r24, r25
    2164:	79 f1       	breq	.+94     	; 0x21c4 <xTaskPriorityDisinherit+0x6c>
    2166:	84 a1       	ldd	r24, Z+36	; 0x24
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	84 a3       	std	Z+36, r24	; 0x24
    216c:	26 89       	ldd	r18, Z+22	; 0x16
    216e:	93 a1       	ldd	r25, Z+35	; 0x23
    2170:	29 17       	cp	r18, r25
    2172:	51 f1       	breq	.+84     	; 0x21c8 <xTaskPriorityDisinherit+0x70>
    2174:	81 11       	cpse	r24, r1
    2176:	2a c0       	rjmp	.+84     	; 0x21cc <xTaskPriorityDisinherit+0x74>
    2178:	ef 01       	movw	r28, r30
    217a:	8f 01       	movw	r16, r30
    217c:	0e 5f       	subi	r16, 0xFE	; 254
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	c8 01       	movw	r24, r16
    2182:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    2186:	8b a1       	ldd	r24, Y+35	; 0x23
    2188:	8e 8b       	std	Y+22, r24	; 0x16
    218a:	24 e0       	ldi	r18, 0x04	; 4
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	28 1b       	sub	r18, r24
    2190:	31 09       	sbc	r19, r1
    2192:	3d 87       	std	Y+13, r19	; 0x0d
    2194:	2c 87       	std	Y+12, r18	; 0x0c
    2196:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    219a:	98 17       	cp	r25, r24
    219c:	10 f4       	brcc	.+4      	; 0x21a2 <xTaskPriorityDisinherit+0x4a>
    219e:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9c 01       	movw	r18, r24
    21a6:	22 0f       	add	r18, r18
    21a8:	33 1f       	adc	r19, r19
    21aa:	22 0f       	add	r18, r18
    21ac:	33 1f       	adc	r19, r19
    21ae:	22 0f       	add	r18, r18
    21b0:	33 1f       	adc	r19, r19
    21b2:	82 0f       	add	r24, r18
    21b4:	93 1f       	adc	r25, r19
    21b6:	b8 01       	movw	r22, r16
    21b8:	8e 57       	subi	r24, 0x7E	; 126
    21ba:	9c 4f       	sbci	r25, 0xFC	; 252
    21bc:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <xTaskPriorityDisinherit+0x76>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <xTaskPriorityDisinherit+0x76>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <xTaskPriorityDisinherit+0x76>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <vTaskPriorityDisinheritAfterTimeout>:
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	fc 01       	movw	r30, r24
    21e2:	89 2b       	or	r24, r25
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <vTaskPriorityDisinheritAfterTimeout+0x10>
    21e6:	43 c0       	rjmp	.+134    	; 0x226e <__stack+0x6f>
    21e8:	93 a1       	ldd	r25, Z+35	; 0x23
    21ea:	96 17       	cp	r25, r22
    21ec:	08 f4       	brcc	.+2      	; 0x21f0 <vTaskPriorityDisinheritAfterTimeout+0x18>
    21ee:	96 2f       	mov	r25, r22
    21f0:	86 89       	ldd	r24, Z+22	; 0x16
    21f2:	89 17       	cp	r24, r25
    21f4:	e1 f1       	breq	.+120    	; 0x226e <__stack+0x6f>
    21f6:	24 a1       	ldd	r18, Z+36	; 0x24
    21f8:	21 30       	cpi	r18, 0x01	; 1
    21fa:	c9 f5       	brne	.+114    	; 0x226e <__stack+0x6f>
    21fc:	96 8b       	std	Z+22, r25	; 0x16
    21fe:	24 85       	ldd	r18, Z+12	; 0x0c
    2200:	35 85       	ldd	r19, Z+13	; 0x0d
    2202:	33 23       	and	r19, r19
    2204:	34 f0       	brlt	.+12     	; 0x2212 <__stack+0x13>
    2206:	24 e0       	ldi	r18, 0x04	; 4
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	29 1b       	sub	r18, r25
    220c:	31 09       	sbc	r19, r1
    220e:	35 87       	std	Z+13, r19	; 0x0d
    2210:	24 87       	std	Z+12, r18	; 0x0c
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 01       	movw	r18, r24
    2216:	22 0f       	add	r18, r18
    2218:	33 1f       	adc	r19, r19
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	8e 57       	subi	r24, 0x7E	; 126
    2228:	9c 4f       	sbci	r25, 0xFC	; 252
    222a:	22 85       	ldd	r18, Z+10	; 0x0a
    222c:	33 85       	ldd	r19, Z+11	; 0x0b
    222e:	28 17       	cp	r18, r24
    2230:	39 07       	cpc	r19, r25
    2232:	e9 f4       	brne	.+58     	; 0x226e <__stack+0x6f>
    2234:	ef 01       	movw	r28, r30
    2236:	8f 01       	movw	r16, r30
    2238:	0e 5f       	subi	r16, 0xFE	; 254
    223a:	1f 4f       	sbci	r17, 0xFF	; 255
    223c:	c8 01       	movw	r24, r16
    223e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    2242:	8e 89       	ldd	r24, Y+22	; 0x16
    2244:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    2248:	98 17       	cp	r25, r24
    224a:	10 f4       	brcc	.+4      	; 0x2250 <__stack+0x51>
    224c:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c 01       	movw	r18, r24
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	22 0f       	add	r18, r18
    225a:	33 1f       	adc	r19, r19
    225c:	22 0f       	add	r18, r18
    225e:	33 1f       	adc	r19, r19
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	b8 01       	movw	r22, r16
    2266:	8e 57       	subi	r24, 0x7E	; 126
    2268:	9c 4f       	sbci	r25, 0xFC	; 252
    226a:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	08 95       	ret

00002278 <pvTaskIncrementMutexHeldCount>:
    2278:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    227c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    2280:	89 2b       	or	r24, r25
    2282:	39 f0       	breq	.+14     	; 0x2292 <pvTaskIncrementMutexHeldCount+0x1a>
    2284:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2288:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    228c:	84 a1       	ldd	r24, Z+36	; 0x24
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	84 a3       	std	Z+36, r24	; 0x24
    2292:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2296:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    229a:	08 95       	ret

0000229c <xTaskNotifyWait>:
    229c:	4f 92       	push	r4
    229e:	5f 92       	push	r5
    22a0:	6f 92       	push	r6
    22a2:	7f 92       	push	r7
    22a4:	8f 92       	push	r8
    22a6:	9f 92       	push	r9
    22a8:	af 92       	push	r10
    22aa:	bf 92       	push	r11
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	49 01       	movw	r8, r18
    22b6:	5a 01       	movw	r10, r20
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	0f 92       	push	r0
    22be:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    22c2:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    22c6:	23 a5       	ldd	r18, Z+43	; 0x2b
    22c8:	22 30       	cpi	r18, 0x02	; 2
    22ca:	21 f1       	breq	.+72     	; 0x2314 <xTaskNotifyWait+0x78>
    22cc:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    22d0:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    22d4:	47 a0       	ldd	r4, Z+39	; 0x27
    22d6:	50 a4       	ldd	r5, Z+40	; 0x28
    22d8:	61 a4       	ldd	r6, Z+41	; 0x29
    22da:	72 a4       	ldd	r7, Z+42	; 0x2a
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	80 95       	com	r24
    22e2:	90 95       	com	r25
    22e4:	a0 95       	com	r26
    22e6:	b0 95       	com	r27
    22e8:	84 21       	and	r24, r4
    22ea:	95 21       	and	r25, r5
    22ec:	a6 21       	and	r26, r6
    22ee:	b7 21       	and	r27, r7
    22f0:	87 a3       	std	Z+39, r24	; 0x27
    22f2:	90 a7       	std	Z+40, r25	; 0x28
    22f4:	a1 a7       	std	Z+41, r26	; 0x29
    22f6:	b2 a7       	std	Z+42, r27	; 0x2a
    22f8:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    22fc:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	83 a7       	std	Z+43, r24	; 0x2b
    2304:	e1 14       	cp	r14, r1
    2306:	f1 04       	cpc	r15, r1
    2308:	29 f0       	breq	.+10     	; 0x2314 <xTaskNotifyWait+0x78>
    230a:	61 e0       	ldi	r22, 0x01	; 1
    230c:	c7 01       	movw	r24, r14
    230e:	4b da       	rcall	.-2922   	; 0x17a6 <prvAddCurrentTaskToDelayedList>
    2310:	0e 94 c6 04 	call	0x98c	; 0x98c <vPortYield>
    2314:	0f 90       	pop	r0
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	0f 92       	push	r0
    231e:	01 15       	cp	r16, r1
    2320:	11 05       	cpc	r17, r1
    2322:	69 f0       	breq	.+26     	; 0x233e <xTaskNotifyWait+0xa2>
    2324:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2328:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    232c:	87 a1       	ldd	r24, Z+39	; 0x27
    232e:	90 a5       	ldd	r25, Z+40	; 0x28
    2330:	a1 a5       	ldd	r26, Z+41	; 0x29
    2332:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2334:	f8 01       	movw	r30, r16
    2336:	80 83       	st	Z, r24
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	a2 83       	std	Z+2, r26	; 0x02
    233c:	b3 83       	std	Z+3, r27	; 0x03
    233e:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2342:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    2346:	83 a5       	ldd	r24, Z+43	; 0x2b
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	b1 f4       	brne	.+44     	; 0x2378 <xTaskNotifyWait+0xdc>
    234c:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2350:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    2354:	87 a1       	ldd	r24, Z+39	; 0x27
    2356:	90 a5       	ldd	r25, Z+40	; 0x28
    2358:	a1 a5       	ldd	r26, Z+41	; 0x29
    235a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    235c:	80 94       	com	r8
    235e:	90 94       	com	r9
    2360:	a0 94       	com	r10
    2362:	b0 94       	com	r11
    2364:	88 22       	and	r8, r24
    2366:	99 22       	and	r9, r25
    2368:	aa 22       	and	r10, r26
    236a:	bb 22       	and	r11, r27
    236c:	87 a2       	std	Z+39, r8	; 0x27
    236e:	90 a6       	std	Z+40, r9	; 0x28
    2370:	a1 a6       	std	Z+41, r10	; 0x29
    2372:	b2 a6       	std	Z+42, r11	; 0x2a
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	01 c0       	rjmp	.+2      	; 0x237a <xTaskNotifyWait+0xde>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    237e:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    2382:	13 a6       	std	Z+43, r1	; 0x2b
    2384:	0f 90       	pop	r0
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	bf 90       	pop	r11
    2392:	af 90       	pop	r10
    2394:	9f 90       	pop	r9
    2396:	8f 90       	pop	r8
    2398:	7f 90       	pop	r7
    239a:	6f 90       	pop	r6
    239c:	5f 90       	pop	r5
    239e:	4f 90       	pop	r4
    23a0:	08 95       	ret

000023a2 <xTaskGenericNotify>:
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	fc 01       	movw	r30, r24
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	0f 92       	push	r0
    23b2:	01 15       	cp	r16, r1
    23b4:	11 05       	cpc	r17, r1
    23b6:	49 f0       	breq	.+18     	; 0x23ca <xTaskGenericNotify+0x28>
    23b8:	87 a1       	ldd	r24, Z+39	; 0x27
    23ba:	90 a5       	ldd	r25, Z+40	; 0x28
    23bc:	a1 a5       	ldd	r26, Z+41	; 0x29
    23be:	b2 a5       	ldd	r27, Z+42	; 0x2a
    23c0:	e8 01       	movw	r28, r16
    23c2:	88 83       	st	Y, r24
    23c4:	99 83       	std	Y+1, r25	; 0x01
    23c6:	aa 83       	std	Y+2, r26	; 0x02
    23c8:	bb 83       	std	Y+3, r27	; 0x03
    23ca:	83 a5       	ldd	r24, Z+43	; 0x2b
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	93 a7       	std	Z+43, r25	; 0x2b
    23d0:	22 30       	cpi	r18, 0x02	; 2
    23d2:	b1 f0       	breq	.+44     	; 0x2400 <xTaskGenericNotify+0x5e>
    23d4:	18 f4       	brcc	.+6      	; 0x23dc <xTaskGenericNotify+0x3a>
    23d6:	21 30       	cpi	r18, 0x01	; 1
    23d8:	31 f0       	breq	.+12     	; 0x23e6 <xTaskGenericNotify+0x44>
    23da:	2a c0       	rjmp	.+84     	; 0x2430 <xTaskGenericNotify+0x8e>
    23dc:	23 30       	cpi	r18, 0x03	; 3
    23de:	e9 f0       	breq	.+58     	; 0x241a <xTaskGenericNotify+0x78>
    23e0:	24 30       	cpi	r18, 0x04	; 4
    23e2:	01 f1       	breq	.+64     	; 0x2424 <xTaskGenericNotify+0x82>
    23e4:	25 c0       	rjmp	.+74     	; 0x2430 <xTaskGenericNotify+0x8e>
    23e6:	07 a1       	ldd	r16, Z+39	; 0x27
    23e8:	10 a5       	ldd	r17, Z+40	; 0x28
    23ea:	21 a5       	ldd	r18, Z+41	; 0x29
    23ec:	32 a5       	ldd	r19, Z+42	; 0x2a
    23ee:	40 2b       	or	r20, r16
    23f0:	51 2b       	or	r21, r17
    23f2:	62 2b       	or	r22, r18
    23f4:	73 2b       	or	r23, r19
    23f6:	47 a3       	std	Z+39, r20	; 0x27
    23f8:	50 a7       	std	Z+40, r21	; 0x28
    23fa:	61 a7       	std	Z+41, r22	; 0x29
    23fc:	72 a7       	std	Z+42, r23	; 0x2a
    23fe:	18 c0       	rjmp	.+48     	; 0x2430 <xTaskGenericNotify+0x8e>
    2400:	47 a1       	ldd	r20, Z+39	; 0x27
    2402:	50 a5       	ldd	r21, Z+40	; 0x28
    2404:	61 a5       	ldd	r22, Z+41	; 0x29
    2406:	72 a5       	ldd	r23, Z+42	; 0x2a
    2408:	4f 5f       	subi	r20, 0xFF	; 255
    240a:	5f 4f       	sbci	r21, 0xFF	; 255
    240c:	6f 4f       	sbci	r22, 0xFF	; 255
    240e:	7f 4f       	sbci	r23, 0xFF	; 255
    2410:	47 a3       	std	Z+39, r20	; 0x27
    2412:	50 a7       	std	Z+40, r21	; 0x28
    2414:	61 a7       	std	Z+41, r22	; 0x29
    2416:	72 a7       	std	Z+42, r23	; 0x2a
    2418:	0b c0       	rjmp	.+22     	; 0x2430 <xTaskGenericNotify+0x8e>
    241a:	47 a3       	std	Z+39, r20	; 0x27
    241c:	50 a7       	std	Z+40, r21	; 0x28
    241e:	61 a7       	std	Z+41, r22	; 0x29
    2420:	72 a7       	std	Z+42, r23	; 0x2a
    2422:	06 c0       	rjmp	.+12     	; 0x2430 <xTaskGenericNotify+0x8e>
    2424:	82 30       	cpi	r24, 0x02	; 2
    2426:	79 f1       	breq	.+94     	; 0x2486 <xTaskGenericNotify+0xe4>
    2428:	47 a3       	std	Z+39, r20	; 0x27
    242a:	50 a7       	std	Z+40, r21	; 0x28
    242c:	61 a7       	std	Z+41, r22	; 0x29
    242e:	72 a7       	std	Z+42, r23	; 0x2a
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	59 f5       	brne	.+86     	; 0x248a <xTaskGenericNotify+0xe8>
    2434:	ef 01       	movw	r28, r30
    2436:	8f 01       	movw	r16, r30
    2438:	0e 5f       	subi	r16, 0xFE	; 254
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	c8 01       	movw	r24, r16
    243e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    2442:	8e 89       	ldd	r24, Y+22	; 0x16
    2444:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    2448:	98 17       	cp	r25, r24
    244a:	10 f4       	brcc	.+4      	; 0x2450 <xTaskGenericNotify+0xae>
    244c:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9c 01       	movw	r18, r24
    2454:	22 0f       	add	r18, r18
    2456:	33 1f       	adc	r19, r19
    2458:	22 0f       	add	r18, r18
    245a:	33 1f       	adc	r19, r19
    245c:	22 0f       	add	r18, r18
    245e:	33 1f       	adc	r19, r19
    2460:	82 0f       	add	r24, r18
    2462:	93 1f       	adc	r25, r19
    2464:	b8 01       	movw	r22, r16
    2466:	8e 57       	subi	r24, 0x7E	; 126
    2468:	9c 4f       	sbci	r25, 0xFC	; 252
    246a:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    246e:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2472:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    2476:	9e 89       	ldd	r25, Y+22	; 0x16
    2478:	86 89       	ldd	r24, Z+22	; 0x16
    247a:	89 17       	cp	r24, r25
    247c:	40 f4       	brcc	.+16     	; 0x248e <xTaskGenericNotify+0xec>
    247e:	0e 94 c6 04 	call	0x98c	; 0x98c <vPortYield>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	05 c0       	rjmp	.+10     	; 0x2490 <xTaskGenericNotify+0xee>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <xTaskGenericNotify+0xee>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <xTaskGenericNotify+0xee>
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0f 90       	pop	r0
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <xTaskGenericNotifyFromISR>:
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	fc 01       	movw	r30, r24
    24ac:	01 15       	cp	r16, r1
    24ae:	11 05       	cpc	r17, r1
    24b0:	49 f0       	breq	.+18     	; 0x24c4 <xTaskGenericNotifyFromISR+0x26>
    24b2:	87 a1       	ldd	r24, Z+39	; 0x27
    24b4:	90 a5       	ldd	r25, Z+40	; 0x28
    24b6:	a1 a5       	ldd	r26, Z+41	; 0x29
    24b8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    24ba:	e8 01       	movw	r28, r16
    24bc:	88 83       	st	Y, r24
    24be:	99 83       	std	Y+1, r25	; 0x01
    24c0:	aa 83       	std	Y+2, r26	; 0x02
    24c2:	bb 83       	std	Y+3, r27	; 0x03
    24c4:	83 a5       	ldd	r24, Z+43	; 0x2b
    24c6:	92 e0       	ldi	r25, 0x02	; 2
    24c8:	93 a7       	std	Z+43, r25	; 0x2b
    24ca:	22 30       	cpi	r18, 0x02	; 2
    24cc:	b1 f0       	breq	.+44     	; 0x24fa <xTaskGenericNotifyFromISR+0x5c>
    24ce:	18 f4       	brcc	.+6      	; 0x24d6 <xTaskGenericNotifyFromISR+0x38>
    24d0:	21 30       	cpi	r18, 0x01	; 1
    24d2:	31 f0       	breq	.+12     	; 0x24e0 <xTaskGenericNotifyFromISR+0x42>
    24d4:	2b c0       	rjmp	.+86     	; 0x252c <xTaskGenericNotifyFromISR+0x8e>
    24d6:	23 30       	cpi	r18, 0x03	; 3
    24d8:	e9 f0       	breq	.+58     	; 0x2514 <xTaskGenericNotifyFromISR+0x76>
    24da:	24 30       	cpi	r18, 0x04	; 4
    24dc:	01 f1       	breq	.+64     	; 0x251e <xTaskGenericNotifyFromISR+0x80>
    24de:	26 c0       	rjmp	.+76     	; 0x252c <xTaskGenericNotifyFromISR+0x8e>
    24e0:	07 a1       	ldd	r16, Z+39	; 0x27
    24e2:	10 a5       	ldd	r17, Z+40	; 0x28
    24e4:	21 a5       	ldd	r18, Z+41	; 0x29
    24e6:	32 a5       	ldd	r19, Z+42	; 0x2a
    24e8:	40 2b       	or	r20, r16
    24ea:	51 2b       	or	r21, r17
    24ec:	62 2b       	or	r22, r18
    24ee:	73 2b       	or	r23, r19
    24f0:	47 a3       	std	Z+39, r20	; 0x27
    24f2:	50 a7       	std	Z+40, r21	; 0x28
    24f4:	61 a7       	std	Z+41, r22	; 0x29
    24f6:	72 a7       	std	Z+42, r23	; 0x2a
    24f8:	19 c0       	rjmp	.+50     	; 0x252c <xTaskGenericNotifyFromISR+0x8e>
    24fa:	47 a1       	ldd	r20, Z+39	; 0x27
    24fc:	50 a5       	ldd	r21, Z+40	; 0x28
    24fe:	61 a5       	ldd	r22, Z+41	; 0x29
    2500:	72 a5       	ldd	r23, Z+42	; 0x2a
    2502:	4f 5f       	subi	r20, 0xFF	; 255
    2504:	5f 4f       	sbci	r21, 0xFF	; 255
    2506:	6f 4f       	sbci	r22, 0xFF	; 255
    2508:	7f 4f       	sbci	r23, 0xFF	; 255
    250a:	47 a3       	std	Z+39, r20	; 0x27
    250c:	50 a7       	std	Z+40, r21	; 0x28
    250e:	61 a7       	std	Z+41, r22	; 0x29
    2510:	72 a7       	std	Z+42, r23	; 0x2a
    2512:	0c c0       	rjmp	.+24     	; 0x252c <xTaskGenericNotifyFromISR+0x8e>
    2514:	47 a3       	std	Z+39, r20	; 0x27
    2516:	50 a7       	std	Z+40, r21	; 0x28
    2518:	61 a7       	std	Z+41, r22	; 0x29
    251a:	72 a7       	std	Z+42, r23	; 0x2a
    251c:	07 c0       	rjmp	.+14     	; 0x252c <xTaskGenericNotifyFromISR+0x8e>
    251e:	82 30       	cpi	r24, 0x02	; 2
    2520:	09 f4       	brne	.+2      	; 0x2524 <xTaskGenericNotifyFromISR+0x86>
    2522:	41 c0       	rjmp	.+130    	; 0x25a6 <xTaskGenericNotifyFromISR+0x108>
    2524:	47 a3       	std	Z+39, r20	; 0x27
    2526:	50 a7       	std	Z+40, r21	; 0x28
    2528:	61 a7       	std	Z+41, r22	; 0x29
    252a:	72 a7       	std	Z+42, r23	; 0x2a
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	e9 f5       	brne	.+122    	; 0x25aa <xTaskGenericNotifyFromISR+0x10c>
    2530:	ef 01       	movw	r28, r30
    2532:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
    2536:	81 11       	cpse	r24, r1
    2538:	1d c0       	rjmp	.+58     	; 0x2574 <xTaskGenericNotifyFromISR+0xd6>
    253a:	8f 01       	movw	r16, r30
    253c:	0e 5f       	subi	r16, 0xFE	; 254
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	c8 01       	movw	r24, r16
    2542:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
    2546:	8e 89       	ldd	r24, Y+22	; 0x16
    2548:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <uxTopReadyPriority>
    254c:	98 17       	cp	r25, r24
    254e:	10 f4       	brcc	.+4      	; 0x2554 <xTaskGenericNotifyFromISR+0xb6>
    2550:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <uxTopReadyPriority>
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9c 01       	movw	r18, r24
    2558:	22 0f       	add	r18, r18
    255a:	33 1f       	adc	r19, r19
    255c:	22 0f       	add	r18, r18
    255e:	33 1f       	adc	r19, r19
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	82 0f       	add	r24, r18
    2566:	93 1f       	adc	r25, r19
    2568:	b8 01       	movw	r22, r16
    256a:	8e 57       	subi	r24, 0x7E	; 126
    256c:	9c 4f       	sbci	r25, 0xFC	; 252
    256e:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    2572:	07 c0       	rjmp	.+14     	; 0x2582 <xTaskGenericNotifyFromISR+0xe4>
    2574:	bf 01       	movw	r22, r30
    2576:	64 5f       	subi	r22, 0xF4	; 244
    2578:	7f 4f       	sbci	r23, 0xFF	; 255
    257a:	83 e6       	ldi	r24, 0x63	; 99
    257c:	93 e0       	ldi	r25, 0x03	; 3
    257e:	0e 94 9f 03 	call	0x73e	; 0x73e <vListInsertEnd>
    2582:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    2586:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>
    258a:	9e 89       	ldd	r25, Y+22	; 0x16
    258c:	86 89       	ldd	r24, Z+22	; 0x16
    258e:	89 17       	cp	r24, r25
    2590:	70 f4       	brcc	.+28     	; 0x25ae <xTaskGenericNotifyFromISR+0x110>
    2592:	e1 14       	cp	r14, r1
    2594:	f1 04       	cpc	r15, r1
    2596:	19 f0       	breq	.+6      	; 0x259e <xTaskGenericNotifyFromISR+0x100>
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	f7 01       	movw	r30, r14
    259c:	80 83       	st	Z, r24
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <xYieldPending>
    25a4:	05 c0       	rjmp	.+10     	; 0x25b0 <xTaskGenericNotifyFromISR+0x112>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <xTaskGenericNotifyFromISR+0x112>
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <xTaskGenericNotifyFromISR+0x112>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	ff 90       	pop	r15
    25ba:	ef 90       	pop	r14
    25bc:	08 95       	ret

000025be <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	21 f4       	brne	.+8      	; 0x25ca <xTaskNotifyStateClear+0xc>
    25c2:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <pxCurrentTCB>
    25c6:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    25d0:	fc 01       	movw	r30, r24
    25d2:	23 a5       	ldd	r18, Z+43	; 0x2b
    25d4:	22 30       	cpi	r18, 0x02	; 2
    25d6:	19 f4       	brne	.+6      	; 0x25de <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    25d8:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    25de:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    25e4:	08 95       	ret

000025e6 <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    25e6:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    25e8:	73 83       	std	Z+3, r23	; 0x03
    25ea:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    25ec:	91 87       	std	Z+9, r25	; 0x09
    25ee:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    25f0:	46 17       	cp	r20, r22
    25f2:	57 07       	cpc	r21, r23
    25f4:	90 f0       	brcs	.+36     	; 0x261a <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25f6:	42 1b       	sub	r20, r18
    25f8:	53 0b       	sbc	r21, r19
    25fa:	84 85       	ldd	r24, Z+12	; 0x0c
    25fc:	95 85       	ldd	r25, Z+13	; 0x0d
    25fe:	48 17       	cp	r20, r24
    2600:	59 07       	cpc	r21, r25
    2602:	e0 f4       	brcc	.+56     	; 0x263c <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2604:	bf 01       	movw	r22, r30
    2606:	6e 5f       	subi	r22, 0xFE	; 254
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <pxOverflowTimerList>
    260e:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <pxOverflowTimerList+0x1>
    2612:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    261a:	42 17       	cp	r20, r18
    261c:	53 07       	cpc	r21, r19
    261e:	18 f4       	brcc	.+6      	; 0x2626 <prvInsertTimerInActiveList+0x40>
    2620:	62 17       	cp	r22, r18
    2622:	73 07       	cpc	r23, r19
    2624:	68 f4       	brcc	.+26     	; 0x2640 <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2626:	bf 01       	movw	r22, r30
    2628:	6e 5f       	subi	r22, 0xFE	; 254
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <pxCurrentTimerList>
    2630:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <pxCurrentTimerList+0x1>
    2634:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    2640:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    2642:	08 95       	ret

00002644 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    264a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <xTimerQueue>
    264e:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <xTimerQueue+0x1>
    2652:	89 2b       	or	r24, r25
    2654:	e9 f4       	brne	.+58     	; 0x2690 <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    2656:	8b eb       	ldi	r24, 0xBB	; 187
    2658:	93 e0       	ldi	r25, 0x03	; 3
    265a:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    265e:	82 eb       	ldi	r24, 0xB2	; 178
    2660:	93 e0       	ldi	r25, 0x03	; 3
    2662:	0e 94 8d 03 	call	0x71a	; 0x71a <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    2666:	8b eb       	ldi	r24, 0xBB	; 187
    2668:	93 e0       	ldi	r25, 0x03	; 3
    266a:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <pxCurrentTimerList+0x1>
    266e:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    2672:	82 eb       	ldi	r24, 0xB2	; 178
    2674:	93 e0       	ldi	r25, 0x03	; 3
    2676:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <pxOverflowTimerList+0x1>
    267a:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	65 e0       	ldi	r22, 0x05	; 5
    2682:	8a e0       	ldi	r24, 0x0A	; 10
    2684:	0e 94 a2 06 	call	0xd44	; 0xd44 <xQueueGenericCreate>
    2688:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <xTimerQueue+0x1>
    268c:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    2690:	0f 90       	pop	r0
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	08 95       	ret

00002696 <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    269c:	d3 df       	rcall	.-90     	; 0x2644 <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    269e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <xTimerQueue>
    26a2:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <xTimerQueue+0x1>
    26a6:	89 2b       	or	r24, r25
    26a8:	89 f0       	breq	.+34     	; 0x26cc <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    26aa:	0f 2e       	mov	r0, r31
    26ac:	fa ea       	ldi	r31, 0xAA	; 170
    26ae:	ef 2e       	mov	r14, r31
    26b0:	f3 e0       	ldi	r31, 0x03	; 3
    26b2:	ff 2e       	mov	r15, r31
    26b4:	f0 2d       	mov	r31, r0
    26b6:	03 e0       	ldi	r16, 0x03	; 3
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	45 e5       	ldi	r20, 0x55	; 85
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	6a e1       	ldi	r22, 0x1A	; 26
    26c2:	73 e0       	ldi	r23, 0x03	; 3
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	91 e0       	ldi	r25, 0x01	; 1
    26c8:	c5 d8       	rcall	.-3702   	; 0x1854 <xTaskCreate>
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    26cc:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	08 95       	ret

000026d6 <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    26d6:	8f 92       	push	r8
    26d8:	9f 92       	push	r9
    26da:	af 92       	push	r10
    26dc:	bf 92       	push	r11
    26de:	cf 92       	push	r12
    26e0:	df 92       	push	r13
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	4c 01       	movw	r8, r24
    26ee:	5b 01       	movw	r10, r22
    26f0:	f4 2e       	mov	r15, r20
    26f2:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    26f4:	84 e1       	ldi	r24, 0x14	; 20
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <pvPortMalloc>
    26fc:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    26fe:	89 2b       	or	r24, r25
    2700:	99 f0       	breq	.+38     	; 0x2728 <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    2702:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    2704:	9f df       	rcall	.-194    	; 0x2644 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    2706:	99 82       	std	Y+1, r9	; 0x01
    2708:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    270a:	bd 86       	std	Y+13, r11	; 0x0d
    270c:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    270e:	df 86       	std	Y+15, r13	; 0x0f
    2710:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2712:	19 8b       	std	Y+17, r17	; 0x11
    2714:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2716:	ce 01       	movw	r24, r28
    2718:	02 96       	adiw	r24, 0x02	; 2
    271a:	0e 94 9b 03 	call	0x736	; 0x736 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    271e:	ff 20       	and	r15, r15
    2720:	19 f0       	breq	.+6      	; 0x2728 <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2722:	8b 89       	ldd	r24, Y+19	; 0x13
    2724:	84 60       	ori	r24, 0x04	; 4
    2726:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    2728:	ce 01       	movw	r24, r28
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	df 90       	pop	r13
    2736:	cf 90       	pop	r12
    2738:	bf 90       	pop	r11
    273a:	af 90       	pop	r10
    273c:	9f 90       	pop	r9
    273e:	8f 90       	pop	r8
    2740:	08 95       	ret

00002742 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	00 d0       	rcall	.+0      	; 0x274c <xTimerGenericCommand+0xa>
    274c:	1f 92       	push	r1
    274e:	1f 92       	push	r1
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2754:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <xTimerQueue>
    2758:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <xTimerQueue+0x1>
    275c:	30 97       	sbiw	r30, 0x00	; 0
    275e:	69 f1       	breq	.+90     	; 0x27ba <xTimerGenericCommand+0x78>
    2760:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2762:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2764:	5b 83       	std	Y+3, r21	; 0x03
    2766:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2768:	9d 83       	std	Y+5, r25	; 0x05
    276a:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    276c:	66 30       	cpi	r22, 0x06	; 6
    276e:	e4 f4       	brge	.+56     	; 0x27a8 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2770:	73 dc       	rcall	.-1818   	; 0x2058 <xTaskGetSchedulerState>
    2772:	82 30       	cpi	r24, 0x02	; 2
    2774:	61 f4       	brne	.+24     	; 0x278e <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	a8 01       	movw	r20, r16
    277a:	be 01       	movw	r22, r28
    277c:	6f 5f       	subi	r22, 0xFF	; 255
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <xTimerQueue>
    2784:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <xTimerQueue+0x1>
    2788:	0e 94 d0 06 	call	0xda0	; 0xda0 <xQueueGenericSend>
    278c:	17 c0       	rjmp	.+46     	; 0x27bc <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	be 01       	movw	r22, r28
    2796:	6f 5f       	subi	r22, 0xFF	; 255
    2798:	7f 4f       	sbci	r23, 0xFF	; 255
    279a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <xTimerQueue>
    279e:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <xTimerQueue+0x1>
    27a2:	0e 94 d0 06 	call	0xda0	; 0xda0 <xQueueGenericSend>
    27a6:	0a c0       	rjmp	.+20     	; 0x27bc <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	ad 01       	movw	r20, r26
    27ac:	be 01       	movw	r22, r28
    27ae:	6f 5f       	subi	r22, 0xFF	; 255
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	cf 01       	movw	r24, r30
    27b4:	0e 94 7e 07 	call	0xefc	; 0xefc <xQueueGenericSendFromISR>
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	08 95       	ret

000027d0 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    27d0:	af 92       	push	r10
    27d2:	bf 92       	push	r11
    27d4:	cf 92       	push	r12
    27d6:	df 92       	push	r13
    27d8:	ef 92       	push	r14
    27da:	ff 92       	push	r15
    27dc:	0f 93       	push	r16
    27de:	1f 93       	push	r17
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    27e6:	8e d9       	rcall	.-3300   	; 0x1b04 <xTaskGetTickCount>
    27e8:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    27ea:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <xLastTime.2432>
    27ee:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <xLastTime.2432+0x1>
    27f2:	e8 16       	cp	r14, r24
    27f4:	f9 06       	cpc	r15, r25
    27f6:	08 f0       	brcs	.+2      	; 0x27fa <prvSampleTimeNow+0x2a>
    27f8:	47 c0       	rjmp	.+142    	; 0x2888 <prvSampleTimeNow+0xb8>
    27fa:	2f c0       	rjmp	.+94     	; 0x285a <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    27fc:	05 80       	ldd	r0, Z+5	; 0x05
    27fe:	f6 81       	ldd	r31, Z+6	; 0x06
    2800:	e0 2d       	mov	r30, r0
    2802:	a0 80       	ld	r10, Z
    2804:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2806:	c6 81       	ldd	r28, Z+6	; 0x06
    2808:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    280a:	8e 01       	movw	r16, r28
    280c:	0e 5f       	subi	r16, 0xFE	; 254
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	c8 01       	movw	r24, r16
    2812:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2816:	e8 89       	ldd	r30, Y+16	; 0x10
    2818:	f9 89       	ldd	r31, Y+17	; 0x11
    281a:	ce 01       	movw	r24, r28
    281c:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    281e:	8b 89       	ldd	r24, Y+19	; 0x13
    2820:	82 ff       	sbrs	r24, 2
    2822:	1b c0       	rjmp	.+54     	; 0x285a <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2824:	8c 85       	ldd	r24, Y+12	; 0x0c
    2826:	9d 85       	ldd	r25, Y+13	; 0x0d
    2828:	8a 0d       	add	r24, r10
    282a:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    282c:	a8 16       	cp	r10, r24
    282e:	b9 06       	cpc	r11, r25
    2830:	60 f4       	brcc	.+24     	; 0x284a <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2832:	9b 83       	std	Y+3, r25	; 0x03
    2834:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2836:	d9 87       	std	Y+9, r29	; 0x09
    2838:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    283a:	b8 01       	movw	r22, r16
    283c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <pxCurrentTimerList>
    2840:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <pxCurrentTimerList+0x1>
    2844:	0e 94 c0 03 	call	0x780	; 0x780 <vListInsert>
    2848:	08 c0       	rjmp	.+16     	; 0x285a <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    284a:	00 e0       	ldi	r16, 0x00	; 0
    284c:	10 e0       	ldi	r17, 0x00	; 0
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	a5 01       	movw	r20, r10
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	ce 01       	movw	r24, r28
    2858:	74 df       	rcall	.-280    	; 0x2742 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    285a:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <pxCurrentTimerList>
    285e:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <pxCurrentTimerList+0x1>
    2862:	80 81       	ld	r24, Z
    2864:	81 11       	cpse	r24, r1
    2866:	ca cf       	rjmp	.-108    	; 0x27fc <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2868:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <pxOverflowTimerList>
    286c:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <pxOverflowTimerList+0x1>
    2870:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <pxCurrentTimerList+0x1>
    2874:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2878:	f0 93 af 03 	sts	0x03AF, r31	; 0x8003af <pxOverflowTimerList+0x1>
    287c:	e0 93 ae 03 	sts	0x03AE, r30	; 0x8003ae <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	f6 01       	movw	r30, r12
    2884:	80 83       	st	Z, r24
    2886:	02 c0       	rjmp	.+4      	; 0x288c <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2888:	f6 01       	movw	r30, r12
    288a:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    288c:	f0 92 a9 03 	sts	0x03A9, r15	; 0x8003a9 <xLastTime.2432+0x1>
    2890:	e0 92 a8 03 	sts	0x03A8, r14	; 0x8003a8 <xLastTime.2432>

    return xTimeNow;
}
    2894:	c7 01       	movw	r24, r14
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	ff 90       	pop	r15
    28a0:	ef 90       	pop	r14
    28a2:	df 90       	pop	r13
    28a4:	cf 90       	pop	r12
    28a6:	bf 90       	pop	r11
    28a8:	af 90       	pop	r10
    28aa:	08 95       	ret

000028ac <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    28ac:	08 95       	ret

000028ae <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    28ae:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    28b0:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28b2:	2f ef       	ldi	r18, 0xFF	; 255
    28b4:	80 e7       	ldi	r24, 0x70	; 112
    28b6:	92 e0       	ldi	r25, 0x02	; 2
    28b8:	21 50       	subi	r18, 0x01	; 1
    28ba:	80 40       	sbci	r24, 0x00	; 0
    28bc:	90 40       	sbci	r25, 0x00	; 0
    28be:	e1 f7       	brne	.-8      	; 0x28b8 <vApplicationMallocFailedHook+0xa>
    28c0:	00 c0       	rjmp	.+0      	; 0x28c2 <vApplicationMallocFailedHook+0x14>
    28c2:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    28c4:	1f 9a       	sbi	0x03, 7	; 3
    28c6:	f5 cf       	rjmp	.-22     	; 0x28b2 <vApplicationMallocFailedHook+0x4>

000028c8 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    28c8:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    28ca:	2f 9a       	sbi	0x05, 7	; 5
    28cc:	2f ef       	ldi	r18, 0xFF	; 255
    28ce:	87 ea       	ldi	r24, 0xA7	; 167
    28d0:	91 e6       	ldi	r25, 0x61	; 97
    28d2:	21 50       	subi	r18, 0x01	; 1
    28d4:	80 40       	sbci	r24, 0x00	; 0
    28d6:	90 40       	sbci	r25, 0x00	; 0
    28d8:	e1 f7       	brne	.-8      	; 0x28d2 <vApplicationStackOverflowHook+0xa>
    28da:	00 c0       	rjmp	.+0      	; 0x28dc <vApplicationStackOverflowHook+0x14>
    28dc:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    28de:	1f 9a       	sbi	0x03, 7	; 3
    28e0:	f5 cf       	rjmp	.-22     	; 0x28cc <vApplicationStackOverflowHook+0x4>

000028e2 <main>:

SemaphoreHandle_t xSemaphore_temp;

int main(void)
{			
	driver_init();
    28e2:	0e 94 a2 02 	call	0x544	; 0x544 <driver_init>
	
	create_all_tasks(LORA_HANDLER_TASK_PRIORITY);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <create_all_tasks>
	
	create_all_timers();
    28ec:	0e 94 81 02 	call	0x502	; 0x502 <create_all_timers>
	
	
	
	//xTimerStart(xTimer_measure_temp,0);
	//xTimerStart(xTimer_read_temp,0);
	xTimerStart(xTimer_measure_co2,0);
    28f0:	09 d9       	rcall	.-3566   	; 0x1b04 <xTaskGetTickCount>
    28f2:	00 e0       	ldi	r16, 0x00	; 0
    28f4:	10 e0       	ldi	r17, 0x00	; 0
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	ac 01       	movw	r20, r24
    28fc:	61 e0       	ldi	r22, 0x01	; 1
    28fe:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <xTimer_measure_co2>
    2902:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <xTimer_measure_co2+0x1>
    2906:	1d df       	rcall	.-454    	; 0x2742 <xTimerGenericCommand>
	xTimerStart(xTimer_read_co2,0);
    2908:	fd d8       	rcall	.-3590   	; 0x1b04 <xTaskGetTickCount>
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	ac 01       	movw	r20, r24
    2910:	61 e0       	ldi	r22, 0x01	; 1
    2912:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <xTimer_read_co2>
    2916:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <xTimer_read_co2+0x1>
    291a:	13 df       	rcall	.-474    	; 0x2742 <xTimerGenericCommand>
					
	vTaskStartScheduler();
    291c:	ba d8       	rcall	.-3724   	; 0x1a92 <vTaskStartScheduler>
    291e:	ff cf       	rjmp	.-2      	; 0x291e <main+0x3c>

00002920 <usart_getchar>:
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	1f 92       	push	r1
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	be 01       	movw	r22, r28
    292c:	6f 5f       	subi	r22, 0xFF	; 255
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <_com_serial_instance>
    2934:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <_com_serial_instance+0x1>
    2938:	4d d1       	rcall	.+666    	; 0x2bd4 <serial_get_byte>
    293a:	81 11       	cpse	r24, r1
    293c:	f6 cf       	rjmp	.-20     	; 0x292a <usart_getchar+0xa>
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0f 90       	pop	r0
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	08 95       	ret

0000294a <usart_putchar>:
    294a:	68 2f       	mov	r22, r24
    294c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <_com_serial_instance>
    2950:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <_com_serial_instance+0x1>
    2954:	ca d0       	rcall	.+404    	; 0x2aea <serial_send_byte>
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	08 95       	ret

0000295c <stdioCreate>:
    295c:	8f 92       	push	r8
    295e:	9f 92       	push	r9
    2960:	af 92       	push	r10
    2962:	cf 92       	push	r12
    2964:	ef 92       	push	r14
    2966:	0f 93       	push	r16
    2968:	81 2c       	mov	r8, r1
    296a:	91 2c       	mov	r9, r1
    296c:	68 94       	set
    296e:	aa 24       	eor	r10, r10
    2970:	a7 f8       	bld	r10, 7
    2972:	68 94       	set
    2974:	cc 24       	eor	r12, r12
    2976:	c7 f8       	bld	r12, 7
    2978:	e1 2c       	mov	r14, r1
    297a:	00 e0       	ldi	r16, 0x00	; 0
    297c:	23 e0       	ldi	r18, 0x03	; 3
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	51 ee       	ldi	r21, 0xE1	; 225
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	70 e0       	ldi	r23, 0x00	; 0
    2986:	13 d0       	rcall	.+38     	; 0x29ae <serial_new_instance>
    2988:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <_com_serial_instance+0x1>
    298c:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <_com_serial_instance>
    2990:	ec e5       	ldi	r30, 0x5C	; 92
    2992:	f4 e0       	ldi	r31, 0x04	; 4
    2994:	86 e0       	ldi	r24, 0x06	; 6
    2996:	92 e0       	ldi	r25, 0x02	; 2
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
    299c:	93 83       	std	Z+3, r25	; 0x03
    299e:	82 83       	std	Z+2, r24	; 0x02
    29a0:	0f 91       	pop	r16
    29a2:	ef 90       	pop	r14
    29a4:	cf 90       	pop	r12
    29a6:	af 90       	pop	r10
    29a8:	9f 90       	pop	r9
    29aa:	8f 90       	pop	r8
    29ac:	08 95       	ret

000029ae <serial_new_instance>:
    29ae:	2f 92       	push	r2
    29b0:	3f 92       	push	r3
    29b2:	4f 92       	push	r4
    29b4:	5f 92       	push	r5
    29b6:	6f 92       	push	r6
    29b8:	7f 92       	push	r7
    29ba:	8f 92       	push	r8
    29bc:	9f 92       	push	r9
    29be:	af 92       	push	r10
    29c0:	cf 92       	push	r12
    29c2:	ef 92       	push	r14
    29c4:	ff 92       	push	r15
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	f8 2e       	mov	r15, r24
    29d4:	2a 01       	movw	r4, r20
    29d6:	3b 01       	movw	r6, r22
    29d8:	88 e0       	ldi	r24, 0x08	; 8
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <malloc>
    29e0:	8c 01       	movw	r16, r24
    29e2:	8f 2d       	mov	r24, r15
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	fc 01       	movw	r30, r24
    29ec:	ea 53       	subi	r30, 0x3A	; 58
    29ee:	fc 4f       	sbci	r31, 0xFC	; 252
    29f0:	11 83       	std	Z+1, r17	; 0x01
    29f2:	00 83       	st	Z, r16
    29f4:	fc 01       	movw	r30, r24
    29f6:	ec 5e       	subi	r30, 0xEC	; 236
    29f8:	fd 4f       	sbci	r31, 0xFD	; 253
    29fa:	80 81       	ld	r24, Z
    29fc:	91 81       	ldd	r25, Z+1	; 0x01
    29fe:	d8 01       	movw	r26, r16
    2a00:	8d 93       	st	X+, r24
    2a02:	9c 93       	st	X, r25
    2a04:	6c 2d       	mov	r22, r12
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	84 e0       	ldi	r24, 0x04	; 4
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <calloc>
    2a10:	1c 01       	movw	r2, r24
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	86 e0       	ldi	r24, 0x06	; 6
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <calloc>
    2a1e:	7c 01       	movw	r14, r24
    2a20:	4c 2d       	mov	r20, r12
    2a22:	b1 01       	movw	r22, r2
    2a24:	4b d3       	rcall	.+1686   	; 0x30bc <fifo_init>
    2a26:	f8 01       	movw	r30, r16
    2a28:	f5 82       	std	Z+5, r15	; 0x05
    2a2a:	e4 82       	std	Z+4, r14	; 0x04
    2a2c:	6a 2d       	mov	r22, r10
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	84 e0       	ldi	r24, 0x04	; 4
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <calloc>
    2a38:	1c 01       	movw	r2, r24
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	86 e0       	ldi	r24, 0x06	; 6
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <calloc>
    2a46:	7c 01       	movw	r14, r24
    2a48:	4a 2d       	mov	r20, r10
    2a4a:	b1 01       	movw	r22, r2
    2a4c:	37 d3       	rcall	.+1646   	; 0x30bc <fifo_init>
    2a4e:	d8 01       	movw	r26, r16
    2a50:	13 96       	adiw	r26, 0x03	; 3
    2a52:	fc 92       	st	X, r15
    2a54:	ee 92       	st	-X, r14
    2a56:	12 97       	sbiw	r26, 0x02	; 2
    2a58:	17 96       	adiw	r26, 0x07	; 7
    2a5a:	9c 92       	st	X, r9
    2a5c:	8e 92       	st	-X, r8
    2a5e:	16 97       	sbiw	r26, 0x06	; 6
    2a60:	ff b6       	in	r15, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	11 97       	sbiw	r26, 0x01	; 1
    2a6a:	36 97       	sbiw	r30, 0x06	; 6
    2a6c:	80 81       	ld	r24, Z
    2a6e:	82 60       	ori	r24, 0x02	; 2
    2a70:	80 83       	st	Z, r24
    2a72:	8d 90       	ld	r8, X+
    2a74:	9c 90       	ld	r9, X
    2a76:	c3 01       	movw	r24, r6
    2a78:	b2 01       	movw	r22, r4
    2a7a:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <__floatunsisf>
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__mulsf3>
    2a8a:	9b 01       	movw	r18, r22
    2a8c:	ac 01       	movw	r20, r24
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	74 e2       	ldi	r23, 0x24	; 36
    2a92:	84 e7       	ldi	r24, 0x74	; 116
    2a94:	9b e4       	ldi	r25, 0x4B	; 75
    2a96:	e8 d7       	rcall	.+4048   	; 0x3a68 <__divsf3>
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e8       	ldi	r20, 0x80	; 128
    2a9e:	5f e3       	ldi	r21, 0x3F	; 63
    2aa0:	7e d7       	rcall	.+3836   	; 0x399e <__subsf3>
    2aa2:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <__fixunssfsi>
    2aa6:	f4 01       	movw	r30, r8
    2aa8:	32 97       	sbiw	r30, 0x02	; 2
    2aaa:	60 83       	st	Z, r22
    2aac:	d8 01       	movw	r26, r16
    2aae:	ed 91       	ld	r30, X+
    2ab0:	fc 91       	ld	r31, X
    2ab2:	11 97       	sbiw	r26, 0x01	; 1
    2ab4:	35 97       	sbiw	r30, 0x05	; 5
    2ab6:	88 e9       	ldi	r24, 0x98	; 152
    2ab8:	80 83       	st	Z, r24
    2aba:	ed 91       	ld	r30, X+
    2abc:	fc 91       	ld	r31, X
    2abe:	34 97       	sbiw	r30, 0x04	; 4
    2ac0:	86 e0       	ldi	r24, 0x06	; 6
    2ac2:	80 83       	st	Z, r24
    2ac4:	ff be       	out	0x3f, r15	; 63
    2ac6:	c8 01       	movw	r24, r16
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	1f 91       	pop	r17
    2ace:	0f 91       	pop	r16
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	cf 90       	pop	r12
    2ad6:	af 90       	pop	r10
    2ad8:	9f 90       	pop	r9
    2ada:	8f 90       	pop	r8
    2adc:	7f 90       	pop	r7
    2ade:	6f 90       	pop	r6
    2ae0:	5f 90       	pop	r5
    2ae2:	4f 90       	pop	r4
    2ae4:	3f 90       	pop	r3
    2ae6:	2f 90       	pop	r2
    2ae8:	08 95       	ret

00002aea <serial_send_byte>:
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	ec 01       	movw	r28, r24
    2af0:	ea 81       	ldd	r30, Y+2	; 0x02
    2af2:	fb 81       	ldd	r31, Y+3	; 0x03
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	25 81       	ldd	r18, Z+5	; 0x05
    2afa:	98 1b       	sub	r25, r24
    2afc:	92 23       	and	r25, r18
    2afe:	84 81       	ldd	r24, Z+4	; 0x04
    2b00:	98 17       	cp	r25, r24
    2b02:	a1 f0       	breq	.+40     	; 0x2b2c <serial_send_byte+0x42>
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	26 95       	lsr	r18
    2b08:	29 23       	and	r18, r25
    2b0a:	a0 81       	ld	r26, Z
    2b0c:	b1 81       	ldd	r27, Z+1	; 0x01
    2b0e:	a2 0f       	add	r26, r18
    2b10:	b1 1d       	adc	r27, r1
    2b12:	6c 93       	st	X, r22
    2b14:	9f 5f       	subi	r25, 0xFF	; 255
    2b16:	25 81       	ldd	r18, Z+5	; 0x05
    2b18:	92 23       	and	r25, r18
    2b1a:	93 83       	std	Z+3, r25	; 0x03
    2b1c:	e8 81       	ld	r30, Y
    2b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b20:	35 97       	sbiw	r30, 0x05	; 5
    2b22:	80 81       	ld	r24, Z
    2b24:	80 62       	ori	r24, 0x20	; 32
    2b26:	80 83       	st	Z, r24
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	01 c0       	rjmp	.+2      	; 0x2b2e <serial_send_byte+0x44>
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	08 95       	ret

00002b34 <serial_send_bytes>:
    2b34:	ef 92       	push	r14
    2b36:	ff 92       	push	r15
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	7c 01       	movw	r14, r24
    2b42:	dc 01       	movw	r26, r24
    2b44:	12 96       	adiw	r26, 0x02	; 2
    2b46:	ed 91       	ld	r30, X+
    2b48:	fc 91       	ld	r31, X
    2b4a:	13 97       	sbiw	r26, 0x03	; 3
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	98 1b       	sub	r25, r24
    2b52:	85 81       	ldd	r24, Z+5	; 0x05
    2b54:	98 23       	and	r25, r24
    2b56:	84 81       	ldd	r24, Z+4	; 0x04
    2b58:	89 1b       	sub	r24, r25
    2b5a:	86 17       	cp	r24, r22
    2b5c:	98 f1       	brcs	.+102    	; 0x2bc4 <serial_send_bytes+0x90>
    2b5e:	66 23       	and	r22, r22
    2b60:	41 f1       	breq	.+80     	; 0x2bb2 <serial_send_bytes+0x7e>
    2b62:	84 2f       	mov	r24, r20
    2b64:	95 2f       	mov	r25, r21
    2b66:	dc 01       	movw	r26, r24
    2b68:	61 50       	subi	r22, 0x01	; 1
    2b6a:	46 2f       	mov	r20, r22
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	4f 5f       	subi	r20, 0xFF	; 255
    2b70:	5f 4f       	sbci	r21, 0xFF	; 255
    2b72:	48 0f       	add	r20, r24
    2b74:	59 1f       	adc	r21, r25
    2b76:	e7 01       	movw	r28, r14
    2b78:	ea 81       	ldd	r30, Y+2	; 0x02
    2b7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	25 81       	ldd	r18, Z+5	; 0x05
    2b82:	98 1b       	sub	r25, r24
    2b84:	92 23       	and	r25, r18
    2b86:	84 81       	ldd	r24, Z+4	; 0x04
    2b88:	98 17       	cp	r25, r24
    2b8a:	79 f0       	breq	.+30     	; 0x2baa <serial_send_bytes+0x76>
    2b8c:	8c 91       	ld	r24, X
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	26 95       	lsr	r18
    2b92:	29 23       	and	r18, r25
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	8b 01       	movw	r16, r22
    2b9a:	02 0f       	add	r16, r18
    2b9c:	11 1d       	adc	r17, r1
    2b9e:	e8 01       	movw	r28, r16
    2ba0:	88 83       	st	Y, r24
    2ba2:	9f 5f       	subi	r25, 0xFF	; 255
    2ba4:	85 81       	ldd	r24, Z+5	; 0x05
    2ba6:	98 23       	and	r25, r24
    2ba8:	93 83       	std	Z+3, r25	; 0x03
    2baa:	11 96       	adiw	r26, 0x01	; 1
    2bac:	a4 17       	cp	r26, r20
    2bae:	b5 07       	cpc	r27, r21
    2bb0:	11 f7       	brne	.-60     	; 0x2b76 <serial_send_bytes+0x42>
    2bb2:	d7 01       	movw	r26, r14
    2bb4:	ed 91       	ld	r30, X+
    2bb6:	fc 91       	ld	r31, X
    2bb8:	35 97       	sbiw	r30, 0x05	; 5
    2bba:	80 81       	ld	r24, Z
    2bbc:	80 62       	ori	r24, 0x20	; 32
    2bbe:	80 83       	st	Z, r24
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	01 c0       	rjmp	.+2      	; 0x2bc6 <serial_send_bytes+0x92>
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	08 95       	ret

00002bd4 <serial_get_byte>:
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	14 96       	adiw	r26, 0x04	; 4
    2bd8:	ed 91       	ld	r30, X+
    2bda:	fc 91       	ld	r31, X
    2bdc:	15 97       	sbiw	r26, 0x05	; 5
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	82 81       	ldd	r24, Z+2	; 0x02
    2be2:	98 17       	cp	r25, r24
    2be4:	89 f0       	breq	.+34     	; 0x2c08 <serial_get_byte+0x34>
    2be6:	92 81       	ldd	r25, Z+2	; 0x02
    2be8:	85 81       	ldd	r24, Z+5	; 0x05
    2bea:	86 95       	lsr	r24
    2bec:	89 23       	and	r24, r25
    2bee:	a0 81       	ld	r26, Z
    2bf0:	b1 81       	ldd	r27, Z+1	; 0x01
    2bf2:	a8 0f       	add	r26, r24
    2bf4:	b1 1d       	adc	r27, r1
    2bf6:	8c 91       	ld	r24, X
    2bf8:	db 01       	movw	r26, r22
    2bfa:	8c 93       	st	X, r24
    2bfc:	9f 5f       	subi	r25, 0xFF	; 255
    2bfe:	85 81       	ldd	r24, Z+5	; 0x05
    2c00:	98 23       	and	r25, r24
    2c02:	92 83       	std	Z+2, r25	; 0x02
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	08 95       	ret
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	08 95       	ret

00002c0c <__vector_25>:
    2c0c:	1f 92       	push	r1
    2c0e:	0f 92       	push	r0
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	0f 92       	push	r0
    2c14:	11 24       	eor	r1, r1
    2c16:	0b b6       	in	r0, 0x3b	; 59
    2c18:	0f 92       	push	r0
    2c1a:	2f 93       	push	r18
    2c1c:	3f 93       	push	r19
    2c1e:	4f 93       	push	r20
    2c20:	5f 93       	push	r21
    2c22:	6f 93       	push	r22
    2c24:	7f 93       	push	r23
    2c26:	8f 93       	push	r24
    2c28:	9f 93       	push	r25
    2c2a:	af 93       	push	r26
    2c2c:	bf 93       	push	r27
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	ef 93       	push	r30
    2c34:	ff 93       	push	r31
    2c36:	a0 91 c6 03 	lds	r26, 0x03C6	; 0x8003c6 <_ser_handle>
    2c3a:	b0 91 c7 03 	lds	r27, 0x03C7	; 0x8003c7 <_ser_handle+0x1>
    2c3e:	10 97       	sbiw	r26, 0x00	; 0
    2c40:	11 f1       	breq	.+68     	; 0x2c86 <__vector_25+0x7a>
    2c42:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2c46:	14 96       	adiw	r26, 0x04	; 4
    2c48:	ed 91       	ld	r30, X+
    2c4a:	fc 91       	ld	r31, X
    2c4c:	15 97       	sbiw	r26, 0x05	; 5
    2c4e:	93 81       	ldd	r25, Z+3	; 0x03
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	25 81       	ldd	r18, Z+5	; 0x05
    2c54:	98 1b       	sub	r25, r24
    2c56:	92 23       	and	r25, r18
    2c58:	84 81       	ldd	r24, Z+4	; 0x04
    2c5a:	98 17       	cp	r25, r24
    2c5c:	61 f0       	breq	.+24     	; 0x2c76 <__vector_25+0x6a>
    2c5e:	83 81       	ldd	r24, Z+3	; 0x03
    2c60:	26 95       	lsr	r18
    2c62:	28 23       	and	r18, r24
    2c64:	c0 81       	ld	r28, Z
    2c66:	d1 81       	ldd	r29, Z+1	; 0x01
    2c68:	c2 0f       	add	r28, r18
    2c6a:	d1 1d       	adc	r29, r1
    2c6c:	68 83       	st	Y, r22
    2c6e:	8f 5f       	subi	r24, 0xFF	; 255
    2c70:	95 81       	ldd	r25, Z+5	; 0x05
    2c72:	89 23       	and	r24, r25
    2c74:	83 83       	std	Z+3, r24	; 0x03
    2c76:	16 96       	adiw	r26, 0x06	; 6
    2c78:	ed 91       	ld	r30, X+
    2c7a:	fc 91       	ld	r31, X
    2c7c:	17 97       	sbiw	r26, 0x07	; 7
    2c7e:	30 97       	sbiw	r30, 0x00	; 0
    2c80:	11 f0       	breq	.+4      	; 0x2c86 <__vector_25+0x7a>
    2c82:	cd 01       	movw	r24, r26
    2c84:	19 95       	eicall
    2c86:	ff 91       	pop	r31
    2c88:	ef 91       	pop	r30
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	bf 91       	pop	r27
    2c90:	af 91       	pop	r26
    2c92:	9f 91       	pop	r25
    2c94:	8f 91       	pop	r24
    2c96:	7f 91       	pop	r23
    2c98:	6f 91       	pop	r22
    2c9a:	5f 91       	pop	r21
    2c9c:	4f 91       	pop	r20
    2c9e:	3f 91       	pop	r19
    2ca0:	2f 91       	pop	r18
    2ca2:	0f 90       	pop	r0
    2ca4:	0b be       	out	0x3b, r0	; 59
    2ca6:	0f 90       	pop	r0
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	0f 90       	pop	r0
    2cac:	1f 90       	pop	r1
    2cae:	18 95       	reti

00002cb0 <__vector_26>:
    2cb0:	1f 92       	push	r1
    2cb2:	0f 92       	push	r0
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	0f 92       	push	r0
    2cb8:	11 24       	eor	r1, r1
    2cba:	0b b6       	in	r0, 0x3b	; 59
    2cbc:	0f 92       	push	r0
    2cbe:	2f 93       	push	r18
    2cc0:	8f 93       	push	r24
    2cc2:	9f 93       	push	r25
    2cc4:	af 93       	push	r26
    2cc6:	bf 93       	push	r27
    2cc8:	ef 93       	push	r30
    2cca:	ff 93       	push	r31
    2ccc:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <_ser_handle>
    2cd0:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <_ser_handle+0x1>
    2cd4:	30 97       	sbiw	r30, 0x00	; 0
    2cd6:	b9 f0       	breq	.+46     	; 0x2d06 <__vector_26+0x56>
    2cd8:	02 80       	ldd	r0, Z+2	; 0x02
    2cda:	f3 81       	ldd	r31, Z+3	; 0x03
    2cdc:	e0 2d       	mov	r30, r0
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	98 17       	cp	r25, r24
    2ce4:	b1 f0       	breq	.+44     	; 0x2d12 <__vector_26+0x62>
    2ce6:	92 81       	ldd	r25, Z+2	; 0x02
    2ce8:	85 81       	ldd	r24, Z+5	; 0x05
    2cea:	28 2f       	mov	r18, r24
    2cec:	26 95       	lsr	r18
    2cee:	29 23       	and	r18, r25
    2cf0:	a0 81       	ld	r26, Z
    2cf2:	b1 81       	ldd	r27, Z+1	; 0x01
    2cf4:	a2 0f       	add	r26, r18
    2cf6:	b1 1d       	adc	r27, r1
    2cf8:	2c 91       	ld	r18, X
    2cfa:	9f 5f       	subi	r25, 0xFF	; 255
    2cfc:	89 23       	and	r24, r25
    2cfe:	82 83       	std	Z+2, r24	; 0x02
    2d00:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2d04:	0b c0       	rjmp	.+22     	; 0x2d1c <__vector_26+0x6c>
    2d06:	e1 ec       	ldi	r30, 0xC1	; 193
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8f 7d       	andi	r24, 0xDF	; 223
    2d0e:	80 83       	st	Z, r24
    2d10:	05 c0       	rjmp	.+10     	; 0x2d1c <__vector_26+0x6c>
    2d12:	e1 ec       	ldi	r30, 0xC1	; 193
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8f 7d       	andi	r24, 0xDF	; 223
    2d1a:	80 83       	st	Z, r24
    2d1c:	ff 91       	pop	r31
    2d1e:	ef 91       	pop	r30
    2d20:	bf 91       	pop	r27
    2d22:	af 91       	pop	r26
    2d24:	9f 91       	pop	r25
    2d26:	8f 91       	pop	r24
    2d28:	2f 91       	pop	r18
    2d2a:	0f 90       	pop	r0
    2d2c:	0b be       	out	0x3b, r0	; 59
    2d2e:	0f 90       	pop	r0
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	0f 90       	pop	r0
    2d34:	1f 90       	pop	r1
    2d36:	18 95       	reti

00002d38 <__vector_36>:
    2d38:	1f 92       	push	r1
    2d3a:	0f 92       	push	r0
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	0f 92       	push	r0
    2d40:	11 24       	eor	r1, r1
    2d42:	0b b6       	in	r0, 0x3b	; 59
    2d44:	0f 92       	push	r0
    2d46:	2f 93       	push	r18
    2d48:	3f 93       	push	r19
    2d4a:	4f 93       	push	r20
    2d4c:	5f 93       	push	r21
    2d4e:	6f 93       	push	r22
    2d50:	7f 93       	push	r23
    2d52:	8f 93       	push	r24
    2d54:	9f 93       	push	r25
    2d56:	af 93       	push	r26
    2d58:	bf 93       	push	r27
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	ef 93       	push	r30
    2d60:	ff 93       	push	r31
    2d62:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <_ser_handle+0x2>
    2d66:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <_ser_handle+0x3>
    2d6a:	10 97       	sbiw	r26, 0x00	; 0
    2d6c:	11 f1       	breq	.+68     	; 0x2db2 <__vector_36+0x7a>
    2d6e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2d72:	14 96       	adiw	r26, 0x04	; 4
    2d74:	ed 91       	ld	r30, X+
    2d76:	fc 91       	ld	r31, X
    2d78:	15 97       	sbiw	r26, 0x05	; 5
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	25 81       	ldd	r18, Z+5	; 0x05
    2d80:	98 1b       	sub	r25, r24
    2d82:	92 23       	and	r25, r18
    2d84:	84 81       	ldd	r24, Z+4	; 0x04
    2d86:	98 17       	cp	r25, r24
    2d88:	61 f0       	breq	.+24     	; 0x2da2 <__vector_36+0x6a>
    2d8a:	83 81       	ldd	r24, Z+3	; 0x03
    2d8c:	26 95       	lsr	r18
    2d8e:	28 23       	and	r18, r24
    2d90:	c0 81       	ld	r28, Z
    2d92:	d1 81       	ldd	r29, Z+1	; 0x01
    2d94:	c2 0f       	add	r28, r18
    2d96:	d1 1d       	adc	r29, r1
    2d98:	68 83       	st	Y, r22
    2d9a:	8f 5f       	subi	r24, 0xFF	; 255
    2d9c:	95 81       	ldd	r25, Z+5	; 0x05
    2d9e:	89 23       	and	r24, r25
    2da0:	83 83       	std	Z+3, r24	; 0x03
    2da2:	16 96       	adiw	r26, 0x06	; 6
    2da4:	ed 91       	ld	r30, X+
    2da6:	fc 91       	ld	r31, X
    2da8:	17 97       	sbiw	r26, 0x07	; 7
    2daa:	30 97       	sbiw	r30, 0x00	; 0
    2dac:	11 f0       	breq	.+4      	; 0x2db2 <__vector_36+0x7a>
    2dae:	cd 01       	movw	r24, r26
    2db0:	19 95       	eicall
    2db2:	ff 91       	pop	r31
    2db4:	ef 91       	pop	r30
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	bf 91       	pop	r27
    2dbc:	af 91       	pop	r26
    2dbe:	9f 91       	pop	r25
    2dc0:	8f 91       	pop	r24
    2dc2:	7f 91       	pop	r23
    2dc4:	6f 91       	pop	r22
    2dc6:	5f 91       	pop	r21
    2dc8:	4f 91       	pop	r20
    2dca:	3f 91       	pop	r19
    2dcc:	2f 91       	pop	r18
    2dce:	0f 90       	pop	r0
    2dd0:	0b be       	out	0x3b, r0	; 59
    2dd2:	0f 90       	pop	r0
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	0f 90       	pop	r0
    2dd8:	1f 90       	pop	r1
    2dda:	18 95       	reti

00002ddc <__vector_37>:
    2ddc:	1f 92       	push	r1
    2dde:	0f 92       	push	r0
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	0f 92       	push	r0
    2de4:	11 24       	eor	r1, r1
    2de6:	0b b6       	in	r0, 0x3b	; 59
    2de8:	0f 92       	push	r0
    2dea:	2f 93       	push	r18
    2dec:	8f 93       	push	r24
    2dee:	9f 93       	push	r25
    2df0:	af 93       	push	r26
    2df2:	bf 93       	push	r27
    2df4:	ef 93       	push	r30
    2df6:	ff 93       	push	r31
    2df8:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <_ser_handle+0x2>
    2dfc:	f0 91 c9 03 	lds	r31, 0x03C9	; 0x8003c9 <_ser_handle+0x3>
    2e00:	30 97       	sbiw	r30, 0x00	; 0
    2e02:	b9 f0       	breq	.+46     	; 0x2e32 <__vector_37+0x56>
    2e04:	02 80       	ldd	r0, Z+2	; 0x02
    2e06:	f3 81       	ldd	r31, Z+3	; 0x03
    2e08:	e0 2d       	mov	r30, r0
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	82 81       	ldd	r24, Z+2	; 0x02
    2e0e:	98 17       	cp	r25, r24
    2e10:	b1 f0       	breq	.+44     	; 0x2e3e <__vector_37+0x62>
    2e12:	92 81       	ldd	r25, Z+2	; 0x02
    2e14:	85 81       	ldd	r24, Z+5	; 0x05
    2e16:	28 2f       	mov	r18, r24
    2e18:	26 95       	lsr	r18
    2e1a:	29 23       	and	r18, r25
    2e1c:	a0 81       	ld	r26, Z
    2e1e:	b1 81       	ldd	r27, Z+1	; 0x01
    2e20:	a2 0f       	add	r26, r18
    2e22:	b1 1d       	adc	r27, r1
    2e24:	2c 91       	ld	r18, X
    2e26:	9f 5f       	subi	r25, 0xFF	; 255
    2e28:	89 23       	and	r24, r25
    2e2a:	82 83       	std	Z+2, r24	; 0x02
    2e2c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2e30:	0b c0       	rjmp	.+22     	; 0x2e48 <__vector_37+0x6c>
    2e32:	e9 ec       	ldi	r30, 0xC9	; 201
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8f 7d       	andi	r24, 0xDF	; 223
    2e3a:	80 83       	st	Z, r24
    2e3c:	05 c0       	rjmp	.+10     	; 0x2e48 <__vector_37+0x6c>
    2e3e:	e9 ec       	ldi	r30, 0xC9	; 201
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	8f 7d       	andi	r24, 0xDF	; 223
    2e46:	80 83       	st	Z, r24
    2e48:	ff 91       	pop	r31
    2e4a:	ef 91       	pop	r30
    2e4c:	bf 91       	pop	r27
    2e4e:	af 91       	pop	r26
    2e50:	9f 91       	pop	r25
    2e52:	8f 91       	pop	r24
    2e54:	2f 91       	pop	r18
    2e56:	0f 90       	pop	r0
    2e58:	0b be       	out	0x3b, r0	; 59
    2e5a:	0f 90       	pop	r0
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	0f 90       	pop	r0
    2e60:	1f 90       	pop	r1
    2e62:	18 95       	reti

00002e64 <__vector_51>:
    2e64:	1f 92       	push	r1
    2e66:	0f 92       	push	r0
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	0f 92       	push	r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	0b b6       	in	r0, 0x3b	; 59
    2e70:	0f 92       	push	r0
    2e72:	2f 93       	push	r18
    2e74:	3f 93       	push	r19
    2e76:	4f 93       	push	r20
    2e78:	5f 93       	push	r21
    2e7a:	6f 93       	push	r22
    2e7c:	7f 93       	push	r23
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	af 93       	push	r26
    2e84:	bf 93       	push	r27
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	ef 93       	push	r30
    2e8c:	ff 93       	push	r31
    2e8e:	a0 91 ca 03 	lds	r26, 0x03CA	; 0x8003ca <_ser_handle+0x4>
    2e92:	b0 91 cb 03 	lds	r27, 0x03CB	; 0x8003cb <_ser_handle+0x5>
    2e96:	10 97       	sbiw	r26, 0x00	; 0
    2e98:	11 f1       	breq	.+68     	; 0x2ede <__vector_51+0x7a>
    2e9a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2e9e:	14 96       	adiw	r26, 0x04	; 4
    2ea0:	ed 91       	ld	r30, X+
    2ea2:	fc 91       	ld	r31, X
    2ea4:	15 97       	sbiw	r26, 0x05	; 5
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	25 81       	ldd	r18, Z+5	; 0x05
    2eac:	98 1b       	sub	r25, r24
    2eae:	92 23       	and	r25, r18
    2eb0:	84 81       	ldd	r24, Z+4	; 0x04
    2eb2:	98 17       	cp	r25, r24
    2eb4:	61 f0       	breq	.+24     	; 0x2ece <__vector_51+0x6a>
    2eb6:	83 81       	ldd	r24, Z+3	; 0x03
    2eb8:	26 95       	lsr	r18
    2eba:	28 23       	and	r18, r24
    2ebc:	c0 81       	ld	r28, Z
    2ebe:	d1 81       	ldd	r29, Z+1	; 0x01
    2ec0:	c2 0f       	add	r28, r18
    2ec2:	d1 1d       	adc	r29, r1
    2ec4:	68 83       	st	Y, r22
    2ec6:	8f 5f       	subi	r24, 0xFF	; 255
    2ec8:	95 81       	ldd	r25, Z+5	; 0x05
    2eca:	89 23       	and	r24, r25
    2ecc:	83 83       	std	Z+3, r24	; 0x03
    2ece:	16 96       	adiw	r26, 0x06	; 6
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	17 97       	sbiw	r26, 0x07	; 7
    2ed6:	30 97       	sbiw	r30, 0x00	; 0
    2ed8:	11 f0       	breq	.+4      	; 0x2ede <__vector_51+0x7a>
    2eda:	cd 01       	movw	r24, r26
    2edc:	19 95       	eicall
    2ede:	ff 91       	pop	r31
    2ee0:	ef 91       	pop	r30
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	bf 91       	pop	r27
    2ee8:	af 91       	pop	r26
    2eea:	9f 91       	pop	r25
    2eec:	8f 91       	pop	r24
    2eee:	7f 91       	pop	r23
    2ef0:	6f 91       	pop	r22
    2ef2:	5f 91       	pop	r21
    2ef4:	4f 91       	pop	r20
    2ef6:	3f 91       	pop	r19
    2ef8:	2f 91       	pop	r18
    2efa:	0f 90       	pop	r0
    2efc:	0b be       	out	0x3b, r0	; 59
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	0f 90       	pop	r0
    2f04:	1f 90       	pop	r1
    2f06:	18 95       	reti

00002f08 <__vector_52>:
    2f08:	1f 92       	push	r1
    2f0a:	0f 92       	push	r0
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	0f 92       	push	r0
    2f10:	11 24       	eor	r1, r1
    2f12:	0b b6       	in	r0, 0x3b	; 59
    2f14:	0f 92       	push	r0
    2f16:	2f 93       	push	r18
    2f18:	8f 93       	push	r24
    2f1a:	9f 93       	push	r25
    2f1c:	af 93       	push	r26
    2f1e:	bf 93       	push	r27
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
    2f24:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <_ser_handle+0x4>
    2f28:	f0 91 cb 03 	lds	r31, 0x03CB	; 0x8003cb <_ser_handle+0x5>
    2f2c:	30 97       	sbiw	r30, 0x00	; 0
    2f2e:	b9 f0       	breq	.+46     	; 0x2f5e <__vector_52+0x56>
    2f30:	02 80       	ldd	r0, Z+2	; 0x02
    2f32:	f3 81       	ldd	r31, Z+3	; 0x03
    2f34:	e0 2d       	mov	r30, r0
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	98 17       	cp	r25, r24
    2f3c:	b1 f0       	breq	.+44     	; 0x2f6a <__vector_52+0x62>
    2f3e:	92 81       	ldd	r25, Z+2	; 0x02
    2f40:	85 81       	ldd	r24, Z+5	; 0x05
    2f42:	28 2f       	mov	r18, r24
    2f44:	26 95       	lsr	r18
    2f46:	29 23       	and	r18, r25
    2f48:	a0 81       	ld	r26, Z
    2f4a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f4c:	a2 0f       	add	r26, r18
    2f4e:	b1 1d       	adc	r27, r1
    2f50:	2c 91       	ld	r18, X
    2f52:	9f 5f       	subi	r25, 0xFF	; 255
    2f54:	89 23       	and	r24, r25
    2f56:	82 83       	std	Z+2, r24	; 0x02
    2f58:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2f5c:	0b c0       	rjmp	.+22     	; 0x2f74 <__vector_52+0x6c>
    2f5e:	e1 ed       	ldi	r30, 0xD1	; 209
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	8f 7d       	andi	r24, 0xDF	; 223
    2f66:	80 83       	st	Z, r24
    2f68:	05 c0       	rjmp	.+10     	; 0x2f74 <__vector_52+0x6c>
    2f6a:	e1 ed       	ldi	r30, 0xD1	; 209
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	8f 7d       	andi	r24, 0xDF	; 223
    2f72:	80 83       	st	Z, r24
    2f74:	ff 91       	pop	r31
    2f76:	ef 91       	pop	r30
    2f78:	bf 91       	pop	r27
    2f7a:	af 91       	pop	r26
    2f7c:	9f 91       	pop	r25
    2f7e:	8f 91       	pop	r24
    2f80:	2f 91       	pop	r18
    2f82:	0f 90       	pop	r0
    2f84:	0b be       	out	0x3b, r0	; 59
    2f86:	0f 90       	pop	r0
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	0f 90       	pop	r0
    2f8c:	1f 90       	pop	r1
    2f8e:	18 95       	reti

00002f90 <__vector_54>:
    2f90:	1f 92       	push	r1
    2f92:	0f 92       	push	r0
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	0f 92       	push	r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	0b b6       	in	r0, 0x3b	; 59
    2f9c:	0f 92       	push	r0
    2f9e:	2f 93       	push	r18
    2fa0:	3f 93       	push	r19
    2fa2:	4f 93       	push	r20
    2fa4:	5f 93       	push	r21
    2fa6:	6f 93       	push	r22
    2fa8:	7f 93       	push	r23
    2faa:	8f 93       	push	r24
    2fac:	9f 93       	push	r25
    2fae:	af 93       	push	r26
    2fb0:	bf 93       	push	r27
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	ef 93       	push	r30
    2fb8:	ff 93       	push	r31
    2fba:	a0 91 cc 03 	lds	r26, 0x03CC	; 0x8003cc <_ser_handle+0x6>
    2fbe:	b0 91 cd 03 	lds	r27, 0x03CD	; 0x8003cd <_ser_handle+0x7>
    2fc2:	10 97       	sbiw	r26, 0x00	; 0
    2fc4:	11 f1       	breq	.+68     	; 0x300a <__vector_54+0x7a>
    2fc6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2fca:	14 96       	adiw	r26, 0x04	; 4
    2fcc:	ed 91       	ld	r30, X+
    2fce:	fc 91       	ld	r31, X
    2fd0:	15 97       	sbiw	r26, 0x05	; 5
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	82 81       	ldd	r24, Z+2	; 0x02
    2fd6:	25 81       	ldd	r18, Z+5	; 0x05
    2fd8:	98 1b       	sub	r25, r24
    2fda:	92 23       	and	r25, r18
    2fdc:	84 81       	ldd	r24, Z+4	; 0x04
    2fde:	98 17       	cp	r25, r24
    2fe0:	61 f0       	breq	.+24     	; 0x2ffa <__vector_54+0x6a>
    2fe2:	83 81       	ldd	r24, Z+3	; 0x03
    2fe4:	26 95       	lsr	r18
    2fe6:	28 23       	and	r18, r24
    2fe8:	c0 81       	ld	r28, Z
    2fea:	d1 81       	ldd	r29, Z+1	; 0x01
    2fec:	c2 0f       	add	r28, r18
    2fee:	d1 1d       	adc	r29, r1
    2ff0:	68 83       	st	Y, r22
    2ff2:	8f 5f       	subi	r24, 0xFF	; 255
    2ff4:	95 81       	ldd	r25, Z+5	; 0x05
    2ff6:	89 23       	and	r24, r25
    2ff8:	83 83       	std	Z+3, r24	; 0x03
    2ffa:	16 96       	adiw	r26, 0x06	; 6
    2ffc:	ed 91       	ld	r30, X+
    2ffe:	fc 91       	ld	r31, X
    3000:	17 97       	sbiw	r26, 0x07	; 7
    3002:	30 97       	sbiw	r30, 0x00	; 0
    3004:	11 f0       	breq	.+4      	; 0x300a <__vector_54+0x7a>
    3006:	cd 01       	movw	r24, r26
    3008:	19 95       	eicall
    300a:	ff 91       	pop	r31
    300c:	ef 91       	pop	r30
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	bf 91       	pop	r27
    3014:	af 91       	pop	r26
    3016:	9f 91       	pop	r25
    3018:	8f 91       	pop	r24
    301a:	7f 91       	pop	r23
    301c:	6f 91       	pop	r22
    301e:	5f 91       	pop	r21
    3020:	4f 91       	pop	r20
    3022:	3f 91       	pop	r19
    3024:	2f 91       	pop	r18
    3026:	0f 90       	pop	r0
    3028:	0b be       	out	0x3b, r0	; 59
    302a:	0f 90       	pop	r0
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	0f 90       	pop	r0
    3030:	1f 90       	pop	r1
    3032:	18 95       	reti

00003034 <__vector_55>:
    3034:	1f 92       	push	r1
    3036:	0f 92       	push	r0
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	0f 92       	push	r0
    303c:	11 24       	eor	r1, r1
    303e:	0b b6       	in	r0, 0x3b	; 59
    3040:	0f 92       	push	r0
    3042:	2f 93       	push	r18
    3044:	8f 93       	push	r24
    3046:	9f 93       	push	r25
    3048:	af 93       	push	r26
    304a:	bf 93       	push	r27
    304c:	ef 93       	push	r30
    304e:	ff 93       	push	r31
    3050:	e0 91 cc 03 	lds	r30, 0x03CC	; 0x8003cc <_ser_handle+0x6>
    3054:	f0 91 cd 03 	lds	r31, 0x03CD	; 0x8003cd <_ser_handle+0x7>
    3058:	30 97       	sbiw	r30, 0x00	; 0
    305a:	b9 f0       	breq	.+46     	; 0x308a <__vector_55+0x56>
    305c:	02 80       	ldd	r0, Z+2	; 0x02
    305e:	f3 81       	ldd	r31, Z+3	; 0x03
    3060:	e0 2d       	mov	r30, r0
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	82 81       	ldd	r24, Z+2	; 0x02
    3066:	98 17       	cp	r25, r24
    3068:	b1 f0       	breq	.+44     	; 0x3096 <__vector_55+0x62>
    306a:	92 81       	ldd	r25, Z+2	; 0x02
    306c:	85 81       	ldd	r24, Z+5	; 0x05
    306e:	28 2f       	mov	r18, r24
    3070:	26 95       	lsr	r18
    3072:	29 23       	and	r18, r25
    3074:	a0 81       	ld	r26, Z
    3076:	b1 81       	ldd	r27, Z+1	; 0x01
    3078:	a2 0f       	add	r26, r18
    307a:	b1 1d       	adc	r27, r1
    307c:	2c 91       	ld	r18, X
    307e:	9f 5f       	subi	r25, 0xFF	; 255
    3080:	89 23       	and	r24, r25
    3082:	82 83       	std	Z+2, r24	; 0x02
    3084:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3088:	0b c0       	rjmp	.+22     	; 0x30a0 <__vector_55+0x6c>
    308a:	e1 e3       	ldi	r30, 0x31	; 49
    308c:	f1 e0       	ldi	r31, 0x01	; 1
    308e:	80 81       	ld	r24, Z
    3090:	8f 7d       	andi	r24, 0xDF	; 223
    3092:	80 83       	st	Z, r24
    3094:	05 c0       	rjmp	.+10     	; 0x30a0 <__vector_55+0x6c>
    3096:	e1 e3       	ldi	r30, 0x31	; 49
    3098:	f1 e0       	ldi	r31, 0x01	; 1
    309a:	80 81       	ld	r24, Z
    309c:	8f 7d       	andi	r24, 0xDF	; 223
    309e:	80 83       	st	Z, r24
    30a0:	ff 91       	pop	r31
    30a2:	ef 91       	pop	r30
    30a4:	bf 91       	pop	r27
    30a6:	af 91       	pop	r26
    30a8:	9f 91       	pop	r25
    30aa:	8f 91       	pop	r24
    30ac:	2f 91       	pop	r18
    30ae:	0f 90       	pop	r0
    30b0:	0b be       	out	0x3b, r0	; 59
    30b2:	0f 90       	pop	r0
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	0f 90       	pop	r0
    30b8:	1f 90       	pop	r1
    30ba:	18 95       	reti

000030bc <fifo_init>:
    30bc:	fc 01       	movw	r30, r24
    30be:	41 11       	cpse	r20, r1
    30c0:	01 c0       	rjmp	.+2      	; 0x30c4 <fifo_init+0x8>
    30c2:	92 d7       	rcall	.+3876   	; 0x3fe8 <abort>
    30c4:	84 2f       	mov	r24, r20
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	9c 01       	movw	r18, r24
    30ca:	21 50       	subi	r18, 0x01	; 1
    30cc:	31 09       	sbc	r19, r1
    30ce:	82 23       	and	r24, r18
    30d0:	93 23       	and	r25, r19
    30d2:	89 2b       	or	r24, r25
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <fifo_init+0x1c>
    30d6:	88 d7       	rcall	.+3856   	; 0x3fe8 <abort>
    30d8:	41 38       	cpi	r20, 0x81	; 129
    30da:	08 f0       	brcs	.+2      	; 0x30de <fifo_init+0x22>
    30dc:	85 d7       	rcall	.+3850   	; 0x3fe8 <abort>
    30de:	12 82       	std	Z+2, r1	; 0x02
    30e0:	13 82       	std	Z+3, r1	; 0x03
    30e2:	44 83       	std	Z+4, r20	; 0x04
    30e4:	44 0f       	add	r20, r20
    30e6:	41 50       	subi	r20, 0x01	; 1
    30e8:	45 83       	std	Z+5, r20	; 0x05
    30ea:	71 83       	std	Z+1, r23	; 0x01
    30ec:	60 83       	st	Z, r22
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	08 95       	ret

000030f4 <hal_create>:
    30f4:	e2 e4       	ldi	r30, 0x42	; 66
    30f6:	f4 e0       	ldi	r31, 0x04	; 4
    30f8:	26 e9       	ldi	r18, 0x96	; 150
    30fa:	3a e1       	ldi	r19, 0x1A	; 26
    30fc:	31 83       	std	Z+1, r19	; 0x01
    30fe:	20 83       	st	Z, r18
    3100:	29 e9       	ldi	r18, 0x99	; 153
    3102:	3a e1       	ldi	r19, 0x1A	; 26
    3104:	33 83       	std	Z+3, r19	; 0x03
    3106:	22 83       	std	Z+2, r18	; 0x02
    3108:	24 ea       	ldi	r18, 0xA4	; 164
    310a:	3a e1       	ldi	r19, 0x1A	; 26
    310c:	35 83       	std	Z+5, r19	; 0x05
    310e:	24 83       	std	Z+4, r18	; 0x04
    3110:	28 ea       	ldi	r18, 0xA8	; 168
    3112:	3a e1       	ldi	r19, 0x1A	; 26
    3114:	37 83       	std	Z+7, r19	; 0x07
    3116:	26 83       	std	Z+6, r18	; 0x06
    3118:	2e ea       	ldi	r18, 0xAE	; 174
    311a:	3a e1       	ldi	r19, 0x1A	; 26
    311c:	31 87       	std	Z+9, r19	; 0x09
    311e:	20 87       	std	Z+8, r18	; 0x08
    3120:	2a eb       	ldi	r18, 0xBA	; 186
    3122:	3a e1       	ldi	r19, 0x1A	; 26
    3124:	33 87       	std	Z+11, r19	; 0x0b
    3126:	22 87       	std	Z+10, r18	; 0x0a
    3128:	2f eb       	ldi	r18, 0xBF	; 191
    312a:	3a e1       	ldi	r19, 0x1A	; 26
    312c:	35 87       	std	Z+13, r19	; 0x0d
    312e:	24 87       	std	Z+12, r18	; 0x0c
    3130:	2b ec       	ldi	r18, 0xCB	; 203
    3132:	3a e1       	ldi	r19, 0x1A	; 26
    3134:	37 87       	std	Z+15, r19	; 0x0f
    3136:	26 87       	std	Z+14, r18	; 0x0e
    3138:	2b ea       	ldi	r18, 0xAB	; 171
    313a:	3a e1       	ldi	r19, 0x1A	; 26
    313c:	31 8b       	std	Z+17, r19	; 0x11
    313e:	20 8b       	std	Z+16, r18	; 0x10
    3140:	20 ed       	ldi	r18, 0xD0	; 208
    3142:	3a e1       	ldi	r19, 0x1A	; 26
    3144:	33 8b       	std	Z+19, r19	; 0x13
    3146:	22 8b       	std	Z+18, r18	; 0x12
    3148:	2d ed       	ldi	r18, 0xDD	; 221
    314a:	3a e1       	ldi	r19, 0x1A	; 26
    314c:	35 8b       	std	Z+21, r19	; 0x15
    314e:	24 8b       	std	Z+20, r18	; 0x14
    3150:	68 2f       	mov	r22, r24
    3152:	cf 01       	movw	r24, r30
    3154:	e4 c0       	rjmp	.+456    	; 0x331e <led_create>
    3156:	08 95       	ret

00003158 <_hihTwiCallback>:
    3158:	65 30       	cpi	r22, 0x05	; 5
    315a:	f1 f4       	brne	.+60     	; 0x3198 <_hihTwiCallback+0x40>
    315c:	fa 01       	movw	r30, r20
    315e:	80 81       	ld	r24, Z
    3160:	8f 73       	andi	r24, 0x3F	; 63
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	98 2f       	mov	r25, r24
    3166:	88 27       	eor	r24, r24
    3168:	21 81       	ldd	r18, Z+1	; 0x01
    316a:	82 2b       	or	r24, r18
    316c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    3170:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	f0 e4       	ldi	r31, 0x40	; 64
    3178:	8f 9f       	mul	r24, r31
    317a:	c0 01       	movw	r24, r0
    317c:	11 24       	eor	r1, r1
    317e:	fa 01       	movw	r30, r20
    3180:	23 81       	ldd	r18, Z+3	; 0x03
    3182:	26 95       	lsr	r18
    3184:	26 95       	lsr	r18
    3186:	82 2b       	or	r24, r18
    3188:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    318c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <_measuringIsReady>
    3196:	08 95       	ret
    3198:	64 30       	cpi	r22, 0x04	; 4
    319a:	51 f0       	breq	.+20     	; 0x31b0 <_hihTwiCallback+0x58>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e4       	ldi	r25, 0x40	; 64
    31a0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    31a4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    31a8:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    31ac:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    31b0:	08 95       	ret

000031b2 <hih8120Create>:
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	0c ea       	ldi	r16, 0xAC	; 172
    31b8:	18 e1       	ldi	r17, 0x18	; 24
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	34 e2       	ldi	r19, 0x24	; 36
    31be:	44 ef       	ldi	r20, 0xF4	; 244
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	87 e2       	ldi	r24, 0x27	; 39
    31c6:	b7 d2       	rcall	.+1390   	; 0x3736 <twiCreate>
    31c8:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <_hih8120Handler+0x1>
    31cc:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <_hih8120Handler>
    31d0:	21 e0       	ldi	r18, 0x01	; 1
    31d2:	89 2b       	or	r24, r25
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <hih8120Create+0x26>
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	82 2f       	mov	r24, r18
    31da:	1f 91       	pop	r17
    31dc:	0f 91       	pop	r16
    31de:	08 95       	ret

000031e0 <_turn_off>:
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	fc 01       	movw	r30, r24
    31e8:	ee 0f       	add	r30, r30
    31ea:	ff 1f       	adc	r31, r31
    31ec:	e8 0f       	add	r30, r24
    31ee:	f9 1f       	adc	r31, r25
    31f0:	ee 0f       	add	r30, r30
    31f2:	ff 1f       	adc	r31, r31
    31f4:	ef 52       	subi	r30, 0x2F	; 47
    31f6:	fc 4f       	sbci	r31, 0xFC	; 252
    31f8:	23 81       	ldd	r18, Z+3	; 0x03
    31fa:	21 11       	cpse	r18, r1
    31fc:	0a c0       	rjmp	.+20     	; 0x3212 <_turn_off+0x32>
    31fe:	ef 01       	movw	r28, r30
    3200:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <register_access+0x8>
    3204:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <register_access+0x9>
    3208:	6a 81       	ldd	r22, Y+2	; 0x02
    320a:	88 81       	ld	r24, Y
    320c:	99 81       	ldd	r25, Y+1	; 0x01
    320e:	19 95       	eicall
    3210:	12 c0       	rjmp	.+36     	; 0x3236 <_turn_off+0x56>
    3212:	dc 01       	movw	r26, r24
    3214:	aa 0f       	add	r26, r26
    3216:	bb 1f       	adc	r27, r27
    3218:	ed 01       	movw	r28, r26
    321a:	c8 0f       	add	r28, r24
    321c:	d9 1f       	adc	r29, r25
    321e:	cc 0f       	add	r28, r28
    3220:	dd 1f       	adc	r29, r29
    3222:	cf 52       	subi	r28, 0x2F	; 47
    3224:	dc 4f       	sbci	r29, 0xFC	; 252
    3226:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <register_access+0x12>
    322a:	f0 91 55 04 	lds	r31, 0x0455	; 0x800455 <register_access+0x13>
    322e:	6a 81       	ldd	r22, Y+2	; 0x02
    3230:	88 81       	ld	r24, Y
    3232:	99 81       	ldd	r25, Y+1	; 0x01
    3234:	19 95       	eicall
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	08 95       	ret

0000323c <_turn_on>:
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	fc 01       	movw	r30, r24
    3244:	ee 0f       	add	r30, r30
    3246:	ff 1f       	adc	r31, r31
    3248:	e8 0f       	add	r30, r24
    324a:	f9 1f       	adc	r31, r25
    324c:	ee 0f       	add	r30, r30
    324e:	ff 1f       	adc	r31, r31
    3250:	ef 52       	subi	r30, 0x2F	; 47
    3252:	fc 4f       	sbci	r31, 0xFC	; 252
    3254:	23 81       	ldd	r18, Z+3	; 0x03
    3256:	21 11       	cpse	r18, r1
    3258:	0a c0       	rjmp	.+20     	; 0x326e <_turn_on+0x32>
    325a:	ef 01       	movw	r28, r30
    325c:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <register_access+0x12>
    3260:	f0 91 55 04 	lds	r31, 0x0455	; 0x800455 <register_access+0x13>
    3264:	6a 81       	ldd	r22, Y+2	; 0x02
    3266:	88 81       	ld	r24, Y
    3268:	99 81       	ldd	r25, Y+1	; 0x01
    326a:	19 95       	eicall
    326c:	12 c0       	rjmp	.+36     	; 0x3292 <_turn_on+0x56>
    326e:	dc 01       	movw	r26, r24
    3270:	aa 0f       	add	r26, r26
    3272:	bb 1f       	adc	r27, r27
    3274:	ed 01       	movw	r28, r26
    3276:	c8 0f       	add	r28, r24
    3278:	d9 1f       	adc	r29, r25
    327a:	cc 0f       	add	r28, r28
    327c:	dd 1f       	adc	r29, r29
    327e:	cf 52       	subi	r28, 0x2F	; 47
    3280:	dc 4f       	sbci	r29, 0xFC	; 252
    3282:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <register_access+0x8>
    3286:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <register_access+0x9>
    328a:	6a 81       	ldd	r22, Y+2	; 0x02
    328c:	88 81       	ld	r24, Y
    328e:	99 81       	ldd	r25, Y+1	; 0x01
    3290:	19 95       	eicall
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	08 95       	ret

00003298 <_hal_led_task>:
    3298:	82 e2       	ldi	r24, 0x22	; 34
    329a:	93 e0       	ldi	r25, 0x03	; 3
    329c:	cc d6       	rcall	.+3480   	; 0x4036 <puts>
    329e:	0f 2e       	mov	r0, r31
    32a0:	f2 e4       	ldi	r31, 0x42	; 66
    32a2:	cf 2e       	mov	r12, r31
    32a4:	f4 e0       	ldi	r31, 0x04	; 4
    32a6:	df 2e       	mov	r13, r31
    32a8:	f0 2d       	mov	r31, r0
    32aa:	04 e0       	ldi	r16, 0x04	; 4
    32ac:	c1 ed       	ldi	r28, 0xD1	; 209
    32ae:	d3 e0       	ldi	r29, 0x03	; 3
    32b0:	10 e0       	ldi	r17, 0x00	; 0
    32b2:	8c 81       	ldd	r24, Y+4	; 0x04
    32b4:	81 30       	cpi	r24, 0x01	; 1
    32b6:	69 f0       	breq	.+26     	; 0x32d2 <_hal_led_task+0x3a>
    32b8:	e8 f0       	brcs	.+58     	; 0x32f4 <_hal_led_task+0x5c>
    32ba:	82 30       	cpi	r24, 0x02	; 2
    32bc:	39 f5       	brne	.+78     	; 0x330c <_hal_led_task+0x74>
    32be:	d6 01       	movw	r26, r12
    32c0:	1c 96       	adiw	r26, 0x0c	; 12
    32c2:	ed 91       	ld	r30, X+
    32c4:	fc 91       	ld	r31, X
    32c6:	1d 97       	sbiw	r26, 0x0d	; 13
    32c8:	6a 81       	ldd	r22, Y+2	; 0x02
    32ca:	88 81       	ld	r24, Y
    32cc:	99 81       	ldd	r25, Y+1	; 0x01
    32ce:	19 95       	eicall
    32d0:	1d c0       	rjmp	.+58     	; 0x330c <_hal_led_task+0x74>
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	8f 5f       	subi	r24, 0xFF	; 255
    32d6:	8a 30       	cpi	r24, 0x0A	; 10
    32d8:	10 f4       	brcc	.+4      	; 0x32de <_hal_led_task+0x46>
    32da:	8d 83       	std	Y+5, r24	; 0x05
    32dc:	17 c0       	rjmp	.+46     	; 0x330c <_hal_led_task+0x74>
    32de:	1d 82       	std	Y+5, r1	; 0x05
    32e0:	d6 01       	movw	r26, r12
    32e2:	1c 96       	adiw	r26, 0x0c	; 12
    32e4:	ed 91       	ld	r30, X+
    32e6:	fc 91       	ld	r31, X
    32e8:	1d 97       	sbiw	r26, 0x0d	; 13
    32ea:	6a 81       	ldd	r22, Y+2	; 0x02
    32ec:	88 81       	ld	r24, Y
    32ee:	99 81       	ldd	r25, Y+1	; 0x01
    32f0:	19 95       	eicall
    32f2:	0c c0       	rjmp	.+24     	; 0x330c <_hal_led_task+0x74>
    32f4:	8d 81       	ldd	r24, Y+5	; 0x05
    32f6:	88 23       	and	r24, r24
    32f8:	31 f0       	breq	.+12     	; 0x3306 <_hal_led_task+0x6e>
    32fa:	81 2f       	mov	r24, r17
    32fc:	9f df       	rcall	.-194    	; 0x323c <_turn_on>
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	81 50       	subi	r24, 0x01	; 1
    3302:	8d 83       	std	Y+5, r24	; 0x05
    3304:	03 c0       	rjmp	.+6      	; 0x330c <_hal_led_task+0x74>
    3306:	0c 83       	std	Y+4, r16	; 0x04
    3308:	81 2f       	mov	r24, r17
    330a:	6a df       	rcall	.-300    	; 0x31e0 <_turn_off>
    330c:	1f 5f       	subi	r17, 0xFF	; 255
    330e:	26 96       	adiw	r28, 0x06	; 6
    3310:	14 30       	cpi	r17, 0x04	; 4
    3312:	79 f6       	brne	.-98     	; 0x32b2 <_hal_led_task+0x1a>
    3314:	85 e0       	ldi	r24, 0x05	; 5
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <vTaskDelay>
    331c:	c7 cf       	rjmp	.-114    	; 0x32ac <_hal_led_task+0x14>

0000331e <led_create>:
    331e:	cf 92       	push	r12
    3320:	df 92       	push	r13
    3322:	ef 92       	push	r14
    3324:	ff 92       	push	r15
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	06 2f       	mov	r16, r22
    3330:	0f 2e       	mov	r0, r31
    3332:	f2 e4       	ldi	r31, 0x42	; 66
    3334:	ef 2e       	mov	r14, r31
    3336:	f4 e0       	ldi	r31, 0x04	; 4
    3338:	ff 2e       	mov	r15, r31
    333a:	f0 2d       	mov	r31, r0
    333c:	d7 01       	movw	r26, r14
    333e:	18 96       	adiw	r26, 0x08	; 8
    3340:	ed 91       	ld	r30, X+
    3342:	fc 91       	ld	r31, X
    3344:	19 97       	sbiw	r26, 0x09	; 9
    3346:	66 e0       	ldi	r22, 0x06	; 6
    3348:	87 e2       	ldi	r24, 0x27	; 39
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	19 95       	eicall
    334e:	c1 ed       	ldi	r28, 0xD1	; 209
    3350:	d3 e0       	ldi	r29, 0x03	; 3
    3352:	0f 2e       	mov	r0, r31
    3354:	f8 e2       	ldi	r31, 0x28	; 40
    3356:	cf 2e       	mov	r12, r31
    3358:	d1 2c       	mov	r13, r1
    335a:	f0 2d       	mov	r31, r0
    335c:	d9 82       	std	Y+1, r13	; 0x01
    335e:	c8 82       	st	Y, r12
    3360:	86 e0       	ldi	r24, 0x06	; 6
    3362:	8a 83       	std	Y+2, r24	; 0x02
    3364:	1b 82       	std	Y+3, r1	; 0x03
    3366:	14 e0       	ldi	r17, 0x04	; 4
    3368:	1c 83       	std	Y+4, r17	; 0x04
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	39 df       	rcall	.-398    	; 0x31e0 <_turn_off>
    336e:	d7 01       	movw	r26, r14
    3370:	18 96       	adiw	r26, 0x08	; 8
    3372:	ed 91       	ld	r30, X+
    3374:	fc 91       	ld	r31, X
    3376:	19 97       	sbiw	r26, 0x09	; 9
    3378:	67 e0       	ldi	r22, 0x07	; 7
    337a:	87 e2       	ldi	r24, 0x27	; 39
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	19 95       	eicall
    3380:	df 82       	std	Y+7, r13	; 0x07
    3382:	ce 82       	std	Y+6, r12	; 0x06
    3384:	87 e0       	ldi	r24, 0x07	; 7
    3386:	88 87       	std	Y+8, r24	; 0x08
    3388:	19 86       	std	Y+9, r1	; 0x09
    338a:	1a 87       	std	Y+10, r17	; 0x0a
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	28 df       	rcall	.-432    	; 0x31e0 <_turn_off>
    3390:	d7 01       	movw	r26, r14
    3392:	18 96       	adiw	r26, 0x08	; 8
    3394:	ed 91       	ld	r30, X+
    3396:	fc 91       	ld	r31, X
    3398:	19 97       	sbiw	r26, 0x09	; 9
    339a:	65 e0       	ldi	r22, 0x05	; 5
    339c:	83 e3       	ldi	r24, 0x33	; 51
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	19 95       	eicall
    33a2:	d7 01       	movw	r26, r14
    33a4:	18 96       	adiw	r26, 0x08	; 8
    33a6:	ed 91       	ld	r30, X+
    33a8:	fc 91       	ld	r31, X
    33aa:	19 97       	sbiw	r26, 0x09	; 9
    33ac:	61 e0       	ldi	r22, 0x01	; 1
    33ae:	84 e3       	ldi	r24, 0x34	; 52
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	19 95       	eicall
    33b4:	84 e3       	ldi	r24, 0x34	; 52
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9d 87       	std	Y+13, r25	; 0x0d
    33ba:	8c 87       	std	Y+12, r24	; 0x0c
    33bc:	85 e0       	ldi	r24, 0x05	; 5
    33be:	8e 87       	std	Y+14, r24	; 0x0e
    33c0:	1f 86       	std	Y+15, r1	; 0x0f
    33c2:	18 8b       	std	Y+16, r17	; 0x10
    33c4:	82 e0       	ldi	r24, 0x02	; 2
    33c6:	0c df       	rcall	.-488    	; 0x31e0 <_turn_off>
    33c8:	d7 01       	movw	r26, r14
    33ca:	18 96       	adiw	r26, 0x08	; 8
    33cc:	ed 91       	ld	r30, X+
    33ce:	fc 91       	ld	r31, X
    33d0:	19 97       	sbiw	r26, 0x09	; 9
    33d2:	64 e0       	ldi	r22, 0x04	; 4
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	91 e0       	ldi	r25, 0x01	; 1
    33d8:	19 95       	eicall
    33da:	d7 01       	movw	r26, r14
    33dc:	18 96       	adiw	r26, 0x08	; 8
    33de:	ed 91       	ld	r30, X+
    33e0:	fc 91       	ld	r31, X
    33e2:	19 97       	sbiw	r26, 0x09	; 9
    33e4:	61 e0       	ldi	r22, 0x01	; 1
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	91 e0       	ldi	r25, 0x01	; 1
    33ea:	19 95       	eicall
    33ec:	82 e0       	ldi	r24, 0x02	; 2
    33ee:	91 e0       	ldi	r25, 0x01	; 1
    33f0:	9b 8b       	std	Y+19, r25	; 0x13
    33f2:	8a 8b       	std	Y+18, r24	; 0x12
    33f4:	1c 8b       	std	Y+20, r17	; 0x14
    33f6:	1d 8a       	std	Y+21, r1	; 0x15
    33f8:	1e 8b       	std	Y+22, r17	; 0x16
    33fa:	83 e0       	ldi	r24, 0x03	; 3
    33fc:	f1 de       	rcall	.-542    	; 0x31e0 <_turn_off>
    33fe:	e1 2c       	mov	r14, r1
    3400:	f1 2c       	mov	r15, r1
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 ec       	ldi	r20, 0xC0	; 192
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	69 e3       	ldi	r22, 0x39	; 57
    340c:	73 e0       	ldi	r23, 0x03	; 3
    340e:	8c e4       	ldi	r24, 0x4C	; 76
    3410:	99 e1       	ldi	r25, 0x19	; 25
    3412:	0e 94 2a 0c 	call	0x1854	; 0x1854 <xTaskCreate>
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	df 90       	pop	r13
    3424:	cf 90       	pop	r12
    3426:	08 95       	ret

00003428 <_serial_call_back>:
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	1f 92       	push	r1
    3432:	1f 92       	push	r1
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	8c 01       	movw	r16, r24
    343a:	19 82       	std	Y+1, r1	; 0x01
    343c:	2d c0       	rjmp	.+90     	; 0x3498 <_serial_call_back+0x70>
    343e:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <rec_buf_inp.2926>
    3442:	ec 32       	cpi	r30, 0x2C	; 44
    3444:	50 f4       	brcc	.+20     	; 0x345a <_serial_call_back+0x32>
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	8e 0f       	add	r24, r30
    344a:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <rec_buf_inp.2926>
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	e2 51       	subi	r30, 0x12	; 18
    3452:	fc 4f       	sbci	r31, 0xFC	; 252
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	80 83       	st	Z, r24
    3458:	02 c0       	rjmp	.+4      	; 0x345e <_serial_call_back+0x36>
    345a:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <rec_buf_inp.2926>
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	8a 30       	cpi	r24, 0x0A	; 10
    3462:	d1 f4       	brne	.+52     	; 0x3498 <_serial_call_back+0x70>
    3464:	40 91 e9 03 	lds	r20, 0x03E9	; 0x8003e9 <rec_buf_inp.2926>
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	fa 01       	movw	r30, r20
    346c:	e4 51       	subi	r30, 0x14	; 20
    346e:	fc 4f       	sbci	r31, 0xFC	; 252
    3470:	10 82       	st	Z, r1
    3472:	41 50       	subi	r20, 0x01	; 1
    3474:	51 09       	sbc	r21, r1
    3476:	9e 01       	movw	r18, r28
    3478:	2f 5f       	subi	r18, 0xFF	; 255
    347a:	3f 4f       	sbci	r19, 0xFF	; 255
    347c:	6e ee       	ldi	r22, 0xEE	; 238
    347e:	73 e0       	ldi	r23, 0x03	; 3
    3480:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <_reply_buffer_handle>
    3484:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <_reply_buffer_handle+0x1>
    3488:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xStreamBufferSendFromISR>
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	81 11       	cpse	r24, r1
    3490:	0e 94 c6 04 	call	0x98c	; 0x98c <vPortYield>
    3494:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <rec_buf_inp.2926>
    3498:	be 01       	movw	r22, r28
    349a:	6e 5f       	subi	r22, 0xFE	; 254
    349c:	7f 4f       	sbci	r23, 0xFF	; 255
    349e:	c8 01       	movw	r24, r16
    34a0:	99 db       	rcall	.-2254   	; 0x2bd4 <serial_get_byte>
    34a2:	88 23       	and	r24, r24
    34a4:	61 f2       	breq	.-104    	; 0x343e <_serial_call_back+0x16>
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	08 95       	ret

000034b4 <lora_driver_create>:
    34b4:	8f 92       	push	r8
    34b6:	9f 92       	push	r9
    34b8:	af 92       	push	r10
    34ba:	cf 92       	push	r12
    34bc:	ef 92       	push	r14
    34be:	0f 93       	push	r16
    34c0:	cf 93       	push	r28
    34c2:	c8 2f       	mov	r28, r24
    34c4:	41 e0       	ldi	r20, 0x01	; 1
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	88 ec       	ldi	r24, 0xC8	; 200
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	0e 94 01 0a 	call	0x1402	; 0x1402 <xStreamBufferGenericCreate>
    34d2:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <_reply_buffer_handle+0x1>
    34d6:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <_reply_buffer_handle>
    34da:	0f 2e       	mov	r0, r31
    34dc:	f4 e1       	ldi	r31, 0x14	; 20
    34de:	8f 2e       	mov	r8, r31
    34e0:	fa e1       	ldi	r31, 0x1A	; 26
    34e2:	9f 2e       	mov	r9, r31
    34e4:	f0 2d       	mov	r31, r0
    34e6:	68 94       	set
    34e8:	aa 24       	eor	r10, r10
    34ea:	a6 f8       	bld	r10, 6
    34ec:	68 94       	set
    34ee:	cc 24       	eor	r12, r12
    34f0:	c6 f8       	bld	r12, 6
    34f2:	e1 2c       	mov	r14, r1
    34f4:	00 e0       	ldi	r16, 0x00	; 0
    34f6:	23 e0       	ldi	r18, 0x03	; 3
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	51 ee       	ldi	r21, 0xE1	; 225
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	8c 2f       	mov	r24, r28
    3502:	55 da       	rcall	.-2902   	; 0x29ae <serial_new_instance>
    3504:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <_rn2483_serial+0x1>
    3508:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <_rn2483_serial>
    350c:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <register_access+0x8>
    3510:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <register_access+0x9>
    3514:	64 e0       	ldi	r22, 0x04	; 4
    3516:	87 e0       	ldi	r24, 0x07	; 7
    3518:	91 e0       	ldi	r25, 0x01	; 1
    351a:	19 95       	eicall
    351c:	cf 91       	pop	r28
    351e:	0f 91       	pop	r16
    3520:	ef 90       	pop	r14
    3522:	cf 90       	pop	r12
    3524:	af 90       	pop	r10
    3526:	9f 90       	pop	r9
    3528:	8f 90       	pop	r8
    352a:	08 95       	ret

0000352c <reg_read_register>:
    352c:	fc 01       	movw	r30, r24
    352e:	80 81       	ld	r24, Z
    3530:	08 95       	ret

00003532 <reg_read_bit>:
    3532:	fc 01       	movw	r30, r24
    3534:	20 81       	ld	r18, Z
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <reg_read_bit+0xe>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	6a 95       	dec	r22
    3542:	e2 f7       	brpl	.-8      	; 0x353c <reg_read_bit+0xa>
    3544:	82 23       	and	r24, r18
    3546:	08 95       	ret

00003548 <reg_read_bits>:
    3548:	fc 01       	movw	r30, r24
    354a:	80 81       	ld	r24, Z
    354c:	86 23       	and	r24, r22
    354e:	08 95       	ret

00003550 <reg_set_register>:
    3550:	fc 01       	movw	r30, r24
    3552:	60 83       	st	Z, r22
    3554:	08 95       	ret

00003556 <reg_clear_register>:
    3556:	fc 01       	movw	r30, r24
    3558:	10 82       	st	Z, r1
    355a:	08 95       	ret

0000355c <reg_set_bit>:
    355c:	fc 01       	movw	r30, r24
    355e:	40 81       	ld	r20, Z
    3560:	21 e0       	ldi	r18, 0x01	; 1
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	02 c0       	rjmp	.+4      	; 0x356a <reg_set_bit+0xe>
    3566:	22 0f       	add	r18, r18
    3568:	33 1f       	adc	r19, r19
    356a:	6a 95       	dec	r22
    356c:	e2 f7       	brpl	.-8      	; 0x3566 <reg_set_bit+0xa>
    356e:	24 2b       	or	r18, r20
    3570:	20 83       	st	Z, r18
    3572:	08 95       	ret

00003574 <reg_set_bits>:
    3574:	fc 01       	movw	r30, r24
    3576:	20 81       	ld	r18, Z
    3578:	62 2b       	or	r22, r18
    357a:	60 83       	st	Z, r22
    357c:	08 95       	ret

0000357e <reg_toggle_bit>:
    357e:	fc 01       	movw	r30, r24
    3580:	40 81       	ld	r20, Z
    3582:	21 e0       	ldi	r18, 0x01	; 1
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	02 c0       	rjmp	.+4      	; 0x358c <reg_toggle_bit+0xe>
    3588:	22 0f       	add	r18, r18
    358a:	33 1f       	adc	r19, r19
    358c:	6a 95       	dec	r22
    358e:	e2 f7       	brpl	.-8      	; 0x3588 <reg_toggle_bit+0xa>
    3590:	24 27       	eor	r18, r20
    3592:	20 83       	st	Z, r18
    3594:	08 95       	ret

00003596 <reg_toggle_bits>:
    3596:	fc 01       	movw	r30, r24
    3598:	20 81       	ld	r18, Z
    359a:	62 27       	eor	r22, r18
    359c:	60 83       	st	Z, r22
    359e:	08 95       	ret

000035a0 <reg_clear_bit>:
    35a0:	fc 01       	movw	r30, r24
    35a2:	90 81       	ld	r25, Z
    35a4:	21 e0       	ldi	r18, 0x01	; 1
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	02 c0       	rjmp	.+4      	; 0x35ae <reg_clear_bit+0xe>
    35aa:	22 0f       	add	r18, r18
    35ac:	33 1f       	adc	r19, r19
    35ae:	6a 95       	dec	r22
    35b0:	e2 f7       	brpl	.-8      	; 0x35aa <reg_clear_bit+0xa>
    35b2:	20 95       	com	r18
    35b4:	29 23       	and	r18, r25
    35b6:	20 83       	st	Z, r18
    35b8:	08 95       	ret

000035ba <reg_clear_bits>:
    35ba:	fc 01       	movw	r30, r24
    35bc:	90 81       	ld	r25, Z
    35be:	60 95       	com	r22
    35c0:	69 23       	and	r22, r25
    35c2:	60 83       	st	Z, r22
    35c4:	08 95       	ret

000035c6 <_serial_call_back>:
    35c6:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <crc_sum.1941>
    35ca:	86 0f       	add	r24, r22
    35cc:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <crc_sum.1941>
    35d0:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <_mh_state>
    35d4:	91 30       	cpi	r25, 0x01	; 1
    35d6:	79 f0       	breq	.+30     	; 0x35f6 <_serial_call_back+0x30>
    35d8:	28 f0       	brcs	.+10     	; 0x35e4 <_serial_call_back+0x1e>
    35da:	92 30       	cpi	r25, 0x02	; 2
    35dc:	a9 f0       	breq	.+42     	; 0x3608 <_serial_call_back+0x42>
    35de:	93 30       	cpi	r25, 0x03	; 3
    35e0:	19 f1       	breq	.+70     	; 0x3628 <_serial_call_back+0x62>
    35e2:	08 95       	ret
    35e4:	6f 3f       	cpi	r22, 0xFF	; 255
    35e6:	09 f0       	breq	.+2      	; 0x35ea <_serial_call_back+0x24>
    35e8:	48 c0       	rjmp	.+144    	; 0x367a <_serial_call_back+0xb4>
    35ea:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <crc_sum.1941>
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_mh_state>
    35f4:	08 95       	ret
    35f6:	66 38       	cpi	r22, 0x86	; 134
    35f8:	09 f0       	breq	.+2      	; 0x35fc <_serial_call_back+0x36>
    35fa:	3f c0       	rjmp	.+126    	; 0x367a <_serial_call_back+0xb4>
    35fc:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <inDex.1939>
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_mh_state>
    3606:	08 95       	ret
    3608:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <inDex.1939>
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	8e 0f       	add	r24, r30
    3610:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <inDex.1939>
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	e5 5e       	subi	r30, 0xE5	; 229
    3618:	fb 4f       	sbci	r31, 0xFB	; 251
    361a:	60 83       	st	Z, r22
    361c:	82 30       	cpi	r24, 0x02	; 2
    361e:	69 f5       	brne	.+90     	; 0x367a <_serial_call_back+0xb4>
    3620:	83 e0       	ldi	r24, 0x03	; 3
    3622:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_mh_state>
    3626:	08 95       	ret
    3628:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <inDex.1939>
    362c:	21 e0       	ldi	r18, 0x01	; 1
    362e:	29 0f       	add	r18, r25
    3630:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <inDex.1939>
    3634:	96 30       	cpi	r25, 0x06	; 6
    3636:	09 f5       	brne	.+66     	; 0x367a <_serial_call_back+0xb4>
    3638:	81 11       	cpse	r24, r1
    363a:	0e c0       	rjmp	.+28     	; 0x3658 <_serial_call_back+0x92>
    363c:	eb e1       	ldi	r30, 0x1B	; 27
    363e:	f4 e0       	ldi	r31, 0x04	; 4
    3640:	80 81       	ld	r24, Z
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	98 2f       	mov	r25, r24
    3646:	88 27       	eor	r24, r24
    3648:	21 81       	ldd	r18, Z+1	; 0x01
    364a:	82 0f       	add	r24, r18
    364c:	91 1d       	adc	r25, r1
    364e:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <_ppm+0x1>
    3652:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <_ppm>
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <_serial_call_back+0x9a>
    3658:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ppm+0x1>
    365c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_ppm>
    3660:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <_mh_state>
    3664:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <_app_call_back>
    3668:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <_app_call_back+0x1>
    366c:	30 97       	sbiw	r30, 0x00	; 0
    366e:	29 f0       	breq	.+10     	; 0x367a <_serial_call_back+0xb4>
    3670:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_ppm>
    3674:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <_ppm+0x1>
    3678:	19 95       	eicall
    367a:	08 95       	ret

0000367c <mh_z19_create>:
    367c:	8f 92       	push	r8
    367e:	9f 92       	push	r9
    3680:	af 92       	push	r10
    3682:	cf 92       	push	r12
    3684:	ef 92       	push	r14
    3686:	0f 93       	push	r16
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	eb 01       	movw	r28, r22
    368e:	0f 2e       	mov	r0, r31
    3690:	f3 ee       	ldi	r31, 0xE3	; 227
    3692:	8f 2e       	mov	r8, r31
    3694:	fa e1       	ldi	r31, 0x1A	; 26
    3696:	9f 2e       	mov	r9, r31
    3698:	f0 2d       	mov	r31, r0
    369a:	68 94       	set
    369c:	aa 24       	eor	r10, r10
    369e:	a4 f8       	bld	r10, 4
    36a0:	68 94       	set
    36a2:	cc 24       	eor	r12, r12
    36a4:	c4 f8       	bld	r12, 4
    36a6:	e1 2c       	mov	r14, r1
    36a8:	00 e0       	ldi	r16, 0x00	; 0
    36aa:	23 e0       	ldi	r18, 0x03	; 3
    36ac:	40 e8       	ldi	r20, 0x80	; 128
    36ae:	55 e2       	ldi	r21, 0x25	; 37
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	7c d9       	rcall	.-3336   	; 0x29ae <serial_new_instance>
    36b6:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <_serial+0x1>
    36ba:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <_serial>
    36be:	d0 93 20 04 	sts	0x0420, r29	; 0x800420 <_app_call_back+0x1>
    36c2:	c0 93 1f 04 	sts	0x041F, r28	; 0x80041f <_app_call_back>
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	0f 91       	pop	r16
    36cc:	ef 90       	pop	r14
    36ce:	cf 90       	pop	r12
    36d0:	af 90       	pop	r10
    36d2:	9f 90       	pop	r9
    36d4:	8f 90       	pop	r8
    36d6:	08 95       	ret

000036d8 <mh_z19_take_meassuring>:
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	29 97       	sbiw	r28, 0x09	; 9
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	89 e0       	ldi	r24, 0x09	; 9
    36ee:	e1 e2       	ldi	r30, 0x21	; 33
    36f0:	f2 e0       	ldi	r31, 0x02	; 2
    36f2:	9e 01       	movw	r18, r28
    36f4:	2f 5f       	subi	r18, 0xFF	; 255
    36f6:	3f 4f       	sbci	r19, 0xFF	; 255
    36f8:	d9 01       	movw	r26, r18
    36fa:	01 90       	ld	r0, Z+
    36fc:	0d 92       	st	X+, r0
    36fe:	8a 95       	dec	r24
    3700:	e1 f7       	brne	.-8      	; 0x36fa <mh_z19_take_meassuring+0x22>
    3702:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ppm+0x1>
    3706:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_ppm>
    370a:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <_serial>
    370e:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <_serial+0x1>
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	31 f0       	breq	.+12     	; 0x3722 <mh_z19_take_meassuring+0x4a>
    3716:	42 2f       	mov	r20, r18
    3718:	53 2f       	mov	r21, r19
    371a:	69 e0       	ldi	r22, 0x09	; 9
    371c:	0b da       	rcall	.-3050   	; 0x2b34 <serial_send_bytes>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <mh_z19_take_meassuring+0x4c>
    3722:	82 e0       	ldi	r24, 0x02	; 2
    3724:	29 96       	adiw	r28, 0x09	; 9
    3726:	0f b6       	in	r0, 0x3f	; 63
    3728:	f8 94       	cli
    372a:	de bf       	out	0x3e, r29	; 62
    372c:	0f be       	out	0x3f, r0	; 63
    372e:	cd bf       	out	0x3d, r28	; 61
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	08 95       	ret

00003736 <twiCreate>:
    3736:	af 92       	push	r10
    3738:	bf 92       	push	r11
    373a:	cf 92       	push	r12
    373c:	df 92       	push	r13
    373e:	ef 92       	push	r14
    3740:	ff 92       	push	r15
    3742:	0f 93       	push	r16
    3744:	1f 93       	push	r17
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	a8 2e       	mov	r10, r24
    374c:	b6 2e       	mov	r11, r22
    374e:	69 01       	movw	r12, r18
    3750:	7a 01       	movw	r14, r20
    3752:	84 e0       	ldi	r24, 0x04	; 4
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	27 d3       	rcall	.+1614   	; 0x3da6 <malloc>
    3758:	ec 01       	movw	r28, r24
    375a:	89 2b       	or	r24, r25
    375c:	61 f1       	breq	.+88     	; 0x37b6 <twiCreate+0x80>
    375e:	a8 82       	st	Y, r10
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	b8 12       	cpse	r11, r24
    3764:	12 c0       	rjmp	.+36     	; 0x378a <twiCreate+0x54>
    3766:	c7 01       	movw	r24, r14
    3768:	b6 01       	movw	r22, r12
    376a:	20 ea       	ldi	r18, 0xA0	; 160
    376c:	36 e8       	ldi	r19, 0x86	; 134
    376e:	41 e0       	ldi	r20, 0x01	; 1
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	eb d0       	rcall	.+470    	; 0x394a <__udivmodsi4>
    3774:	da 01       	movw	r26, r20
    3776:	c9 01       	movw	r24, r18
    3778:	40 97       	sbiw	r24, 0x10	; 16
    377a:	a1 09       	sbc	r26, r1
    377c:	b1 09       	sbc	r27, r1
    377e:	b6 95       	lsr	r27
    3780:	a7 95       	ror	r26
    3782:	97 95       	ror	r25
    3784:	87 95       	ror	r24
    3786:	89 83       	std	Y+1, r24	; 0x01
    3788:	11 c0       	rjmp	.+34     	; 0x37ac <twiCreate+0x76>
    378a:	c7 01       	movw	r24, r14
    378c:	b6 01       	movw	r22, r12
    378e:	20 e8       	ldi	r18, 0x80	; 128
    3790:	3a e1       	ldi	r19, 0x1A	; 26
    3792:	46 e0       	ldi	r20, 0x06	; 6
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	d9 d0       	rcall	.+434    	; 0x394a <__udivmodsi4>
    3798:	da 01       	movw	r26, r20
    379a:	c9 01       	movw	r24, r18
    379c:	40 97       	sbiw	r24, 0x10	; 16
    379e:	a1 09       	sbc	r26, r1
    37a0:	b1 09       	sbc	r27, r1
    37a2:	b6 95       	lsr	r27
    37a4:	a7 95       	ror	r26
    37a6:	97 95       	ror	r25
    37a8:	87 95       	ror	r24
    37aa:	89 83       	std	Y+1, r24	; 0x01
    37ac:	1b 83       	std	Y+3, r17	; 0x03
    37ae:	0a 83       	std	Y+2, r16	; 0x02
    37b0:	8c 2f       	mov	r24, r28
    37b2:	9d 2f       	mov	r25, r29
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <twiCreate+0x84>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	ff 90       	pop	r15
    37c4:	ef 90       	pop	r14
    37c6:	df 90       	pop	r13
    37c8:	cf 90       	pop	r12
    37ca:	bf 90       	pop	r11
    37cc:	af 90       	pop	r10
    37ce:	08 95       	ret

000037d0 <__vector_39>:
    37d0:	1f 92       	push	r1
    37d2:	0f 92       	push	r0
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	0f 92       	push	r0
    37d8:	11 24       	eor	r1, r1
    37da:	0b b6       	in	r0, 0x3b	; 59
    37dc:	0f 92       	push	r0
    37de:	2f 93       	push	r18
    37e0:	3f 93       	push	r19
    37e2:	4f 93       	push	r20
    37e4:	5f 93       	push	r21
    37e6:	6f 93       	push	r22
    37e8:	7f 93       	push	r23
    37ea:	8f 93       	push	r24
    37ec:	9f 93       	push	r25
    37ee:	af 93       	push	r26
    37f0:	bf 93       	push	r27
    37f2:	ef 93       	push	r30
    37f4:	ff 93       	push	r31
    37f6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    37fa:	8e 2f       	mov	r24, r30
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	fc 01       	movw	r30, r24
    3800:	38 97       	sbiw	r30, 0x08	; 8
    3802:	e1 35       	cpi	r30, 0x51	; 81
    3804:	f1 05       	cpc	r31, r1
    3806:	08 f0       	brcs	.+2      	; 0x380a <__vector_39+0x3a>
    3808:	75 c0       	rjmp	.+234    	; 0x38f4 <__vector_39+0x124>
    380a:	88 27       	eor	r24, r24
    380c:	e4 58       	subi	r30, 0x84	; 132
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	8f 4f       	sbci	r24, 0xFF	; 255
    3812:	bd c0       	rjmp	.+378    	; 0x398e <__tablejump2__>
    3814:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <_index.1885>
    3818:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <_index.1885>
    381c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_twiMessageLen>
    3820:	e8 17       	cp	r30, r24
    3822:	70 f4       	brcc	.+28     	; 0x3840 <__vector_39+0x70>
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	8e 0f       	add	r24, r30
    3828:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <_index.1885>
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	e6 5d       	subi	r30, 0xD6	; 214
    3830:	fb 4f       	sbci	r31, 0xFB	; 251
    3832:	80 81       	ld	r24, Z
    3834:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3838:	85 e8       	ldi	r24, 0x85	; 133
    383a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    383e:	72 c0       	rjmp	.+228    	; 0x3924 <__vector_39+0x154>
    3840:	84 e9       	ldi	r24, 0x94	; 148
    3842:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3846:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_twiCurrentHandler>
    384a:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <_twiCurrentHandler+0x1>
    384e:	dc 01       	movw	r26, r24
    3850:	12 96       	adiw	r26, 0x02	; 2
    3852:	ed 91       	ld	r30, X+
    3854:	fc 91       	ld	r31, X
    3856:	13 97       	sbiw	r26, 0x03	; 3
    3858:	30 97       	sbiw	r30, 0x00	; 0
    385a:	09 f4       	brne	.+2      	; 0x385e <__vector_39+0x8e>
    385c:	63 c0       	rjmp	.+198    	; 0x3924 <__vector_39+0x154>
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	40 e0       	ldi	r20, 0x00	; 0
    3862:	50 e0       	ldi	r21, 0x00	; 0
    3864:	64 e0       	ldi	r22, 0x04	; 4
    3866:	19 95       	eicall
    3868:	5d c0       	rjmp	.+186    	; 0x3924 <__vector_39+0x154>
    386a:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <_index.1885>
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	8e 0f       	add	r24, r30
    3872:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <_index.1885>
    3876:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	e6 5d       	subi	r30, 0xD6	; 214
    387e:	fb 4f       	sbci	r31, 0xFB	; 251
    3880:	80 83       	st	Z, r24
    3882:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3886:	80 34       	cpi	r24, 0x40	; 64
    3888:	11 f4       	brne	.+4      	; 0x388e <__vector_39+0xbe>
    388a:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <_index.1885>
    388e:	20 91 26 04 	lds	r18, 0x0426	; 0x800426 <_index.1885>
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_twiMessageLen>
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	28 17       	cp	r18, r24
    389e:	39 07       	cpc	r19, r25
    38a0:	24 f4       	brge	.+8      	; 0x38aa <__vector_39+0xda>
    38a2:	85 ec       	ldi	r24, 0xC5	; 197
    38a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38a8:	3d c0       	rjmp	.+122    	; 0x3924 <__vector_39+0x154>
    38aa:	85 e8       	ldi	r24, 0x85	; 133
    38ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38b0:	39 c0       	rjmp	.+114    	; 0x3924 <__vector_39+0x154>
    38b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    38b6:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <_index.1885>
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	e6 5d       	subi	r30, 0xD6	; 214
    38be:	fb 4f       	sbci	r31, 0xFB	; 251
    38c0:	80 83       	st	Z, r24
    38c2:	84 e9       	ldi	r24, 0x94	; 148
    38c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38c8:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_twiCurrentHandler>
    38cc:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <_twiCurrentHandler+0x1>
    38d0:	dc 01       	movw	r26, r24
    38d2:	12 96       	adiw	r26, 0x02	; 2
    38d4:	ed 91       	ld	r30, X+
    38d6:	fc 91       	ld	r31, X
    38d8:	13 97       	sbiw	r26, 0x03	; 3
    38da:	30 97       	sbiw	r30, 0x00	; 0
    38dc:	19 f1       	breq	.+70     	; 0x3924 <__vector_39+0x154>
    38de:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <_twiMessageLen>
    38e2:	4a e2       	ldi	r20, 0x2A	; 42
    38e4:	54 e0       	ldi	r21, 0x04	; 4
    38e6:	65 e0       	ldi	r22, 0x05	; 5
    38e8:	19 95       	eicall
    38ea:	1c c0       	rjmp	.+56     	; 0x3924 <__vector_39+0x154>
    38ec:	85 ea       	ldi	r24, 0xA5	; 165
    38ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38f2:	18 c0       	rjmp	.+48     	; 0x3924 <__vector_39+0x154>
    38f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    38f8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    38fc:	84 e0       	ldi	r24, 0x04	; 4
    38fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3902:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_twiCurrentHandler>
    3906:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <_twiCurrentHandler+0x1>
    390a:	dc 01       	movw	r26, r24
    390c:	12 96       	adiw	r26, 0x02	; 2
    390e:	ed 91       	ld	r30, X+
    3910:	fc 91       	ld	r31, X
    3912:	13 97       	sbiw	r26, 0x03	; 3
    3914:	30 97       	sbiw	r30, 0x00	; 0
    3916:	31 f0       	breq	.+12     	; 0x3924 <__vector_39+0x154>
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	50 e0       	ldi	r21, 0x00	; 0
    391e:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    3922:	19 95       	eicall
    3924:	ff 91       	pop	r31
    3926:	ef 91       	pop	r30
    3928:	bf 91       	pop	r27
    392a:	af 91       	pop	r26
    392c:	9f 91       	pop	r25
    392e:	8f 91       	pop	r24
    3930:	7f 91       	pop	r23
    3932:	6f 91       	pop	r22
    3934:	5f 91       	pop	r21
    3936:	4f 91       	pop	r20
    3938:	3f 91       	pop	r19
    393a:	2f 91       	pop	r18
    393c:	0f 90       	pop	r0
    393e:	0b be       	out	0x3b, r0	; 59
    3940:	0f 90       	pop	r0
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	0f 90       	pop	r0
    3946:	1f 90       	pop	r1
    3948:	18 95       	reti

0000394a <__udivmodsi4>:
    394a:	a1 e2       	ldi	r26, 0x21	; 33
    394c:	1a 2e       	mov	r1, r26
    394e:	aa 1b       	sub	r26, r26
    3950:	bb 1b       	sub	r27, r27
    3952:	fd 01       	movw	r30, r26
    3954:	0d c0       	rjmp	.+26     	; 0x3970 <__udivmodsi4_ep>

00003956 <__udivmodsi4_loop>:
    3956:	aa 1f       	adc	r26, r26
    3958:	bb 1f       	adc	r27, r27
    395a:	ee 1f       	adc	r30, r30
    395c:	ff 1f       	adc	r31, r31
    395e:	a2 17       	cp	r26, r18
    3960:	b3 07       	cpc	r27, r19
    3962:	e4 07       	cpc	r30, r20
    3964:	f5 07       	cpc	r31, r21
    3966:	20 f0       	brcs	.+8      	; 0x3970 <__udivmodsi4_ep>
    3968:	a2 1b       	sub	r26, r18
    396a:	b3 0b       	sbc	r27, r19
    396c:	e4 0b       	sbc	r30, r20
    396e:	f5 0b       	sbc	r31, r21

00003970 <__udivmodsi4_ep>:
    3970:	66 1f       	adc	r22, r22
    3972:	77 1f       	adc	r23, r23
    3974:	88 1f       	adc	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	1a 94       	dec	r1
    397a:	69 f7       	brne	.-38     	; 0x3956 <__udivmodsi4_loop>
    397c:	60 95       	com	r22
    397e:	70 95       	com	r23
    3980:	80 95       	com	r24
    3982:	90 95       	com	r25
    3984:	9b 01       	movw	r18, r22
    3986:	ac 01       	movw	r20, r24
    3988:	bd 01       	movw	r22, r26
    398a:	cf 01       	movw	r24, r30
    398c:	08 95       	ret

0000398e <__tablejump2__>:
    398e:	ee 0f       	add	r30, r30
    3990:	ff 1f       	adc	r31, r31
    3992:	88 1f       	adc	r24, r24
    3994:	8b bf       	out	0x3b, r24	; 59
    3996:	07 90       	elpm	r0, Z+
    3998:	f6 91       	elpm	r31, Z
    399a:	e0 2d       	mov	r30, r0
    399c:	19 94       	eijmp

0000399e <__subsf3>:
    399e:	50 58       	subi	r21, 0x80	; 128

000039a0 <__addsf3>:
    39a0:	bb 27       	eor	r27, r27
    39a2:	aa 27       	eor	r26, r26
    39a4:	0e d0       	rcall	.+28     	; 0x39c2 <__addsf3x>
    39a6:	48 c1       	rjmp	.+656    	; 0x3c38 <__fp_round>
    39a8:	39 d1       	rcall	.+626    	; 0x3c1c <__fp_pscA>
    39aa:	30 f0       	brcs	.+12     	; 0x39b8 <__addsf3+0x18>
    39ac:	3e d1       	rcall	.+636    	; 0x3c2a <__fp_pscB>
    39ae:	20 f0       	brcs	.+8      	; 0x39b8 <__addsf3+0x18>
    39b0:	31 f4       	brne	.+12     	; 0x39be <__addsf3+0x1e>
    39b2:	9f 3f       	cpi	r25, 0xFF	; 255
    39b4:	11 f4       	brne	.+4      	; 0x39ba <__addsf3+0x1a>
    39b6:	1e f4       	brtc	.+6      	; 0x39be <__addsf3+0x1e>
    39b8:	2e c1       	rjmp	.+604    	; 0x3c16 <__fp_nan>
    39ba:	0e f4       	brtc	.+2      	; 0x39be <__addsf3+0x1e>
    39bc:	e0 95       	com	r30
    39be:	e7 fb       	bst	r30, 7
    39c0:	24 c1       	rjmp	.+584    	; 0x3c0a <__fp_inf>

000039c2 <__addsf3x>:
    39c2:	e9 2f       	mov	r30, r25
    39c4:	4a d1       	rcall	.+660    	; 0x3c5a <__fp_split3>
    39c6:	80 f3       	brcs	.-32     	; 0x39a8 <__addsf3+0x8>
    39c8:	ba 17       	cp	r27, r26
    39ca:	62 07       	cpc	r22, r18
    39cc:	73 07       	cpc	r23, r19
    39ce:	84 07       	cpc	r24, r20
    39d0:	95 07       	cpc	r25, r21
    39d2:	18 f0       	brcs	.+6      	; 0x39da <__addsf3x+0x18>
    39d4:	71 f4       	brne	.+28     	; 0x39f2 <__addsf3x+0x30>
    39d6:	9e f5       	brtc	.+102    	; 0x3a3e <__addsf3x+0x7c>
    39d8:	62 c1       	rjmp	.+708    	; 0x3c9e <__fp_zero>
    39da:	0e f4       	brtc	.+2      	; 0x39de <__addsf3x+0x1c>
    39dc:	e0 95       	com	r30
    39de:	0b 2e       	mov	r0, r27
    39e0:	ba 2f       	mov	r27, r26
    39e2:	a0 2d       	mov	r26, r0
    39e4:	0b 01       	movw	r0, r22
    39e6:	b9 01       	movw	r22, r18
    39e8:	90 01       	movw	r18, r0
    39ea:	0c 01       	movw	r0, r24
    39ec:	ca 01       	movw	r24, r20
    39ee:	a0 01       	movw	r20, r0
    39f0:	11 24       	eor	r1, r1
    39f2:	ff 27       	eor	r31, r31
    39f4:	59 1b       	sub	r21, r25
    39f6:	99 f0       	breq	.+38     	; 0x3a1e <__addsf3x+0x5c>
    39f8:	59 3f       	cpi	r21, 0xF9	; 249
    39fa:	50 f4       	brcc	.+20     	; 0x3a10 <__addsf3x+0x4e>
    39fc:	50 3e       	cpi	r21, 0xE0	; 224
    39fe:	68 f1       	brcs	.+90     	; 0x3a5a <__addsf3x+0x98>
    3a00:	1a 16       	cp	r1, r26
    3a02:	f0 40       	sbci	r31, 0x00	; 0
    3a04:	a2 2f       	mov	r26, r18
    3a06:	23 2f       	mov	r18, r19
    3a08:	34 2f       	mov	r19, r20
    3a0a:	44 27       	eor	r20, r20
    3a0c:	58 5f       	subi	r21, 0xF8	; 248
    3a0e:	f3 cf       	rjmp	.-26     	; 0x39f6 <__addsf3x+0x34>
    3a10:	46 95       	lsr	r20
    3a12:	37 95       	ror	r19
    3a14:	27 95       	ror	r18
    3a16:	a7 95       	ror	r26
    3a18:	f0 40       	sbci	r31, 0x00	; 0
    3a1a:	53 95       	inc	r21
    3a1c:	c9 f7       	brne	.-14     	; 0x3a10 <__addsf3x+0x4e>
    3a1e:	7e f4       	brtc	.+30     	; 0x3a3e <__addsf3x+0x7c>
    3a20:	1f 16       	cp	r1, r31
    3a22:	ba 0b       	sbc	r27, r26
    3a24:	62 0b       	sbc	r22, r18
    3a26:	73 0b       	sbc	r23, r19
    3a28:	84 0b       	sbc	r24, r20
    3a2a:	ba f0       	brmi	.+46     	; 0x3a5a <__addsf3x+0x98>
    3a2c:	91 50       	subi	r25, 0x01	; 1
    3a2e:	a1 f0       	breq	.+40     	; 0x3a58 <__addsf3x+0x96>
    3a30:	ff 0f       	add	r31, r31
    3a32:	bb 1f       	adc	r27, r27
    3a34:	66 1f       	adc	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	88 1f       	adc	r24, r24
    3a3a:	c2 f7       	brpl	.-16     	; 0x3a2c <__addsf3x+0x6a>
    3a3c:	0e c0       	rjmp	.+28     	; 0x3a5a <__addsf3x+0x98>
    3a3e:	ba 0f       	add	r27, r26
    3a40:	62 1f       	adc	r22, r18
    3a42:	73 1f       	adc	r23, r19
    3a44:	84 1f       	adc	r24, r20
    3a46:	48 f4       	brcc	.+18     	; 0x3a5a <__addsf3x+0x98>
    3a48:	87 95       	ror	r24
    3a4a:	77 95       	ror	r23
    3a4c:	67 95       	ror	r22
    3a4e:	b7 95       	ror	r27
    3a50:	f7 95       	ror	r31
    3a52:	9e 3f       	cpi	r25, 0xFE	; 254
    3a54:	08 f0       	brcs	.+2      	; 0x3a58 <__addsf3x+0x96>
    3a56:	b3 cf       	rjmp	.-154    	; 0x39be <__addsf3+0x1e>
    3a58:	93 95       	inc	r25
    3a5a:	88 0f       	add	r24, r24
    3a5c:	08 f0       	brcs	.+2      	; 0x3a60 <__addsf3x+0x9e>
    3a5e:	99 27       	eor	r25, r25
    3a60:	ee 0f       	add	r30, r30
    3a62:	97 95       	ror	r25
    3a64:	87 95       	ror	r24
    3a66:	08 95       	ret

00003a68 <__divsf3>:
    3a68:	0c d0       	rcall	.+24     	; 0x3a82 <__divsf3x>
    3a6a:	e6 c0       	rjmp	.+460    	; 0x3c38 <__fp_round>
    3a6c:	de d0       	rcall	.+444    	; 0x3c2a <__fp_pscB>
    3a6e:	40 f0       	brcs	.+16     	; 0x3a80 <__divsf3+0x18>
    3a70:	d5 d0       	rcall	.+426    	; 0x3c1c <__fp_pscA>
    3a72:	30 f0       	brcs	.+12     	; 0x3a80 <__divsf3+0x18>
    3a74:	21 f4       	brne	.+8      	; 0x3a7e <__divsf3+0x16>
    3a76:	5f 3f       	cpi	r21, 0xFF	; 255
    3a78:	19 f0       	breq	.+6      	; 0x3a80 <__divsf3+0x18>
    3a7a:	c7 c0       	rjmp	.+398    	; 0x3c0a <__fp_inf>
    3a7c:	51 11       	cpse	r21, r1
    3a7e:	10 c1       	rjmp	.+544    	; 0x3ca0 <__fp_szero>
    3a80:	ca c0       	rjmp	.+404    	; 0x3c16 <__fp_nan>

00003a82 <__divsf3x>:
    3a82:	eb d0       	rcall	.+470    	; 0x3c5a <__fp_split3>
    3a84:	98 f3       	brcs	.-26     	; 0x3a6c <__divsf3+0x4>

00003a86 <__divsf3_pse>:
    3a86:	99 23       	and	r25, r25
    3a88:	c9 f3       	breq	.-14     	; 0x3a7c <__divsf3+0x14>
    3a8a:	55 23       	and	r21, r21
    3a8c:	b1 f3       	breq	.-20     	; 0x3a7a <__divsf3+0x12>
    3a8e:	95 1b       	sub	r25, r21
    3a90:	55 0b       	sbc	r21, r21
    3a92:	bb 27       	eor	r27, r27
    3a94:	aa 27       	eor	r26, r26
    3a96:	62 17       	cp	r22, r18
    3a98:	73 07       	cpc	r23, r19
    3a9a:	84 07       	cpc	r24, r20
    3a9c:	38 f0       	brcs	.+14     	; 0x3aac <__divsf3_pse+0x26>
    3a9e:	9f 5f       	subi	r25, 0xFF	; 255
    3aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    3aa2:	22 0f       	add	r18, r18
    3aa4:	33 1f       	adc	r19, r19
    3aa6:	44 1f       	adc	r20, r20
    3aa8:	aa 1f       	adc	r26, r26
    3aaa:	a9 f3       	breq	.-22     	; 0x3a96 <__divsf3_pse+0x10>
    3aac:	33 d0       	rcall	.+102    	; 0x3b14 <__divsf3_pse+0x8e>
    3aae:	0e 2e       	mov	r0, r30
    3ab0:	3a f0       	brmi	.+14     	; 0x3ac0 <__divsf3_pse+0x3a>
    3ab2:	e0 e8       	ldi	r30, 0x80	; 128
    3ab4:	30 d0       	rcall	.+96     	; 0x3b16 <__divsf3_pse+0x90>
    3ab6:	91 50       	subi	r25, 0x01	; 1
    3ab8:	50 40       	sbci	r21, 0x00	; 0
    3aba:	e6 95       	lsr	r30
    3abc:	00 1c       	adc	r0, r0
    3abe:	ca f7       	brpl	.-14     	; 0x3ab2 <__divsf3_pse+0x2c>
    3ac0:	29 d0       	rcall	.+82     	; 0x3b14 <__divsf3_pse+0x8e>
    3ac2:	fe 2f       	mov	r31, r30
    3ac4:	27 d0       	rcall	.+78     	; 0x3b14 <__divsf3_pse+0x8e>
    3ac6:	66 0f       	add	r22, r22
    3ac8:	77 1f       	adc	r23, r23
    3aca:	88 1f       	adc	r24, r24
    3acc:	bb 1f       	adc	r27, r27
    3ace:	26 17       	cp	r18, r22
    3ad0:	37 07       	cpc	r19, r23
    3ad2:	48 07       	cpc	r20, r24
    3ad4:	ab 07       	cpc	r26, r27
    3ad6:	b0 e8       	ldi	r27, 0x80	; 128
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <__divsf3_pse+0x56>
    3ada:	bb 0b       	sbc	r27, r27
    3adc:	80 2d       	mov	r24, r0
    3ade:	bf 01       	movw	r22, r30
    3ae0:	ff 27       	eor	r31, r31
    3ae2:	93 58       	subi	r25, 0x83	; 131
    3ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae6:	2a f0       	brmi	.+10     	; 0x3af2 <__divsf3_pse+0x6c>
    3ae8:	9e 3f       	cpi	r25, 0xFE	; 254
    3aea:	51 05       	cpc	r21, r1
    3aec:	68 f0       	brcs	.+26     	; 0x3b08 <__divsf3_pse+0x82>
    3aee:	8d c0       	rjmp	.+282    	; 0x3c0a <__fp_inf>
    3af0:	d7 c0       	rjmp	.+430    	; 0x3ca0 <__fp_szero>
    3af2:	5f 3f       	cpi	r21, 0xFF	; 255
    3af4:	ec f3       	brlt	.-6      	; 0x3af0 <__divsf3_pse+0x6a>
    3af6:	98 3e       	cpi	r25, 0xE8	; 232
    3af8:	dc f3       	brlt	.-10     	; 0x3af0 <__divsf3_pse+0x6a>
    3afa:	86 95       	lsr	r24
    3afc:	77 95       	ror	r23
    3afe:	67 95       	ror	r22
    3b00:	b7 95       	ror	r27
    3b02:	f7 95       	ror	r31
    3b04:	9f 5f       	subi	r25, 0xFF	; 255
    3b06:	c9 f7       	brne	.-14     	; 0x3afa <__divsf3_pse+0x74>
    3b08:	88 0f       	add	r24, r24
    3b0a:	91 1d       	adc	r25, r1
    3b0c:	96 95       	lsr	r25
    3b0e:	87 95       	ror	r24
    3b10:	97 f9       	bld	r25, 7
    3b12:	08 95       	ret
    3b14:	e1 e0       	ldi	r30, 0x01	; 1
    3b16:	66 0f       	add	r22, r22
    3b18:	77 1f       	adc	r23, r23
    3b1a:	88 1f       	adc	r24, r24
    3b1c:	bb 1f       	adc	r27, r27
    3b1e:	62 17       	cp	r22, r18
    3b20:	73 07       	cpc	r23, r19
    3b22:	84 07       	cpc	r24, r20
    3b24:	ba 07       	cpc	r27, r26
    3b26:	20 f0       	brcs	.+8      	; 0x3b30 <__divsf3_pse+0xaa>
    3b28:	62 1b       	sub	r22, r18
    3b2a:	73 0b       	sbc	r23, r19
    3b2c:	84 0b       	sbc	r24, r20
    3b2e:	ba 0b       	sbc	r27, r26
    3b30:	ee 1f       	adc	r30, r30
    3b32:	88 f7       	brcc	.-30     	; 0x3b16 <__divsf3_pse+0x90>
    3b34:	e0 95       	com	r30
    3b36:	08 95       	ret

00003b38 <__fixunssfsi>:
    3b38:	98 d0       	rcall	.+304    	; 0x3c6a <__fp_splitA>
    3b3a:	88 f0       	brcs	.+34     	; 0x3b5e <__fixunssfsi+0x26>
    3b3c:	9f 57       	subi	r25, 0x7F	; 127
    3b3e:	90 f0       	brcs	.+36     	; 0x3b64 <__fixunssfsi+0x2c>
    3b40:	b9 2f       	mov	r27, r25
    3b42:	99 27       	eor	r25, r25
    3b44:	b7 51       	subi	r27, 0x17	; 23
    3b46:	a0 f0       	brcs	.+40     	; 0x3b70 <__fixunssfsi+0x38>
    3b48:	d1 f0       	breq	.+52     	; 0x3b7e <__fixunssfsi+0x46>
    3b4a:	66 0f       	add	r22, r22
    3b4c:	77 1f       	adc	r23, r23
    3b4e:	88 1f       	adc	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	1a f0       	brmi	.+6      	; 0x3b5a <__fixunssfsi+0x22>
    3b54:	ba 95       	dec	r27
    3b56:	c9 f7       	brne	.-14     	; 0x3b4a <__fixunssfsi+0x12>
    3b58:	12 c0       	rjmp	.+36     	; 0x3b7e <__fixunssfsi+0x46>
    3b5a:	b1 30       	cpi	r27, 0x01	; 1
    3b5c:	81 f0       	breq	.+32     	; 0x3b7e <__fixunssfsi+0x46>
    3b5e:	9f d0       	rcall	.+318    	; 0x3c9e <__fp_zero>
    3b60:	b1 e0       	ldi	r27, 0x01	; 1
    3b62:	08 95       	ret
    3b64:	9c c0       	rjmp	.+312    	; 0x3c9e <__fp_zero>
    3b66:	67 2f       	mov	r22, r23
    3b68:	78 2f       	mov	r23, r24
    3b6a:	88 27       	eor	r24, r24
    3b6c:	b8 5f       	subi	r27, 0xF8	; 248
    3b6e:	39 f0       	breq	.+14     	; 0x3b7e <__fixunssfsi+0x46>
    3b70:	b9 3f       	cpi	r27, 0xF9	; 249
    3b72:	cc f3       	brlt	.-14     	; 0x3b66 <__fixunssfsi+0x2e>
    3b74:	86 95       	lsr	r24
    3b76:	77 95       	ror	r23
    3b78:	67 95       	ror	r22
    3b7a:	b3 95       	inc	r27
    3b7c:	d9 f7       	brne	.-10     	; 0x3b74 <__fixunssfsi+0x3c>
    3b7e:	3e f4       	brtc	.+14     	; 0x3b8e <__fixunssfsi+0x56>
    3b80:	90 95       	com	r25
    3b82:	80 95       	com	r24
    3b84:	70 95       	com	r23
    3b86:	61 95       	neg	r22
    3b88:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8e:	08 95       	ret

00003b90 <__floatunsisf>:
    3b90:	e8 94       	clt
    3b92:	09 c0       	rjmp	.+18     	; 0x3ba6 <__floatsisf+0x12>

00003b94 <__floatsisf>:
    3b94:	97 fb       	bst	r25, 7
    3b96:	3e f4       	brtc	.+14     	; 0x3ba6 <__floatsisf+0x12>
    3b98:	90 95       	com	r25
    3b9a:	80 95       	com	r24
    3b9c:	70 95       	com	r23
    3b9e:	61 95       	neg	r22
    3ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba6:	99 23       	and	r25, r25
    3ba8:	a9 f0       	breq	.+42     	; 0x3bd4 <__floatsisf+0x40>
    3baa:	f9 2f       	mov	r31, r25
    3bac:	96 e9       	ldi	r25, 0x96	; 150
    3bae:	bb 27       	eor	r27, r27
    3bb0:	93 95       	inc	r25
    3bb2:	f6 95       	lsr	r31
    3bb4:	87 95       	ror	r24
    3bb6:	77 95       	ror	r23
    3bb8:	67 95       	ror	r22
    3bba:	b7 95       	ror	r27
    3bbc:	f1 11       	cpse	r31, r1
    3bbe:	f8 cf       	rjmp	.-16     	; 0x3bb0 <__floatsisf+0x1c>
    3bc0:	fa f4       	brpl	.+62     	; 0x3c00 <__floatsisf+0x6c>
    3bc2:	bb 0f       	add	r27, r27
    3bc4:	11 f4       	brne	.+4      	; 0x3bca <__floatsisf+0x36>
    3bc6:	60 ff       	sbrs	r22, 0
    3bc8:	1b c0       	rjmp	.+54     	; 0x3c00 <__floatsisf+0x6c>
    3bca:	6f 5f       	subi	r22, 0xFF	; 255
    3bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bce:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd2:	16 c0       	rjmp	.+44     	; 0x3c00 <__floatsisf+0x6c>
    3bd4:	88 23       	and	r24, r24
    3bd6:	11 f0       	breq	.+4      	; 0x3bdc <__floatsisf+0x48>
    3bd8:	96 e9       	ldi	r25, 0x96	; 150
    3bda:	11 c0       	rjmp	.+34     	; 0x3bfe <__floatsisf+0x6a>
    3bdc:	77 23       	and	r23, r23
    3bde:	21 f0       	breq	.+8      	; 0x3be8 <__floatsisf+0x54>
    3be0:	9e e8       	ldi	r25, 0x8E	; 142
    3be2:	87 2f       	mov	r24, r23
    3be4:	76 2f       	mov	r23, r22
    3be6:	05 c0       	rjmp	.+10     	; 0x3bf2 <__floatsisf+0x5e>
    3be8:	66 23       	and	r22, r22
    3bea:	71 f0       	breq	.+28     	; 0x3c08 <__floatsisf+0x74>
    3bec:	96 e8       	ldi	r25, 0x86	; 134
    3bee:	86 2f       	mov	r24, r22
    3bf0:	70 e0       	ldi	r23, 0x00	; 0
    3bf2:	60 e0       	ldi	r22, 0x00	; 0
    3bf4:	2a f0       	brmi	.+10     	; 0x3c00 <__floatsisf+0x6c>
    3bf6:	9a 95       	dec	r25
    3bf8:	66 0f       	add	r22, r22
    3bfa:	77 1f       	adc	r23, r23
    3bfc:	88 1f       	adc	r24, r24
    3bfe:	da f7       	brpl	.-10     	; 0x3bf6 <__floatsisf+0x62>
    3c00:	88 0f       	add	r24, r24
    3c02:	96 95       	lsr	r25
    3c04:	87 95       	ror	r24
    3c06:	97 f9       	bld	r25, 7
    3c08:	08 95       	ret

00003c0a <__fp_inf>:
    3c0a:	97 f9       	bld	r25, 7
    3c0c:	9f 67       	ori	r25, 0x7F	; 127
    3c0e:	80 e8       	ldi	r24, 0x80	; 128
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	08 95       	ret

00003c16 <__fp_nan>:
    3c16:	9f ef       	ldi	r25, 0xFF	; 255
    3c18:	80 ec       	ldi	r24, 0xC0	; 192
    3c1a:	08 95       	ret

00003c1c <__fp_pscA>:
    3c1c:	00 24       	eor	r0, r0
    3c1e:	0a 94       	dec	r0
    3c20:	16 16       	cp	r1, r22
    3c22:	17 06       	cpc	r1, r23
    3c24:	18 06       	cpc	r1, r24
    3c26:	09 06       	cpc	r0, r25
    3c28:	08 95       	ret

00003c2a <__fp_pscB>:
    3c2a:	00 24       	eor	r0, r0
    3c2c:	0a 94       	dec	r0
    3c2e:	12 16       	cp	r1, r18
    3c30:	13 06       	cpc	r1, r19
    3c32:	14 06       	cpc	r1, r20
    3c34:	05 06       	cpc	r0, r21
    3c36:	08 95       	ret

00003c38 <__fp_round>:
    3c38:	09 2e       	mov	r0, r25
    3c3a:	03 94       	inc	r0
    3c3c:	00 0c       	add	r0, r0
    3c3e:	11 f4       	brne	.+4      	; 0x3c44 <__fp_round+0xc>
    3c40:	88 23       	and	r24, r24
    3c42:	52 f0       	brmi	.+20     	; 0x3c58 <__fp_round+0x20>
    3c44:	bb 0f       	add	r27, r27
    3c46:	40 f4       	brcc	.+16     	; 0x3c58 <__fp_round+0x20>
    3c48:	bf 2b       	or	r27, r31
    3c4a:	11 f4       	brne	.+4      	; 0x3c50 <__fp_round+0x18>
    3c4c:	60 ff       	sbrs	r22, 0
    3c4e:	04 c0       	rjmp	.+8      	; 0x3c58 <__fp_round+0x20>
    3c50:	6f 5f       	subi	r22, 0xFF	; 255
    3c52:	7f 4f       	sbci	r23, 0xFF	; 255
    3c54:	8f 4f       	sbci	r24, 0xFF	; 255
    3c56:	9f 4f       	sbci	r25, 0xFF	; 255
    3c58:	08 95       	ret

00003c5a <__fp_split3>:
    3c5a:	57 fd       	sbrc	r21, 7
    3c5c:	90 58       	subi	r25, 0x80	; 128
    3c5e:	44 0f       	add	r20, r20
    3c60:	55 1f       	adc	r21, r21
    3c62:	59 f0       	breq	.+22     	; 0x3c7a <__fp_splitA+0x10>
    3c64:	5f 3f       	cpi	r21, 0xFF	; 255
    3c66:	71 f0       	breq	.+28     	; 0x3c84 <__fp_splitA+0x1a>
    3c68:	47 95       	ror	r20

00003c6a <__fp_splitA>:
    3c6a:	88 0f       	add	r24, r24
    3c6c:	97 fb       	bst	r25, 7
    3c6e:	99 1f       	adc	r25, r25
    3c70:	61 f0       	breq	.+24     	; 0x3c8a <__fp_splitA+0x20>
    3c72:	9f 3f       	cpi	r25, 0xFF	; 255
    3c74:	79 f0       	breq	.+30     	; 0x3c94 <__fp_splitA+0x2a>
    3c76:	87 95       	ror	r24
    3c78:	08 95       	ret
    3c7a:	12 16       	cp	r1, r18
    3c7c:	13 06       	cpc	r1, r19
    3c7e:	14 06       	cpc	r1, r20
    3c80:	55 1f       	adc	r21, r21
    3c82:	f2 cf       	rjmp	.-28     	; 0x3c68 <__fp_split3+0xe>
    3c84:	46 95       	lsr	r20
    3c86:	f1 df       	rcall	.-30     	; 0x3c6a <__fp_splitA>
    3c88:	08 c0       	rjmp	.+16     	; 0x3c9a <__fp_splitA+0x30>
    3c8a:	16 16       	cp	r1, r22
    3c8c:	17 06       	cpc	r1, r23
    3c8e:	18 06       	cpc	r1, r24
    3c90:	99 1f       	adc	r25, r25
    3c92:	f1 cf       	rjmp	.-30     	; 0x3c76 <__fp_splitA+0xc>
    3c94:	86 95       	lsr	r24
    3c96:	71 05       	cpc	r23, r1
    3c98:	61 05       	cpc	r22, r1
    3c9a:	08 94       	sec
    3c9c:	08 95       	ret

00003c9e <__fp_zero>:
    3c9e:	e8 94       	clt

00003ca0 <__fp_szero>:
    3ca0:	bb 27       	eor	r27, r27
    3ca2:	66 27       	eor	r22, r22
    3ca4:	77 27       	eor	r23, r23
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	97 f9       	bld	r25, 7
    3caa:	08 95       	ret

00003cac <__mulsf3>:
    3cac:	0b d0       	rcall	.+22     	; 0x3cc4 <__mulsf3x>
    3cae:	c4 cf       	rjmp	.-120    	; 0x3c38 <__fp_round>
    3cb0:	b5 df       	rcall	.-150    	; 0x3c1c <__fp_pscA>
    3cb2:	28 f0       	brcs	.+10     	; 0x3cbe <__mulsf3+0x12>
    3cb4:	ba df       	rcall	.-140    	; 0x3c2a <__fp_pscB>
    3cb6:	18 f0       	brcs	.+6      	; 0x3cbe <__mulsf3+0x12>
    3cb8:	95 23       	and	r25, r21
    3cba:	09 f0       	breq	.+2      	; 0x3cbe <__mulsf3+0x12>
    3cbc:	a6 cf       	rjmp	.-180    	; 0x3c0a <__fp_inf>
    3cbe:	ab cf       	rjmp	.-170    	; 0x3c16 <__fp_nan>
    3cc0:	11 24       	eor	r1, r1
    3cc2:	ee cf       	rjmp	.-36     	; 0x3ca0 <__fp_szero>

00003cc4 <__mulsf3x>:
    3cc4:	ca df       	rcall	.-108    	; 0x3c5a <__fp_split3>
    3cc6:	a0 f3       	brcs	.-24     	; 0x3cb0 <__mulsf3+0x4>

00003cc8 <__mulsf3_pse>:
    3cc8:	95 9f       	mul	r25, r21
    3cca:	d1 f3       	breq	.-12     	; 0x3cc0 <__mulsf3+0x14>
    3ccc:	95 0f       	add	r25, r21
    3cce:	50 e0       	ldi	r21, 0x00	; 0
    3cd0:	55 1f       	adc	r21, r21
    3cd2:	62 9f       	mul	r22, r18
    3cd4:	f0 01       	movw	r30, r0
    3cd6:	72 9f       	mul	r23, r18
    3cd8:	bb 27       	eor	r27, r27
    3cda:	f0 0d       	add	r31, r0
    3cdc:	b1 1d       	adc	r27, r1
    3cde:	63 9f       	mul	r22, r19
    3ce0:	aa 27       	eor	r26, r26
    3ce2:	f0 0d       	add	r31, r0
    3ce4:	b1 1d       	adc	r27, r1
    3ce6:	aa 1f       	adc	r26, r26
    3ce8:	64 9f       	mul	r22, r20
    3cea:	66 27       	eor	r22, r22
    3cec:	b0 0d       	add	r27, r0
    3cee:	a1 1d       	adc	r26, r1
    3cf0:	66 1f       	adc	r22, r22
    3cf2:	82 9f       	mul	r24, r18
    3cf4:	22 27       	eor	r18, r18
    3cf6:	b0 0d       	add	r27, r0
    3cf8:	a1 1d       	adc	r26, r1
    3cfa:	62 1f       	adc	r22, r18
    3cfc:	73 9f       	mul	r23, r19
    3cfe:	b0 0d       	add	r27, r0
    3d00:	a1 1d       	adc	r26, r1
    3d02:	62 1f       	adc	r22, r18
    3d04:	83 9f       	mul	r24, r19
    3d06:	a0 0d       	add	r26, r0
    3d08:	61 1d       	adc	r22, r1
    3d0a:	22 1f       	adc	r18, r18
    3d0c:	74 9f       	mul	r23, r20
    3d0e:	33 27       	eor	r19, r19
    3d10:	a0 0d       	add	r26, r0
    3d12:	61 1d       	adc	r22, r1
    3d14:	23 1f       	adc	r18, r19
    3d16:	84 9f       	mul	r24, r20
    3d18:	60 0d       	add	r22, r0
    3d1a:	21 1d       	adc	r18, r1
    3d1c:	82 2f       	mov	r24, r18
    3d1e:	76 2f       	mov	r23, r22
    3d20:	6a 2f       	mov	r22, r26
    3d22:	11 24       	eor	r1, r1
    3d24:	9f 57       	subi	r25, 0x7F	; 127
    3d26:	50 40       	sbci	r21, 0x00	; 0
    3d28:	8a f0       	brmi	.+34     	; 0x3d4c <__mulsf3_pse+0x84>
    3d2a:	e1 f0       	breq	.+56     	; 0x3d64 <__mulsf3_pse+0x9c>
    3d2c:	88 23       	and	r24, r24
    3d2e:	4a f0       	brmi	.+18     	; 0x3d42 <__mulsf3_pse+0x7a>
    3d30:	ee 0f       	add	r30, r30
    3d32:	ff 1f       	adc	r31, r31
    3d34:	bb 1f       	adc	r27, r27
    3d36:	66 1f       	adc	r22, r22
    3d38:	77 1f       	adc	r23, r23
    3d3a:	88 1f       	adc	r24, r24
    3d3c:	91 50       	subi	r25, 0x01	; 1
    3d3e:	50 40       	sbci	r21, 0x00	; 0
    3d40:	a9 f7       	brne	.-22     	; 0x3d2c <__mulsf3_pse+0x64>
    3d42:	9e 3f       	cpi	r25, 0xFE	; 254
    3d44:	51 05       	cpc	r21, r1
    3d46:	70 f0       	brcs	.+28     	; 0x3d64 <__mulsf3_pse+0x9c>
    3d48:	60 cf       	rjmp	.-320    	; 0x3c0a <__fp_inf>
    3d4a:	aa cf       	rjmp	.-172    	; 0x3ca0 <__fp_szero>
    3d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d4e:	ec f3       	brlt	.-6      	; 0x3d4a <__mulsf3_pse+0x82>
    3d50:	98 3e       	cpi	r25, 0xE8	; 232
    3d52:	dc f3       	brlt	.-10     	; 0x3d4a <__mulsf3_pse+0x82>
    3d54:	86 95       	lsr	r24
    3d56:	77 95       	ror	r23
    3d58:	67 95       	ror	r22
    3d5a:	b7 95       	ror	r27
    3d5c:	f7 95       	ror	r31
    3d5e:	e7 95       	ror	r30
    3d60:	9f 5f       	subi	r25, 0xFF	; 255
    3d62:	c1 f7       	brne	.-16     	; 0x3d54 <__mulsf3_pse+0x8c>
    3d64:	fe 2b       	or	r31, r30
    3d66:	88 0f       	add	r24, r24
    3d68:	91 1d       	adc	r25, r1
    3d6a:	96 95       	lsr	r25
    3d6c:	87 95       	ror	r24
    3d6e:	97 f9       	bld	r25, 7
    3d70:	08 95       	ret

00003d72 <calloc>:
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	86 9f       	mul	r24, r22
    3d7c:	80 01       	movw	r16, r0
    3d7e:	87 9f       	mul	r24, r23
    3d80:	10 0d       	add	r17, r0
    3d82:	96 9f       	mul	r25, r22
    3d84:	10 0d       	add	r17, r0
    3d86:	11 24       	eor	r1, r1
    3d88:	c8 01       	movw	r24, r16
    3d8a:	0d d0       	rcall	.+26     	; 0x3da6 <malloc>
    3d8c:	ec 01       	movw	r28, r24
    3d8e:	00 97       	sbiw	r24, 0x00	; 0
    3d90:	21 f0       	breq	.+8      	; 0x3d9a <calloc+0x28>
    3d92:	a8 01       	movw	r20, r16
    3d94:	60 e0       	ldi	r22, 0x00	; 0
    3d96:	70 e0       	ldi	r23, 0x00	; 0
    3d98:	34 d1       	rcall	.+616    	; 0x4002 <memset>
    3d9a:	ce 01       	movw	r24, r28
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	08 95       	ret

00003da6 <malloc>:
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	82 30       	cpi	r24, 0x02	; 2
    3db0:	91 05       	cpc	r25, r1
    3db2:	10 f4       	brcc	.+4      	; 0x3db8 <malloc+0x12>
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	e0 91 5a 04 	lds	r30, 0x045A	; 0x80045a <__flp>
    3dbc:	f0 91 5b 04 	lds	r31, 0x045B	; 0x80045b <__flp+0x1>
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	a0 e0       	ldi	r26, 0x00	; 0
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	30 97       	sbiw	r30, 0x00	; 0
    3dca:	19 f1       	breq	.+70     	; 0x3e12 <malloc+0x6c>
    3dcc:	40 81       	ld	r20, Z
    3dce:	51 81       	ldd	r21, Z+1	; 0x01
    3dd0:	02 81       	ldd	r16, Z+2	; 0x02
    3dd2:	13 81       	ldd	r17, Z+3	; 0x03
    3dd4:	48 17       	cp	r20, r24
    3dd6:	59 07       	cpc	r21, r25
    3dd8:	c8 f0       	brcs	.+50     	; 0x3e0c <malloc+0x66>
    3dda:	84 17       	cp	r24, r20
    3ddc:	95 07       	cpc	r25, r21
    3dde:	69 f4       	brne	.+26     	; 0x3dfa <malloc+0x54>
    3de0:	10 97       	sbiw	r26, 0x00	; 0
    3de2:	31 f0       	breq	.+12     	; 0x3df0 <malloc+0x4a>
    3de4:	12 96       	adiw	r26, 0x02	; 2
    3de6:	0c 93       	st	X, r16
    3de8:	12 97       	sbiw	r26, 0x02	; 2
    3dea:	13 96       	adiw	r26, 0x03	; 3
    3dec:	1c 93       	st	X, r17
    3dee:	27 c0       	rjmp	.+78     	; 0x3e3e <malloc+0x98>
    3df0:	00 93 5a 04 	sts	0x045A, r16	; 0x80045a <__flp>
    3df4:	10 93 5b 04 	sts	0x045B, r17	; 0x80045b <__flp+0x1>
    3df8:	22 c0       	rjmp	.+68     	; 0x3e3e <malloc+0x98>
    3dfa:	21 15       	cp	r18, r1
    3dfc:	31 05       	cpc	r19, r1
    3dfe:	19 f0       	breq	.+6      	; 0x3e06 <malloc+0x60>
    3e00:	42 17       	cp	r20, r18
    3e02:	53 07       	cpc	r21, r19
    3e04:	18 f4       	brcc	.+6      	; 0x3e0c <malloc+0x66>
    3e06:	9a 01       	movw	r18, r20
    3e08:	bd 01       	movw	r22, r26
    3e0a:	ef 01       	movw	r28, r30
    3e0c:	df 01       	movw	r26, r30
    3e0e:	f8 01       	movw	r30, r16
    3e10:	db cf       	rjmp	.-74     	; 0x3dc8 <malloc+0x22>
    3e12:	21 15       	cp	r18, r1
    3e14:	31 05       	cpc	r19, r1
    3e16:	f9 f0       	breq	.+62     	; 0x3e56 <malloc+0xb0>
    3e18:	28 1b       	sub	r18, r24
    3e1a:	39 0b       	sbc	r19, r25
    3e1c:	24 30       	cpi	r18, 0x04	; 4
    3e1e:	31 05       	cpc	r19, r1
    3e20:	80 f4       	brcc	.+32     	; 0x3e42 <malloc+0x9c>
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	9b 81       	ldd	r25, Y+3	; 0x03
    3e26:	61 15       	cp	r22, r1
    3e28:	71 05       	cpc	r23, r1
    3e2a:	21 f0       	breq	.+8      	; 0x3e34 <malloc+0x8e>
    3e2c:	fb 01       	movw	r30, r22
    3e2e:	93 83       	std	Z+3, r25	; 0x03
    3e30:	82 83       	std	Z+2, r24	; 0x02
    3e32:	04 c0       	rjmp	.+8      	; 0x3e3c <malloc+0x96>
    3e34:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <__flp+0x1>
    3e38:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <__flp>
    3e3c:	fe 01       	movw	r30, r28
    3e3e:	32 96       	adiw	r30, 0x02	; 2
    3e40:	44 c0       	rjmp	.+136    	; 0x3eca <malloc+0x124>
    3e42:	fe 01       	movw	r30, r28
    3e44:	e2 0f       	add	r30, r18
    3e46:	f3 1f       	adc	r31, r19
    3e48:	81 93       	st	Z+, r24
    3e4a:	91 93       	st	Z+, r25
    3e4c:	22 50       	subi	r18, 0x02	; 2
    3e4e:	31 09       	sbc	r19, r1
    3e50:	39 83       	std	Y+1, r19	; 0x01
    3e52:	28 83       	st	Y, r18
    3e54:	3a c0       	rjmp	.+116    	; 0x3eca <malloc+0x124>
    3e56:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <__brkval>
    3e5a:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <__brkval+0x1>
    3e5e:	23 2b       	or	r18, r19
    3e60:	41 f4       	brne	.+16     	; 0x3e72 <malloc+0xcc>
    3e62:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3e66:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3e6a:	30 93 59 04 	sts	0x0459, r19	; 0x800459 <__brkval+0x1>
    3e6e:	20 93 58 04 	sts	0x0458, r18	; 0x800458 <__brkval>
    3e72:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3e76:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3e7a:	21 15       	cp	r18, r1
    3e7c:	31 05       	cpc	r19, r1
    3e7e:	41 f4       	brne	.+16     	; 0x3e90 <malloc+0xea>
    3e80:	2d b7       	in	r18, 0x3d	; 61
    3e82:	3e b7       	in	r19, 0x3e	; 62
    3e84:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3e88:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3e8c:	24 1b       	sub	r18, r20
    3e8e:	35 0b       	sbc	r19, r21
    3e90:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <__brkval>
    3e94:	f0 91 59 04 	lds	r31, 0x0459	; 0x800459 <__brkval+0x1>
    3e98:	e2 17       	cp	r30, r18
    3e9a:	f3 07       	cpc	r31, r19
    3e9c:	a0 f4       	brcc	.+40     	; 0x3ec6 <malloc+0x120>
    3e9e:	2e 1b       	sub	r18, r30
    3ea0:	3f 0b       	sbc	r19, r31
    3ea2:	28 17       	cp	r18, r24
    3ea4:	39 07       	cpc	r19, r25
    3ea6:	78 f0       	brcs	.+30     	; 0x3ec6 <malloc+0x120>
    3ea8:	ac 01       	movw	r20, r24
    3eaa:	4e 5f       	subi	r20, 0xFE	; 254
    3eac:	5f 4f       	sbci	r21, 0xFF	; 255
    3eae:	24 17       	cp	r18, r20
    3eb0:	35 07       	cpc	r19, r21
    3eb2:	48 f0       	brcs	.+18     	; 0x3ec6 <malloc+0x120>
    3eb4:	4e 0f       	add	r20, r30
    3eb6:	5f 1f       	adc	r21, r31
    3eb8:	50 93 59 04 	sts	0x0459, r21	; 0x800459 <__brkval+0x1>
    3ebc:	40 93 58 04 	sts	0x0458, r20	; 0x800458 <__brkval>
    3ec0:	81 93       	st	Z+, r24
    3ec2:	91 93       	st	Z+, r25
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <malloc+0x124>
    3ec6:	e0 e0       	ldi	r30, 0x00	; 0
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	cf 01       	movw	r24, r30
    3ecc:	df 91       	pop	r29
    3ece:	cf 91       	pop	r28
    3ed0:	1f 91       	pop	r17
    3ed2:	0f 91       	pop	r16
    3ed4:	08 95       	ret

00003ed6 <free>:
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <free+0xa>
    3ede:	81 c0       	rjmp	.+258    	; 0x3fe2 <free+0x10c>
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	32 97       	sbiw	r30, 0x02	; 2
    3ee4:	13 82       	std	Z+3, r1	; 0x03
    3ee6:	12 82       	std	Z+2, r1	; 0x02
    3ee8:	a0 91 5a 04 	lds	r26, 0x045A	; 0x80045a <__flp>
    3eec:	b0 91 5b 04 	lds	r27, 0x045B	; 0x80045b <__flp+0x1>
    3ef0:	10 97       	sbiw	r26, 0x00	; 0
    3ef2:	81 f4       	brne	.+32     	; 0x3f14 <free+0x3e>
    3ef4:	20 81       	ld	r18, Z
    3ef6:	31 81       	ldd	r19, Z+1	; 0x01
    3ef8:	82 0f       	add	r24, r18
    3efa:	93 1f       	adc	r25, r19
    3efc:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <__brkval>
    3f00:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <__brkval+0x1>
    3f04:	28 17       	cp	r18, r24
    3f06:	39 07       	cpc	r19, r25
    3f08:	51 f5       	brne	.+84     	; 0x3f5e <free+0x88>
    3f0a:	f0 93 59 04 	sts	0x0459, r31	; 0x800459 <__brkval+0x1>
    3f0e:	e0 93 58 04 	sts	0x0458, r30	; 0x800458 <__brkval>
    3f12:	67 c0       	rjmp	.+206    	; 0x3fe2 <free+0x10c>
    3f14:	ed 01       	movw	r28, r26
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	ce 17       	cp	r28, r30
    3f1c:	df 07       	cpc	r29, r31
    3f1e:	40 f4       	brcc	.+16     	; 0x3f30 <free+0x5a>
    3f20:	4a 81       	ldd	r20, Y+2	; 0x02
    3f22:	5b 81       	ldd	r21, Y+3	; 0x03
    3f24:	9e 01       	movw	r18, r28
    3f26:	41 15       	cp	r20, r1
    3f28:	51 05       	cpc	r21, r1
    3f2a:	f1 f0       	breq	.+60     	; 0x3f68 <free+0x92>
    3f2c:	ea 01       	movw	r28, r20
    3f2e:	f5 cf       	rjmp	.-22     	; 0x3f1a <free+0x44>
    3f30:	d3 83       	std	Z+3, r29	; 0x03
    3f32:	c2 83       	std	Z+2, r28	; 0x02
    3f34:	40 81       	ld	r20, Z
    3f36:	51 81       	ldd	r21, Z+1	; 0x01
    3f38:	84 0f       	add	r24, r20
    3f3a:	95 1f       	adc	r25, r21
    3f3c:	c8 17       	cp	r28, r24
    3f3e:	d9 07       	cpc	r29, r25
    3f40:	59 f4       	brne	.+22     	; 0x3f58 <free+0x82>
    3f42:	88 81       	ld	r24, Y
    3f44:	99 81       	ldd	r25, Y+1	; 0x01
    3f46:	84 0f       	add	r24, r20
    3f48:	95 1f       	adc	r25, r21
    3f4a:	02 96       	adiw	r24, 0x02	; 2
    3f4c:	91 83       	std	Z+1, r25	; 0x01
    3f4e:	80 83       	st	Z, r24
    3f50:	8a 81       	ldd	r24, Y+2	; 0x02
    3f52:	9b 81       	ldd	r25, Y+3	; 0x03
    3f54:	93 83       	std	Z+3, r25	; 0x03
    3f56:	82 83       	std	Z+2, r24	; 0x02
    3f58:	21 15       	cp	r18, r1
    3f5a:	31 05       	cpc	r19, r1
    3f5c:	29 f4       	brne	.+10     	; 0x3f68 <free+0x92>
    3f5e:	f0 93 5b 04 	sts	0x045B, r31	; 0x80045b <__flp+0x1>
    3f62:	e0 93 5a 04 	sts	0x045A, r30	; 0x80045a <__flp>
    3f66:	3d c0       	rjmp	.+122    	; 0x3fe2 <free+0x10c>
    3f68:	e9 01       	movw	r28, r18
    3f6a:	fb 83       	std	Y+3, r31	; 0x03
    3f6c:	ea 83       	std	Y+2, r30	; 0x02
    3f6e:	49 91       	ld	r20, Y+
    3f70:	59 91       	ld	r21, Y+
    3f72:	c4 0f       	add	r28, r20
    3f74:	d5 1f       	adc	r29, r21
    3f76:	ec 17       	cp	r30, r28
    3f78:	fd 07       	cpc	r31, r29
    3f7a:	61 f4       	brne	.+24     	; 0x3f94 <free+0xbe>
    3f7c:	80 81       	ld	r24, Z
    3f7e:	91 81       	ldd	r25, Z+1	; 0x01
    3f80:	84 0f       	add	r24, r20
    3f82:	95 1f       	adc	r25, r21
    3f84:	02 96       	adiw	r24, 0x02	; 2
    3f86:	e9 01       	movw	r28, r18
    3f88:	99 83       	std	Y+1, r25	; 0x01
    3f8a:	88 83       	st	Y, r24
    3f8c:	82 81       	ldd	r24, Z+2	; 0x02
    3f8e:	93 81       	ldd	r25, Z+3	; 0x03
    3f90:	9b 83       	std	Y+3, r25	; 0x03
    3f92:	8a 83       	std	Y+2, r24	; 0x02
    3f94:	e0 e0       	ldi	r30, 0x00	; 0
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	12 96       	adiw	r26, 0x02	; 2
    3f9a:	8d 91       	ld	r24, X+
    3f9c:	9c 91       	ld	r25, X
    3f9e:	13 97       	sbiw	r26, 0x03	; 3
    3fa0:	00 97       	sbiw	r24, 0x00	; 0
    3fa2:	19 f0       	breq	.+6      	; 0x3faa <free+0xd4>
    3fa4:	fd 01       	movw	r30, r26
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	f7 cf       	rjmp	.-18     	; 0x3f98 <free+0xc2>
    3faa:	8d 91       	ld	r24, X+
    3fac:	9c 91       	ld	r25, X
    3fae:	11 97       	sbiw	r26, 0x01	; 1
    3fb0:	9d 01       	movw	r18, r26
    3fb2:	2e 5f       	subi	r18, 0xFE	; 254
    3fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb6:	82 0f       	add	r24, r18
    3fb8:	93 1f       	adc	r25, r19
    3fba:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <__brkval>
    3fbe:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <__brkval+0x1>
    3fc2:	28 17       	cp	r18, r24
    3fc4:	39 07       	cpc	r19, r25
    3fc6:	69 f4       	brne	.+26     	; 0x3fe2 <free+0x10c>
    3fc8:	30 97       	sbiw	r30, 0x00	; 0
    3fca:	29 f4       	brne	.+10     	; 0x3fd6 <free+0x100>
    3fcc:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <__flp+0x1>
    3fd0:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <__flp>
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <free+0x104>
    3fd6:	13 82       	std	Z+3, r1	; 0x03
    3fd8:	12 82       	std	Z+2, r1	; 0x02
    3fda:	b0 93 59 04 	sts	0x0459, r27	; 0x800459 <__brkval+0x1>
    3fde:	a0 93 58 04 	sts	0x0458, r26	; 0x800458 <__brkval>
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	08 95       	ret

00003fe8 <abort>:
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	f8 94       	cli
    3fee:	00 c3       	rjmp	.+1536   	; 0x45f0 <_exit>

00003ff0 <memcpy>:
    3ff0:	fb 01       	movw	r30, r22
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <memcpy+0xa>
    3ff6:	01 90       	ld	r0, Z+
    3ff8:	0d 92       	st	X+, r0
    3ffa:	41 50       	subi	r20, 0x01	; 1
    3ffc:	50 40       	sbci	r21, 0x00	; 0
    3ffe:	d8 f7       	brcc	.-10     	; 0x3ff6 <memcpy+0x6>
    4000:	08 95       	ret

00004002 <memset>:
    4002:	dc 01       	movw	r26, r24
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <memset+0x6>
    4006:	6d 93       	st	X+, r22
    4008:	41 50       	subi	r20, 0x01	; 1
    400a:	50 40       	sbci	r21, 0x00	; 0
    400c:	e0 f7       	brcc	.-8      	; 0x4006 <memset+0x4>
    400e:	08 95       	ret

00004010 <printf>:
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	ae 01       	movw	r20, r28
    401a:	4a 5f       	subi	r20, 0xFA	; 250
    401c:	5f 4f       	sbci	r21, 0xFF	; 255
    401e:	fa 01       	movw	r30, r20
    4020:	61 91       	ld	r22, Z+
    4022:	71 91       	ld	r23, Z+
    4024:	af 01       	movw	r20, r30
    4026:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <__iob+0x2>
    402a:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <__iob+0x3>
    402e:	33 d0       	rcall	.+102    	; 0x4096 <vfprintf>
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	08 95       	ret

00004036 <puts>:
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <__iob+0x2>
    4042:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <__iob+0x3>
    4046:	23 81       	ldd	r18, Z+3	; 0x03
    4048:	21 ff       	sbrs	r18, 1
    404a:	1b c0       	rjmp	.+54     	; 0x4082 <puts+0x4c>
    404c:	8c 01       	movw	r16, r24
    404e:	d0 e0       	ldi	r29, 0x00	; 0
    4050:	c0 e0       	ldi	r28, 0x00	; 0
    4052:	f8 01       	movw	r30, r16
    4054:	81 91       	ld	r24, Z+
    4056:	8f 01       	movw	r16, r30
    4058:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <__iob+0x2>
    405c:	70 91 5f 04 	lds	r23, 0x045F	; 0x80045f <__iob+0x3>
    4060:	db 01       	movw	r26, r22
    4062:	18 96       	adiw	r26, 0x08	; 8
    4064:	ed 91       	ld	r30, X+
    4066:	fc 91       	ld	r31, X
    4068:	19 97       	sbiw	r26, 0x09	; 9
    406a:	88 23       	and	r24, r24
    406c:	31 f0       	breq	.+12     	; 0x407a <puts+0x44>
    406e:	19 95       	eicall
    4070:	89 2b       	or	r24, r25
    4072:	79 f3       	breq	.-34     	; 0x4052 <puts+0x1c>
    4074:	df ef       	ldi	r29, 0xFF	; 255
    4076:	cf ef       	ldi	r28, 0xFF	; 255
    4078:	ec cf       	rjmp	.-40     	; 0x4052 <puts+0x1c>
    407a:	8a e0       	ldi	r24, 0x0A	; 10
    407c:	19 95       	eicall
    407e:	89 2b       	or	r24, r25
    4080:	19 f0       	breq	.+6      	; 0x4088 <puts+0x52>
    4082:	8f ef       	ldi	r24, 0xFF	; 255
    4084:	9f ef       	ldi	r25, 0xFF	; 255
    4086:	02 c0       	rjmp	.+4      	; 0x408c <puts+0x56>
    4088:	8d 2f       	mov	r24, r29
    408a:	9c 2f       	mov	r25, r28
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	1f 91       	pop	r17
    4092:	0f 91       	pop	r16
    4094:	08 95       	ret

00004096 <vfprintf>:
    4096:	2f 92       	push	r2
    4098:	3f 92       	push	r3
    409a:	4f 92       	push	r4
    409c:	5f 92       	push	r5
    409e:	6f 92       	push	r6
    40a0:	7f 92       	push	r7
    40a2:	8f 92       	push	r8
    40a4:	9f 92       	push	r9
    40a6:	af 92       	push	r10
    40a8:	bf 92       	push	r11
    40aa:	cf 92       	push	r12
    40ac:	df 92       	push	r13
    40ae:	ef 92       	push	r14
    40b0:	ff 92       	push	r15
    40b2:	0f 93       	push	r16
    40b4:	1f 93       	push	r17
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	2b 97       	sbiw	r28, 0x0b	; 11
    40c0:	0f b6       	in	r0, 0x3f	; 63
    40c2:	f8 94       	cli
    40c4:	de bf       	out	0x3e, r29	; 62
    40c6:	0f be       	out	0x3f, r0	; 63
    40c8:	cd bf       	out	0x3d, r28	; 61
    40ca:	6c 01       	movw	r12, r24
    40cc:	7b 01       	movw	r14, r22
    40ce:	8a 01       	movw	r16, r20
    40d0:	fc 01       	movw	r30, r24
    40d2:	17 82       	std	Z+7, r1	; 0x07
    40d4:	16 82       	std	Z+6, r1	; 0x06
    40d6:	83 81       	ldd	r24, Z+3	; 0x03
    40d8:	81 ff       	sbrs	r24, 1
    40da:	bf c1       	rjmp	.+894    	; 0x445a <vfprintf+0x3c4>
    40dc:	ce 01       	movw	r24, r28
    40de:	01 96       	adiw	r24, 0x01	; 1
    40e0:	3c 01       	movw	r6, r24
    40e2:	f6 01       	movw	r30, r12
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	f7 01       	movw	r30, r14
    40e8:	93 fd       	sbrc	r25, 3
    40ea:	85 91       	lpm	r24, Z+
    40ec:	93 ff       	sbrs	r25, 3
    40ee:	81 91       	ld	r24, Z+
    40f0:	7f 01       	movw	r14, r30
    40f2:	88 23       	and	r24, r24
    40f4:	09 f4       	brne	.+2      	; 0x40f8 <vfprintf+0x62>
    40f6:	ad c1       	rjmp	.+858    	; 0x4452 <vfprintf+0x3bc>
    40f8:	85 32       	cpi	r24, 0x25	; 37
    40fa:	39 f4       	brne	.+14     	; 0x410a <vfprintf+0x74>
    40fc:	93 fd       	sbrc	r25, 3
    40fe:	85 91       	lpm	r24, Z+
    4100:	93 ff       	sbrs	r25, 3
    4102:	81 91       	ld	r24, Z+
    4104:	7f 01       	movw	r14, r30
    4106:	85 32       	cpi	r24, 0x25	; 37
    4108:	21 f4       	brne	.+8      	; 0x4112 <vfprintf+0x7c>
    410a:	b6 01       	movw	r22, r12
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	d6 d1       	rcall	.+940    	; 0x44bc <fputc>
    4110:	e8 cf       	rjmp	.-48     	; 0x40e2 <vfprintf+0x4c>
    4112:	91 2c       	mov	r9, r1
    4114:	21 2c       	mov	r2, r1
    4116:	31 2c       	mov	r3, r1
    4118:	ff e1       	ldi	r31, 0x1F	; 31
    411a:	f3 15       	cp	r31, r3
    411c:	d8 f0       	brcs	.+54     	; 0x4154 <vfprintf+0xbe>
    411e:	8b 32       	cpi	r24, 0x2B	; 43
    4120:	79 f0       	breq	.+30     	; 0x4140 <vfprintf+0xaa>
    4122:	38 f4       	brcc	.+14     	; 0x4132 <vfprintf+0x9c>
    4124:	80 32       	cpi	r24, 0x20	; 32
    4126:	79 f0       	breq	.+30     	; 0x4146 <vfprintf+0xb0>
    4128:	83 32       	cpi	r24, 0x23	; 35
    412a:	a1 f4       	brne	.+40     	; 0x4154 <vfprintf+0xbe>
    412c:	23 2d       	mov	r18, r3
    412e:	20 61       	ori	r18, 0x10	; 16
    4130:	1d c0       	rjmp	.+58     	; 0x416c <vfprintf+0xd6>
    4132:	8d 32       	cpi	r24, 0x2D	; 45
    4134:	61 f0       	breq	.+24     	; 0x414e <vfprintf+0xb8>
    4136:	80 33       	cpi	r24, 0x30	; 48
    4138:	69 f4       	brne	.+26     	; 0x4154 <vfprintf+0xbe>
    413a:	23 2d       	mov	r18, r3
    413c:	21 60       	ori	r18, 0x01	; 1
    413e:	16 c0       	rjmp	.+44     	; 0x416c <vfprintf+0xd6>
    4140:	83 2d       	mov	r24, r3
    4142:	82 60       	ori	r24, 0x02	; 2
    4144:	38 2e       	mov	r3, r24
    4146:	e3 2d       	mov	r30, r3
    4148:	e4 60       	ori	r30, 0x04	; 4
    414a:	3e 2e       	mov	r3, r30
    414c:	2a c0       	rjmp	.+84     	; 0x41a2 <vfprintf+0x10c>
    414e:	f3 2d       	mov	r31, r3
    4150:	f8 60       	ori	r31, 0x08	; 8
    4152:	1d c0       	rjmp	.+58     	; 0x418e <vfprintf+0xf8>
    4154:	37 fc       	sbrc	r3, 7
    4156:	2d c0       	rjmp	.+90     	; 0x41b2 <vfprintf+0x11c>
    4158:	20 ed       	ldi	r18, 0xD0	; 208
    415a:	28 0f       	add	r18, r24
    415c:	2a 30       	cpi	r18, 0x0A	; 10
    415e:	40 f0       	brcs	.+16     	; 0x4170 <vfprintf+0xda>
    4160:	8e 32       	cpi	r24, 0x2E	; 46
    4162:	b9 f4       	brne	.+46     	; 0x4192 <vfprintf+0xfc>
    4164:	36 fc       	sbrc	r3, 6
    4166:	75 c1       	rjmp	.+746    	; 0x4452 <vfprintf+0x3bc>
    4168:	23 2d       	mov	r18, r3
    416a:	20 64       	ori	r18, 0x40	; 64
    416c:	32 2e       	mov	r3, r18
    416e:	19 c0       	rjmp	.+50     	; 0x41a2 <vfprintf+0x10c>
    4170:	36 fe       	sbrs	r3, 6
    4172:	06 c0       	rjmp	.+12     	; 0x4180 <vfprintf+0xea>
    4174:	8a e0       	ldi	r24, 0x0A	; 10
    4176:	98 9e       	mul	r9, r24
    4178:	20 0d       	add	r18, r0
    417a:	11 24       	eor	r1, r1
    417c:	92 2e       	mov	r9, r18
    417e:	11 c0       	rjmp	.+34     	; 0x41a2 <vfprintf+0x10c>
    4180:	ea e0       	ldi	r30, 0x0A	; 10
    4182:	2e 9e       	mul	r2, r30
    4184:	20 0d       	add	r18, r0
    4186:	11 24       	eor	r1, r1
    4188:	22 2e       	mov	r2, r18
    418a:	f3 2d       	mov	r31, r3
    418c:	f0 62       	ori	r31, 0x20	; 32
    418e:	3f 2e       	mov	r3, r31
    4190:	08 c0       	rjmp	.+16     	; 0x41a2 <vfprintf+0x10c>
    4192:	8c 36       	cpi	r24, 0x6C	; 108
    4194:	21 f4       	brne	.+8      	; 0x419e <vfprintf+0x108>
    4196:	83 2d       	mov	r24, r3
    4198:	80 68       	ori	r24, 0x80	; 128
    419a:	38 2e       	mov	r3, r24
    419c:	02 c0       	rjmp	.+4      	; 0x41a2 <vfprintf+0x10c>
    419e:	88 36       	cpi	r24, 0x68	; 104
    41a0:	41 f4       	brne	.+16     	; 0x41b2 <vfprintf+0x11c>
    41a2:	f7 01       	movw	r30, r14
    41a4:	93 fd       	sbrc	r25, 3
    41a6:	85 91       	lpm	r24, Z+
    41a8:	93 ff       	sbrs	r25, 3
    41aa:	81 91       	ld	r24, Z+
    41ac:	7f 01       	movw	r14, r30
    41ae:	81 11       	cpse	r24, r1
    41b0:	b3 cf       	rjmp	.-154    	; 0x4118 <vfprintf+0x82>
    41b2:	98 2f       	mov	r25, r24
    41b4:	9f 7d       	andi	r25, 0xDF	; 223
    41b6:	95 54       	subi	r25, 0x45	; 69
    41b8:	93 30       	cpi	r25, 0x03	; 3
    41ba:	28 f4       	brcc	.+10     	; 0x41c6 <vfprintf+0x130>
    41bc:	0c 5f       	subi	r16, 0xFC	; 252
    41be:	1f 4f       	sbci	r17, 0xFF	; 255
    41c0:	9f e3       	ldi	r25, 0x3F	; 63
    41c2:	99 83       	std	Y+1, r25	; 0x01
    41c4:	0d c0       	rjmp	.+26     	; 0x41e0 <vfprintf+0x14a>
    41c6:	83 36       	cpi	r24, 0x63	; 99
    41c8:	31 f0       	breq	.+12     	; 0x41d6 <vfprintf+0x140>
    41ca:	83 37       	cpi	r24, 0x73	; 115
    41cc:	71 f0       	breq	.+28     	; 0x41ea <vfprintf+0x154>
    41ce:	83 35       	cpi	r24, 0x53	; 83
    41d0:	09 f0       	breq	.+2      	; 0x41d4 <vfprintf+0x13e>
    41d2:	55 c0       	rjmp	.+170    	; 0x427e <vfprintf+0x1e8>
    41d4:	20 c0       	rjmp	.+64     	; 0x4216 <vfprintf+0x180>
    41d6:	f8 01       	movw	r30, r16
    41d8:	80 81       	ld	r24, Z
    41da:	89 83       	std	Y+1, r24	; 0x01
    41dc:	0e 5f       	subi	r16, 0xFE	; 254
    41de:	1f 4f       	sbci	r17, 0xFF	; 255
    41e0:	88 24       	eor	r8, r8
    41e2:	83 94       	inc	r8
    41e4:	91 2c       	mov	r9, r1
    41e6:	53 01       	movw	r10, r6
    41e8:	12 c0       	rjmp	.+36     	; 0x420e <vfprintf+0x178>
    41ea:	28 01       	movw	r4, r16
    41ec:	f2 e0       	ldi	r31, 0x02	; 2
    41ee:	4f 0e       	add	r4, r31
    41f0:	51 1c       	adc	r5, r1
    41f2:	f8 01       	movw	r30, r16
    41f4:	a0 80       	ld	r10, Z
    41f6:	b1 80       	ldd	r11, Z+1	; 0x01
    41f8:	36 fe       	sbrs	r3, 6
    41fa:	03 c0       	rjmp	.+6      	; 0x4202 <vfprintf+0x16c>
    41fc:	69 2d       	mov	r22, r9
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <vfprintf+0x170>
    4202:	6f ef       	ldi	r22, 0xFF	; 255
    4204:	7f ef       	ldi	r23, 0xFF	; 255
    4206:	c5 01       	movw	r24, r10
    4208:	4e d1       	rcall	.+668    	; 0x44a6 <strnlen>
    420a:	4c 01       	movw	r8, r24
    420c:	82 01       	movw	r16, r4
    420e:	f3 2d       	mov	r31, r3
    4210:	ff 77       	andi	r31, 0x7F	; 127
    4212:	3f 2e       	mov	r3, r31
    4214:	15 c0       	rjmp	.+42     	; 0x4240 <vfprintf+0x1aa>
    4216:	28 01       	movw	r4, r16
    4218:	22 e0       	ldi	r18, 0x02	; 2
    421a:	42 0e       	add	r4, r18
    421c:	51 1c       	adc	r5, r1
    421e:	f8 01       	movw	r30, r16
    4220:	a0 80       	ld	r10, Z
    4222:	b1 80       	ldd	r11, Z+1	; 0x01
    4224:	36 fe       	sbrs	r3, 6
    4226:	03 c0       	rjmp	.+6      	; 0x422e <vfprintf+0x198>
    4228:	69 2d       	mov	r22, r9
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	02 c0       	rjmp	.+4      	; 0x4232 <vfprintf+0x19c>
    422e:	6f ef       	ldi	r22, 0xFF	; 255
    4230:	7f ef       	ldi	r23, 0xFF	; 255
    4232:	c5 01       	movw	r24, r10
    4234:	2d d1       	rcall	.+602    	; 0x4490 <strnlen_P>
    4236:	4c 01       	movw	r8, r24
    4238:	f3 2d       	mov	r31, r3
    423a:	f0 68       	ori	r31, 0x80	; 128
    423c:	3f 2e       	mov	r3, r31
    423e:	82 01       	movw	r16, r4
    4240:	33 fc       	sbrc	r3, 3
    4242:	19 c0       	rjmp	.+50     	; 0x4276 <vfprintf+0x1e0>
    4244:	82 2d       	mov	r24, r2
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	88 16       	cp	r8, r24
    424a:	99 06       	cpc	r9, r25
    424c:	a0 f4       	brcc	.+40     	; 0x4276 <vfprintf+0x1e0>
    424e:	b6 01       	movw	r22, r12
    4250:	80 e2       	ldi	r24, 0x20	; 32
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	33 d1       	rcall	.+614    	; 0x44bc <fputc>
    4256:	2a 94       	dec	r2
    4258:	f5 cf       	rjmp	.-22     	; 0x4244 <vfprintf+0x1ae>
    425a:	f5 01       	movw	r30, r10
    425c:	37 fc       	sbrc	r3, 7
    425e:	85 91       	lpm	r24, Z+
    4260:	37 fe       	sbrs	r3, 7
    4262:	81 91       	ld	r24, Z+
    4264:	5f 01       	movw	r10, r30
    4266:	b6 01       	movw	r22, r12
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	28 d1       	rcall	.+592    	; 0x44bc <fputc>
    426c:	21 10       	cpse	r2, r1
    426e:	2a 94       	dec	r2
    4270:	21 e0       	ldi	r18, 0x01	; 1
    4272:	82 1a       	sub	r8, r18
    4274:	91 08       	sbc	r9, r1
    4276:	81 14       	cp	r8, r1
    4278:	91 04       	cpc	r9, r1
    427a:	79 f7       	brne	.-34     	; 0x425a <vfprintf+0x1c4>
    427c:	e1 c0       	rjmp	.+450    	; 0x4440 <vfprintf+0x3aa>
    427e:	84 36       	cpi	r24, 0x64	; 100
    4280:	11 f0       	breq	.+4      	; 0x4286 <vfprintf+0x1f0>
    4282:	89 36       	cpi	r24, 0x69	; 105
    4284:	39 f5       	brne	.+78     	; 0x42d4 <vfprintf+0x23e>
    4286:	f8 01       	movw	r30, r16
    4288:	37 fe       	sbrs	r3, 7
    428a:	07 c0       	rjmp	.+14     	; 0x429a <vfprintf+0x204>
    428c:	60 81       	ld	r22, Z
    428e:	71 81       	ldd	r23, Z+1	; 0x01
    4290:	82 81       	ldd	r24, Z+2	; 0x02
    4292:	93 81       	ldd	r25, Z+3	; 0x03
    4294:	0c 5f       	subi	r16, 0xFC	; 252
    4296:	1f 4f       	sbci	r17, 0xFF	; 255
    4298:	08 c0       	rjmp	.+16     	; 0x42aa <vfprintf+0x214>
    429a:	60 81       	ld	r22, Z
    429c:	71 81       	ldd	r23, Z+1	; 0x01
    429e:	07 2e       	mov	r0, r23
    42a0:	00 0c       	add	r0, r0
    42a2:	88 0b       	sbc	r24, r24
    42a4:	99 0b       	sbc	r25, r25
    42a6:	0e 5f       	subi	r16, 0xFE	; 254
    42a8:	1f 4f       	sbci	r17, 0xFF	; 255
    42aa:	f3 2d       	mov	r31, r3
    42ac:	ff 76       	andi	r31, 0x6F	; 111
    42ae:	3f 2e       	mov	r3, r31
    42b0:	97 ff       	sbrs	r25, 7
    42b2:	09 c0       	rjmp	.+18     	; 0x42c6 <vfprintf+0x230>
    42b4:	90 95       	com	r25
    42b6:	80 95       	com	r24
    42b8:	70 95       	com	r23
    42ba:	61 95       	neg	r22
    42bc:	7f 4f       	sbci	r23, 0xFF	; 255
    42be:	8f 4f       	sbci	r24, 0xFF	; 255
    42c0:	9f 4f       	sbci	r25, 0xFF	; 255
    42c2:	f0 68       	ori	r31, 0x80	; 128
    42c4:	3f 2e       	mov	r3, r31
    42c6:	2a e0       	ldi	r18, 0x0A	; 10
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	a3 01       	movw	r20, r6
    42cc:	33 d1       	rcall	.+614    	; 0x4534 <__ultoa_invert>
    42ce:	88 2e       	mov	r8, r24
    42d0:	86 18       	sub	r8, r6
    42d2:	44 c0       	rjmp	.+136    	; 0x435c <vfprintf+0x2c6>
    42d4:	85 37       	cpi	r24, 0x75	; 117
    42d6:	31 f4       	brne	.+12     	; 0x42e4 <vfprintf+0x24e>
    42d8:	23 2d       	mov	r18, r3
    42da:	2f 7e       	andi	r18, 0xEF	; 239
    42dc:	b2 2e       	mov	r11, r18
    42de:	2a e0       	ldi	r18, 0x0A	; 10
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	25 c0       	rjmp	.+74     	; 0x432e <vfprintf+0x298>
    42e4:	93 2d       	mov	r25, r3
    42e6:	99 7f       	andi	r25, 0xF9	; 249
    42e8:	b9 2e       	mov	r11, r25
    42ea:	8f 36       	cpi	r24, 0x6F	; 111
    42ec:	c1 f0       	breq	.+48     	; 0x431e <vfprintf+0x288>
    42ee:	18 f4       	brcc	.+6      	; 0x42f6 <vfprintf+0x260>
    42f0:	88 35       	cpi	r24, 0x58	; 88
    42f2:	79 f0       	breq	.+30     	; 0x4312 <vfprintf+0x27c>
    42f4:	ae c0       	rjmp	.+348    	; 0x4452 <vfprintf+0x3bc>
    42f6:	80 37       	cpi	r24, 0x70	; 112
    42f8:	19 f0       	breq	.+6      	; 0x4300 <vfprintf+0x26a>
    42fa:	88 37       	cpi	r24, 0x78	; 120
    42fc:	21 f0       	breq	.+8      	; 0x4306 <vfprintf+0x270>
    42fe:	a9 c0       	rjmp	.+338    	; 0x4452 <vfprintf+0x3bc>
    4300:	e9 2f       	mov	r30, r25
    4302:	e0 61       	ori	r30, 0x10	; 16
    4304:	be 2e       	mov	r11, r30
    4306:	b4 fe       	sbrs	r11, 4
    4308:	0d c0       	rjmp	.+26     	; 0x4324 <vfprintf+0x28e>
    430a:	fb 2d       	mov	r31, r11
    430c:	f4 60       	ori	r31, 0x04	; 4
    430e:	bf 2e       	mov	r11, r31
    4310:	09 c0       	rjmp	.+18     	; 0x4324 <vfprintf+0x28e>
    4312:	34 fe       	sbrs	r3, 4
    4314:	0a c0       	rjmp	.+20     	; 0x432a <vfprintf+0x294>
    4316:	29 2f       	mov	r18, r25
    4318:	26 60       	ori	r18, 0x06	; 6
    431a:	b2 2e       	mov	r11, r18
    431c:	06 c0       	rjmp	.+12     	; 0x432a <vfprintf+0x294>
    431e:	28 e0       	ldi	r18, 0x08	; 8
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	05 c0       	rjmp	.+10     	; 0x432e <vfprintf+0x298>
    4324:	20 e1       	ldi	r18, 0x10	; 16
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	02 c0       	rjmp	.+4      	; 0x432e <vfprintf+0x298>
    432a:	20 e1       	ldi	r18, 0x10	; 16
    432c:	32 e0       	ldi	r19, 0x02	; 2
    432e:	f8 01       	movw	r30, r16
    4330:	b7 fe       	sbrs	r11, 7
    4332:	07 c0       	rjmp	.+14     	; 0x4342 <vfprintf+0x2ac>
    4334:	60 81       	ld	r22, Z
    4336:	71 81       	ldd	r23, Z+1	; 0x01
    4338:	82 81       	ldd	r24, Z+2	; 0x02
    433a:	93 81       	ldd	r25, Z+3	; 0x03
    433c:	0c 5f       	subi	r16, 0xFC	; 252
    433e:	1f 4f       	sbci	r17, 0xFF	; 255
    4340:	06 c0       	rjmp	.+12     	; 0x434e <vfprintf+0x2b8>
    4342:	60 81       	ld	r22, Z
    4344:	71 81       	ldd	r23, Z+1	; 0x01
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	0e 5f       	subi	r16, 0xFE	; 254
    434c:	1f 4f       	sbci	r17, 0xFF	; 255
    434e:	a3 01       	movw	r20, r6
    4350:	f1 d0       	rcall	.+482    	; 0x4534 <__ultoa_invert>
    4352:	88 2e       	mov	r8, r24
    4354:	86 18       	sub	r8, r6
    4356:	fb 2d       	mov	r31, r11
    4358:	ff 77       	andi	r31, 0x7F	; 127
    435a:	3f 2e       	mov	r3, r31
    435c:	36 fe       	sbrs	r3, 6
    435e:	0d c0       	rjmp	.+26     	; 0x437a <vfprintf+0x2e4>
    4360:	23 2d       	mov	r18, r3
    4362:	2e 7f       	andi	r18, 0xFE	; 254
    4364:	a2 2e       	mov	r10, r18
    4366:	89 14       	cp	r8, r9
    4368:	58 f4       	brcc	.+22     	; 0x4380 <vfprintf+0x2ea>
    436a:	34 fe       	sbrs	r3, 4
    436c:	0b c0       	rjmp	.+22     	; 0x4384 <vfprintf+0x2ee>
    436e:	32 fc       	sbrc	r3, 2
    4370:	09 c0       	rjmp	.+18     	; 0x4384 <vfprintf+0x2ee>
    4372:	83 2d       	mov	r24, r3
    4374:	8e 7e       	andi	r24, 0xEE	; 238
    4376:	a8 2e       	mov	r10, r24
    4378:	05 c0       	rjmp	.+10     	; 0x4384 <vfprintf+0x2ee>
    437a:	b8 2c       	mov	r11, r8
    437c:	a3 2c       	mov	r10, r3
    437e:	03 c0       	rjmp	.+6      	; 0x4386 <vfprintf+0x2f0>
    4380:	b8 2c       	mov	r11, r8
    4382:	01 c0       	rjmp	.+2      	; 0x4386 <vfprintf+0x2f0>
    4384:	b9 2c       	mov	r11, r9
    4386:	a4 fe       	sbrs	r10, 4
    4388:	0f c0       	rjmp	.+30     	; 0x43a8 <vfprintf+0x312>
    438a:	fe 01       	movw	r30, r28
    438c:	e8 0d       	add	r30, r8
    438e:	f1 1d       	adc	r31, r1
    4390:	80 81       	ld	r24, Z
    4392:	80 33       	cpi	r24, 0x30	; 48
    4394:	21 f4       	brne	.+8      	; 0x439e <vfprintf+0x308>
    4396:	9a 2d       	mov	r25, r10
    4398:	99 7e       	andi	r25, 0xE9	; 233
    439a:	a9 2e       	mov	r10, r25
    439c:	09 c0       	rjmp	.+18     	; 0x43b0 <vfprintf+0x31a>
    439e:	a2 fe       	sbrs	r10, 2
    43a0:	06 c0       	rjmp	.+12     	; 0x43ae <vfprintf+0x318>
    43a2:	b3 94       	inc	r11
    43a4:	b3 94       	inc	r11
    43a6:	04 c0       	rjmp	.+8      	; 0x43b0 <vfprintf+0x31a>
    43a8:	8a 2d       	mov	r24, r10
    43aa:	86 78       	andi	r24, 0x86	; 134
    43ac:	09 f0       	breq	.+2      	; 0x43b0 <vfprintf+0x31a>
    43ae:	b3 94       	inc	r11
    43b0:	a3 fc       	sbrc	r10, 3
    43b2:	10 c0       	rjmp	.+32     	; 0x43d4 <vfprintf+0x33e>
    43b4:	a0 fe       	sbrs	r10, 0
    43b6:	06 c0       	rjmp	.+12     	; 0x43c4 <vfprintf+0x32e>
    43b8:	b2 14       	cp	r11, r2
    43ba:	80 f4       	brcc	.+32     	; 0x43dc <vfprintf+0x346>
    43bc:	28 0c       	add	r2, r8
    43be:	92 2c       	mov	r9, r2
    43c0:	9b 18       	sub	r9, r11
    43c2:	0d c0       	rjmp	.+26     	; 0x43de <vfprintf+0x348>
    43c4:	b2 14       	cp	r11, r2
    43c6:	58 f4       	brcc	.+22     	; 0x43de <vfprintf+0x348>
    43c8:	b6 01       	movw	r22, r12
    43ca:	80 e2       	ldi	r24, 0x20	; 32
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	76 d0       	rcall	.+236    	; 0x44bc <fputc>
    43d0:	b3 94       	inc	r11
    43d2:	f8 cf       	rjmp	.-16     	; 0x43c4 <vfprintf+0x32e>
    43d4:	b2 14       	cp	r11, r2
    43d6:	18 f4       	brcc	.+6      	; 0x43de <vfprintf+0x348>
    43d8:	2b 18       	sub	r2, r11
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <vfprintf+0x34a>
    43dc:	98 2c       	mov	r9, r8
    43de:	21 2c       	mov	r2, r1
    43e0:	a4 fe       	sbrs	r10, 4
    43e2:	0f c0       	rjmp	.+30     	; 0x4402 <vfprintf+0x36c>
    43e4:	b6 01       	movw	r22, r12
    43e6:	80 e3       	ldi	r24, 0x30	; 48
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	68 d0       	rcall	.+208    	; 0x44bc <fputc>
    43ec:	a2 fe       	sbrs	r10, 2
    43ee:	16 c0       	rjmp	.+44     	; 0x441c <vfprintf+0x386>
    43f0:	a1 fc       	sbrc	r10, 1
    43f2:	03 c0       	rjmp	.+6      	; 0x43fa <vfprintf+0x364>
    43f4:	88 e7       	ldi	r24, 0x78	; 120
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <vfprintf+0x368>
    43fa:	88 e5       	ldi	r24, 0x58	; 88
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	b6 01       	movw	r22, r12
    4400:	0c c0       	rjmp	.+24     	; 0x441a <vfprintf+0x384>
    4402:	8a 2d       	mov	r24, r10
    4404:	86 78       	andi	r24, 0x86	; 134
    4406:	51 f0       	breq	.+20     	; 0x441c <vfprintf+0x386>
    4408:	a1 fe       	sbrs	r10, 1
    440a:	02 c0       	rjmp	.+4      	; 0x4410 <vfprintf+0x37a>
    440c:	8b e2       	ldi	r24, 0x2B	; 43
    440e:	01 c0       	rjmp	.+2      	; 0x4412 <vfprintf+0x37c>
    4410:	80 e2       	ldi	r24, 0x20	; 32
    4412:	a7 fc       	sbrc	r10, 7
    4414:	8d e2       	ldi	r24, 0x2D	; 45
    4416:	b6 01       	movw	r22, r12
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	50 d0       	rcall	.+160    	; 0x44bc <fputc>
    441c:	89 14       	cp	r8, r9
    441e:	30 f4       	brcc	.+12     	; 0x442c <vfprintf+0x396>
    4420:	b6 01       	movw	r22, r12
    4422:	80 e3       	ldi	r24, 0x30	; 48
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	4a d0       	rcall	.+148    	; 0x44bc <fputc>
    4428:	9a 94       	dec	r9
    442a:	f8 cf       	rjmp	.-16     	; 0x441c <vfprintf+0x386>
    442c:	8a 94       	dec	r8
    442e:	f3 01       	movw	r30, r6
    4430:	e8 0d       	add	r30, r8
    4432:	f1 1d       	adc	r31, r1
    4434:	80 81       	ld	r24, Z
    4436:	b6 01       	movw	r22, r12
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	40 d0       	rcall	.+128    	; 0x44bc <fputc>
    443c:	81 10       	cpse	r8, r1
    443e:	f6 cf       	rjmp	.-20     	; 0x442c <vfprintf+0x396>
    4440:	22 20       	and	r2, r2
    4442:	09 f4       	brne	.+2      	; 0x4446 <vfprintf+0x3b0>
    4444:	4e ce       	rjmp	.-868    	; 0x40e2 <vfprintf+0x4c>
    4446:	b6 01       	movw	r22, r12
    4448:	80 e2       	ldi	r24, 0x20	; 32
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	37 d0       	rcall	.+110    	; 0x44bc <fputc>
    444e:	2a 94       	dec	r2
    4450:	f7 cf       	rjmp	.-18     	; 0x4440 <vfprintf+0x3aa>
    4452:	f6 01       	movw	r30, r12
    4454:	86 81       	ldd	r24, Z+6	; 0x06
    4456:	97 81       	ldd	r25, Z+7	; 0x07
    4458:	02 c0       	rjmp	.+4      	; 0x445e <vfprintf+0x3c8>
    445a:	8f ef       	ldi	r24, 0xFF	; 255
    445c:	9f ef       	ldi	r25, 0xFF	; 255
    445e:	2b 96       	adiw	r28, 0x0b	; 11
    4460:	0f b6       	in	r0, 0x3f	; 63
    4462:	f8 94       	cli
    4464:	de bf       	out	0x3e, r29	; 62
    4466:	0f be       	out	0x3f, r0	; 63
    4468:	cd bf       	out	0x3d, r28	; 61
    446a:	df 91       	pop	r29
    446c:	cf 91       	pop	r28
    446e:	1f 91       	pop	r17
    4470:	0f 91       	pop	r16
    4472:	ff 90       	pop	r15
    4474:	ef 90       	pop	r14
    4476:	df 90       	pop	r13
    4478:	cf 90       	pop	r12
    447a:	bf 90       	pop	r11
    447c:	af 90       	pop	r10
    447e:	9f 90       	pop	r9
    4480:	8f 90       	pop	r8
    4482:	7f 90       	pop	r7
    4484:	6f 90       	pop	r6
    4486:	5f 90       	pop	r5
    4488:	4f 90       	pop	r4
    448a:	3f 90       	pop	r3
    448c:	2f 90       	pop	r2
    448e:	08 95       	ret

00004490 <strnlen_P>:
    4490:	fc 01       	movw	r30, r24
    4492:	05 90       	lpm	r0, Z+
    4494:	61 50       	subi	r22, 0x01	; 1
    4496:	70 40       	sbci	r23, 0x00	; 0
    4498:	01 10       	cpse	r0, r1
    449a:	d8 f7       	brcc	.-10     	; 0x4492 <strnlen_P+0x2>
    449c:	80 95       	com	r24
    449e:	90 95       	com	r25
    44a0:	8e 0f       	add	r24, r30
    44a2:	9f 1f       	adc	r25, r31
    44a4:	08 95       	ret

000044a6 <strnlen>:
    44a6:	fc 01       	movw	r30, r24
    44a8:	61 50       	subi	r22, 0x01	; 1
    44aa:	70 40       	sbci	r23, 0x00	; 0
    44ac:	01 90       	ld	r0, Z+
    44ae:	01 10       	cpse	r0, r1
    44b0:	d8 f7       	brcc	.-10     	; 0x44a8 <strnlen+0x2>
    44b2:	80 95       	com	r24
    44b4:	90 95       	com	r25
    44b6:	8e 0f       	add	r24, r30
    44b8:	9f 1f       	adc	r25, r31
    44ba:	08 95       	ret

000044bc <fputc>:
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	fb 01       	movw	r30, r22
    44c6:	23 81       	ldd	r18, Z+3	; 0x03
    44c8:	21 fd       	sbrc	r18, 1
    44ca:	03 c0       	rjmp	.+6      	; 0x44d2 <fputc+0x16>
    44cc:	8f ef       	ldi	r24, 0xFF	; 255
    44ce:	9f ef       	ldi	r25, 0xFF	; 255
    44d0:	2c c0       	rjmp	.+88     	; 0x452a <fputc+0x6e>
    44d2:	22 ff       	sbrs	r18, 2
    44d4:	16 c0       	rjmp	.+44     	; 0x4502 <fputc+0x46>
    44d6:	46 81       	ldd	r20, Z+6	; 0x06
    44d8:	57 81       	ldd	r21, Z+7	; 0x07
    44da:	24 81       	ldd	r18, Z+4	; 0x04
    44dc:	35 81       	ldd	r19, Z+5	; 0x05
    44de:	42 17       	cp	r20, r18
    44e0:	53 07       	cpc	r21, r19
    44e2:	44 f4       	brge	.+16     	; 0x44f4 <fputc+0x38>
    44e4:	a0 81       	ld	r26, Z
    44e6:	b1 81       	ldd	r27, Z+1	; 0x01
    44e8:	9d 01       	movw	r18, r26
    44ea:	2f 5f       	subi	r18, 0xFF	; 255
    44ec:	3f 4f       	sbci	r19, 0xFF	; 255
    44ee:	31 83       	std	Z+1, r19	; 0x01
    44f0:	20 83       	st	Z, r18
    44f2:	8c 93       	st	X, r24
    44f4:	26 81       	ldd	r18, Z+6	; 0x06
    44f6:	37 81       	ldd	r19, Z+7	; 0x07
    44f8:	2f 5f       	subi	r18, 0xFF	; 255
    44fa:	3f 4f       	sbci	r19, 0xFF	; 255
    44fc:	37 83       	std	Z+7, r19	; 0x07
    44fe:	26 83       	std	Z+6, r18	; 0x06
    4500:	14 c0       	rjmp	.+40     	; 0x452a <fputc+0x6e>
    4502:	8b 01       	movw	r16, r22
    4504:	ec 01       	movw	r28, r24
    4506:	fb 01       	movw	r30, r22
    4508:	00 84       	ldd	r0, Z+8	; 0x08
    450a:	f1 85       	ldd	r31, Z+9	; 0x09
    450c:	e0 2d       	mov	r30, r0
    450e:	19 95       	eicall
    4510:	89 2b       	or	r24, r25
    4512:	e1 f6       	brne	.-72     	; 0x44cc <fputc+0x10>
    4514:	d8 01       	movw	r26, r16
    4516:	16 96       	adiw	r26, 0x06	; 6
    4518:	8d 91       	ld	r24, X+
    451a:	9c 91       	ld	r25, X
    451c:	17 97       	sbiw	r26, 0x07	; 7
    451e:	01 96       	adiw	r24, 0x01	; 1
    4520:	17 96       	adiw	r26, 0x07	; 7
    4522:	9c 93       	st	X, r25
    4524:	8e 93       	st	-X, r24
    4526:	16 97       	sbiw	r26, 0x06	; 6
    4528:	ce 01       	movw	r24, r28
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	1f 91       	pop	r17
    4530:	0f 91       	pop	r16
    4532:	08 95       	ret

00004534 <__ultoa_invert>:
    4534:	fa 01       	movw	r30, r20
    4536:	aa 27       	eor	r26, r26
    4538:	28 30       	cpi	r18, 0x08	; 8
    453a:	51 f1       	breq	.+84     	; 0x4590 <__ultoa_invert+0x5c>
    453c:	20 31       	cpi	r18, 0x10	; 16
    453e:	81 f1       	breq	.+96     	; 0x45a0 <__ultoa_invert+0x6c>
    4540:	e8 94       	clt
    4542:	6f 93       	push	r22
    4544:	6e 7f       	andi	r22, 0xFE	; 254
    4546:	6e 5f       	subi	r22, 0xFE	; 254
    4548:	7f 4f       	sbci	r23, 0xFF	; 255
    454a:	8f 4f       	sbci	r24, 0xFF	; 255
    454c:	9f 4f       	sbci	r25, 0xFF	; 255
    454e:	af 4f       	sbci	r26, 0xFF	; 255
    4550:	b1 e0       	ldi	r27, 0x01	; 1
    4552:	3e d0       	rcall	.+124    	; 0x45d0 <__ultoa_invert+0x9c>
    4554:	b4 e0       	ldi	r27, 0x04	; 4
    4556:	3c d0       	rcall	.+120    	; 0x45d0 <__ultoa_invert+0x9c>
    4558:	67 0f       	add	r22, r23
    455a:	78 1f       	adc	r23, r24
    455c:	89 1f       	adc	r24, r25
    455e:	9a 1f       	adc	r25, r26
    4560:	a1 1d       	adc	r26, r1
    4562:	68 0f       	add	r22, r24
    4564:	79 1f       	adc	r23, r25
    4566:	8a 1f       	adc	r24, r26
    4568:	91 1d       	adc	r25, r1
    456a:	a1 1d       	adc	r26, r1
    456c:	6a 0f       	add	r22, r26
    456e:	71 1d       	adc	r23, r1
    4570:	81 1d       	adc	r24, r1
    4572:	91 1d       	adc	r25, r1
    4574:	a1 1d       	adc	r26, r1
    4576:	20 d0       	rcall	.+64     	; 0x45b8 <__ultoa_invert+0x84>
    4578:	09 f4       	brne	.+2      	; 0x457c <__ultoa_invert+0x48>
    457a:	68 94       	set
    457c:	3f 91       	pop	r19
    457e:	2a e0       	ldi	r18, 0x0A	; 10
    4580:	26 9f       	mul	r18, r22
    4582:	11 24       	eor	r1, r1
    4584:	30 19       	sub	r19, r0
    4586:	30 5d       	subi	r19, 0xD0	; 208
    4588:	31 93       	st	Z+, r19
    458a:	de f6       	brtc	.-74     	; 0x4542 <__ultoa_invert+0xe>
    458c:	cf 01       	movw	r24, r30
    458e:	08 95       	ret
    4590:	46 2f       	mov	r20, r22
    4592:	47 70       	andi	r20, 0x07	; 7
    4594:	40 5d       	subi	r20, 0xD0	; 208
    4596:	41 93       	st	Z+, r20
    4598:	b3 e0       	ldi	r27, 0x03	; 3
    459a:	0f d0       	rcall	.+30     	; 0x45ba <__ultoa_invert+0x86>
    459c:	c9 f7       	brne	.-14     	; 0x4590 <__ultoa_invert+0x5c>
    459e:	f6 cf       	rjmp	.-20     	; 0x458c <__ultoa_invert+0x58>
    45a0:	46 2f       	mov	r20, r22
    45a2:	4f 70       	andi	r20, 0x0F	; 15
    45a4:	40 5d       	subi	r20, 0xD0	; 208
    45a6:	4a 33       	cpi	r20, 0x3A	; 58
    45a8:	18 f0       	brcs	.+6      	; 0x45b0 <__ultoa_invert+0x7c>
    45aa:	49 5d       	subi	r20, 0xD9	; 217
    45ac:	31 fd       	sbrc	r19, 1
    45ae:	40 52       	subi	r20, 0x20	; 32
    45b0:	41 93       	st	Z+, r20
    45b2:	02 d0       	rcall	.+4      	; 0x45b8 <__ultoa_invert+0x84>
    45b4:	a9 f7       	brne	.-22     	; 0x45a0 <__ultoa_invert+0x6c>
    45b6:	ea cf       	rjmp	.-44     	; 0x458c <__ultoa_invert+0x58>
    45b8:	b4 e0       	ldi	r27, 0x04	; 4
    45ba:	a6 95       	lsr	r26
    45bc:	97 95       	ror	r25
    45be:	87 95       	ror	r24
    45c0:	77 95       	ror	r23
    45c2:	67 95       	ror	r22
    45c4:	ba 95       	dec	r27
    45c6:	c9 f7       	brne	.-14     	; 0x45ba <__ultoa_invert+0x86>
    45c8:	00 97       	sbiw	r24, 0x00	; 0
    45ca:	61 05       	cpc	r22, r1
    45cc:	71 05       	cpc	r23, r1
    45ce:	08 95       	ret
    45d0:	9b 01       	movw	r18, r22
    45d2:	ac 01       	movw	r20, r24
    45d4:	0a 2e       	mov	r0, r26
    45d6:	06 94       	lsr	r0
    45d8:	57 95       	ror	r21
    45da:	47 95       	ror	r20
    45dc:	37 95       	ror	r19
    45de:	27 95       	ror	r18
    45e0:	ba 95       	dec	r27
    45e2:	c9 f7       	brne	.-14     	; 0x45d6 <__ultoa_invert+0xa2>
    45e4:	62 0f       	add	r22, r18
    45e6:	73 1f       	adc	r23, r19
    45e8:	84 1f       	adc	r24, r20
    45ea:	95 1f       	adc	r25, r21
    45ec:	a0 1d       	adc	r26, r0
    45ee:	08 95       	ret

000045f0 <_exit>:
    45f0:	f8 94       	cli

000045f2 <__stop_program>:
    45f2:	ff cf       	rjmp	.-2      	; 0x45f2 <__stop_program>
