
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000064e  00800200  000076ba  0000774e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000076ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000284  0080084e  0080084e  00007d9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007df8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c00  00000000  00000000  00007e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ad37  00000000  00000000  00008a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003485  00000000  00000000  0001376f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000789e  00000000  00000000  00016bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026f0  00000000  00000000  0001e494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000406b  00000000  00000000  00020b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006791  00000000  00000000  00024bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0002b380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	15 c1       	rjmp	.+554    	; 0x230 <__bad_interrupt>
       6:	00 00       	nop
       8:	13 c1       	rjmp	.+550    	; 0x230 <__bad_interrupt>
       a:	00 00       	nop
       c:	11 c1       	rjmp	.+546    	; 0x230 <__bad_interrupt>
       e:	00 00       	nop
      10:	0f c1       	rjmp	.+542    	; 0x230 <__bad_interrupt>
      12:	00 00       	nop
      14:	0d c1       	rjmp	.+538    	; 0x230 <__bad_interrupt>
      16:	00 00       	nop
      18:	0b c1       	rjmp	.+534    	; 0x230 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	09 c1       	rjmp	.+530    	; 0x230 <__bad_interrupt>
      1e:	00 00       	nop
      20:	07 c1       	rjmp	.+526    	; 0x230 <__bad_interrupt>
      22:	00 00       	nop
      24:	05 c1       	rjmp	.+522    	; 0x230 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c1       	rjmp	.+518    	; 0x230 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	01 c1       	rjmp	.+514    	; 0x230 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c6       	rjmp	.+3294   	; 0xd10 <__vector_12>
      32:	00 00       	nop
      34:	fd c0       	rjmp	.+506    	; 0x230 <__bad_interrupt>
      36:	00 00       	nop
      38:	fb c0       	rjmp	.+502    	; 0x230 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f9 c0       	rjmp	.+498    	; 0x230 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c0       	rjmp	.+494    	; 0x230 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c0       	rjmp	.+490    	; 0x230 <__bad_interrupt>
      46:	00 00       	nop
      48:	f3 c0       	rjmp	.+486    	; 0x230 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f1 c0       	rjmp	.+482    	; 0x230 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ef c0       	rjmp	.+478    	; 0x230 <__bad_interrupt>
      52:	00 00       	nop
      54:	ed c0       	rjmp	.+474    	; 0x230 <__bad_interrupt>
      56:	00 00       	nop
      58:	eb c0       	rjmp	.+470    	; 0x230 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e9 c0       	rjmp	.+466    	; 0x230 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c0       	rjmp	.+462    	; 0x230 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 12 29 	jmp	0x5224	; 0x5224 <__vector_25>
      68:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__vector_26>
      6c:	e1 c0       	rjmp	.+450    	; 0x230 <__bad_interrupt>
      6e:	00 00       	nop
      70:	df c0       	rjmp	.+446    	; 0x230 <__bad_interrupt>
      72:	00 00       	nop
      74:	dd c0       	rjmp	.+442    	; 0x230 <__bad_interrupt>
      76:	00 00       	nop
      78:	db c0       	rjmp	.+438    	; 0x230 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d9 c0       	rjmp	.+434    	; 0x230 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d7 c0       	rjmp	.+430    	; 0x230 <__bad_interrupt>
      82:	00 00       	nop
      84:	d5 c0       	rjmp	.+426    	; 0x230 <__bad_interrupt>
      86:	00 00       	nop
      88:	d3 c0       	rjmp	.+422    	; 0x230 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 c0       	rjmp	.+418    	; 0x230 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <__vector_36>
      94:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__vector_37>
      98:	cb c0       	rjmp	.+406    	; 0x230 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c2 33 	jmp	0x6784	; 0x6784 <__vector_39>
      a0:	c7 c0       	rjmp	.+398    	; 0x230 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c5 c0       	rjmp	.+394    	; 0x230 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c3 c0       	rjmp	.+390    	; 0x230 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c1 c0       	rjmp	.+386    	; 0x230 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bf c0       	rjmp	.+382    	; 0x230 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bd c0       	rjmp	.+378    	; 0x230 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bb c0       	rjmp	.+374    	; 0x230 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b9 c0       	rjmp	.+370    	; 0x230 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b7 c0       	rjmp	.+366    	; 0x230 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b5 c0       	rjmp	.+362    	; 0x230 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b3 c0       	rjmp	.+358    	; 0x230 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 3e 2a 	jmp	0x547c	; 0x547c <__vector_51>
      d0:	0c 94 90 2a 	jmp	0x5520	; 0x5520 <__vector_52>
      d4:	ad c0       	rjmp	.+346    	; 0x230 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <__vector_54>
      dc:	0c 94 26 2b 	jmp	0x564c	; 0x564c <__vector_55>
      e0:	a7 c0       	rjmp	.+334    	; 0x230 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fc 20       	and	r15, r12
      e6:	fc 20       	and	r15, r12
      e8:	fc 20       	and	r15, r12
      ea:	47 21       	and	r20, r7
      ec:	53 21       	and	r21, r3
      ee:	79 21       	and	r23, r9
      f0:	fc 20       	and	r15, r12
      f2:	fc 20       	and	r15, r12
      f4:	47 21       	and	r20, r7
      f6:	53 21       	and	r21, r3
      f8:	e4 33       	cpi	r30, 0x34	; 52
      fa:	54 34       	cpi	r21, 0x44	; 68
      fc:	54 34       	cpi	r21, 0x44	; 68
      fe:	54 34       	cpi	r21, 0x44	; 68
     100:	54 34       	cpi	r21, 0x44	; 68
     102:	54 34       	cpi	r21, 0x44	; 68
     104:	54 34       	cpi	r21, 0x44	; 68
     106:	54 34       	cpi	r21, 0x44	; 68
     108:	e4 33       	cpi	r30, 0x34	; 52
     10a:	54 34       	cpi	r21, 0x44	; 68
     10c:	54 34       	cpi	r21, 0x44	; 68
     10e:	54 34       	cpi	r21, 0x44	; 68
     110:	54 34       	cpi	r21, 0x44	; 68
     112:	54 34       	cpi	r21, 0x44	; 68
     114:	54 34       	cpi	r21, 0x44	; 68
     116:	54 34       	cpi	r21, 0x44	; 68
     118:	e6 33       	cpi	r30, 0x36	; 54
     11a:	54 34       	cpi	r21, 0x44	; 68
     11c:	54 34       	cpi	r21, 0x44	; 68
     11e:	54 34       	cpi	r21, 0x44	; 68
     120:	54 34       	cpi	r21, 0x44	; 68
     122:	54 34       	cpi	r21, 0x44	; 68
     124:	54 34       	cpi	r21, 0x44	; 68
     126:	54 34       	cpi	r21, 0x44	; 68
     128:	54 34       	cpi	r21, 0x44	; 68
     12a:	54 34       	cpi	r21, 0x44	; 68
     12c:	54 34       	cpi	r21, 0x44	; 68
     12e:	54 34       	cpi	r21, 0x44	; 68
     130:	54 34       	cpi	r21, 0x44	; 68
     132:	54 34       	cpi	r21, 0x44	; 68
     134:	54 34       	cpi	r21, 0x44	; 68
     136:	54 34       	cpi	r21, 0x44	; 68
     138:	e6 33       	cpi	r30, 0x36	; 54
     13a:	54 34       	cpi	r21, 0x44	; 68
     13c:	54 34       	cpi	r21, 0x44	; 68
     13e:	54 34       	cpi	r21, 0x44	; 68
     140:	54 34       	cpi	r21, 0x44	; 68
     142:	54 34       	cpi	r21, 0x44	; 68
     144:	54 34       	cpi	r21, 0x44	; 68
     146:	54 34       	cpi	r21, 0x44	; 68
     148:	54 34       	cpi	r21, 0x44	; 68
     14a:	54 34       	cpi	r21, 0x44	; 68
     14c:	54 34       	cpi	r21, 0x44	; 68
     14e:	54 34       	cpi	r21, 0x44	; 68
     150:	54 34       	cpi	r21, 0x44	; 68
     152:	54 34       	cpi	r21, 0x44	; 68
     154:	54 34       	cpi	r21, 0x44	; 68
     156:	54 34       	cpi	r21, 0x44	; 68
     158:	50 34       	cpi	r21, 0x40	; 64
     15a:	54 34       	cpi	r21, 0x44	; 68
     15c:	54 34       	cpi	r21, 0x44	; 68
     15e:	54 34       	cpi	r21, 0x44	; 68
     160:	54 34       	cpi	r21, 0x44	; 68
     162:	54 34       	cpi	r21, 0x44	; 68
     164:	54 34       	cpi	r21, 0x44	; 68
     166:	54 34       	cpi	r21, 0x44	; 68
     168:	1b 34       	cpi	r17, 0x4B	; 75
     16a:	54 34       	cpi	r21, 0x44	; 68
     16c:	54 34       	cpi	r21, 0x44	; 68
     16e:	54 34       	cpi	r21, 0x44	; 68
     170:	54 34       	cpi	r21, 0x44	; 68
     172:	54 34       	cpi	r21, 0x44	; 68
     174:	54 34       	cpi	r21, 0x44	; 68
     176:	54 34       	cpi	r21, 0x44	; 68
     178:	54 34       	cpi	r21, 0x44	; 68
     17a:	54 34       	cpi	r21, 0x44	; 68
     17c:	54 34       	cpi	r21, 0x44	; 68
     17e:	54 34       	cpi	r21, 0x44	; 68
     180:	54 34       	cpi	r21, 0x44	; 68
     182:	54 34       	cpi	r21, 0x44	; 68
     184:	54 34       	cpi	r21, 0x44	; 68
     186:	54 34       	cpi	r21, 0x44	; 68
     188:	0f 34       	cpi	r16, 0x4F	; 79
     18a:	54 34       	cpi	r21, 0x44	; 68
     18c:	54 34       	cpi	r21, 0x44	; 68
     18e:	54 34       	cpi	r21, 0x44	; 68
     190:	54 34       	cpi	r21, 0x44	; 68
     192:	54 34       	cpi	r21, 0x44	; 68
     194:	54 34       	cpi	r21, 0x44	; 68
     196:	54 34       	cpi	r21, 0x44	; 68
     198:	33 34       	cpi	r19, 0x43	; 67

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	0e 94 4f 18 	call	0x309e	; 0x309e <prvCheckTasksWaitingTermination>
     1ae:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <pxReadyTasksLists>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	08 f0       	brcs	.+2      	; 0x1b8 <prvIdleTask+0x1e>
     1b6:	c1 d4       	rcall	.+2434   	; 0xb3a <vPortYield>
     1b8:	0e 94 7f 22 	call	0x44fe	; 0x44fe <vApplicationIdleHook>
     1bc:	f6 cf       	rjmp	.-20     	; 0x1aa <prvIdleTask+0x10>

000001be <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <prvTimerTask+0x6>
     1c4:	1f 92       	push	r1
     1c6:	1f 92       	push	r1
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9d 83       	std	Y+5, r25	; 0x05
     1ce:	8c 83       	std	Y+4, r24	; 0x04
     1d0:	ce 01       	movw	r24, r28
     1d2:	03 96       	adiw	r24, 0x03	; 3
     1d4:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <prvGetNextExpireTime>
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	9a 81       	ldd	r25, Y+2	; 0x02
     1e2:	62 2f       	mov	r22, r18
     1e4:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <prvProcessTimerOrBlockTask>
     1e8:	0e 94 bb 20 	call	0x4176	; 0x4176 <prvProcessReceivedCommands>
     1ec:	f1 cf       	rjmp	.-30     	; 0x1d0 <prvTimerTask+0x12>

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	00 e0       	ldi	r16, 0x00	; 0
     1fc:	0c bf       	out	0x3c, r16	; 60

000001fe <__do_copy_data>:
     1fe:	18 e0       	ldi	r17, 0x08	; 8
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	ea eb       	ldi	r30, 0xBA	; 186
     206:	f6 e7       	ldi	r31, 0x76	; 118
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0b bf       	out	0x3b, r16	; 59
     20c:	02 c0       	rjmp	.+4      	; 0x212 <__do_copy_data+0x14>
     20e:	07 90       	elpm	r0, Z+
     210:	0d 92       	st	X+, r0
     212:	ae 34       	cpi	r26, 0x4E	; 78
     214:	b1 07       	cpc	r27, r17
     216:	d9 f7       	brne	.-10     	; 0x20e <__do_copy_data+0x10>

00000218 <__do_clear_bss>:
     218:	2a e0       	ldi	r18, 0x0A	; 10
     21a:	ae e4       	ldi	r26, 0x4E	; 78
     21c:	b8 e0       	ldi	r27, 0x08	; 8
     21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
     220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
     222:	a2 3d       	cpi	r26, 0xD2	; 210
     224:	b2 07       	cpc	r27, r18
     226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>
     228:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <main>
     22c:	0c 94 5b 3b 	jmp	0x76b6	; 0x76b6 <_exit>

00000230 <__bad_interrupt>:
     230:	e7 ce       	rjmp	.-562    	; 0x0 <__vectors>

00000232 <measure_co2_callback>:
 */ 

#include "../Headers/m_lora_includes.h"

void measure_co2_callback(uint16_t ppm)
{
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	00 d0       	rcall	.+0      	; 0x238 <measure_co2_callback+0x6>
     238:	00 d0       	rcall	.+0      	; 0x23a <measure_co2_callback+0x8>
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	9e 83       	std	Y+6, r25	; 0x06
     240:	8d 83       	std	Y+5, r24	; 0x05
	m_data co2 = {1, ppm};
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	9a 83       	std	Y+2, r25	; 0x02
     248:	89 83       	std	Y+1, r24	; 0x01
     24a:	8d 81       	ldd	r24, Y+5	; 0x05
     24c:	9e 81       	ldd	r25, Y+6	; 0x06
     24e:	9c 83       	std	Y+4, r25	; 0x04
     250:	8b 83       	std	Y+3, r24	; 0x03
	
	xMessageBufferSend( xMessageBuffer
     252:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <xMessageBuffer>
     256:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <xMessageBuffer+0x1>
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	44 e0       	ldi	r20, 0x04	; 4
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	be 01       	movw	r22, r28
     264:	6f 5f       	subi	r22, 0xFF	; 255
     266:	7f 4f       	sbci	r23, 0xFF	; 255
     268:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <xStreamBufferSend>
					, &co2
					, sizeof (m_data)
					,0);
	
	xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
     26c:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
     270:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
     274:	6f ef       	ldi	r22, 0xFF	; 255
     276:	7f ef       	ldi	r23, 0xFF	; 255
     278:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
	printf("CO2 (type: %d, val: %u) sent!\n", co2.type, (unsigned int)co2.value);
     27c:	2b 81       	ldd	r18, Y+3	; 0x03
     27e:	3c 81       	ldd	r19, Y+4	; 0x04
     280:	89 81       	ldd	r24, Y+1	; 0x01
     282:	9a 81       	ldd	r25, Y+2	; 0x02
     284:	43 2f       	mov	r20, r19
     286:	4f 93       	push	r20
     288:	2f 93       	push	r18
     28a:	29 2f       	mov	r18, r25
     28c:	2f 93       	push	r18
     28e:	8f 93       	push	r24
     290:	81 e2       	ldi	r24, 0x21	; 33
     292:	92 e0       	ldi	r25, 0x02	; 2
     294:	89 2f       	mov	r24, r25
     296:	8f 93       	push	r24
     298:	81 e2       	ldi	r24, 0x21	; 33
     29a:	92 e0       	ldi	r25, 0x02	; 2
     29c:	8f 93       	push	r24
     29e:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
	xSemaphoreGive(xSemaphore_print);
     2ae:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
     2b2:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	92 d6       	rcall	.+3364   	; 0xfe6 <xQueueGenericSend>
     2c2:	00 00       	nop
     2c4:	26 96       	adiw	r28, 0x06	; 6
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <measure_co2_timer_callback>:
 *  Author: drags
 */ 
#include "../Headers/m_lora_includes.h"

void measure_co2_timer_callback(TimerHandle_t pxTimer)
{
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	1f 92       	push	r1
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	9a 83       	std	Y+2, r25	; 0x02
     2e4:	89 83       	std	Y+1, r24	; 0x01
	xSemaphoreGive(xSemaphore);
     2e6:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
     2ea:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	76 d6       	rcall	.+3308   	; 0xfe6 <xQueueGenericSend>
     2fa:	00 00       	nop
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <print_measurements_timer_callback>:
 *  Author: drags
 */ 
#include "../Headers/m_lora_includes.h"

void print_measurements_timer_callback(TimerHandle_t pxTimer)
{
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	1f 92       	push	r1
     30c:	1f 92       	push	r1
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	9a 83       	std	Y+2, r25	; 0x02
     314:	89 83       	std	Y+1, r24	; 0x01
	xSemaphoreGive(xSemaphore);
     316:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
     31a:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	5e d6       	rcall	.+3260   	; 0xfe6 <xQueueGenericSend>
     32a:	00 00       	nop
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <measure_temp_timer_callback>:
 *  Author: drags
 */ 
#include "../Headers/m_lora_includes.h"

void measure_temp_timer_callback(TimerHandle_t pxTimer)
{
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	1f 92       	push	r1
     33c:	1f 92       	push	r1
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	9a 83       	std	Y+2, r25	; 0x02
     344:	89 83       	std	Y+1, r24	; 0x01
	xSemaphoreGive(xSemaphore);
     346:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
     34a:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	46 d6       	rcall	.+3212   	; 0xfe6 <xQueueGenericSend>
}
     35a:	00 00       	nop
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <send_data_timer_callback>:
 */ 

#include "../Headers/m_lora_includes.h"

void send_data_timer_callback(TimerHandle_t pxTimer)
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	1f 92       	push	r1
     36c:	1f 92       	push	r1
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	9a 83       	std	Y+2, r25	; 0x02
     374:	89 83       	std	Y+1, r24	; 0x01
	xSemaphoreGive(xSemaphore);
     376:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
     37a:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	2e d6       	rcall	.+3164   	; 0xfe6 <xQueueGenericSend>
     38a:	00 00       	nop
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <task_switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_in(uint8_t task_no) {
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	1f 92       	push	r1
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	89 83       	std	Y+1, r24	; 0x01
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     3a2:	88 e0       	ldi	r24, 0x08	; 8
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	28 e0       	ldi	r18, 0x08	; 8
     3a8:	31 e0       	ldi	r19, 0x01	; 1
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	20 7f       	andi	r18, 0xF0	; 240
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 83       	st	Z, r18
		 PORTK |= (task_no & 0b00001111);
     3b4:	88 e0       	ldi	r24, 0x08	; 8
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	28 e0       	ldi	r18, 0x08	; 8
     3ba:	31 e0       	ldi	r19, 0x01	; 1
     3bc:	f9 01       	movw	r30, r18
     3be:	20 81       	ld	r18, Z
     3c0:	32 2f       	mov	r19, r18
     3c2:	29 81       	ldd	r18, Y+1	; 0x01
     3c4:	2f 70       	andi	r18, 0x0F	; 15
     3c6:	23 2b       	or	r18, r19
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
		 #endif
	}
     3cc:	00 00       	nop
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <task_switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_out(uint8_t task_no) {
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	89 83       	std	Y+1, r24	; 0x01
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     3e2:	88 e0       	ldi	r24, 0x08	; 8
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	31 e0       	ldi	r19, 0x01	; 1
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	20 7f       	andi	r18, 0xF0	; 240
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
		#endif
	}
     3f4:	00 00       	nop
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	1f 92       	push	r1
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn;

    vTaskSuspendAll();
     40e:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <malloc>
     41a:	9a 83       	std	Y+2, r25	; 0x02
     41c:	89 83       	std	Y+1, r24	; 0x01
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     41e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	89 2b       	or	r24, r25
     428:	11 f4       	brne	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     42a:	0e 94 87 22 	call	0x450e	; 0x450e <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
}
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	1f 92       	push	r1
     446:	1f 92       	push	r1
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	9a 83       	std	Y+2, r25	; 0x02
     44e:	89 83       	std	Y+1, r24	; 0x01
    if( pv )
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	89 2b       	or	r24, r25
     456:	41 f0       	breq	.+16     	; 0x468 <vPortFree+0x28>
    {
        vTaskSuspendAll();
     458:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
        {
            free( pv );
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	0e 94 76 37 	call	0x6eec	; 0x6eec <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     464:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    }
}
     468:	00 00       	nop
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	1f 92       	push	r1
     47a:	1f 92       	push	r1
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	9c 01       	movw	r18, r24
     48a:	2d 5f       	subi	r18, 0xFD	; 253
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	9a 81       	ldd	r25, Y+2	; 0x02
     492:	fc 01       	movw	r30, r24
     494:	32 83       	std	Z+2, r19	; 0x02
     496:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	2f ef       	ldi	r18, 0xFF	; 255
     49e:	3f ef       	ldi	r19, 0xFF	; 255
     4a0:	fc 01       	movw	r30, r24
     4a2:	34 83       	std	Z+4, r19	; 0x04
     4a4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	9c 01       	movw	r18, r24
     4ac:	2d 5f       	subi	r18, 0xFD	; 253
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	fc 01       	movw	r30, r24
     4b6:	36 83       	std	Z+6, r19	; 0x06
     4b8:	25 83       	std	Z+5, r18	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
     4be:	9c 01       	movw	r18, r24
     4c0:	2d 5f       	subi	r18, 0xFD	; 253
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	fc 01       	movw	r30, r24
     4ca:	30 87       	std	Z+8, r19	; 0x08
     4cc:	27 83       	std	Z+7, r18	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	fc 01       	movw	r30, r24
     4d4:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     4d6:	00 00       	nop
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	1f 92       	push	r1
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	fc 01       	movw	r30, r24
     4f8:	11 86       	std	Z+9, r1	; 0x09
     4fa:	10 86       	std	Z+8, r1	; 0x08

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     4fc:	00 00       	nop
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	00 d0       	rcall	.+0      	; 0x50e <vListInsertEnd+0x6>
     50e:	00 d0       	rcall	.+0      	; 0x510 <vListInsertEnd+0x8>
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	9c 83       	std	Y+4, r25	; 0x04
     516:	8b 83       	std	Y+3, r24	; 0x03
     518:	7e 83       	std	Y+6, r23	; 0x06
     51a:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     51c:	8b 81       	ldd	r24, Y+3	; 0x03
     51e:	9c 81       	ldd	r25, Y+4	; 0x04
     520:	fc 01       	movw	r30, r24
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	92 81       	ldd	r25, Z+2	; 0x02
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     52a:	8d 81       	ldd	r24, Y+5	; 0x05
     52c:	9e 81       	ldd	r25, Y+6	; 0x06
     52e:	29 81       	ldd	r18, Y+1	; 0x01
     530:	3a 81       	ldd	r19, Y+2	; 0x02
     532:	fc 01       	movw	r30, r24
     534:	33 83       	std	Z+3, r19	; 0x03
     536:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	24 81       	ldd	r18, Z+4	; 0x04
     540:	35 81       	ldd	r19, Z+5	; 0x05
     542:	8d 81       	ldd	r24, Y+5	; 0x05
     544:	9e 81       	ldd	r25, Y+6	; 0x06
     546:	fc 01       	movw	r30, r24
     548:	35 83       	std	Z+5, r19	; 0x05
     54a:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	fc 01       	movw	r30, r24
     552:	84 81       	ldd	r24, Z+4	; 0x04
     554:	95 81       	ldd	r25, Z+5	; 0x05
     556:	2d 81       	ldd	r18, Y+5	; 0x05
     558:	3e 81       	ldd	r19, Y+6	; 0x06
     55a:	fc 01       	movw	r30, r24
     55c:	33 83       	std	Z+3, r19	; 0x03
     55e:	22 83       	std	Z+2, r18	; 0x02
    pxIndex->pxPrevious = pxNewListItem;
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	9a 81       	ldd	r25, Y+2	; 0x02
     564:	2d 81       	ldd	r18, Y+5	; 0x05
     566:	3e 81       	ldd	r19, Y+6	; 0x06
     568:	fc 01       	movw	r30, r24
     56a:	35 83       	std	Z+5, r19	; 0x05
     56c:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	9e 81       	ldd	r25, Y+6	; 0x06
     572:	2b 81       	ldd	r18, Y+3	; 0x03
     574:	3c 81       	ldd	r19, Y+4	; 0x04
     576:	fc 01       	movw	r30, r24
     578:	31 87       	std	Z+9, r19	; 0x09
     57a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	9c 81       	ldd	r25, Y+4	; 0x04
     580:	fc 01       	movw	r30, r24
     582:	80 81       	ld	r24, Z
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	28 0f       	add	r18, r24
     588:	8b 81       	ldd	r24, Y+3	; 0x03
     58a:	9c 81       	ldd	r25, Y+4	; 0x04
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
}
     590:	00 00       	nop
     592:	26 96       	adiw	r28, 0x06	; 6
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	28 97       	sbiw	r28, 0x08	; 8
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	9e 83       	std	Y+6, r25	; 0x06
     5ba:	8d 83       	std	Y+5, r24	; 0x05
     5bc:	78 87       	std	Y+8, r23	; 0x08
     5be:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     5c0:	8f 81       	ldd	r24, Y+7	; 0x07
     5c2:	98 85       	ldd	r25, Y+8	; 0x08
     5c4:	fc 01       	movw	r30, r24
     5c6:	80 81       	ld	r24, Z
     5c8:	91 81       	ldd	r25, Z+1	; 0x01
     5ca:	9c 83       	std	Y+4, r25	; 0x04
     5cc:	8b 83       	std	Y+3, r24	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	9c 81       	ldd	r25, Y+4	; 0x04
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	41 f4       	brne	.+16     	; 0x5e6 <vListInsert+0x42>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     5d6:	8d 81       	ldd	r24, Y+5	; 0x05
     5d8:	9e 81       	ldd	r25, Y+6	; 0x06
     5da:	fc 01       	movw	r30, r24
     5dc:	87 81       	ldd	r24, Z+7	; 0x07
     5de:	90 85       	ldd	r25, Z+8	; 0x08
     5e0:	9a 83       	std	Y+2, r25	; 0x02
     5e2:	89 83       	std	Y+1, r24	; 0x01
     5e4:	1a c0       	rjmp	.+52     	; 0x61a <vListInsert+0x76>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	03 96       	adiw	r24, 0x03	; 3
     5ec:	9a 83       	std	Y+2, r25	; 0x02
     5ee:	89 83       	std	Y+1, r24	; 0x01
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <vListInsert+0x5c>
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	fc 01       	movw	r30, r24
     5f8:	82 81       	ldd	r24, Z+2	; 0x02
     5fa:	93 81       	ldd	r25, Z+3	; 0x03
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	fc 01       	movw	r30, r24
     606:	82 81       	ldd	r24, Z+2	; 0x02
     608:	93 81       	ldd	r25, Z+3	; 0x03
     60a:	fc 01       	movw	r30, r24
     60c:	20 81       	ld	r18, Z
     60e:	31 81       	ldd	r19, Z+1	; 0x01
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	60 f7       	brcc	.-40     	; 0x5f2 <vListInsert+0x4e>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	fc 01       	movw	r30, r24
     620:	22 81       	ldd	r18, Z+2	; 0x02
     622:	33 81       	ldd	r19, Z+3	; 0x03
     624:	8f 81       	ldd	r24, Y+7	; 0x07
     626:	98 85       	ldd	r25, Y+8	; 0x08
     628:	fc 01       	movw	r30, r24
     62a:	33 83       	std	Z+3, r19	; 0x03
     62c:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     62e:	8f 81       	ldd	r24, Y+7	; 0x07
     630:	98 85       	ldd	r25, Y+8	; 0x08
     632:	fc 01       	movw	r30, r24
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	2f 81       	ldd	r18, Y+7	; 0x07
     63a:	38 85       	ldd	r19, Y+8	; 0x08
     63c:	fc 01       	movw	r30, r24
     63e:	35 83       	std	Z+5, r19	; 0x05
     640:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     642:	8f 81       	ldd	r24, Y+7	; 0x07
     644:	98 85       	ldd	r25, Y+8	; 0x08
     646:	29 81       	ldd	r18, Y+1	; 0x01
     648:	3a 81       	ldd	r19, Y+2	; 0x02
     64a:	fc 01       	movw	r30, r24
     64c:	35 83       	std	Z+5, r19	; 0x05
     64e:	24 83       	std	Z+4, r18	; 0x04
    pxIterator->pxNext = pxNewListItem;
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	2f 81       	ldd	r18, Y+7	; 0x07
     656:	38 85       	ldd	r19, Y+8	; 0x08
     658:	fc 01       	movw	r30, r24
     65a:	33 83       	std	Z+3, r19	; 0x03
     65c:	22 83       	std	Z+2, r18	; 0x02

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     65e:	8f 81       	ldd	r24, Y+7	; 0x07
     660:	98 85       	ldd	r25, Y+8	; 0x08
     662:	2d 81       	ldd	r18, Y+5	; 0x05
     664:	3e 81       	ldd	r19, Y+6	; 0x06
     666:	fc 01       	movw	r30, r24
     668:	31 87       	std	Z+9, r19	; 0x09
     66a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     66c:	8d 81       	ldd	r24, Y+5	; 0x05
     66e:	9e 81       	ldd	r25, Y+6	; 0x06
     670:	fc 01       	movw	r30, r24
     672:	80 81       	ld	r24, Z
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	28 0f       	add	r18, r24
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	9e 81       	ldd	r25, Y+6	; 0x06
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
}
     680:	00 00       	nop
     682:	28 96       	adiw	r28, 0x08	; 8
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	00 d0       	rcall	.+0      	; 0x69a <uxListRemove+0x6>
     69a:	1f 92       	push	r1
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	9c 83       	std	Y+4, r25	; 0x04
     6a2:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	9c 81       	ldd	r25, Y+4	; 0x04
     6a8:	fc 01       	movw	r30, r24
     6aa:	80 85       	ldd	r24, Z+8	; 0x08
     6ac:	91 85       	ldd	r25, Z+9	; 0x09
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	fc 01       	movw	r30, r24
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	2b 81       	ldd	r18, Y+3	; 0x03
     6be:	3c 81       	ldd	r19, Y+4	; 0x04
     6c0:	f9 01       	movw	r30, r18
     6c2:	24 81       	ldd	r18, Z+4	; 0x04
     6c4:	35 81       	ldd	r19, Z+5	; 0x05
     6c6:	fc 01       	movw	r30, r24
     6c8:	35 83       	std	Z+5, r19	; 0x05
     6ca:	24 83       	std	Z+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	fc 01       	movw	r30, r24
     6d2:	84 81       	ldd	r24, Z+4	; 0x04
     6d4:	95 81       	ldd	r25, Z+5	; 0x05
     6d6:	2b 81       	ldd	r18, Y+3	; 0x03
     6d8:	3c 81       	ldd	r19, Y+4	; 0x04
     6da:	f9 01       	movw	r30, r18
     6dc:	22 81       	ldd	r18, Z+2	; 0x02
     6de:	33 81       	ldd	r19, Z+3	; 0x03
     6e0:	fc 01       	movw	r30, r24
     6e2:	33 83       	std	Z+3, r19	; 0x03
     6e4:	22 83       	std	Z+2, r18	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	fc 01       	movw	r30, r24
     6ec:	21 81       	ldd	r18, Z+1	; 0x01
     6ee:	32 81       	ldd	r19, Z+2	; 0x02
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	28 17       	cp	r18, r24
     6f6:	39 07       	cpc	r19, r25
     6f8:	51 f4       	brne	.+20     	; 0x70e <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	9c 81       	ldd	r25, Y+4	; 0x04
     6fe:	fc 01       	movw	r30, r24
     700:	24 81       	ldd	r18, Z+4	; 0x04
     702:	35 81       	ldd	r19, Z+5	; 0x05
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	9a 81       	ldd	r25, Y+2	; 0x02
     708:	fc 01       	movw	r30, r24
     70a:	32 83       	std	Z+2, r19	; 0x02
     70c:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	9c 81       	ldd	r25, Y+4	; 0x04
     712:	fc 01       	movw	r30, r24
     714:	11 86       	std	Z+9, r1	; 0x09
     716:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	28 0f       	add	r18, r24
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
}
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	28 97       	sbiw	r28, 0x08	; 8
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	9c 83       	std	Y+4, r25	; 0x04
     758:	8b 83       	std	Y+3, r24	; 0x03
     75a:	7e 83       	std	Y+6, r23	; 0x06
     75c:	6d 83       	std	Y+5, r22	; 0x05
     75e:	58 87       	std	Y+8, r21	; 0x08
     760:	4f 83       	std	Y+7, r20	; 0x07
     762:	8b 81       	ldd	r24, Y+3	; 0x03
     764:	9c 81       	ldd	r25, Y+4	; 0x04
     766:	21 e1       	ldi	r18, 0x11	; 17
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
     76c:	8b 81       	ldd	r24, Y+3	; 0x03
     76e:	9c 81       	ldd	r25, Y+4	; 0x04
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	9c 83       	std	Y+4, r25	; 0x04
     774:	8b 83       	std	Y+3, r24	; 0x03
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	22 e2       	ldi	r18, 0x22	; 34
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	9c 81       	ldd	r25, Y+4	; 0x04
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	9c 83       	std	Y+4, r25	; 0x04
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	9c 81       	ldd	r25, Y+4	; 0x04
     78e:	23 e3       	ldi	r18, 0x33	; 51
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	9c 81       	ldd	r25, Y+4	; 0x04
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	9c 83       	std	Y+4, r25	; 0x04
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	8d 81       	ldd	r24, Y+5	; 0x05
     7a0:	9e 81       	ldd	r25, Y+6	; 0x06
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	29 81       	ldd	r18, Y+1	; 0x01
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	9c 81       	ldd	r25, Y+4	; 0x04
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	9c 81       	ldd	r25, Y+4	; 0x04
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	9c 83       	std	Y+4, r25	; 0x04
     7b8:	8b 83       	std	Y+3, r24	; 0x03
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	89 2f       	mov	r24, r25
     7c0:	99 27       	eor	r25, r25
     7c2:	9a 83       	std	Y+2, r25	; 0x02
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	29 81       	ldd	r18, Y+1	; 0x01
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	9c 81       	ldd	r25, Y+4	; 0x04
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	9c 83       	std	Y+4, r25	; 0x04
     7d8:	8b 83       	std	Y+3, r24	; 0x03
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	fc 01       	movw	r30, r24
     7e0:	10 82       	st	Z, r1
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	9c 81       	ldd	r25, Y+4	; 0x04
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	fc 01       	movw	r30, r24
     7f2:	10 82       	st	Z, r1
     7f4:	8b 81       	ldd	r24, Y+3	; 0x03
     7f6:	9c 81       	ldd	r25, Y+4	; 0x04
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	9c 83       	std	Y+4, r25	; 0x04
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	20 e8       	ldi	r18, 0x80	; 128
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	9c 81       	ldd	r25, Y+4	; 0x04
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	9c 83       	std	Y+4, r25	; 0x04
     810:	8b 83       	std	Y+3, r24	; 0x03
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	9c 81       	ldd	r25, Y+4	; 0x04
     816:	fc 01       	movw	r30, r24
     818:	10 82       	st	Z, r1
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	9c 81       	ldd	r25, Y+4	; 0x04
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	fc 01       	movw	r30, r24
     82a:	10 82       	st	Z, r1
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	9c 83       	std	Y+4, r25	; 0x04
     834:	8b 83       	std	Y+3, r24	; 0x03
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	9c 81       	ldd	r25, Y+4	; 0x04
     83a:	fc 01       	movw	r30, r24
     83c:	10 82       	st	Z, r1
     83e:	8b 81       	ldd	r24, Y+3	; 0x03
     840:	9c 81       	ldd	r25, Y+4	; 0x04
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	22 e0       	ldi	r18, 0x02	; 2
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	9c 83       	std	Y+4, r25	; 0x04
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	8b 81       	ldd	r24, Y+3	; 0x03
     85e:	9c 81       	ldd	r25, Y+4	; 0x04
     860:	23 e0       	ldi	r18, 0x03	; 3
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	9c 83       	std	Y+4, r25	; 0x04
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	9c 81       	ldd	r25, Y+4	; 0x04
     874:	24 e0       	ldi	r18, 0x04	; 4
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	8b 83       	std	Y+3, r24	; 0x03
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	25 e0       	ldi	r18, 0x05	; 5
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	9c 81       	ldd	r25, Y+4	; 0x04
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	9c 83       	std	Y+4, r25	; 0x04
     896:	8b 83       	std	Y+3, r24	; 0x03
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	9c 81       	ldd	r25, Y+4	; 0x04
     89c:	26 e0       	ldi	r18, 0x06	; 6
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	9c 83       	std	Y+4, r25	; 0x04
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	9c 81       	ldd	r25, Y+4	; 0x04
     8b0:	27 e0       	ldi	r18, 0x07	; 7
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	8b 83       	std	Y+3, r24	; 0x03
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	28 e0       	ldi	r18, 0x08	; 8
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	9c 81       	ldd	r25, Y+4	; 0x04
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	9c 83       	std	Y+4, r25	; 0x04
     8d2:	8b 83       	std	Y+3, r24	; 0x03
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	29 e0       	ldi	r18, 0x09	; 9
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
     8de:	8b 81       	ldd	r24, Y+3	; 0x03
     8e0:	9c 81       	ldd	r25, Y+4	; 0x04
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	9c 83       	std	Y+4, r25	; 0x04
     8e6:	8b 83       	std	Y+3, r24	; 0x03
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	9c 81       	ldd	r25, Y+4	; 0x04
     8ec:	20 e1       	ldi	r18, 0x10	; 16
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	9c 81       	ldd	r25, Y+4	; 0x04
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	9c 83       	std	Y+4, r25	; 0x04
     8fa:	8b 83       	std	Y+3, r24	; 0x03
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	9c 81       	ldd	r25, Y+4	; 0x04
     900:	21 e1       	ldi	r18, 0x11	; 17
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	9c 81       	ldd	r25, Y+4	; 0x04
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	8b 83       	std	Y+3, r24	; 0x03
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	22 e1       	ldi	r18, 0x12	; 18
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	9c 81       	ldd	r25, Y+4	; 0x04
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	9c 83       	std	Y+4, r25	; 0x04
     922:	8b 83       	std	Y+3, r24	; 0x03
     924:	8b 81       	ldd	r24, Y+3	; 0x03
     926:	9c 81       	ldd	r25, Y+4	; 0x04
     928:	23 e1       	ldi	r18, 0x13	; 19
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	9c 81       	ldd	r25, Y+4	; 0x04
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	9c 83       	std	Y+4, r25	; 0x04
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	24 e1       	ldi	r18, 0x14	; 20
     93e:	fc 01       	movw	r30, r24
     940:	20 83       	st	Z, r18
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	25 e1       	ldi	r18, 0x15	; 21
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	9c 81       	ldd	r25, Y+4	; 0x04
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	8b 81       	ldd	r24, Y+3	; 0x03
     962:	9c 81       	ldd	r25, Y+4	; 0x04
     964:	26 e1       	ldi	r18, 0x16	; 22
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	27 e1       	ldi	r18, 0x17	; 23
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	9c 83       	std	Y+4, r25	; 0x04
     986:	8b 83       	std	Y+3, r24	; 0x03
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	28 e1       	ldi	r18, 0x18	; 24
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	9c 83       	std	Y+4, r25	; 0x04
     99a:	8b 83       	std	Y+3, r24	; 0x03
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	9c 81       	ldd	r25, Y+4	; 0x04
     9a0:	29 e1       	ldi	r18, 0x19	; 25
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	8b 83       	std	Y+3, r24	; 0x03
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	20 e2       	ldi	r18, 0x20	; 32
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	8b 83       	std	Y+3, r24	; 0x03
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	21 e2       	ldi	r18, 0x21	; 33
     9ca:	fc 01       	movw	r30, r24
     9cc:	20 83       	st	Z, r18
     9ce:	8b 81       	ldd	r24, Y+3	; 0x03
     9d0:	9c 81       	ldd	r25, Y+4	; 0x04
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	22 e2       	ldi	r18, 0x22	; 34
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	9c 81       	ldd	r25, Y+4	; 0x04
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	9c 83       	std	Y+4, r25	; 0x04
     9ea:	8b 83       	std	Y+3, r24	; 0x03
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	9c 81       	ldd	r25, Y+4	; 0x04
     9f0:	23 e2       	ldi	r18, 0x23	; 35
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	9c 81       	ldd	r25, Y+4	; 0x04
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	9c 83       	std	Y+4, r25	; 0x04
     9fe:	8b 83       	std	Y+3, r24	; 0x03
     a00:	8f 81       	ldd	r24, Y+7	; 0x07
     a02:	98 85       	ldd	r25, Y+8	; 0x08
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	29 81       	ldd	r18, Y+1	; 0x01
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	9c 83       	std	Y+4, r25	; 0x04
     a1a:	8b 83       	std	Y+3, r24	; 0x03
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	89 2f       	mov	r24, r25
     a22:	99 27       	eor	r25, r25
     a24:	9a 83       	std	Y+2, r25	; 0x02
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	29 81       	ldd	r18, Y+1	; 0x01
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	fc 01       	movw	r30, r24
     a30:	20 83       	st	Z, r18
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	26 e2       	ldi	r18, 0x26	; 38
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	9c 83       	std	Y+4, r25	; 0x04
     a4e:	8b 83       	std	Y+3, r24	; 0x03
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	27 e2       	ldi	r18, 0x27	; 39
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	9c 83       	std	Y+4, r25	; 0x04
     a62:	8b 83       	std	Y+3, r24	; 0x03
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	28 e2       	ldi	r18, 0x28	; 40
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 83       	st	Z, r18
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	8b 83       	std	Y+3, r24	; 0x03
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	29 e2       	ldi	r18, 0x29	; 41
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	9c 83       	std	Y+4, r25	; 0x04
     a8a:	8b 83       	std	Y+3, r24	; 0x03
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	20 e3       	ldi	r18, 0x30	; 48
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	9c 81       	ldd	r25, Y+4	; 0x04
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	9c 83       	std	Y+4, r25	; 0x04
     a9e:	8b 83       	std	Y+3, r24	; 0x03
     aa0:	8b 81       	ldd	r24, Y+3	; 0x03
     aa2:	9c 81       	ldd	r25, Y+4	; 0x04
     aa4:	21 e3       	ldi	r18, 0x31	; 49
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	9c 81       	ldd	r25, Y+4	; 0x04
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <xPortStartScheduler>:
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	ff d0       	rcall	.+510    	; 0xcd2 <prvSetupTimerInterrupt>
     ad4:	a0 91 4e 08 	lds	r26, 0x084E	; 0x80084e <__data_end>
     ad8:	b0 91 4f 08 	lds	r27, 0x084F	; 0x80084f <__data_end+0x1>
     adc:	cd 91       	ld	r28, X+
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	dd 91       	ld	r29, X+
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	bf 91       	pop	r27
     aee:	af 91       	pop	r26
     af0:	9f 91       	pop	r25
     af2:	8f 91       	pop	r24
     af4:	7f 91       	pop	r23
     af6:	6f 91       	pop	r22
     af8:	5f 91       	pop	r21
     afa:	4f 91       	pop	r20
     afc:	3f 91       	pop	r19
     afe:	2f 91       	pop	r18
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	7f 90       	pop	r7
     b16:	6f 90       	pop	r6
     b18:	5f 90       	pop	r5
     b1a:	4f 90       	pop	r4
     b1c:	3f 90       	pop	r3
     b1e:	2f 90       	pop	r2
     b20:	1f 90       	pop	r1
     b22:	0f 90       	pop	r0
     b24:	0c be       	out	0x3c, r0	; 60
     b26:	0f 90       	pop	r0
     b28:	0b be       	out	0x3b, r0	; 59
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	08 95       	ret
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	0f 92       	push	r0
     b42:	0b b6       	in	r0, 0x3b	; 59
     b44:	0f 92       	push	r0
     b46:	0c b6       	in	r0, 0x3c	; 60
     b48:	0f 92       	push	r0
     b4a:	1f 92       	push	r1
     b4c:	11 24       	eor	r1, r1
     b4e:	2f 92       	push	r2
     b50:	3f 92       	push	r3
     b52:	4f 92       	push	r4
     b54:	5f 92       	push	r5
     b56:	6f 92       	push	r6
     b58:	7f 92       	push	r7
     b5a:	8f 92       	push	r8
     b5c:	9f 92       	push	r9
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	2f 93       	push	r18
     b70:	3f 93       	push	r19
     b72:	4f 93       	push	r20
     b74:	5f 93       	push	r21
     b76:	6f 93       	push	r22
     b78:	7f 93       	push	r23
     b7a:	8f 93       	push	r24
     b7c:	9f 93       	push	r25
     b7e:	af 93       	push	r26
     b80:	bf 93       	push	r27
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
     b8a:	a0 91 4e 08 	lds	r26, 0x084E	; 0x80084e <__data_end>
     b8e:	b0 91 4f 08 	lds	r27, 0x084F	; 0x80084f <__data_end+0x1>
     b92:	0d b6       	in	r0, 0x3d	; 61
     b94:	0d 92       	st	X+, r0
     b96:	0e b6       	in	r0, 0x3e	; 62
     b98:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     b9a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     b9e:	a0 91 4e 08 	lds	r26, 0x084E	; 0x80084e <__data_end>
     ba2:	b0 91 4f 08 	lds	r27, 0x084F	; 0x80084f <__data_end+0x1>
     ba6:	cd 91       	ld	r28, X+
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	dd 91       	ld	r29, X+
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	7f 90       	pop	r7
     be0:	6f 90       	pop	r6
     be2:	5f 90       	pop	r5
     be4:	4f 90       	pop	r4
     be6:	3f 90       	pop	r3
     be8:	2f 90       	pop	r2
     bea:	1f 90       	pop	r1
     bec:	0f 90       	pop	r0
     bee:	0c be       	out	0x3c, r0	; 60
     bf0:	0f 90       	pop	r0
     bf2:	0b be       	out	0x3b, r0	; 59
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     bfa:	08 95       	ret
	...

00000bfe <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	0f 92       	push	r0
     c06:	0b b6       	in	r0, 0x3b	; 59
     c08:	0f 92       	push	r0
     c0a:	0c b6       	in	r0, 0x3c	; 60
     c0c:	0f 92       	push	r0
     c0e:	1f 92       	push	r1
     c10:	11 24       	eor	r1, r1
     c12:	2f 92       	push	r2
     c14:	3f 92       	push	r3
     c16:	4f 92       	push	r4
     c18:	5f 92       	push	r5
     c1a:	6f 92       	push	r6
     c1c:	7f 92       	push	r7
     c1e:	8f 92       	push	r8
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
     c4e:	a0 91 4e 08 	lds	r26, 0x084E	; 0x80084e <__data_end>
     c52:	b0 91 4f 08 	lds	r27, 0x084F	; 0x80084f <__data_end+0x1>
     c56:	0d b6       	in	r0, 0x3d	; 61
     c58:	0d 92       	st	X+, r0
     c5a:	0e b6       	in	r0, 0x3e	; 62
     c5c:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     c5e:	83 e5       	ldi	r24, 0x53	; 83
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	fc 01       	movw	r30, r24
     c64:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
     c66:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <xTaskIncrementTick>
     c6a:	88 23       	and	r24, r24
     c6c:	11 f0       	breq	.+4      	; 0xc72 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
     c6e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     c72:	a0 91 4e 08 	lds	r26, 0x084E	; 0x80084e <__data_end>
     c76:	b0 91 4f 08 	lds	r27, 0x084F	; 0x80084f <__data_end+0x1>
     c7a:	cd 91       	ld	r28, X+
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	dd 91       	ld	r29, X+
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	7f 90       	pop	r7
     cb4:	6f 90       	pop	r6
     cb6:	5f 90       	pop	r5
     cb8:	4f 90       	pop	r4
     cba:	3f 90       	pop	r3
     cbc:	2f 90       	pop	r2
     cbe:	1f 90       	pop	r1
     cc0:	0f 90       	pop	r0
     cc2:	0c be       	out	0x3c, r0	; 60
     cc4:	0f 90       	pop	r0
     cc6:	0b be       	out	0x3b, r0	; 59
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     cce:	08 95       	ret
	...

00000cd2 <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
     cda:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	88 70       	andi	r24, 0x08	; 8
     ce2:	99 27       	eor	r25, r25
     ce4:	89 2b       	or	r24, r25
     ce6:	11 f0       	breq	.+4      	; 0xcec <prvSetupTimerInterrupt+0x1a>
     ce8:	80 ee       	ldi	r24, 0xE0	; 224
     cea:	01 c0       	rjmp	.+2      	; 0xcee <prvSetupTimerInterrupt+0x1c>
     cec:	80 ec       	ldi	r24, 0xC0	; 192
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	97 70       	andi	r25, 0x07	; 7
     cf2:	89 2b       	or	r24, r25
     cf4:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
     cf6:	88 e1       	ldi	r24, 0x18	; 24
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	a8 95       	wdr
     cfe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
     d08:	00 00       	nop
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d10:	76 df       	rcall	.-276    	; 0xbfe <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d12:	18 95       	reti
	...

00000d16 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <xQueueGenericReset+0x6>
     d1c:	1f 92       	push	r1
     d1e:	1f 92       	push	r1
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	6d 83       	std	Y+5, r22	; 0x05
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	0f 92       	push	r0
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	fc 01       	movw	r30, r24
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	3a 81       	ldd	r19, Y+2	; 0x02
     d46:	f9 01       	movw	r30, r18
     d48:	23 8d       	ldd	r18, Z+27	; 0x1b
     d4a:	42 2f       	mov	r20, r18
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	29 81       	ldd	r18, Y+1	; 0x01
     d50:	3a 81       	ldd	r19, Y+2	; 0x02
     d52:	f9 01       	movw	r30, r18
     d54:	24 8d       	ldd	r18, Z+28	; 0x1c
     d56:	22 2f       	mov	r18, r18
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	42 9f       	mul	r20, r18
     d5c:	b0 01       	movw	r22, r0
     d5e:	43 9f       	mul	r20, r19
     d60:	70 0d       	add	r23, r0
     d62:	52 9f       	mul	r21, r18
     d64:	70 0d       	add	r23, r0
     d66:	11 24       	eor	r1, r1
     d68:	9b 01       	movw	r18, r22
     d6a:	28 0f       	add	r18, r24
     d6c:	39 1f       	adc	r19, r25
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	fc 01       	movw	r30, r24
     d74:	35 83       	std	Z+5, r19	; 0x05
     d76:	24 83       	std	Z+4, r18	; 0x04
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	fc 01       	movw	r30, r24
     d7e:	12 8e       	std	Z+26, r1	; 0x1a
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	fc 01       	movw	r30, r24
     d86:	20 81       	ld	r18, Z
     d88:	31 81       	ldd	r19, Z+1	; 0x01
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	fc 01       	movw	r30, r24
     d90:	33 83       	std	Z+3, r19	; 0x03
     d92:	22 83       	std	Z+2, r18	; 0x02
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	fc 01       	movw	r30, r24
     d9a:	20 81       	ld	r18, Z
     d9c:	31 81       	ldd	r19, Z+1	; 0x01
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	fc 01       	movw	r30, r24
     da4:	83 8d       	ldd	r24, Z+27	; 0x1b
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	bc 01       	movw	r22, r24
     dac:	61 50       	subi	r22, 0x01	; 1
     dae:	71 09       	sbc	r23, r1
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	fc 01       	movw	r30, r24
     db6:	84 8d       	ldd	r24, Z+28	; 0x1c
     db8:	48 2f       	mov	r20, r24
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	64 9f       	mul	r22, r20
     dbe:	c0 01       	movw	r24, r0
     dc0:	65 9f       	mul	r22, r21
     dc2:	90 0d       	add	r25, r0
     dc4:	74 9f       	mul	r23, r20
     dc6:	90 0d       	add	r25, r0
     dc8:	11 24       	eor	r1, r1
     dca:	28 0f       	add	r18, r24
     dcc:	39 1f       	adc	r19, r25
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	fc 01       	movw	r30, r24
     dd4:	37 83       	std	Z+7, r19	; 0x07
     dd6:	26 83       	std	Z+6, r18	; 0x06
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	fc 01       	movw	r30, r24
     de0:	25 8f       	std	Z+29, r18	; 0x1d
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	2f ef       	ldi	r18, 0xFF	; 255
     de8:	fc 01       	movw	r30, r24
     dea:	26 8f       	std	Z+30, r18	; 0x1e
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	88 23       	and	r24, r24
     df0:	79 f4       	brne	.+30     	; 0xe10 <xQueueGenericReset+0xfa>
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	fc 01       	movw	r30, r24
     df8:	80 85       	ldd	r24, Z+8	; 0x08
     dfa:	88 23       	and	r24, r24
     dfc:	89 f0       	breq	.+34     	; 0xe20 <xQueueGenericReset+0x10a>
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	08 96       	adiw	r24, 0x08	; 8
     e04:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskRemoveFromEventList>
     e08:	88 23       	and	r24, r24
     e0a:	51 f0       	breq	.+20     	; 0xe20 <xQueueGenericReset+0x10a>
     e0c:	96 de       	rcall	.-724    	; 0xb3a <vPortYield>
     e0e:	08 c0       	rjmp	.+16     	; 0xe20 <xQueueGenericReset+0x10a>
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	08 96       	adiw	r24, 0x08	; 8
     e16:	2e db       	rcall	.-2468   	; 0x474 <vListInitialise>
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	41 96       	adiw	r24, 0x11	; 17
     e1e:	2a db       	rcall	.-2476   	; 0x474 <vListInitialise>
     e20:	0f 90       	pop	r0
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <xQueueGenericCreate>:
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	29 97       	sbiw	r28, 0x09	; 9
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	8f 83       	std	Y+7, r24	; 0x07
     e50:	68 87       	std	Y+8, r22	; 0x08
     e52:	49 87       	std	Y+9, r20	; 0x09
     e54:	88 85       	ldd	r24, Y+8	; 0x08
     e56:	88 23       	and	r24, r24
     e58:	19 f4       	brne	.+6      	; 0xe60 <xQueueGenericCreate+0x2a>
     e5a:	1a 82       	std	Y+2, r1	; 0x02
     e5c:	19 82       	std	Y+1, r1	; 0x01
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <xQueueGenericCreate+0x48>
     e60:	8f 81       	ldd	r24, Y+7	; 0x07
     e62:	48 2f       	mov	r20, r24
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	88 85       	ldd	r24, Y+8	; 0x08
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	42 9f       	mul	r20, r18
     e6e:	c0 01       	movw	r24, r0
     e70:	43 9f       	mul	r20, r19
     e72:	90 0d       	add	r25, r0
     e74:	52 9f       	mul	r21, r18
     e76:	90 0d       	add	r25, r0
     e78:	11 24       	eor	r1, r1
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	81 96       	adiw	r24, 0x21	; 33
     e84:	bc da       	rcall	.-2696   	; 0x3fe <pvPortMalloc>
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	89 2b       	or	r24, r25
     e90:	99 f0       	breq	.+38     	; 0xeb8 <xQueueGenericCreate+0x82>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	81 96       	adiw	r24, 0x21	; 33
     ea0:	9e 83       	std	Y+6, r25	; 0x06
     ea2:	8d 83       	std	Y+5, r24	; 0x05
     ea4:	2b 81       	ldd	r18, Y+3	; 0x03
     ea6:	3c 81       	ldd	r19, Y+4	; 0x04
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	89 01       	movw	r16, r18
     eae:	29 85       	ldd	r18, Y+9	; 0x09
     eb0:	ac 01       	movw	r20, r24
     eb2:	68 85       	ldd	r22, Y+8	; 0x08
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
     eb6:	0d d0       	rcall	.+26     	; 0xed2 <prvInitialiseNewQueue>
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	29 96       	adiw	r28, 0x09	; 9
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <prvInitialiseNewQueue>:
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	27 97       	sbiw	r28, 0x07	; 7
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	6a 83       	std	Y+2, r22	; 0x02
     eee:	5c 83       	std	Y+4, r21	; 0x04
     ef0:	4b 83       	std	Y+3, r20	; 0x03
     ef2:	2d 83       	std	Y+5, r18	; 0x05
     ef4:	1f 83       	std	Y+7, r17	; 0x07
     ef6:	0e 83       	std	Y+6, r16	; 0x06
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	88 23       	and	r24, r24
     efc:	41 f4       	brne	.+16     	; 0xf0e <prvInitialiseNewQueue+0x3c>
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	9f 81       	ldd	r25, Y+7	; 0x07
     f02:	2e 81       	ldd	r18, Y+6	; 0x06
     f04:	3f 81       	ldd	r19, Y+7	; 0x07
     f06:	fc 01       	movw	r30, r24
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	20 83       	st	Z, r18
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <prvInitialiseNewQueue+0x4a>
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	2b 81       	ldd	r18, Y+3	; 0x03
     f14:	3c 81       	ldd	r19, Y+4	; 0x04
     f16:	fc 01       	movw	r30, r24
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	20 83       	st	Z, r18
     f1c:	8e 81       	ldd	r24, Y+6	; 0x06
     f1e:	9f 81       	ldd	r25, Y+7	; 0x07
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	fc 01       	movw	r30, r24
     f24:	23 8f       	std	Z+27, r18	; 0x1b
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f 81       	ldd	r25, Y+7	; 0x07
     f2a:	2a 81       	ldd	r18, Y+2	; 0x02
     f2c:	fc 01       	movw	r30, r24
     f2e:	24 8f       	std	Z+28, r18	; 0x1c
     f30:	8e 81       	ldd	r24, Y+6	; 0x06
     f32:	9f 81       	ldd	r25, Y+7	; 0x07
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	ef de       	rcall	.-546    	; 0xd16 <xQueueGenericReset>
     f38:	8e 81       	ldd	r24, Y+6	; 0x06
     f3a:	9f 81       	ldd	r25, Y+7	; 0x07
     f3c:	2d 81       	ldd	r18, Y+5	; 0x05
     f3e:	fc 01       	movw	r30, r24
     f40:	20 a3       	std	Z+32, r18	; 0x20
     f42:	00 00       	nop
     f44:	27 96       	adiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <prvInitialiseMutex>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	1f 92       	push	r1
     f60:	1f 92       	push	r1
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	89 2b       	or	r24, r25
     f70:	b1 f0       	breq	.+44     	; 0xf9e <prvInitialiseMutex+0x44>
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	fc 01       	movw	r30, r24
     f78:	15 82       	std	Z+5, r1	; 0x05
     f7a:	14 82       	std	Z+4, r1	; 0x04
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	fc 01       	movw	r30, r24
     f82:	11 82       	std	Z+1, r1	; 0x01
     f84:	10 82       	st	Z, r1
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	fc 01       	movw	r30, r24
     f8c:	16 82       	std	Z+6, r1	; 0x06
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	24 d0       	rcall	.+72     	; 0xfe6 <xQueueGenericSend>
     f9e:	00 00       	nop
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <xQueueCreateMutex>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <xQueueCreateMutex+0x6>
     fb0:	1f 92       	push	r1
     fb2:	1f 92       	push	r1
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	1a 82       	std	Y+2, r1	; 0x02
     fc0:	4d 81       	ldd	r20, Y+5	; 0x05
     fc2:	6a 81       	ldd	r22, Y+2	; 0x02
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	37 df       	rcall	.-402    	; 0xe36 <xQueueGenericCreate>
     fc8:	9c 83       	std	Y+4, r25	; 0x04
     fca:	8b 83       	std	Y+3, r24	; 0x03
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	c4 df       	rcall	.-120    	; 0xf5a <prvInitialiseMutex>
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <xQueueGenericSend>:
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	2e 97       	sbiw	r28, 0x0e	; 14
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	99 87       	std	Y+9, r25	; 0x09
     ffc:	88 87       	std	Y+8, r24	; 0x08
     ffe:	7b 87       	std	Y+11, r23	; 0x0b
    1000:	6a 87       	std	Y+10, r22	; 0x0a
    1002:	5d 87       	std	Y+13, r21	; 0x0d
    1004:	4c 87       	std	Y+12, r20	; 0x0c
    1006:	2e 87       	std	Y+14, r18	; 0x0e
    1008:	19 82       	std	Y+1, r1	; 0x01
    100a:	88 85       	ldd	r24, Y+8	; 0x08
    100c:	99 85       	ldd	r25, Y+9	; 0x09
    100e:	9b 83       	std	Y+3, r25	; 0x03
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	0f 92       	push	r0
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	fc 01       	movw	r30, r24
    101e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	fc 01       	movw	r30, r24
    1026:	83 8d       	ldd	r24, Z+27	; 0x1b
    1028:	28 17       	cp	r18, r24
    102a:	18 f0       	brcs	.+6      	; 0x1032 <xQueueGenericSend+0x4c>
    102c:	8e 85       	ldd	r24, Y+14	; 0x0e
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	f9 f4       	brne	.+62     	; 0x1070 <xQueueGenericSend+0x8a>
    1032:	2a 85       	ldd	r18, Y+10	; 0x0a
    1034:	3b 85       	ldd	r19, Y+11	; 0x0b
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	4e 85       	ldd	r20, Y+14	; 0x0e
    103c:	b9 01       	movw	r22, r18
    103e:	7f d2       	rcall	.+1278   	; 0x153e <prvCopyDataToQueue>
    1040:	8c 83       	std	Y+4, r24	; 0x04
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	fc 01       	movw	r30, r24
    1048:	81 89       	ldd	r24, Z+17	; 0x11
    104a:	88 23       	and	r24, r24
    104c:	49 f0       	breq	.+18     	; 0x1060 <xQueueGenericSend+0x7a>
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	41 96       	adiw	r24, 0x11	; 17
    1054:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskRemoveFromEventList>
    1058:	88 23       	and	r24, r24
    105a:	31 f0       	breq	.+12     	; 0x1068 <xQueueGenericSend+0x82>
    105c:	6e dd       	rcall	.-1316   	; 0xb3a <vPortYield>
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <xQueueGenericSend+0x82>
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	88 23       	and	r24, r24
    1064:	09 f0       	breq	.+2      	; 0x1068 <xQueueGenericSend+0x82>
    1066:	69 dd       	rcall	.-1326   	; 0xb3a <vPortYield>
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	5b c0       	rjmp	.+182    	; 0x1126 <xQueueGenericSend+0x140>
    1070:	8c 85       	ldd	r24, Y+12	; 0x0c
    1072:	9d 85       	ldd	r25, Y+13	; 0x0d
    1074:	89 2b       	or	r24, r25
    1076:	21 f4       	brne	.+8      	; 0x1080 <xQueueGenericSend+0x9a>
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	53 c0       	rjmp	.+166    	; 0x1126 <xQueueGenericSend+0x140>
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	88 23       	and	r24, r24
    1084:	31 f4       	brne	.+12     	; 0x1092 <xQueueGenericSend+0xac>
    1086:	ce 01       	movw	r24, r28
    1088:	05 96       	adiw	r24, 0x05	; 5
    108a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskInternalSetTimeOutState>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	0f 92       	push	r0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	9b 81       	ldd	r25, Y+3	; 0x03
    10a4:	fc 01       	movw	r30, r24
    10a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    10a8:	8f 3f       	cpi	r24, 0xFF	; 255
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <xQueueGenericSend+0xce>
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	9b 81       	ldd	r25, Y+3	; 0x03
    10b0:	fc 01       	movw	r30, r24
    10b2:	15 8e       	std	Z+29, r1	; 0x1d
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	fc 01       	movw	r30, r24
    10ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    10bc:	8f 3f       	cpi	r24, 0xFF	; 255
    10be:	21 f4       	brne	.+8      	; 0x10c8 <xQueueGenericSend+0xe2>
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	fc 01       	movw	r30, r24
    10c6:	16 8e       	std	Z+30, r1	; 0x1e
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	9e 01       	movw	r18, r28
    10ce:	24 5f       	subi	r18, 0xF4	; 244
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	ce 01       	movw	r24, r28
    10d4:	05 96       	adiw	r24, 0x05	; 5
    10d6:	b9 01       	movw	r22, r18
    10d8:	0e 94 90 17 	call	0x2f20	; 0x2f20 <xTaskCheckForTimeOut>
    10dc:	88 23       	and	r24, r24
    10de:	e9 f4       	brne	.+58     	; 0x111a <xQueueGenericSend+0x134>
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	c8 d3       	rcall	.+1936   	; 0x1876 <prvIsQueueFull>
    10e6:	88 23       	and	r24, r24
    10e8:	91 f0       	breq	.+36     	; 0x110e <xQueueGenericSend+0x128>
    10ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	9b 81       	ldd	r25, Y+3	; 0x03
    10f2:	08 96       	adiw	r24, 0x08	; 8
    10f4:	b9 01       	movw	r22, r18
    10f6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <vTaskPlaceOnEventList>
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	9b 81       	ldd	r25, Y+3	; 0x03
    10fe:	40 d3       	rcall	.+1664   	; 0x1780 <prvUnlockQueue>
    1100:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    1104:	88 23       	and	r24, r24
    1106:	09 f0       	breq	.+2      	; 0x110a <xQueueGenericSend+0x124>
    1108:	84 cf       	rjmp	.-248    	; 0x1012 <xQueueGenericSend+0x2c>
    110a:	17 dd       	rcall	.-1490   	; 0xb3a <vPortYield>
    110c:	82 cf       	rjmp	.-252    	; 0x1012 <xQueueGenericSend+0x2c>
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	36 d3       	rcall	.+1644   	; 0x1780 <prvUnlockQueue>
    1114:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    1118:	7c cf       	rjmp	.-264    	; 0x1012 <xQueueGenericSend+0x2c>
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	30 d3       	rcall	.+1632   	; 0x1780 <prvUnlockQueue>
    1120:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	2e 96       	adiw	r28, 0x0e	; 14
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <xQueueGenericSendFromISR>:
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	2c 97       	sbiw	r28, 0x0c	; 12
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	9f 83       	std	Y+7, r25	; 0x07
    114e:	8e 83       	std	Y+6, r24	; 0x06
    1150:	79 87       	std	Y+9, r23	; 0x09
    1152:	68 87       	std	Y+8, r22	; 0x08
    1154:	5b 87       	std	Y+11, r21	; 0x0b
    1156:	4a 87       	std	Y+10, r20	; 0x0a
    1158:	2c 87       	std	Y+12, r18	; 0x0c
    115a:	8e 81       	ldd	r24, Y+6	; 0x06
    115c:	9f 81       	ldd	r25, Y+7	; 0x07
    115e:	9b 83       	std	Y+3, r25	; 0x03
    1160:	8a 83       	std	Y+2, r24	; 0x02
    1162:	1c 82       	std	Y+4, r1	; 0x04
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	fc 01       	movw	r30, r24
    116a:	22 8d       	ldd	r18, Z+26	; 0x1a
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	fc 01       	movw	r30, r24
    1172:	83 8d       	ldd	r24, Z+27	; 0x1b
    1174:	28 17       	cp	r18, r24
    1176:	18 f0       	brcs	.+6      	; 0x117e <xQueueGenericSendFromISR+0x46>
    1178:	8c 85       	ldd	r24, Y+12	; 0x0c
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	81 f5       	brne	.+96     	; 0x11de <xQueueGenericSendFromISR+0xa6>
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	fc 01       	movw	r30, r24
    1184:	86 8d       	ldd	r24, Z+30	; 0x1e
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	28 85       	ldd	r18, Y+8	; 0x08
    118a:	39 85       	ldd	r19, Y+9	; 0x09
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
    1190:	4c 85       	ldd	r20, Y+12	; 0x0c
    1192:	b9 01       	movw	r22, r18
    1194:	d4 d1       	rcall	.+936    	; 0x153e <prvCopyDataToQueue>
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	8f 3f       	cpi	r24, 0xFF	; 255
    119a:	b9 f4       	brne	.+46     	; 0x11ca <xQueueGenericSendFromISR+0x92>
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	9b 81       	ldd	r25, Y+3	; 0x03
    11a0:	fc 01       	movw	r30, r24
    11a2:	81 89       	ldd	r24, Z+17	; 0x11
    11a4:	88 23       	and	r24, r24
    11a6:	c1 f0       	breq	.+48     	; 0x11d8 <xQueueGenericSendFromISR+0xa0>
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	9b 81       	ldd	r25, Y+3	; 0x03
    11ac:	41 96       	adiw	r24, 0x11	; 17
    11ae:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskRemoveFromEventList>
    11b2:	88 23       	and	r24, r24
    11b4:	89 f0       	breq	.+34     	; 0x11d8 <xQueueGenericSendFromISR+0xa0>
    11b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ba:	89 2b       	or	r24, r25
    11bc:	69 f0       	breq	.+26     	; 0x11d8 <xQueueGenericSendFromISR+0xa0>
    11be:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c2:	21 e0       	ldi	r18, 0x01	; 1
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <xQueueGenericSendFromISR+0xa0>
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	28 2f       	mov	r18, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	fc 01       	movw	r30, r24
    11d6:	26 8f       	std	Z+30, r18	; 0x1e
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <xQueueGenericSendFromISR+0xa8>
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	2c 96       	adiw	r28, 0x0c	; 12
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	08 95       	ret

000011f4 <xQueueReceive>:
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	2d 97       	sbiw	r28, 0x0d	; 13
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	99 87       	std	Y+9, r25	; 0x09
    120a:	88 87       	std	Y+8, r24	; 0x08
    120c:	7b 87       	std	Y+11, r23	; 0x0b
    120e:	6a 87       	std	Y+10, r22	; 0x0a
    1210:	5d 87       	std	Y+13, r21	; 0x0d
    1212:	4c 87       	std	Y+12, r20	; 0x0c
    1214:	19 82       	std	Y+1, r1	; 0x01
    1216:	88 85       	ldd	r24, Y+8	; 0x08
    1218:	99 85       	ldd	r25, Y+9	; 0x09
    121a:	9b 83       	std	Y+3, r25	; 0x03
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	0f 92       	push	r0
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	9b 81       	ldd	r25, Y+3	; 0x03
    1228:	fc 01       	movw	r30, r24
    122a:	82 8d       	ldd	r24, Z+26	; 0x1a
    122c:	8c 83       	std	Y+4, r24	; 0x04
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	88 23       	and	r24, r24
    1232:	f9 f0       	breq	.+62     	; 0x1272 <xQueueReceive+0x7e>
    1234:	2a 85       	ldd	r18, Y+10	; 0x0a
    1236:	3b 85       	ldd	r19, Y+11	; 0x0b
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	b9 01       	movw	r22, r18
    123e:	4f d2       	rcall	.+1182   	; 0x16de <prvCopyDataFromQueue>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	2f ef       	ldi	r18, 0xFF	; 255
    1244:	28 0f       	add	r18, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	fc 01       	movw	r30, r24
    124c:	22 8f       	std	Z+26, r18	; 0x1a
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	fc 01       	movw	r30, r24
    1254:	80 85       	ldd	r24, Z+8	; 0x08
    1256:	88 23       	and	r24, r24
    1258:	41 f0       	breq	.+16     	; 0x126a <xQueueReceive+0x76>
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	08 96       	adiw	r24, 0x08	; 8
    1260:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskRemoveFromEventList>
    1264:	88 23       	and	r24, r24
    1266:	09 f0       	breq	.+2      	; 0x126a <xQueueReceive+0x76>
    1268:	68 dc       	rcall	.-1840   	; 0xb3a <vPortYield>
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	61 c0       	rjmp	.+194    	; 0x1334 <xQueueReceive+0x140>
    1272:	8c 85       	ldd	r24, Y+12	; 0x0c
    1274:	9d 85       	ldd	r25, Y+13	; 0x0d
    1276:	89 2b       	or	r24, r25
    1278:	21 f4       	brne	.+8      	; 0x1282 <xQueueReceive+0x8e>
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	59 c0       	rjmp	.+178    	; 0x1334 <xQueueReceive+0x140>
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	88 23       	and	r24, r24
    1286:	31 f4       	brne	.+12     	; 0x1294 <xQueueReceive+0xa0>
    1288:	ce 01       	movw	r24, r28
    128a:	05 96       	adiw	r24, 0x05	; 5
    128c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskInternalSetTimeOutState>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	fc 01       	movw	r30, r24
    12a8:	85 8d       	ldd	r24, Z+29	; 0x1d
    12aa:	8f 3f       	cpi	r24, 0xFF	; 255
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <xQueueReceive+0xc2>
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	9b 81       	ldd	r25, Y+3	; 0x03
    12b2:	fc 01       	movw	r30, r24
    12b4:	15 8e       	std	Z+29, r1	; 0x1d
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	fc 01       	movw	r30, r24
    12bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    12be:	8f 3f       	cpi	r24, 0xFF	; 255
    12c0:	21 f4       	brne	.+8      	; 0x12ca <xQueueReceive+0xd6>
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	fc 01       	movw	r30, r24
    12c8:	16 8e       	std	Z+30, r1	; 0x1e
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	9e 01       	movw	r18, r28
    12d0:	24 5f       	subi	r18, 0xF4	; 244
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	ce 01       	movw	r24, r28
    12d6:	05 96       	adiw	r24, 0x05	; 5
    12d8:	b9 01       	movw	r22, r18
    12da:	0e 94 90 17 	call	0x2f20	; 0x2f20 <xTaskCheckForTimeOut>
    12de:	88 23       	and	r24, r24
    12e0:	e9 f4       	brne	.+58     	; 0x131c <xQueueReceive+0x128>
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	aa d2       	rcall	.+1364   	; 0x183c <prvIsQueueEmpty>
    12e8:	88 23       	and	r24, r24
    12ea:	91 f0       	breq	.+36     	; 0x1310 <xQueueReceive+0x11c>
    12ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	41 96       	adiw	r24, 0x11	; 17
    12f6:	b9 01       	movw	r22, r18
    12f8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <vTaskPlaceOnEventList>
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1300:	3f d2       	rcall	.+1150   	; 0x1780 <prvUnlockQueue>
    1302:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    1306:	88 23       	and	r24, r24
    1308:	09 f0       	breq	.+2      	; 0x130c <xQueueReceive+0x118>
    130a:	89 cf       	rjmp	.-238    	; 0x121e <xQueueReceive+0x2a>
    130c:	16 dc       	rcall	.-2004   	; 0xb3a <vPortYield>
    130e:	87 cf       	rjmp	.-242    	; 0x121e <xQueueReceive+0x2a>
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	35 d2       	rcall	.+1130   	; 0x1780 <prvUnlockQueue>
    1316:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    131a:	81 cf       	rjmp	.-254    	; 0x121e <xQueueReceive+0x2a>
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	2f d2       	rcall	.+1118   	; 0x1780 <prvUnlockQueue>
    1322:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	88 d2       	rcall	.+1296   	; 0x183c <prvIsQueueEmpty>
    132c:	88 23       	and	r24, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <xQueueReceive+0x13e>
    1330:	76 cf       	rjmp	.-276    	; 0x121e <xQueueReceive+0x2a>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	2d 96       	adiw	r28, 0x0d	; 13
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <xQueueSemaphoreTake>:
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	2d 97       	sbiw	r28, 0x0d	; 13
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	9b 87       	std	Y+11, r25	; 0x0b
    135c:	8a 87       	std	Y+10, r24	; 0x0a
    135e:	7d 87       	std	Y+13, r23	; 0x0d
    1360:	6c 87       	std	Y+12, r22	; 0x0c
    1362:	19 82       	std	Y+1, r1	; 0x01
    1364:	8a 85       	ldd	r24, Y+10	; 0x0a
    1366:	9b 85       	ldd	r25, Y+11	; 0x0b
    1368:	9c 83       	std	Y+4, r25	; 0x04
    136a:	8b 83       	std	Y+3, r24	; 0x03
    136c:	1a 82       	std	Y+2, r1	; 0x02
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	0f 92       	push	r0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	fc 01       	movw	r30, r24
    137a:	82 8d       	ldd	r24, Z+26	; 0x1a
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	88 23       	and	r24, r24
    1382:	41 f1       	breq	.+80     	; 0x13d4 <xQueueSemaphoreTake+0x8e>
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	2f ef       	ldi	r18, 0xFF	; 255
    1388:	28 0f       	add	r18, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	fc 01       	movw	r30, r24
    1390:	22 8f       	std	Z+26, r18	; 0x1a
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	fc 01       	movw	r30, r24
    1398:	80 81       	ld	r24, Z
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	89 2b       	or	r24, r25
    139e:	41 f4       	brne	.+16     	; 0x13b0 <xQueueSemaphoreTake+0x6a>
    13a0:	0e 94 be 1a 	call	0x357c	; 0x357c <pvTaskIncrementMutexHeldCount>
    13a4:	9c 01       	movw	r18, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	fc 01       	movw	r30, r24
    13ac:	35 83       	std	Z+5, r19	; 0x05
    13ae:	24 83       	std	Z+4, r18	; 0x04
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	fc 01       	movw	r30, r24
    13b6:	80 85       	ldd	r24, Z+8	; 0x08
    13b8:	88 23       	and	r24, r24
    13ba:	41 f0       	breq	.+16     	; 0x13cc <xQueueSemaphoreTake+0x86>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	08 96       	adiw	r24, 0x08	; 8
    13c2:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskRemoveFromEventList>
    13c6:	88 23       	and	r24, r24
    13c8:	09 f0       	breq	.+2      	; 0x13cc <xQueueSemaphoreTake+0x86>
    13ca:	b7 db       	rcall	.-2194   	; 0xb3a <vPortYield>
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	8a c0       	rjmp	.+276    	; 0x14e8 <xQueueSemaphoreTake+0x1a2>
    13d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d8:	89 2b       	or	r24, r25
    13da:	21 f4       	brne	.+8      	; 0x13e4 <xQueueSemaphoreTake+0x9e>
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	82 c0       	rjmp	.+260    	; 0x14e8 <xQueueSemaphoreTake+0x1a2>
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	88 23       	and	r24, r24
    13e8:	31 f4       	brne	.+12     	; 0x13f6 <xQueueSemaphoreTake+0xb0>
    13ea:	ce 01       	movw	r24, r28
    13ec:	07 96       	adiw	r24, 0x07	; 7
    13ee:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskInternalSetTimeOutState>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	0f 92       	push	r0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	fc 01       	movw	r30, r24
    140a:	85 8d       	ldd	r24, Z+29	; 0x1d
    140c:	8f 3f       	cpi	r24, 0xFF	; 255
    140e:	21 f4       	brne	.+8      	; 0x1418 <xQueueSemaphoreTake+0xd2>
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	fc 01       	movw	r30, r24
    1416:	15 8e       	std	Z+29, r1	; 0x1d
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	fc 01       	movw	r30, r24
    141e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1420:	8f 3f       	cpi	r24, 0xFF	; 255
    1422:	21 f4       	brne	.+8      	; 0x142c <xQueueSemaphoreTake+0xe6>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	fc 01       	movw	r30, r24
    142a:	16 8e       	std	Z+30, r1	; 0x1e
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	9e 01       	movw	r18, r28
    1432:	24 5f       	subi	r18, 0xF4	; 244
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	ce 01       	movw	r24, r28
    1438:	07 96       	adiw	r24, 0x07	; 7
    143a:	b9 01       	movw	r22, r18
    143c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <xTaskCheckForTimeOut>
    1440:	88 23       	and	r24, r24
    1442:	09 f0       	breq	.+2      	; 0x1446 <xQueueSemaphoreTake+0x100>
    1444:	31 c0       	rjmp	.+98     	; 0x14a8 <xQueueSemaphoreTake+0x162>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	f8 d1       	rcall	.+1008   	; 0x183c <prvIsQueueEmpty>
    144c:	88 23       	and	r24, r24
    144e:	31 f1       	breq	.+76     	; 0x149c <xQueueSemaphoreTake+0x156>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	fc 01       	movw	r30, r24
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	89 2b       	or	r24, r25
    145c:	69 f4       	brne	.+26     	; 0x1478 <xQueueSemaphoreTake+0x132>
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	0f 92       	push	r0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	fc 01       	movw	r30, r24
    146a:	84 81       	ldd	r24, Z+4	; 0x04
    146c:	95 81       	ldd	r25, Z+5	; 0x05
    146e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskPriorityInherit>
    1472:	8a 83       	std	Y+2, r24	; 0x02
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	2c 85       	ldd	r18, Y+12	; 0x0c
    147a:	3d 85       	ldd	r19, Y+13	; 0x0d
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	41 96       	adiw	r24, 0x11	; 17
    1482:	b9 01       	movw	r22, r18
    1484:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <vTaskPlaceOnEventList>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	79 d1       	rcall	.+754    	; 0x1780 <prvUnlockQueue>
    148e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    1492:	88 23       	and	r24, r24
    1494:	09 f0       	breq	.+2      	; 0x1498 <xQueueSemaphoreTake+0x152>
    1496:	6b cf       	rjmp	.-298    	; 0x136e <xQueueSemaphoreTake+0x28>
    1498:	50 db       	rcall	.-2400   	; 0xb3a <vPortYield>
    149a:	69 cf       	rjmp	.-302    	; 0x136e <xQueueSemaphoreTake+0x28>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	6f d1       	rcall	.+734    	; 0x1780 <prvUnlockQueue>
    14a2:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    14a6:	63 cf       	rjmp	.-314    	; 0x136e <xQueueSemaphoreTake+0x28>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	69 d1       	rcall	.+722    	; 0x1780 <prvUnlockQueue>
    14ae:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	c2 d1       	rcall	.+900    	; 0x183c <prvIsQueueEmpty>
    14b8:	88 23       	and	r24, r24
    14ba:	09 f4       	brne	.+2      	; 0x14be <xQueueSemaphoreTake+0x178>
    14bc:	58 cf       	rjmp	.-336    	; 0x136e <xQueueSemaphoreTake+0x28>
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	88 23       	and	r24, r24
    14c2:	89 f0       	breq	.+34     	; 0x14e6 <xQueueSemaphoreTake+0x1a0>
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	0f 92       	push	r0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	15 d0       	rcall	.+42     	; 0x14fa <prvGetDisinheritPriorityAfterTimeout>
    14d0:	8e 83       	std	Y+6, r24	; 0x06
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	fc 01       	movw	r30, r24
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	95 81       	ldd	r25, Z+5	; 0x05
    14dc:	6e 81       	ldd	r22, Y+6	; 0x06
    14de:	0e 94 1e 1a 	call	0x343c	; 0x343c <vTaskPriorityDisinheritAfterTimeout>
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	2d 96       	adiw	r28, 0x0d	; 13
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <prvGetDisinheritPriorityAfterTimeout>:
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <prvGetDisinheritPriorityAfterTimeout+0x6>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9b 83       	std	Y+3, r25	; 0x03
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	fc 01       	movw	r30, r24
    150e:	81 89       	ldd	r24, Z+17	; 0x11
    1510:	88 23       	and	r24, r24
    1512:	69 f0       	breq	.+26     	; 0x152e <prvGetDisinheritPriorityAfterTimeout+0x34>
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	fc 01       	movw	r30, r24
    151a:	86 89       	ldd	r24, Z+22	; 0x16
    151c:	97 89       	ldd	r25, Z+23	; 0x17
    151e:	fc 01       	movw	r30, r24
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	98 2f       	mov	r25, r24
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	89 1b       	sub	r24, r25
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <prvGetDisinheritPriorityAfterTimeout+0x36>
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <prvCopyDataToQueue>:
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	27 97       	sbiw	r28, 0x07	; 7
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    1556:	7e 83       	std	Y+6, r23	; 0x06
    1558:	6d 83       	std	Y+5, r22	; 0x05
    155a:	4f 83       	std	Y+7, r20	; 0x07
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	fc 01       	movw	r30, r24
    1564:	82 8d       	ldd	r24, Z+26	; 0x1a
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	fc 01       	movw	r30, r24
    156e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1570:	88 23       	and	r24, r24
    1572:	b1 f4       	brne	.+44     	; 0x15a0 <prvCopyDataToQueue+0x62>
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	fc 01       	movw	r30, r24
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	89 2b       	or	r24, r25
    1580:	09 f0       	breq	.+2      	; 0x1584 <prvCopyDataToQueue+0x46>
    1582:	9c c0       	rjmp	.+312    	; 0x16bc <prvCopyDataToQueue+0x17e>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	fc 01       	movw	r30, r24
    158a:	84 81       	ldd	r24, Z+4	; 0x04
    158c:	95 81       	ldd	r25, Z+5	; 0x05
    158e:	0e 94 a1 19 	call	0x3342	; 0x3342 <xTaskPriorityDisinherit>
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	fc 01       	movw	r30, r24
    159a:	15 82       	std	Z+5, r1	; 0x05
    159c:	14 82       	std	Z+4, r1	; 0x04
    159e:	8e c0       	rjmp	.+284    	; 0x16bc <prvCopyDataToQueue+0x17e>
    15a0:	8f 81       	ldd	r24, Y+7	; 0x07
    15a2:	88 23       	and	r24, r24
    15a4:	d9 f5       	brne	.+118    	; 0x161c <prvCopyDataToQueue+0xde>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	fc 01       	movw	r30, r24
    15ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    15ae:	48 2f       	mov	r20, r24
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	fc 01       	movw	r30, r24
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	2d 81       	ldd	r18, Y+5	; 0x05
    15be:	3e 81       	ldd	r19, Y+6	; 0x06
    15c0:	b9 01       	movw	r22, r18
    15c2:	0e 94 03 38 	call	0x7006	; 0x7006 <memcpy>
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	fc 01       	movw	r30, r24
    15cc:	22 81       	ldd	r18, Z+2	; 0x02
    15ce:	33 81       	ldd	r19, Z+3	; 0x03
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	fc 01       	movw	r30, r24
    15d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	28 0f       	add	r18, r24
    15de:	39 1f       	adc	r19, r25
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	fc 01       	movw	r30, r24
    15e6:	33 83       	std	Z+3, r19	; 0x03
    15e8:	22 83       	std	Z+2, r18	; 0x02
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	fc 01       	movw	r30, r24
    15f0:	22 81       	ldd	r18, Z+2	; 0x02
    15f2:	33 81       	ldd	r19, Z+3	; 0x03
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	fc 01       	movw	r30, r24
    15fa:	84 81       	ldd	r24, Z+4	; 0x04
    15fc:	95 81       	ldd	r25, Z+5	; 0x05
    15fe:	28 17       	cp	r18, r24
    1600:	39 07       	cpc	r19, r25
    1602:	08 f4       	brcc	.+2      	; 0x1606 <prvCopyDataToQueue+0xc8>
    1604:	5b c0       	rjmp	.+182    	; 0x16bc <prvCopyDataToQueue+0x17e>
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	fc 01       	movw	r30, r24
    160c:	20 81       	ld	r18, Z
    160e:	31 81       	ldd	r19, Z+1	; 0x01
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	fc 01       	movw	r30, r24
    1616:	33 83       	std	Z+3, r19	; 0x03
    1618:	22 83       	std	Z+2, r18	; 0x02
    161a:	50 c0       	rjmp	.+160    	; 0x16bc <prvCopyDataToQueue+0x17e>
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	fc 01       	movw	r30, r24
    1622:	84 8d       	ldd	r24, Z+28	; 0x1c
    1624:	48 2f       	mov	r20, r24
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	fc 01       	movw	r30, r24
    162e:	86 81       	ldd	r24, Z+6	; 0x06
    1630:	97 81       	ldd	r25, Z+7	; 0x07
    1632:	2d 81       	ldd	r18, Y+5	; 0x05
    1634:	3e 81       	ldd	r19, Y+6	; 0x06
    1636:	b9 01       	movw	r22, r18
    1638:	0e 94 03 38 	call	0x7006	; 0x7006 <memcpy>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	fc 01       	movw	r30, r24
    1642:	26 81       	ldd	r18, Z+6	; 0x06
    1644:	37 81       	ldd	r19, Z+7	; 0x07
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	fc 01       	movw	r30, r24
    164c:	84 8d       	ldd	r24, Z+28	; 0x1c
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	91 95       	neg	r25
    1654:	81 95       	neg	r24
    1656:	91 09       	sbc	r25, r1
    1658:	28 0f       	add	r18, r24
    165a:	39 1f       	adc	r19, r25
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	fc 01       	movw	r30, r24
    1662:	37 83       	std	Z+7, r19	; 0x07
    1664:	26 83       	std	Z+6, r18	; 0x06
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	fc 01       	movw	r30, r24
    166c:	26 81       	ldd	r18, Z+6	; 0x06
    166e:	37 81       	ldd	r19, Z+7	; 0x07
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	28 17       	cp	r18, r24
    167c:	39 07       	cpc	r19, r25
    167e:	a8 f4       	brcc	.+42     	; 0x16aa <prvCopyDataToQueue+0x16c>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	fc 01       	movw	r30, r24
    1686:	24 81       	ldd	r18, Z+4	; 0x04
    1688:	35 81       	ldd	r19, Z+5	; 0x05
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	fc 01       	movw	r30, r24
    1690:	84 8d       	ldd	r24, Z+28	; 0x1c
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	91 95       	neg	r25
    1698:	81 95       	neg	r24
    169a:	91 09       	sbc	r25, r1
    169c:	28 0f       	add	r18, r24
    169e:	39 1f       	adc	r19, r25
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	fc 01       	movw	r30, r24
    16a6:	37 83       	std	Z+7, r19	; 0x07
    16a8:	26 83       	std	Z+6, r18	; 0x06
    16aa:	8f 81       	ldd	r24, Y+7	; 0x07
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	31 f4       	brne	.+12     	; 0x16bc <prvCopyDataToQueue+0x17e>
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	88 23       	and	r24, r24
    16b4:	19 f0       	breq	.+6      	; 0x16bc <prvCopyDataToQueue+0x17e>
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	81 50       	subi	r24, 0x01	; 1
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	28 0f       	add	r18, r24
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	fc 01       	movw	r30, r24
    16c8:	22 8f       	std	Z+26, r18	; 0x1a
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	27 96       	adiw	r28, 0x07	; 7
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <prvCopyDataFromQueue>:
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <prvCopyDataFromQueue+0x6>
    16e4:	1f 92       	push	r1
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	7c 83       	std	Y+4, r23	; 0x04
    16f0:	6b 83       	std	Y+3, r22	; 0x03
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	fc 01       	movw	r30, r24
    16f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    16fa:	88 23       	and	r24, r24
    16fc:	c9 f1       	breq	.+114    	; 0x1770 <prvCopyDataFromQueue+0x92>
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	fc 01       	movw	r30, r24
    1704:	26 81       	ldd	r18, Z+6	; 0x06
    1706:	37 81       	ldd	r19, Z+7	; 0x07
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	fc 01       	movw	r30, r24
    170e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	28 0f       	add	r18, r24
    1716:	39 1f       	adc	r19, r25
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	fc 01       	movw	r30, r24
    171e:	37 83       	std	Z+7, r19	; 0x07
    1720:	26 83       	std	Z+6, r18	; 0x06
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	fc 01       	movw	r30, r24
    1728:	26 81       	ldd	r18, Z+6	; 0x06
    172a:	37 81       	ldd	r19, Z+7	; 0x07
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	fc 01       	movw	r30, r24
    1732:	84 81       	ldd	r24, Z+4	; 0x04
    1734:	95 81       	ldd	r25, Z+5	; 0x05
    1736:	28 17       	cp	r18, r24
    1738:	39 07       	cpc	r19, r25
    173a:	50 f0       	brcs	.+20     	; 0x1750 <prvCopyDataFromQueue+0x72>
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	fc 01       	movw	r30, r24
    1742:	20 81       	ld	r18, Z
    1744:	31 81       	ldd	r19, Z+1	; 0x01
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	fc 01       	movw	r30, r24
    174c:	37 83       	std	Z+7, r19	; 0x07
    174e:	26 83       	std	Z+6, r18	; 0x06
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	fc 01       	movw	r30, r24
    1756:	84 8d       	ldd	r24, Z+28	; 0x1c
    1758:	48 2f       	mov	r20, r24
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	fc 01       	movw	r30, r24
    1762:	26 81       	ldd	r18, Z+6	; 0x06
    1764:	37 81       	ldd	r19, Z+7	; 0x07
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	b9 01       	movw	r22, r18
    176c:	0e 94 03 38 	call	0x7006	; 0x7006 <memcpy>
    1770:	00 00       	nop
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <prvUnlockQueue>:
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	00 d0       	rcall	.+0      	; 0x1786 <prvUnlockQueue+0x6>
    1786:	1f 92       	push	r1
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9c 83       	std	Y+4, r25	; 0x04
    178e:	8b 83       	std	Y+3, r24	; 0x03
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	0f 92       	push	r0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	fc 01       	movw	r30, r24
    179c:	86 8d       	ldd	r24, Z+30	; 0x1e
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	12 c0       	rjmp	.+36     	; 0x17c6 <prvUnlockQueue+0x46>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	fc 01       	movw	r30, r24
    17a8:	81 89       	ldd	r24, Z+17	; 0x11
    17aa:	88 23       	and	r24, r24
    17ac:	81 f0       	breq	.+32     	; 0x17ce <prvUnlockQueue+0x4e>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	41 96       	adiw	r24, 0x11	; 17
    17b4:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskRemoveFromEventList>
    17b8:	88 23       	and	r24, r24
    17ba:	11 f0       	breq	.+4      	; 0x17c0 <prvUnlockQueue+0x40>
    17bc:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskMissedYield>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	81 50       	subi	r24, 0x01	; 1
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	18 16       	cp	r1, r24
    17ca:	5c f3       	brlt	.-42     	; 0x17a2 <prvUnlockQueue+0x22>
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <prvUnlockQueue+0x50>
    17ce:	00 00       	nop
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	2f ef       	ldi	r18, 0xFF	; 255
    17d6:	fc 01       	movw	r30, r24
    17d8:	26 8f       	std	Z+30, r18	; 0x1e
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	0f 92       	push	r0
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	fc 01       	movw	r30, r24
    17ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    17ec:	8a 83       	std	Y+2, r24	; 0x02
    17ee:	12 c0       	rjmp	.+36     	; 0x1814 <prvUnlockQueue+0x94>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 85       	ldd	r24, Z+8	; 0x08
    17f8:	88 23       	and	r24, r24
    17fa:	81 f0       	breq	.+32     	; 0x181c <prvUnlockQueue+0x9c>
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	08 96       	adiw	r24, 0x08	; 8
    1802:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskRemoveFromEventList>
    1806:	88 23       	and	r24, r24
    1808:	11 f0       	breq	.+4      	; 0x180e <prvUnlockQueue+0x8e>
    180a:	0e 94 02 18 	call	0x3004	; 0x3004 <vTaskMissedYield>
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	81 50       	subi	r24, 0x01	; 1
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	18 16       	cp	r1, r24
    1818:	5c f3       	brlt	.-42     	; 0x17f0 <prvUnlockQueue+0x70>
    181a:	01 c0       	rjmp	.+2      	; 0x181e <prvUnlockQueue+0x9e>
    181c:	00 00       	nop
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	2f ef       	ldi	r18, 0xFF	; 255
    1824:	fc 01       	movw	r30, r24
    1826:	25 8f       	std	Z+29, r18	; 0x1d
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	00 00       	nop
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <prvIsQueueEmpty>:
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	00 d0       	rcall	.+0      	; 0x1842 <prvIsQueueEmpty+0x6>
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	9b 83       	std	Y+3, r25	; 0x03
    1848:	8a 83       	std	Y+2, r24	; 0x02
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	0f 92       	push	r0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	fc 01       	movw	r30, r24
    1856:	82 8d       	ldd	r24, Z+26	; 0x1a
    1858:	88 23       	and	r24, r24
    185a:	19 f4       	brne	.+6      	; 0x1862 <prvIsQueueEmpty+0x26>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <prvIsQueueEmpty+0x28>
    1862:	19 82       	std	Y+1, r1	; 0x01
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <prvIsQueueFull>:
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	00 d0       	rcall	.+0      	; 0x187c <prvIsQueueFull+0x6>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	9b 83       	std	Y+3, r25	; 0x03
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	0f 92       	push	r0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	fc 01       	movw	r30, r24
    1890:	22 8d       	ldd	r18, Z+26	; 0x1a
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	fc 01       	movw	r30, r24
    1898:	83 8d       	ldd	r24, Z+27	; 0x1b
    189a:	28 17       	cp	r18, r24
    189c:	19 f4       	brne	.+6      	; 0x18a4 <prvIsQueueFull+0x2e>
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <prvIsQueueFull+0x30>
    18a4:	19 82       	std	Y+1, r1	; 0x01
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	27 97       	sbiw	r28, 0x07	; 7
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	7e 83       	std	Y+6, r23	; 0x06
    18d2:	6d 83       	std	Y+5, r22	; 0x05
    18d4:	4f 83       	std	Y+7, r20	; 0x07
    Queue_t * const pxQueue = xQueue;
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	9a 83       	std	Y+2, r25	; 0x02
    18dc:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	0f 92       	push	r0
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	fc 01       	movw	r30, r24
    18ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    18ec:	8f 3f       	cpi	r24, 0xFF	; 255
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <vQueueWaitForMessageRestricted+0x40>
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	fc 01       	movw	r30, r24
    18f6:	15 8e       	std	Z+29, r1	; 0x1d
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	fc 01       	movw	r30, r24
    18fe:	86 8d       	ldd	r24, Z+30	; 0x1e
    1900:	8f 3f       	cpi	r24, 0xFF	; 255
    1902:	21 f4       	brne	.+8      	; 0x190c <vQueueWaitForMessageRestricted+0x54>
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	fc 01       	movw	r30, r24
    190a:	16 8e       	std	Z+30, r1	; 0x1e
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	fc 01       	movw	r30, r24
    1916:	82 8d       	ldd	r24, Z+26	; 0x1a
    1918:	88 23       	and	r24, r24
    191a:	49 f4       	brne	.+18     	; 0x192e <vQueueWaitForMessageRestricted+0x76>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	41 96       	adiw	r24, 0x11	; 17
    1922:	2d 81       	ldd	r18, Y+5	; 0x05
    1924:	3e 81       	ldd	r19, Y+6	; 0x06
    1926:	4f 81       	ldd	r20, Y+7	; 0x07
    1928:	b9 01       	movw	r22, r18
    192a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	26 df       	rcall	.-436    	; 0x1780 <prvUnlockQueue>
    }
    1934:	00 00       	nop
    1936:	27 96       	adiw	r28, 0x07	; 7
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    1948:	0f 93       	push	r16
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	28 97       	sbiw	r28, 0x08	; 8
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	9d 83       	std	Y+5, r25	; 0x05
    1960:	8c 83       	std	Y+4, r24	; 0x04
    1962:	7f 83       	std	Y+7, r23	; 0x07
    1964:	6e 83       	std	Y+6, r22	; 0x06
    1966:	48 87       	std	Y+8, r20	; 0x08
    1968:	88 85       	ldd	r24, Y+8	; 0x08
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	19 f4       	brne	.+6      	; 0x1974 <xStreamBufferGenericCreate+0x2c>
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <xStreamBufferGenericCreate+0x2e>
    1974:	19 82       	std	Y+1, r1	; 0x01
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	89 2b       	or	r24, r25
    197c:	21 f4       	brne	.+8      	; 0x1986 <xStreamBufferGenericCreate+0x3e>
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9f 83       	std	Y+7, r25	; 0x07
    1984:	8e 83       	std	Y+6, r24	; 0x06
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	9d 83       	std	Y+5, r25	; 0x05
    198e:	8c 83       	std	Y+4, r24	; 0x04
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	40 96       	adiw	r24, 0x10	; 16
    1996:	0e 94 ff 01 	call	0x3fe	; 0x3fe <pvPortMalloc>
    199a:	9b 83       	std	Y+3, r25	; 0x03
    199c:	8a 83       	std	Y+2, r24	; 0x02
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	89 2b       	or	r24, r25
    19a4:	69 f0       	breq	.+26     	; 0x19c0 <xStreamBufferGenericCreate+0x78>
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	9b 81       	ldd	r25, Y+3	; 0x03
    19aa:	bc 01       	movw	r22, r24
    19ac:	60 5f       	subi	r22, 0xF0	; 240
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	2e 81       	ldd	r18, Y+6	; 0x06
    19b2:	3f 81       	ldd	r19, Y+7	; 0x07
    19b4:	4c 81       	ldd	r20, Y+4	; 0x04
    19b6:	5d 81       	ldd	r21, Y+5	; 0x05
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	09 81       	ldd	r16, Y+1	; 0x01
    19be:	f7 d4       	rcall	.+2542   	; 0x23ae <prvInitialiseNewStreamBuffer>
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	28 96       	adiw	r28, 0x08	; 8
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <xStreamBufferReset>:
    19d8:	0f 93       	push	r16
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <xStreamBufferReset+0x8>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <xStreamBufferReset+0xa>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	9b 83       	std	Y+3, r25	; 0x03
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	dc 01       	movw	r26, r24
    19fa:	1f 96       	adiw	r26, 0x0f	; 15
    19fc:	8c 91       	ld	r24, X
    19fe:	8c 83       	std	Y+4, r24	; 0x04
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	0f 92       	push	r0
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	80 85       	ldd	r24, Z+8	; 0x08
    1a0e:	91 85       	ldd	r25, Z+9	; 0x09
    1a10:	89 2b       	or	r24, r25
    1a12:	71 f5       	brne	.+92     	; 0x1a70 <xStreamBufferReset+0x98>
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	9b 81       	ldd	r25, Y+3	; 0x03
    1a18:	dc 01       	movw	r26, r24
    1a1a:	1a 96       	adiw	r26, 0x0a	; 10
    1a1c:	8d 91       	ld	r24, X+
    1a1e:	9c 91       	ld	r25, X
    1a20:	1b 97       	sbiw	r26, 0x0b	; 11
    1a22:	89 2b       	or	r24, r25
    1a24:	29 f5       	brne	.+74     	; 0x1a70 <xStreamBufferReset+0x98>
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	1e 96       	adiw	r26, 0x0e	; 14
    1a2e:	ec 91       	ld	r30, X
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	9b 81       	ldd	r25, Y+3	; 0x03
    1a34:	dc 01       	movw	r26, r24
    1a36:	16 96       	adiw	r26, 0x06	; 6
    1a38:	2d 91       	ld	r18, X+
    1a3a:	3c 91       	ld	r19, X
    1a3c:	17 97       	sbiw	r26, 0x07	; 7
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	dc 01       	movw	r26, r24
    1a44:	14 96       	adiw	r26, 0x04	; 4
    1a46:	4d 91       	ld	r20, X+
    1a48:	5c 91       	ld	r21, X
    1a4a:	15 97       	sbiw	r26, 0x05	; 5
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a50:	dc 01       	movw	r26, r24
    1a52:	1c 96       	adiw	r26, 0x0c	; 12
    1a54:	6d 91       	ld	r22, X+
    1a56:	7c 91       	ld	r23, X
    1a58:	1d 97       	sbiw	r26, 0x0d	; 13
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5e:	0e 2f       	mov	r16, r30
    1a60:	a6 d4       	rcall	.+2380   	; 0x23ae <prvInitialiseNewStreamBuffer>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	27 87       	std	Z+15, r18	; 0x0f
    1a70:	0f 90       	pop	r0
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	26 96       	adiw	r28, 0x06	; 6
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <xStreamBufferSpacesAvailable>:
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <xStreamBufferSpacesAvailable+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <xStreamBufferSpacesAvailable+0x8>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	24 81       	ldd	r18, Z+4	; 0x04
    1aaa:	35 81       	ldd	r19, Z+5	; 0x05
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	82 0f       	add	r24, r18
    1ab8:	93 1f       	adc	r25, r19
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	29 81       	ldd	r18, Y+1	; 0x01
    1aca:	3a 81       	ldd	r19, Y+2	; 0x02
    1acc:	a9 01       	movw	r20, r18
    1ace:	48 1b       	sub	r20, r24
    1ad0:	59 0b       	sbc	r21, r25
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	24 81       	ldd	r18, Z+4	; 0x04
    1aea:	35 81       	ldd	r19, Z+5	; 0x05
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	82 17       	cp	r24, r18
    1af2:	93 07       	cpc	r25, r19
    1af4:	68 f0       	brcs	.+26     	; 0x1b10 <xStreamBufferSpacesAvailable+0x86>
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	fc 01       	movw	r30, r24
    1afc:	84 81       	ldd	r24, Z+4	; 0x04
    1afe:	95 81       	ldd	r25, Z+5	; 0x05
    1b00:	29 81       	ldd	r18, Y+1	; 0x01
    1b02:	3a 81       	ldd	r19, Y+2	; 0x02
    1b04:	a9 01       	movw	r20, r18
    1b06:	48 1b       	sub	r20, r24
    1b08:	59 0b       	sbc	r21, r25
    1b0a:	ca 01       	movw	r24, r20
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	26 96       	adiw	r28, 0x06	; 6
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <xStreamBufferSend>:
    1b26:	ef 92       	push	r14
    1b28:	ff 92       	push	r15
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	63 97       	sbiw	r28, 0x13	; 19
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	9d 87       	std	Y+13, r25	; 0x0d
    1b44:	8c 87       	std	Y+12, r24	; 0x0c
    1b46:	7f 87       	std	Y+15, r23	; 0x0f
    1b48:	6e 87       	std	Y+14, r22	; 0x0e
    1b4a:	59 8b       	std	Y+17, r21	; 0x11
    1b4c:	48 8b       	std	Y+16, r20	; 0x10
    1b4e:	3b 8b       	std	Y+19, r19	; 0x13
    1b50:	2a 8b       	std	Y+18, r18	; 0x12
    1b52:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b54:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	1a 82       	std	Y+2, r1	; 0x02
    1b5c:	19 82       	std	Y+1, r1	; 0x01
    1b5e:	88 89       	ldd	r24, Y+16	; 0x10
    1b60:	99 89       	ldd	r25, Y+17	; 0x11
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	86 85       	ldd	r24, Z+14	; 0x0e
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	99 27       	eor	r25, r25
    1b76:	89 2b       	or	r24, r25
    1b78:	29 f0       	breq	.+10     	; 0x1b84 <xStreamBufferSend+0x5e>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	02 96       	adiw	r24, 0x02	; 2
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    1b84:	8a 89       	ldd	r24, Y+18	; 0x12
    1b86:	9b 89       	ldd	r25, Y+19	; 0x13
    1b88:	89 2b       	or	r24, r25
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <xStreamBufferSend+0x68>
    1b8c:	42 c0       	rjmp	.+132    	; 0x1c12 <xStreamBufferSend+0xec>
    1b8e:	ce 01       	movw	r24, r28
    1b90:	09 96       	adiw	r24, 0x09	; 9
    1b92:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <vTaskSetTimeOutState>
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	0f 92       	push	r0
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	74 df       	rcall	.-280    	; 0x1a8a <xStreamBufferSpacesAvailable>
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	29 81       	ldd	r18, Y+1	; 0x01
    1ba8:	3a 81       	ldd	r19, Y+2	; 0x02
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	28 17       	cp	r18, r24
    1bb0:	39 07       	cpc	r19, r25
    1bb2:	68 f4       	brcc	.+26     	; 0x1bce <xStreamBufferSend+0xa8>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <xTaskNotifyStateClear>
    1bbc:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskGetCurrentTaskHandle>
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	33 87       	std	Z+11, r19	; 0x0b
    1bca:	22 87       	std	Z+10, r18	; 0x0a
    1bcc:	03 c0       	rjmp	.+6      	; 0x1bd4 <xStreamBufferSend+0xae>
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	1f c0       	rjmp	.+62     	; 0x1c12 <xStreamBufferSend+0xec>
    1bd4:	0f 90       	pop	r0
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	8a 89       	ldd	r24, Y+18	; 0x12
    1bda:	9b 89       	ldd	r25, Y+19	; 0x13
    1bdc:	7c 01       	movw	r14, r24
    1bde:	00 e0       	ldi	r16, 0x00	; 0
    1be0:	10 e0       	ldi	r17, 0x00	; 0
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	a9 01       	movw	r20, r18
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	cb 01       	movw	r24, r22
    1bee:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <xTaskNotifyWait>
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	13 86       	std	Z+11, r1	; 0x0b
    1bfa:	12 86       	std	Z+10, r1	; 0x0a
    1bfc:	9e 01       	movw	r18, r28
    1bfe:	2e 5e       	subi	r18, 0xEE	; 238
    1c00:	3f 4f       	sbci	r19, 0xFF	; 255
    1c02:	ce 01       	movw	r24, r28
    1c04:	09 96       	adiw	r24, 0x09	; 9
    1c06:	b9 01       	movw	r22, r18
    1c08:	0e 94 90 17 	call	0x2f20	; 0x2f20 <xTaskCheckForTimeOut>
    1c0c:	88 23       	and	r24, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <xStreamBufferSend+0xec>
    1c10:	c2 cf       	rjmp	.-124    	; 0x1b96 <xStreamBufferSend+0x70>
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	89 2b       	or	r24, r25
    1c18:	29 f4       	brne	.+10     	; 0x1c24 <xStreamBufferSend+0xfe>
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1e:	35 df       	rcall	.-406    	; 0x1a8a <xStreamBufferSpacesAvailable>
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	eb 81       	ldd	r30, Y+3	; 0x03
    1c26:	fc 81       	ldd	r31, Y+4	; 0x04
    1c28:	29 81       	ldd	r18, Y+1	; 0x01
    1c2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c2c:	48 89       	ldd	r20, Y+16	; 0x10
    1c2e:	59 89       	ldd	r21, Y+17	; 0x11
    1c30:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c32:	7f 85       	ldd	r23, Y+15	; 0x0f
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	8f 01       	movw	r16, r30
    1c3a:	b8 d0       	rcall	.+368    	; 0x1dac <prvWriteMessageToBuffer>
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	8f 83       	std	Y+7, r24	; 0x07
    1c40:	8f 81       	ldd	r24, Y+7	; 0x07
    1c42:	98 85       	ldd	r25, Y+8	; 0x08
    1c44:	89 2b       	or	r24, r25
    1c46:	39 f1       	breq	.+78     	; 0x1c96 <xStreamBufferSend+0x170>
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	6d d3       	rcall	.+1754   	; 0x2328 <prvBytesInBuffer>
    1c4e:	9c 01       	movw	r18, r24
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	fc 01       	movw	r30, r24
    1c56:	86 81       	ldd	r24, Z+6	; 0x06
    1c58:	97 81       	ldd	r25, Z+7	; 0x07
    1c5a:	28 17       	cp	r18, r24
    1c5c:	39 07       	cpc	r19, r25
    1c5e:	d8 f0       	brcs	.+54     	; 0x1c96 <xStreamBufferSend+0x170>
    1c60:	1b d6       	rcall	.+3126   	; 0x2898 <vTaskSuspendAll>
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	fc 01       	movw	r30, r24
    1c68:	80 85       	ldd	r24, Z+8	; 0x08
    1c6a:	91 85       	ldd	r25, Z+9	; 0x09
    1c6c:	89 2b       	or	r24, r25
    1c6e:	91 f0       	breq	.+36     	; 0x1c94 <xStreamBufferSend+0x16e>
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	fc 01       	movw	r30, r24
    1c76:	80 85       	ldd	r24, Z+8	; 0x08
    1c78:	91 85       	ldd	r25, Z+9	; 0x09
    1c7a:	00 e0       	ldi	r16, 0x00	; 0
    1c7c:	10 e0       	ldi	r17, 0x00	; 0
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	ba 01       	movw	r22, r20
    1c86:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <xTaskGenericNotify>
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	fc 01       	movw	r30, r24
    1c90:	11 86       	std	Z+9, r1	; 0x09
    1c92:	10 86       	std	Z+8, r1	; 0x08
    1c94:	0e d6       	rcall	.+3100   	; 0x28b2 <xTaskResumeAll>
    1c96:	8f 81       	ldd	r24, Y+7	; 0x07
    1c98:	98 85       	ldd	r25, Y+8	; 0x08
    1c9a:	63 96       	adiw	r28, 0x13	; 19
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	08 95       	ret

00001cb4 <xStreamBufferSendFromISR>:
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	61 97       	sbiw	r28, 0x11	; 17
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	9b 87       	std	Y+11, r25	; 0x0b
    1cd2:	8a 87       	std	Y+10, r24	; 0x0a
    1cd4:	7d 87       	std	Y+13, r23	; 0x0d
    1cd6:	6c 87       	std	Y+12, r22	; 0x0c
    1cd8:	5f 87       	std	Y+15, r21	; 0x0f
    1cda:	4e 87       	std	Y+14, r20	; 0x0e
    1cdc:	39 8b       	std	Y+17, r19	; 0x11
    1cde:	28 8b       	std	Y+16, r18	; 0x10
    1ce0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
    1ce8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	86 85       	ldd	r24, Z+14	; 0x0e
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	81 70       	andi	r24, 0x01	; 1
    1cfe:	99 27       	eor	r25, r25
    1d00:	89 2b       	or	r24, r25
    1d02:	29 f0       	breq	.+10     	; 0x1d0e <xStreamBufferSendFromISR+0x5a>
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	02 96       	adiw	r24, 0x02	; 2
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	bb de       	rcall	.-650    	; 0x1a8a <xStreamBufferSpacesAvailable>
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d20:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d22:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d24:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d26:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	8f 01       	movw	r16, r30
    1d2e:	3e d0       	rcall	.+124    	; 0x1dac <prvWriteMessageToBuffer>
    1d30:	98 87       	std	Y+8, r25	; 0x08
    1d32:	8f 83       	std	Y+7, r24	; 0x07
    1d34:	8f 81       	ldd	r24, Y+7	; 0x07
    1d36:	98 85       	ldd	r25, Y+8	; 0x08
    1d38:	89 2b       	or	r24, r25
    1d3a:	49 f1       	breq	.+82     	; 0x1d8e <xStreamBufferSendFromISR+0xda>
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	f3 d2       	rcall	.+1510   	; 0x2328 <prvBytesInBuffer>
    1d42:	9c 01       	movw	r18, r24
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	fc 01       	movw	r30, r24
    1d4a:	86 81       	ldd	r24, Z+6	; 0x06
    1d4c:	97 81       	ldd	r25, Z+7	; 0x07
    1d4e:	28 17       	cp	r18, r24
    1d50:	39 07       	cpc	r19, r25
    1d52:	e8 f0       	brcs	.+58     	; 0x1d8e <xStreamBufferSendFromISR+0xda>
    1d54:	19 86       	std	Y+9, r1	; 0x09
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	80 85       	ldd	r24, Z+8	; 0x08
    1d5e:	91 85       	ldd	r25, Z+9	; 0x09
    1d60:	89 2b       	or	r24, r25
    1d62:	a9 f0       	breq	.+42     	; 0x1d8e <xStreamBufferSendFromISR+0xda>
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	fc 01       	movw	r30, r24
    1d6a:	80 85       	ldd	r24, Z+8	; 0x08
    1d6c:	91 85       	ldd	r25, Z+9	; 0x09
    1d6e:	28 89       	ldd	r18, Y+16	; 0x10
    1d70:	39 89       	ldd	r19, Y+17	; 0x11
    1d72:	79 01       	movw	r14, r18
    1d74:	00 e0       	ldi	r16, 0x00	; 0
    1d76:	10 e0       	ldi	r17, 0x00	; 0
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	ba 01       	movw	r22, r20
    1d80:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <xTaskGenericNotifyFromISR>
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	fc 01       	movw	r30, r24
    1d8a:	11 86       	std	Z+9, r1	; 0x09
    1d8c:	10 86       	std	Z+8, r1	; 0x08
    1d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d90:	98 85       	ldd	r25, Y+8	; 0x08
    1d92:	61 96       	adiw	r28, 0x11	; 17
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	08 95       	ret

00001dac <prvWriteMessageToBuffer>:
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	61 97       	sbiw	r28, 0x11	; 17
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	99 87       	std	Y+9, r25	; 0x09
    1dc6:	88 87       	std	Y+8, r24	; 0x08
    1dc8:	7b 87       	std	Y+11, r23	; 0x0b
    1dca:	6a 87       	std	Y+10, r22	; 0x0a
    1dcc:	5d 87       	std	Y+13, r21	; 0x0d
    1dce:	4c 87       	std	Y+12, r20	; 0x0c
    1dd0:	3f 87       	std	Y+15, r19	; 0x0f
    1dd2:	2e 87       	std	Y+14, r18	; 0x0e
    1dd4:	19 8b       	std	Y+17, r17	; 0x11
    1dd6:	08 8b       	std	Y+16, r16	; 0x10
    1dd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ddc:	89 2b       	or	r24, r25
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <prvWriteMessageToBuffer+0x38>
    1de0:	19 82       	std	Y+1, r1	; 0x01
    1de2:	33 c0       	rjmp	.+102    	; 0x1e4a <prvWriteMessageToBuffer+0x9e>
    1de4:	88 85       	ldd	r24, Y+8	; 0x08
    1de6:	99 85       	ldd	r25, Y+9	; 0x09
    1de8:	fc 01       	movw	r30, r24
    1dea:	86 85       	ldd	r24, Z+14	; 0x0e
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	99 27       	eor	r25, r25
    1df4:	89 2b       	or	r24, r25
    1df6:	a9 f4       	brne	.+42     	; 0x1e22 <prvWriteMessageToBuffer+0x76>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e00:	9d 83       	std	Y+5, r25	; 0x05
    1e02:	8c 83       	std	Y+4, r24	; 0x04
    1e04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e06:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e08:	9f 83       	std	Y+7, r25	; 0x07
    1e0a:	8e 83       	std	Y+6, r24	; 0x06
    1e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e10:	8e 81       	ldd	r24, Y+6	; 0x06
    1e12:	9f 81       	ldd	r25, Y+7	; 0x07
    1e14:	28 17       	cp	r18, r24
    1e16:	39 07       	cpc	r19, r25
    1e18:	08 f4       	brcc	.+2      	; 0x1e1c <prvWriteMessageToBuffer+0x70>
    1e1a:	c9 01       	movw	r24, r18
    1e1c:	9d 87       	std	Y+13, r25	; 0x0d
    1e1e:	8c 87       	std	Y+12, r24	; 0x0c
    1e20:	14 c0       	rjmp	.+40     	; 0x1e4a <prvWriteMessageToBuffer+0x9e>
    1e22:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e24:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e26:	88 89       	ldd	r24, Y+16	; 0x10
    1e28:	99 89       	ldd	r25, Y+17	; 0x11
    1e2a:	28 17       	cp	r18, r24
    1e2c:	39 07       	cpc	r19, r25
    1e2e:	60 f0       	brcs	.+24     	; 0x1e48 <prvWriteMessageToBuffer+0x9c>
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	9e 01       	movw	r18, r28
    1e36:	24 5f       	subi	r18, 0xF4	; 244
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	88 85       	ldd	r24, Y+8	; 0x08
    1e3c:	99 85       	ldd	r25, Y+9	; 0x09
    1e3e:	42 e0       	ldi	r20, 0x02	; 2
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	b9 01       	movw	r22, r18
    1e44:	3b d1       	rcall	.+630    	; 0x20bc <prvWriteBytesToBuffer>
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <prvWriteMessageToBuffer+0x9e>
    1e48:	19 82       	std	Y+1, r1	; 0x01
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	88 23       	and	r24, r24
    1e4e:	59 f0       	breq	.+22     	; 0x1e66 <prvWriteMessageToBuffer+0xba>
    1e50:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e52:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e54:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e56:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e58:	88 85       	ldd	r24, Y+8	; 0x08
    1e5a:	99 85       	ldd	r25, Y+9	; 0x09
    1e5c:	b9 01       	movw	r22, r18
    1e5e:	2e d1       	rcall	.+604    	; 0x20bc <prvWriteBytesToBuffer>
    1e60:	9b 83       	std	Y+3, r25	; 0x03
    1e62:	8a 83       	std	Y+2, r24	; 0x02
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <prvWriteMessageToBuffer+0xbe>
    1e66:	1b 82       	std	Y+3, r1	; 0x03
    1e68:	1a 82       	std	Y+2, r1	; 0x02
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	61 96       	adiw	r28, 0x11	; 17
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <xStreamBufferReceive>:
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	60 97       	sbiw	r28, 0x10	; 16
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	9a 87       	std	Y+10, r25	; 0x0a
    1ea2:	89 87       	std	Y+9, r24	; 0x09
    1ea4:	7c 87       	std	Y+12, r23	; 0x0c
    1ea6:	6b 87       	std	Y+11, r22	; 0x0b
    1ea8:	5e 87       	std	Y+14, r21	; 0x0e
    1eaa:	4d 87       	std	Y+13, r20	; 0x0d
    1eac:	38 8b       	std	Y+16, r19	; 0x10
    1eae:	2f 87       	std	Y+15, r18	; 0x0f
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	98 87       	std	Y+8, r25	; 0x08
    1eb6:	8f 83       	std	Y+7, r24	; 0x07
    1eb8:	1a 82       	std	Y+2, r1	; 0x02
    1eba:	19 82       	std	Y+1, r1	; 0x01
    1ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ebe:	98 85       	ldd	r25, Y+8	; 0x08
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	86 85       	ldd	r24, Z+14	; 0x0e
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	81 70       	andi	r24, 0x01	; 1
    1eca:	99 27       	eor	r25, r25
    1ecc:	89 2b       	or	r24, r25
    1ece:	29 f0       	breq	.+10     	; 0x1eda <xStreamBufferReceive+0x56>
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <xStreamBufferReceive+0x5a>
    1eda:	1e 82       	std	Y+6, r1	; 0x06
    1edc:	1d 82       	std	Y+5, r1	; 0x05
    1ede:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee0:	98 89       	ldd	r25, Y+16	; 0x10
    1ee2:	89 2b       	or	r24, r25
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <xStreamBufferReceive+0x64>
    1ee6:	3c c0       	rjmp	.+120    	; 0x1f60 <xStreamBufferReceive+0xdc>
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	0f 92       	push	r0
    1eee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef0:	98 85       	ldd	r25, Y+8	; 0x08
    1ef2:	1a d2       	rcall	.+1076   	; 0x2328 <prvBytesInBuffer>
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	82 17       	cp	r24, r18
    1f02:	93 07       	cpc	r25, r19
    1f04:	60 f0       	brcs	.+24     	; 0x1f1e <xStreamBufferReceive+0x9a>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <xTaskNotifyStateClear>
    1f0e:	0e 94 c9 18 	call	0x3192	; 0x3192 <xTaskGetCurrentTaskHandle>
    1f12:	9c 01       	movw	r18, r24
    1f14:	8f 81       	ldd	r24, Y+7	; 0x07
    1f16:	98 85       	ldd	r25, Y+8	; 0x08
    1f18:	fc 01       	movw	r30, r24
    1f1a:	31 87       	std	Z+9, r19	; 0x09
    1f1c:	20 87       	std	Z+8, r18	; 0x08
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	82 17       	cp	r24, r18
    1f2c:	93 07       	cpc	r25, r19
    1f2e:	e8 f0       	brcs	.+58     	; 0x1f6a <xStreamBufferReceive+0xe6>
    1f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f32:	98 89       	ldd	r25, Y+16	; 0x10
    1f34:	7c 01       	movw	r14, r24
    1f36:	00 e0       	ldi	r16, 0x00	; 0
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	a9 01       	movw	r20, r18
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	cb 01       	movw	r24, r22
    1f46:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <xTaskNotifyWait>
    1f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4c:	98 85       	ldd	r25, Y+8	; 0x08
    1f4e:	fc 01       	movw	r30, r24
    1f50:	11 86       	std	Z+9, r1	; 0x09
    1f52:	10 86       	std	Z+8, r1	; 0x08
    1f54:	8f 81       	ldd	r24, Y+7	; 0x07
    1f56:	98 85       	ldd	r25, Y+8	; 0x08
    1f58:	e7 d1       	rcall	.+974    	; 0x2328 <prvBytesInBuffer>
    1f5a:	9c 83       	std	Y+4, r25	; 0x04
    1f5c:	8b 83       	std	Y+3, r24	; 0x03
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <xStreamBufferReceive+0xe6>
    1f60:	8f 81       	ldd	r24, Y+7	; 0x07
    1f62:	98 85       	ldd	r25, Y+8	; 0x08
    1f64:	e1 d1       	rcall	.+962    	; 0x2328 <prvBytesInBuffer>
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	82 17       	cp	r24, r18
    1f74:	93 07       	cpc	r25, r19
    1f76:	68 f5       	brcc	.+90     	; 0x1fd2 <xStreamBufferReceive+0x14e>
    1f78:	ed 81       	ldd	r30, Y+5	; 0x05
    1f7a:	fe 81       	ldd	r31, Y+6	; 0x06
    1f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f80:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f82:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8f 81       	ldd	r24, Y+7	; 0x07
    1f8a:	98 85       	ldd	r25, Y+8	; 0x08
    1f8c:	8f 01       	movw	r16, r30
    1f8e:	30 d0       	rcall	.+96     	; 0x1ff0 <prvReadMessageFromBuffer>
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	89 2b       	or	r24, r25
    1f9a:	d9 f0       	breq	.+54     	; 0x1fd2 <xStreamBufferReceive+0x14e>
    1f9c:	7d d4       	rcall	.+2298   	; 0x2898 <vTaskSuspendAll>
    1f9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa0:	98 85       	ldd	r25, Y+8	; 0x08
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	82 85       	ldd	r24, Z+10	; 0x0a
    1fa6:	93 85       	ldd	r25, Z+11	; 0x0b
    1fa8:	89 2b       	or	r24, r25
    1faa:	91 f0       	breq	.+36     	; 0x1fd0 <xStreamBufferReceive+0x14c>
    1fac:	8f 81       	ldd	r24, Y+7	; 0x07
    1fae:	98 85       	ldd	r25, Y+8	; 0x08
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	82 85       	ldd	r24, Z+10	; 0x0a
    1fb4:	93 85       	ldd	r25, Z+11	; 0x0b
    1fb6:	00 e0       	ldi	r16, 0x00	; 0
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	ba 01       	movw	r22, r20
    1fc2:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <xTaskGenericNotify>
    1fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc8:	98 85       	ldd	r25, Y+8	; 0x08
    1fca:	fc 01       	movw	r30, r24
    1fcc:	13 86       	std	Z+11, r1	; 0x0b
    1fce:	12 86       	std	Z+10, r1	; 0x0a
    1fd0:	70 d4       	rcall	.+2272   	; 0x28b2 <xTaskResumeAll>
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd6:	60 96       	adiw	r28, 0x10	; 16
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	08 95       	ret

00001ff0 <prvReadMessageFromBuffer>:
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	62 97       	sbiw	r28, 0x12	; 18
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	9a 87       	std	Y+10, r25	; 0x0a
    200a:	89 87       	std	Y+9, r24	; 0x09
    200c:	7c 87       	std	Y+12, r23	; 0x0c
    200e:	6b 87       	std	Y+11, r22	; 0x0b
    2010:	5e 87       	std	Y+14, r21	; 0x0e
    2012:	4d 87       	std	Y+13, r20	; 0x0d
    2014:	38 8b       	std	Y+16, r19	; 0x10
    2016:	2f 87       	std	Y+15, r18	; 0x0f
    2018:	1a 8b       	std	Y+18, r17	; 0x12
    201a:	09 8b       	std	Y+17, r16	; 0x11
    201c:	89 89       	ldd	r24, Y+17	; 0x11
    201e:	9a 89       	ldd	r25, Y+18	; 0x12
    2020:	89 2b       	or	r24, r25
    2022:	81 f1       	breq	.+96     	; 0x2084 <prvReadMessageFromBuffer+0x94>
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	fc 01       	movw	r30, r24
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
    2032:	2f 85       	ldd	r18, Y+15	; 0x0f
    2034:	38 89       	ldd	r19, Y+16	; 0x10
    2036:	49 89       	ldd	r20, Y+17	; 0x11
    2038:	5a 89       	ldd	r21, Y+18	; 0x12
    203a:	be 01       	movw	r22, r28
    203c:	69 5f       	subi	r22, 0xF9	; 249
    203e:	7f 4f       	sbci	r23, 0xFF	; 255
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	ca d0       	rcall	.+404    	; 0x21da <prvReadBytesFromBuffer>
    2046:	8f 81       	ldd	r24, Y+7	; 0x07
    2048:	98 85       	ldd	r25, Y+8	; 0x08
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2050:	38 89       	ldd	r19, Y+16	; 0x10
    2052:	89 89       	ldd	r24, Y+17	; 0x11
    2054:	9a 89       	ldd	r25, Y+18	; 0x12
    2056:	a9 01       	movw	r20, r18
    2058:	48 1b       	sub	r20, r24
    205a:	59 0b       	sbc	r21, r25
    205c:	ca 01       	movw	r24, r20
    205e:	98 8b       	std	Y+16, r25	; 0x10
    2060:	8f 87       	std	Y+15, r24	; 0x0f
    2062:	29 81       	ldd	r18, Y+1	; 0x01
    2064:	3a 81       	ldd	r19, Y+2	; 0x02
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	82 17       	cp	r24, r18
    206c:	93 07       	cpc	r25, r19
    206e:	70 f4       	brcc	.+28     	; 0x208c <prvReadMessageFromBuffer+0x9c>
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	fc 01       	movw	r30, r24
    207a:	31 83       	std	Z+1, r19	; 0x01
    207c:	20 83       	st	Z, r18
    207e:	1a 82       	std	Y+2, r1	; 0x02
    2080:	19 82       	std	Y+1, r1	; 0x01
    2082:	04 c0       	rjmp	.+8      	; 0x208c <prvReadMessageFromBuffer+0x9c>
    2084:	8d 85       	ldd	r24, Y+13	; 0x0d
    2086:	9e 85       	ldd	r25, Y+14	; 0x0e
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	2f 85       	ldd	r18, Y+15	; 0x0f
    208e:	38 89       	ldd	r19, Y+16	; 0x10
    2090:	49 81       	ldd	r20, Y+1	; 0x01
    2092:	5a 81       	ldd	r21, Y+2	; 0x02
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	9e d0       	rcall	.+316    	; 0x21da <prvReadBytesFromBuffer>
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	62 96       	adiw	r28, 0x12	; 18
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	08 95       	ret

000020bc <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	2e 97       	sbiw	r28, 0x0e	; 14
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	9a 87       	std	Y+10, r25	; 0x0a
    20d2:	89 87       	std	Y+9, r24	; 0x09
    20d4:	7c 87       	std	Y+12, r23	; 0x0c
    20d6:	6b 87       	std	Y+11, r22	; 0x0b
    20d8:	5e 87       	std	Y+14, r21	; 0x0e
    20da:	4d 87       	std	Y+13, r20	; 0x0d
size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    20dc:	89 85       	ldd	r24, Y+9	; 0x09
    20de:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e0:	fc 01       	movw	r30, r24
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
    which may be less than the total number of bytes that need to be added if
    the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	fc 01       	movw	r30, r24
    20f0:	24 81       	ldd	r18, Z+4	; 0x04
    20f2:	35 81       	ldd	r19, Z+5	; 0x05
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	9a 81       	ldd	r25, Y+2	; 0x02
    20f8:	a9 01       	movw	r20, r18
    20fa:	48 1b       	sub	r20, r24
    20fc:	59 0b       	sbc	r21, r25
    20fe:	ca 01       	movw	r24, r20
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	28 17       	cp	r18, r24
    2116:	39 07       	cpc	r19, r25
    2118:	08 f4       	brcc	.+2      	; 0x211c <prvWriteBytesToBuffer+0x60>
    211a:	c9 01       	movw	r24, r18
    211c:	98 87       	std	Y+8, r25	; 0x08
    211e:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	fc 01       	movw	r30, r24
    2126:	24 85       	ldd	r18, Z+12	; 0x0c
    2128:	35 85       	ldd	r19, Z+13	; 0x0d
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	4f 81       	ldd	r20, Y+7	; 0x07
    2134:	58 85       	ldd	r21, Y+8	; 0x08
    2136:	2b 85       	ldd	r18, Y+11	; 0x0b
    2138:	3c 85       	ldd	r19, Y+12	; 0x0c
    213a:	b9 01       	movw	r22, r18
    213c:	0e 94 03 38 	call	0x7006	; 0x7006 <memcpy>

    /* If the number of bytes written was less than the number that could be
    written in the first write... */
    if( xCount > xFirstLength )
    2140:	2d 85       	ldd	r18, Y+13	; 0x0d
    2142:	3e 85       	ldd	r19, Y+14	; 0x0e
    2144:	8f 81       	ldd	r24, Y+7	; 0x07
    2146:	98 85       	ldd	r25, Y+8	; 0x08
    2148:	82 17       	cp	r24, r18
    214a:	93 07       	cpc	r25, r19
    214c:	a8 f4       	brcc	.+42     	; 0x2178 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    214e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2150:	3e 85       	ldd	r19, Y+14	; 0x0e
    2152:	8f 81       	ldd	r24, Y+7	; 0x07
    2154:	98 85       	ldd	r25, Y+8	; 0x08
    2156:	a9 01       	movw	r20, r18
    2158:	48 1b       	sub	r20, r24
    215a:	59 0b       	sbc	r21, r25
    215c:	2b 85       	ldd	r18, Y+11	; 0x0b
    215e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	28 0f       	add	r18, r24
    2166:	39 1f       	adc	r19, r25
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	fc 01       	movw	r30, r24
    216e:	84 85       	ldd	r24, Z+12	; 0x0c
    2170:	95 85       	ldd	r25, Z+13	; 0x0d
    2172:	b9 01       	movw	r22, r18
    2174:	0e 94 03 38 	call	0x7006	; 0x7006 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2178:	29 81       	ldd	r18, Y+1	; 0x01
    217a:	3a 81       	ldd	r19, Y+2	; 0x02
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	82 0f       	add	r24, r18
    2182:	93 1f       	adc	r25, r19
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
    if( xNextHead >= pxStreamBuffer->xLength )
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	fc 01       	movw	r30, r24
    218e:	24 81       	ldd	r18, Z+4	; 0x04
    2190:	35 81       	ldd	r19, Z+5	; 0x05
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	82 17       	cp	r24, r18
    2198:	93 07       	cpc	r25, r19
    219a:	68 f0       	brcs	.+26     	; 0x21b6 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	fc 01       	movw	r30, r24
    21a2:	84 81       	ldd	r24, Z+4	; 0x04
    21a4:	95 81       	ldd	r25, Z+5	; 0x05
    21a6:	29 81       	ldd	r18, Y+1	; 0x01
    21a8:	3a 81       	ldd	r19, Y+2	; 0x02
    21aa:	a9 01       	movw	r20, r18
    21ac:	48 1b       	sub	r20, r24
    21ae:	59 0b       	sbc	r21, r25
    21b0:	ca 01       	movw	r24, r20
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	29 81       	ldd	r18, Y+1	; 0x01
    21bc:	3a 81       	ldd	r19, Y+2	; 0x02
    21be:	fc 01       	movw	r30, r24
    21c0:	33 83       	std	Z+3, r19	; 0x03
    21c2:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    21c8:	2e 96       	adiw	r28, 0x0e	; 14
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	66 97       	sbiw	r28, 0x16	; 22
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	98 8b       	std	Y+16, r25	; 0x10
    21f0:	8f 87       	std	Y+15, r24	; 0x0f
    21f2:	7a 8b       	std	Y+18, r23	; 0x12
    21f4:	69 8b       	std	Y+17, r22	; 0x11
    21f6:	5c 8b       	std	Y+20, r21	; 0x14
    21f8:	4b 8b       	std	Y+19, r20	; 0x13
    21fa:	3e 8b       	std	Y+22, r19	; 0x16
    21fc:	2d 8b       	std	Y+21, r18	; 0x15
size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    21fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2200:	9e 89       	ldd	r25, Y+22	; 0x16
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	9c 89       	ldd	r25, Y+20	; 0x14
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	28 17       	cp	r18, r24
    2218:	39 07       	cpc	r19, r25
    221a:	08 f4       	brcc	.+2      	; 0x221e <__stack+0x1f>
    221c:	c9 01       	movw	r24, r18
    221e:	98 87       	std	Y+8, r25	; 0x08
    2220:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    2222:	8f 81       	ldd	r24, Y+7	; 0x07
    2224:	98 85       	ldd	r25, Y+8	; 0x08
    2226:	89 2b       	or	r24, r25
    2228:	09 f4       	brne	.+2      	; 0x222c <__stack+0x2d>
    222a:	73 c0       	rjmp	.+230    	; 0x2312 <__stack+0x113>
    {
        xNextTail = pxStreamBuffer->xTail;
    222c:	8f 85       	ldd	r24, Y+15	; 0x0f
    222e:	98 89       	ldd	r25, Y+16	; 0x10
    2230:	fc 01       	movw	r30, r24
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
        less than the number wanted if the data wraps around to the start of
        the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    223a:	8f 85       	ldd	r24, Y+15	; 0x0f
    223c:	98 89       	ldd	r25, Y+16	; 0x10
    223e:	fc 01       	movw	r30, r24
    2240:	24 81       	ldd	r18, Z+4	; 0x04
    2242:	35 81       	ldd	r19, Z+5	; 0x05
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	a9 01       	movw	r20, r18
    224a:	48 1b       	sub	r20, r24
    224c:	59 0b       	sbc	r21, r25
    224e:	ca 01       	movw	r24, r20
    2250:	9a 87       	std	Y+10, r25	; 0x0a
    2252:	89 87       	std	Y+9, r24	; 0x09
    2254:	8f 81       	ldd	r24, Y+7	; 0x07
    2256:	98 85       	ldd	r25, Y+8	; 0x08
    2258:	9c 87       	std	Y+12, r25	; 0x0c
    225a:	8b 87       	std	Y+11, r24	; 0x0b
    225c:	29 85       	ldd	r18, Y+9	; 0x09
    225e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2260:	8b 85       	ldd	r24, Y+11	; 0x0b
    2262:	9c 85       	ldd	r25, Y+12	; 0x0c
    2264:	28 17       	cp	r18, r24
    2266:	39 07       	cpc	r19, r25
    2268:	08 f4       	brcc	.+2      	; 0x226c <__stack+0x6d>
    226a:	c9 01       	movw	r24, r18
    226c:	9e 87       	std	Y+14, r25	; 0x0e
    226e:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
        read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2270:	8f 85       	ldd	r24, Y+15	; 0x0f
    2272:	98 89       	ldd	r25, Y+16	; 0x10
    2274:	fc 01       	movw	r30, r24
    2276:	24 85       	ldd	r18, Z+12	; 0x0c
    2278:	35 85       	ldd	r19, Z+13	; 0x0d
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	28 0f       	add	r18, r24
    2280:	39 1f       	adc	r19, r25
    2282:	4d 85       	ldd	r20, Y+13	; 0x0d
    2284:	5e 85       	ldd	r21, Y+14	; 0x0e
    2286:	89 89       	ldd	r24, Y+17	; 0x11
    2288:	9a 89       	ldd	r25, Y+18	; 0x12
    228a:	b9 01       	movw	r22, r18
    228c:	0e 94 03 38 	call	0x7006	; 0x7006 <memcpy>

        /* If the total number of wanted bytes is greater than the number
        that could be read in the first read... */
        if( xCount > xFirstLength )
    2290:	2f 81       	ldd	r18, Y+7	; 0x07
    2292:	38 85       	ldd	r19, Y+8	; 0x08
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	82 17       	cp	r24, r18
    229a:	93 07       	cpc	r25, r19
    229c:	a0 f4       	brcc	.+40     	; 0x22c6 <__stack+0xc7>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    229e:	2f 81       	ldd	r18, Y+7	; 0x07
    22a0:	38 85       	ldd	r19, Y+8	; 0x08
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	a9 01       	movw	r20, r18
    22a8:	48 1b       	sub	r20, r24
    22aa:	59 0b       	sbc	r21, r25
    22ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ae:	98 89       	ldd	r25, Y+16	; 0x10
    22b0:	fc 01       	movw	r30, r24
    22b2:	64 85       	ldd	r22, Z+12	; 0x0c
    22b4:	75 85       	ldd	r23, Z+13	; 0x0d
    22b6:	29 89       	ldd	r18, Y+17	; 0x11
    22b8:	3a 89       	ldd	r19, Y+18	; 0x12
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	0e 94 03 38 	call	0x7006	; 0x7006 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
        the buffer. */
        xNextTail += xCount;
    22c6:	29 81       	ldd	r18, Y+1	; 0x01
    22c8:	3a 81       	ldd	r19, Y+2	; 0x02
    22ca:	8f 81       	ldd	r24, Y+7	; 0x07
    22cc:	98 85       	ldd	r25, Y+8	; 0x08
    22ce:	82 0f       	add	r24, r18
    22d0:	93 1f       	adc	r25, r19
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	98 89       	ldd	r25, Y+16	; 0x10
    22da:	fc 01       	movw	r30, r24
    22dc:	24 81       	ldd	r18, Z+4	; 0x04
    22de:	35 81       	ldd	r19, Z+5	; 0x05
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	82 17       	cp	r24, r18
    22e6:	93 07       	cpc	r25, r19
    22e8:	68 f0       	brcs	.+26     	; 0x2304 <__stack+0x105>
        {
            xNextTail -= pxStreamBuffer->xLength;
    22ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ec:	98 89       	ldd	r25, Y+16	; 0x10
    22ee:	fc 01       	movw	r30, r24
    22f0:	84 81       	ldd	r24, Z+4	; 0x04
    22f2:	95 81       	ldd	r25, Z+5	; 0x05
    22f4:	29 81       	ldd	r18, Y+1	; 0x01
    22f6:	3a 81       	ldd	r19, Y+2	; 0x02
    22f8:	a9 01       	movw	r20, r18
    22fa:	48 1b       	sub	r20, r24
    22fc:	59 0b       	sbc	r21, r25
    22fe:	ca 01       	movw	r24, r20
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	98 89       	ldd	r25, Y+16	; 0x10
    2308:	29 81       	ldd	r18, Y+1	; 0x01
    230a:	3a 81       	ldd	r19, Y+2	; 0x02
    230c:	fc 01       	movw	r30, r24
    230e:	31 83       	std	Z+1, r19	; 0x01
    2310:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2312:	8f 81       	ldd	r24, Y+7	; 0x07
    2314:	98 85       	ldd	r25, Y+8	; 0x08
}
    2316:	66 96       	adiw	r28, 0x16	; 22
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	00 d0       	rcall	.+0      	; 0x232e <prvBytesInBuffer+0x6>
    232e:	1f 92       	push	r1
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	fc 01       	movw	r30, r24
    233e:	24 81       	ldd	r18, Z+4	; 0x04
    2340:	35 81       	ldd	r19, Z+5	; 0x05
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	fc 01       	movw	r30, r24
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	82 0f       	add	r24, r18
    234e:	93 1f       	adc	r25, r19
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	fc 01       	movw	r30, r24
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	29 81       	ldd	r18, Y+1	; 0x01
    2360:	3a 81       	ldd	r19, Y+2	; 0x02
    2362:	a9 01       	movw	r20, r18
    2364:	48 1b       	sub	r20, r24
    2366:	59 0b       	sbc	r21, r25
    2368:	ca 01       	movw	r24, r20
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    if ( xCount >= pxStreamBuffer->xLength )
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	fc 01       	movw	r30, r24
    2374:	24 81       	ldd	r18, Z+4	; 0x04
    2376:	35 81       	ldd	r19, Z+5	; 0x05
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	82 17       	cp	r24, r18
    237e:	93 07       	cpc	r25, r19
    2380:	68 f0       	brcs	.+26     	; 0x239c <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	fc 01       	movw	r30, r24
    2388:	84 81       	ldd	r24, Z+4	; 0x04
    238a:	95 81       	ldd	r25, Z+5	; 0x05
    238c:	29 81       	ldd	r18, Y+1	; 0x01
    238e:	3a 81       	ldd	r19, Y+2	; 0x02
    2390:	a9 01       	movw	r20, r18
    2392:	48 1b       	sub	r20, r24
    2394:	59 0b       	sbc	r21, r25
    2396:	ca 01       	movw	r24, r20
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    23ae:	0f 93       	push	r16
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	29 97       	sbiw	r28, 0x09	; 9
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	7c 83       	std	Y+4, r23	; 0x04
    23ca:	6b 83       	std	Y+3, r22	; 0x03
    23cc:	5e 83       	std	Y+6, r21	; 0x06
    23ce:	4d 83       	std	Y+5, r20	; 0x05
    23d0:	38 87       	std	Y+8, r19	; 0x08
    23d2:	2f 83       	std	Y+7, r18	; 0x07
    23d4:	09 87       	std	Y+9, r16	; 0x09
        const BaseType_t xWriteValue = 0x55;
        configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	40 e1       	ldi	r20, 0x10	; 16
    23dc:	50 e0       	ldi	r21, 0x00	; 0
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	0e 94 0c 38 	call	0x7018	; 0x7018 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	2b 81       	ldd	r18, Y+3	; 0x03
    23ec:	3c 81       	ldd	r19, Y+4	; 0x04
    23ee:	fc 01       	movw	r30, r24
    23f0:	35 87       	std	Z+13, r19	; 0x0d
    23f2:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	2d 81       	ldd	r18, Y+5	; 0x05
    23fa:	3e 81       	ldd	r19, Y+6	; 0x06
    23fc:	fc 01       	movw	r30, r24
    23fe:	35 83       	std	Z+5, r19	; 0x05
    2400:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	2f 81       	ldd	r18, Y+7	; 0x07
    2408:	38 85       	ldd	r19, Y+8	; 0x08
    240a:	fc 01       	movw	r30, r24
    240c:	37 83       	std	Z+7, r19	; 0x07
    240e:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	29 85       	ldd	r18, Y+9	; 0x09
    2416:	fc 01       	movw	r30, r24
    2418:	26 87       	std	Z+14, r18	; 0x0e
}
    241a:	00 00       	nop
    241c:	29 96       	adiw	r28, 0x09	; 9
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret

00002430 <xTaskCreate>:
    2430:	af 92       	push	r10
    2432:	bf 92       	push	r11
    2434:	cf 92       	push	r12
    2436:	df 92       	push	r13
    2438:	ef 92       	push	r14
    243a:	ff 92       	push	r15
    243c:	0f 93       	push	r16
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	60 97       	sbiw	r28, 0x10	; 16
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	9f 83       	std	Y+7, r25	; 0x07
    2454:	8e 83       	std	Y+6, r24	; 0x06
    2456:	79 87       	std	Y+9, r23	; 0x09
    2458:	68 87       	std	Y+8, r22	; 0x08
    245a:	5b 87       	std	Y+11, r21	; 0x0b
    245c:	4a 87       	std	Y+10, r20	; 0x0a
    245e:	3d 87       	std	Y+13, r19	; 0x0d
    2460:	2c 87       	std	Y+12, r18	; 0x0c
    2462:	0e 87       	std	Y+14, r16	; 0x0e
    2464:	f8 8a       	std	Y+16, r15	; 0x10
    2466:	ef 86       	std	Y+15, r14	; 0x0f
    2468:	8a 85       	ldd	r24, Y+10	; 0x0a
    246a:	9b 85       	ldd	r25, Y+11	; 0x0b
    246c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <pvPortMalloc>
    2470:	9d 83       	std	Y+5, r25	; 0x05
    2472:	8c 83       	std	Y+4, r24	; 0x04
    2474:	8c 81       	ldd	r24, Y+4	; 0x04
    2476:	9d 81       	ldd	r25, Y+5	; 0x05
    2478:	89 2b       	or	r24, r25
    247a:	b9 f0       	breq	.+46     	; 0x24aa <xTaskCreate+0x7a>
    247c:	8c e2       	ldi	r24, 0x2C	; 44
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 ff 01 	call	0x3fe	; 0x3fe <pvPortMalloc>
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	89 2b       	or	r24, r25
    248e:	41 f0       	breq	.+16     	; 0x24a0 <xTaskCreate+0x70>
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	2c 81       	ldd	r18, Y+4	; 0x04
    2496:	3d 81       	ldd	r19, Y+5	; 0x05
    2498:	fc 01       	movw	r30, r24
    249a:	30 8f       	std	Z+24, r19	; 0x18
    249c:	27 8b       	std	Z+23, r18	; 0x17
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <xTaskCreate+0x7e>
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	0e 94 20 02 	call	0x440	; 0x440 <vPortFree>
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <xTaskCreate+0x7e>
    24aa:	1a 82       	std	Y+2, r1	; 0x02
    24ac:	19 82       	std	Y+1, r1	; 0x01
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	89 2b       	or	r24, r25
    24b4:	c1 f0       	breq	.+48     	; 0x24e6 <xTaskCreate+0xb6>
    24b6:	a9 81       	ldd	r26, Y+1	; 0x01
    24b8:	ba 81       	ldd	r27, Y+2	; 0x02
    24ba:	ef 85       	ldd	r30, Y+15	; 0x0f
    24bc:	f8 89       	ldd	r31, Y+16	; 0x10
    24be:	2c 85       	ldd	r18, Y+12	; 0x0c
    24c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    24c2:	4a 85       	ldd	r20, Y+10	; 0x0a
    24c4:	5b 85       	ldd	r21, Y+11	; 0x0b
    24c6:	68 85       	ldd	r22, Y+8	; 0x08
    24c8:	79 85       	ldd	r23, Y+9	; 0x09
    24ca:	8e 81       	ldd	r24, Y+6	; 0x06
    24cc:	9f 81       	ldd	r25, Y+7	; 0x07
    24ce:	a1 2c       	mov	r10, r1
    24d0:	b1 2c       	mov	r11, r1
    24d2:	6d 01       	movw	r12, r26
    24d4:	7f 01       	movw	r14, r30
    24d6:	0e 85       	ldd	r16, Y+14	; 0x0e
    24d8:	19 d0       	rcall	.+50     	; 0x250c <prvInitialiseNewTask>
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	f5 d0       	rcall	.+490    	; 0x26ca <prvAddNewTaskToReadyList>
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <xTaskCreate+0xba>
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	60 96       	adiw	r28, 0x10	; 16
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	df 90       	pop	r13
    2504:	cf 90       	pop	r12
    2506:	bf 90       	pop	r11
    2508:	af 90       	pop	r10
    250a:	08 95       	ret

0000250c <prvInitialiseNewTask>:
    250c:	af 92       	push	r10
    250e:	bf 92       	push	r11
    2510:	cf 92       	push	r12
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	0f 93       	push	r16
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	62 97       	sbiw	r28, 0x12	; 18
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	9d 83       	std	Y+5, r25	; 0x05
    2530:	8c 83       	std	Y+4, r24	; 0x04
    2532:	7f 83       	std	Y+7, r23	; 0x07
    2534:	6e 83       	std	Y+6, r22	; 0x06
    2536:	59 87       	std	Y+9, r21	; 0x09
    2538:	48 87       	std	Y+8, r20	; 0x08
    253a:	3b 87       	std	Y+11, r19	; 0x0b
    253c:	2a 87       	std	Y+10, r18	; 0x0a
    253e:	0c 87       	std	Y+12, r16	; 0x0c
    2540:	fe 86       	std	Y+14, r15	; 0x0e
    2542:	ed 86       	std	Y+13, r14	; 0x0d
    2544:	d8 8a       	std	Y+16, r13	; 0x10
    2546:	cf 86       	std	Y+15, r12	; 0x0f
    2548:	ba 8a       	std	Y+18, r11	; 0x12
    254a:	a9 8a       	std	Y+17, r10	; 0x11
    254c:	8f 85       	ldd	r24, Y+15	; 0x0f
    254e:	98 89       	ldd	r25, Y+16	; 0x10
    2550:	fc 01       	movw	r30, r24
    2552:	87 89       	ldd	r24, Z+23	; 0x17
    2554:	90 8d       	ldd	r25, Z+24	; 0x18
    2556:	28 85       	ldd	r18, Y+8	; 0x08
    2558:	39 85       	ldd	r19, Y+9	; 0x09
    255a:	a9 01       	movw	r20, r18
    255c:	65 ea       	ldi	r22, 0xA5	; 165
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	0e 94 0c 38 	call	0x7018	; 0x7018 <memset>
    2564:	8f 85       	ldd	r24, Y+15	; 0x0f
    2566:	98 89       	ldd	r25, Y+16	; 0x10
    2568:	fc 01       	movw	r30, r24
    256a:	27 89       	ldd	r18, Z+23	; 0x17
    256c:	30 8d       	ldd	r19, Z+24	; 0x18
    256e:	88 85       	ldd	r24, Y+8	; 0x08
    2570:	99 85       	ldd	r25, Y+9	; 0x09
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
    2578:	9b 83       	std	Y+3, r25	; 0x03
    257a:	8a 83       	std	Y+2, r24	; 0x02
    257c:	8e 81       	ldd	r24, Y+6	; 0x06
    257e:	9f 81       	ldd	r25, Y+7	; 0x07
    2580:	89 2b       	or	r24, r25
    2582:	69 f1       	breq	.+90     	; 0x25de <prvInitialiseNewTask+0xd2>
    2584:	19 82       	std	Y+1, r1	; 0x01
    2586:	21 c0       	rjmp	.+66     	; 0x25ca <prvInitialiseNewTask+0xbe>
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	29 81       	ldd	r18, Y+1	; 0x01
    2590:	22 2f       	mov	r18, r18
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4e 81       	ldd	r20, Y+6	; 0x06
    2596:	5f 81       	ldd	r21, Y+7	; 0x07
    2598:	24 0f       	add	r18, r20
    259a:	35 1f       	adc	r19, r21
    259c:	f9 01       	movw	r30, r18
    259e:	40 81       	ld	r20, Z
    25a0:	2f 85       	ldd	r18, Y+15	; 0x0f
    25a2:	38 89       	ldd	r19, Y+16	; 0x10
    25a4:	82 0f       	add	r24, r18
    25a6:	93 1f       	adc	r25, r19
    25a8:	49 96       	adiw	r24, 0x19	; 25
    25aa:	fc 01       	movw	r30, r24
    25ac:	40 83       	st	Z, r20
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	2e 81       	ldd	r18, Y+6	; 0x06
    25b6:	3f 81       	ldd	r19, Y+7	; 0x07
    25b8:	82 0f       	add	r24, r18
    25ba:	93 1f       	adc	r25, r19
    25bc:	fc 01       	movw	r30, r24
    25be:	80 81       	ld	r24, Z
    25c0:	88 23       	and	r24, r24
    25c2:	39 f0       	breq	.+14     	; 0x25d2 <prvInitialiseNewTask+0xc6>
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	88 30       	cpi	r24, 0x08	; 8
    25ce:	e0 f2       	brcs	.-72     	; 0x2588 <prvInitialiseNewTask+0x7c>
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <prvInitialiseNewTask+0xc8>
    25d2:	00 00       	nop
    25d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d6:	98 89       	ldd	r25, Y+16	; 0x10
    25d8:	fc 01       	movw	r30, r24
    25da:	10 a2       	std	Z+32, r1	; 0x20
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <prvInitialiseNewTask+0xda>
    25de:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e0:	98 89       	ldd	r25, Y+16	; 0x10
    25e2:	fc 01       	movw	r30, r24
    25e4:	11 8e       	std	Z+25, r1	; 0x19
    25e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    25e8:	84 30       	cpi	r24, 0x04	; 4
    25ea:	10 f0       	brcs	.+4      	; 0x25f0 <prvInitialiseNewTask+0xe4>
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	8c 87       	std	Y+12, r24	; 0x0c
    25f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f2:	98 89       	ldd	r25, Y+16	; 0x10
    25f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    25f6:	fc 01       	movw	r30, r24
    25f8:	26 8b       	std	Z+22, r18	; 0x16
    25fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fc:	98 89       	ldd	r25, Y+16	; 0x10
    25fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2600:	fc 01       	movw	r30, r24
    2602:	23 a3       	std	Z+35, r18	; 0x23
    2604:	8f 85       	ldd	r24, Y+15	; 0x0f
    2606:	98 89       	ldd	r25, Y+16	; 0x10
    2608:	fc 01       	movw	r30, r24
    260a:	14 a2       	std	Z+36, r1	; 0x24
    260c:	8f 85       	ldd	r24, Y+15	; 0x0f
    260e:	98 89       	ldd	r25, Y+16	; 0x10
    2610:	02 96       	adiw	r24, 0x02	; 2
    2612:	0e 94 71 02 	call	0x4e2	; 0x4e2 <vListInitialiseItem>
    2616:	8f 85       	ldd	r24, Y+15	; 0x0f
    2618:	98 89       	ldd	r25, Y+16	; 0x10
    261a:	0c 96       	adiw	r24, 0x0c	; 12
    261c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <vListInitialiseItem>
    2620:	8f 85       	ldd	r24, Y+15	; 0x0f
    2622:	98 89       	ldd	r25, Y+16	; 0x10
    2624:	2f 85       	ldd	r18, Y+15	; 0x0f
    2626:	38 89       	ldd	r19, Y+16	; 0x10
    2628:	fc 01       	movw	r30, r24
    262a:	31 87       	std	Z+9, r19	; 0x09
    262c:	20 87       	std	Z+8, r18	; 0x08
    262e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2630:	88 2f       	mov	r24, r24
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	24 e0       	ldi	r18, 0x04	; 4
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	28 1b       	sub	r18, r24
    263a:	39 0b       	sbc	r19, r25
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	fc 01       	movw	r30, r24
    2642:	35 87       	std	Z+13, r19	; 0x0d
    2644:	24 87       	std	Z+12, r18	; 0x0c
    2646:	8f 85       	ldd	r24, Y+15	; 0x0f
    2648:	98 89       	ldd	r25, Y+16	; 0x10
    264a:	2f 85       	ldd	r18, Y+15	; 0x0f
    264c:	38 89       	ldd	r19, Y+16	; 0x10
    264e:	fc 01       	movw	r30, r24
    2650:	33 8b       	std	Z+19, r19	; 0x13
    2652:	22 8b       	std	Z+18, r18	; 0x12
    2654:	8f 85       	ldd	r24, Y+15	; 0x0f
    2656:	98 89       	ldd	r25, Y+16	; 0x10
    2658:	fc 01       	movw	r30, r24
    265a:	16 a2       	std	Z+38, r1	; 0x26
    265c:	15 a2       	std	Z+37, r1	; 0x25
    265e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2660:	98 89       	ldd	r25, Y+16	; 0x10
    2662:	fc 01       	movw	r30, r24
    2664:	17 a2       	std	Z+39, r1	; 0x27
    2666:	10 a6       	std	Z+40, r1	; 0x28
    2668:	11 a6       	std	Z+41, r1	; 0x29
    266a:	12 a6       	std	Z+42, r1	; 0x2a
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	98 89       	ldd	r25, Y+16	; 0x10
    2670:	fc 01       	movw	r30, r24
    2672:	13 a6       	std	Z+43, r1	; 0x2b
    2674:	4a 85       	ldd	r20, Y+10	; 0x0a
    2676:	5b 85       	ldd	r21, Y+11	; 0x0b
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	3d 81       	ldd	r19, Y+5	; 0x05
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	9b 81       	ldd	r25, Y+3	; 0x03
    2680:	b9 01       	movw	r22, r18
    2682:	0e 94 a1 03 	call	0x742	; 0x742 <pxPortInitialiseStack>
    2686:	9c 01       	movw	r18, r24
    2688:	8f 85       	ldd	r24, Y+15	; 0x0f
    268a:	98 89       	ldd	r25, Y+16	; 0x10
    268c:	fc 01       	movw	r30, r24
    268e:	31 83       	std	Z+1, r19	; 0x01
    2690:	20 83       	st	Z, r18
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	89 2b       	or	r24, r25
    2698:	39 f0       	breq	.+14     	; 0x26a8 <prvInitialiseNewTask+0x19c>
    269a:	8d 85       	ldd	r24, Y+13	; 0x0d
    269c:	9e 85       	ldd	r25, Y+14	; 0x0e
    269e:	2f 85       	ldd	r18, Y+15	; 0x0f
    26a0:	38 89       	ldd	r19, Y+16	; 0x10
    26a2:	fc 01       	movw	r30, r24
    26a4:	31 83       	std	Z+1, r19	; 0x01
    26a6:	20 83       	st	Z, r18
    26a8:	00 00       	nop
    26aa:	62 96       	adiw	r28, 0x12	; 18
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	08 95       	ret

000026ca <prvAddNewTaskToReadyList>:
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	1f 92       	push	r1
    26d0:	1f 92       	push	r1
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	89 83       	std	Y+1, r24	; 0x01
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	0f 92       	push	r0
    26e0:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <uxCurrentNumberOfTasks>
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <uxCurrentNumberOfTasks>
    26ea:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    26ee:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    26f2:	89 2b       	or	r24, r25
    26f4:	61 f4       	brne	.+24     	; 0x270e <prvAddNewTaskToReadyList+0x44>
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <__data_end+0x1>
    26fe:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <__data_end>
    2702:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <uxCurrentNumberOfTasks>
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	c1 f4       	brne	.+48     	; 0x273a <prvAddNewTaskToReadyList+0x70>
    270a:	87 d4       	rcall	.+2318   	; 0x301a <prvInitialiseTaskLists>
    270c:	16 c0       	rjmp	.+44     	; 0x273a <prvAddNewTaskToReadyList+0x70>
    270e:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <xSchedulerRunning>
    2712:	88 23       	and	r24, r24
    2714:	91 f4       	brne	.+36     	; 0x273a <prvAddNewTaskToReadyList+0x70>
    2716:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    271a:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    271e:	fc 01       	movw	r30, r24
    2720:	26 89       	ldd	r18, Z+22	; 0x16
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	fc 01       	movw	r30, r24
    2728:	86 89       	ldd	r24, Z+22	; 0x16
    272a:	82 17       	cp	r24, r18
    272c:	30 f0       	brcs	.+12     	; 0x273a <prvAddNewTaskToReadyList+0x70>
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <__data_end+0x1>
    2736:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <__data_end>
    273a:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <uxTaskNumber>
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <uxTaskNumber>
    2744:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <uxTaskNumber>
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	fc 01       	movw	r30, r24
    274e:	21 a3       	std	Z+33, r18	; 0x21
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	fc 01       	movw	r30, r24
    2756:	96 89       	ldd	r25, Z+22	; 0x16
    2758:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    275c:	89 17       	cp	r24, r25
    275e:	30 f4       	brcc	.+12     	; 0x276c <prvAddNewTaskToReadyList+0xa2>
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	fc 01       	movw	r30, r24
    2766:	86 89       	ldd	r24, Z+22	; 0x16
    2768:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	ac 01       	movw	r20, r24
    2772:	4e 5f       	subi	r20, 0xFE	; 254
    2774:	5f 4f       	sbci	r21, 0xFF	; 255
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	fc 01       	movw	r30, r24
    277c:	86 89       	ldd	r24, Z+22	; 0x16
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	c9 01       	movw	r24, r18
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	82 0f       	add	r24, r18
    2792:	93 1f       	adc	r25, r19
    2794:	80 5b       	subi	r24, 0xB0	; 176
    2796:	97 4f       	sbci	r25, 0xF7	; 247
    2798:	ba 01       	movw	r22, r20
    279a:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    279e:	0f 90       	pop	r0
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <xSchedulerRunning>
    27a6:	88 23       	and	r24, r24
    27a8:	71 f0       	breq	.+28     	; 0x27c6 <prvAddNewTaskToReadyList+0xfc>
    27aa:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    27ae:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    27b2:	fc 01       	movw	r30, r24
    27b4:	26 89       	ldd	r18, Z+22	; 0x16
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	fc 01       	movw	r30, r24
    27bc:	86 89       	ldd	r24, Z+22	; 0x16
    27be:	28 17       	cp	r18, r24
    27c0:	10 f4       	brcc	.+4      	; 0x27c6 <prvAddNewTaskToReadyList+0xfc>
    27c2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
    27c6:	00 00       	nop
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <vTaskDelay>:
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <vTaskDelay+0x6>
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	9b 83       	std	Y+3, r25	; 0x03
    27de:	8a 83       	std	Y+2, r24	; 0x02
    27e0:	19 82       	std	Y+1, r1	; 0x01
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	9b 81       	ldd	r25, Y+3	; 0x03
    27e6:	89 2b       	or	r24, r25
    27e8:	41 f0       	breq	.+16     	; 0x27fa <vTaskDelay+0x28>
    27ea:	56 d0       	rcall	.+172    	; 0x2898 <vTaskSuspendAll>
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	9b 81       	ldd	r25, Y+3	; 0x03
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <prvAddCurrentTaskToDelayedList>
    27f6:	5d d0       	rcall	.+186    	; 0x28b2 <xTaskResumeAll>
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	88 23       	and	r24, r24
    27fe:	11 f4       	brne	.+4      	; 0x2804 <vTaskDelay+0x32>
    2800:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
    2804:	00 00       	nop
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <vTaskStartScheduler>:
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	1f 92       	push	r1
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	0f 2e       	mov	r0, r31
    2824:	f1 eb       	ldi	r31, 0xB1	; 177
    2826:	ef 2e       	mov	r14, r31
    2828:	f8 e0       	ldi	r31, 0x08	; 8
    282a:	ff 2e       	mov	r15, r31
    282c:	f0 2d       	mov	r31, r0
    282e:	00 e0       	ldi	r16, 0x00	; 0
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 ec       	ldi	r20, 0xC0	; 192
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	60 e4       	ldi	r22, 0x40	; 64
    283a:	72 e0       	ldi	r23, 0x02	; 2
    283c:	8d ec       	ldi	r24, 0xCD	; 205
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	f7 dd       	rcall	.-1042   	; 0x2430 <xTaskCreate>
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	81 30       	cpi	r24, 0x01	; 1
    2848:	19 f4       	brne	.+6      	; 0x2850 <vTaskStartScheduler+0x3e>
    284a:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <xTimerCreateTimerTask>
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	81 30       	cpi	r24, 0x01	; 1
    2854:	c9 f4       	brne	.+50     	; 0x2888 <vTaskStartScheduler+0x76>
    2856:	f8 94       	cli
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	9f ef       	ldi	r25, 0xFF	; 255
    285c:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    2860:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <xNextTaskUnblockTime>
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <xSchedulerRunning>
    286a:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <xTickCount+0x1>
    286e:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <xTickCount>
    2872:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2876:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    287a:	fc 01       	movw	r30, r24
    287c:	85 a1       	ldd	r24, Z+37	; 0x25
    287e:	96 a1       	ldd	r25, Z+38	; 0x26
    2880:	0e 94 cb 01 	call	0x396	; 0x396 <task_switch_in>
    2884:	0e 94 65 05 	call	0xaca	; 0xaca <xPortStartScheduler>
    2888:	00 00       	nop
    288a:	0f 90       	pop	r0
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	0f 91       	pop	r16
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	08 95       	ret

00002898 <vTaskSuspendAll>:
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <uxSchedulerSuspended>
    28aa:	00 00       	nop
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <xTaskResumeAll>:
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <xTaskResumeAll+0x6>
    28b8:	1f 92       	push	r1
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	1a 82       	std	Y+2, r1	; 0x02
    28c0:	19 82       	std	Y+1, r1	; 0x01
    28c2:	1b 82       	std	Y+3, r1	; 0x03
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	0f 92       	push	r0
    28ca:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <uxSchedulerSuspended>
    28d4:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    28d8:	88 23       	and	r24, r24
    28da:	09 f0       	breq	.+2      	; 0x28de <xTaskResumeAll+0x2c>
    28dc:	75 c0       	rjmp	.+234    	; 0x29c8 <xTaskResumeAll+0x116>
    28de:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <uxCurrentNumberOfTasks>
    28e2:	88 23       	and	r24, r24
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <xTaskResumeAll+0x36>
    28e6:	70 c0       	rjmp	.+224    	; 0x29c8 <xTaskResumeAll+0x116>
    28e8:	49 c0       	rjmp	.+146    	; 0x297c <xTaskResumeAll+0xca>
    28ea:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <xPendingReadyList+0x5>
    28ee:	90 91 90 08 	lds	r25, 0x0890	; 0x800890 <xPendingReadyList+0x6>
    28f2:	fc 01       	movw	r30, r24
    28f4:	86 81       	ldd	r24, Z+6	; 0x06
    28f6:	97 81       	ldd	r25, Z+7	; 0x07
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2900:	0c 96       	adiw	r24, 0x0c	; 12
    2902:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	9a 81       	ldd	r25, Y+2	; 0x02
    290a:	02 96       	adiw	r24, 0x02	; 2
    290c:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	fc 01       	movw	r30, r24
    2916:	96 89       	ldd	r25, Z+22	; 0x16
    2918:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    291c:	89 17       	cp	r24, r25
    291e:	30 f4       	brcc	.+12     	; 0x292c <xTaskResumeAll+0x7a>
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	fc 01       	movw	r30, r24
    2926:	86 89       	ldd	r24, Z+22	; 0x16
    2928:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	ac 01       	movw	r20, r24
    2932:	4e 5f       	subi	r20, 0xFE	; 254
    2934:	5f 4f       	sbci	r21, 0xFF	; 255
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	fc 01       	movw	r30, r24
    293c:	86 89       	ldd	r24, Z+22	; 0x16
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	c9 01       	movw	r24, r18
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	82 0f       	add	r24, r18
    2952:	93 1f       	adc	r25, r19
    2954:	80 5b       	subi	r24, 0xB0	; 176
    2956:	97 4f       	sbci	r25, 0xF7	; 247
    2958:	ba 01       	movw	r22, r20
    295a:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	fc 01       	movw	r30, r24
    2964:	26 89       	ldd	r18, Z+22	; 0x16
    2966:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    296a:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    296e:	fc 01       	movw	r30, r24
    2970:	86 89       	ldd	r24, Z+22	; 0x16
    2972:	28 17       	cp	r18, r24
    2974:	18 f0       	brcs	.+6      	; 0x297c <xTaskResumeAll+0xca>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xYieldPending>
    297c:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <xPendingReadyList>
    2980:	88 23       	and	r24, r24
    2982:	09 f0       	breq	.+2      	; 0x2986 <xTaskResumeAll+0xd4>
    2984:	b2 cf       	rjmp	.-156    	; 0x28ea <xTaskResumeAll+0x38>
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	89 2b       	or	r24, r25
    298c:	09 f0       	breq	.+2      	; 0x2990 <xTaskResumeAll+0xde>
    298e:	d1 d3       	rcall	.+1954   	; 0x3132 <prvResetNextTaskUnblockTime>
    2990:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <uxPendedTicks>
    2994:	8c 83       	std	Y+4, r24	; 0x04
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	88 23       	and	r24, r24
    299a:	71 f0       	breq	.+28     	; 0x29b8 <xTaskResumeAll+0x106>
    299c:	37 d0       	rcall	.+110    	; 0x2a0c <xTaskIncrementTick>
    299e:	88 23       	and	r24, r24
    29a0:	19 f0       	breq	.+6      	; 0x29a8 <xTaskResumeAll+0xf6>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xYieldPending>
    29a8:	8c 81       	ldd	r24, Y+4	; 0x04
    29aa:	81 50       	subi	r24, 0x01	; 1
    29ac:	8c 83       	std	Y+4, r24	; 0x04
    29ae:	8c 81       	ldd	r24, Y+4	; 0x04
    29b0:	88 23       	and	r24, r24
    29b2:	a1 f7       	brne	.-24     	; 0x299c <xTaskResumeAll+0xea>
    29b4:	10 92 ab 08 	sts	0x08AB, r1	; 0x8008ab <uxPendedTicks>
    29b8:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <xYieldPending>
    29bc:	88 23       	and	r24, r24
    29be:	21 f0       	breq	.+8      	; 0x29c8 <xTaskResumeAll+0x116>
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	8b 83       	std	Y+3, r24	; 0x03
    29c4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	08 95       	ret

000029dc <xTaskGetTickCount>:
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	1f 92       	push	r1
    29e2:	1f 92       	push	r1
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	0f 92       	push	r0
    29ee:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xTickCount>
    29f2:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xTickCount+0x1>
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	0f 90       	pop	r0
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <xTaskIncrementTick>:
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	29 97       	sbiw	r28, 0x09	; 9
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	19 82       	std	Y+1, r1	; 0x01
    2a22:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    2a26:	88 23       	and	r24, r24
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <xTaskIncrementTick+0x20>
    2a2a:	c7 c0       	rjmp	.+398    	; 0x2bba <xTaskIncrementTick+0x1ae>
    2a2c:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xTickCount>
    2a30:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xTickCount+0x1>
    2a34:	01 96       	adiw	r24, 0x01	; 1
    2a36:	9b 83       	std	Y+3, r25	; 0x03
    2a38:	8a 83       	std	Y+2, r24	; 0x02
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3e:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <xTickCount+0x1>
    2a42:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <xTickCount>
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	89 2b       	or	r24, r25
    2a4c:	d1 f4       	brne	.+52     	; 0x2a82 <xTaskIncrementTick+0x76>
    2a4e:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxDelayedTaskList>
    2a52:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxDelayedTaskList+0x1>
    2a56:	9d 83       	std	Y+5, r25	; 0x05
    2a58:	8c 83       	std	Y+4, r24	; 0x04
    2a5a:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <pxOverflowDelayedTaskList>
    2a5e:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <pxOverflowDelayedTaskList+0x1>
    2a62:	90 93 87 08 	sts	0x0887, r25	; 0x800887 <pxDelayedTaskList+0x1>
    2a66:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <pxDelayedTaskList>
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6e:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <pxOverflowDelayedTaskList+0x1>
    2a72:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <pxOverflowDelayedTaskList>
    2a76:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <xNumOfOverflows>
    2a7a:	8f 5f       	subi	r24, 0xFF	; 255
    2a7c:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <xNumOfOverflows>
    2a80:	58 d3       	rcall	.+1712   	; 0x3132 <prvResetNextTaskUnblockTime>
    2a82:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <xNextTaskUnblockTime>
    2a86:	90 91 b0 08 	lds	r25, 0x08B0	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    2a8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2a8c:	3b 81       	ldd	r19, Y+3	; 0x03
    2a8e:	28 17       	cp	r18, r24
    2a90:	39 07       	cpc	r19, r25
    2a92:	08 f4       	brcc	.+2      	; 0x2a96 <xTaskIncrementTick+0x8a>
    2a94:	78 c0       	rjmp	.+240    	; 0x2b86 <xTaskIncrementTick+0x17a>
    2a96:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxDelayedTaskList>
    2a9a:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxDelayedTaskList+0x1>
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	80 81       	ld	r24, Z
    2aa2:	88 23       	and	r24, r24
    2aa4:	39 f4       	brne	.+14     	; 0x2ab4 <xTaskIncrementTick+0xa8>
    2aa6:	8f ef       	ldi	r24, 0xFF	; 255
    2aa8:	9f ef       	ldi	r25, 0xFF	; 255
    2aaa:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    2aae:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <xNextTaskUnblockTime>
    2ab2:	69 c0       	rjmp	.+210    	; 0x2b86 <xTaskIncrementTick+0x17a>
    2ab4:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxDelayedTaskList>
    2ab8:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxDelayedTaskList+0x1>
    2abc:	fc 01       	movw	r30, r24
    2abe:	85 81       	ldd	r24, Z+5	; 0x05
    2ac0:	96 81       	ldd	r25, Z+6	; 0x06
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	86 81       	ldd	r24, Z+6	; 0x06
    2ac6:	97 81       	ldd	r25, Z+7	; 0x07
    2ac8:	9f 83       	std	Y+7, r25	; 0x07
    2aca:	8e 83       	std	Y+6, r24	; 0x06
    2acc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ace:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	99 87       	std	Y+9, r25	; 0x09
    2ad8:	88 87       	std	Y+8, r24	; 0x08
    2ada:	2a 81       	ldd	r18, Y+2	; 0x02
    2adc:	3b 81       	ldd	r19, Y+3	; 0x03
    2ade:	88 85       	ldd	r24, Y+8	; 0x08
    2ae0:	99 85       	ldd	r25, Y+9	; 0x09
    2ae2:	28 17       	cp	r18, r24
    2ae4:	39 07       	cpc	r19, r25
    2ae6:	38 f4       	brcc	.+14     	; 0x2af6 <xTaskIncrementTick+0xea>
    2ae8:	88 85       	ldd	r24, Y+8	; 0x08
    2aea:	99 85       	ldd	r25, Y+9	; 0x09
    2aec:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    2af0:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <xNextTaskUnblockTime>
    2af4:	48 c0       	rjmp	.+144    	; 0x2b86 <xTaskIncrementTick+0x17a>
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	9f 81       	ldd	r25, Y+7	; 0x07
    2afa:	02 96       	adiw	r24, 0x02	; 2
    2afc:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    2b00:	8e 81       	ldd	r24, Y+6	; 0x06
    2b02:	9f 81       	ldd	r25, Y+7	; 0x07
    2b04:	fc 01       	movw	r30, r24
    2b06:	84 89       	ldd	r24, Z+20	; 0x14
    2b08:	95 89       	ldd	r25, Z+21	; 0x15
    2b0a:	89 2b       	or	r24, r25
    2b0c:	29 f0       	breq	.+10     	; 0x2b18 <xTaskIncrementTick+0x10c>
    2b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b10:	9f 81       	ldd	r25, Y+7	; 0x07
    2b12:	0c 96       	adiw	r24, 0x0c	; 12
    2b14:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    2b18:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	96 89       	ldd	r25, Z+22	; 0x16
    2b20:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    2b24:	89 17       	cp	r24, r25
    2b26:	30 f4       	brcc	.+12     	; 0x2b34 <xTaskIncrementTick+0x128>
    2b28:	8e 81       	ldd	r24, Y+6	; 0x06
    2b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	86 89       	ldd	r24, Z+22	; 0x16
    2b30:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    2b34:	8e 81       	ldd	r24, Y+6	; 0x06
    2b36:	9f 81       	ldd	r25, Y+7	; 0x07
    2b38:	ac 01       	movw	r20, r24
    2b3a:	4e 5f       	subi	r20, 0xFE	; 254
    2b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b40:	9f 81       	ldd	r25, Y+7	; 0x07
    2b42:	fc 01       	movw	r30, r24
    2b44:	86 89       	ldd	r24, Z+22	; 0x16
    2b46:	28 2f       	mov	r18, r24
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	c9 01       	movw	r24, r18
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	82 0f       	add	r24, r18
    2b5a:	93 1f       	adc	r25, r19
    2b5c:	80 5b       	subi	r24, 0xB0	; 176
    2b5e:	97 4f       	sbci	r25, 0xF7	; 247
    2b60:	ba 01       	movw	r22, r20
    2b62:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    2b66:	8e 81       	ldd	r24, Y+6	; 0x06
    2b68:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	26 89       	ldd	r18, Z+22	; 0x16
    2b6e:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2b72:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2b76:	fc 01       	movw	r30, r24
    2b78:	86 89       	ldd	r24, Z+22	; 0x16
    2b7a:	28 17       	cp	r18, r24
    2b7c:	08 f4       	brcc	.+2      	; 0x2b80 <xTaskIncrementTick+0x174>
    2b7e:	8b cf       	rjmp	.-234    	; 0x2a96 <xTaskIncrementTick+0x8a>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	88 cf       	rjmp	.-240    	; 0x2a96 <xTaskIncrementTick+0x8a>
    2b86:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2b8a:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2b8e:	fc 01       	movw	r30, r24
    2b90:	86 89       	ldd	r24, Z+22	; 0x16
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	c9 01       	movw	r24, r18
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	82 0f       	add	r24, r18
    2ba6:	93 1f       	adc	r25, r19
    2ba8:	80 5b       	subi	r24, 0xB0	; 176
    2baa:	97 4f       	sbci	r25, 0xF7	; 247
    2bac:	fc 01       	movw	r30, r24
    2bae:	80 81       	ld	r24, Z
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	40 f0       	brcs	.+16     	; 0x2bc4 <xTaskIncrementTick+0x1b8>
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <xTaskIncrementTick+0x1b8>
    2bba:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <uxPendedTicks>
    2bbe:	8f 5f       	subi	r24, 0xFF	; 255
    2bc0:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <uxPendedTicks>
    2bc4:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <xYieldPending>
    2bc8:	88 23       	and	r24, r24
    2bca:	11 f0       	breq	.+4      	; 0x2bd0 <xTaskIncrementTick+0x1c4>
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	29 96       	adiw	r28, 0x09	; 9
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	08 95       	ret

00002be4 <vTaskSwitchContext>:
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <vTaskSwitchContext+0x6>
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    2bf2:	88 23       	and	r24, r24
    2bf4:	21 f0       	breq	.+8      	; 0x2bfe <vTaskSwitchContext+0x1a>
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xYieldPending>
    2bfc:	90 c0       	rjmp	.+288    	; 0x2d1e <vTaskSwitchContext+0x13a>
    2bfe:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <xYieldPending>
    2c02:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2c06:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	85 a1       	ldd	r24, Z+37	; 0x25
    2c0e:	96 a1       	ldd	r25, Z+38	; 0x26
    2c10:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <task_switch_out>
    2c14:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2c18:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	20 81       	ld	r18, Z
    2c20:	31 81       	ldd	r19, Z+1	; 0x01
    2c22:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2c26:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	87 89       	ldd	r24, Z+23	; 0x17
    2c2e:	90 8d       	ldd	r25, Z+24	; 0x18
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	70 f0       	brcs	.+28     	; 0x2c52 <vTaskSwitchContext+0x6e>
    2c36:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2c3a:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2c3e:	9c 01       	movw	r18, r24
    2c40:	27 5e       	subi	r18, 0xE7	; 231
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255
    2c44:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2c48:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2c4c:	b9 01       	movw	r22, r18
    2c4e:	0e 94 1f 23 	call	0x463e	; 0x463e <vApplicationStackOverflowHook>
    2c52:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	03 c0       	rjmp	.+6      	; 0x2c60 <vTaskSwitchContext+0x7c>
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	81 50       	subi	r24, 0x01	; 1
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	c9 01       	movw	r24, r18
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	82 0f       	add	r24, r18
    2c76:	93 1f       	adc	r25, r19
    2c78:	80 5b       	subi	r24, 0xB0	; 176
    2c7a:	97 4f       	sbci	r25, 0xF7	; 247
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	80 81       	ld	r24, Z
    2c80:	88 23       	and	r24, r24
    2c82:	59 f3       	breq	.-42     	; 0x2c5a <vTaskSwitchContext+0x76>
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	c9 01       	movw	r24, r18
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	82 0f       	add	r24, r18
    2c9a:	93 1f       	adc	r25, r19
    2c9c:	80 5b       	subi	r24, 0xB0	; 176
    2c9e:	97 4f       	sbci	r25, 0xF7	; 247
    2ca0:	9b 83       	std	Y+3, r25	; 0x03
    2ca2:	8a 83       	std	Y+2, r24	; 0x02
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca8:	fc 01       	movw	r30, r24
    2caa:	81 81       	ldd	r24, Z+1	; 0x01
    2cac:	92 81       	ldd	r25, Z+2	; 0x02
    2cae:	fc 01       	movw	r30, r24
    2cb0:	22 81       	ldd	r18, Z+2	; 0x02
    2cb2:	33 81       	ldd	r19, Z+3	; 0x03
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	fc 01       	movw	r30, r24
    2cba:	32 83       	std	Z+2, r19	; 0x02
    2cbc:	21 83       	std	Z+1, r18	; 0x01
    2cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	21 81       	ldd	r18, Z+1	; 0x01
    2cc6:	32 81       	ldd	r19, Z+2	; 0x02
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ccc:	03 96       	adiw	r24, 0x03	; 3
    2cce:	28 17       	cp	r18, r24
    2cd0:	39 07       	cpc	r19, r25
    2cd2:	69 f4       	brne	.+26     	; 0x2cee <vTaskSwitchContext+0x10a>
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	fc 01       	movw	r30, r24
    2cda:	81 81       	ldd	r24, Z+1	; 0x01
    2cdc:	92 81       	ldd	r25, Z+2	; 0x02
    2cde:	fc 01       	movw	r30, r24
    2ce0:	22 81       	ldd	r18, Z+2	; 0x02
    2ce2:	33 81       	ldd	r19, Z+3	; 0x03
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce8:	fc 01       	movw	r30, r24
    2cea:	32 83       	std	Z+2, r19	; 0x02
    2cec:	21 83       	std	Z+1, r18	; 0x01
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	81 81       	ldd	r24, Z+1	; 0x01
    2cf6:	92 81       	ldd	r25, Z+2	; 0x02
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	86 81       	ldd	r24, Z+6	; 0x06
    2cfc:	97 81       	ldd	r25, Z+7	; 0x07
    2cfe:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <__data_end+0x1>
    2d02:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <__data_end>
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    2d0c:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2d10:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2d14:	fc 01       	movw	r30, r24
    2d16:	85 a1       	ldd	r24, Z+37	; 0x25
    2d18:	96 a1       	ldd	r25, Z+38	; 0x26
    2d1a:	0e 94 cb 01 	call	0x396	; 0x396 <task_switch_in>
    2d1e:	00 00       	nop
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	08 95       	ret

00002d2c <vTaskPlaceOnEventList>:
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <vTaskPlaceOnEventList+0x6>
    2d32:	1f 92       	push	r1
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	7c 83       	std	Y+4, r23	; 0x04
    2d3e:	6b 83       	std	Y+3, r22	; 0x03
    2d40:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2d44:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2d48:	9c 01       	movw	r18, r24
    2d4a:	24 5f       	subi	r18, 0xF4	; 244
    2d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	b9 01       	movw	r22, r18
    2d54:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInsert>
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	db d6       	rcall	.+3510   	; 0x3b16 <prvAddCurrentTaskToDelayedList>
    2d60:	00 00       	nop
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	08 95       	ret

00002d70 <vTaskPlaceOnEventListRestricted>:
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <vTaskPlaceOnEventListRestricted+0x6>
    2d76:	1f 92       	push	r1
    2d78:	1f 92       	push	r1
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	7c 83       	std	Y+4, r23	; 0x04
    2d84:	6b 83       	std	Y+3, r22	; 0x03
    2d86:	4d 83       	std	Y+5, r20	; 0x05
    2d88:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2d8c:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2d90:	9c 01       	movw	r18, r24
    2d92:	24 5f       	subi	r18, 0xF4	; 244
    2d94:	3f 4f       	sbci	r19, 0xFF	; 255
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	b9 01       	movw	r22, r18
    2d9c:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    2da0:	8d 81       	ldd	r24, Y+5	; 0x05
    2da2:	88 23       	and	r24, r24
    2da4:	21 f0       	breq	.+8      	; 0x2dae <vTaskPlaceOnEventListRestricted+0x3e>
    2da6:	8f ef       	ldi	r24, 0xFF	; 255
    2da8:	9f ef       	ldi	r25, 0xFF	; 255
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	8b 83       	std	Y+3, r24	; 0x03
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	6d 81       	ldd	r22, Y+5	; 0x05
    2db4:	b0 d6       	rcall	.+3424   	; 0x3b16 <prvAddCurrentTaskToDelayedList>
    2db6:	00 00       	nop
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	08 95       	ret

00002dc8 <xTaskRemoveFromEventList>:
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <xTaskRemoveFromEventList+0x6>
    2dce:	1f 92       	push	r1
    2dd0:	1f 92       	push	r1
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	9d 83       	std	Y+5, r25	; 0x05
    2dd8:	8c 83       	std	Y+4, r24	; 0x04
    2dda:	8c 81       	ldd	r24, Y+4	; 0x04
    2ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dde:	fc 01       	movw	r30, r24
    2de0:	85 81       	ldd	r24, Z+5	; 0x05
    2de2:	96 81       	ldd	r25, Z+6	; 0x06
    2de4:	fc 01       	movw	r30, r24
    2de6:	86 81       	ldd	r24, Z+6	; 0x06
    2de8:	97 81       	ldd	r25, Z+7	; 0x07
    2dea:	9b 83       	std	Y+3, r25	; 0x03
    2dec:	8a 83       	std	Y+2, r24	; 0x02
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	9b 81       	ldd	r25, Y+3	; 0x03
    2df2:	0c 96       	adiw	r24, 0x0c	; 12
    2df4:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    2df8:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    2dfc:	88 23       	and	r24, r24
    2dfe:	69 f5       	brne	.+90     	; 0x2e5a <xTaskRemoveFromEventList+0x92>
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	9b 81       	ldd	r25, Y+3	; 0x03
    2e04:	02 96       	adiw	r24, 0x02	; 2
    2e06:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0e:	fc 01       	movw	r30, r24
    2e10:	96 89       	ldd	r25, Z+22	; 0x16
    2e12:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    2e16:	89 17       	cp	r24, r25
    2e18:	30 f4       	brcc	.+12     	; 0x2e26 <xTaskRemoveFromEventList+0x5e>
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1e:	fc 01       	movw	r30, r24
    2e20:	86 89       	ldd	r24, Z+22	; 0x16
    2e22:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2a:	ac 01       	movw	r20, r24
    2e2c:	4e 5f       	subi	r20, 0xFE	; 254
    2e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	9b 81       	ldd	r25, Y+3	; 0x03
    2e34:	fc 01       	movw	r30, r24
    2e36:	86 89       	ldd	r24, Z+22	; 0x16
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	c9 01       	movw	r24, r18
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	82 0f       	add	r24, r18
    2e4c:	93 1f       	adc	r25, r19
    2e4e:	80 5b       	subi	r24, 0xB0	; 176
    2e50:	97 4f       	sbci	r25, 0xF7	; 247
    2e52:	ba 01       	movw	r22, r20
    2e54:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    2e58:	08 c0       	rjmp	.+16     	; 0x2e6a <xTaskRemoveFromEventList+0xa2>
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5e:	0c 96       	adiw	r24, 0x0c	; 12
    2e60:	bc 01       	movw	r22, r24
    2e62:	8a e8       	ldi	r24, 0x8A	; 138
    2e64:	98 e0       	ldi	r25, 0x08	; 8
    2e66:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	fc 01       	movw	r30, r24
    2e70:	26 89       	ldd	r18, Z+22	; 0x16
    2e72:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    2e76:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	86 89       	ldd	r24, Z+22	; 0x16
    2e7e:	82 17       	cp	r24, r18
    2e80:	30 f4       	brcc	.+12     	; 0x2e8e <xTaskRemoveFromEventList+0xc6>
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xYieldPending>
    2e8c:	01 c0       	rjmp	.+2      	; 0x2e90 <xTaskRemoveFromEventList+0xc8>
    2e8e:	19 82       	std	Y+1, r1	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	08 95       	ret

00002ea2 <vTaskSetTimeOutState>:
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	1f 92       	push	r1
    2ea8:	1f 92       	push	r1
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	9a 83       	std	Y+2, r25	; 0x02
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	0f 92       	push	r0
    2eb8:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <xNumOfOverflows>
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	20 83       	st	Z, r18
    2ec4:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <xTickCount>
    2ec8:	30 91 a8 08 	lds	r19, 0x08A8	; 0x8008a8 <xTickCount+0x1>
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	32 83       	std	Z+2, r19	; 0x02
    2ed4:	21 83       	std	Z+1, r18	; 0x01
    2ed6:	0f 90       	pop	r0
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	00 00       	nop
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	08 95       	ret

00002ee6 <vTaskInternalSetTimeOutState>:
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	1f 92       	push	r1
    2eec:	1f 92       	push	r1
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	9a 83       	std	Y+2, r25	; 0x02
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    2ef6:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <xNumOfOverflows>
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	fc 01       	movw	r30, r24
    2f00:	20 83       	st	Z, r18
    2f02:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <xTickCount>
    2f06:	30 91 a8 08 	lds	r19, 0x08A8	; 0x8008a8 <xTickCount+0x1>
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	fc 01       	movw	r30, r24
    2f10:	32 83       	std	Z+2, r19	; 0x02
    2f12:	21 83       	std	Z+1, r18	; 0x01
    2f14:	00 00       	nop
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	08 95       	ret

00002f20 <xTaskCheckForTimeOut>:
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	29 97       	sbiw	r28, 0x09	; 9
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	9f 83       	std	Y+7, r25	; 0x07
    2f36:	8e 83       	std	Y+6, r24	; 0x06
    2f38:	79 87       	std	Y+9, r23	; 0x09
    2f3a:	68 87       	std	Y+8, r22	; 0x08
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	0f 92       	push	r0
    2f42:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xTickCount>
    2f46:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xTickCount+0x1>
    2f4a:	9b 83       	std	Y+3, r25	; 0x03
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
    2f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f50:	9f 81       	ldd	r25, Y+7	; 0x07
    2f52:	fc 01       	movw	r30, r24
    2f54:	81 81       	ldd	r24, Z+1	; 0x01
    2f56:	92 81       	ldd	r25, Z+2	; 0x02
    2f58:	2a 81       	ldd	r18, Y+2	; 0x02
    2f5a:	3b 81       	ldd	r19, Y+3	; 0x03
    2f5c:	a9 01       	movw	r20, r18
    2f5e:	48 1b       	sub	r20, r24
    2f60:	59 0b       	sbc	r21, r25
    2f62:	ca 01       	movw	r24, r20
    2f64:	9d 83       	std	Y+5, r25	; 0x05
    2f66:	8c 83       	std	Y+4, r24	; 0x04
    2f68:	88 85       	ldd	r24, Y+8	; 0x08
    2f6a:	99 85       	ldd	r25, Y+9	; 0x09
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	11 f4       	brne	.+4      	; 0x2f7a <xTaskCheckForTimeOut+0x5a>
    2f76:	19 82       	std	Y+1, r1	; 0x01
    2f78:	39 c0       	rjmp	.+114    	; 0x2fec <xTaskCheckForTimeOut+0xcc>
    2f7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f7e:	fc 01       	movw	r30, r24
    2f80:	90 81       	ld	r25, Z
    2f82:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <xNumOfOverflows>
    2f86:	98 17       	cp	r25, r24
    2f88:	69 f0       	breq	.+26     	; 0x2fa4 <xTaskCheckForTimeOut+0x84>
    2f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f8e:	fc 01       	movw	r30, r24
    2f90:	21 81       	ldd	r18, Z+1	; 0x01
    2f92:	32 81       	ldd	r19, Z+2	; 0x02
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	9b 81       	ldd	r25, Y+3	; 0x03
    2f98:	82 17       	cp	r24, r18
    2f9a:	93 07       	cpc	r25, r19
    2f9c:	18 f0       	brcs	.+6      	; 0x2fa4 <xTaskCheckForTimeOut+0x84>
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	24 c0       	rjmp	.+72     	; 0x2fec <xTaskCheckForTimeOut+0xcc>
    2fa4:	88 85       	ldd	r24, Y+8	; 0x08
    2fa6:	99 85       	ldd	r25, Y+9	; 0x09
    2fa8:	fc 01       	movw	r30, r24
    2faa:	20 81       	ld	r18, Z
    2fac:	31 81       	ldd	r19, Z+1	; 0x01
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb2:	82 17       	cp	r24, r18
    2fb4:	93 07       	cpc	r25, r19
    2fb6:	98 f4       	brcc	.+38     	; 0x2fde <xTaskCheckForTimeOut+0xbe>
    2fb8:	88 85       	ldd	r24, Y+8	; 0x08
    2fba:	99 85       	ldd	r25, Y+9	; 0x09
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	20 81       	ld	r18, Z
    2fc0:	31 81       	ldd	r19, Z+1	; 0x01
    2fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc6:	28 1b       	sub	r18, r24
    2fc8:	39 0b       	sbc	r19, r25
    2fca:	88 85       	ldd	r24, Y+8	; 0x08
    2fcc:	99 85       	ldd	r25, Y+9	; 0x09
    2fce:	fc 01       	movw	r30, r24
    2fd0:	31 83       	std	Z+1, r19	; 0x01
    2fd2:	20 83       	st	Z, r18
    2fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd8:	86 df       	rcall	.-244    	; 0x2ee6 <vTaskInternalSetTimeOutState>
    2fda:	19 82       	std	Y+1, r1	; 0x01
    2fdc:	07 c0       	rjmp	.+14     	; 0x2fec <xTaskCheckForTimeOut+0xcc>
    2fde:	88 85       	ldd	r24, Y+8	; 0x08
    2fe0:	99 85       	ldd	r25, Y+9	; 0x09
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	11 82       	std	Z+1, r1	; 0x01
    2fe6:	10 82       	st	Z, r1
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	0f 90       	pop	r0
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	29 96       	adiw	r28, 0x09	; 9
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	08 95       	ret

00003004 <vTaskMissedYield>:
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xYieldPending>
    3012:	00 00       	nop
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	08 95       	ret

0000301a <prvInitialiseTaskLists>:
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	1f 92       	push	r1
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	19 82       	std	Y+1, r1	; 0x01
    3026:	13 c0       	rjmp	.+38     	; 0x304e <prvInitialiseTaskLists+0x34>
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	c9 01       	movw	r24, r18
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	82 0f       	add	r24, r18
    303e:	93 1f       	adc	r25, r19
    3040:	80 5b       	subi	r24, 0xB0	; 176
    3042:	97 4f       	sbci	r25, 0xF7	; 247
    3044:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	8f 5f       	subi	r24, 0xFF	; 255
    304c:	89 83       	std	Y+1, r24	; 0x01
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	50 f3       	brcs	.-44     	; 0x3028 <prvInitialiseTaskLists+0xe>
    3054:	84 e7       	ldi	r24, 0x74	; 116
    3056:	98 e0       	ldi	r25, 0x08	; 8
    3058:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
    305c:	8d e7       	ldi	r24, 0x7D	; 125
    305e:	98 e0       	ldi	r25, 0x08	; 8
    3060:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
    3064:	8a e8       	ldi	r24, 0x8A	; 138
    3066:	98 e0       	ldi	r25, 0x08	; 8
    3068:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
    306c:	83 e9       	ldi	r24, 0x93	; 147
    306e:	98 e0       	ldi	r25, 0x08	; 8
    3070:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
    3074:	8d e9       	ldi	r24, 0x9D	; 157
    3076:	98 e0       	ldi	r25, 0x08	; 8
    3078:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
    307c:	84 e7       	ldi	r24, 0x74	; 116
    307e:	98 e0       	ldi	r25, 0x08	; 8
    3080:	90 93 87 08 	sts	0x0887, r25	; 0x800887 <pxDelayedTaskList+0x1>
    3084:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <pxDelayedTaskList>
    3088:	8d e7       	ldi	r24, 0x7D	; 125
    308a:	98 e0       	ldi	r25, 0x08	; 8
    308c:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <pxOverflowDelayedTaskList+0x1>
    3090:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <pxOverflowDelayedTaskList>
    3094:	00 00       	nop
    3096:	0f 90       	pop	r0
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	08 95       	ret

0000309e <prvCheckTasksWaitingTermination>:
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	1f 92       	push	r1
    30a4:	1f 92       	push	r1
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	20 c0       	rjmp	.+64     	; 0x30ec <prvCheckTasksWaitingTermination+0x4e>
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	0f 92       	push	r0
    30b2:	80 91 98 08 	lds	r24, 0x0898	; 0x800898 <xTasksWaitingTermination+0x5>
    30b6:	90 91 99 08 	lds	r25, 0x0899	; 0x800899 <xTasksWaitingTermination+0x6>
    30ba:	fc 01       	movw	r30, r24
    30bc:	86 81       	ldd	r24, Z+6	; 0x06
    30be:	97 81       	ldd	r25, Z+7	; 0x07
    30c0:	9a 83       	std	Y+2, r25	; 0x02
    30c2:	89 83       	std	Y+1, r24	; 0x01
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	02 96       	adiw	r24, 0x02	; 2
    30ca:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    30ce:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <uxCurrentNumberOfTasks>
    30d2:	81 50       	subi	r24, 0x01	; 1
    30d4:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <uxCurrentNumberOfTasks>
    30d8:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <uxDeletedTasksWaitingCleanUp>
    30dc:	81 50       	subi	r24, 0x01	; 1
    30de:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <uxDeletedTasksWaitingCleanUp>
    30e2:	0f 90       	pop	r0
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	0a d0       	rcall	.+20     	; 0x3100 <prvDeleteTCB>
    30ec:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <uxDeletedTasksWaitingCleanUp>
    30f0:	88 23       	and	r24, r24
    30f2:	e1 f6       	brne	.-72     	; 0x30ac <prvCheckTasksWaitingTermination+0xe>
    30f4:	00 00       	nop
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	df 91       	pop	r29
    30fc:	cf 91       	pop	r28
    30fe:	08 95       	ret

00003100 <prvDeleteTCB>:
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	1f 92       	push	r1
    3106:	1f 92       	push	r1
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	fc 01       	movw	r30, r24
    3116:	87 89       	ldd	r24, Z+23	; 0x17
    3118:	90 8d       	ldd	r25, Z+24	; 0x18
    311a:	0e 94 20 02 	call	0x440	; 0x440 <vPortFree>
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	0e 94 20 02 	call	0x440	; 0x440 <vPortFree>
    3126:	00 00       	nop
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	08 95       	ret

00003132 <prvResetNextTaskUnblockTime>:
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	1f 92       	push	r1
    3138:	1f 92       	push	r1
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxDelayedTaskList>
    3142:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxDelayedTaskList+0x1>
    3146:	fc 01       	movw	r30, r24
    3148:	80 81       	ld	r24, Z
    314a:	88 23       	and	r24, r24
    314c:	39 f4       	brne	.+14     	; 0x315c <prvResetNextTaskUnblockTime+0x2a>
    314e:	8f ef       	ldi	r24, 0xFF	; 255
    3150:	9f ef       	ldi	r25, 0xFF	; 255
    3152:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    3156:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <xNextTaskUnblockTime>
    315a:	15 c0       	rjmp	.+42     	; 0x3186 <prvResetNextTaskUnblockTime+0x54>
    315c:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxDelayedTaskList>
    3160:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxDelayedTaskList+0x1>
    3164:	fc 01       	movw	r30, r24
    3166:	85 81       	ldd	r24, Z+5	; 0x05
    3168:	96 81       	ldd	r25, Z+6	; 0x06
    316a:	fc 01       	movw	r30, r24
    316c:	86 81       	ldd	r24, Z+6	; 0x06
    316e:	97 81       	ldd	r25, Z+7	; 0x07
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	9a 81       	ldd	r25, Y+2	; 0x02
    3178:	fc 01       	movw	r30, r24
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	93 81       	ldd	r25, Z+3	; 0x03
    317e:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    3182:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <xNextTaskUnblockTime>
    3186:	00 00       	nop
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	08 95       	ret

00003192 <xTaskGetCurrentTaskHandle>:
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	1f 92       	push	r1
    3198:	1f 92       	push	r1
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    31a2:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	08 95       	ret

000031b8 <xTaskGetSchedulerState>:
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	1f 92       	push	r1
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <xSchedulerRunning>
    31c6:	88 23       	and	r24, r24
    31c8:	19 f4       	brne	.+6      	; 0x31d0 <xTaskGetSchedulerState+0x18>
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	89 83       	std	Y+1, r24	; 0x01
    31ce:	08 c0       	rjmp	.+16     	; 0x31e0 <xTaskGetSchedulerState+0x28>
    31d0:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    31d4:	88 23       	and	r24, r24
    31d6:	19 f4       	brne	.+6      	; 0x31de <xTaskGetSchedulerState+0x26>
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <xTaskGetSchedulerState+0x28>
    31de:	19 82       	std	Y+1, r1	; 0x01
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	0f 90       	pop	r0
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	08 95       	ret

000031ea <xTaskPriorityInherit>:
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <xTaskPriorityInherit+0x6>
    31f0:	1f 92       	push	r1
    31f2:	1f 92       	push	r1
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	9d 83       	std	Y+5, r25	; 0x05
    31fa:	8c 83       	std	Y+4, r24	; 0x04
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3200:	9b 83       	std	Y+3, r25	; 0x03
    3202:	8a 83       	std	Y+2, r24	; 0x02
    3204:	19 82       	std	Y+1, r1	; 0x01
    3206:	8c 81       	ldd	r24, Y+4	; 0x04
    3208:	9d 81       	ldd	r25, Y+5	; 0x05
    320a:	89 2b       	or	r24, r25
    320c:	09 f4       	brne	.+2      	; 0x3210 <xTaskPriorityInherit+0x26>
    320e:	90 c0       	rjmp	.+288    	; 0x3330 <xTaskPriorityInherit+0x146>
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	fc 01       	movw	r30, r24
    3216:	26 89       	ldd	r18, Z+22	; 0x16
    3218:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    321c:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3220:	fc 01       	movw	r30, r24
    3222:	86 89       	ldd	r24, Z+22	; 0x16
    3224:	28 17       	cp	r18, r24
    3226:	08 f0       	brcs	.+2      	; 0x322a <xTaskPriorityInherit+0x40>
    3228:	75 c0       	rjmp	.+234    	; 0x3314 <xTaskPriorityInherit+0x12a>
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	9b 81       	ldd	r25, Y+3	; 0x03
    322e:	fc 01       	movw	r30, r24
    3230:	84 85       	ldd	r24, Z+12	; 0x0c
    3232:	95 85       	ldd	r25, Z+13	; 0x0d
    3234:	99 23       	and	r25, r25
    3236:	8c f0       	brlt	.+34     	; 0x325a <xTaskPriorityInherit+0x70>
    3238:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    323c:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3240:	fc 01       	movw	r30, r24
    3242:	86 89       	ldd	r24, Z+22	; 0x16
    3244:	88 2f       	mov	r24, r24
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	24 e0       	ldi	r18, 0x04	; 4
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	28 1b       	sub	r18, r24
    324e:	39 0b       	sbc	r19, r25
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	fc 01       	movw	r30, r24
    3256:	35 87       	std	Z+13, r19	; 0x0d
    3258:	24 87       	std	Z+12, r18	; 0x0c
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	fc 01       	movw	r30, r24
    3260:	42 85       	ldd	r20, Z+10	; 0x0a
    3262:	53 85       	ldd	r21, Z+11	; 0x0b
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	fc 01       	movw	r30, r24
    326a:	86 89       	ldd	r24, Z+22	; 0x16
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	c9 01       	movw	r24, r18
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	82 0f       	add	r24, r18
    3280:	93 1f       	adc	r25, r19
    3282:	80 5b       	subi	r24, 0xB0	; 176
    3284:	97 4f       	sbci	r25, 0xF7	; 247
    3286:	48 17       	cp	r20, r24
    3288:	59 07       	cpc	r21, r25
    328a:	b9 f5       	brne	.+110    	; 0x32fa <xTaskPriorityInherit+0x110>
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	9b 81       	ldd	r25, Y+3	; 0x03
    3290:	02 96       	adiw	r24, 0x02	; 2
    3292:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    3296:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    329a:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    329e:	fc 01       	movw	r30, r24
    32a0:	26 89       	ldd	r18, Z+22	; 0x16
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	9b 81       	ldd	r25, Y+3	; 0x03
    32a6:	fc 01       	movw	r30, r24
    32a8:	26 8b       	std	Z+22, r18	; 0x16
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	9b 81       	ldd	r25, Y+3	; 0x03
    32ae:	fc 01       	movw	r30, r24
    32b0:	96 89       	ldd	r25, Z+22	; 0x16
    32b2:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    32b6:	89 17       	cp	r24, r25
    32b8:	30 f4       	brcc	.+12     	; 0x32c6 <xTaskPriorityInherit+0xdc>
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	9b 81       	ldd	r25, Y+3	; 0x03
    32be:	fc 01       	movw	r30, r24
    32c0:	86 89       	ldd	r24, Z+22	; 0x16
    32c2:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    32c6:	8a 81       	ldd	r24, Y+2	; 0x02
    32c8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ca:	ac 01       	movw	r20, r24
    32cc:	4e 5f       	subi	r20, 0xFE	; 254
    32ce:	5f 4f       	sbci	r21, 0xFF	; 255
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	9b 81       	ldd	r25, Y+3	; 0x03
    32d4:	fc 01       	movw	r30, r24
    32d6:	86 89       	ldd	r24, Z+22	; 0x16
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	c9 01       	movw	r24, r18
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	88 0f       	add	r24, r24
    32e8:	99 1f       	adc	r25, r25
    32ea:	82 0f       	add	r24, r18
    32ec:	93 1f       	adc	r25, r19
    32ee:	80 5b       	subi	r24, 0xB0	; 176
    32f0:	97 4f       	sbci	r25, 0xF7	; 247
    32f2:	ba 01       	movw	r22, r20
    32f4:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    32f8:	0a c0       	rjmp	.+20     	; 0x330e <xTaskPriorityInherit+0x124>
    32fa:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    32fe:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3302:	fc 01       	movw	r30, r24
    3304:	26 89       	ldd	r18, Z+22	; 0x16
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	fc 01       	movw	r30, r24
    330c:	26 8b       	std	Z+22, r18	; 0x16
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	0e c0       	rjmp	.+28     	; 0x3330 <xTaskPriorityInherit+0x146>
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	9b 81       	ldd	r25, Y+3	; 0x03
    3318:	fc 01       	movw	r30, r24
    331a:	23 a1       	ldd	r18, Z+35	; 0x23
    331c:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3320:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3324:	fc 01       	movw	r30, r24
    3326:	86 89       	ldd	r24, Z+22	; 0x16
    3328:	28 17       	cp	r18, r24
    332a:	10 f4       	brcc	.+4      	; 0x3330 <xTaskPriorityInherit+0x146>
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	89 83       	std	Y+1, r24	; 0x01
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	08 95       	ret

00003342 <xTaskPriorityDisinherit>:
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	00 d0       	rcall	.+0      	; 0x3348 <xTaskPriorityDisinherit+0x6>
    3348:	1f 92       	push	r1
    334a:	1f 92       	push	r1
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	9d 83       	std	Y+5, r25	; 0x05
    3352:	8c 83       	std	Y+4, r24	; 0x04
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	9d 81       	ldd	r25, Y+5	; 0x05
    3358:	9b 83       	std	Y+3, r25	; 0x03
    335a:	8a 83       	std	Y+2, r24	; 0x02
    335c:	19 82       	std	Y+1, r1	; 0x01
    335e:	8c 81       	ldd	r24, Y+4	; 0x04
    3360:	9d 81       	ldd	r25, Y+5	; 0x05
    3362:	89 2b       	or	r24, r25
    3364:	09 f4       	brne	.+2      	; 0x3368 <xTaskPriorityDisinherit+0x26>
    3366:	61 c0       	rjmp	.+194    	; 0x342a <xTaskPriorityDisinherit+0xe8>
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	fc 01       	movw	r30, r24
    336e:	84 a1       	ldd	r24, Z+36	; 0x24
    3370:	2f ef       	ldi	r18, 0xFF	; 255
    3372:	28 0f       	add	r18, r24
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	9b 81       	ldd	r25, Y+3	; 0x03
    3378:	fc 01       	movw	r30, r24
    337a:	24 a3       	std	Z+36, r18	; 0x24
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	fc 01       	movw	r30, r24
    3382:	26 89       	ldd	r18, Z+22	; 0x16
    3384:	8a 81       	ldd	r24, Y+2	; 0x02
    3386:	9b 81       	ldd	r25, Y+3	; 0x03
    3388:	fc 01       	movw	r30, r24
    338a:	83 a1       	ldd	r24, Z+35	; 0x23
    338c:	28 17       	cp	r18, r24
    338e:	09 f4       	brne	.+2      	; 0x3392 <xTaskPriorityDisinherit+0x50>
    3390:	4c c0       	rjmp	.+152    	; 0x342a <xTaskPriorityDisinherit+0xe8>
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	fc 01       	movw	r30, r24
    3398:	84 a1       	ldd	r24, Z+36	; 0x24
    339a:	88 23       	and	r24, r24
    339c:	09 f0       	breq	.+2      	; 0x33a0 <xTaskPriorityDisinherit+0x5e>
    339e:	45 c0       	rjmp	.+138    	; 0x342a <xTaskPriorityDisinherit+0xe8>
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	02 96       	adiw	r24, 0x02	; 2
    33a6:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	fc 01       	movw	r30, r24
    33b0:	23 a1       	ldd	r18, Z+35	; 0x23
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	9b 81       	ldd	r25, Y+3	; 0x03
    33b6:	fc 01       	movw	r30, r24
    33b8:	26 8b       	std	Z+22, r18	; 0x16
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	9b 81       	ldd	r25, Y+3	; 0x03
    33be:	fc 01       	movw	r30, r24
    33c0:	86 89       	ldd	r24, Z+22	; 0x16
    33c2:	88 2f       	mov	r24, r24
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	24 e0       	ldi	r18, 0x04	; 4
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	28 1b       	sub	r18, r24
    33cc:	39 0b       	sbc	r19, r25
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	9b 81       	ldd	r25, Y+3	; 0x03
    33d2:	fc 01       	movw	r30, r24
    33d4:	35 87       	std	Z+13, r19	; 0x0d
    33d6:	24 87       	std	Z+12, r18	; 0x0c
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	9b 81       	ldd	r25, Y+3	; 0x03
    33dc:	fc 01       	movw	r30, r24
    33de:	96 89       	ldd	r25, Z+22	; 0x16
    33e0:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    33e4:	89 17       	cp	r24, r25
    33e6:	30 f4       	brcc	.+12     	; 0x33f4 <xTaskPriorityDisinherit+0xb2>
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	9b 81       	ldd	r25, Y+3	; 0x03
    33ec:	fc 01       	movw	r30, r24
    33ee:	86 89       	ldd	r24, Z+22	; 0x16
    33f0:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	9b 81       	ldd	r25, Y+3	; 0x03
    33f8:	ac 01       	movw	r20, r24
    33fa:	4e 5f       	subi	r20, 0xFE	; 254
    33fc:	5f 4f       	sbci	r21, 0xFF	; 255
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	9b 81       	ldd	r25, Y+3	; 0x03
    3402:	fc 01       	movw	r30, r24
    3404:	86 89       	ldd	r24, Z+22	; 0x16
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	c9 01       	movw	r24, r18
    340c:	88 0f       	add	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	82 0f       	add	r24, r18
    341a:	93 1f       	adc	r25, r19
    341c:	80 5b       	subi	r24, 0xB0	; 176
    341e:	97 4f       	sbci	r25, 0xF7	; 247
    3420:	ba 01       	movw	r22, r20
    3422:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	08 95       	ret

0000343c <vTaskPriorityDisinheritAfterTimeout>:
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
    3444:	28 97       	sbiw	r28, 0x08	; 8
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	de bf       	out	0x3e, r29	; 62
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	9f 83       	std	Y+7, r25	; 0x07
    3452:	8e 83       	std	Y+6, r24	; 0x06
    3454:	68 87       	std	Y+8, r22	; 0x08
    3456:	8e 81       	ldd	r24, Y+6	; 0x06
    3458:	9f 81       	ldd	r25, Y+7	; 0x07
    345a:	9b 83       	std	Y+3, r25	; 0x03
    345c:	8a 83       	std	Y+2, r24	; 0x02
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	8c 83       	std	Y+4, r24	; 0x04
    3462:	8e 81       	ldd	r24, Y+6	; 0x06
    3464:	9f 81       	ldd	r25, Y+7	; 0x07
    3466:	89 2b       	or	r24, r25
    3468:	09 f4       	brne	.+2      	; 0x346c <vTaskPriorityDisinheritAfterTimeout+0x30>
    346a:	7e c0       	rjmp	.+252    	; 0x3568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	9b 81       	ldd	r25, Y+3	; 0x03
    3470:	fc 01       	movw	r30, r24
    3472:	93 a1       	ldd	r25, Z+35	; 0x23
    3474:	88 85       	ldd	r24, Y+8	; 0x08
    3476:	98 17       	cp	r25, r24
    3478:	18 f4       	brcc	.+6      	; 0x3480 <vTaskPriorityDisinheritAfterTimeout+0x44>
    347a:	88 85       	ldd	r24, Y+8	; 0x08
    347c:	89 83       	std	Y+1, r24	; 0x01
    347e:	05 c0       	rjmp	.+10     	; 0x348a <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	9b 81       	ldd	r25, Y+3	; 0x03
    3484:	fc 01       	movw	r30, r24
    3486:	83 a1       	ldd	r24, Z+35	; 0x23
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	9b 81       	ldd	r25, Y+3	; 0x03
    348e:	fc 01       	movw	r30, r24
    3490:	96 89       	ldd	r25, Z+22	; 0x16
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	98 17       	cp	r25, r24
    3496:	09 f4       	brne	.+2      	; 0x349a <vTaskPriorityDisinheritAfterTimeout+0x5e>
    3498:	67 c0       	rjmp	.+206    	; 0x3568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	9b 81       	ldd	r25, Y+3	; 0x03
    349e:	fc 01       	movw	r30, r24
    34a0:	94 a1       	ldd	r25, Z+36	; 0x24
    34a2:	8c 81       	ldd	r24, Y+4	; 0x04
    34a4:	98 17       	cp	r25, r24
    34a6:	09 f0       	breq	.+2      	; 0x34aa <vTaskPriorityDisinheritAfterTimeout+0x6e>
    34a8:	5f c0       	rjmp	.+190    	; 0x3568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9b 81       	ldd	r25, Y+3	; 0x03
    34ae:	fc 01       	movw	r30, r24
    34b0:	86 89       	ldd	r24, Z+22	; 0x16
    34b2:	8d 83       	std	Y+5, r24	; 0x05
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	29 81       	ldd	r18, Y+1	; 0x01
    34ba:	fc 01       	movw	r30, r24
    34bc:	26 8b       	std	Z+22, r18	; 0x16
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	9b 81       	ldd	r25, Y+3	; 0x03
    34c2:	fc 01       	movw	r30, r24
    34c4:	84 85       	ldd	r24, Z+12	; 0x0c
    34c6:	95 85       	ldd	r25, Z+13	; 0x0d
    34c8:	99 23       	and	r25, r25
    34ca:	64 f0       	brlt	.+24     	; 0x34e4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	88 2f       	mov	r24, r24
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	24 e0       	ldi	r18, 0x04	; 4
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	28 1b       	sub	r18, r24
    34d8:	39 0b       	sbc	r19, r25
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	9b 81       	ldd	r25, Y+3	; 0x03
    34de:	fc 01       	movw	r30, r24
    34e0:	35 87       	std	Z+13, r19	; 0x0d
    34e2:	24 87       	std	Z+12, r18	; 0x0c
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	9b 81       	ldd	r25, Y+3	; 0x03
    34e8:	fc 01       	movw	r30, r24
    34ea:	42 85       	ldd	r20, Z+10	; 0x0a
    34ec:	53 85       	ldd	r21, Z+11	; 0x0b
    34ee:	8d 81       	ldd	r24, Y+5	; 0x05
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	c9 01       	movw	r24, r18
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	82 0f       	add	r24, r18
    3504:	93 1f       	adc	r25, r19
    3506:	80 5b       	subi	r24, 0xB0	; 176
    3508:	97 4f       	sbci	r25, 0xF7	; 247
    350a:	48 17       	cp	r20, r24
    350c:	59 07       	cpc	r21, r25
    350e:	61 f5       	brne	.+88     	; 0x3568 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	9b 81       	ldd	r25, Y+3	; 0x03
    3514:	02 96       	adiw	r24, 0x02	; 2
    3516:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    351a:	8a 81       	ldd	r24, Y+2	; 0x02
    351c:	9b 81       	ldd	r25, Y+3	; 0x03
    351e:	fc 01       	movw	r30, r24
    3520:	96 89       	ldd	r25, Z+22	; 0x16
    3522:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    3526:	89 17       	cp	r24, r25
    3528:	30 f4       	brcc	.+12     	; 0x3536 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	9b 81       	ldd	r25, Y+3	; 0x03
    352e:	fc 01       	movw	r30, r24
    3530:	86 89       	ldd	r24, Z+22	; 0x16
    3532:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	9b 81       	ldd	r25, Y+3	; 0x03
    353a:	ac 01       	movw	r20, r24
    353c:	4e 5f       	subi	r20, 0xFE	; 254
    353e:	5f 4f       	sbci	r21, 0xFF	; 255
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	9b 81       	ldd	r25, Y+3	; 0x03
    3544:	fc 01       	movw	r30, r24
    3546:	86 89       	ldd	r24, Z+22	; 0x16
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	c9 01       	movw	r24, r18
    354e:	88 0f       	add	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	82 0f       	add	r24, r18
    355c:	93 1f       	adc	r25, r19
    355e:	80 5b       	subi	r24, 0xB0	; 176
    3560:	97 4f       	sbci	r25, 0xF7	; 247
    3562:	ba 01       	movw	r22, r20
    3564:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    3568:	00 00       	nop
    356a:	28 96       	adiw	r28, 0x08	; 8
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	f8 94       	cli
    3570:	de bf       	out	0x3e, r29	; 62
    3572:	0f be       	out	0x3f, r0	; 63
    3574:	cd bf       	out	0x3d, r28	; 61
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	08 95       	ret

0000357c <pvTaskIncrementMutexHeldCount>:
    357c:	cf 93       	push	r28
    357e:	df 93       	push	r29
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3588:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    358c:	89 2b       	or	r24, r25
    358e:	49 f0       	breq	.+18     	; 0x35a2 <pvTaskIncrementMutexHeldCount+0x26>
    3590:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3594:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3598:	fc 01       	movw	r30, r24
    359a:	24 a1       	ldd	r18, Z+36	; 0x24
    359c:	2f 5f       	subi	r18, 0xFF	; 255
    359e:	fc 01       	movw	r30, r24
    35a0:	24 a3       	std	Z+36, r18	; 0x24
    35a2:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    35a6:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <xTaskNotifyWait>:
    35b0:	ef 92       	push	r14
    35b2:	ff 92       	push	r15
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	2d 97       	sbiw	r28, 0x0d	; 13
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	6a 83       	std	Y+2, r22	; 0x02
    35ce:	7b 83       	std	Y+3, r23	; 0x03
    35d0:	8c 83       	std	Y+4, r24	; 0x04
    35d2:	9d 83       	std	Y+5, r25	; 0x05
    35d4:	2e 83       	std	Y+6, r18	; 0x06
    35d6:	3f 83       	std	Y+7, r19	; 0x07
    35d8:	48 87       	std	Y+8, r20	; 0x08
    35da:	59 87       	std	Y+9, r21	; 0x09
    35dc:	1b 87       	std	Y+11, r17	; 0x0b
    35de:	0a 87       	std	Y+10, r16	; 0x0a
    35e0:	fd 86       	std	Y+13, r15	; 0x0d
    35e2:	ec 86       	std	Y+12, r14	; 0x0c
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	0f 92       	push	r0
    35ea:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    35ee:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    35f2:	fc 01       	movw	r30, r24
    35f4:	83 a5       	ldd	r24, Z+43	; 0x2b
    35f6:	82 30       	cpi	r24, 0x02	; 2
    35f8:	59 f1       	breq	.+86     	; 0x3650 <xTaskNotifyWait+0xa0>
    35fa:	60 91 4e 08 	lds	r22, 0x084E	; 0x80084e <__data_end>
    35fe:	70 91 4f 08 	lds	r23, 0x084F	; 0x80084f <__data_end+0x1>
    3602:	fb 01       	movw	r30, r22
    3604:	27 a1       	ldd	r18, Z+39	; 0x27
    3606:	30 a5       	ldd	r19, Z+40	; 0x28
    3608:	41 a5       	ldd	r20, Z+41	; 0x29
    360a:	52 a5       	ldd	r21, Z+42	; 0x2a
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	9b 81       	ldd	r25, Y+3	; 0x03
    3610:	ac 81       	ldd	r26, Y+4	; 0x04
    3612:	bd 81       	ldd	r27, Y+5	; 0x05
    3614:	80 95       	com	r24
    3616:	90 95       	com	r25
    3618:	a0 95       	com	r26
    361a:	b0 95       	com	r27
    361c:	82 23       	and	r24, r18
    361e:	93 23       	and	r25, r19
    3620:	a4 23       	and	r26, r20
    3622:	b5 23       	and	r27, r21
    3624:	fb 01       	movw	r30, r22
    3626:	87 a3       	std	Z+39, r24	; 0x27
    3628:	90 a7       	std	Z+40, r25	; 0x28
    362a:	a1 a7       	std	Z+41, r26	; 0x29
    362c:	b2 a7       	std	Z+42, r27	; 0x2a
    362e:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3632:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3636:	21 e0       	ldi	r18, 0x01	; 1
    3638:	fc 01       	movw	r30, r24
    363a:	23 a7       	std	Z+43, r18	; 0x2b
    363c:	8c 85       	ldd	r24, Y+12	; 0x0c
    363e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3640:	89 2b       	or	r24, r25
    3642:	31 f0       	breq	.+12     	; 0x3650 <xTaskNotifyWait+0xa0>
    3644:	8c 85       	ldd	r24, Y+12	; 0x0c
    3646:	9d 85       	ldd	r25, Y+13	; 0x0d
    3648:	61 e0       	ldi	r22, 0x01	; 1
    364a:	65 d2       	rcall	.+1226   	; 0x3b16 <prvAddCurrentTaskToDelayedList>
    364c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
    3650:	0f 90       	pop	r0
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	0f 92       	push	r0
    365a:	8a 85       	ldd	r24, Y+10	; 0x0a
    365c:	9b 85       	ldd	r25, Y+11	; 0x0b
    365e:	89 2b       	or	r24, r25
    3660:	81 f0       	breq	.+32     	; 0x3682 <xTaskNotifyWait+0xd2>
    3662:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3666:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    366a:	fc 01       	movw	r30, r24
    366c:	87 a1       	ldd	r24, Z+39	; 0x27
    366e:	90 a5       	ldd	r25, Z+40	; 0x28
    3670:	a1 a5       	ldd	r26, Z+41	; 0x29
    3672:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3674:	2a 85       	ldd	r18, Y+10	; 0x0a
    3676:	3b 85       	ldd	r19, Y+11	; 0x0b
    3678:	f9 01       	movw	r30, r18
    367a:	80 83       	st	Z, r24
    367c:	91 83       	std	Z+1, r25	; 0x01
    367e:	a2 83       	std	Z+2, r26	; 0x02
    3680:	b3 83       	std	Z+3, r27	; 0x03
    3682:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3686:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    368a:	fc 01       	movw	r30, r24
    368c:	83 a5       	ldd	r24, Z+43	; 0x2b
    368e:	82 30       	cpi	r24, 0x02	; 2
    3690:	11 f0       	breq	.+4      	; 0x3696 <xTaskNotifyWait+0xe6>
    3692:	19 82       	std	Y+1, r1	; 0x01
    3694:	1c c0       	rjmp	.+56     	; 0x36ce <xTaskNotifyWait+0x11e>
    3696:	60 91 4e 08 	lds	r22, 0x084E	; 0x80084e <__data_end>
    369a:	70 91 4f 08 	lds	r23, 0x084F	; 0x80084f <__data_end+0x1>
    369e:	fb 01       	movw	r30, r22
    36a0:	27 a1       	ldd	r18, Z+39	; 0x27
    36a2:	30 a5       	ldd	r19, Z+40	; 0x28
    36a4:	41 a5       	ldd	r20, Z+41	; 0x29
    36a6:	52 a5       	ldd	r21, Z+42	; 0x2a
    36a8:	8e 81       	ldd	r24, Y+6	; 0x06
    36aa:	9f 81       	ldd	r25, Y+7	; 0x07
    36ac:	a8 85       	ldd	r26, Y+8	; 0x08
    36ae:	b9 85       	ldd	r27, Y+9	; 0x09
    36b0:	80 95       	com	r24
    36b2:	90 95       	com	r25
    36b4:	a0 95       	com	r26
    36b6:	b0 95       	com	r27
    36b8:	82 23       	and	r24, r18
    36ba:	93 23       	and	r25, r19
    36bc:	a4 23       	and	r26, r20
    36be:	b5 23       	and	r27, r21
    36c0:	fb 01       	movw	r30, r22
    36c2:	87 a3       	std	Z+39, r24	; 0x27
    36c4:	90 a7       	std	Z+40, r25	; 0x28
    36c6:	a1 a7       	std	Z+41, r26	; 0x29
    36c8:	b2 a7       	std	Z+42, r27	; 0x2a
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	89 83       	std	Y+1, r24	; 0x01
    36ce:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    36d2:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    36d6:	fc 01       	movw	r30, r24
    36d8:	13 a6       	std	Z+43, r1	; 0x2b
    36da:	0f 90       	pop	r0
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	2d 96       	adiw	r28, 0x0d	; 13
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	08 95       	ret

000036fa <xTaskGenericNotify>:
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	2d 97       	sbiw	r28, 0x0d	; 13
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	cd bf       	out	0x3d, r28	; 61
    3712:	9e 83       	std	Y+6, r25	; 0x06
    3714:	8d 83       	std	Y+5, r24	; 0x05
    3716:	4f 83       	std	Y+7, r20	; 0x07
    3718:	58 87       	std	Y+8, r21	; 0x08
    371a:	69 87       	std	Y+9, r22	; 0x09
    371c:	7a 87       	std	Y+10, r23	; 0x0a
    371e:	2b 87       	std	Y+11, r18	; 0x0b
    3720:	1d 87       	std	Y+13, r17	; 0x0d
    3722:	0c 87       	std	Y+12, r16	; 0x0c
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	8d 81       	ldd	r24, Y+5	; 0x05
    372a:	9e 81       	ldd	r25, Y+6	; 0x06
    372c:	9b 83       	std	Y+3, r25	; 0x03
    372e:	8a 83       	std	Y+2, r24	; 0x02
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	0f 92       	push	r0
    3736:	8c 85       	ldd	r24, Y+12	; 0x0c
    3738:	9d 85       	ldd	r25, Y+13	; 0x0d
    373a:	89 2b       	or	r24, r25
    373c:	71 f0       	breq	.+28     	; 0x375a <xTaskGenericNotify+0x60>
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	9b 81       	ldd	r25, Y+3	; 0x03
    3742:	fc 01       	movw	r30, r24
    3744:	87 a1       	ldd	r24, Z+39	; 0x27
    3746:	90 a5       	ldd	r25, Z+40	; 0x28
    3748:	a1 a5       	ldd	r26, Z+41	; 0x29
    374a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    374c:	2c 85       	ldd	r18, Y+12	; 0x0c
    374e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3750:	f9 01       	movw	r30, r18
    3752:	80 83       	st	Z, r24
    3754:	91 83       	std	Z+1, r25	; 0x01
    3756:	a2 83       	std	Z+2, r26	; 0x02
    3758:	b3 83       	std	Z+3, r27	; 0x03
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	9b 81       	ldd	r25, Y+3	; 0x03
    375e:	fc 01       	movw	r30, r24
    3760:	83 a5       	ldd	r24, Z+43	; 0x2b
    3762:	8c 83       	std	Y+4, r24	; 0x04
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	9b 81       	ldd	r25, Y+3	; 0x03
    3768:	22 e0       	ldi	r18, 0x02	; 2
    376a:	fc 01       	movw	r30, r24
    376c:	23 a7       	std	Z+43, r18	; 0x2b
    376e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3770:	88 2f       	mov	r24, r24
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	82 30       	cpi	r24, 0x02	; 2
    3776:	91 05       	cpc	r25, r1
    3778:	31 f1       	breq	.+76     	; 0x37c6 <xTaskGenericNotify+0xcc>
    377a:	83 30       	cpi	r24, 0x03	; 3
    377c:	91 05       	cpc	r25, r1
    377e:	34 f4       	brge	.+12     	; 0x378c <xTaskGenericNotify+0x92>
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	09 f4       	brne	.+2      	; 0x3786 <xTaskGenericNotify+0x8c>
    3784:	4f c0       	rjmp	.+158    	; 0x3824 <xTaskGenericNotify+0x12a>
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	39 f0       	breq	.+14     	; 0x3798 <xTaskGenericNotify+0x9e>
    378a:	4d c0       	rjmp	.+154    	; 0x3826 <xTaskGenericNotify+0x12c>
    378c:	83 30       	cpi	r24, 0x03	; 3
    378e:	91 05       	cpc	r25, r1
    3790:	61 f1       	breq	.+88     	; 0x37ea <xTaskGenericNotify+0xf0>
    3792:	04 97       	sbiw	r24, 0x04	; 4
    3794:	b1 f1       	breq	.+108    	; 0x3802 <xTaskGenericNotify+0x108>
    3796:	47 c0       	rjmp	.+142    	; 0x3826 <xTaskGenericNotify+0x12c>
    3798:	8a 81       	ldd	r24, Y+2	; 0x02
    379a:	9b 81       	ldd	r25, Y+3	; 0x03
    379c:	fc 01       	movw	r30, r24
    379e:	27 a1       	ldd	r18, Z+39	; 0x27
    37a0:	30 a5       	ldd	r19, Z+40	; 0x28
    37a2:	41 a5       	ldd	r20, Z+41	; 0x29
    37a4:	52 a5       	ldd	r21, Z+42	; 0x2a
    37a6:	8f 81       	ldd	r24, Y+7	; 0x07
    37a8:	98 85       	ldd	r25, Y+8	; 0x08
    37aa:	a9 85       	ldd	r26, Y+9	; 0x09
    37ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    37ae:	82 2b       	or	r24, r18
    37b0:	93 2b       	or	r25, r19
    37b2:	a4 2b       	or	r26, r20
    37b4:	b5 2b       	or	r27, r21
    37b6:	2a 81       	ldd	r18, Y+2	; 0x02
    37b8:	3b 81       	ldd	r19, Y+3	; 0x03
    37ba:	f9 01       	movw	r30, r18
    37bc:	87 a3       	std	Z+39, r24	; 0x27
    37be:	90 a7       	std	Z+40, r25	; 0x28
    37c0:	a1 a7       	std	Z+41, r26	; 0x29
    37c2:	b2 a7       	std	Z+42, r27	; 0x2a
    37c4:	30 c0       	rjmp	.+96     	; 0x3826 <xTaskGenericNotify+0x12c>
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ca:	fc 01       	movw	r30, r24
    37cc:	87 a1       	ldd	r24, Z+39	; 0x27
    37ce:	90 a5       	ldd	r25, Z+40	; 0x28
    37d0:	a1 a5       	ldd	r26, Z+41	; 0x29
    37d2:	b2 a5       	ldd	r27, Z+42	; 0x2a
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	a1 1d       	adc	r26, r1
    37d8:	b1 1d       	adc	r27, r1
    37da:	2a 81       	ldd	r18, Y+2	; 0x02
    37dc:	3b 81       	ldd	r19, Y+3	; 0x03
    37de:	f9 01       	movw	r30, r18
    37e0:	87 a3       	std	Z+39, r24	; 0x27
    37e2:	90 a7       	std	Z+40, r25	; 0x28
    37e4:	a1 a7       	std	Z+41, r26	; 0x29
    37e6:	b2 a7       	std	Z+42, r27	; 0x2a
    37e8:	1e c0       	rjmp	.+60     	; 0x3826 <xTaskGenericNotify+0x12c>
    37ea:	2a 81       	ldd	r18, Y+2	; 0x02
    37ec:	3b 81       	ldd	r19, Y+3	; 0x03
    37ee:	8f 81       	ldd	r24, Y+7	; 0x07
    37f0:	98 85       	ldd	r25, Y+8	; 0x08
    37f2:	a9 85       	ldd	r26, Y+9	; 0x09
    37f4:	ba 85       	ldd	r27, Y+10	; 0x0a
    37f6:	f9 01       	movw	r30, r18
    37f8:	87 a3       	std	Z+39, r24	; 0x27
    37fa:	90 a7       	std	Z+40, r25	; 0x28
    37fc:	a1 a7       	std	Z+41, r26	; 0x29
    37fe:	b2 a7       	std	Z+42, r27	; 0x2a
    3800:	12 c0       	rjmp	.+36     	; 0x3826 <xTaskGenericNotify+0x12c>
    3802:	8c 81       	ldd	r24, Y+4	; 0x04
    3804:	82 30       	cpi	r24, 0x02	; 2
    3806:	61 f0       	breq	.+24     	; 0x3820 <xTaskGenericNotify+0x126>
    3808:	2a 81       	ldd	r18, Y+2	; 0x02
    380a:	3b 81       	ldd	r19, Y+3	; 0x03
    380c:	8f 81       	ldd	r24, Y+7	; 0x07
    380e:	98 85       	ldd	r25, Y+8	; 0x08
    3810:	a9 85       	ldd	r26, Y+9	; 0x09
    3812:	ba 85       	ldd	r27, Y+10	; 0x0a
    3814:	f9 01       	movw	r30, r18
    3816:	87 a3       	std	Z+39, r24	; 0x27
    3818:	90 a7       	std	Z+40, r25	; 0x28
    381a:	a1 a7       	std	Z+41, r26	; 0x29
    381c:	b2 a7       	std	Z+42, r27	; 0x2a
    381e:	03 c0       	rjmp	.+6      	; 0x3826 <xTaskGenericNotify+0x12c>
    3820:	19 82       	std	Y+1, r1	; 0x01
    3822:	01 c0       	rjmp	.+2      	; 0x3826 <xTaskGenericNotify+0x12c>
    3824:	00 00       	nop
    3826:	8c 81       	ldd	r24, Y+4	; 0x04
    3828:	81 30       	cpi	r24, 0x01	; 1
    382a:	d1 f5       	brne	.+116    	; 0x38a0 <xTaskGenericNotify+0x1a6>
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	02 96       	adiw	r24, 0x02	; 2
    3832:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    3836:	8a 81       	ldd	r24, Y+2	; 0x02
    3838:	9b 81       	ldd	r25, Y+3	; 0x03
    383a:	fc 01       	movw	r30, r24
    383c:	96 89       	ldd	r25, Z+22	; 0x16
    383e:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    3842:	89 17       	cp	r24, r25
    3844:	30 f4       	brcc	.+12     	; 0x3852 <xTaskGenericNotify+0x158>
    3846:	8a 81       	ldd	r24, Y+2	; 0x02
    3848:	9b 81       	ldd	r25, Y+3	; 0x03
    384a:	fc 01       	movw	r30, r24
    384c:	86 89       	ldd	r24, Z+22	; 0x16
    384e:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	ac 01       	movw	r20, r24
    3858:	4e 5f       	subi	r20, 0xFE	; 254
    385a:	5f 4f       	sbci	r21, 0xFF	; 255
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
    385e:	9b 81       	ldd	r25, Y+3	; 0x03
    3860:	fc 01       	movw	r30, r24
    3862:	86 89       	ldd	r24, Z+22	; 0x16
    3864:	28 2f       	mov	r18, r24
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	c9 01       	movw	r24, r18
    386a:	88 0f       	add	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	88 0f       	add	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	82 0f       	add	r24, r18
    3878:	93 1f       	adc	r25, r19
    387a:	80 5b       	subi	r24, 0xB0	; 176
    387c:	97 4f       	sbci	r25, 0xF7	; 247
    387e:	ba 01       	movw	r22, r20
    3880:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	9b 81       	ldd	r25, Y+3	; 0x03
    3888:	fc 01       	movw	r30, r24
    388a:	26 89       	ldd	r18, Z+22	; 0x16
    388c:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3890:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3894:	fc 01       	movw	r30, r24
    3896:	86 89       	ldd	r24, Z+22	; 0x16
    3898:	82 17       	cp	r24, r18
    389a:	10 f4       	brcc	.+4      	; 0x38a0 <xTaskGenericNotify+0x1a6>
    389c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
    38a0:	0f 90       	pop	r0
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	2d 96       	adiw	r28, 0x0d	; 13
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	df 91       	pop	r29
    38b4:	cf 91       	pop	r28
    38b6:	1f 91       	pop	r17
    38b8:	0f 91       	pop	r16
    38ba:	08 95       	ret

000038bc <xTaskGenericNotifyFromISR>:
    38bc:	ef 92       	push	r14
    38be:	ff 92       	push	r15
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	60 97       	sbiw	r28, 0x10	; 16
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	9f 83       	std	Y+7, r25	; 0x07
    38da:	8e 83       	std	Y+6, r24	; 0x06
    38dc:	48 87       	std	Y+8, r20	; 0x08
    38de:	59 87       	std	Y+9, r21	; 0x09
    38e0:	6a 87       	std	Y+10, r22	; 0x0a
    38e2:	7b 87       	std	Y+11, r23	; 0x0b
    38e4:	2c 87       	std	Y+12, r18	; 0x0c
    38e6:	1e 87       	std	Y+14, r17	; 0x0e
    38e8:	0d 87       	std	Y+13, r16	; 0x0d
    38ea:	f8 8a       	std	Y+16, r15	; 0x10
    38ec:	ef 86       	std	Y+15, r14	; 0x0f
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	89 83       	std	Y+1, r24	; 0x01
    38f2:	8e 81       	ldd	r24, Y+6	; 0x06
    38f4:	9f 81       	ldd	r25, Y+7	; 0x07
    38f6:	9b 83       	std	Y+3, r25	; 0x03
    38f8:	8a 83       	std	Y+2, r24	; 0x02
    38fa:	1c 82       	std	Y+4, r1	; 0x04
    38fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    38fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3900:	89 2b       	or	r24, r25
    3902:	71 f0       	breq	.+28     	; 0x3920 <xTaskGenericNotifyFromISR+0x64>
    3904:	8a 81       	ldd	r24, Y+2	; 0x02
    3906:	9b 81       	ldd	r25, Y+3	; 0x03
    3908:	fc 01       	movw	r30, r24
    390a:	87 a1       	ldd	r24, Z+39	; 0x27
    390c:	90 a5       	ldd	r25, Z+40	; 0x28
    390e:	a1 a5       	ldd	r26, Z+41	; 0x29
    3910:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3912:	2d 85       	ldd	r18, Y+13	; 0x0d
    3914:	3e 85       	ldd	r19, Y+14	; 0x0e
    3916:	f9 01       	movw	r30, r18
    3918:	80 83       	st	Z, r24
    391a:	91 83       	std	Z+1, r25	; 0x01
    391c:	a2 83       	std	Z+2, r26	; 0x02
    391e:	b3 83       	std	Z+3, r27	; 0x03
    3920:	8a 81       	ldd	r24, Y+2	; 0x02
    3922:	9b 81       	ldd	r25, Y+3	; 0x03
    3924:	fc 01       	movw	r30, r24
    3926:	83 a5       	ldd	r24, Z+43	; 0x2b
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	8a 81       	ldd	r24, Y+2	; 0x02
    392c:	9b 81       	ldd	r25, Y+3	; 0x03
    392e:	22 e0       	ldi	r18, 0x02	; 2
    3930:	fc 01       	movw	r30, r24
    3932:	23 a7       	std	Z+43, r18	; 0x2b
    3934:	8c 85       	ldd	r24, Y+12	; 0x0c
    3936:	88 2f       	mov	r24, r24
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	82 30       	cpi	r24, 0x02	; 2
    393c:	91 05       	cpc	r25, r1
    393e:	31 f1       	breq	.+76     	; 0x398c <xTaskGenericNotifyFromISR+0xd0>
    3940:	83 30       	cpi	r24, 0x03	; 3
    3942:	91 05       	cpc	r25, r1
    3944:	34 f4       	brge	.+12     	; 0x3952 <xTaskGenericNotifyFromISR+0x96>
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	09 f4       	brne	.+2      	; 0x394c <xTaskGenericNotifyFromISR+0x90>
    394a:	4f c0       	rjmp	.+158    	; 0x39ea <xTaskGenericNotifyFromISR+0x12e>
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	39 f0       	breq	.+14     	; 0x395e <xTaskGenericNotifyFromISR+0xa2>
    3950:	4d c0       	rjmp	.+154    	; 0x39ec <xTaskGenericNotifyFromISR+0x130>
    3952:	83 30       	cpi	r24, 0x03	; 3
    3954:	91 05       	cpc	r25, r1
    3956:	61 f1       	breq	.+88     	; 0x39b0 <xTaskGenericNotifyFromISR+0xf4>
    3958:	04 97       	sbiw	r24, 0x04	; 4
    395a:	b1 f1       	breq	.+108    	; 0x39c8 <xTaskGenericNotifyFromISR+0x10c>
    395c:	47 c0       	rjmp	.+142    	; 0x39ec <xTaskGenericNotifyFromISR+0x130>
    395e:	8a 81       	ldd	r24, Y+2	; 0x02
    3960:	9b 81       	ldd	r25, Y+3	; 0x03
    3962:	fc 01       	movw	r30, r24
    3964:	27 a1       	ldd	r18, Z+39	; 0x27
    3966:	30 a5       	ldd	r19, Z+40	; 0x28
    3968:	41 a5       	ldd	r20, Z+41	; 0x29
    396a:	52 a5       	ldd	r21, Z+42	; 0x2a
    396c:	88 85       	ldd	r24, Y+8	; 0x08
    396e:	99 85       	ldd	r25, Y+9	; 0x09
    3970:	aa 85       	ldd	r26, Y+10	; 0x0a
    3972:	bb 85       	ldd	r27, Y+11	; 0x0b
    3974:	82 2b       	or	r24, r18
    3976:	93 2b       	or	r25, r19
    3978:	a4 2b       	or	r26, r20
    397a:	b5 2b       	or	r27, r21
    397c:	2a 81       	ldd	r18, Y+2	; 0x02
    397e:	3b 81       	ldd	r19, Y+3	; 0x03
    3980:	f9 01       	movw	r30, r18
    3982:	87 a3       	std	Z+39, r24	; 0x27
    3984:	90 a7       	std	Z+40, r25	; 0x28
    3986:	a1 a7       	std	Z+41, r26	; 0x29
    3988:	b2 a7       	std	Z+42, r27	; 0x2a
    398a:	30 c0       	rjmp	.+96     	; 0x39ec <xTaskGenericNotifyFromISR+0x130>
    398c:	8a 81       	ldd	r24, Y+2	; 0x02
    398e:	9b 81       	ldd	r25, Y+3	; 0x03
    3990:	fc 01       	movw	r30, r24
    3992:	87 a1       	ldd	r24, Z+39	; 0x27
    3994:	90 a5       	ldd	r25, Z+40	; 0x28
    3996:	a1 a5       	ldd	r26, Z+41	; 0x29
    3998:	b2 a5       	ldd	r27, Z+42	; 0x2a
    399a:	01 96       	adiw	r24, 0x01	; 1
    399c:	a1 1d       	adc	r26, r1
    399e:	b1 1d       	adc	r27, r1
    39a0:	2a 81       	ldd	r18, Y+2	; 0x02
    39a2:	3b 81       	ldd	r19, Y+3	; 0x03
    39a4:	f9 01       	movw	r30, r18
    39a6:	87 a3       	std	Z+39, r24	; 0x27
    39a8:	90 a7       	std	Z+40, r25	; 0x28
    39aa:	a1 a7       	std	Z+41, r26	; 0x29
    39ac:	b2 a7       	std	Z+42, r27	; 0x2a
    39ae:	1e c0       	rjmp	.+60     	; 0x39ec <xTaskGenericNotifyFromISR+0x130>
    39b0:	2a 81       	ldd	r18, Y+2	; 0x02
    39b2:	3b 81       	ldd	r19, Y+3	; 0x03
    39b4:	88 85       	ldd	r24, Y+8	; 0x08
    39b6:	99 85       	ldd	r25, Y+9	; 0x09
    39b8:	aa 85       	ldd	r26, Y+10	; 0x0a
    39ba:	bb 85       	ldd	r27, Y+11	; 0x0b
    39bc:	f9 01       	movw	r30, r18
    39be:	87 a3       	std	Z+39, r24	; 0x27
    39c0:	90 a7       	std	Z+40, r25	; 0x28
    39c2:	a1 a7       	std	Z+41, r26	; 0x29
    39c4:	b2 a7       	std	Z+42, r27	; 0x2a
    39c6:	12 c0       	rjmp	.+36     	; 0x39ec <xTaskGenericNotifyFromISR+0x130>
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	82 30       	cpi	r24, 0x02	; 2
    39cc:	61 f0       	breq	.+24     	; 0x39e6 <xTaskGenericNotifyFromISR+0x12a>
    39ce:	2a 81       	ldd	r18, Y+2	; 0x02
    39d0:	3b 81       	ldd	r19, Y+3	; 0x03
    39d2:	88 85       	ldd	r24, Y+8	; 0x08
    39d4:	99 85       	ldd	r25, Y+9	; 0x09
    39d6:	aa 85       	ldd	r26, Y+10	; 0x0a
    39d8:	bb 85       	ldd	r27, Y+11	; 0x0b
    39da:	f9 01       	movw	r30, r18
    39dc:	87 a3       	std	Z+39, r24	; 0x27
    39de:	90 a7       	std	Z+40, r25	; 0x28
    39e0:	a1 a7       	std	Z+41, r26	; 0x29
    39e2:	b2 a7       	std	Z+42, r27	; 0x2a
    39e4:	03 c0       	rjmp	.+6      	; 0x39ec <xTaskGenericNotifyFromISR+0x130>
    39e6:	19 82       	std	Y+1, r1	; 0x01
    39e8:	01 c0       	rjmp	.+2      	; 0x39ec <xTaskGenericNotifyFromISR+0x130>
    39ea:	00 00       	nop
    39ec:	8d 81       	ldd	r24, Y+5	; 0x05
    39ee:	81 30       	cpi	r24, 0x01	; 1
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <xTaskGenericNotifyFromISR+0x138>
    39f2:	51 c0       	rjmp	.+162    	; 0x3a96 <xTaskGenericNotifyFromISR+0x1da>
    39f4:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <uxSchedulerSuspended>
    39f8:	88 23       	and	r24, r24
    39fa:	69 f5       	brne	.+90     	; 0x3a56 <xTaskGenericNotifyFromISR+0x19a>
    39fc:	8a 81       	ldd	r24, Y+2	; 0x02
    39fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3a00:	02 96       	adiw	r24, 0x02	; 2
    3a02:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    3a06:	8a 81       	ldd	r24, Y+2	; 0x02
    3a08:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	96 89       	ldd	r25, Z+22	; 0x16
    3a0e:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <uxTopReadyPriority>
    3a12:	89 17       	cp	r24, r25
    3a14:	30 f4       	brcc	.+12     	; 0x3a22 <xTaskGenericNotifyFromISR+0x166>
    3a16:	8a 81       	ldd	r24, Y+2	; 0x02
    3a18:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	86 89       	ldd	r24, Z+22	; 0x16
    3a1e:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <uxTopReadyPriority>
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	9b 81       	ldd	r25, Y+3	; 0x03
    3a26:	ac 01       	movw	r20, r24
    3a28:	4e 5f       	subi	r20, 0xFE	; 254
    3a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a30:	fc 01       	movw	r30, r24
    3a32:	86 89       	ldd	r24, Z+22	; 0x16
    3a34:	28 2f       	mov	r18, r24
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	c9 01       	movw	r24, r18
    3a3a:	88 0f       	add	r24, r24
    3a3c:	99 1f       	adc	r25, r25
    3a3e:	88 0f       	add	r24, r24
    3a40:	99 1f       	adc	r25, r25
    3a42:	88 0f       	add	r24, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	82 0f       	add	r24, r18
    3a48:	93 1f       	adc	r25, r19
    3a4a:	80 5b       	subi	r24, 0xB0	; 176
    3a4c:	97 4f       	sbci	r25, 0xF7	; 247
    3a4e:	ba 01       	movw	r22, r20
    3a50:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    3a54:	08 c0       	rjmp	.+16     	; 0x3a66 <xTaskGenericNotifyFromISR+0x1aa>
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5a:	0c 96       	adiw	r24, 0x0c	; 12
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	8a e8       	ldi	r24, 0x8A	; 138
    3a60:	98 e0       	ldi	r25, 0x08	; 8
    3a62:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	26 89       	ldd	r18, Z+22	; 0x16
    3a6e:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3a72:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3a76:	fc 01       	movw	r30, r24
    3a78:	86 89       	ldd	r24, Z+22	; 0x16
    3a7a:	82 17       	cp	r24, r18
    3a7c:	60 f4       	brcc	.+24     	; 0x3a96 <xTaskGenericNotifyFromISR+0x1da>
    3a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a80:	98 89       	ldd	r25, Y+16	; 0x10
    3a82:	89 2b       	or	r24, r25
    3a84:	29 f0       	breq	.+10     	; 0x3a90 <xTaskGenericNotifyFromISR+0x1d4>
    3a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a88:	98 89       	ldd	r25, Y+16	; 0x10
    3a8a:	21 e0       	ldi	r18, 0x01	; 1
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	20 83       	st	Z, r18
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <xYieldPending>
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	60 96       	adiw	r28, 0x10	; 16
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	cd bf       	out	0x3d, r28	; 61
    3aa4:	df 91       	pop	r29
    3aa6:	cf 91       	pop	r28
    3aa8:	1f 91       	pop	r17
    3aaa:	0f 91       	pop	r16
    3aac:	ff 90       	pop	r15
    3aae:	ef 90       	pop	r14
    3ab0:	08 95       	ret

00003ab2 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
    {
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <xTaskNotifyStateClear+0x6>
    3ab8:	1f 92       	push	r1
    3aba:	1f 92       	push	r1
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	9d 83       	std	Y+5, r25	; 0x05
    3ac2:	8c 83       	std	Y+4, r24	; 0x04
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ac8:	89 2b       	or	r24, r25
    3aca:	29 f4       	brne	.+10     	; 0x3ad6 <xTaskNotifyStateClear+0x24>
    3acc:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3ad0:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3ad4:	02 c0       	rjmp	.+4      	; 0x3ada <xTaskNotifyStateClear+0x28>
    3ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    3ada:	9b 83       	std	Y+3, r25	; 0x03
    3adc:	8a 83       	std	Y+2, r24	; 0x02

        taskENTER_CRITICAL();
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	f8 94       	cli
    3ae2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    3ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae8:	fc 01       	movw	r30, r24
    3aea:	83 a5       	ldd	r24, Z+43	; 0x2b
    3aec:	82 30       	cpi	r24, 0x02	; 2
    3aee:	39 f4       	brne	.+14     	; 0x3afe <xTaskNotifyStateClear+0x4c>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	9b 81       	ldd	r25, Y+3	; 0x03
    3af4:	fc 01       	movw	r30, r24
    3af6:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	89 83       	std	Y+1, r24	; 0x01
    3afc:	01 c0       	rjmp	.+2      	; 0x3b00 <xTaskNotifyStateClear+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
    3afe:	19 82       	std	Y+1, r1	; 0x01
            }
        }
        taskEXIT_CRITICAL();
    3b00:	0f 90       	pop	r0
    3b02:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    }
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	08 95       	ret

00003b16 <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
    3b1e:	27 97       	sbiw	r28, 0x07	; 7
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	9e 83       	std	Y+6, r25	; 0x06
    3b2c:	8d 83       	std	Y+5, r24	; 0x05
    3b2e:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3b30:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <xTickCount>
    3b34:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <xTickCount+0x1>
    3b38:	9a 83       	std	Y+2, r25	; 0x02
    3b3a:	89 83       	std	Y+1, r24	; 0x01
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3b3c:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3b40:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3b44:	02 96       	adiw	r24, 0x02	; 2
    3b46:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4e:	01 96       	adiw	r24, 0x01	; 1
    3b50:	71 f4       	brne	.+28     	; 0x3b6e <prvAddCurrentTaskToDelayedList+0x58>
    3b52:	8f 81       	ldd	r24, Y+7	; 0x07
    3b54:	88 23       	and	r24, r24
    3b56:	59 f0       	breq	.+22     	; 0x3b6e <prvAddCurrentTaskToDelayedList+0x58>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3b58:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3b5c:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3b60:	02 96       	adiw	r24, 0x02	; 2
    3b62:	bc 01       	movw	r22, r24
    3b64:	8d e9       	ldi	r24, 0x9D	; 157
    3b66:	98 e0       	ldi	r25, 0x08	; 8
    3b68:	0e 94 84 02 	call	0x508	; 0x508 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3b6c:	44 c0       	rjmp	.+136    	; 0x3bf6 <prvAddCurrentTaskToDelayedList+0xe0>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    3b6e:	29 81       	ldd	r18, Y+1	; 0x01
    3b70:	3a 81       	ldd	r19, Y+2	; 0x02
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	82 0f       	add	r24, r18
    3b78:	93 1f       	adc	r25, r19
    3b7a:	9c 83       	std	Y+4, r25	; 0x04
    3b7c:	8b 83       	std	Y+3, r24	; 0x03

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3b7e:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3b82:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3b86:	2b 81       	ldd	r18, Y+3	; 0x03
    3b88:	3c 81       	ldd	r19, Y+4	; 0x04
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	33 83       	std	Z+3, r19	; 0x03
    3b8e:	22 83       	std	Z+2, r18	; 0x02

            if( xTimeToWake < xConstTickCount )
    3b90:	2b 81       	ldd	r18, Y+3	; 0x03
    3b92:	3c 81       	ldd	r19, Y+4	; 0x04
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	9a 81       	ldd	r25, Y+2	; 0x02
    3b98:	28 17       	cp	r18, r24
    3b9a:	39 07       	cpc	r19, r25
    3b9c:	78 f4       	brcc	.+30     	; 0x3bbc <prvAddCurrentTaskToDelayedList+0xa6>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3b9e:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3ba2:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3ba6:	9c 01       	movw	r18, r24
    3ba8:	2e 5f       	subi	r18, 0xFE	; 254
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <pxOverflowDelayedTaskList>
    3bb0:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <pxOverflowDelayedTaskList+0x1>
    3bb4:	b9 01       	movw	r22, r18
    3bb6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3bba:	1d c0       	rjmp	.+58     	; 0x3bf6 <prvAddCurrentTaskToDelayedList+0xe0>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3bbc:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <__data_end>
    3bc0:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <__data_end+0x1>
    3bc4:	9c 01       	movw	r18, r24
    3bc6:	2e 5f       	subi	r18, 0xFE	; 254
    3bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bca:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxDelayedTaskList>
    3bce:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxDelayedTaskList+0x1>
    3bd2:	b9 01       	movw	r22, r18
    3bd4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    3bd8:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <xNextTaskUnblockTime>
    3bdc:	90 91 b0 08 	lds	r25, 0x08B0	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    3be0:	2b 81       	ldd	r18, Y+3	; 0x03
    3be2:	3c 81       	ldd	r19, Y+4	; 0x04
    3be4:	28 17       	cp	r18, r24
    3be6:	39 07       	cpc	r19, r25
    3be8:	30 f4       	brcc	.+12     	; 0x3bf6 <prvAddCurrentTaskToDelayedList+0xe0>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	9c 81       	ldd	r25, Y+4	; 0x04
    3bee:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <xNextTaskUnblockTime+0x1>
    3bf2:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3bf6:	00 00       	nop
    3bf8:	27 96       	adiw	r28, 0x07	; 7
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	08 95       	ret

00003c0a <xTimerCreateTimerTask>:
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	1f 92       	push	r1
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	19 82       	std	Y+1, r1	; 0x01
    3c1c:	40 d4       	rcall	.+2176   	; 0x449e <prvCheckForValidListAndQueue>
    3c1e:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    3c22:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    3c26:	89 2b       	or	r24, r25
    3c28:	91 f0       	breq	.+36     	; 0x3c4e <xTimerCreateTimerTask+0x44>
    3c2a:	0f 2e       	mov	r0, r31
    3c2c:	fc ec       	ldi	r31, 0xCC	; 204
    3c2e:	ef 2e       	mov	r14, r31
    3c30:	f8 e0       	ldi	r31, 0x08	; 8
    3c32:	ff 2e       	mov	r15, r31
    3c34:	f0 2d       	mov	r31, r0
    3c36:	03 e0       	ldi	r16, 0x03	; 3
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	45 e5       	ldi	r20, 0x55	; 85
    3c3e:	50 e0       	ldi	r21, 0x00	; 0
    3c40:	65 e4       	ldi	r22, 0x45	; 69
    3c42:	72 e0       	ldi	r23, 0x02	; 2
    3c44:	8f ed       	ldi	r24, 0xDF	; 223
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskCreate>
    3c4c:	89 83       	std	Y+1, r24	; 0x01
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	0f 90       	pop	r0
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	0f 91       	pop	r16
    3c58:	ff 90       	pop	r15
    3c5a:	ef 90       	pop	r14
    3c5c:	08 95       	ret

00003c5e <xTimerCreate>:
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	2b 97       	sbiw	r28, 0x0b	; 11
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	9c 83       	std	Y+4, r25	; 0x04
    3c7c:	8b 83       	std	Y+3, r24	; 0x03
    3c7e:	7e 83       	std	Y+6, r23	; 0x06
    3c80:	6d 83       	std	Y+5, r22	; 0x05
    3c82:	4f 83       	std	Y+7, r20	; 0x07
    3c84:	39 87       	std	Y+9, r19	; 0x09
    3c86:	28 87       	std	Y+8, r18	; 0x08
    3c88:	1b 87       	std	Y+11, r17	; 0x0b
    3c8a:	0a 87       	std	Y+10, r16	; 0x0a
    3c8c:	84 e1       	ldi	r24, 0x14	; 20
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	0e 94 ff 01 	call	0x3fe	; 0x3fe <pvPortMalloc>
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	89 2b       	or	r24, r25
    3c9e:	91 f0       	breq	.+36     	; 0x3cc4 <xTimerCreate+0x66>
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	13 8a       	std	Z+19, r1	; 0x13
    3ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    3caa:	fa 81       	ldd	r31, Y+2	; 0x02
    3cac:	4a 85       	ldd	r20, Y+10	; 0x0a
    3cae:	5b 85       	ldd	r21, Y+11	; 0x0b
    3cb0:	28 85       	ldd	r18, Y+8	; 0x08
    3cb2:	39 85       	ldd	r19, Y+9	; 0x09
    3cb4:	6d 81       	ldd	r22, Y+5	; 0x05
    3cb6:	7e 81       	ldd	r23, Y+6	; 0x06
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	7f 01       	movw	r14, r30
    3cbe:	8a 01       	movw	r16, r20
    3cc0:	4f 81       	ldd	r20, Y+7	; 0x07
    3cc2:	0f d0       	rcall	.+30     	; 0x3ce2 <prvInitialiseNewTimer>
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc8:	2b 96       	adiw	r28, 0x0b	; 11
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	f8 94       	cli
    3cce:	de bf       	out	0x3e, r29	; 62
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	cd bf       	out	0x3d, r28	; 61
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	1f 91       	pop	r17
    3cda:	0f 91       	pop	r16
    3cdc:	ff 90       	pop	r15
    3cde:	ef 90       	pop	r14
    3ce0:	08 95       	ret

00003ce2 <prvInitialiseNewTimer>:
    3ce2:	ef 92       	push	r14
    3ce4:	ff 92       	push	r15
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	2b 97       	sbiw	r28, 0x0b	; 11
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	9a 83       	std	Y+2, r25	; 0x02
    3d00:	89 83       	std	Y+1, r24	; 0x01
    3d02:	7c 83       	std	Y+4, r23	; 0x04
    3d04:	6b 83       	std	Y+3, r22	; 0x03
    3d06:	4d 83       	std	Y+5, r20	; 0x05
    3d08:	3f 83       	std	Y+7, r19	; 0x07
    3d0a:	2e 83       	std	Y+6, r18	; 0x06
    3d0c:	19 87       	std	Y+9, r17	; 0x09
    3d0e:	08 87       	std	Y+8, r16	; 0x08
    3d10:	fb 86       	std	Y+11, r15	; 0x0b
    3d12:	ea 86       	std	Y+10, r14	; 0x0a
    3d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d16:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d18:	89 2b       	or	r24, r25
    3d1a:	79 f1       	breq	.+94     	; 0x3d7a <prvInitialiseNewTimer+0x98>
    3d1c:	c0 d3       	rcall	.+1920   	; 0x449e <prvCheckForValidListAndQueue>
    3d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d20:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d22:	29 81       	ldd	r18, Y+1	; 0x01
    3d24:	3a 81       	ldd	r19, Y+2	; 0x02
    3d26:	fc 01       	movw	r30, r24
    3d28:	31 83       	std	Z+1, r19	; 0x01
    3d2a:	20 83       	st	Z, r18
    3d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d30:	2b 81       	ldd	r18, Y+3	; 0x03
    3d32:	3c 81       	ldd	r19, Y+4	; 0x04
    3d34:	fc 01       	movw	r30, r24
    3d36:	35 87       	std	Z+13, r19	; 0x0d
    3d38:	24 87       	std	Z+12, r18	; 0x0c
    3d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d3e:	2e 81       	ldd	r18, Y+6	; 0x06
    3d40:	3f 81       	ldd	r19, Y+7	; 0x07
    3d42:	fc 01       	movw	r30, r24
    3d44:	37 87       	std	Z+15, r19	; 0x0f
    3d46:	26 87       	std	Z+14, r18	; 0x0e
    3d48:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d4c:	28 85       	ldd	r18, Y+8	; 0x08
    3d4e:	39 85       	ldd	r19, Y+9	; 0x09
    3d50:	fc 01       	movw	r30, r24
    3d52:	31 8b       	std	Z+17, r19	; 0x11
    3d54:	20 8b       	std	Z+16, r18	; 0x10
    3d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d5a:	02 96       	adiw	r24, 0x02	; 2
    3d5c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <vListInitialiseItem>
    3d60:	8d 81       	ldd	r24, Y+5	; 0x05
    3d62:	88 23       	and	r24, r24
    3d64:	51 f0       	breq	.+20     	; 0x3d7a <prvInitialiseNewTimer+0x98>
    3d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	83 89       	ldd	r24, Z+19	; 0x13
    3d6e:	28 2f       	mov	r18, r24
    3d70:	24 60       	ori	r18, 0x04	; 4
    3d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d76:	fc 01       	movw	r30, r24
    3d78:	23 8b       	std	Z+19, r18	; 0x13
    3d7a:	00 00       	nop
    3d7c:	2b 96       	adiw	r28, 0x0b	; 11
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	f8 94       	cli
    3d82:	de bf       	out	0x3e, r29	; 62
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	ff 90       	pop	r15
    3d92:	ef 90       	pop	r14
    3d94:	08 95       	ret

00003d96 <xTimerGenericCommand>:
    3d96:	0f 93       	push	r16
    3d98:	1f 93       	push	r17
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	2f 97       	sbiw	r28, 0x0f	; 15
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
    3dae:	98 87       	std	Y+8, r25	; 0x08
    3db0:	8f 83       	std	Y+7, r24	; 0x07
    3db2:	69 87       	std	Y+9, r22	; 0x09
    3db4:	5b 87       	std	Y+11, r21	; 0x0b
    3db6:	4a 87       	std	Y+10, r20	; 0x0a
    3db8:	3d 87       	std	Y+13, r19	; 0x0d
    3dba:	2c 87       	std	Y+12, r18	; 0x0c
    3dbc:	1f 87       	std	Y+15, r17	; 0x0f
    3dbe:	0e 87       	std	Y+14, r16	; 0x0e
    3dc0:	19 82       	std	Y+1, r1	; 0x01
    3dc2:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    3dc6:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    3dca:	89 2b       	or	r24, r25
    3dcc:	c9 f1       	breq	.+114    	; 0x3e40 <xTimerGenericCommand+0xaa>
    3dce:	89 85       	ldd	r24, Y+9	; 0x09
    3dd0:	8a 83       	std	Y+2, r24	; 0x02
    3dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dd6:	9c 83       	std	Y+4, r25	; 0x04
    3dd8:	8b 83       	std	Y+3, r24	; 0x03
    3dda:	8f 81       	ldd	r24, Y+7	; 0x07
    3ddc:	98 85       	ldd	r25, Y+8	; 0x08
    3dde:	9e 83       	std	Y+6, r25	; 0x06
    3de0:	8d 83       	std	Y+5, r24	; 0x05
    3de2:	89 85       	ldd	r24, Y+9	; 0x09
    3de4:	86 30       	cpi	r24, 0x06	; 6
    3de6:	fc f4       	brge	.+62     	; 0x3e26 <xTimerGenericCommand+0x90>
    3de8:	e7 d9       	rcall	.-3122   	; 0x31b8 <xTaskGetSchedulerState>
    3dea:	82 30       	cpi	r24, 0x02	; 2
    3dec:	71 f4       	brne	.+28     	; 0x3e0a <xTimerGenericCommand+0x74>
    3dee:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    3df2:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    3df6:	4e 85       	ldd	r20, Y+14	; 0x0e
    3df8:	5f 85       	ldd	r21, Y+15	; 0x0f
    3dfa:	be 01       	movw	r22, r28
    3dfc:	6e 5f       	subi	r22, 0xFE	; 254
    3dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericSend>
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	1b c0       	rjmp	.+54     	; 0x3e40 <xTimerGenericCommand+0xaa>
    3e0a:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    3e0e:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    3e12:	be 01       	movw	r22, r28
    3e14:	6e 5f       	subi	r22, 0xFE	; 254
    3e16:	7f 4f       	sbci	r23, 0xFF	; 255
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericSend>
    3e22:	89 83       	std	Y+1, r24	; 0x01
    3e24:	0d c0       	rjmp	.+26     	; 0x3e40 <xTimerGenericCommand+0xaa>
    3e26:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    3e2a:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    3e2e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3e30:	5d 85       	ldd	r21, Y+13	; 0x0d
    3e32:	be 01       	movw	r22, r28
    3e34:	6e 5f       	subi	r22, 0xFE	; 254
    3e36:	7f 4f       	sbci	r23, 0xFF	; 255
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	0e 94 9c 08 	call	0x1138	; 0x1138 <xQueueGenericSendFromISR>
    3e3e:	89 83       	std	Y+1, r24	; 0x01
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	2f 96       	adiw	r28, 0x0f	; 15
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	de bf       	out	0x3e, r29	; 62
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	cd bf       	out	0x3d, r28	; 61
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	08 95       	ret

00003e58 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	cd b7       	in	r28, 0x3d	; 61
    3e62:	de b7       	in	r29, 0x3e	; 62
    3e64:	27 97       	sbiw	r28, 0x07	; 7
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	9d 83       	std	Y+5, r25	; 0x05
    3e72:	8c 83       	std	Y+4, r24	; 0x04
    3e74:	7f 83       	std	Y+7, r23	; 0x07
    3e76:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3e78:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    3e7c:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    3e80:	fc 01       	movw	r30, r24
    3e82:	85 81       	ldd	r24, Z+5	; 0x05
    3e84:	96 81       	ldd	r25, Z+6	; 0x06
    3e86:	fc 01       	movw	r30, r24
    3e88:	86 81       	ldd	r24, Z+6	; 0x06
    3e8a:	97 81       	ldd	r25, Z+7	; 0x07
    3e8c:	9a 83       	std	Y+2, r25	; 0x02
    3e8e:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	9a 81       	ldd	r25, Y+2	; 0x02
    3e94:	02 96       	adiw	r24, 0x02	; 2
    3e96:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	83 89       	ldd	r24, Z+19	; 0x13
    3ea2:	88 2f       	mov	r24, r24
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	84 70       	andi	r24, 0x04	; 4
    3ea8:	99 27       	eor	r25, r25
    3eaa:	89 2b       	or	r24, r25
    3eac:	f9 f0       	breq	.+62     	; 0x3eec <prvProcessExpiredTimer+0x94>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	24 85       	ldd	r18, Z+12	; 0x0c
    3eb6:	35 85       	ldd	r19, Z+13	; 0x0d
    3eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eba:	9d 81       	ldd	r25, Y+5	; 0x05
    3ebc:	b9 01       	movw	r22, r18
    3ebe:	68 0f       	add	r22, r24
    3ec0:	79 1f       	adc	r23, r25
    3ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ec6:	4e 81       	ldd	r20, Y+6	; 0x06
    3ec8:	5f 81       	ldd	r21, Y+7	; 0x07
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ece:	e6 d0       	rcall	.+460    	; 0x409c <prvInsertTimerInActiveList>
    3ed0:	88 23       	and	r24, r24
    3ed2:	b1 f0       	breq	.+44     	; 0x3f00 <prvProcessExpiredTimer+0xa8>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3ed4:	4c 81       	ldd	r20, Y+4	; 0x04
    3ed6:	5d 81       	ldd	r21, Y+5	; 0x05
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	9a 81       	ldd	r25, Y+2	; 0x02
    3edc:	00 e0       	ldi	r16, 0x00	; 0
    3ede:	10 e0       	ldi	r17, 0x00	; 0
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	60 e0       	ldi	r22, 0x00	; 0
    3ee6:	57 df       	rcall	.-338    	; 0x3d96 <xTimerGenericCommand>
    3ee8:	8b 83       	std	Y+3, r24	; 0x03
    3eea:	0a c0       	rjmp	.+20     	; 0x3f00 <prvProcessExpiredTimer+0xa8>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	83 89       	ldd	r24, Z+19	; 0x13
    3ef4:	28 2f       	mov	r18, r24
    3ef6:	2e 7f       	andi	r18, 0xFE	; 254
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	9a 81       	ldd	r25, Y+2	; 0x02
    3efc:	fc 01       	movw	r30, r24
    3efe:	23 8b       	std	Z+19, r18	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	9a 81       	ldd	r25, Y+2	; 0x02
    3f04:	fc 01       	movw	r30, r24
    3f06:	20 89       	ldd	r18, Z+16	; 0x10
    3f08:	31 89       	ldd	r19, Z+17	; 0x11
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0e:	f9 01       	movw	r30, r18
    3f10:	19 95       	eicall
}
    3f12:	00 00       	nop
    3f14:	27 96       	adiw	r28, 0x07	; 7
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	df 91       	pop	r29
    3f22:	cf 91       	pop	r28
    3f24:	1f 91       	pop	r17
    3f26:	0f 91       	pop	r16
    3f28:	08 95       	ret

00003f2a <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	00 d0       	rcall	.+0      	; 0x3f30 <prvProcessTimerOrBlockTask+0x6>
    3f30:	00 d0       	rcall	.+0      	; 0x3f32 <prvProcessTimerOrBlockTask+0x8>
    3f32:	cd b7       	in	r28, 0x3d	; 61
    3f34:	de b7       	in	r29, 0x3e	; 62
    3f36:	9d 83       	std	Y+5, r25	; 0x05
    3f38:	8c 83       	std	Y+4, r24	; 0x04
    3f3a:	6e 83       	std	Y+6, r22	; 0x06
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3f3c:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3f40:	ce 01       	movw	r24, r28
    3f42:	03 96       	adiw	r24, 0x03	; 3
    3f44:	7c d0       	rcall	.+248    	; 0x403e <prvSampleTimeNow>
    3f46:	9a 83       	std	Y+2, r25	; 0x02
    3f48:	89 83       	std	Y+1, r24	; 0x01
        if( xTimerListsWereSwitched == pdFALSE )
    3f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4c:	88 23       	and	r24, r24
    3f4e:	b1 f5       	brne	.+108    	; 0x3fbc <prvProcessTimerOrBlockTask+0x92>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3f50:	8e 81       	ldd	r24, Y+6	; 0x06
    3f52:	88 23       	and	r24, r24
    3f54:	81 f4       	brne	.+32     	; 0x3f76 <prvProcessTimerOrBlockTask+0x4c>
    3f56:	2c 81       	ldd	r18, Y+4	; 0x04
    3f58:	3d 81       	ldd	r19, Y+5	; 0x05
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5e:	82 17       	cp	r24, r18
    3f60:	93 07       	cpc	r25, r19
    3f62:	48 f0       	brcs	.+18     	; 0x3f76 <prvProcessTimerOrBlockTask+0x4c>
            {
                ( void ) xTaskResumeAll();
    3f64:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3f68:	29 81       	ldd	r18, Y+1	; 0x01
    3f6a:	3a 81       	ldd	r19, Y+2	; 0x02
    3f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f70:	b9 01       	movw	r22, r18
    3f72:	72 df       	rcall	.-284    	; 0x3e58 <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3f74:	25 c0       	rjmp	.+74     	; 0x3fc0 <prvProcessTimerOrBlockTask+0x96>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    3f76:	8e 81       	ldd	r24, Y+6	; 0x06
    3f78:	88 23       	and	r24, r24
    3f7a:	59 f0       	breq	.+22     	; 0x3f92 <prvProcessTimerOrBlockTask+0x68>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3f7c:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <pxOverflowTimerList>
    3f80:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <pxOverflowTimerList+0x1>
    3f84:	fc 01       	movw	r30, r24
    3f86:	90 81       	ld	r25, Z
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	99 23       	and	r25, r25
    3f8c:	09 f0       	breq	.+2      	; 0x3f90 <prvProcessTimerOrBlockTask+0x66>
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	8e 83       	std	Y+6, r24	; 0x06
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3f92:	2c 81       	ldd	r18, Y+4	; 0x04
    3f94:	3d 81       	ldd	r19, Y+5	; 0x05
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
    3f98:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9a:	28 1b       	sub	r18, r24
    3f9c:	39 0b       	sbc	r19, r25
    3f9e:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    3fa2:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    3fa6:	4e 81       	ldd	r20, Y+6	; 0x06
    3fa8:	b9 01       	movw	r22, r18
    3faa:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    3fae:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
    3fb2:	88 23       	and	r24, r24
    3fb4:	29 f4       	brne	.+10     	; 0x3fc0 <prvProcessTimerOrBlockTask+0x96>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3fb6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3fba:	02 c0       	rjmp	.+4      	; 0x3fc0 <prvProcessTimerOrBlockTask+0x96>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3fbc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xTaskResumeAll>
        }
    }
}
    3fc0:	00 00       	nop
    3fc2:	26 96       	adiw	r28, 0x06	; 6
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	f8 94       	cli
    3fc8:	de bf       	out	0x3e, r29	; 62
    3fca:	0f be       	out	0x3f, r0	; 63
    3fcc:	cd bf       	out	0x3d, r28	; 61
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	08 95       	ret

00003fd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	00 d0       	rcall	.+0      	; 0x3fda <prvGetNextExpireTime+0x6>
    3fda:	1f 92       	push	r1
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
    3fe0:	9c 83       	std	Y+4, r25	; 0x04
    3fe2:	8b 83       	std	Y+3, r24	; 0x03
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3fe4:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    3fe8:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    3fec:	fc 01       	movw	r30, r24
    3fee:	90 81       	ld	r25, Z
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	99 23       	and	r25, r25
    3ff4:	09 f0       	breq	.+2      	; 0x3ff8 <prvGetNextExpireTime+0x24>
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	28 2f       	mov	r18, r24
    3ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffe:	fc 01       	movw	r30, r24
    4000:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    4002:	8b 81       	ldd	r24, Y+3	; 0x03
    4004:	9c 81       	ldd	r25, Y+4	; 0x04
    4006:	fc 01       	movw	r30, r24
    4008:	80 81       	ld	r24, Z
    400a:	88 23       	and	r24, r24
    400c:	69 f4       	brne	.+26     	; 0x4028 <prvGetNextExpireTime+0x54>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    400e:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    4012:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    4016:	fc 01       	movw	r30, r24
    4018:	85 81       	ldd	r24, Z+5	; 0x05
    401a:	96 81       	ldd	r25, Z+6	; 0x06
    401c:	fc 01       	movw	r30, r24
    401e:	80 81       	ld	r24, Z
    4020:	91 81       	ldd	r25, Z+1	; 0x01
    4022:	9a 83       	std	Y+2, r25	; 0x02
    4024:	89 83       	std	Y+1, r24	; 0x01
    4026:	02 c0       	rjmp	.+4      	; 0x402c <prvGetNextExpireTime+0x58>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    4028:	1a 82       	std	Y+2, r1	; 0x02
    402a:	19 82       	std	Y+1, r1	; 0x01
    }

    return xNextExpireTime;
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	0f 90       	pop	r0
    4036:	0f 90       	pop	r0
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	08 95       	ret

0000403e <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    403e:	cf 93       	push	r28
    4040:	df 93       	push	r29
    4042:	00 d0       	rcall	.+0      	; 0x4044 <prvSampleTimeNow+0x6>
    4044:	1f 92       	push	r1
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
    404a:	9c 83       	std	Y+4, r25	; 0x04
    404c:	8b 83       	std	Y+3, r24	; 0x03
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    404e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <xTaskGetTickCount>
    4052:	9a 83       	std	Y+2, r25	; 0x02
    4054:	89 83       	std	Y+1, r24	; 0x01

    if( xTimeNow < xLastTime )
    4056:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <xLastTime.2432>
    405a:	90 91 cf 08 	lds	r25, 0x08CF	; 0x8008cf <xLastTime.2432+0x1>
    405e:	29 81       	ldd	r18, Y+1	; 0x01
    4060:	3a 81       	ldd	r19, Y+2	; 0x02
    4062:	28 17       	cp	r18, r24
    4064:	39 07       	cpc	r19, r25
    4066:	38 f4       	brcc	.+14     	; 0x4076 <prvSampleTimeNow+0x38>
    {
        prvSwitchTimerLists();
    4068:	7c d1       	rcall	.+760    	; 0x4362 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    406a:	8b 81       	ldd	r24, Y+3	; 0x03
    406c:	9c 81       	ldd	r25, Y+4	; 0x04
    406e:	21 e0       	ldi	r18, 0x01	; 1
    4070:	fc 01       	movw	r30, r24
    4072:	20 83       	st	Z, r18
    4074:	04 c0       	rjmp	.+8      	; 0x407e <prvSampleTimeNow+0x40>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    4076:	8b 81       	ldd	r24, Y+3	; 0x03
    4078:	9c 81       	ldd	r25, Y+4	; 0x04
    407a:	fc 01       	movw	r30, r24
    407c:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	9a 81       	ldd	r25, Y+2	; 0x02
    4082:	90 93 cf 08 	sts	0x08CF, r25	; 0x8008cf <xLastTime.2432+0x1>
    4086:	80 93 ce 08 	sts	0x08CE, r24	; 0x8008ce <xLastTime.2432>

    return xTimeNow;
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	df 91       	pop	r29
    4098:	cf 91       	pop	r28
    409a:	08 95       	ret

0000409c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    409c:	cf 93       	push	r28
    409e:	df 93       	push	r29
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
    40a4:	29 97       	sbiw	r28, 0x09	; 9
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	de bf       	out	0x3e, r29	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	9b 83       	std	Y+3, r25	; 0x03
    40b2:	8a 83       	std	Y+2, r24	; 0x02
    40b4:	7d 83       	std	Y+5, r23	; 0x05
    40b6:	6c 83       	std	Y+4, r22	; 0x04
    40b8:	5f 83       	std	Y+7, r21	; 0x07
    40ba:	4e 83       	std	Y+6, r20	; 0x06
    40bc:	39 87       	std	Y+9, r19	; 0x09
    40be:	28 87       	std	Y+8, r18	; 0x08
BaseType_t xProcessTimerNow = pdFALSE;
    40c0:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    40c2:	8a 81       	ldd	r24, Y+2	; 0x02
    40c4:	9b 81       	ldd	r25, Y+3	; 0x03
    40c6:	2c 81       	ldd	r18, Y+4	; 0x04
    40c8:	3d 81       	ldd	r19, Y+5	; 0x05
    40ca:	fc 01       	movw	r30, r24
    40cc:	33 83       	std	Z+3, r19	; 0x03
    40ce:	22 83       	std	Z+2, r18	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	2a 81       	ldd	r18, Y+2	; 0x02
    40d6:	3b 81       	ldd	r19, Y+3	; 0x03
    40d8:	fc 01       	movw	r30, r24
    40da:	31 87       	std	Z+9, r19	; 0x09
    40dc:	20 87       	std	Z+8, r18	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    40de:	2c 81       	ldd	r18, Y+4	; 0x04
    40e0:	3d 81       	ldd	r19, Y+5	; 0x05
    40e2:	8e 81       	ldd	r24, Y+6	; 0x06
    40e4:	9f 81       	ldd	r25, Y+7	; 0x07
    40e6:	82 17       	cp	r24, r18
    40e8:	93 07       	cpc	r25, r19
    40ea:	f0 f0       	brcs	.+60     	; 0x4128 <prvInsertTimerInActiveList+0x8c>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    40ec:	2e 81       	ldd	r18, Y+6	; 0x06
    40ee:	3f 81       	ldd	r19, Y+7	; 0x07
    40f0:	88 85       	ldd	r24, Y+8	; 0x08
    40f2:	99 85       	ldd	r25, Y+9	; 0x09
    40f4:	28 1b       	sub	r18, r24
    40f6:	39 0b       	sbc	r19, r25
    40f8:	8a 81       	ldd	r24, Y+2	; 0x02
    40fa:	9b 81       	ldd	r25, Y+3	; 0x03
    40fc:	fc 01       	movw	r30, r24
    40fe:	84 85       	ldd	r24, Z+12	; 0x0c
    4100:	95 85       	ldd	r25, Z+13	; 0x0d
    4102:	28 17       	cp	r18, r24
    4104:	39 07       	cpc	r19, r25
    4106:	18 f0       	brcs	.+6      	; 0x410e <prvInsertTimerInActiveList+0x72>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	89 83       	std	Y+1, r24	; 0x01
    410c:	2a c0       	rjmp	.+84     	; 0x4162 <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    410e:	8a 81       	ldd	r24, Y+2	; 0x02
    4110:	9b 81       	ldd	r25, Y+3	; 0x03
    4112:	9c 01       	movw	r18, r24
    4114:	2e 5f       	subi	r18, 0xFE	; 254
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <pxOverflowTimerList>
    411c:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <pxOverflowTimerList+0x1>
    4120:	b9 01       	movw	r22, r18
    4122:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInsert>
    4126:	1d c0       	rjmp	.+58     	; 0x4162 <prvInsertTimerInActiveList+0xc6>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4128:	2e 81       	ldd	r18, Y+6	; 0x06
    412a:	3f 81       	ldd	r19, Y+7	; 0x07
    412c:	88 85       	ldd	r24, Y+8	; 0x08
    412e:	99 85       	ldd	r25, Y+9	; 0x09
    4130:	28 17       	cp	r18, r24
    4132:	39 07       	cpc	r19, r25
    4134:	50 f4       	brcc	.+20     	; 0x414a <prvInsertTimerInActiveList+0xae>
    4136:	2c 81       	ldd	r18, Y+4	; 0x04
    4138:	3d 81       	ldd	r19, Y+5	; 0x05
    413a:	88 85       	ldd	r24, Y+8	; 0x08
    413c:	99 85       	ldd	r25, Y+9	; 0x09
    413e:	28 17       	cp	r18, r24
    4140:	39 07       	cpc	r19, r25
    4142:	18 f0       	brcs	.+6      	; 0x414a <prvInsertTimerInActiveList+0xae>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	89 83       	std	Y+1, r24	; 0x01
    4148:	0c c0       	rjmp	.+24     	; 0x4162 <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    414a:	8a 81       	ldd	r24, Y+2	; 0x02
    414c:	9b 81       	ldd	r25, Y+3	; 0x03
    414e:	9c 01       	movw	r18, r24
    4150:	2e 5f       	subi	r18, 0xFE	; 254
    4152:	3f 4f       	sbci	r19, 0xFF	; 255
    4154:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    4158:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    415c:	b9 01       	movw	r22, r18
    415e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInsert>
        }
    }

    return xProcessTimerNow;
    4162:	89 81       	ldd	r24, Y+1	; 0x01
}
    4164:	29 96       	adiw	r28, 0x09	; 9
    4166:	0f b6       	in	r0, 0x3f	; 63
    4168:	f8 94       	cli
    416a:	de bf       	out	0x3e, r29	; 62
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	08 95       	ret

00004176 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    4182:	2b 97       	sbiw	r28, 0x0b	; 11
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    418e:	ce c0       	rjmp	.+412    	; 0x432c <prvProcessReceivedCommands+0x1b6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4190:	8e 81       	ldd	r24, Y+6	; 0x06
    4192:	88 23       	and	r24, r24
    4194:	0c f4       	brge	.+2      	; 0x4198 <prvProcessReceivedCommands+0x22>
    4196:	ca c0       	rjmp	.+404    	; 0x432c <prvProcessReceivedCommands+0x1b6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4198:	89 85       	ldd	r24, Y+9	; 0x09
    419a:	9a 85       	ldd	r25, Y+10	; 0x0a
    419c:	9a 83       	std	Y+2, r25	; 0x02
    419e:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	dc 01       	movw	r26, r24
    41a6:	1a 96       	adiw	r26, 0x0a	; 10
    41a8:	8d 91       	ld	r24, X+
    41aa:	9c 91       	ld	r25, X
    41ac:	1b 97       	sbiw	r26, 0x0b	; 11
    41ae:	89 2b       	or	r24, r25
    41b0:	29 f0       	breq	.+10     	; 0x41bc <prvProcessReceivedCommands+0x46>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	9a 81       	ldd	r25, Y+2	; 0x02
    41b6:	02 96       	adiw	r24, 0x02	; 2
    41b8:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    41bc:	ce 01       	movw	r24, r28
    41be:	0b 96       	adiw	r24, 0x0b	; 11
    41c0:	3e df       	rcall	.-388    	; 0x403e <prvSampleTimeNow>
    41c2:	9c 83       	std	Y+4, r25	; 0x04
    41c4:	8b 83       	std	Y+3, r24	; 0x03

            switch( xMessage.xMessageID )
    41c6:	8e 81       	ldd	r24, Y+6	; 0x06
    41c8:	08 2e       	mov	r0, r24
    41ca:	00 0c       	add	r0, r0
    41cc:	99 0b       	sbc	r25, r25
    41ce:	09 2e       	mov	r0, r25
    41d0:	00 0c       	add	r0, r0
    41d2:	aa 0b       	sbc	r26, r26
    41d4:	bb 0b       	sbc	r27, r27
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	29 e0       	ldi	r18, 0x09	; 9
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	84 1b       	sub	r24, r20
    41e0:	95 0b       	sbc	r25, r21
    41e2:	28 17       	cp	r18, r24
    41e4:	39 07       	cpc	r19, r25
    41e6:	08 f4       	brcc	.+2      	; 0x41ea <prvProcessReceivedCommands+0x74>
    41e8:	a0 c0       	rjmp	.+320    	; 0x432a <prvProcessReceivedCommands+0x1b4>
    41ea:	fc 01       	movw	r30, r24
    41ec:	88 27       	eor	r24, r24
    41ee:	ee 58       	subi	r30, 0x8E	; 142
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	8f 4f       	sbci	r24, 0xFF	; 255
    41f4:	0c 94 a1 34 	jmp	0x6942	; 0x6942 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	9a 81       	ldd	r25, Y+2	; 0x02
    41fc:	fc 01       	movw	r30, r24
    41fe:	83 89       	ldd	r24, Z+19	; 0x13
    4200:	28 2f       	mov	r18, r24
    4202:	21 60       	ori	r18, 0x01	; 1
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	9a 81       	ldd	r25, Y+2	; 0x02
    4208:	dc 01       	movw	r26, r24
    420a:	53 96       	adiw	r26, 0x13	; 19
    420c:	2c 93       	st	X, r18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    420e:	ef 81       	ldd	r30, Y+7	; 0x07
    4210:	f8 85       	ldd	r31, Y+8	; 0x08
    4212:	2f 81       	ldd	r18, Y+7	; 0x07
    4214:	38 85       	ldd	r19, Y+8	; 0x08
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	9a 81       	ldd	r25, Y+2	; 0x02
    421a:	dc 01       	movw	r26, r24
    421c:	1c 96       	adiw	r26, 0x0c	; 12
    421e:	8d 91       	ld	r24, X+
    4220:	9c 91       	ld	r25, X
    4222:	1d 97       	sbiw	r26, 0x0d	; 13
    4224:	b9 01       	movw	r22, r18
    4226:	68 0f       	add	r22, r24
    4228:	79 1f       	adc	r23, r25
    422a:	4b 81       	ldd	r20, Y+3	; 0x03
    422c:	5c 81       	ldd	r21, Y+4	; 0x04
    422e:	89 81       	ldd	r24, Y+1	; 0x01
    4230:	9a 81       	ldd	r25, Y+2	; 0x02
    4232:	9f 01       	movw	r18, r30
    4234:	33 df       	rcall	.-410    	; 0x409c <prvInsertTimerInActiveList>
    4236:	88 23       	and	r24, r24
    4238:	09 f4       	brne	.+2      	; 0x423c <prvProcessReceivedCommands+0xc6>
    423a:	78 c0       	rjmp	.+240    	; 0x432c <prvProcessReceivedCommands+0x1b6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	fc 01       	movw	r30, r24
    4242:	20 89       	ldd	r18, Z+16	; 0x10
    4244:	31 89       	ldd	r19, Z+17	; 0x11
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	9a 81       	ldd	r25, Y+2	; 0x02
    424a:	f9 01       	movw	r30, r18
    424c:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	9a 81       	ldd	r25, Y+2	; 0x02
    4252:	dc 01       	movw	r26, r24
    4254:	53 96       	adiw	r26, 0x13	; 19
    4256:	8c 91       	ld	r24, X
    4258:	88 2f       	mov	r24, r24
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	84 70       	andi	r24, 0x04	; 4
    425e:	99 27       	eor	r25, r25
    4260:	89 2b       	or	r24, r25
    4262:	09 f4       	brne	.+2      	; 0x4266 <prvProcessReceivedCommands+0xf0>
    4264:	63 c0       	rjmp	.+198    	; 0x432c <prvProcessReceivedCommands+0x1b6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4266:	2f 81       	ldd	r18, Y+7	; 0x07
    4268:	38 85       	ldd	r19, Y+8	; 0x08
    426a:	89 81       	ldd	r24, Y+1	; 0x01
    426c:	9a 81       	ldd	r25, Y+2	; 0x02
    426e:	fc 01       	movw	r30, r24
    4270:	84 85       	ldd	r24, Z+12	; 0x0c
    4272:	95 85       	ldd	r25, Z+13	; 0x0d
    4274:	a9 01       	movw	r20, r18
    4276:	48 0f       	add	r20, r24
    4278:	59 1f       	adc	r21, r25
    427a:	89 81       	ldd	r24, Y+1	; 0x01
    427c:	9a 81       	ldd	r25, Y+2	; 0x02
    427e:	00 e0       	ldi	r16, 0x00	; 0
    4280:	10 e0       	ldi	r17, 0x00	; 0
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	86 dd       	rcall	.-1268   	; 0x3d96 <xTimerGenericCommand>
    428a:	8d 83       	std	Y+5, r24	; 0x05
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    428c:	4f c0       	rjmp	.+158    	; 0x432c <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	9a 81       	ldd	r25, Y+2	; 0x02
    4292:	dc 01       	movw	r26, r24
    4294:	53 96       	adiw	r26, 0x13	; 19
    4296:	8c 91       	ld	r24, X
    4298:	28 2f       	mov	r18, r24
    429a:	2e 7f       	andi	r18, 0xFE	; 254
    429c:	89 81       	ldd	r24, Y+1	; 0x01
    429e:	9a 81       	ldd	r25, Y+2	; 0x02
    42a0:	fc 01       	movw	r30, r24
    42a2:	23 8b       	std	Z+19, r18	; 0x13
                    break;
    42a4:	43 c0       	rjmp	.+134    	; 0x432c <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    42a6:	89 81       	ldd	r24, Y+1	; 0x01
    42a8:	9a 81       	ldd	r25, Y+2	; 0x02
    42aa:	dc 01       	movw	r26, r24
    42ac:	53 96       	adiw	r26, 0x13	; 19
    42ae:	8c 91       	ld	r24, X
    42b0:	28 2f       	mov	r18, r24
    42b2:	21 60       	ori	r18, 0x01	; 1
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	9a 81       	ldd	r25, Y+2	; 0x02
    42b8:	fc 01       	movw	r30, r24
    42ba:	23 8b       	std	Z+19, r18	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    42bc:	2f 81       	ldd	r18, Y+7	; 0x07
    42be:	38 85       	ldd	r19, Y+8	; 0x08
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	9a 81       	ldd	r25, Y+2	; 0x02
    42c4:	dc 01       	movw	r26, r24
    42c6:	1d 96       	adiw	r26, 0x0d	; 13
    42c8:	3c 93       	st	X, r19
    42ca:	2e 93       	st	-X, r18
    42cc:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    42ce:	89 81       	ldd	r24, Y+1	; 0x01
    42d0:	9a 81       	ldd	r25, Y+2	; 0x02
    42d2:	fc 01       	movw	r30, r24
    42d4:	24 85       	ldd	r18, Z+12	; 0x0c
    42d6:	35 85       	ldd	r19, Z+13	; 0x0d
    42d8:	8b 81       	ldd	r24, Y+3	; 0x03
    42da:	9c 81       	ldd	r25, Y+4	; 0x04
    42dc:	b9 01       	movw	r22, r18
    42de:	68 0f       	add	r22, r24
    42e0:	79 1f       	adc	r23, r25
    42e2:	2b 81       	ldd	r18, Y+3	; 0x03
    42e4:	3c 81       	ldd	r19, Y+4	; 0x04
    42e6:	4b 81       	ldd	r20, Y+3	; 0x03
    42e8:	5c 81       	ldd	r21, Y+4	; 0x04
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	9a 81       	ldd	r25, Y+2	; 0x02
    42ee:	d6 de       	rcall	.-596    	; 0x409c <prvInsertTimerInActiveList>
                    break;
    42f0:	1d c0       	rjmp	.+58     	; 0x432c <prvProcessReceivedCommands+0x1b6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	9a 81       	ldd	r25, Y+2	; 0x02
    42f6:	dc 01       	movw	r26, r24
    42f8:	53 96       	adiw	r26, 0x13	; 19
    42fa:	8c 91       	ld	r24, X
    42fc:	88 2f       	mov	r24, r24
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	82 70       	andi	r24, 0x02	; 2
    4302:	99 27       	eor	r25, r25
    4304:	89 2b       	or	r24, r25
    4306:	29 f4       	brne	.+10     	; 0x4312 <prvProcessReceivedCommands+0x19c>
                        {
                            vPortFree( pxTimer );
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	9a 81       	ldd	r25, Y+2	; 0x02
    430c:	0e 94 20 02 	call	0x440	; 0x440 <vPortFree>
    4310:	0d c0       	rjmp	.+26     	; 0x432c <prvProcessReceivedCommands+0x1b6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	9a 81       	ldd	r25, Y+2	; 0x02
    4316:	fc 01       	movw	r30, r24
    4318:	83 89       	ldd	r24, Z+19	; 0x13
    431a:	28 2f       	mov	r18, r24
    431c:	2e 7f       	andi	r18, 0xFE	; 254
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	9a 81       	ldd	r25, Y+2	; 0x02
    4322:	dc 01       	movw	r26, r24
    4324:	53 96       	adiw	r26, 0x13	; 19
    4326:	2c 93       	st	X, r18
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    4328:	01 c0       	rjmp	.+2      	; 0x432c <prvProcessReceivedCommands+0x1b6>

                default    :
                    /* Don't expect to get here. */
                    break;
    432a:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    432c:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    4330:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    4334:	9e 01       	movw	r18, r28
    4336:	2a 5f       	subi	r18, 0xFA	; 250
    4338:	3f 4f       	sbci	r19, 0xFF	; 255
    433a:	40 e0       	ldi	r20, 0x00	; 0
    433c:	50 e0       	ldi	r21, 0x00	; 0
    433e:	b9 01       	movw	r22, r18
    4340:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <xQueueReceive>
    4344:	88 23       	and	r24, r24
    4346:	09 f0       	breq	.+2      	; 0x434a <prvProcessReceivedCommands+0x1d4>
    4348:	23 cf       	rjmp	.-442    	; 0x4190 <prvProcessReceivedCommands+0x1a>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    434a:	00 00       	nop
    434c:	2b 96       	adiw	r28, 0x0b	; 11
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	df 91       	pop	r29
    435a:	cf 91       	pop	r28
    435c:	1f 91       	pop	r17
    435e:	0f 91       	pop	r16
    4360:	08 95       	ret

00004362 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4362:	0f 93       	push	r16
    4364:	1f 93       	push	r17
    4366:	cf 93       	push	r28
    4368:	df 93       	push	r29
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
    436e:	29 97       	sbiw	r28, 0x09	; 9
    4370:	0f b6       	in	r0, 0x3f	; 63
    4372:	f8 94       	cli
    4374:	de bf       	out	0x3e, r29	; 62
    4376:	0f be       	out	0x3f, r0	; 63
    4378:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    437a:	68 c0       	rjmp	.+208    	; 0x444c <prvSwitchTimerLists+0xea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    437c:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    4380:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    4384:	fc 01       	movw	r30, r24
    4386:	85 81       	ldd	r24, Z+5	; 0x05
    4388:	96 81       	ldd	r25, Z+6	; 0x06
    438a:	fc 01       	movw	r30, r24
    438c:	80 81       	ld	r24, Z
    438e:	91 81       	ldd	r25, Z+1	; 0x01
    4390:	9a 83       	std	Y+2, r25	; 0x02
    4392:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4394:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    4398:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    439c:	fc 01       	movw	r30, r24
    439e:	85 81       	ldd	r24, Z+5	; 0x05
    43a0:	96 81       	ldd	r25, Z+6	; 0x06
    43a2:	fc 01       	movw	r30, r24
    43a4:	86 81       	ldd	r24, Z+6	; 0x06
    43a6:	97 81       	ldd	r25, Z+7	; 0x07
    43a8:	9c 83       	std	Y+4, r25	; 0x04
    43aa:	8b 83       	std	Y+3, r24	; 0x03
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    43ac:	8b 81       	ldd	r24, Y+3	; 0x03
    43ae:	9c 81       	ldd	r25, Y+4	; 0x04
    43b0:	02 96       	adiw	r24, 0x02	; 2
    43b2:	0e 94 4a 03 	call	0x694	; 0x694 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ba:	fc 01       	movw	r30, r24
    43bc:	20 89       	ldd	r18, Z+16	; 0x10
    43be:	31 89       	ldd	r19, Z+17	; 0x11
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	9c 81       	ldd	r25, Y+4	; 0x04
    43c4:	f9 01       	movw	r30, r18
    43c6:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    43c8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ca:	9c 81       	ldd	r25, Y+4	; 0x04
    43cc:	fc 01       	movw	r30, r24
    43ce:	83 89       	ldd	r24, Z+19	; 0x13
    43d0:	88 2f       	mov	r24, r24
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	84 70       	andi	r24, 0x04	; 4
    43d6:	99 27       	eor	r25, r25
    43d8:	89 2b       	or	r24, r25
    43da:	c1 f1       	breq	.+112    	; 0x444c <prvSwitchTimerLists+0xea>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    43dc:	8b 81       	ldd	r24, Y+3	; 0x03
    43de:	9c 81       	ldd	r25, Y+4	; 0x04
    43e0:	fc 01       	movw	r30, r24
    43e2:	24 85       	ldd	r18, Z+12	; 0x0c
    43e4:	35 85       	ldd	r19, Z+13	; 0x0d
    43e6:	89 81       	ldd	r24, Y+1	; 0x01
    43e8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ea:	82 0f       	add	r24, r18
    43ec:	93 1f       	adc	r25, r19
    43ee:	9e 83       	std	Y+6, r25	; 0x06
    43f0:	8d 83       	std	Y+5, r24	; 0x05
            if( xReloadTime > xNextExpireTime )
    43f2:	2d 81       	ldd	r18, Y+5	; 0x05
    43f4:	3e 81       	ldd	r19, Y+6	; 0x06
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	9a 81       	ldd	r25, Y+2	; 0x02
    43fa:	82 17       	cp	r24, r18
    43fc:	93 07       	cpc	r25, r19
    43fe:	d8 f4       	brcc	.+54     	; 0x4436 <prvSwitchTimerLists+0xd4>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4400:	8b 81       	ldd	r24, Y+3	; 0x03
    4402:	9c 81       	ldd	r25, Y+4	; 0x04
    4404:	2d 81       	ldd	r18, Y+5	; 0x05
    4406:	3e 81       	ldd	r19, Y+6	; 0x06
    4408:	fc 01       	movw	r30, r24
    440a:	33 83       	std	Z+3, r19	; 0x03
    440c:	22 83       	std	Z+2, r18	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    440e:	8b 81       	ldd	r24, Y+3	; 0x03
    4410:	9c 81       	ldd	r25, Y+4	; 0x04
    4412:	2b 81       	ldd	r18, Y+3	; 0x03
    4414:	3c 81       	ldd	r19, Y+4	; 0x04
    4416:	fc 01       	movw	r30, r24
    4418:	31 87       	std	Z+9, r19	; 0x09
    441a:	20 87       	std	Z+8, r18	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    441c:	8b 81       	ldd	r24, Y+3	; 0x03
    441e:	9c 81       	ldd	r25, Y+4	; 0x04
    4420:	9c 01       	movw	r18, r24
    4422:	2e 5f       	subi	r18, 0xFE	; 254
    4424:	3f 4f       	sbci	r19, 0xFF	; 255
    4426:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    442a:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    442e:	b9 01       	movw	r22, r18
    4430:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInsert>
    4434:	0b c0       	rjmp	.+22     	; 0x444c <prvSwitchTimerLists+0xea>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4436:	49 81       	ldd	r20, Y+1	; 0x01
    4438:	5a 81       	ldd	r21, Y+2	; 0x02
    443a:	8b 81       	ldd	r24, Y+3	; 0x03
    443c:	9c 81       	ldd	r25, Y+4	; 0x04
    443e:	00 e0       	ldi	r16, 0x00	; 0
    4440:	10 e0       	ldi	r17, 0x00	; 0
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	60 e0       	ldi	r22, 0x00	; 0
    4448:	a6 dc       	rcall	.-1716   	; 0x3d96 <xTimerGenericCommand>
    444a:	8f 83       	std	Y+7, r24	; 0x07

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    444c:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    4450:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    4454:	fc 01       	movw	r30, r24
    4456:	80 81       	ld	r24, Z
    4458:	88 23       	and	r24, r24
    445a:	09 f0       	breq	.+2      	; 0x445e <prvSwitchTimerLists+0xfc>
    445c:	8f cf       	rjmp	.-226    	; 0x437c <prvSwitchTimerLists+0x1a>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    445e:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <pxCurrentTimerList>
    4462:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <pxCurrentTimerList+0x1>
    4466:	99 87       	std	Y+9, r25	; 0x09
    4468:	88 87       	std	Y+8, r24	; 0x08
    pxCurrentTimerList = pxOverflowTimerList;
    446a:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <pxOverflowTimerList>
    446e:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <pxOverflowTimerList+0x1>
    4472:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <pxCurrentTimerList+0x1>
    4476:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    447a:	88 85       	ldd	r24, Y+8	; 0x08
    447c:	99 85       	ldd	r25, Y+9	; 0x09
    447e:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <pxOverflowTimerList+0x1>
    4482:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <pxOverflowTimerList>
}
    4486:	00 00       	nop
    4488:	29 96       	adiw	r28, 0x09	; 9
    448a:	0f b6       	in	r0, 0x3f	; 63
    448c:	f8 94       	cli
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	0f be       	out	0x3f, r0	; 63
    4492:	cd bf       	out	0x3d, r28	; 61
    4494:	df 91       	pop	r29
    4496:	cf 91       	pop	r28
    4498:	1f 91       	pop	r17
    449a:	0f 91       	pop	r16
    449c:	08 95       	ret

0000449e <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    449e:	cf 93       	push	r28
    44a0:	df 93       	push	r29
    44a2:	cd b7       	in	r28, 0x3d	; 61
    44a4:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    44ac:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <xTimerQueue>
    44b0:	90 91 cb 08 	lds	r25, 0x08CB	; 0x8008cb <xTimerQueue+0x1>
    44b4:	89 2b       	or	r24, r25
    44b6:	e9 f4       	brne	.+58     	; 0x44f2 <prvCheckForValidListAndQueue+0x54>
        {
            vListInitialise( &xActiveTimerList1 );
    44b8:	84 eb       	ldi	r24, 0xB4	; 180
    44ba:	98 e0       	ldi	r25, 0x08	; 8
    44bc:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    44c0:	8d eb       	ldi	r24, 0xBD	; 189
    44c2:	98 e0       	ldi	r25, 0x08	; 8
    44c4:	0e 94 3a 02 	call	0x474	; 0x474 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    44c8:	84 eb       	ldi	r24, 0xB4	; 180
    44ca:	98 e0       	ldi	r25, 0x08	; 8
    44cc:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <pxCurrentTimerList+0x1>
    44d0:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    44d4:	8d eb       	ldi	r24, 0xBD	; 189
    44d6:	98 e0       	ldi	r25, 0x08	; 8
    44d8:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <pxOverflowTimerList+0x1>
    44dc:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    44e0:	40 e0       	ldi	r20, 0x00	; 0
    44e2:	65 e0       	ldi	r22, 0x05	; 5
    44e4:	8a e0       	ldi	r24, 0x0A	; 10
    44e6:	0e 94 1b 07 	call	0xe36	; 0xe36 <xQueueGenericCreate>
    44ea:	90 93 cb 08 	sts	0x08CB, r25	; 0x8008cb <xTimerQueue+0x1>
    44ee:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    44f2:	0f 90       	pop	r0
    44f4:	0f be       	out	0x3f, r0	; 63
}
    44f6:	00 00       	nop
    44f8:	df 91       	pop	r29
    44fa:	cf 91       	pop	r28
    44fc:	08 95       	ret

000044fe <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    44fe:	cf 93       	push	r28
    4500:	df 93       	push	r29
    4502:	cd b7       	in	r28, 0x3d	; 61
    4504:	de b7       	in	r29, 0x3e	; 62
//     if (serialEventRun) serialEventRun();
}
    4506:	00 00       	nop
    4508:	df 91       	pop	r29
    450a:	cf 91       	pop	r28
    450c:	08 95       	ret

0000450e <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    450e:	cf 93       	push	r28
    4510:	df 93       	push	r29
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
    4516:	2e 97       	sbiw	r28, 0x0e	; 14
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	f8 94       	cli
    451c:	de bf       	out	0x3e, r29	; 62
    451e:	0f be       	out	0x3f, r0	; 63
    4520:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4522:	84 e2       	ldi	r24, 0x24	; 36
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	24 e2       	ldi	r18, 0x24	; 36
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	f9 01       	movw	r30, r18
    452c:	20 81       	ld	r18, Z
    452e:	20 68       	ori	r18, 0x80	; 128
    4530:	fc 01       	movw	r30, r24
    4532:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4534:	85 e2       	ldi	r24, 0x25	; 37
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	25 e2       	ldi	r18, 0x25	; 37
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	f9 01       	movw	r30, r18
    453e:	20 81       	ld	r18, Z
    4540:	20 68       	ori	r18, 0x80	; 128
    4542:	fc 01       	movw	r30, r24
    4544:	20 83       	st	Z, r18
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	a8 e4       	ldi	r26, 0x48	; 72
    454c:	b2 e4       	ldi	r27, 0x42	; 66
    454e:	89 83       	std	Y+1, r24	; 0x01
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	ab 83       	std	Y+3, r26	; 0x03
    4554:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	4a e7       	ldi	r20, 0x7A	; 122
    455c:	55 e4       	ldi	r21, 0x45	; 69
    455e:	69 81       	ldd	r22, Y+1	; 0x01
    4560:	7a 81       	ldd	r23, Y+2	; 0x02
    4562:	8b 81       	ldd	r24, Y+3	; 0x03
    4564:	9c 81       	ldd	r25, Y+4	; 0x04
    4566:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__mulsf3>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	8d 83       	std	Y+5, r24	; 0x05
    4570:	9e 83       	std	Y+6, r25	; 0x06
    4572:	af 83       	std	Y+7, r26	; 0x07
    4574:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	40 e8       	ldi	r20, 0x80	; 128
    457c:	5f e3       	ldi	r21, 0x3F	; 63
    457e:	6d 81       	ldd	r22, Y+5	; 0x05
    4580:	7e 81       	ldd	r23, Y+6	; 0x06
    4582:	8f 81       	ldd	r24, Y+7	; 0x07
    4584:	98 85       	ldd	r25, Y+8	; 0x08
    4586:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__cmpsf2>
    458a:	88 23       	and	r24, r24
    458c:	2c f4       	brge	.+10     	; 0x4598 <vApplicationMallocFailedHook+0x8a>
		__ticks = 1;
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	9a 87       	std	Y+10, r25	; 0x0a
    4594:	89 87       	std	Y+9, r24	; 0x09
    4596:	3f c0       	rjmp	.+126    	; 0x4616 <vApplicationMallocFailedHook+0x108>
	else if (__tmp > 65535)
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	3f ef       	ldi	r19, 0xFF	; 255
    459c:	4f e7       	ldi	r20, 0x7F	; 127
    459e:	57 e4       	ldi	r21, 0x47	; 71
    45a0:	6d 81       	ldd	r22, Y+5	; 0x05
    45a2:	7e 81       	ldd	r23, Y+6	; 0x06
    45a4:	8f 81       	ldd	r24, Y+7	; 0x07
    45a6:	98 85       	ldd	r25, Y+8	; 0x08
    45a8:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__gesf2>
    45ac:	18 16       	cp	r1, r24
    45ae:	4c f5       	brge	.+82     	; 0x4602 <vApplicationMallocFailedHook+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	40 e2       	ldi	r20, 0x20	; 32
    45b6:	51 e4       	ldi	r21, 0x41	; 65
    45b8:	69 81       	ldd	r22, Y+1	; 0x01
    45ba:	7a 81       	ldd	r23, Y+2	; 0x02
    45bc:	8b 81       	ldd	r24, Y+3	; 0x03
    45be:	9c 81       	ldd	r25, Y+4	; 0x04
    45c0:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__mulsf3>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	bc 01       	movw	r22, r24
    45ca:	cd 01       	movw	r24, r26
    45cc:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__fixunssfsi>
    45d0:	dc 01       	movw	r26, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	9a 87       	std	Y+10, r25	; 0x0a
    45d6:	89 87       	std	Y+9, r24	; 0x09
    45d8:	0f c0       	rjmp	.+30     	; 0x45f8 <vApplicationMallocFailedHook+0xea>
    45da:	80 e9       	ldi	r24, 0x90	; 144
    45dc:	91 e0       	ldi	r25, 0x01	; 1
    45de:	9c 87       	std	Y+12, r25	; 0x0c
    45e0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    45e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    45e6:	01 97       	sbiw	r24, 0x01	; 1
    45e8:	f1 f7       	brne	.-4      	; 0x45e6 <vApplicationMallocFailedHook+0xd8>
    45ea:	9c 87       	std	Y+12, r25	; 0x0c
    45ec:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ee:	89 85       	ldd	r24, Y+9	; 0x09
    45f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f2:	01 97       	sbiw	r24, 0x01	; 1
    45f4:	9a 87       	std	Y+10, r25	; 0x0a
    45f6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45f8:	89 85       	ldd	r24, Y+9	; 0x09
    45fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    45fc:	89 2b       	or	r24, r25
    45fe:	69 f7       	brne	.-38     	; 0x45da <vApplicationMallocFailedHook+0xcc>
    4600:	14 c0       	rjmp	.+40     	; 0x462a <vApplicationMallocFailedHook+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4602:	6d 81       	ldd	r22, Y+5	; 0x05
    4604:	7e 81       	ldd	r23, Y+6	; 0x06
    4606:	8f 81       	ldd	r24, Y+7	; 0x07
    4608:	98 85       	ldd	r25, Y+8	; 0x08
    460a:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__fixunssfsi>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	9a 87       	std	Y+10, r25	; 0x0a
    4614:	89 87       	std	Y+9, r24	; 0x09
    4616:	89 85       	ldd	r24, Y+9	; 0x09
    4618:	9a 85       	ldd	r25, Y+10	; 0x0a
    461a:	9e 87       	std	Y+14, r25	; 0x0e
    461c:	8d 87       	std	Y+13, r24	; 0x0d
    461e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4620:	9e 85       	ldd	r25, Y+14	; 0x0e
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	f1 f7       	brne	.-4      	; 0x4622 <vApplicationMallocFailedHook+0x114>
    4626:	9e 87       	std	Y+14, r25	; 0x0e
    4628:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    462a:	83 e2       	ldi	r24, 0x23	; 35
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	23 e2       	ldi	r18, 0x23	; 35
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	f9 01       	movw	r30, r18
    4634:	20 81       	ld	r18, Z
    4636:	20 68       	ori	r18, 0x80	; 128
    4638:	fc 01       	movw	r30, r24
    463a:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED fast blink.

#endif

    }
    463c:	84 cf       	rjmp	.-248    	; 0x4546 <vApplicationMallocFailedHook+0x38>

0000463e <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    463e:	cf 93       	push	r28
    4640:	df 93       	push	r29
    4642:	cd b7       	in	r28, 0x3d	; 61
    4644:	de b7       	in	r29, 0x3e	; 62
    4646:	62 97       	sbiw	r28, 0x12	; 18
    4648:	0f b6       	in	r0, 0x3f	; 63
    464a:	f8 94       	cli
    464c:	de bf       	out	0x3e, r29	; 62
    464e:	0f be       	out	0x3f, r0	; 63
    4650:	cd bf       	out	0x3d, r28	; 61
    4652:	98 8b       	std	Y+16, r25	; 0x10
    4654:	8f 87       	std	Y+15, r24	; 0x0f
    4656:	7a 8b       	std	Y+18, r23	; 0x12
    4658:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    465a:	84 e2       	ldi	r24, 0x24	; 36
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	24 e2       	ldi	r18, 0x24	; 36
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	f9 01       	movw	r30, r18
    4664:	20 81       	ld	r18, Z
    4666:	20 68       	ori	r18, 0x80	; 128
    4668:	fc 01       	movw	r30, r24
    466a:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    466c:	85 e2       	ldi	r24, 0x25	; 37
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	25 e2       	ldi	r18, 0x25	; 37
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	f9 01       	movw	r30, r18
    4676:	20 81       	ld	r18, Z
    4678:	20 68       	ori	r18, 0x80	; 128
    467a:	fc 01       	movw	r30, r24
    467c:	20 83       	st	Z, r18
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	aa ef       	ldi	r26, 0xFA	; 250
    4684:	b4 e4       	ldi	r27, 0x44	; 68
    4686:	89 83       	std	Y+1, r24	; 0x01
    4688:	9a 83       	std	Y+2, r25	; 0x02
    468a:	ab 83       	std	Y+3, r26	; 0x03
    468c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	4a e7       	ldi	r20, 0x7A	; 122
    4694:	55 e4       	ldi	r21, 0x45	; 69
    4696:	69 81       	ldd	r22, Y+1	; 0x01
    4698:	7a 81       	ldd	r23, Y+2	; 0x02
    469a:	8b 81       	ldd	r24, Y+3	; 0x03
    469c:	9c 81       	ldd	r25, Y+4	; 0x04
    469e:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__mulsf3>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	8d 83       	std	Y+5, r24	; 0x05
    46a8:	9e 83       	std	Y+6, r25	; 0x06
    46aa:	af 83       	std	Y+7, r26	; 0x07
    46ac:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	40 e8       	ldi	r20, 0x80	; 128
    46b4:	5f e3       	ldi	r21, 0x3F	; 63
    46b6:	6d 81       	ldd	r22, Y+5	; 0x05
    46b8:	7e 81       	ldd	r23, Y+6	; 0x06
    46ba:	8f 81       	ldd	r24, Y+7	; 0x07
    46bc:	98 85       	ldd	r25, Y+8	; 0x08
    46be:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <__cmpsf2>
    46c2:	88 23       	and	r24, r24
    46c4:	2c f4       	brge	.+10     	; 0x46d0 <vApplicationStackOverflowHook+0x92>
		__ticks = 1;
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	9a 87       	std	Y+10, r25	; 0x0a
    46cc:	89 87       	std	Y+9, r24	; 0x09
    46ce:	3f c0       	rjmp	.+126    	; 0x474e <vApplicationStackOverflowHook+0x110>
	else if (__tmp > 65535)
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	3f ef       	ldi	r19, 0xFF	; 255
    46d4:	4f e7       	ldi	r20, 0x7F	; 127
    46d6:	57 e4       	ldi	r21, 0x47	; 71
    46d8:	6d 81       	ldd	r22, Y+5	; 0x05
    46da:	7e 81       	ldd	r23, Y+6	; 0x06
    46dc:	8f 81       	ldd	r24, Y+7	; 0x07
    46de:	98 85       	ldd	r25, Y+8	; 0x08
    46e0:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__gesf2>
    46e4:	18 16       	cp	r1, r24
    46e6:	4c f5       	brge	.+82     	; 0x473a <vApplicationStackOverflowHook+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e8:	20 e0       	ldi	r18, 0x00	; 0
    46ea:	30 e0       	ldi	r19, 0x00	; 0
    46ec:	40 e2       	ldi	r20, 0x20	; 32
    46ee:	51 e4       	ldi	r21, 0x41	; 65
    46f0:	69 81       	ldd	r22, Y+1	; 0x01
    46f2:	7a 81       	ldd	r23, Y+2	; 0x02
    46f4:	8b 81       	ldd	r24, Y+3	; 0x03
    46f6:	9c 81       	ldd	r25, Y+4	; 0x04
    46f8:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__mulsf3>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	bc 01       	movw	r22, r24
    4702:	cd 01       	movw	r24, r26
    4704:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__fixunssfsi>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	9a 87       	std	Y+10, r25	; 0x0a
    470e:	89 87       	std	Y+9, r24	; 0x09
    4710:	0f c0       	rjmp	.+30     	; 0x4730 <vApplicationStackOverflowHook+0xf2>
    4712:	80 e9       	ldi	r24, 0x90	; 144
    4714:	91 e0       	ldi	r25, 0x01	; 1
    4716:	9c 87       	std	Y+12, r25	; 0x0c
    4718:	8b 87       	std	Y+11, r24	; 0x0b
    471a:	8b 85       	ldd	r24, Y+11	; 0x0b
    471c:	9c 85       	ldd	r25, Y+12	; 0x0c
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <vApplicationStackOverflowHook+0xe0>
    4722:	9c 87       	std	Y+12, r25	; 0x0c
    4724:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4726:	89 85       	ldd	r24, Y+9	; 0x09
    4728:	9a 85       	ldd	r25, Y+10	; 0x0a
    472a:	01 97       	sbiw	r24, 0x01	; 1
    472c:	9a 87       	std	Y+10, r25	; 0x0a
    472e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4730:	89 85       	ldd	r24, Y+9	; 0x09
    4732:	9a 85       	ldd	r25, Y+10	; 0x0a
    4734:	89 2b       	or	r24, r25
    4736:	69 f7       	brne	.-38     	; 0x4712 <vApplicationStackOverflowHook+0xd4>
    4738:	14 c0       	rjmp	.+40     	; 0x4762 <vApplicationStackOverflowHook+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473a:	6d 81       	ldd	r22, Y+5	; 0x05
    473c:	7e 81       	ldd	r23, Y+6	; 0x06
    473e:	8f 81       	ldd	r24, Y+7	; 0x07
    4740:	98 85       	ldd	r25, Y+8	; 0x08
    4742:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__fixunssfsi>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	9a 87       	std	Y+10, r25	; 0x0a
    474c:	89 87       	std	Y+9, r24	; 0x09
    474e:	89 85       	ldd	r24, Y+9	; 0x09
    4750:	9a 85       	ldd	r25, Y+10	; 0x0a
    4752:	9e 87       	std	Y+14, r25	; 0x0e
    4754:	8d 87       	std	Y+13, r24	; 0x0d
    4756:	8d 85       	ldd	r24, Y+13	; 0x0d
    4758:	9e 85       	ldd	r25, Y+14	; 0x0e
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	f1 f7       	brne	.-4      	; 0x475a <vApplicationStackOverflowHook+0x11c>
    475e:	9e 87       	std	Y+14, r25	; 0x0e
    4760:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    4762:	83 e2       	ldi	r24, 0x23	; 35
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	23 e2       	ldi	r18, 0x23	; 35
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	f9 01       	movw	r30, r18
    476c:	20 81       	ld	r18, Z
    476e:	20 68       	ori	r18, 0x80	; 128
    4770:	fc 01       	movw	r30, r24
    4772:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

    }
    4774:	84 cf       	rjmp	.-248    	; 0x467e <vApplicationStackOverflowHook+0x40>

00004776 <m_print>:
 *  Author: drags
 */ 
#include "Headers/m_lora_includes.h"

void m_print(char message[], SemaphoreHandle_t pxSemaphore)
{
    4776:	cf 93       	push	r28
    4778:	df 93       	push	r29
    477a:	00 d0       	rcall	.+0      	; 0x477c <m_print+0x6>
    477c:	1f 92       	push	r1
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	9a 83       	std	Y+2, r25	; 0x02
    4784:	89 83       	std	Y+1, r24	; 0x01
    4786:	7c 83       	std	Y+4, r23	; 0x04
    4788:	6b 83       	std	Y+3, r22	; 0x03
	xSemaphoreTake(pxSemaphore, portMAX_DELAY);
    478a:	8b 81       	ldd	r24, Y+3	; 0x03
    478c:	9c 81       	ldd	r25, Y+4	; 0x04
    478e:	6f ef       	ldi	r22, 0xFF	; 255
    4790:	7f ef       	ldi	r23, 0xFF	; 255
    4792:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
	printf("%s\n",message);
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	0e 94 50 38 	call	0x70a0	; 0x70a0 <puts>
	xSemaphoreGive(pxSemaphore);
    479e:	8b 81       	ldd	r24, Y+3	; 0x03
    47a0:	9c 81       	ldd	r25, Y+4	; 0x04
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	40 e0       	ldi	r20, 0x00	; 0
    47a6:	50 e0       	ldi	r21, 0x00	; 0
    47a8:	60 e0       	ldi	r22, 0x00	; 0
    47aa:	70 e0       	ldi	r23, 0x00	; 0
    47ac:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericSend>
    47b0:	00 00       	nop
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	08 95       	ret

000047c0 <create_all_tasks>:
/*
	This method creates all the tasks
*/

void create_all_tasks(UBaseType_t lora_handler_task_priority)
{
    47c0:	ef 92       	push	r14
    47c2:	ff 92       	push	r15
    47c4:	0f 93       	push	r16
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	1f 92       	push	r1
    47cc:	cd b7       	in	r28, 0x3d	; 61
    47ce:	de b7       	in	r29, 0x3e	; 62
    47d0:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
    47d2:	e1 2c       	mov	r14, r1
    47d4:	f1 2c       	mov	r15, r1
    47d6:	09 81       	ldd	r16, Y+1	; 0x01
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	48 e8       	ldi	r20, 0x88	; 136
    47de:	51 e0       	ldi	r21, 0x01	; 1
    47e0:	6d e4       	ldi	r22, 0x4D	; 77
    47e2:	72 e0       	ldi	r23, 0x02	; 2
    47e4:	87 ed       	ldi	r24, 0xD7	; 215
    47e6:	95 e2       	ldi	r25, 0x25	; 37
    47e8:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    47ec:	e1 2c       	mov	r14, r1
    47ee:	f1 2c       	mov	r15, r1
    47f0:	00 e0       	ldi	r16, 0x00	; 0
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	40 ec       	ldi	r20, 0xC0	; 192
    47f8:	50 e0       	ldi	r21, 0x00	; 0
    47fa:	64 e5       	ldi	r22, 0x54	; 84
    47fc:	72 e0       	ldi	r23, 0x02	; 2
    47fe:	81 e8       	ldi	r24, 0x81	; 129
    4800:	96 e2       	ldi	r25, 0x26	; 38
    4802:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY 
	, NULL );
	
	xTaskCreate(
    4806:	e1 2c       	mov	r14, r1
    4808:	f1 2c       	mov	r15, r1
    480a:	00 e0       	ldi	r16, 0x00	; 0
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	40 ec       	ldi	r20, 0xC0	; 192
    4812:	50 e0       	ldi	r21, 0x00	; 0
    4814:	66 e6       	ldi	r22, 0x66	; 102
    4816:	72 e0       	ldi	r23, 0x02	; 2
    4818:	84 e6       	ldi	r24, 0x64	; 100
    481a:	96 e2       	ldi	r25, 0x26	; 38
    481c:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
	
	xTaskCreate(
    4820:	e1 2c       	mov	r14, r1
    4822:	f1 2c       	mov	r15, r1
    4824:	00 e0       	ldi	r16, 0x00	; 0
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	40 ec       	ldi	r20, 0xC0	; 192
    482c:	50 e0       	ldi	r21, 0x00	; 0
    482e:	67 e7       	ldi	r22, 0x77	; 119
    4830:	72 e0       	ldi	r23, 0x02	; 2
    4832:	8b ef       	ldi	r24, 0xFB	; 251
    4834:	96 e2       	ldi	r25, 0x26	; 38
    4836:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskCreate>
	, "Print Measurements Task"
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
}
    483a:	00 00       	nop
    483c:	0f 90       	pop	r0
    483e:	df 91       	pop	r29
    4840:	cf 91       	pop	r28
    4842:	0f 91       	pop	r16
    4844:	ff 90       	pop	r15
    4846:	ef 90       	pop	r14
    4848:	08 95       	ret

0000484a <create_all_timers>:
TimerHandle_t xTimer_measure_co2;
TimerHandle_t xTimer_read_measurements;
TimerHandle_t xTimer_send_data;

void create_all_timers()
{
    484a:	0f 93       	push	r16
    484c:	1f 93       	push	r17
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62

	xTimer_measure_temp = xTimerCreate("Temperature Measure Timer",
    4856:	0b e9       	ldi	r16, 0x9B	; 155
    4858:	11 e0       	ldi	r17, 0x01	; 1
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	41 e0       	ldi	r20, 0x01	; 1
    4860:	6e e3       	ldi	r22, 0x3E	; 62
    4862:	70 e0       	ldi	r23, 0x00	; 0
    4864:	8f e8       	ldi	r24, 0x8F	; 143
    4866:	92 e0       	ldi	r25, 0x02	; 2
    4868:	fa d9       	rcall	.-3084   	; 0x3c5e <xTimerCreate>
    486a:	90 93 ab 0a 	sts	0x0AAB, r25	; 0x800aab <xTimer_measure_temp+0x1>
    486e:	80 93 aa 0a 	sts	0x0AAA, r24	; 0x800aaa <xTimer_measure_temp>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 0,
			measure_temp_timer_callback);
	
	xTimer_measure_co2 = xTimerCreate("CO2 Measure Timer",
    4872:	0b e6       	ldi	r16, 0x6B	; 107
    4874:	11 e0       	ldi	r17, 0x01	; 1
    4876:	21 e0       	ldi	r18, 0x01	; 1
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	41 e0       	ldi	r20, 0x01	; 1
    487c:	6e e3       	ldi	r22, 0x3E	; 62
    487e:	70 e0       	ldi	r23, 0x00	; 0
    4880:	89 ea       	ldi	r24, 0xA9	; 169
    4882:	92 e0       	ldi	r25, 0x02	; 2
    4884:	ec d9       	rcall	.-3112   	; 0x3c5e <xTimerCreate>
    4886:	90 93 a7 0a 	sts	0x0AA7, r25	; 0x800aa7 <xTimer_measure_co2+0x1>
    488a:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <xTimer_measure_co2>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 1,
			measure_co2_timer_callback);
				
	xTimer_read_measurements = xTimerCreate("Measurements Read Timer",
    488e:	03 e8       	ldi	r16, 0x83	; 131
    4890:	11 e0       	ldi	r17, 0x01	; 1
    4892:	22 e0       	ldi	r18, 0x02	; 2
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	41 e0       	ldi	r20, 0x01	; 1
    4898:	6e e3       	ldi	r22, 0x3E	; 62
    489a:	70 e0       	ldi	r23, 0x00	; 0
    489c:	8b eb       	ldi	r24, 0xBB	; 187
    489e:	92 e0       	ldi	r25, 0x02	; 2
    48a0:	de d9       	rcall	.-3140   	; 0x3c5e <xTimerCreate>
    48a2:	90 93 a9 0a 	sts	0x0AA9, r25	; 0x800aa9 <xTimer_read_measurements+0x1>
    48a6:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <xTimer_read_measurements>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 2,
			print_measurements_timer_callback);
			
	xTimer_send_data = xTimerCreate("Data Sending Timer",
    48aa:	03 eb       	ldi	r16, 0xB3	; 179
    48ac:	11 e0       	ldi	r17, 0x01	; 1
    48ae:	23 e0       	ldi	r18, 0x03	; 3
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	41 e0       	ldi	r20, 0x01	; 1
    48b4:	6e e3       	ldi	r22, 0x3E	; 62
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	83 ed       	ldi	r24, 0xD3	; 211
    48ba:	92 e0       	ldi	r25, 0x02	; 2
    48bc:	d0 d9       	rcall	.-3168   	; 0x3c5e <xTimerCreate>
    48be:	90 93 a5 0a 	sts	0x0AA5, r25	; 0x800aa5 <xTimer_send_data+0x1>
    48c2:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <xTimer_send_data>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void *)3,
			send_data_timer_callback);		
    48c6:	00 00       	nop
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	1f 91       	pop	r17
    48ce:	0f 91       	pop	r16
    48d0:	08 95       	ret

000048d2 <lora_setup>:
#include "../Headers/m_lora_includes.h"

static char _out_buf[100];

void lora_setup(void)
{
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
    48d6:	1f 92       	push	r1
    48d8:	1f 92       	push	r1
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    48e4:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <lora_driver_rn2483_factory_reset>
    48e8:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    48ec:	29 2f       	mov	r18, r25
    48ee:	2f 93       	push	r18
    48f0:	8f 93       	push	r24
    48f2:	86 ee       	ldi	r24, 0xE6	; 230
    48f4:	92 e0       	ldi	r25, 0x02	; 2
    48f6:	89 2f       	mov	r24, r25
    48f8:	8f 93       	push	r24
    48fa:	86 ee       	ldi	r24, 0xE6	; 230
    48fc:	92 e0       	ldi	r25, 0x02	; 2
    48fe:	8f 93       	push	r24
    4900:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4904:	0f 90       	pop	r0
    4906:	0f 90       	pop	r0
    4908:	0f 90       	pop	r0
    490a:	0f 90       	pop	r0
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    490c:	0e 94 5e 30 	call	0x60bc	; 0x60bc <lora_driver_configure_to_eu868>
    4910:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    4914:	29 2f       	mov	r18, r25
    4916:	2f 93       	push	r18
    4918:	8f 93       	push	r24
    491a:	89 ef       	ldi	r24, 0xF9	; 249
    491c:	92 e0       	ldi	r25, 0x02	; 2
    491e:	89 2f       	mov	r24, r25
    4920:	8f 93       	push	r24
    4922:	89 ef       	ldi	r24, 0xF9	; 249
    4924:	92 e0       	ldi	r25, 0x02	; 2
    4926:	8f 93       	push	r24
    4928:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    4934:	80 ed       	ldi	r24, 0xD0	; 208
    4936:	98 e0       	ldi	r25, 0x08	; 8
    4938:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <lora_driver_get_rn2483_hweui>
    493c:	8a 83       	std	Y+2, r24	; 0x02
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    493e:	8a 81       	ldd	r24, Y+2	; 0x02
    4940:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    4944:	9c 01       	movw	r18, r24
    4946:	80 ed       	ldi	r24, 0xD0	; 208
    4948:	98 e0       	ldi	r25, 0x08	; 8
    494a:	89 2f       	mov	r24, r25
    494c:	8f 93       	push	r24
    494e:	80 ed       	ldi	r24, 0xD0	; 208
    4950:	98 e0       	ldi	r25, 0x08	; 8
    4952:	8f 93       	push	r24
    4954:	83 2f       	mov	r24, r19
    4956:	8f 93       	push	r24
    4958:	82 2f       	mov	r24, r18
    495a:	8f 93       	push	r24
    495c:	82 e1       	ldi	r24, 0x12	; 18
    495e:	93 e0       	ldi	r25, 0x03	; 3
    4960:	89 2f       	mov	r24, r25
    4962:	8f 93       	push	r24
    4964:	82 e1       	ldi	r24, 0x12	; 18
    4966:	93 e0       	ldi	r25, 0x03	; 3
    4968:	8f 93       	push	r24
    496a:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	0f 90       	pop	r0
    4976:	0f 90       	pop	r0
    4978:	0f 90       	pop	r0

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    497a:	80 ed       	ldi	r24, 0xD0	; 208
    497c:	98 e0       	ldi	r25, 0x08	; 8
    497e:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <lora_driver_set_device_identifier>
    4982:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    4986:	29 2f       	mov	r18, r25
    4988:	2f 93       	push	r18
    498a:	8f 93       	push	r24
    498c:	80 ed       	ldi	r24, 0xD0	; 208
    498e:	98 e0       	ldi	r25, 0x08	; 8
    4990:	89 2f       	mov	r24, r25
    4992:	8f 93       	push	r24
    4994:	80 ed       	ldi	r24, 0xD0	; 208
    4996:	98 e0       	ldi	r25, 0x08	; 8
    4998:	8f 93       	push	r24
    499a:	86 e2       	ldi	r24, 0x26	; 38
    499c:	93 e0       	ldi	r25, 0x03	; 3
    499e:	89 2f       	mov	r24, r25
    49a0:	8f 93       	push	r24
    49a2:	86 e2       	ldi	r24, 0x26	; 38
    49a4:	93 e0       	ldi	r25, 0x03	; 3
    49a6:	8f 93       	push	r24
    49a8:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	0f 90       	pop	r0

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    49b8:	40 ed       	ldi	r20, 0xD0	; 208
    49ba:	58 e0       	ldi	r21, 0x08	; 8
    49bc:	6b e3       	ldi	r22, 0x3B	; 59
    49be:	73 e0       	ldi	r23, 0x03	; 3
    49c0:	8c e5       	ldi	r24, 0x5C	; 92
    49c2:	93 e0       	ldi	r25, 0x03	; 3
    49c4:	0e 94 38 31 	call	0x6270	; 0x6270 <lora_driver_set_otaa_identity>
    49c8:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    49cc:	29 2f       	mov	r18, r25
    49ce:	2f 93       	push	r18
    49d0:	8f 93       	push	r24
    49d2:	80 ed       	ldi	r24, 0xD0	; 208
    49d4:	98 e0       	ldi	r25, 0x08	; 8
    49d6:	89 2f       	mov	r24, r25
    49d8:	8f 93       	push	r24
    49da:	80 ed       	ldi	r24, 0xD0	; 208
    49dc:	98 e0       	ldi	r25, 0x08	; 8
    49de:	8f 93       	push	r24
    49e0:	8b e3       	ldi	r24, 0x3B	; 59
    49e2:	93 e0       	ldi	r25, 0x03	; 3
    49e4:	89 2f       	mov	r24, r25
    49e6:	8f 93       	push	r24
    49e8:	8b e3       	ldi	r24, 0x3B	; 59
    49ea:	93 e0       	ldi	r25, 0x03	; 3
    49ec:	8f 93       	push	r24
    49ee:	8c e5       	ldi	r24, 0x5C	; 92
    49f0:	93 e0       	ldi	r25, 0x03	; 3
    49f2:	89 2f       	mov	r24, r25
    49f4:	8f 93       	push	r24
    49f6:	8c e5       	ldi	r24, 0x5C	; 92
    49f8:	93 e0       	ldi	r25, 0x03	; 3
    49fa:	8f 93       	push	r24
    49fc:	8d e6       	ldi	r24, 0x6D	; 109
    49fe:	93 e0       	ldi	r25, 0x03	; 3
    4a00:	89 2f       	mov	r24, r25
    4a02:	8f 93       	push	r24
    4a04:	8d e6       	ldi	r24, 0x6D	; 109
    4a06:	93 e0       	ldi	r25, 0x03	; 3
    4a08:	8f 93       	push	r24
    4a0a:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4a0e:	8d b7       	in	r24, 0x3d	; 61
    4a10:	9e b7       	in	r25, 0x3e	; 62
    4a12:	0a 96       	adiw	r24, 0x0a	; 10
    4a14:	0f b6       	in	r0, 0x3f	; 63
    4a16:	f8 94       	cli
    4a18:	de bf       	out	0x3e, r29	; 62
    4a1a:	0f be       	out	0x3f, r0	; 63
    4a1c:	cd bf       	out	0x3d, r28	; 61

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    4a1e:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <lora_driver_save_mac>
    4a22:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    4a26:	29 2f       	mov	r18, r25
    4a28:	2f 93       	push	r18
    4a2a:	8f 93       	push	r24
    4a2c:	83 ea       	ldi	r24, 0xA3	; 163
    4a2e:	93 e0       	ldi	r25, 0x03	; 3
    4a30:	89 2f       	mov	r24, r25
    4a32:	8f 93       	push	r24
    4a34:	83 ea       	ldi	r24, 0xA3	; 163
    4a36:	93 e0       	ldi	r25, 0x03	; 3
    4a38:	8f 93       	push	r24
    4a3a:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	0e 94 53 30 	call	0x60a6	; 0x60a6 <lora_driver_set_adaptive_data_rate>
    4a4c:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    4a50:	29 2f       	mov	r18, r25
    4a52:	2f 93       	push	r18
    4a54:	8f 93       	push	r24
    4a56:	82 eb       	ldi	r24, 0xB2	; 178
    4a58:	93 e0       	ldi	r25, 0x03	; 3
    4a5a:	89 2f       	mov	r24, r25
    4a5c:	8f 93       	push	r24
    4a5e:	82 eb       	ldi	r24, 0xB2	; 178
    4a60:	93 e0       	ldi	r25, 0x03	; 3
    4a62:	8f 93       	push	r24
    4a64:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4a68:	0f 90       	pop	r0
    4a6a:	0f 90       	pop	r0
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
    4a70:	85 e0       	ldi	r24, 0x05	; 5
    4a72:	89 83       	std	Y+1, r24	; 0x01
	do {
		rc = lora_driver_join(LoRa_OTAA);
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <lora_driver_join>
    4a7a:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network Tries Left:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    4a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7e:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    4a82:	9c 01       	movw	r18, r24
    4a84:	89 81       	ldd	r24, Y+1	; 0x01
    4a86:	88 2f       	mov	r24, r24
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	43 2f       	mov	r20, r19
    4a8c:	4f 93       	push	r20
    4a8e:	2f 93       	push	r18
    4a90:	29 2f       	mov	r18, r25
    4a92:	2f 93       	push	r18
    4a94:	8f 93       	push	r24
    4a96:	83 ed       	ldi	r24, 0xD3	; 211
    4a98:	93 e0       	ldi	r25, 0x03	; 3
    4a9a:	89 2f       	mov	r24, r25
    4a9c:	8f 93       	push	r24
    4a9e:	83 ed       	ldi	r24, 0xD3	; 211
    4aa0:	93 e0       	ldi	r25, 0x03	; 3
    4aa2:	8f 93       	push	r24
    4aa4:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	0f 90       	pop	r0
    4ab0:	0f 90       	pop	r0
    4ab2:	0f 90       	pop	r0

		if ( rc != LoRa_ACCEPTED)
    4ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab6:	88 30       	cpi	r24, 0x08	; 8
    4ab8:	71 f0       	breq	.+28     	; 0x4ad6 <lora_setup+0x204>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
    4aba:	80 e0       	ldi	r24, 0x00	; 0
    4abc:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4ac0:	8f e2       	ldi	r24, 0x2F	; 47
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4ac8:	89 81       	ldd	r24, Y+1	; 0x01
    4aca:	81 50       	subi	r24, 0x01	; 1
    4acc:	89 83       	std	Y+1, r24	; 0x01
    4ace:	89 81       	ldd	r24, Y+1	; 0x01
    4ad0:	88 23       	and	r24, r24
    4ad2:	81 f6       	brne	.-96     	; 0x4a74 <lora_setup+0x1a2>
    4ad4:	01 c0       	rjmp	.+2      	; 0x4ad8 <lora_setup+0x206>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
    4ad6:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LoRa_ACCEPTED)
    4ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    4ada:	88 30       	cpi	r24, 0x08	; 8
    4adc:	21 f4       	brne	.+8      	; 0x4ae6 <lora_setup+0x214>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <led_led_on>
		while (1)
		{
			taskYIELD();
		}
	}
    4ae4:	09 c0       	rjmp	.+18     	; 0x4af8 <lora_setup+0x226>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <led_fast_blink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4af2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
		}
    4af6:	fd cf       	rjmp	.-6      	; 0x4af2 <lora_setup+0x220>
	}
    4af8:	0f 90       	pop	r0
    4afa:	0f 90       	pop	r0
    4afc:	df 91       	pop	r29
    4afe:	cf 91       	pop	r28
    4b00:	08 95       	ret

00004b02 <global_init>:

SemaphoreHandle_t xSemaphore;
SemaphoreHandle_t xSemaphore_print;

void global_init()
{
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
	stdioCreate(0);
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	31 d2       	rcall	.+1122   	; 0x4f70 <stdioCreate>
	
	sei(); // enables interrupts
    4b0e:	78 94       	sei
	
	xSemaphore = xSemaphoreCreateMutex();
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	0e 94 d5 07 	call	0xfaa	; 0xfaa <xQueueCreateMutex>
    4b16:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <xSemaphore+0x1>
    4b1a:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <xSemaphore>
	xSemaphore_print = xSemaphoreCreateBinary();
    4b1e:	43 e0       	ldi	r20, 0x03	; 3
    4b20:	60 e0       	ldi	r22, 0x00	; 0
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	0e 94 1b 07 	call	0xe36	; 0xe36 <xQueueGenericCreate>
    4b28:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <xSemaphore_print+0x1>
    4b2c:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <xSemaphore_print>
	
	xSemaphoreGive(xSemaphore_print);
    4b30:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4b34:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	40 e0       	ldi	r20, 0x00	; 0
    4b3c:	50 e0       	ldi	r21, 0x00	; 0
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericSend>
	
	xMessageBuffer = xMessageBufferCreate( sizeof (m_data) * 3);
    4b46:	41 e0       	ldi	r20, 0x01	; 1
    4b48:	60 e0       	ldi	r22, 0x00	; 0
    4b4a:	70 e0       	ldi	r23, 0x00	; 0
    4b4c:	8c e0       	ldi	r24, 0x0C	; 12
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 94 a4 0c 	call	0x1948	; 0x1948 <xStreamBufferGenericCreate>
    4b54:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <xMessageBuffer+0x1>
    4b58:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <xMessageBuffer>
		
	/*
		Initialize LoRa Driver
	*/

	hal_create(LED_TASK_PRIORITY);
    4b5c:	80 e0       	ldi	r24, 0x00	; 0
    4b5e:	d9 d5       	rcall	.+2994   	; 0x5712 <hal_create>
	lora_driver_create(ser_USART1);
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <lora_driver_create>
	m_print("LoRa driver created.\n",xSemaphore_print);
    4b66:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4b6a:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4b6e:	bc 01       	movw	r22, r24
    4b70:	84 ef       	ldi	r24, 0xF4	; 244
    4b72:	93 e0       	ldi	r25, 0x03	; 3
	
	/*
		Initialize the Temperature Driver
	*/
	if ( HIH8120_OK == hih8120Create() )
    4b74:	00 de       	rcall	.-1024   	; 0x4776 <m_print>
    4b76:	2c d6       	rcall	.+3160   	; 0x57d0 <hih8120Create>
    4b78:	88 23       	and	r24, r24
    4b7a:	41 f4       	brne	.+16     	; 0x4b8c <global_init+0x8a>
	{
		m_print("Temp/Humidity driver created.\n",xSemaphore_print);
    4b7c:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4b80:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4b84:	bc 01       	movw	r22, r24
    4b86:	8a e0       	ldi	r24, 0x0A	; 10
    4b88:	94 e0       	ldi	r25, 0x04	; 4
    4b8a:	f5 dd       	rcall	.-1046   	; 0x4776 <m_print>
	}
	
	/*
		Initialize MH-Z19 CO2 Driver
	*/
	mh_z19_create(ser_USART3, measure_co2_callback);
    4b8c:	69 e1       	ldi	r22, 0x19	; 25
    4b8e:	71 e0       	ldi	r23, 0x01	; 1
    4b90:	83 e0       	ldi	r24, 0x03	; 3
    4b92:	0e 94 82 32 	call	0x6504	; 0x6504 <mh_z19_create>
	m_print("CO2 driver created.\n",xSemaphore_print);
    4b96:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4b9a:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4b9e:	bc 01       	movw	r22, r24
    4ba0:	89 e2       	ldi	r24, 0x29	; 41
    4ba2:	94 e0       	ldi	r25, 0x04	; 4
    4ba4:	e8 dd       	rcall	.-1072   	; 0x4776 <m_print>
	
}
    4ba6:	00 00       	nop
    4ba8:	df 91       	pop	r29
    4baa:	cf 91       	pop	r28
    4bac:	08 95       	ret

00004bae <lora_handler_task>:

/*
	Task that sends data to the server
*/
void lora_handler_task(void *pvParameters)
{
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
    4bb2:	cd b7       	in	r28, 0x3d	; 61
    4bb4:	de b7       	in	r29, 0x3e	; 62
    4bb6:	2c 97       	sbiw	r28, 0x0c	; 12
    4bb8:	0f b6       	in	r0, 0x3f	; 63
    4bba:	f8 94       	cli
    4bbc:	de bf       	out	0x3e, r29	; 62
    4bbe:	0f be       	out	0x3f, r0	; 63
    4bc0:	cd bf       	out	0x3d, r28	; 61
    4bc2:	9c 87       	std	Y+12, r25	; 0x0c
    4bc4:	8b 87       	std	Y+11, r24	; 0x0b
	size_t xRecievedBytes;
	
	/*
		Hardware reset of LoRaWAN transceiver
	*/
	lora_driver_reset_rn2483(1); // Activate reset line
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <lora_driver_reset_rn2483>
	vTaskDelay(2); 
    4bcc:	82 e0       	ldi	r24, 0x02	; 2
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
	lora_driver_reset_rn2483(0); // Release reset line
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <lora_driver_reset_rn2483>
	vTaskDelay(150); // Wait for transceiver module to wake up after reset
    4bda:	86 e9       	ldi	r24, 0x96	; 150
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    4be2:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <lora_driver_flush_buffers>

	lora_setup();
    4be6:	75 de       	rcall	.-790    	; 0x48d2 <lora_setup>

	_uplink_payload.len = 4;
    4be8:	84 e0       	ldi	r24, 0x04	; 4
    4bea:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <_uplink_payload+0x1>
	_uplink_payload.port_no = 2;
    4bee:	82 e0       	ldi	r24, 0x02	; 2
    4bf0:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <_uplink_payload>


	while (1)
	{
		xSemaphoreTake(xSemaphore, 0);
    4bf4:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
    4bf8:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
    4bfc:	60 e0       	ldi	r22, 0x00	; 0
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
		vTaskDelay(10000/portTICK_PERIOD_MS);
    4c04:	81 e7       	ldi	r24, 0x71	; 113
    4c06:	92 e0       	ldi	r25, 0x02	; 2
    4c08:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>

		xRecievedBytes = xMessageBufferReceive(xMessageBuffer
    4c0c:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <xMessageBuffer>
    4c10:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <xMessageBuffer+0x1>
    4c14:	be 01       	movw	r22, r28
    4c16:	69 5f       	subi	r22, 0xF9	; 249
    4c18:	7f 4f       	sbci	r23, 0xFF	; 255
    4c1a:	20 e0       	ldi	r18, 0x00	; 0
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	44 e0       	ldi	r20, 0x04	; 4
    4c20:	50 e0       	ldi	r21, 0x00	; 0
    4c22:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xStreamBufferReceive>
    4c26:	9e 83       	std	Y+6, r25	; 0x06
    4c28:	8d 83       	std	Y+5, r24	; 0x05
		,&data
		, sizeof(m_data)
		,0 );
		
		for (int i = 0; i < xRecievedBytes; i++)
    4c2a:	1a 82       	std	Y+2, r1	; 0x02
    4c2c:	19 82       	std	Y+1, r1	; 0x01
    4c2e:	2b c0       	rjmp	.+86     	; 0x4c86 <lora_handler_task+0xd8>
		{
			for (int j = 0; j < _uplink_payload.len; j+=2)
    4c30:	1c 82       	std	Y+4, r1	; 0x04
    4c32:	1b 82       	std	Y+3, r1	; 0x03
    4c34:	1a c0       	rjmp	.+52     	; 0x4c6a <lora_handler_task+0xbc>
			{
				_uplink_payload.bytes[j] = data.type >> 8;
    4c36:	8f 81       	ldd	r24, Y+7	; 0x07
    4c38:	98 85       	ldd	r25, Y+8	; 0x08
    4c3a:	89 2f       	mov	r24, r25
    4c3c:	99 0f       	add	r25, r25
    4c3e:	99 0b       	sbc	r25, r25
    4c40:	28 2f       	mov	r18, r24
    4c42:	8b 81       	ldd	r24, Y+3	; 0x03
    4c44:	9c 81       	ldd	r25, Y+4	; 0x04
    4c46:	8a 5c       	subi	r24, 0xCA	; 202
    4c48:	96 4f       	sbci	r25, 0xF6	; 246
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	20 83       	st	Z, r18
				_uplink_payload.bytes[j+1] = data.type & 0xFF;
    4c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c50:	9c 81       	ldd	r25, Y+4	; 0x04
    4c52:	01 96       	adiw	r24, 0x01	; 1
    4c54:	2f 81       	ldd	r18, Y+7	; 0x07
    4c56:	38 85       	ldd	r19, Y+8	; 0x08
    4c58:	8a 5c       	subi	r24, 0xCA	; 202
    4c5a:	96 4f       	sbci	r25, 0xF6	; 246
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	20 83       	st	Z, r18
		, sizeof(m_data)
		,0 );
		
		for (int i = 0; i < xRecievedBytes; i++)
		{
			for (int j = 0; j < _uplink_payload.len; j+=2)
    4c60:	8b 81       	ldd	r24, Y+3	; 0x03
    4c62:	9c 81       	ldd	r25, Y+4	; 0x04
    4c64:	02 96       	adiw	r24, 0x02	; 2
    4c66:	9c 83       	std	Y+4, r25	; 0x04
    4c68:	8b 83       	std	Y+3, r24	; 0x03
    4c6a:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <_uplink_payload+0x1>
    4c6e:	28 2f       	mov	r18, r24
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	8b 81       	ldd	r24, Y+3	; 0x03
    4c74:	9c 81       	ldd	r25, Y+4	; 0x04
    4c76:	82 17       	cp	r24, r18
    4c78:	93 07       	cpc	r25, r19
    4c7a:	ec f2       	brlt	.-70     	; 0x4c36 <lora_handler_task+0x88>
		xRecievedBytes = xMessageBufferReceive(xMessageBuffer
		,&data
		, sizeof(m_data)
		,0 );
		
		for (int i = 0; i < xRecievedBytes; i++)
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c80:	01 96       	adiw	r24, 0x01	; 1
    4c82:	9a 83       	std	Y+2, r25	; 0x02
    4c84:	89 83       	std	Y+1, r24	; 0x01
    4c86:	29 81       	ldd	r18, Y+1	; 0x01
    4c88:	3a 81       	ldd	r19, Y+2	; 0x02
    4c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8e:	28 17       	cp	r18, r24
    4c90:	39 07       	cpc	r19, r25
    4c92:	70 f2       	brcs	.-100    	; 0x4c30 <lora_handler_task+0x82>
		//_uplink_payload.bytes[2] = temp >> 8;
		//_uplink_payload.bytes[3] = temp & 0xFF;
		//_uplink_payload.bytes[4] = co2_ppm >> 8;
		//_uplink_payload.bytes[5] = co2_ppm & 0xFF;

		led_short_puls(led_ST4);  // OPTIONAL
    4c94:	83 e0       	ldi	r24, 0x03	; 3
    4c96:	a0 d7       	rcall	.+3904   	; 0x5bd8 <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
    4c98:	64 e3       	ldi	r22, 0x34	; 52
    4c9a:	79 e0       	ldi	r23, 0x09	; 9
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <lora_driver_sent_upload_message>
    4ca2:	0e 94 59 31 	call	0x62b2	; 0x62b2 <lora_driver_map_return_code_to_text>
    4ca6:	29 2f       	mov	r18, r25
    4ca8:	2f 93       	push	r18
    4caa:	8f 93       	push	r24
    4cac:	8e e3       	ldi	r24, 0x3E	; 62
    4cae:	94 e0       	ldi	r25, 0x04	; 4
    4cb0:	89 2f       	mov	r24, r25
    4cb2:	8f 93       	push	r24
    4cb4:	8e e3       	ldi	r24, 0x3E	; 62
    4cb6:	94 e0       	ldi	r25, 0x04	; 4
    4cb8:	8f 93       	push	r24
    4cba:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
	}
    4cc6:	96 cf       	rjmp	.-212    	; 0x4bf4 <lora_handler_task+0x46>

00004cc8 <measure_co2_task>:
 */ 
#include "../Headers/m_lora_includes.h"


void measure_co2_task(void *pvParameters)
{
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    4ccc:	1f 92       	push	r1
    4cce:	1f 92       	push	r1
    4cd0:	cd b7       	in	r28, 0x3d	; 61
    4cd2:	de b7       	in	r29, 0x3e	; 62
    4cd4:	9a 83       	std	Y+2, r25	; 0x02
    4cd6:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		xSemaphoreTake(xSemaphore,portMAX_DELAY);
    4cd8:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
    4cdc:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
    4ce0:	6f ef       	ldi	r22, 0xFF	; 255
    4ce2:	7f ef       	ldi	r23, 0xFF	; 255
    4ce4:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
		
		if (mh_z19_take_meassuring() != MHZ19_OK)
    4ce8:	0e 94 b1 32 	call	0x6562	; 0x6562 <mh_z19_take_meassuring>
    4cec:	88 23       	and	r24, r24
    4cee:	a1 f3       	breq	.-24     	; 0x4cd8 <measure_co2_task+0x10>
		{
			m_print("Error measuring CO2 value!\n",xSemaphore_print);
    4cf0:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4cf4:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4cf8:	bc 01       	movw	r22, r24
    4cfa:	83 e5       	ldi	r24, 0x53	; 83
    4cfc:	94 e0       	ldi	r25, 0x04	; 4
    4cfe:	3b dd       	rcall	.-1418   	; 0x4776 <m_print>
		}
	}
    4d00:	eb cf       	rjmp	.-42     	; 0x4cd8 <measure_co2_task+0x10>

00004d02 <measure_temp_task>:
*/

#include "../Headers/m_lora_includes.h"

void measure_temp_task(void *pvParameters)
{
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	00 d0       	rcall	.+0      	; 0x4d08 <measure_temp_task+0x6>
    4d08:	00 d0       	rcall	.+0      	; 0x4d0a <measure_temp_task+0x8>
    4d0a:	cd b7       	in	r28, 0x3d	; 61
    4d0c:	de b7       	in	r29, 0x3e	; 62
    4d0e:	9e 83       	std	Y+6, r25	; 0x06
    4d10:	8d 83       	std	Y+5, r24	; 0x05
	m_data temperature = {2, 0};
    4d12:	82 e0       	ldi	r24, 0x02	; 2
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	9a 83       	std	Y+2, r25	; 0x02
    4d18:	89 83       	std	Y+1, r24	; 0x01
    4d1a:	1c 82       	std	Y+4, r1	; 0x04
    4d1c:	1b 82       	std	Y+3, r1	; 0x03
	
	while (1)
	{
		xSemaphoreTake(xSemaphore,portMAX_DELAY);
    4d1e:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
    4d22:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
    4d26:	6f ef       	ldi	r22, 0xFF	; 255
    4d28:	7f ef       	ldi	r23, 0xFF	; 255
    4d2a:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
		
		if ( HIH8120_OK != hih8120Wakeup() )
    4d2e:	67 d5       	rcall	.+2766   	; 0x57fe <hih8120Wakeup>
    4d30:	88 23       	and	r24, r24
    4d32:	41 f0       	breq	.+16     	; 0x4d44 <measure_temp_task+0x42>
		{
			m_print("Error in waking up the sensors!",xSemaphore_print);
    4d34:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4d38:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4d3c:	bc 01       	movw	r22, r24
    4d3e:	8f e6       	ldi	r24, 0x6F	; 111
    4d40:	94 e0       	ldi	r25, 0x04	; 4
    4d42:	19 dd       	rcall	.-1486   	; 0x4776 <m_print>
		}
		
		vTaskDelay(100/portTICK_PERIOD_MS);
    4d44:	86 e0       	ldi	r24, 0x06	; 6
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
		
	
		if ( HIH8120_OK !=  hih8120Meassure() )
    4d4c:	6c d5       	rcall	.+2776   	; 0x5826 <hih8120Meassure>
    4d4e:	88 23       	and	r24, r24
    4d50:	49 f0       	breq	.+18     	; 0x4d64 <measure_temp_task+0x62>
		{
			m_print("Error in measuring the temperature!",xSemaphore_print);			
    4d52:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4d56:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4d5a:	bc 01       	movw	r22, r24
    4d5c:	8f e8       	ldi	r24, 0x8F	; 143
    4d5e:	94 e0       	ldi	r25, 0x04	; 4
    4d60:	0a dd       	rcall	.-1516   	; 0x4776 <m_print>
    4d62:	33 c0       	rjmp	.+102    	; 0x4dca <measure_temp_task+0xc8>
		}
		else
		{	
			vTaskDelay(300/portTICK_PERIOD_MS);
    4d64:	82 e1       	ldi	r24, 0x12	; 18
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
			temperature.value = hih8120GetTemperature_x10();
    4d6c:	87 d5       	rcall	.+2830   	; 0x587c <hih8120GetTemperature_x10>
    4d6e:	9c 83       	std	Y+4, r25	; 0x04
    4d70:	8b 83       	std	Y+3, r24	; 0x03
				
			xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4d72:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4d76:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4d7a:	6f ef       	ldi	r22, 0xFF	; 255
    4d7c:	7f ef       	ldi	r23, 0xFF	; 255
    4d7e:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
			printf("Temperature(type: %d, val: %d) sent!\n", temperature.type,temperature.value);
    4d82:	2b 81       	ldd	r18, Y+3	; 0x03
    4d84:	3c 81       	ldd	r19, Y+4	; 0x04
    4d86:	89 81       	ldd	r24, Y+1	; 0x01
    4d88:	9a 81       	ldd	r25, Y+2	; 0x02
    4d8a:	43 2f       	mov	r20, r19
    4d8c:	4f 93       	push	r20
    4d8e:	2f 93       	push	r18
    4d90:	29 2f       	mov	r18, r25
    4d92:	2f 93       	push	r18
    4d94:	8f 93       	push	r24
    4d96:	83 eb       	ldi	r24, 0xB3	; 179
    4d98:	94 e0       	ldi	r25, 0x04	; 4
    4d9a:	89 2f       	mov	r24, r25
    4d9c:	8f 93       	push	r24
    4d9e:	83 eb       	ldi	r24, 0xB3	; 179
    4da0:	94 e0       	ldi	r25, 0x04	; 4
    4da2:	8f 93       	push	r24
    4da4:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4da8:	0f 90       	pop	r0
    4daa:	0f 90       	pop	r0
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
			xSemaphoreGive(xSemaphore_print);
    4db4:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4db8:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	40 e0       	ldi	r20, 0x00	; 0
    4dc0:	50 e0       	ldi	r21, 0x00	; 0
    4dc2:	60 e0       	ldi	r22, 0x00	; 0
    4dc4:	70 e0       	ldi	r23, 0x00	; 0
    4dc6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericSend>
			//vTaskDelay(1);
		}
		
		xMessageBufferSend(xMessageBuffer
    4dca:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <xMessageBuffer>
    4dce:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <xMessageBuffer+0x1>
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	44 e0       	ldi	r20, 0x04	; 4
    4dd8:	50 e0       	ldi	r21, 0x00	; 0
    4dda:	be 01       	movw	r22, r28
    4ddc:	6f 5f       	subi	r22, 0xFF	; 255
    4dde:	7f 4f       	sbci	r23, 0xFF	; 255
    4de0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <xStreamBufferSend>
		, &temperature 
		, sizeof (m_data)
		, 0);
		
		m_print("Temperature sent to the message buffer!\n",xSemaphore_print);
    4de4:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4de8:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4dec:	bc 01       	movw	r22, r24
    4dee:	89 ed       	ldi	r24, 0xD9	; 217
    4df0:	94 e0       	ldi	r25, 0x04	; 4
    4df2:	c1 dc       	rcall	.-1662   	; 0x4776 <m_print>
	}
    4df4:	94 cf       	rjmp	.-216    	; 0x4d1e <measure_temp_task+0x1c>

00004df6 <print_measuremenets_task>:
 */ 
#include "../Headers/m_lora_includes.h"


void print_measuremenets_task(void *pvParameters)
{
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	cd b7       	in	r28, 0x3d	; 61
    4dfc:	de b7       	in	r29, 0x3e	; 62
    4dfe:	2a 97       	sbiw	r28, 0x0a	; 10
    4e00:	0f b6       	in	r0, 0x3f	; 63
    4e02:	f8 94       	cli
    4e04:	de bf       	out	0x3e, r29	; 62
    4e06:	0f be       	out	0x3f, r0	; 63
    4e08:	cd bf       	out	0x3d, r28	; 61
    4e0a:	9a 87       	std	Y+10, r25	; 0x0a
    4e0c:	89 87       	std	Y+9, r24	; 0x09
	m_data data;
	size_t xRecievedBytes;
	
	while (1)
	{
		xSemaphoreTake(xSemaphore,portMAX_DELAY);
    4e0e:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <xSemaphore>
    4e12:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <xSemaphore+0x1>
    4e16:	6f ef       	ldi	r22, 0xFF	; 255
    4e18:	7f ef       	ldi	r23, 0xFF	; 255
    4e1a:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
		
		xRecievedBytes = xMessageBufferReceive(xMessageBuffer
    4e1e:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <xMessageBuffer>
    4e22:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <xMessageBuffer+0x1>
    4e26:	be 01       	movw	r22, r28
    4e28:	6b 5f       	subi	r22, 0xFB	; 251
    4e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	44 e0       	ldi	r20, 0x04	; 4
    4e32:	50 e0       	ldi	r21, 0x00	; 0
    4e34:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xStreamBufferReceive>
    4e38:	9c 83       	std	Y+4, r25	; 0x04
    4e3a:	8b 83       	std	Y+3, r24	; 0x03
							,&data
							, sizeof(m_data)
							,0 );
		
		
		for (int i = 0; i < xRecievedBytes; i++)
    4e3c:	1a 82       	std	Y+2, r1	; 0x02
    4e3e:	19 82       	std	Y+1, r1	; 0x01
    4e40:	39 c0       	rjmp	.+114    	; 0x4eb4 <print_measuremenets_task+0xbe>
		{
			vTaskDelay(100/portTICK_PERIOD_MS);
    4e42:	86 e0       	ldi	r24, 0x06	; 6
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
			xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
    4e4a:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4e4e:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4e52:	6f ef       	ldi	r22, 0xFF	; 255
    4e54:	7f ef       	ldi	r23, 0xFF	; 255
    4e56:	0e 94 a3 09 	call	0x1346	; 0x1346 <xQueueSemaphoreTake>
			printf("Received measurement: type: %d, val: %d\n\n",data.type, data.value);
    4e5a:	2f 81       	ldd	r18, Y+7	; 0x07
    4e5c:	38 85       	ldd	r19, Y+8	; 0x08
    4e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e60:	9e 81       	ldd	r25, Y+6	; 0x06
    4e62:	43 2f       	mov	r20, r19
    4e64:	4f 93       	push	r20
    4e66:	2f 93       	push	r18
    4e68:	29 2f       	mov	r18, r25
    4e6a:	2f 93       	push	r18
    4e6c:	8f 93       	push	r24
    4e6e:	82 e0       	ldi	r24, 0x02	; 2
    4e70:	95 e0       	ldi	r25, 0x05	; 5
    4e72:	89 2f       	mov	r24, r25
    4e74:	8f 93       	push	r24
    4e76:	82 e0       	ldi	r24, 0x02	; 2
    4e78:	95 e0       	ldi	r25, 0x05	; 5
    4e7a:	8f 93       	push	r24
    4e7c:	0e 94 3d 38 	call	0x707a	; 0x707a <printf>
    4e80:	0f 90       	pop	r0
    4e82:	0f 90       	pop	r0
    4e84:	0f 90       	pop	r0
    4e86:	0f 90       	pop	r0
    4e88:	0f 90       	pop	r0
    4e8a:	0f 90       	pop	r0
			xSemaphoreGive(xSemaphore_print);
    4e8c:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <xSemaphore_print>
    4e90:	90 91 ad 0a 	lds	r25, 0x0AAD	; 0x800aad <xSemaphore_print+0x1>
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	40 e0       	ldi	r20, 0x00	; 0
    4e98:	50 e0       	ldi	r21, 0x00	; 0
    4e9a:	60 e0       	ldi	r22, 0x00	; 0
    4e9c:	70 e0       	ldi	r23, 0x00	; 0
    4e9e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericSend>
			vTaskDelay(1);
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
							,&data
							, sizeof(m_data)
							,0 );
		
		
		for (int i = 0; i < xRecievedBytes; i++)
    4eaa:	89 81       	ldd	r24, Y+1	; 0x01
    4eac:	9a 81       	ldd	r25, Y+2	; 0x02
    4eae:	01 96       	adiw	r24, 0x01	; 1
    4eb0:	9a 83       	std	Y+2, r25	; 0x02
    4eb2:	89 83       	std	Y+1, r24	; 0x01
    4eb4:	29 81       	ldd	r18, Y+1	; 0x01
    4eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    4eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eba:	9c 81       	ldd	r25, Y+4	; 0x04
    4ebc:	28 17       	cp	r18, r24
    4ebe:	39 07       	cpc	r19, r25
    4ec0:	08 f4       	brcc	.+2      	; 0x4ec4 <print_measuremenets_task+0xce>
    4ec2:	bf cf       	rjmp	.-130    	; 0x4e42 <print_measuremenets_task+0x4c>
			xSemaphoreTake(xSemaphore_print,portMAX_DELAY);
			printf("Received measurement: type: %d, val: %d\n\n",data.type, data.value);
			xSemaphoreGive(xSemaphore_print);
			vTaskDelay(1);
		}
	}
    4ec4:	a4 cf       	rjmp	.-184    	; 0x4e0e <print_measuremenets_task+0x18>

00004ec6 <main>:
void global_init();
void create_all_tasks(UBaseType_t lora_handler_task_priority);
void create_all_timers();

int main(void)
{			
    4ec6:	0f 93       	push	r16
    4ec8:	1f 93       	push	r17
    4eca:	cf 93       	push	r28
    4ecc:	df 93       	push	r29
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
	global_init();
    4ed2:	17 de       	rcall	.-978    	; 0x4b02 <global_init>
	
	create_all_tasks(LORA_HANDLER_TASK_PRIORITY);
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
	
	create_all_timers();
    4ed6:	74 dc       	rcall	.-1816   	; 0x47c0 <create_all_tasks>
    4ed8:	b8 dc       	rcall	.-1680   	; 0x484a <create_all_timers>

	xTimerStart(xTimer_measure_temp,0);
    4eda:	0e 94 ee 14 	call	0x29dc	; 0x29dc <xTaskGetTickCount>
    4ede:	ac 01       	movw	r20, r24
    4ee0:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <xTimer_measure_temp>
    4ee4:	90 91 ab 0a 	lds	r25, 0x0AAB	; 0x800aab <xTimer_measure_temp+0x1>
    4ee8:	00 e0       	ldi	r16, 0x00	; 0
    4eea:	10 e0       	ldi	r17, 0x00	; 0
    4eec:	20 e0       	ldi	r18, 0x00	; 0
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	61 e0       	ldi	r22, 0x01	; 1
    4ef2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <xTimerGenericCommand>
	xTimerStart(xTimer_measure_co2,0);
    4ef6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <xTaskGetTickCount>
    4efa:	ac 01       	movw	r20, r24
    4efc:	80 91 a6 0a 	lds	r24, 0x0AA6	; 0x800aa6 <xTimer_measure_co2>
    4f00:	90 91 a7 0a 	lds	r25, 0x0AA7	; 0x800aa7 <xTimer_measure_co2+0x1>
    4f04:	00 e0       	ldi	r16, 0x00	; 0
    4f06:	10 e0       	ldi	r17, 0x00	; 0
    4f08:	20 e0       	ldi	r18, 0x00	; 0
    4f0a:	30 e0       	ldi	r19, 0x00	; 0
    4f0c:	61 e0       	ldi	r22, 0x01	; 1
    4f0e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <xTimerGenericCommand>
	xTimerStart(xTimer_read_measurements,0);
    4f12:	0e 94 ee 14 	call	0x29dc	; 0x29dc <xTaskGetTickCount>
    4f16:	ac 01       	movw	r20, r24
    4f18:	80 91 a8 0a 	lds	r24, 0x0AA8	; 0x800aa8 <xTimer_read_measurements>
    4f1c:	90 91 a9 0a 	lds	r25, 0x0AA9	; 0x800aa9 <xTimer_read_measurements+0x1>
    4f20:	00 e0       	ldi	r16, 0x00	; 0
    4f22:	10 e0       	ldi	r17, 0x00	; 0
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	61 e0       	ldi	r22, 0x01	; 1
    4f2a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <xTimerGenericCommand>
					
	vTaskStartScheduler();
    4f2e:	0e 94 09 14 	call	0x2812	; 0x2812 <vTaskStartScheduler>
	
	
	while (1)
	{
		;	
	}
    4f32:	ff cf       	rjmp	.-2      	; 0x4f32 <main+0x6c>

00004f34 <usart_getchar>:
    4f34:	cf 93       	push	r28
    4f36:	df 93       	push	r29
    4f38:	1f 92       	push	r1
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	be 01       	movw	r22, r28
    4f40:	6f 5f       	subi	r22, 0xFF	; 255
    4f42:	7f 4f       	sbci	r23, 0xFF	; 255
    4f44:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <_com_serial_instance>
    4f48:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <_com_serial_instance+0x1>
    4f4c:	4f d1       	rcall	.+670    	; 0x51ec <serial_get_byte>
    4f4e:	81 11       	cpse	r24, r1
    4f50:	f6 cf       	rjmp	.-20     	; 0x4f3e <usart_getchar+0xa>
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	0f 90       	pop	r0
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	08 95       	ret

00004f5e <usart_putchar>:
    4f5e:	68 2f       	mov	r22, r24
    4f60:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <_com_serial_instance>
    4f64:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <_com_serial_instance+0x1>
    4f68:	cc d0       	rcall	.+408    	; 0x5102 <serial_send_byte>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	08 95       	ret

00004f70 <stdioCreate>:
    4f70:	8f 92       	push	r8
    4f72:	9f 92       	push	r9
    4f74:	af 92       	push	r10
    4f76:	cf 92       	push	r12
    4f78:	ef 92       	push	r14
    4f7a:	0f 93       	push	r16
    4f7c:	81 2c       	mov	r8, r1
    4f7e:	91 2c       	mov	r9, r1
    4f80:	68 94       	set
    4f82:	aa 24       	eor	r10, r10
    4f84:	a7 f8       	bld	r10, 7
    4f86:	68 94       	set
    4f88:	cc 24       	eor	r12, r12
    4f8a:	c7 f8       	bld	r12, 7
    4f8c:	e1 2c       	mov	r14, r1
    4f8e:	00 e0       	ldi	r16, 0x00	; 0
    4f90:	23 e0       	ldi	r18, 0x03	; 3
    4f92:	40 e0       	ldi	r20, 0x00	; 0
    4f94:	51 ee       	ldi	r21, 0xE1	; 225
    4f96:	60 e0       	ldi	r22, 0x00	; 0
    4f98:	70 e0       	ldi	r23, 0x00	; 0
    4f9a:	13 d0       	rcall	.+38     	; 0x4fc2 <serial_new_instance>
    4f9c:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <_com_serial_instance+0x1>
    4fa0:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <_com_serial_instance>
    4fa4:	ec ec       	ldi	r30, 0xCC	; 204
    4fa6:	fa e0       	ldi	r31, 0x0A	; 10
    4fa8:	86 e0       	ldi	r24, 0x06	; 6
    4faa:	92 e0       	ldi	r25, 0x02	; 2
    4fac:	91 83       	std	Z+1, r25	; 0x01
    4fae:	80 83       	st	Z, r24
    4fb0:	93 83       	std	Z+3, r25	; 0x03
    4fb2:	82 83       	std	Z+2, r24	; 0x02
    4fb4:	0f 91       	pop	r16
    4fb6:	ef 90       	pop	r14
    4fb8:	cf 90       	pop	r12
    4fba:	af 90       	pop	r10
    4fbc:	9f 90       	pop	r9
    4fbe:	8f 90       	pop	r8
    4fc0:	08 95       	ret

00004fc2 <serial_new_instance>:
    4fc2:	2f 92       	push	r2
    4fc4:	3f 92       	push	r3
    4fc6:	4f 92       	push	r4
    4fc8:	5f 92       	push	r5
    4fca:	6f 92       	push	r6
    4fcc:	7f 92       	push	r7
    4fce:	8f 92       	push	r8
    4fd0:	9f 92       	push	r9
    4fd2:	af 92       	push	r10
    4fd4:	cf 92       	push	r12
    4fd6:	ef 92       	push	r14
    4fd8:	ff 92       	push	r15
    4fda:	0f 93       	push	r16
    4fdc:	1f 93       	push	r17
    4fde:	cf 93       	push	r28
    4fe0:	df 93       	push	r29
    4fe2:	cd b7       	in	r28, 0x3d	; 61
    4fe4:	de b7       	in	r29, 0x3e	; 62
    4fe6:	f8 2e       	mov	r15, r24
    4fe8:	2a 01       	movw	r4, r20
    4fea:	3b 01       	movw	r6, r22
    4fec:	88 e0       	ldi	r24, 0x08	; 8
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <malloc>
    4ff4:	8c 01       	movw	r16, r24
    4ff6:	8f 2d       	mov	r24, r15
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	88 0f       	add	r24, r24
    4ffc:	99 1f       	adc	r25, r25
    4ffe:	fc 01       	movw	r30, r24
    5000:	e4 5b       	subi	r30, 0xB4	; 180
    5002:	f6 4f       	sbci	r31, 0xF6	; 246
    5004:	11 83       	std	Z+1, r17	; 0x01
    5006:	00 83       	st	Z, r16
    5008:	fc 01       	movw	r30, r24
    500a:	ec 5e       	subi	r30, 0xEC	; 236
    500c:	fd 4f       	sbci	r31, 0xFD	; 253
    500e:	80 81       	ld	r24, Z
    5010:	91 81       	ldd	r25, Z+1	; 0x01
    5012:	d8 01       	movw	r26, r16
    5014:	8d 93       	st	X+, r24
    5016:	9c 93       	st	X, r25
    5018:	6c 2d       	mov	r22, r12
    501a:	70 e0       	ldi	r23, 0x00	; 0
    501c:	84 e0       	ldi	r24, 0x04	; 4
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <calloc>
    5024:	1c 01       	movw	r2, r24
    5026:	61 e0       	ldi	r22, 0x01	; 1
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	86 e0       	ldi	r24, 0x06	; 6
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <calloc>
    5032:	7c 01       	movw	r14, r24
    5034:	4c 2d       	mov	r20, r12
    5036:	b1 01       	movw	r22, r2
    5038:	4d d3       	rcall	.+1690   	; 0x56d4 <fifo_init>
    503a:	f8 01       	movw	r30, r16
    503c:	f5 82       	std	Z+5, r15	; 0x05
    503e:	e4 82       	std	Z+4, r14	; 0x04
    5040:	6a 2d       	mov	r22, r10
    5042:	70 e0       	ldi	r23, 0x00	; 0
    5044:	84 e0       	ldi	r24, 0x04	; 4
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <calloc>
    504c:	1c 01       	movw	r2, r24
    504e:	61 e0       	ldi	r22, 0x01	; 1
    5050:	70 e0       	ldi	r23, 0x00	; 0
    5052:	86 e0       	ldi	r24, 0x06	; 6
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <calloc>
    505a:	7c 01       	movw	r14, r24
    505c:	4a 2d       	mov	r20, r10
    505e:	b1 01       	movw	r22, r2
    5060:	39 d3       	rcall	.+1650   	; 0x56d4 <fifo_init>
    5062:	d8 01       	movw	r26, r16
    5064:	13 96       	adiw	r26, 0x03	; 3
    5066:	fc 92       	st	X, r15
    5068:	ee 92       	st	-X, r14
    506a:	12 97       	sbiw	r26, 0x02	; 2
    506c:	17 96       	adiw	r26, 0x07	; 7
    506e:	9c 92       	st	X, r9
    5070:	8e 92       	st	-X, r8
    5072:	16 97       	sbiw	r26, 0x06	; 6
    5074:	ff b6       	in	r15, 0x3f	; 63
    5076:	f8 94       	cli
    5078:	ed 91       	ld	r30, X+
    507a:	fc 91       	ld	r31, X
    507c:	11 97       	sbiw	r26, 0x01	; 1
    507e:	36 97       	sbiw	r30, 0x06	; 6
    5080:	80 81       	ld	r24, Z
    5082:	82 60       	ori	r24, 0x02	; 2
    5084:	80 83       	st	Z, r24
    5086:	8d 90       	ld	r8, X+
    5088:	9c 90       	ld	r9, X
    508a:	c3 01       	movw	r24, r6
    508c:	b2 01       	movw	r22, r4
    508e:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <__floatunsisf>
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	40 e0       	ldi	r20, 0x00	; 0
    5098:	51 e4       	ldi	r21, 0x41	; 65
    509a:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__mulsf3>
    509e:	9b 01       	movw	r18, r22
    50a0:	ac 01       	movw	r20, r24
    50a2:	60 e0       	ldi	r22, 0x00	; 0
    50a4:	74 e2       	ldi	r23, 0x24	; 36
    50a6:	84 e7       	ldi	r24, 0x74	; 116
    50a8:	9b e4       	ldi	r25, 0x4B	; 75
    50aa:	0e 94 12 35 	call	0x6a24	; 0x6a24 <__divsf3>
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	40 e8       	ldi	r20, 0x80	; 128
    50b4:	5f e3       	ldi	r21, 0x3F	; 63
    50b6:	0e 94 a9 34 	call	0x6952	; 0x6952 <__subsf3>
    50ba:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__fixunssfsi>
    50be:	f4 01       	movw	r30, r8
    50c0:	32 97       	sbiw	r30, 0x02	; 2
    50c2:	60 83       	st	Z, r22
    50c4:	d8 01       	movw	r26, r16
    50c6:	ed 91       	ld	r30, X+
    50c8:	fc 91       	ld	r31, X
    50ca:	11 97       	sbiw	r26, 0x01	; 1
    50cc:	35 97       	sbiw	r30, 0x05	; 5
    50ce:	88 e9       	ldi	r24, 0x98	; 152
    50d0:	80 83       	st	Z, r24
    50d2:	ed 91       	ld	r30, X+
    50d4:	fc 91       	ld	r31, X
    50d6:	34 97       	sbiw	r30, 0x04	; 4
    50d8:	86 e0       	ldi	r24, 0x06	; 6
    50da:	80 83       	st	Z, r24
    50dc:	ff be       	out	0x3f, r15	; 63
    50de:	c8 01       	movw	r24, r16
    50e0:	df 91       	pop	r29
    50e2:	cf 91       	pop	r28
    50e4:	1f 91       	pop	r17
    50e6:	0f 91       	pop	r16
    50e8:	ff 90       	pop	r15
    50ea:	ef 90       	pop	r14
    50ec:	cf 90       	pop	r12
    50ee:	af 90       	pop	r10
    50f0:	9f 90       	pop	r9
    50f2:	8f 90       	pop	r8
    50f4:	7f 90       	pop	r7
    50f6:	6f 90       	pop	r6
    50f8:	5f 90       	pop	r5
    50fa:	4f 90       	pop	r4
    50fc:	3f 90       	pop	r3
    50fe:	2f 90       	pop	r2
    5100:	08 95       	ret

00005102 <serial_send_byte>:
    5102:	cf 93       	push	r28
    5104:	df 93       	push	r29
    5106:	ec 01       	movw	r28, r24
    5108:	ea 81       	ldd	r30, Y+2	; 0x02
    510a:	fb 81       	ldd	r31, Y+3	; 0x03
    510c:	93 81       	ldd	r25, Z+3	; 0x03
    510e:	82 81       	ldd	r24, Z+2	; 0x02
    5110:	25 81       	ldd	r18, Z+5	; 0x05
    5112:	98 1b       	sub	r25, r24
    5114:	92 23       	and	r25, r18
    5116:	84 81       	ldd	r24, Z+4	; 0x04
    5118:	98 17       	cp	r25, r24
    511a:	a1 f0       	breq	.+40     	; 0x5144 <serial_send_byte+0x42>
    511c:	93 81       	ldd	r25, Z+3	; 0x03
    511e:	26 95       	lsr	r18
    5120:	29 23       	and	r18, r25
    5122:	a0 81       	ld	r26, Z
    5124:	b1 81       	ldd	r27, Z+1	; 0x01
    5126:	a2 0f       	add	r26, r18
    5128:	b1 1d       	adc	r27, r1
    512a:	6c 93       	st	X, r22
    512c:	9f 5f       	subi	r25, 0xFF	; 255
    512e:	25 81       	ldd	r18, Z+5	; 0x05
    5130:	92 23       	and	r25, r18
    5132:	93 83       	std	Z+3, r25	; 0x03
    5134:	e8 81       	ld	r30, Y
    5136:	f9 81       	ldd	r31, Y+1	; 0x01
    5138:	35 97       	sbiw	r30, 0x05	; 5
    513a:	80 81       	ld	r24, Z
    513c:	80 62       	ori	r24, 0x20	; 32
    513e:	80 83       	st	Z, r24
    5140:	80 e0       	ldi	r24, 0x00	; 0
    5142:	01 c0       	rjmp	.+2      	; 0x5146 <serial_send_byte+0x44>
    5144:	82 e0       	ldi	r24, 0x02	; 2
    5146:	df 91       	pop	r29
    5148:	cf 91       	pop	r28
    514a:	08 95       	ret

0000514c <serial_send_bytes>:
    514c:	ef 92       	push	r14
    514e:	ff 92       	push	r15
    5150:	0f 93       	push	r16
    5152:	1f 93       	push	r17
    5154:	cf 93       	push	r28
    5156:	df 93       	push	r29
    5158:	7c 01       	movw	r14, r24
    515a:	dc 01       	movw	r26, r24
    515c:	12 96       	adiw	r26, 0x02	; 2
    515e:	ed 91       	ld	r30, X+
    5160:	fc 91       	ld	r31, X
    5162:	13 97       	sbiw	r26, 0x03	; 3
    5164:	93 81       	ldd	r25, Z+3	; 0x03
    5166:	82 81       	ldd	r24, Z+2	; 0x02
    5168:	98 1b       	sub	r25, r24
    516a:	85 81       	ldd	r24, Z+5	; 0x05
    516c:	98 23       	and	r25, r24
    516e:	84 81       	ldd	r24, Z+4	; 0x04
    5170:	89 1b       	sub	r24, r25
    5172:	86 17       	cp	r24, r22
    5174:	98 f1       	brcs	.+102    	; 0x51dc <serial_send_bytes+0x90>
    5176:	66 23       	and	r22, r22
    5178:	41 f1       	breq	.+80     	; 0x51ca <serial_send_bytes+0x7e>
    517a:	84 2f       	mov	r24, r20
    517c:	95 2f       	mov	r25, r21
    517e:	dc 01       	movw	r26, r24
    5180:	61 50       	subi	r22, 0x01	; 1
    5182:	46 2f       	mov	r20, r22
    5184:	50 e0       	ldi	r21, 0x00	; 0
    5186:	4f 5f       	subi	r20, 0xFF	; 255
    5188:	5f 4f       	sbci	r21, 0xFF	; 255
    518a:	48 0f       	add	r20, r24
    518c:	59 1f       	adc	r21, r25
    518e:	e7 01       	movw	r28, r14
    5190:	ea 81       	ldd	r30, Y+2	; 0x02
    5192:	fb 81       	ldd	r31, Y+3	; 0x03
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	82 81       	ldd	r24, Z+2	; 0x02
    5198:	25 81       	ldd	r18, Z+5	; 0x05
    519a:	98 1b       	sub	r25, r24
    519c:	92 23       	and	r25, r18
    519e:	84 81       	ldd	r24, Z+4	; 0x04
    51a0:	98 17       	cp	r25, r24
    51a2:	79 f0       	breq	.+30     	; 0x51c2 <serial_send_bytes+0x76>
    51a4:	8c 91       	ld	r24, X
    51a6:	93 81       	ldd	r25, Z+3	; 0x03
    51a8:	26 95       	lsr	r18
    51aa:	29 23       	and	r18, r25
    51ac:	60 81       	ld	r22, Z
    51ae:	71 81       	ldd	r23, Z+1	; 0x01
    51b0:	8b 01       	movw	r16, r22
    51b2:	02 0f       	add	r16, r18
    51b4:	11 1d       	adc	r17, r1
    51b6:	e8 01       	movw	r28, r16
    51b8:	88 83       	st	Y, r24
    51ba:	9f 5f       	subi	r25, 0xFF	; 255
    51bc:	85 81       	ldd	r24, Z+5	; 0x05
    51be:	98 23       	and	r25, r24
    51c0:	93 83       	std	Z+3, r25	; 0x03
    51c2:	11 96       	adiw	r26, 0x01	; 1
    51c4:	a4 17       	cp	r26, r20
    51c6:	b5 07       	cpc	r27, r21
    51c8:	11 f7       	brne	.-60     	; 0x518e <serial_send_bytes+0x42>
    51ca:	d7 01       	movw	r26, r14
    51cc:	ed 91       	ld	r30, X+
    51ce:	fc 91       	ld	r31, X
    51d0:	35 97       	sbiw	r30, 0x05	; 5
    51d2:	80 81       	ld	r24, Z
    51d4:	80 62       	ori	r24, 0x20	; 32
    51d6:	80 83       	st	Z, r24
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	01 c0       	rjmp	.+2      	; 0x51de <serial_send_bytes+0x92>
    51dc:	82 e0       	ldi	r24, 0x02	; 2
    51de:	df 91       	pop	r29
    51e0:	cf 91       	pop	r28
    51e2:	1f 91       	pop	r17
    51e4:	0f 91       	pop	r16
    51e6:	ff 90       	pop	r15
    51e8:	ef 90       	pop	r14
    51ea:	08 95       	ret

000051ec <serial_get_byte>:
    51ec:	dc 01       	movw	r26, r24
    51ee:	14 96       	adiw	r26, 0x04	; 4
    51f0:	ed 91       	ld	r30, X+
    51f2:	fc 91       	ld	r31, X
    51f4:	15 97       	sbiw	r26, 0x05	; 5
    51f6:	93 81       	ldd	r25, Z+3	; 0x03
    51f8:	82 81       	ldd	r24, Z+2	; 0x02
    51fa:	98 17       	cp	r25, r24
    51fc:	89 f0       	breq	.+34     	; 0x5220 <serial_get_byte+0x34>
    51fe:	92 81       	ldd	r25, Z+2	; 0x02
    5200:	85 81       	ldd	r24, Z+5	; 0x05
    5202:	86 95       	lsr	r24
    5204:	89 23       	and	r24, r25
    5206:	a0 81       	ld	r26, Z
    5208:	b1 81       	ldd	r27, Z+1	; 0x01
    520a:	a8 0f       	add	r26, r24
    520c:	b1 1d       	adc	r27, r1
    520e:	8c 91       	ld	r24, X
    5210:	db 01       	movw	r26, r22
    5212:	8c 93       	st	X, r24
    5214:	9f 5f       	subi	r25, 0xFF	; 255
    5216:	85 81       	ldd	r24, Z+5	; 0x05
    5218:	98 23       	and	r25, r24
    521a:	92 83       	std	Z+2, r25	; 0x02
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	08 95       	ret
    5220:	83 e0       	ldi	r24, 0x03	; 3
    5222:	08 95       	ret

00005224 <__vector_25>:
    5224:	1f 92       	push	r1
    5226:	0f 92       	push	r0
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	0f 92       	push	r0
    522c:	11 24       	eor	r1, r1
    522e:	0b b6       	in	r0, 0x3b	; 59
    5230:	0f 92       	push	r0
    5232:	2f 93       	push	r18
    5234:	3f 93       	push	r19
    5236:	4f 93       	push	r20
    5238:	5f 93       	push	r21
    523a:	6f 93       	push	r22
    523c:	7f 93       	push	r23
    523e:	8f 93       	push	r24
    5240:	9f 93       	push	r25
    5242:	af 93       	push	r26
    5244:	bf 93       	push	r27
    5246:	cf 93       	push	r28
    5248:	df 93       	push	r29
    524a:	ef 93       	push	r30
    524c:	ff 93       	push	r31
    524e:	a0 91 4c 09 	lds	r26, 0x094C	; 0x80094c <_ser_handle>
    5252:	b0 91 4d 09 	lds	r27, 0x094D	; 0x80094d <_ser_handle+0x1>
    5256:	10 97       	sbiw	r26, 0x00	; 0
    5258:	11 f1       	breq	.+68     	; 0x529e <__vector_25+0x7a>
    525a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    525e:	14 96       	adiw	r26, 0x04	; 4
    5260:	ed 91       	ld	r30, X+
    5262:	fc 91       	ld	r31, X
    5264:	15 97       	sbiw	r26, 0x05	; 5
    5266:	93 81       	ldd	r25, Z+3	; 0x03
    5268:	82 81       	ldd	r24, Z+2	; 0x02
    526a:	25 81       	ldd	r18, Z+5	; 0x05
    526c:	98 1b       	sub	r25, r24
    526e:	92 23       	and	r25, r18
    5270:	84 81       	ldd	r24, Z+4	; 0x04
    5272:	98 17       	cp	r25, r24
    5274:	61 f0       	breq	.+24     	; 0x528e <__vector_25+0x6a>
    5276:	83 81       	ldd	r24, Z+3	; 0x03
    5278:	26 95       	lsr	r18
    527a:	28 23       	and	r18, r24
    527c:	c0 81       	ld	r28, Z
    527e:	d1 81       	ldd	r29, Z+1	; 0x01
    5280:	c2 0f       	add	r28, r18
    5282:	d1 1d       	adc	r29, r1
    5284:	68 83       	st	Y, r22
    5286:	8f 5f       	subi	r24, 0xFF	; 255
    5288:	95 81       	ldd	r25, Z+5	; 0x05
    528a:	89 23       	and	r24, r25
    528c:	83 83       	std	Z+3, r24	; 0x03
    528e:	16 96       	adiw	r26, 0x06	; 6
    5290:	ed 91       	ld	r30, X+
    5292:	fc 91       	ld	r31, X
    5294:	17 97       	sbiw	r26, 0x07	; 7
    5296:	30 97       	sbiw	r30, 0x00	; 0
    5298:	11 f0       	breq	.+4      	; 0x529e <__vector_25+0x7a>
    529a:	cd 01       	movw	r24, r26
    529c:	19 95       	eicall
    529e:	ff 91       	pop	r31
    52a0:	ef 91       	pop	r30
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	bf 91       	pop	r27
    52a8:	af 91       	pop	r26
    52aa:	9f 91       	pop	r25
    52ac:	8f 91       	pop	r24
    52ae:	7f 91       	pop	r23
    52b0:	6f 91       	pop	r22
    52b2:	5f 91       	pop	r21
    52b4:	4f 91       	pop	r20
    52b6:	3f 91       	pop	r19
    52b8:	2f 91       	pop	r18
    52ba:	0f 90       	pop	r0
    52bc:	0b be       	out	0x3b, r0	; 59
    52be:	0f 90       	pop	r0
    52c0:	0f be       	out	0x3f, r0	; 63
    52c2:	0f 90       	pop	r0
    52c4:	1f 90       	pop	r1
    52c6:	18 95       	reti

000052c8 <__vector_26>:
    52c8:	1f 92       	push	r1
    52ca:	0f 92       	push	r0
    52cc:	0f b6       	in	r0, 0x3f	; 63
    52ce:	0f 92       	push	r0
    52d0:	11 24       	eor	r1, r1
    52d2:	0b b6       	in	r0, 0x3b	; 59
    52d4:	0f 92       	push	r0
    52d6:	2f 93       	push	r18
    52d8:	8f 93       	push	r24
    52da:	9f 93       	push	r25
    52dc:	af 93       	push	r26
    52de:	bf 93       	push	r27
    52e0:	ef 93       	push	r30
    52e2:	ff 93       	push	r31
    52e4:	e0 91 4c 09 	lds	r30, 0x094C	; 0x80094c <_ser_handle>
    52e8:	f0 91 4d 09 	lds	r31, 0x094D	; 0x80094d <_ser_handle+0x1>
    52ec:	30 97       	sbiw	r30, 0x00	; 0
    52ee:	b9 f0       	breq	.+46     	; 0x531e <__vector_26+0x56>
    52f0:	02 80       	ldd	r0, Z+2	; 0x02
    52f2:	f3 81       	ldd	r31, Z+3	; 0x03
    52f4:	e0 2d       	mov	r30, r0
    52f6:	93 81       	ldd	r25, Z+3	; 0x03
    52f8:	82 81       	ldd	r24, Z+2	; 0x02
    52fa:	98 17       	cp	r25, r24
    52fc:	b1 f0       	breq	.+44     	; 0x532a <__vector_26+0x62>
    52fe:	92 81       	ldd	r25, Z+2	; 0x02
    5300:	85 81       	ldd	r24, Z+5	; 0x05
    5302:	28 2f       	mov	r18, r24
    5304:	26 95       	lsr	r18
    5306:	29 23       	and	r18, r25
    5308:	a0 81       	ld	r26, Z
    530a:	b1 81       	ldd	r27, Z+1	; 0x01
    530c:	a2 0f       	add	r26, r18
    530e:	b1 1d       	adc	r27, r1
    5310:	2c 91       	ld	r18, X
    5312:	9f 5f       	subi	r25, 0xFF	; 255
    5314:	89 23       	and	r24, r25
    5316:	82 83       	std	Z+2, r24	; 0x02
    5318:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    531c:	0b c0       	rjmp	.+22     	; 0x5334 <__vector_26+0x6c>
    531e:	e1 ec       	ldi	r30, 0xC1	; 193
    5320:	f0 e0       	ldi	r31, 0x00	; 0
    5322:	80 81       	ld	r24, Z
    5324:	8f 7d       	andi	r24, 0xDF	; 223
    5326:	80 83       	st	Z, r24
    5328:	05 c0       	rjmp	.+10     	; 0x5334 <__vector_26+0x6c>
    532a:	e1 ec       	ldi	r30, 0xC1	; 193
    532c:	f0 e0       	ldi	r31, 0x00	; 0
    532e:	80 81       	ld	r24, Z
    5330:	8f 7d       	andi	r24, 0xDF	; 223
    5332:	80 83       	st	Z, r24
    5334:	ff 91       	pop	r31
    5336:	ef 91       	pop	r30
    5338:	bf 91       	pop	r27
    533a:	af 91       	pop	r26
    533c:	9f 91       	pop	r25
    533e:	8f 91       	pop	r24
    5340:	2f 91       	pop	r18
    5342:	0f 90       	pop	r0
    5344:	0b be       	out	0x3b, r0	; 59
    5346:	0f 90       	pop	r0
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	0f 90       	pop	r0
    534c:	1f 90       	pop	r1
    534e:	18 95       	reti

00005350 <__vector_36>:
    5350:	1f 92       	push	r1
    5352:	0f 92       	push	r0
    5354:	0f b6       	in	r0, 0x3f	; 63
    5356:	0f 92       	push	r0
    5358:	11 24       	eor	r1, r1
    535a:	0b b6       	in	r0, 0x3b	; 59
    535c:	0f 92       	push	r0
    535e:	2f 93       	push	r18
    5360:	3f 93       	push	r19
    5362:	4f 93       	push	r20
    5364:	5f 93       	push	r21
    5366:	6f 93       	push	r22
    5368:	7f 93       	push	r23
    536a:	8f 93       	push	r24
    536c:	9f 93       	push	r25
    536e:	af 93       	push	r26
    5370:	bf 93       	push	r27
    5372:	cf 93       	push	r28
    5374:	df 93       	push	r29
    5376:	ef 93       	push	r30
    5378:	ff 93       	push	r31
    537a:	a0 91 4e 09 	lds	r26, 0x094E	; 0x80094e <_ser_handle+0x2>
    537e:	b0 91 4f 09 	lds	r27, 0x094F	; 0x80094f <_ser_handle+0x3>
    5382:	10 97       	sbiw	r26, 0x00	; 0
    5384:	11 f1       	breq	.+68     	; 0x53ca <__vector_36+0x7a>
    5386:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    538a:	14 96       	adiw	r26, 0x04	; 4
    538c:	ed 91       	ld	r30, X+
    538e:	fc 91       	ld	r31, X
    5390:	15 97       	sbiw	r26, 0x05	; 5
    5392:	93 81       	ldd	r25, Z+3	; 0x03
    5394:	82 81       	ldd	r24, Z+2	; 0x02
    5396:	25 81       	ldd	r18, Z+5	; 0x05
    5398:	98 1b       	sub	r25, r24
    539a:	92 23       	and	r25, r18
    539c:	84 81       	ldd	r24, Z+4	; 0x04
    539e:	98 17       	cp	r25, r24
    53a0:	61 f0       	breq	.+24     	; 0x53ba <__vector_36+0x6a>
    53a2:	83 81       	ldd	r24, Z+3	; 0x03
    53a4:	26 95       	lsr	r18
    53a6:	28 23       	and	r18, r24
    53a8:	c0 81       	ld	r28, Z
    53aa:	d1 81       	ldd	r29, Z+1	; 0x01
    53ac:	c2 0f       	add	r28, r18
    53ae:	d1 1d       	adc	r29, r1
    53b0:	68 83       	st	Y, r22
    53b2:	8f 5f       	subi	r24, 0xFF	; 255
    53b4:	95 81       	ldd	r25, Z+5	; 0x05
    53b6:	89 23       	and	r24, r25
    53b8:	83 83       	std	Z+3, r24	; 0x03
    53ba:	16 96       	adiw	r26, 0x06	; 6
    53bc:	ed 91       	ld	r30, X+
    53be:	fc 91       	ld	r31, X
    53c0:	17 97       	sbiw	r26, 0x07	; 7
    53c2:	30 97       	sbiw	r30, 0x00	; 0
    53c4:	11 f0       	breq	.+4      	; 0x53ca <__vector_36+0x7a>
    53c6:	cd 01       	movw	r24, r26
    53c8:	19 95       	eicall
    53ca:	ff 91       	pop	r31
    53cc:	ef 91       	pop	r30
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	bf 91       	pop	r27
    53d4:	af 91       	pop	r26
    53d6:	9f 91       	pop	r25
    53d8:	8f 91       	pop	r24
    53da:	7f 91       	pop	r23
    53dc:	6f 91       	pop	r22
    53de:	5f 91       	pop	r21
    53e0:	4f 91       	pop	r20
    53e2:	3f 91       	pop	r19
    53e4:	2f 91       	pop	r18
    53e6:	0f 90       	pop	r0
    53e8:	0b be       	out	0x3b, r0	; 59
    53ea:	0f 90       	pop	r0
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	0f 90       	pop	r0
    53f0:	1f 90       	pop	r1
    53f2:	18 95       	reti

000053f4 <__vector_37>:
    53f4:	1f 92       	push	r1
    53f6:	0f 92       	push	r0
    53f8:	0f b6       	in	r0, 0x3f	; 63
    53fa:	0f 92       	push	r0
    53fc:	11 24       	eor	r1, r1
    53fe:	0b b6       	in	r0, 0x3b	; 59
    5400:	0f 92       	push	r0
    5402:	2f 93       	push	r18
    5404:	8f 93       	push	r24
    5406:	9f 93       	push	r25
    5408:	af 93       	push	r26
    540a:	bf 93       	push	r27
    540c:	ef 93       	push	r30
    540e:	ff 93       	push	r31
    5410:	e0 91 4e 09 	lds	r30, 0x094E	; 0x80094e <_ser_handle+0x2>
    5414:	f0 91 4f 09 	lds	r31, 0x094F	; 0x80094f <_ser_handle+0x3>
    5418:	30 97       	sbiw	r30, 0x00	; 0
    541a:	b9 f0       	breq	.+46     	; 0x544a <__vector_37+0x56>
    541c:	02 80       	ldd	r0, Z+2	; 0x02
    541e:	f3 81       	ldd	r31, Z+3	; 0x03
    5420:	e0 2d       	mov	r30, r0
    5422:	93 81       	ldd	r25, Z+3	; 0x03
    5424:	82 81       	ldd	r24, Z+2	; 0x02
    5426:	98 17       	cp	r25, r24
    5428:	b1 f0       	breq	.+44     	; 0x5456 <__vector_37+0x62>
    542a:	92 81       	ldd	r25, Z+2	; 0x02
    542c:	85 81       	ldd	r24, Z+5	; 0x05
    542e:	28 2f       	mov	r18, r24
    5430:	26 95       	lsr	r18
    5432:	29 23       	and	r18, r25
    5434:	a0 81       	ld	r26, Z
    5436:	b1 81       	ldd	r27, Z+1	; 0x01
    5438:	a2 0f       	add	r26, r18
    543a:	b1 1d       	adc	r27, r1
    543c:	2c 91       	ld	r18, X
    543e:	9f 5f       	subi	r25, 0xFF	; 255
    5440:	89 23       	and	r24, r25
    5442:	82 83       	std	Z+2, r24	; 0x02
    5444:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5448:	0b c0       	rjmp	.+22     	; 0x5460 <__vector_37+0x6c>
    544a:	e9 ec       	ldi	r30, 0xC9	; 201
    544c:	f0 e0       	ldi	r31, 0x00	; 0
    544e:	80 81       	ld	r24, Z
    5450:	8f 7d       	andi	r24, 0xDF	; 223
    5452:	80 83       	st	Z, r24
    5454:	05 c0       	rjmp	.+10     	; 0x5460 <__vector_37+0x6c>
    5456:	e9 ec       	ldi	r30, 0xC9	; 201
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	80 81       	ld	r24, Z
    545c:	8f 7d       	andi	r24, 0xDF	; 223
    545e:	80 83       	st	Z, r24
    5460:	ff 91       	pop	r31
    5462:	ef 91       	pop	r30
    5464:	bf 91       	pop	r27
    5466:	af 91       	pop	r26
    5468:	9f 91       	pop	r25
    546a:	8f 91       	pop	r24
    546c:	2f 91       	pop	r18
    546e:	0f 90       	pop	r0
    5470:	0b be       	out	0x3b, r0	; 59
    5472:	0f 90       	pop	r0
    5474:	0f be       	out	0x3f, r0	; 63
    5476:	0f 90       	pop	r0
    5478:	1f 90       	pop	r1
    547a:	18 95       	reti

0000547c <__vector_51>:
    547c:	1f 92       	push	r1
    547e:	0f 92       	push	r0
    5480:	0f b6       	in	r0, 0x3f	; 63
    5482:	0f 92       	push	r0
    5484:	11 24       	eor	r1, r1
    5486:	0b b6       	in	r0, 0x3b	; 59
    5488:	0f 92       	push	r0
    548a:	2f 93       	push	r18
    548c:	3f 93       	push	r19
    548e:	4f 93       	push	r20
    5490:	5f 93       	push	r21
    5492:	6f 93       	push	r22
    5494:	7f 93       	push	r23
    5496:	8f 93       	push	r24
    5498:	9f 93       	push	r25
    549a:	af 93       	push	r26
    549c:	bf 93       	push	r27
    549e:	cf 93       	push	r28
    54a0:	df 93       	push	r29
    54a2:	ef 93       	push	r30
    54a4:	ff 93       	push	r31
    54a6:	a0 91 50 09 	lds	r26, 0x0950	; 0x800950 <_ser_handle+0x4>
    54aa:	b0 91 51 09 	lds	r27, 0x0951	; 0x800951 <_ser_handle+0x5>
    54ae:	10 97       	sbiw	r26, 0x00	; 0
    54b0:	11 f1       	breq	.+68     	; 0x54f6 <__vector_51+0x7a>
    54b2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    54b6:	14 96       	adiw	r26, 0x04	; 4
    54b8:	ed 91       	ld	r30, X+
    54ba:	fc 91       	ld	r31, X
    54bc:	15 97       	sbiw	r26, 0x05	; 5
    54be:	93 81       	ldd	r25, Z+3	; 0x03
    54c0:	82 81       	ldd	r24, Z+2	; 0x02
    54c2:	25 81       	ldd	r18, Z+5	; 0x05
    54c4:	98 1b       	sub	r25, r24
    54c6:	92 23       	and	r25, r18
    54c8:	84 81       	ldd	r24, Z+4	; 0x04
    54ca:	98 17       	cp	r25, r24
    54cc:	61 f0       	breq	.+24     	; 0x54e6 <__vector_51+0x6a>
    54ce:	83 81       	ldd	r24, Z+3	; 0x03
    54d0:	26 95       	lsr	r18
    54d2:	28 23       	and	r18, r24
    54d4:	c0 81       	ld	r28, Z
    54d6:	d1 81       	ldd	r29, Z+1	; 0x01
    54d8:	c2 0f       	add	r28, r18
    54da:	d1 1d       	adc	r29, r1
    54dc:	68 83       	st	Y, r22
    54de:	8f 5f       	subi	r24, 0xFF	; 255
    54e0:	95 81       	ldd	r25, Z+5	; 0x05
    54e2:	89 23       	and	r24, r25
    54e4:	83 83       	std	Z+3, r24	; 0x03
    54e6:	16 96       	adiw	r26, 0x06	; 6
    54e8:	ed 91       	ld	r30, X+
    54ea:	fc 91       	ld	r31, X
    54ec:	17 97       	sbiw	r26, 0x07	; 7
    54ee:	30 97       	sbiw	r30, 0x00	; 0
    54f0:	11 f0       	breq	.+4      	; 0x54f6 <__vector_51+0x7a>
    54f2:	cd 01       	movw	r24, r26
    54f4:	19 95       	eicall
    54f6:	ff 91       	pop	r31
    54f8:	ef 91       	pop	r30
    54fa:	df 91       	pop	r29
    54fc:	cf 91       	pop	r28
    54fe:	bf 91       	pop	r27
    5500:	af 91       	pop	r26
    5502:	9f 91       	pop	r25
    5504:	8f 91       	pop	r24
    5506:	7f 91       	pop	r23
    5508:	6f 91       	pop	r22
    550a:	5f 91       	pop	r21
    550c:	4f 91       	pop	r20
    550e:	3f 91       	pop	r19
    5510:	2f 91       	pop	r18
    5512:	0f 90       	pop	r0
    5514:	0b be       	out	0x3b, r0	; 59
    5516:	0f 90       	pop	r0
    5518:	0f be       	out	0x3f, r0	; 63
    551a:	0f 90       	pop	r0
    551c:	1f 90       	pop	r1
    551e:	18 95       	reti

00005520 <__vector_52>:
    5520:	1f 92       	push	r1
    5522:	0f 92       	push	r0
    5524:	0f b6       	in	r0, 0x3f	; 63
    5526:	0f 92       	push	r0
    5528:	11 24       	eor	r1, r1
    552a:	0b b6       	in	r0, 0x3b	; 59
    552c:	0f 92       	push	r0
    552e:	2f 93       	push	r18
    5530:	8f 93       	push	r24
    5532:	9f 93       	push	r25
    5534:	af 93       	push	r26
    5536:	bf 93       	push	r27
    5538:	ef 93       	push	r30
    553a:	ff 93       	push	r31
    553c:	e0 91 50 09 	lds	r30, 0x0950	; 0x800950 <_ser_handle+0x4>
    5540:	f0 91 51 09 	lds	r31, 0x0951	; 0x800951 <_ser_handle+0x5>
    5544:	30 97       	sbiw	r30, 0x00	; 0
    5546:	b9 f0       	breq	.+46     	; 0x5576 <__vector_52+0x56>
    5548:	02 80       	ldd	r0, Z+2	; 0x02
    554a:	f3 81       	ldd	r31, Z+3	; 0x03
    554c:	e0 2d       	mov	r30, r0
    554e:	93 81       	ldd	r25, Z+3	; 0x03
    5550:	82 81       	ldd	r24, Z+2	; 0x02
    5552:	98 17       	cp	r25, r24
    5554:	b1 f0       	breq	.+44     	; 0x5582 <__vector_52+0x62>
    5556:	92 81       	ldd	r25, Z+2	; 0x02
    5558:	85 81       	ldd	r24, Z+5	; 0x05
    555a:	28 2f       	mov	r18, r24
    555c:	26 95       	lsr	r18
    555e:	29 23       	and	r18, r25
    5560:	a0 81       	ld	r26, Z
    5562:	b1 81       	ldd	r27, Z+1	; 0x01
    5564:	a2 0f       	add	r26, r18
    5566:	b1 1d       	adc	r27, r1
    5568:	2c 91       	ld	r18, X
    556a:	9f 5f       	subi	r25, 0xFF	; 255
    556c:	89 23       	and	r24, r25
    556e:	82 83       	std	Z+2, r24	; 0x02
    5570:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5574:	0b c0       	rjmp	.+22     	; 0x558c <__vector_52+0x6c>
    5576:	e1 ed       	ldi	r30, 0xD1	; 209
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	80 81       	ld	r24, Z
    557c:	8f 7d       	andi	r24, 0xDF	; 223
    557e:	80 83       	st	Z, r24
    5580:	05 c0       	rjmp	.+10     	; 0x558c <__vector_52+0x6c>
    5582:	e1 ed       	ldi	r30, 0xD1	; 209
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	80 81       	ld	r24, Z
    5588:	8f 7d       	andi	r24, 0xDF	; 223
    558a:	80 83       	st	Z, r24
    558c:	ff 91       	pop	r31
    558e:	ef 91       	pop	r30
    5590:	bf 91       	pop	r27
    5592:	af 91       	pop	r26
    5594:	9f 91       	pop	r25
    5596:	8f 91       	pop	r24
    5598:	2f 91       	pop	r18
    559a:	0f 90       	pop	r0
    559c:	0b be       	out	0x3b, r0	; 59
    559e:	0f 90       	pop	r0
    55a0:	0f be       	out	0x3f, r0	; 63
    55a2:	0f 90       	pop	r0
    55a4:	1f 90       	pop	r1
    55a6:	18 95       	reti

000055a8 <__vector_54>:
    55a8:	1f 92       	push	r1
    55aa:	0f 92       	push	r0
    55ac:	0f b6       	in	r0, 0x3f	; 63
    55ae:	0f 92       	push	r0
    55b0:	11 24       	eor	r1, r1
    55b2:	0b b6       	in	r0, 0x3b	; 59
    55b4:	0f 92       	push	r0
    55b6:	2f 93       	push	r18
    55b8:	3f 93       	push	r19
    55ba:	4f 93       	push	r20
    55bc:	5f 93       	push	r21
    55be:	6f 93       	push	r22
    55c0:	7f 93       	push	r23
    55c2:	8f 93       	push	r24
    55c4:	9f 93       	push	r25
    55c6:	af 93       	push	r26
    55c8:	bf 93       	push	r27
    55ca:	cf 93       	push	r28
    55cc:	df 93       	push	r29
    55ce:	ef 93       	push	r30
    55d0:	ff 93       	push	r31
    55d2:	a0 91 52 09 	lds	r26, 0x0952	; 0x800952 <_ser_handle+0x6>
    55d6:	b0 91 53 09 	lds	r27, 0x0953	; 0x800953 <_ser_handle+0x7>
    55da:	10 97       	sbiw	r26, 0x00	; 0
    55dc:	11 f1       	breq	.+68     	; 0x5622 <__vector_54+0x7a>
    55de:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    55e2:	14 96       	adiw	r26, 0x04	; 4
    55e4:	ed 91       	ld	r30, X+
    55e6:	fc 91       	ld	r31, X
    55e8:	15 97       	sbiw	r26, 0x05	; 5
    55ea:	93 81       	ldd	r25, Z+3	; 0x03
    55ec:	82 81       	ldd	r24, Z+2	; 0x02
    55ee:	25 81       	ldd	r18, Z+5	; 0x05
    55f0:	98 1b       	sub	r25, r24
    55f2:	92 23       	and	r25, r18
    55f4:	84 81       	ldd	r24, Z+4	; 0x04
    55f6:	98 17       	cp	r25, r24
    55f8:	61 f0       	breq	.+24     	; 0x5612 <__vector_54+0x6a>
    55fa:	83 81       	ldd	r24, Z+3	; 0x03
    55fc:	26 95       	lsr	r18
    55fe:	28 23       	and	r18, r24
    5600:	c0 81       	ld	r28, Z
    5602:	d1 81       	ldd	r29, Z+1	; 0x01
    5604:	c2 0f       	add	r28, r18
    5606:	d1 1d       	adc	r29, r1
    5608:	68 83       	st	Y, r22
    560a:	8f 5f       	subi	r24, 0xFF	; 255
    560c:	95 81       	ldd	r25, Z+5	; 0x05
    560e:	89 23       	and	r24, r25
    5610:	83 83       	std	Z+3, r24	; 0x03
    5612:	16 96       	adiw	r26, 0x06	; 6
    5614:	ed 91       	ld	r30, X+
    5616:	fc 91       	ld	r31, X
    5618:	17 97       	sbiw	r26, 0x07	; 7
    561a:	30 97       	sbiw	r30, 0x00	; 0
    561c:	11 f0       	breq	.+4      	; 0x5622 <__vector_54+0x7a>
    561e:	cd 01       	movw	r24, r26
    5620:	19 95       	eicall
    5622:	ff 91       	pop	r31
    5624:	ef 91       	pop	r30
    5626:	df 91       	pop	r29
    5628:	cf 91       	pop	r28
    562a:	bf 91       	pop	r27
    562c:	af 91       	pop	r26
    562e:	9f 91       	pop	r25
    5630:	8f 91       	pop	r24
    5632:	7f 91       	pop	r23
    5634:	6f 91       	pop	r22
    5636:	5f 91       	pop	r21
    5638:	4f 91       	pop	r20
    563a:	3f 91       	pop	r19
    563c:	2f 91       	pop	r18
    563e:	0f 90       	pop	r0
    5640:	0b be       	out	0x3b, r0	; 59
    5642:	0f 90       	pop	r0
    5644:	0f be       	out	0x3f, r0	; 63
    5646:	0f 90       	pop	r0
    5648:	1f 90       	pop	r1
    564a:	18 95       	reti

0000564c <__vector_55>:
    564c:	1f 92       	push	r1
    564e:	0f 92       	push	r0
    5650:	0f b6       	in	r0, 0x3f	; 63
    5652:	0f 92       	push	r0
    5654:	11 24       	eor	r1, r1
    5656:	0b b6       	in	r0, 0x3b	; 59
    5658:	0f 92       	push	r0
    565a:	2f 93       	push	r18
    565c:	8f 93       	push	r24
    565e:	9f 93       	push	r25
    5660:	af 93       	push	r26
    5662:	bf 93       	push	r27
    5664:	ef 93       	push	r30
    5666:	ff 93       	push	r31
    5668:	e0 91 52 09 	lds	r30, 0x0952	; 0x800952 <_ser_handle+0x6>
    566c:	f0 91 53 09 	lds	r31, 0x0953	; 0x800953 <_ser_handle+0x7>
    5670:	30 97       	sbiw	r30, 0x00	; 0
    5672:	b9 f0       	breq	.+46     	; 0x56a2 <__vector_55+0x56>
    5674:	02 80       	ldd	r0, Z+2	; 0x02
    5676:	f3 81       	ldd	r31, Z+3	; 0x03
    5678:	e0 2d       	mov	r30, r0
    567a:	93 81       	ldd	r25, Z+3	; 0x03
    567c:	82 81       	ldd	r24, Z+2	; 0x02
    567e:	98 17       	cp	r25, r24
    5680:	b1 f0       	breq	.+44     	; 0x56ae <__vector_55+0x62>
    5682:	92 81       	ldd	r25, Z+2	; 0x02
    5684:	85 81       	ldd	r24, Z+5	; 0x05
    5686:	28 2f       	mov	r18, r24
    5688:	26 95       	lsr	r18
    568a:	29 23       	and	r18, r25
    568c:	a0 81       	ld	r26, Z
    568e:	b1 81       	ldd	r27, Z+1	; 0x01
    5690:	a2 0f       	add	r26, r18
    5692:	b1 1d       	adc	r27, r1
    5694:	2c 91       	ld	r18, X
    5696:	9f 5f       	subi	r25, 0xFF	; 255
    5698:	89 23       	and	r24, r25
    569a:	82 83       	std	Z+2, r24	; 0x02
    569c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    56a0:	0b c0       	rjmp	.+22     	; 0x56b8 <__vector_55+0x6c>
    56a2:	e1 e3       	ldi	r30, 0x31	; 49
    56a4:	f1 e0       	ldi	r31, 0x01	; 1
    56a6:	80 81       	ld	r24, Z
    56a8:	8f 7d       	andi	r24, 0xDF	; 223
    56aa:	80 83       	st	Z, r24
    56ac:	05 c0       	rjmp	.+10     	; 0x56b8 <__vector_55+0x6c>
    56ae:	e1 e3       	ldi	r30, 0x31	; 49
    56b0:	f1 e0       	ldi	r31, 0x01	; 1
    56b2:	80 81       	ld	r24, Z
    56b4:	8f 7d       	andi	r24, 0xDF	; 223
    56b6:	80 83       	st	Z, r24
    56b8:	ff 91       	pop	r31
    56ba:	ef 91       	pop	r30
    56bc:	bf 91       	pop	r27
    56be:	af 91       	pop	r26
    56c0:	9f 91       	pop	r25
    56c2:	8f 91       	pop	r24
    56c4:	2f 91       	pop	r18
    56c6:	0f 90       	pop	r0
    56c8:	0b be       	out	0x3b, r0	; 59
    56ca:	0f 90       	pop	r0
    56cc:	0f be       	out	0x3f, r0	; 63
    56ce:	0f 90       	pop	r0
    56d0:	1f 90       	pop	r1
    56d2:	18 95       	reti

000056d4 <fifo_init>:
    56d4:	fc 01       	movw	r30, r24
    56d6:	41 11       	cpse	r20, r1
    56d8:	02 c0       	rjmp	.+4      	; 0x56de <fifo_init+0xa>
    56da:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <abort>
    56de:	84 2f       	mov	r24, r20
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	9c 01       	movw	r18, r24
    56e4:	21 50       	subi	r18, 0x01	; 1
    56e6:	31 09       	sbc	r19, r1
    56e8:	82 23       	and	r24, r18
    56ea:	93 23       	and	r25, r19
    56ec:	89 2b       	or	r24, r25
    56ee:	11 f0       	breq	.+4      	; 0x56f4 <fifo_init+0x20>
    56f0:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <abort>
    56f4:	41 38       	cpi	r20, 0x81	; 129
    56f6:	10 f0       	brcs	.+4      	; 0x56fc <fifo_init+0x28>
    56f8:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <abort>
    56fc:	12 82       	std	Z+2, r1	; 0x02
    56fe:	13 82       	std	Z+3, r1	; 0x03
    5700:	44 83       	std	Z+4, r20	; 0x04
    5702:	44 0f       	add	r20, r20
    5704:	41 50       	subi	r20, 0x01	; 1
    5706:	45 83       	std	Z+5, r20	; 0x05
    5708:	71 83       	std	Z+1, r23	; 0x01
    570a:	60 83       	st	Z, r22
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	08 95       	ret

00005712 <hal_create>:
    5712:	e2 eb       	ldi	r30, 0xB2	; 178
    5714:	fa e0       	ldi	r31, 0x0A	; 10
    5716:	2a ed       	ldi	r18, 0xDA	; 218
    5718:	31 e3       	ldi	r19, 0x31	; 49
    571a:	31 83       	std	Z+1, r19	; 0x01
    571c:	20 83       	st	Z, r18
    571e:	2d ed       	ldi	r18, 0xDD	; 221
    5720:	31 e3       	ldi	r19, 0x31	; 49
    5722:	33 83       	std	Z+3, r19	; 0x03
    5724:	22 83       	std	Z+2, r18	; 0x02
    5726:	28 ee       	ldi	r18, 0xE8	; 232
    5728:	31 e3       	ldi	r19, 0x31	; 49
    572a:	35 83       	std	Z+5, r19	; 0x05
    572c:	24 83       	std	Z+4, r18	; 0x04
    572e:	2c ee       	ldi	r18, 0xEC	; 236
    5730:	31 e3       	ldi	r19, 0x31	; 49
    5732:	37 83       	std	Z+7, r19	; 0x07
    5734:	26 83       	std	Z+6, r18	; 0x06
    5736:	22 ef       	ldi	r18, 0xF2	; 242
    5738:	31 e3       	ldi	r19, 0x31	; 49
    573a:	31 87       	std	Z+9, r19	; 0x09
    573c:	20 87       	std	Z+8, r18	; 0x08
    573e:	2e ef       	ldi	r18, 0xFE	; 254
    5740:	31 e3       	ldi	r19, 0x31	; 49
    5742:	33 87       	std	Z+11, r19	; 0x0b
    5744:	22 87       	std	Z+10, r18	; 0x0a
    5746:	23 e0       	ldi	r18, 0x03	; 3
    5748:	32 e3       	ldi	r19, 0x32	; 50
    574a:	35 87       	std	Z+13, r19	; 0x0d
    574c:	24 87       	std	Z+12, r18	; 0x0c
    574e:	2f e0       	ldi	r18, 0x0F	; 15
    5750:	32 e3       	ldi	r19, 0x32	; 50
    5752:	37 87       	std	Z+15, r19	; 0x0f
    5754:	26 87       	std	Z+14, r18	; 0x0e
    5756:	2f ee       	ldi	r18, 0xEF	; 239
    5758:	31 e3       	ldi	r19, 0x31	; 49
    575a:	31 8b       	std	Z+17, r19	; 0x11
    575c:	20 8b       	std	Z+16, r18	; 0x10
    575e:	24 e1       	ldi	r18, 0x14	; 20
    5760:	32 e3       	ldi	r19, 0x32	; 50
    5762:	33 8b       	std	Z+19, r19	; 0x13
    5764:	22 8b       	std	Z+18, r18	; 0x12
    5766:	21 e2       	ldi	r18, 0x21	; 33
    5768:	32 e3       	ldi	r19, 0x32	; 50
    576a:	35 8b       	std	Z+21, r19	; 0x15
    576c:	24 8b       	std	Z+20, r18	; 0x14
    576e:	68 2f       	mov	r22, r24
    5770:	cf 01       	movw	r24, r30
    5772:	2f c1       	rjmp	.+606    	; 0x59d2 <led_create>
    5774:	08 95       	ret

00005776 <_hihTwiCallback>:
    5776:	65 30       	cpi	r22, 0x05	; 5
    5778:	f1 f4       	brne	.+60     	; 0x57b6 <_hihTwiCallback+0x40>
    577a:	fa 01       	movw	r30, r20
    577c:	80 81       	ld	r24, Z
    577e:	8f 73       	andi	r24, 0x3F	; 63
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	98 2f       	mov	r25, r24
    5784:	88 27       	eor	r24, r24
    5786:	21 81       	ldd	r18, Z+1	; 0x01
    5788:	82 2b       	or	r24, r18
    578a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    578e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    5792:	82 81       	ldd	r24, Z+2	; 0x02
    5794:	f0 e4       	ldi	r31, 0x40	; 64
    5796:	8f 9f       	mul	r24, r31
    5798:	c0 01       	movw	r24, r0
    579a:	11 24       	eor	r1, r1
    579c:	fa 01       	movw	r30, r20
    579e:	23 81       	ldd	r18, Z+3	; 0x03
    57a0:	26 95       	lsr	r18
    57a2:	26 95       	lsr	r18
    57a4:	82 2b       	or	r24, r18
    57a6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    57aa:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    57ae:	81 e0       	ldi	r24, 0x01	; 1
    57b0:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <_measuringIsReady>
    57b4:	08 95       	ret
    57b6:	64 30       	cpi	r22, 0x04	; 4
    57b8:	51 f0       	breq	.+20     	; 0x57ce <_hihTwiCallback+0x58>
    57ba:	80 e0       	ldi	r24, 0x00	; 0
    57bc:	90 e4       	ldi	r25, 0x40	; 64
    57be:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    57c2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    57c6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    57ca:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    57ce:	08 95       	ret

000057d0 <hih8120Create>:
    57d0:	0f 93       	push	r16
    57d2:	1f 93       	push	r17
    57d4:	0b eb       	ldi	r16, 0xBB	; 187
    57d6:	1b e2       	ldi	r17, 0x2B	; 43
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	34 e2       	ldi	r19, 0x24	; 36
    57dc:	44 ef       	ldi	r20, 0xF4	; 244
    57de:	50 e0       	ldi	r21, 0x00	; 0
    57e0:	60 e0       	ldi	r22, 0x00	; 0
    57e2:	87 e2       	ldi	r24, 0x27	; 39
    57e4:	ff d6       	rcall	.+3582   	; 0x65e4 <twiCreate>
    57e6:	90 93 56 09 	sts	0x0956, r25	; 0x800956 <_hih8120Handler+0x1>
    57ea:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <_hih8120Handler>
    57ee:	21 e0       	ldi	r18, 0x01	; 1
    57f0:	89 2b       	or	r24, r25
    57f2:	09 f0       	breq	.+2      	; 0x57f6 <hih8120Create+0x26>
    57f4:	20 e0       	ldi	r18, 0x00	; 0
    57f6:	82 2f       	mov	r24, r18
    57f8:	1f 91       	pop	r17
    57fa:	0f 91       	pop	r16
    57fc:	08 95       	ret

000057fe <hih8120Wakeup>:
    57fe:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <_hih8120Handler>
    5802:	90 91 56 09 	lds	r25, 0x0956	; 0x800956 <_hih8120Handler+0x1>
    5806:	00 97       	sbiw	r24, 0x00	; 0
    5808:	51 f0       	breq	.+20     	; 0x581e <hih8120Wakeup+0x20>
    580a:	40 e0       	ldi	r20, 0x00	; 0
    580c:	60 e0       	ldi	r22, 0x00	; 0
    580e:	70 e0       	ldi	r23, 0x00	; 0
    5810:	3a d7       	rcall	.+3700   	; 0x6686 <twiTransmit>
    5812:	84 30       	cpi	r24, 0x04	; 4
    5814:	31 f4       	brne	.+12     	; 0x5822 <hih8120Wakeup+0x24>
    5816:	10 92 54 09 	sts	0x0954, r1	; 0x800954 <_measuringIsReady>
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	08 95       	ret
    581e:	82 e0       	ldi	r24, 0x02	; 2
    5820:	08 95       	ret
    5822:	83 e0       	ldi	r24, 0x03	; 3
    5824:	08 95       	ret

00005826 <hih8120Meassure>:
    5826:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <_hih8120Handler>
    582a:	90 91 56 09 	lds	r25, 0x0956	; 0x800956 <_hih8120Handler+0x1>
    582e:	00 97       	sbiw	r24, 0x00	; 0
    5830:	31 f0       	breq	.+12     	; 0x583e <hih8120Meassure+0x18>
    5832:	64 e0       	ldi	r22, 0x04	; 4
    5834:	74 d7       	rcall	.+3816   	; 0x671e <twiReceive>
    5836:	85 30       	cpi	r24, 0x05	; 5
    5838:	21 f0       	breq	.+8      	; 0x5842 <hih8120Meassure+0x1c>
    583a:	83 e0       	ldi	r24, 0x03	; 3
    583c:	08 95       	ret
    583e:	82 e0       	ldi	r24, 0x02	; 2
    5840:	08 95       	ret
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	08 95       	ret

00005846 <hih8120GetTemperature>:
    5846:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    584a:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    584e:	80 e0       	ldi	r24, 0x00	; 0
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <__floatunsisf>
    5856:	20 e0       	ldi	r18, 0x00	; 0
    5858:	30 e0       	ldi	r19, 0x00	; 0
    585a:	45 e2       	ldi	r20, 0x25	; 37
    585c:	53 e4       	ldi	r21, 0x43	; 67
    585e:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__mulsf3>
    5862:	20 e0       	ldi	r18, 0x00	; 0
    5864:	38 ef       	ldi	r19, 0xF8	; 248
    5866:	4f e7       	ldi	r20, 0x7F	; 127
    5868:	56 e4       	ldi	r21, 0x46	; 70
    586a:	0e 94 12 35 	call	0x6a24	; 0x6a24 <__divsf3>
    586e:	20 e0       	ldi	r18, 0x00	; 0
    5870:	30 e0       	ldi	r19, 0x00	; 0
    5872:	40 e2       	ldi	r20, 0x20	; 32
    5874:	52 e4       	ldi	r21, 0x42	; 66
    5876:	0c 94 a9 34 	jmp	0x6952	; 0x6952 <__subsf3>
    587a:	08 95       	ret

0000587c <hih8120GetTemperature_x10>:
    587c:	e4 df       	rcall	.-56     	; 0x5846 <hih8120GetTemperature>
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	40 e2       	ldi	r20, 0x20	; 32
    5884:	51 e4       	ldi	r21, 0x41	; 65
    5886:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__mulsf3>
    588a:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <__fixsfsi>
    588e:	cb 01       	movw	r24, r22
    5890:	08 95       	ret

00005892 <_turn_off>:
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	fc 01       	movw	r30, r24
    589a:	ee 0f       	add	r30, r30
    589c:	ff 1f       	adc	r31, r31
    589e:	e8 0f       	add	r30, r24
    58a0:	f9 1f       	adc	r31, r25
    58a2:	ee 0f       	add	r30, r30
    58a4:	ff 1f       	adc	r31, r31
    58a6:	e9 5a       	subi	r30, 0xA9	; 169
    58a8:	f6 4f       	sbci	r31, 0xF6	; 246
    58aa:	23 81       	ldd	r18, Z+3	; 0x03
    58ac:	21 11       	cpse	r18, r1
    58ae:	0a c0       	rjmp	.+20     	; 0x58c4 <_turn_off+0x32>
    58b0:	ef 01       	movw	r28, r30
    58b2:	e0 91 ba 0a 	lds	r30, 0x0ABA	; 0x800aba <register_access+0x8>
    58b6:	f0 91 bb 0a 	lds	r31, 0x0ABB	; 0x800abb <register_access+0x9>
    58ba:	6a 81       	ldd	r22, Y+2	; 0x02
    58bc:	88 81       	ld	r24, Y
    58be:	99 81       	ldd	r25, Y+1	; 0x01
    58c0:	19 95       	eicall
    58c2:	12 c0       	rjmp	.+36     	; 0x58e8 <_turn_off+0x56>
    58c4:	dc 01       	movw	r26, r24
    58c6:	aa 0f       	add	r26, r26
    58c8:	bb 1f       	adc	r27, r27
    58ca:	ed 01       	movw	r28, r26
    58cc:	c8 0f       	add	r28, r24
    58ce:	d9 1f       	adc	r29, r25
    58d0:	cc 0f       	add	r28, r28
    58d2:	dd 1f       	adc	r29, r29
    58d4:	c9 5a       	subi	r28, 0xA9	; 169
    58d6:	d6 4f       	sbci	r29, 0xF6	; 246
    58d8:	e0 91 c4 0a 	lds	r30, 0x0AC4	; 0x800ac4 <register_access+0x12>
    58dc:	f0 91 c5 0a 	lds	r31, 0x0AC5	; 0x800ac5 <register_access+0x13>
    58e0:	6a 81       	ldd	r22, Y+2	; 0x02
    58e2:	88 81       	ld	r24, Y
    58e4:	99 81       	ldd	r25, Y+1	; 0x01
    58e6:	19 95       	eicall
    58e8:	df 91       	pop	r29
    58ea:	cf 91       	pop	r28
    58ec:	08 95       	ret

000058ee <_turn_on>:
    58ee:	cf 93       	push	r28
    58f0:	df 93       	push	r29
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	fc 01       	movw	r30, r24
    58f6:	ee 0f       	add	r30, r30
    58f8:	ff 1f       	adc	r31, r31
    58fa:	e8 0f       	add	r30, r24
    58fc:	f9 1f       	adc	r31, r25
    58fe:	ee 0f       	add	r30, r30
    5900:	ff 1f       	adc	r31, r31
    5902:	e9 5a       	subi	r30, 0xA9	; 169
    5904:	f6 4f       	sbci	r31, 0xF6	; 246
    5906:	23 81       	ldd	r18, Z+3	; 0x03
    5908:	21 11       	cpse	r18, r1
    590a:	0a c0       	rjmp	.+20     	; 0x5920 <_turn_on+0x32>
    590c:	ef 01       	movw	r28, r30
    590e:	e0 91 c4 0a 	lds	r30, 0x0AC4	; 0x800ac4 <register_access+0x12>
    5912:	f0 91 c5 0a 	lds	r31, 0x0AC5	; 0x800ac5 <register_access+0x13>
    5916:	6a 81       	ldd	r22, Y+2	; 0x02
    5918:	88 81       	ld	r24, Y
    591a:	99 81       	ldd	r25, Y+1	; 0x01
    591c:	19 95       	eicall
    591e:	12 c0       	rjmp	.+36     	; 0x5944 <_turn_on+0x56>
    5920:	dc 01       	movw	r26, r24
    5922:	aa 0f       	add	r26, r26
    5924:	bb 1f       	adc	r27, r27
    5926:	ed 01       	movw	r28, r26
    5928:	c8 0f       	add	r28, r24
    592a:	d9 1f       	adc	r29, r25
    592c:	cc 0f       	add	r28, r28
    592e:	dd 1f       	adc	r29, r29
    5930:	c9 5a       	subi	r28, 0xA9	; 169
    5932:	d6 4f       	sbci	r29, 0xF6	; 246
    5934:	e0 91 ba 0a 	lds	r30, 0x0ABA	; 0x800aba <register_access+0x8>
    5938:	f0 91 bb 0a 	lds	r31, 0x0ABB	; 0x800abb <register_access+0x9>
    593c:	6a 81       	ldd	r22, Y+2	; 0x02
    593e:	88 81       	ld	r24, Y
    5940:	99 81       	ldd	r25, Y+1	; 0x01
    5942:	19 95       	eicall
    5944:	df 91       	pop	r29
    5946:	cf 91       	pop	r28
    5948:	08 95       	ret

0000594a <_hal_led_task>:
    594a:	89 e7       	ldi	r24, 0x79	; 121
    594c:	95 e0       	ldi	r25, 0x05	; 5
    594e:	0e 94 50 38 	call	0x70a0	; 0x70a0 <puts>
    5952:	0f 2e       	mov	r0, r31
    5954:	f2 eb       	ldi	r31, 0xB2	; 178
    5956:	cf 2e       	mov	r12, r31
    5958:	fa e0       	ldi	r31, 0x0A	; 10
    595a:	df 2e       	mov	r13, r31
    595c:	f0 2d       	mov	r31, r0
    595e:	04 e0       	ldi	r16, 0x04	; 4
    5960:	c7 e5       	ldi	r28, 0x57	; 87
    5962:	d9 e0       	ldi	r29, 0x09	; 9
    5964:	10 e0       	ldi	r17, 0x00	; 0
    5966:	8c 81       	ldd	r24, Y+4	; 0x04
    5968:	81 30       	cpi	r24, 0x01	; 1
    596a:	69 f0       	breq	.+26     	; 0x5986 <_hal_led_task+0x3c>
    596c:	e8 f0       	brcs	.+58     	; 0x59a8 <_hal_led_task+0x5e>
    596e:	82 30       	cpi	r24, 0x02	; 2
    5970:	39 f5       	brne	.+78     	; 0x59c0 <_hal_led_task+0x76>
    5972:	d6 01       	movw	r26, r12
    5974:	1c 96       	adiw	r26, 0x0c	; 12
    5976:	ed 91       	ld	r30, X+
    5978:	fc 91       	ld	r31, X
    597a:	1d 97       	sbiw	r26, 0x0d	; 13
    597c:	6a 81       	ldd	r22, Y+2	; 0x02
    597e:	88 81       	ld	r24, Y
    5980:	99 81       	ldd	r25, Y+1	; 0x01
    5982:	19 95       	eicall
    5984:	1d c0       	rjmp	.+58     	; 0x59c0 <_hal_led_task+0x76>
    5986:	8d 81       	ldd	r24, Y+5	; 0x05
    5988:	8f 5f       	subi	r24, 0xFF	; 255
    598a:	8a 30       	cpi	r24, 0x0A	; 10
    598c:	10 f4       	brcc	.+4      	; 0x5992 <_hal_led_task+0x48>
    598e:	8d 83       	std	Y+5, r24	; 0x05
    5990:	17 c0       	rjmp	.+46     	; 0x59c0 <_hal_led_task+0x76>
    5992:	1d 82       	std	Y+5, r1	; 0x05
    5994:	d6 01       	movw	r26, r12
    5996:	1c 96       	adiw	r26, 0x0c	; 12
    5998:	ed 91       	ld	r30, X+
    599a:	fc 91       	ld	r31, X
    599c:	1d 97       	sbiw	r26, 0x0d	; 13
    599e:	6a 81       	ldd	r22, Y+2	; 0x02
    59a0:	88 81       	ld	r24, Y
    59a2:	99 81       	ldd	r25, Y+1	; 0x01
    59a4:	19 95       	eicall
    59a6:	0c c0       	rjmp	.+24     	; 0x59c0 <_hal_led_task+0x76>
    59a8:	8d 81       	ldd	r24, Y+5	; 0x05
    59aa:	88 23       	and	r24, r24
    59ac:	31 f0       	breq	.+12     	; 0x59ba <_hal_led_task+0x70>
    59ae:	81 2f       	mov	r24, r17
    59b0:	9e df       	rcall	.-196    	; 0x58ee <_turn_on>
    59b2:	8d 81       	ldd	r24, Y+5	; 0x05
    59b4:	81 50       	subi	r24, 0x01	; 1
    59b6:	8d 83       	std	Y+5, r24	; 0x05
    59b8:	03 c0       	rjmp	.+6      	; 0x59c0 <_hal_led_task+0x76>
    59ba:	0c 83       	std	Y+4, r16	; 0x04
    59bc:	81 2f       	mov	r24, r17
    59be:	69 df       	rcall	.-302    	; 0x5892 <_turn_off>
    59c0:	1f 5f       	subi	r17, 0xFF	; 255
    59c2:	26 96       	adiw	r28, 0x06	; 6
    59c4:	14 30       	cpi	r17, 0x04	; 4
    59c6:	79 f6       	brne	.-98     	; 0x5966 <_hal_led_task+0x1c>
    59c8:	85 e0       	ldi	r24, 0x05	; 5
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <vTaskDelay>
    59d0:	c7 cf       	rjmp	.-114    	; 0x5960 <_hal_led_task+0x16>

000059d2 <led_create>:
    59d2:	cf 92       	push	r12
    59d4:	df 92       	push	r13
    59d6:	ef 92       	push	r14
    59d8:	ff 92       	push	r15
    59da:	0f 93       	push	r16
    59dc:	1f 93       	push	r17
    59de:	cf 93       	push	r28
    59e0:	df 93       	push	r29
    59e2:	06 2f       	mov	r16, r22
    59e4:	0f 2e       	mov	r0, r31
    59e6:	f2 eb       	ldi	r31, 0xB2	; 178
    59e8:	ef 2e       	mov	r14, r31
    59ea:	fa e0       	ldi	r31, 0x0A	; 10
    59ec:	ff 2e       	mov	r15, r31
    59ee:	f0 2d       	mov	r31, r0
    59f0:	d7 01       	movw	r26, r14
    59f2:	18 96       	adiw	r26, 0x08	; 8
    59f4:	ed 91       	ld	r30, X+
    59f6:	fc 91       	ld	r31, X
    59f8:	19 97       	sbiw	r26, 0x09	; 9
    59fa:	66 e0       	ldi	r22, 0x06	; 6
    59fc:	87 e2       	ldi	r24, 0x27	; 39
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	19 95       	eicall
    5a02:	c7 e5       	ldi	r28, 0x57	; 87
    5a04:	d9 e0       	ldi	r29, 0x09	; 9
    5a06:	0f 2e       	mov	r0, r31
    5a08:	f8 e2       	ldi	r31, 0x28	; 40
    5a0a:	cf 2e       	mov	r12, r31
    5a0c:	d1 2c       	mov	r13, r1
    5a0e:	f0 2d       	mov	r31, r0
    5a10:	d9 82       	std	Y+1, r13	; 0x01
    5a12:	c8 82       	st	Y, r12
    5a14:	86 e0       	ldi	r24, 0x06	; 6
    5a16:	8a 83       	std	Y+2, r24	; 0x02
    5a18:	1b 82       	std	Y+3, r1	; 0x03
    5a1a:	14 e0       	ldi	r17, 0x04	; 4
    5a1c:	1c 83       	std	Y+4, r17	; 0x04
    5a1e:	80 e0       	ldi	r24, 0x00	; 0
    5a20:	38 df       	rcall	.-400    	; 0x5892 <_turn_off>
    5a22:	d7 01       	movw	r26, r14
    5a24:	18 96       	adiw	r26, 0x08	; 8
    5a26:	ed 91       	ld	r30, X+
    5a28:	fc 91       	ld	r31, X
    5a2a:	19 97       	sbiw	r26, 0x09	; 9
    5a2c:	67 e0       	ldi	r22, 0x07	; 7
    5a2e:	87 e2       	ldi	r24, 0x27	; 39
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	19 95       	eicall
    5a34:	df 82       	std	Y+7, r13	; 0x07
    5a36:	ce 82       	std	Y+6, r12	; 0x06
    5a38:	87 e0       	ldi	r24, 0x07	; 7
    5a3a:	88 87       	std	Y+8, r24	; 0x08
    5a3c:	19 86       	std	Y+9, r1	; 0x09
    5a3e:	1a 87       	std	Y+10, r17	; 0x0a
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	27 df       	rcall	.-434    	; 0x5892 <_turn_off>
    5a44:	d7 01       	movw	r26, r14
    5a46:	18 96       	adiw	r26, 0x08	; 8
    5a48:	ed 91       	ld	r30, X+
    5a4a:	fc 91       	ld	r31, X
    5a4c:	19 97       	sbiw	r26, 0x09	; 9
    5a4e:	65 e0       	ldi	r22, 0x05	; 5
    5a50:	83 e3       	ldi	r24, 0x33	; 51
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	19 95       	eicall
    5a56:	d7 01       	movw	r26, r14
    5a58:	18 96       	adiw	r26, 0x08	; 8
    5a5a:	ed 91       	ld	r30, X+
    5a5c:	fc 91       	ld	r31, X
    5a5e:	19 97       	sbiw	r26, 0x09	; 9
    5a60:	61 e0       	ldi	r22, 0x01	; 1
    5a62:	84 e3       	ldi	r24, 0x34	; 52
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	19 95       	eicall
    5a68:	84 e3       	ldi	r24, 0x34	; 52
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	9d 87       	std	Y+13, r25	; 0x0d
    5a6e:	8c 87       	std	Y+12, r24	; 0x0c
    5a70:	85 e0       	ldi	r24, 0x05	; 5
    5a72:	8e 87       	std	Y+14, r24	; 0x0e
    5a74:	1f 86       	std	Y+15, r1	; 0x0f
    5a76:	18 8b       	std	Y+16, r17	; 0x10
    5a78:	82 e0       	ldi	r24, 0x02	; 2
    5a7a:	0b df       	rcall	.-490    	; 0x5892 <_turn_off>
    5a7c:	d7 01       	movw	r26, r14
    5a7e:	18 96       	adiw	r26, 0x08	; 8
    5a80:	ed 91       	ld	r30, X+
    5a82:	fc 91       	ld	r31, X
    5a84:	19 97       	sbiw	r26, 0x09	; 9
    5a86:	64 e0       	ldi	r22, 0x04	; 4
    5a88:	81 e0       	ldi	r24, 0x01	; 1
    5a8a:	91 e0       	ldi	r25, 0x01	; 1
    5a8c:	19 95       	eicall
    5a8e:	d7 01       	movw	r26, r14
    5a90:	18 96       	adiw	r26, 0x08	; 8
    5a92:	ed 91       	ld	r30, X+
    5a94:	fc 91       	ld	r31, X
    5a96:	19 97       	sbiw	r26, 0x09	; 9
    5a98:	61 e0       	ldi	r22, 0x01	; 1
    5a9a:	82 e0       	ldi	r24, 0x02	; 2
    5a9c:	91 e0       	ldi	r25, 0x01	; 1
    5a9e:	19 95       	eicall
    5aa0:	82 e0       	ldi	r24, 0x02	; 2
    5aa2:	91 e0       	ldi	r25, 0x01	; 1
    5aa4:	9b 8b       	std	Y+19, r25	; 0x13
    5aa6:	8a 8b       	std	Y+18, r24	; 0x12
    5aa8:	1c 8b       	std	Y+20, r17	; 0x14
    5aaa:	1d 8a       	std	Y+21, r1	; 0x15
    5aac:	1e 8b       	std	Y+22, r17	; 0x16
    5aae:	83 e0       	ldi	r24, 0x03	; 3
    5ab0:	f0 de       	rcall	.-544    	; 0x5892 <_turn_off>
    5ab2:	e1 2c       	mov	r14, r1
    5ab4:	f1 2c       	mov	r15, r1
    5ab6:	20 e0       	ldi	r18, 0x00	; 0
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	40 ec       	ldi	r20, 0xC0	; 192
    5abc:	50 e0       	ldi	r21, 0x00	; 0
    5abe:	60 e9       	ldi	r22, 0x90	; 144
    5ac0:	75 e0       	ldi	r23, 0x05	; 5
    5ac2:	85 ea       	ldi	r24, 0xA5	; 165
    5ac4:	9c e2       	ldi	r25, 0x2C	; 44
    5ac6:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskCreate>
    5aca:	df 91       	pop	r29
    5acc:	cf 91       	pop	r28
    5ace:	1f 91       	pop	r17
    5ad0:	0f 91       	pop	r16
    5ad2:	ff 90       	pop	r15
    5ad4:	ef 90       	pop	r14
    5ad6:	df 90       	pop	r13
    5ad8:	cf 90       	pop	r12
    5ada:	08 95       	ret

00005adc <led_slow_blink>:
    5adc:	0f 93       	push	r16
    5ade:	1f 93       	push	r17
    5ae0:	cf 93       	push	r28
    5ae2:	df 93       	push	r29
    5ae4:	c8 2f       	mov	r28, r24
    5ae6:	d0 e0       	ldi	r29, 0x00	; 0
    5ae8:	8e 01       	movw	r16, r28
    5aea:	00 0f       	add	r16, r16
    5aec:	11 1f       	adc	r17, r17
    5aee:	d8 01       	movw	r26, r16
    5af0:	ac 0f       	add	r26, r28
    5af2:	bd 1f       	adc	r27, r29
    5af4:	aa 0f       	add	r26, r26
    5af6:	bb 1f       	adc	r27, r27
    5af8:	a9 5a       	subi	r26, 0xA9	; 169
    5afa:	b6 4f       	sbci	r27, 0xF6	; 246
    5afc:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <register_access+0xc>
    5b00:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <register_access+0xd>
    5b04:	12 96       	adiw	r26, 0x02	; 2
    5b06:	6c 91       	ld	r22, X
    5b08:	12 97       	sbiw	r26, 0x02	; 2
    5b0a:	8d 91       	ld	r24, X+
    5b0c:	9c 91       	ld	r25, X
    5b0e:	19 95       	eicall
    5b10:	c0 0f       	add	r28, r16
    5b12:	d1 1f       	adc	r29, r17
    5b14:	cc 0f       	add	r28, r28
    5b16:	dd 1f       	adc	r29, r29
    5b18:	c9 5a       	subi	r28, 0xA9	; 169
    5b1a:	d6 4f       	sbci	r29, 0xF6	; 246
    5b1c:	81 e0       	ldi	r24, 0x01	; 1
    5b1e:	8c 83       	std	Y+4, r24	; 0x04
    5b20:	df 91       	pop	r29
    5b22:	cf 91       	pop	r28
    5b24:	1f 91       	pop	r17
    5b26:	0f 91       	pop	r16
    5b28:	08 95       	ret

00005b2a <led_fast_blink>:
    5b2a:	0f 93       	push	r16
    5b2c:	1f 93       	push	r17
    5b2e:	cf 93       	push	r28
    5b30:	df 93       	push	r29
    5b32:	c8 2f       	mov	r28, r24
    5b34:	d0 e0       	ldi	r29, 0x00	; 0
    5b36:	8e 01       	movw	r16, r28
    5b38:	00 0f       	add	r16, r16
    5b3a:	11 1f       	adc	r17, r17
    5b3c:	d8 01       	movw	r26, r16
    5b3e:	ac 0f       	add	r26, r28
    5b40:	bd 1f       	adc	r27, r29
    5b42:	aa 0f       	add	r26, r26
    5b44:	bb 1f       	adc	r27, r27
    5b46:	a9 5a       	subi	r26, 0xA9	; 169
    5b48:	b6 4f       	sbci	r27, 0xF6	; 246
    5b4a:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <register_access+0xc>
    5b4e:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <register_access+0xd>
    5b52:	12 96       	adiw	r26, 0x02	; 2
    5b54:	6c 91       	ld	r22, X
    5b56:	12 97       	sbiw	r26, 0x02	; 2
    5b58:	8d 91       	ld	r24, X+
    5b5a:	9c 91       	ld	r25, X
    5b5c:	19 95       	eicall
    5b5e:	c0 0f       	add	r28, r16
    5b60:	d1 1f       	adc	r29, r17
    5b62:	cc 0f       	add	r28, r28
    5b64:	dd 1f       	adc	r29, r29
    5b66:	c9 5a       	subi	r28, 0xA9	; 169
    5b68:	d6 4f       	sbci	r29, 0xF6	; 246
    5b6a:	82 e0       	ldi	r24, 0x02	; 2
    5b6c:	8c 83       	std	Y+4, r24	; 0x04
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	08 95       	ret

00005b78 <led_led_on>:
    5b78:	28 2f       	mov	r18, r24
    5b7a:	30 e0       	ldi	r19, 0x00	; 0
    5b7c:	f9 01       	movw	r30, r18
    5b7e:	ee 0f       	add	r30, r30
    5b80:	ff 1f       	adc	r31, r31
    5b82:	e2 0f       	add	r30, r18
    5b84:	f3 1f       	adc	r31, r19
    5b86:	ee 0f       	add	r30, r30
    5b88:	ff 1f       	adc	r31, r31
    5b8a:	e9 5a       	subi	r30, 0xA9	; 169
    5b8c:	f6 4f       	sbci	r31, 0xF6	; 246
    5b8e:	93 e0       	ldi	r25, 0x03	; 3
    5b90:	94 83       	std	Z+4, r25	; 0x04
    5b92:	ad ce       	rjmp	.-678    	; 0x58ee <_turn_on>
    5b94:	08 95       	ret

00005b96 <led_led_off>:
    5b96:	28 2f       	mov	r18, r24
    5b98:	30 e0       	ldi	r19, 0x00	; 0
    5b9a:	f9 01       	movw	r30, r18
    5b9c:	ee 0f       	add	r30, r30
    5b9e:	ff 1f       	adc	r31, r31
    5ba0:	e2 0f       	add	r30, r18
    5ba2:	f3 1f       	adc	r31, r19
    5ba4:	ee 0f       	add	r30, r30
    5ba6:	ff 1f       	adc	r31, r31
    5ba8:	e9 5a       	subi	r30, 0xA9	; 169
    5baa:	f6 4f       	sbci	r31, 0xF6	; 246
    5bac:	94 e0       	ldi	r25, 0x04	; 4
    5bae:	94 83       	std	Z+4, r25	; 0x04
    5bb0:	70 ce       	rjmp	.-800    	; 0x5892 <_turn_off>
    5bb2:	08 95       	ret

00005bb4 <led_long_puls>:
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	fc 01       	movw	r30, r24
    5bb8:	ee 0f       	add	r30, r30
    5bba:	ff 1f       	adc	r31, r31
    5bbc:	df 01       	movw	r26, r30
    5bbe:	a8 0f       	add	r26, r24
    5bc0:	b9 1f       	adc	r27, r25
    5bc2:	aa 0f       	add	r26, r26
    5bc4:	bb 1f       	adc	r27, r27
    5bc6:	a9 5a       	subi	r26, 0xA9	; 169
    5bc8:	b6 4f       	sbci	r27, 0xF6	; 246
    5bca:	24 e0       	ldi	r18, 0x04	; 4
    5bcc:	15 96       	adiw	r26, 0x05	; 5
    5bce:	2c 93       	st	X, r18
    5bd0:	15 97       	sbiw	r26, 0x05	; 5
    5bd2:	fd 01       	movw	r30, r26
    5bd4:	14 82       	std	Z+4, r1	; 0x04
    5bd6:	08 95       	ret

00005bd8 <led_short_puls>:
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	fc 01       	movw	r30, r24
    5bdc:	ee 0f       	add	r30, r30
    5bde:	ff 1f       	adc	r31, r31
    5be0:	df 01       	movw	r26, r30
    5be2:	a8 0f       	add	r26, r24
    5be4:	b9 1f       	adc	r27, r25
    5be6:	aa 0f       	add	r26, r26
    5be8:	bb 1f       	adc	r27, r27
    5bea:	a9 5a       	subi	r26, 0xA9	; 169
    5bec:	b6 4f       	sbci	r27, 0xF6	; 246
    5bee:	21 e0       	ldi	r18, 0x01	; 1
    5bf0:	15 96       	adiw	r26, 0x05	; 5
    5bf2:	2c 93       	st	X, r18
    5bf4:	15 97       	sbiw	r26, 0x05	; 5
    5bf6:	fd 01       	movw	r30, r26
    5bf8:	14 82       	std	Z+4, r1	; 0x04
    5bfa:	08 95       	ret

00005bfc <_serial_call_back>:
    5bfc:	0f 93       	push	r16
    5bfe:	1f 93       	push	r17
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	1f 92       	push	r1
    5c06:	1f 92       	push	r1
    5c08:	cd b7       	in	r28, 0x3d	; 61
    5c0a:	de b7       	in	r29, 0x3e	; 62
    5c0c:	8c 01       	movw	r16, r24
    5c0e:	19 82       	std	Y+1, r1	; 0x01
    5c10:	2d c0       	rjmp	.+90     	; 0x5c6c <_serial_call_back+0x70>
    5c12:	e0 91 d3 09 	lds	r30, 0x09D3	; 0x8009d3 <rec_buf_inp.2926>
    5c16:	ec 32       	cpi	r30, 0x2C	; 44
    5c18:	50 f4       	brcc	.+20     	; 0x5c2e <_serial_call_back+0x32>
    5c1a:	81 e0       	ldi	r24, 0x01	; 1
    5c1c:	8e 0f       	add	r24, r30
    5c1e:	80 93 d3 09 	sts	0x09D3, r24	; 0x8009d3 <rec_buf_inp.2926>
    5c22:	f0 e0       	ldi	r31, 0x00	; 0
    5c24:	ed 5f       	subi	r30, 0xFD	; 253
    5c26:	f5 4f       	sbci	r31, 0xF5	; 245
    5c28:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2a:	80 83       	st	Z, r24
    5c2c:	02 c0       	rjmp	.+4      	; 0x5c32 <_serial_call_back+0x36>
    5c2e:	10 92 d3 09 	sts	0x09D3, r1	; 0x8009d3 <rec_buf_inp.2926>
    5c32:	8a 81       	ldd	r24, Y+2	; 0x02
    5c34:	8a 30       	cpi	r24, 0x0A	; 10
    5c36:	d1 f4       	brne	.+52     	; 0x5c6c <_serial_call_back+0x70>
    5c38:	40 91 d3 09 	lds	r20, 0x09D3	; 0x8009d3 <rec_buf_inp.2926>
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	fa 01       	movw	r30, r20
    5c40:	ef 5f       	subi	r30, 0xFF	; 255
    5c42:	f5 4f       	sbci	r31, 0xF5	; 245
    5c44:	10 82       	st	Z, r1
    5c46:	41 50       	subi	r20, 0x01	; 1
    5c48:	51 09       	sbc	r21, r1
    5c4a:	9e 01       	movw	r18, r28
    5c4c:	2f 5f       	subi	r18, 0xFF	; 255
    5c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c50:	63 e0       	ldi	r22, 0x03	; 3
    5c52:	7a e0       	ldi	r23, 0x0A	; 10
    5c54:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <_reply_buffer_handle>
    5c58:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <_reply_buffer_handle+0x1>
    5c5c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <xStreamBufferSendFromISR>
    5c60:	89 81       	ldd	r24, Y+1	; 0x01
    5c62:	81 11       	cpse	r24, r1
    5c64:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYield>
    5c68:	10 92 d3 09 	sts	0x09D3, r1	; 0x8009d3 <rec_buf_inp.2926>
    5c6c:	be 01       	movw	r22, r28
    5c6e:	6e 5f       	subi	r22, 0xFE	; 254
    5c70:	7f 4f       	sbci	r23, 0xFF	; 255
    5c72:	c8 01       	movw	r24, r16
    5c74:	bb da       	rcall	.-2698   	; 0x51ec <serial_get_byte>
    5c76:	88 23       	and	r24, r24
    5c78:	61 f2       	breq	.-104    	; 0x5c12 <_serial_call_back+0x16>
    5c7a:	0f 90       	pop	r0
    5c7c:	0f 90       	pop	r0
    5c7e:	df 91       	pop	r29
    5c80:	cf 91       	pop	r28
    5c82:	1f 91       	pop	r17
    5c84:	0f 91       	pop	r16
    5c86:	08 95       	ret

00005c88 <_upload_message>:
    5c88:	0f 93       	push	r16
    5c8a:	1f 93       	push	r17
    5c8c:	cf 93       	push	r28
    5c8e:	df 93       	push	r29
    5c90:	8c 01       	movw	r16, r24
    5c92:	eb 01       	movw	r28, r22
    5c94:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <_reply_buffer_handle>
    5c98:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <_reply_buffer_handle+0x1>
    5c9c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <xStreamBufferReset>
    5ca0:	b8 01       	movw	r22, r16
    5ca2:	8f e6       	ldi	r24, 0x6F	; 111
    5ca4:	99 e0       	ldi	r25, 0x09	; 9
    5ca6:	0e 94 1e 38 	call	0x703c	; 0x703c <strcpy>
    5caa:	20 97       	sbiw	r28, 0x00	; 0
    5cac:	79 f0       	breq	.+30     	; 0x5ccc <_upload_message+0x44>
    5cae:	ef e6       	ldi	r30, 0x6F	; 111
    5cb0:	f9 e0       	ldi	r31, 0x09	; 9
    5cb2:	01 90       	ld	r0, Z+
    5cb4:	00 20       	and	r0, r0
    5cb6:	e9 f7       	brne	.-6      	; 0x5cb2 <_upload_message+0x2a>
    5cb8:	31 97       	sbiw	r30, 0x01	; 1
    5cba:	80 e2       	ldi	r24, 0x20	; 32
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	91 83       	std	Z+1, r25	; 0x01
    5cc0:	80 83       	st	Z, r24
    5cc2:	be 01       	movw	r22, r28
    5cc4:	8f e6       	ldi	r24, 0x6F	; 111
    5cc6:	99 e0       	ldi	r25, 0x09	; 9
    5cc8:	0e 94 13 38 	call	0x7026	; 0x7026 <strcat>
    5ccc:	ef e6       	ldi	r30, 0x6F	; 111
    5cce:	f9 e0       	ldi	r31, 0x09	; 9
    5cd0:	df 01       	movw	r26, r30
    5cd2:	0d 90       	ld	r0, X+
    5cd4:	00 20       	and	r0, r0
    5cd6:	e9 f7       	brne	.-6      	; 0x5cd2 <_upload_message+0x4a>
    5cd8:	11 97       	sbiw	r26, 0x01	; 1
    5cda:	8d e0       	ldi	r24, 0x0D	; 13
    5cdc:	9a e0       	ldi	r25, 0x0A	; 10
    5cde:	11 96       	adiw	r26, 0x01	; 1
    5ce0:	9c 93       	st	X, r25
    5ce2:	8e 93       	st	-X, r24
    5ce4:	12 96       	adiw	r26, 0x02	; 2
    5ce6:	1c 92       	st	X, r1
    5ce8:	01 90       	ld	r0, Z+
    5cea:	00 20       	and	r0, r0
    5cec:	e9 f7       	brne	.-6      	; 0x5ce8 <_upload_message+0x60>
    5cee:	31 97       	sbiw	r30, 0x01	; 1
    5cf0:	ef 56       	subi	r30, 0x6F	; 111
    5cf2:	f9 40       	sbci	r31, 0x09	; 9
    5cf4:	ae 2f       	mov	r26, r30
    5cf6:	8f e6       	ldi	r24, 0x6F	; 111
    5cf8:	99 e0       	ldi	r25, 0x09	; 9
    5cfa:	ac 01       	movw	r20, r24
    5cfc:	6a 2f       	mov	r22, r26
    5cfe:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <_rn2483_serial>
    5d02:	90 91 d7 09 	lds	r25, 0x09D7	; 0x8009d7 <_rn2483_serial+0x1>
    5d06:	22 da       	rcall	.-3004   	; 0x514c <serial_send_bytes>
    5d08:	81 11       	cpse	r24, r1
    5d0a:	0f c0       	rjmp	.+30     	; 0x5d2a <_upload_message+0xa2>
    5d0c:	28 e2       	ldi	r18, 0x28	; 40
    5d0e:	35 e0       	ldi	r19, 0x05	; 5
    5d10:	4d e2       	ldi	r20, 0x2D	; 45
    5d12:	50 e0       	ldi	r21, 0x00	; 0
    5d14:	6d e5       	ldi	r22, 0x5D	; 93
    5d16:	7a e0       	ldi	r23, 0x0A	; 10
    5d18:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <_reply_buffer_handle>
    5d1c:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <_reply_buffer_handle+0x1>
    5d20:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xStreamBufferReceive>
    5d24:	8d e5       	ldi	r24, 0x5D	; 93
    5d26:	9a e0       	ldi	r25, 0x0A	; 10
    5d28:	02 c0       	rjmp	.+4      	; 0x5d2e <_upload_message+0xa6>
    5d2a:	80 e0       	ldi	r24, 0x00	; 0
    5d2c:	90 e0       	ldi	r25, 0x00	; 0
    5d2e:	df 91       	pop	r29
    5d30:	cf 91       	pop	r28
    5d32:	1f 91       	pop	r17
    5d34:	0f 91       	pop	r16
    5d36:	08 95       	ret

00005d38 <_reply2return_code>:
    5d38:	af 92       	push	r10
    5d3a:	bf 92       	push	r11
    5d3c:	cf 92       	push	r12
    5d3e:	df 92       	push	r13
    5d40:	ef 92       	push	r14
    5d42:	ff 92       	push	r15
    5d44:	0f 93       	push	r16
    5d46:	1f 93       	push	r17
    5d48:	cf 93       	push	r28
    5d4a:	df 93       	push	r29
    5d4c:	6c 01       	movw	r12, r24
    5d4e:	fc 01       	movw	r30, r24
    5d50:	01 90       	ld	r0, Z+
    5d52:	00 20       	and	r0, r0
    5d54:	e9 f7       	brne	.-6      	; 0x5d50 <_reply2return_code+0x18>
    5d56:	31 97       	sbiw	r30, 0x01	; 1
    5d58:	7f 01       	movw	r14, r30
    5d5a:	e8 1a       	sub	r14, r24
    5d5c:	f9 0a       	sbc	r15, r25
    5d5e:	0c e1       	ldi	r16, 0x1C	; 28
    5d60:	18 e0       	ldi	r17, 0x08	; 8
    5d62:	c0 e0       	ldi	r28, 0x00	; 0
    5d64:	d0 e0       	ldi	r29, 0x00	; 0
    5d66:	f8 01       	movw	r30, r16
    5d68:	60 81       	ld	r22, Z
    5d6a:	71 81       	ldd	r23, Z+1	; 0x01
    5d6c:	a7 01       	movw	r20, r14
    5d6e:	c6 01       	movw	r24, r12
    5d70:	0e 94 25 38 	call	0x704a	; 0x704a <strncasecmp>
    5d74:	89 2b       	or	r24, r25
    5d76:	49 f4       	brne	.+18     	; 0x5d8a <_reply2return_code+0x52>
    5d78:	fe 01       	movw	r30, r28
    5d7a:	ee 0f       	add	r30, r30
    5d7c:	ff 1f       	adc	r31, r31
    5d7e:	ec 0f       	add	r30, r28
    5d80:	fd 1f       	adc	r31, r29
    5d82:	e5 5e       	subi	r30, 0xE5	; 229
    5d84:	f7 4f       	sbci	r31, 0xF7	; 247
    5d86:	80 81       	ld	r24, Z
    5d88:	07 c0       	rjmp	.+14     	; 0x5d98 <_reply2return_code+0x60>
    5d8a:	21 96       	adiw	r28, 0x01	; 1
    5d8c:	0d 5f       	subi	r16, 0xFD	; 253
    5d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d90:	c1 31       	cpi	r28, 0x11	; 17
    5d92:	d1 05       	cpc	r29, r1
    5d94:	41 f7       	brne	.-48     	; 0x5d66 <_reply2return_code+0x2e>
    5d96:	80 e1       	ldi	r24, 0x10	; 16
    5d98:	df 91       	pop	r29
    5d9a:	cf 91       	pop	r28
    5d9c:	1f 91       	pop	r17
    5d9e:	0f 91       	pop	r16
    5da0:	ff 90       	pop	r15
    5da2:	ef 90       	pop	r14
    5da4:	df 90       	pop	r13
    5da6:	cf 90       	pop	r12
    5da8:	bf 90       	pop	r11
    5daa:	af 90       	pop	r10
    5dac:	08 95       	ret

00005dae <_upload_message_rc>:
    5dae:	6c df       	rcall	.-296    	; 0x5c88 <_upload_message>
    5db0:	c3 cf       	rjmp	.-122    	; 0x5d38 <_reply2return_code>
    5db2:	08 95       	ret

00005db4 <lora_driver_flush_buffers>:
    5db4:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <_reply_buffer_handle>
    5db8:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <_reply_buffer_handle+0x1>
    5dbc:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <xStreamBufferReset>
    5dc0:	08 95       	ret

00005dc2 <lora_driver_create>:
    5dc2:	8f 92       	push	r8
    5dc4:	9f 92       	push	r9
    5dc6:	af 92       	push	r10
    5dc8:	cf 92       	push	r12
    5dca:	ef 92       	push	r14
    5dcc:	0f 93       	push	r16
    5dce:	cf 93       	push	r28
    5dd0:	c8 2f       	mov	r28, r24
    5dd2:	41 e0       	ldi	r20, 0x01	; 1
    5dd4:	60 e0       	ldi	r22, 0x00	; 0
    5dd6:	70 e0       	ldi	r23, 0x00	; 0
    5dd8:	88 ec       	ldi	r24, 0xC8	; 200
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <xStreamBufferGenericCreate>
    5de0:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <_reply_buffer_handle+0x1>
    5de4:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <_reply_buffer_handle>
    5de8:	0f 2e       	mov	r0, r31
    5dea:	fe ef       	ldi	r31, 0xFE	; 254
    5dec:	8f 2e       	mov	r8, r31
    5dee:	fd e2       	ldi	r31, 0x2D	; 45
    5df0:	9f 2e       	mov	r9, r31
    5df2:	f0 2d       	mov	r31, r0
    5df4:	68 94       	set
    5df6:	aa 24       	eor	r10, r10
    5df8:	a6 f8       	bld	r10, 6
    5dfa:	68 94       	set
    5dfc:	cc 24       	eor	r12, r12
    5dfe:	c6 f8       	bld	r12, 6
    5e00:	e1 2c       	mov	r14, r1
    5e02:	00 e0       	ldi	r16, 0x00	; 0
    5e04:	23 e0       	ldi	r18, 0x03	; 3
    5e06:	40 e0       	ldi	r20, 0x00	; 0
    5e08:	51 ee       	ldi	r21, 0xE1	; 225
    5e0a:	60 e0       	ldi	r22, 0x00	; 0
    5e0c:	70 e0       	ldi	r23, 0x00	; 0
    5e0e:	8c 2f       	mov	r24, r28
    5e10:	d8 d8       	rcall	.-3664   	; 0x4fc2 <serial_new_instance>
    5e12:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <_rn2483_serial+0x1>
    5e16:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <_rn2483_serial>
    5e1a:	e0 91 ba 0a 	lds	r30, 0x0ABA	; 0x800aba <register_access+0x8>
    5e1e:	f0 91 bb 0a 	lds	r31, 0x0ABB	; 0x800abb <register_access+0x9>
    5e22:	64 e0       	ldi	r22, 0x04	; 4
    5e24:	87 e0       	ldi	r24, 0x07	; 7
    5e26:	91 e0       	ldi	r25, 0x01	; 1
    5e28:	19 95       	eicall
    5e2a:	cf 91       	pop	r28
    5e2c:	0f 91       	pop	r16
    5e2e:	ef 90       	pop	r14
    5e30:	cf 90       	pop	r12
    5e32:	af 90       	pop	r10
    5e34:	9f 90       	pop	r9
    5e36:	8f 90       	pop	r8
    5e38:	08 95       	ret

00005e3a <lora_driver_reset_rn2483>:
    5e3a:	88 23       	and	r24, r24
    5e3c:	49 f0       	breq	.+18     	; 0x5e50 <lora_driver_reset_rn2483+0x16>
    5e3e:	e0 91 c4 0a 	lds	r30, 0x0AC4	; 0x800ac4 <register_access+0x12>
    5e42:	f0 91 c5 0a 	lds	r31, 0x0AC5	; 0x800ac5 <register_access+0x13>
    5e46:	64 e0       	ldi	r22, 0x04	; 4
    5e48:	88 e0       	ldi	r24, 0x08	; 8
    5e4a:	91 e0       	ldi	r25, 0x01	; 1
    5e4c:	19 95       	eicall
    5e4e:	08 95       	ret
    5e50:	e0 91 ba 0a 	lds	r30, 0x0ABA	; 0x800aba <register_access+0x8>
    5e54:	f0 91 bb 0a 	lds	r31, 0x0ABB	; 0x800abb <register_access+0x9>
    5e58:	64 e0       	ldi	r22, 0x04	; 4
    5e5a:	88 e0       	ldi	r24, 0x08	; 8
    5e5c:	91 e0       	ldi	r25, 0x01	; 1
    5e5e:	19 95       	eicall
    5e60:	08 95       	ret

00005e62 <lora_driver_rn2483_factory_reset>:
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	87 eb       	ldi	r24, 0xB7	; 183
    5e68:	95 e0       	ldi	r25, 0x05	; 5
    5e6a:	0e df       	rcall	.-484    	; 0x5c88 <_upload_message>
    5e6c:	ed e5       	ldi	r30, 0x5D	; 93
    5e6e:	fa e0       	ldi	r31, 0x0A	; 10
    5e70:	01 90       	ld	r0, Z+
    5e72:	00 20       	and	r0, r0
    5e74:	e9 f7       	brne	.-6      	; 0x5e70 <lora_driver_rn2483_factory_reset+0xe>
    5e76:	31 97       	sbiw	r30, 0x01	; 1
    5e78:	ed 55       	subi	r30, 0x5D	; 93
    5e7a:	fa 40       	sbci	r31, 0x0A	; 10
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	75 97       	sbiw	r30, 0x15	; 21
    5e80:	08 f0       	brcs	.+2      	; 0x5e84 <lora_driver_rn2483_factory_reset+0x22>
    5e82:	80 e0       	ldi	r24, 0x00	; 0
    5e84:	08 95       	ret

00005e86 <lora_driver_get_rn2483_hweui>:
    5e86:	cf 93       	push	r28
    5e88:	df 93       	push	r29
    5e8a:	ec 01       	movw	r28, r24
    5e8c:	60 e0       	ldi	r22, 0x00	; 0
    5e8e:	70 e0       	ldi	r23, 0x00	; 0
    5e90:	88 ec       	ldi	r24, 0xC8	; 200
    5e92:	95 e0       	ldi	r25, 0x05	; 5
    5e94:	f9 de       	rcall	.-526    	; 0x5c88 <_upload_message>
    5e96:	ed e5       	ldi	r30, 0x5D	; 93
    5e98:	fa e0       	ldi	r31, 0x0A	; 10
    5e9a:	01 90       	ld	r0, Z+
    5e9c:	00 20       	and	r0, r0
    5e9e:	e9 f7       	brne	.-6      	; 0x5e9a <lora_driver_get_rn2483_hweui+0x14>
    5ea0:	ee 56       	subi	r30, 0x6E	; 110
    5ea2:	fa 40       	sbci	r31, 0x0A	; 10
    5ea4:	39 f4       	brne	.+14     	; 0x5eb4 <lora_driver_get_rn2483_hweui+0x2e>
    5ea6:	6d e5       	ldi	r22, 0x5D	; 93
    5ea8:	7a e0       	ldi	r23, 0x0A	; 10
    5eaa:	ce 01       	movw	r24, r28
    5eac:	0e 94 1e 38 	call	0x703c	; 0x703c <strcpy>
    5eb0:	80 e0       	ldi	r24, 0x00	; 0
    5eb2:	02 c0       	rjmp	.+4      	; 0x5eb8 <lora_driver_get_rn2483_hweui+0x32>
    5eb4:	18 82       	st	Y, r1
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	df 91       	pop	r29
    5eba:	cf 91       	pop	r28
    5ebc:	08 95       	ret

00005ebe <lora_driver_set_device_identifier>:
    5ebe:	fc 01       	movw	r30, r24
    5ec0:	01 90       	ld	r0, Z+
    5ec2:	00 20       	and	r0, r0
    5ec4:	e9 f7       	brne	.-6      	; 0x5ec0 <lora_driver_set_device_identifier+0x2>
    5ec6:	9f 01       	movw	r18, r30
    5ec8:	21 51       	subi	r18, 0x11	; 17
    5eca:	31 09       	sbc	r19, r1
    5ecc:	28 17       	cp	r18, r24
    5ece:	39 07       	cpc	r19, r25
    5ed0:	29 f4       	brne	.+10     	; 0x5edc <lora_driver_set_device_identifier+0x1e>
    5ed2:	bc 01       	movw	r22, r24
    5ed4:	86 ef       	ldi	r24, 0xF6	; 246
    5ed6:	95 e0       	ldi	r25, 0x05	; 5
    5ed8:	6a cf       	rjmp	.-300    	; 0x5dae <_upload_message_rc>
    5eda:	08 95       	ret
    5edc:	89 e0       	ldi	r24, 0x09	; 9
    5ede:	08 95       	ret

00005ee0 <lora_driver_set_application_identifier>:
    5ee0:	fc 01       	movw	r30, r24
    5ee2:	01 90       	ld	r0, Z+
    5ee4:	00 20       	and	r0, r0
    5ee6:	e9 f7       	brne	.-6      	; 0x5ee2 <lora_driver_set_application_identifier+0x2>
    5ee8:	9f 01       	movw	r18, r30
    5eea:	21 51       	subi	r18, 0x11	; 17
    5eec:	31 09       	sbc	r19, r1
    5eee:	28 17       	cp	r18, r24
    5ef0:	39 07       	cpc	r19, r25
    5ef2:	29 f4       	brne	.+10     	; 0x5efe <lora_driver_set_application_identifier+0x1e>
    5ef4:	bc 01       	movw	r22, r24
    5ef6:	85 e0       	ldi	r24, 0x05	; 5
    5ef8:	96 e0       	ldi	r25, 0x06	; 6
    5efa:	59 cf       	rjmp	.-334    	; 0x5dae <_upload_message_rc>
    5efc:	08 95       	ret
    5efe:	89 e0       	ldi	r24, 0x09	; 9
    5f00:	08 95       	ret

00005f02 <lora_driver_set_application_key>:
    5f02:	fc 01       	movw	r30, r24
    5f04:	01 90       	ld	r0, Z+
    5f06:	00 20       	and	r0, r0
    5f08:	e9 f7       	brne	.-6      	; 0x5f04 <lora_driver_set_application_key+0x2>
    5f0a:	9f 01       	movw	r18, r30
    5f0c:	21 52       	subi	r18, 0x21	; 33
    5f0e:	31 09       	sbc	r19, r1
    5f10:	28 17       	cp	r18, r24
    5f12:	39 07       	cpc	r19, r25
    5f14:	29 f4       	brne	.+10     	; 0x5f20 <lora_driver_set_application_key+0x1e>
    5f16:	bc 01       	movw	r22, r24
    5f18:	84 e1       	ldi	r24, 0x14	; 20
    5f1a:	96 e0       	ldi	r25, 0x06	; 6
    5f1c:	48 cf       	rjmp	.-368    	; 0x5dae <_upload_message_rc>
    5f1e:	08 95       	ret
    5f20:	89 e0       	ldi	r24, 0x09	; 9
    5f22:	08 95       	ret

00005f24 <lora_driver_save_mac>:
    5f24:	60 e0       	ldi	r22, 0x00	; 0
    5f26:	70 e0       	ldi	r23, 0x00	; 0
    5f28:	83 e5       	ldi	r24, 0x53	; 83
    5f2a:	96 e0       	ldi	r25, 0x06	; 6
    5f2c:	40 cf       	rjmp	.-384    	; 0x5dae <_upload_message_rc>
    5f2e:	08 95       	ret

00005f30 <lora_driver_join>:
    5f30:	e8 2f       	mov	r30, r24
    5f32:	f0 e0       	ldi	r31, 0x00	; 0
    5f34:	ee 0f       	add	r30, r30
    5f36:	ff 1f       	adc	r31, r31
    5f38:	e9 5e       	subi	r30, 0xE9	; 233
    5f3a:	f7 4f       	sbci	r31, 0xF7	; 247
    5f3c:	60 81       	ld	r22, Z
    5f3e:	71 81       	ldd	r23, Z+1	; 0x01
    5f40:	8c e5       	ldi	r24, 0x5C	; 92
    5f42:	96 e0       	ldi	r25, 0x06	; 6
    5f44:	34 df       	rcall	.-408    	; 0x5dae <_upload_message_rc>
    5f46:	81 11       	cpse	r24, r1
    5f48:	12 c0       	rjmp	.+36     	; 0x5f6e <lora_driver_join+0x3e>
    5f4a:	28 e2       	ldi	r18, 0x28	; 40
    5f4c:	35 e0       	ldi	r19, 0x05	; 5
    5f4e:	4d e2       	ldi	r20, 0x2D	; 45
    5f50:	50 e0       	ldi	r21, 0x00	; 0
    5f52:	6d e5       	ldi	r22, 0x5D	; 93
    5f54:	7a e0       	ldi	r23, 0x0A	; 10
    5f56:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <_reply_buffer_handle>
    5f5a:	90 91 d5 09 	lds	r25, 0x09D5	; 0x8009d5 <_reply_buffer_handle+0x1>
    5f5e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xStreamBufferReceive>
    5f62:	88 23       	and	r24, r24
    5f64:	21 f0       	breq	.+8      	; 0x5f6e <lora_driver_join+0x3e>
    5f66:	8d e5       	ldi	r24, 0x5D	; 93
    5f68:	9a e0       	ldi	r25, 0x0A	; 10
    5f6a:	e6 ce       	rjmp	.-564    	; 0x5d38 <_reply2return_code>
    5f6c:	08 95       	ret
    5f6e:	8d e5       	ldi	r24, 0x5D	; 93
    5f70:	9a e0       	ldi	r25, 0x0A	; 10
    5f72:	e2 ce       	rjmp	.-572    	; 0x5d38 <_reply2return_code>
    5f74:	08 95       	ret

00005f76 <lora_driver_sent_upload_message>:
    5f76:	cf 93       	push	r28
    5f78:	df 93       	push	r29
    5f7a:	1f 92       	push	r1
    5f7c:	cd b7       	in	r28, 0x3d	; 61
    5f7e:	de b7       	in	r29, 0x3e	; 62
    5f80:	db 01       	movw	r26, r22
    5f82:	11 96       	adiw	r26, 0x01	; 1
    5f84:	9c 91       	ld	r25, X
    5f86:	11 97       	sbiw	r26, 0x01	; 1
    5f88:	95 31       	cpi	r25, 0x15	; 21
    5f8a:	08 f0       	brcs	.+2      	; 0x5f8e <lora_driver_sent_upload_message+0x18>
    5f8c:	87 c0       	rjmp	.+270    	; 0x609c <lora_driver_sent_upload_message+0x126>
    5f8e:	99 23       	and	r25, r25
    5f90:	81 f1       	breq	.+96     	; 0x5ff2 <lora_driver_sent_upload_message+0x7c>
    5f92:	60 e0       	ldi	r22, 0x00	; 0
    5f94:	70 e0       	ldi	r23, 0x00	; 0
    5f96:	27 2f       	mov	r18, r23
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	46 2f       	mov	r20, r22
    5f9c:	50 e0       	ldi	r21, 0x00	; 0
    5f9e:	fd 01       	movw	r30, r26
    5fa0:	e4 0f       	add	r30, r20
    5fa2:	f5 1f       	adc	r31, r21
    5fa4:	92 81       	ldd	r25, Z+2	; 0x02
    5fa6:	92 95       	swap	r25
    5fa8:	9f 70       	andi	r25, 0x0F	; 15
    5faa:	9a 30       	cpi	r25, 0x0A	; 10
    5fac:	10 f0       	brcs	.+4      	; 0x5fb2 <lora_driver_sent_upload_message+0x3c>
    5fae:	99 5c       	subi	r25, 0xC9	; 201
    5fb0:	01 c0       	rjmp	.+2      	; 0x5fb4 <lora_driver_sent_upload_message+0x3e>
    5fb2:	90 5d       	subi	r25, 0xD0	; 208
    5fb4:	f9 01       	movw	r30, r18
    5fb6:	e2 51       	subi	r30, 0x12	; 18
    5fb8:	f6 4f       	sbci	r31, 0xF6	; 246
    5fba:	90 83       	st	Z, r25
    5fbc:	2f 5f       	subi	r18, 0xFF	; 255
    5fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc0:	fd 01       	movw	r30, r26
    5fc2:	e4 0f       	add	r30, r20
    5fc4:	f5 1f       	adc	r31, r21
    5fc6:	92 81       	ldd	r25, Z+2	; 0x02
    5fc8:	9f 70       	andi	r25, 0x0F	; 15
    5fca:	49 2f       	mov	r20, r25
    5fcc:	50 e0       	ldi	r21, 0x00	; 0
    5fce:	4a 30       	cpi	r20, 0x0A	; 10
    5fd0:	51 05       	cpc	r21, r1
    5fd2:	14 f0       	brlt	.+4      	; 0x5fd8 <lora_driver_sent_upload_message+0x62>
    5fd4:	99 5c       	subi	r25, 0xC9	; 201
    5fd6:	01 c0       	rjmp	.+2      	; 0x5fda <lora_driver_sent_upload_message+0x64>
    5fd8:	90 5d       	subi	r25, 0xD0	; 208
    5fda:	f9 01       	movw	r30, r18
    5fdc:	e2 51       	subi	r30, 0x12	; 18
    5fde:	f6 4f       	sbci	r31, 0xF6	; 246
    5fe0:	90 83       	st	Z, r25
    5fe2:	7e 5f       	subi	r23, 0xFE	; 254
    5fe4:	6f 5f       	subi	r22, 0xFF	; 255
    5fe6:	11 96       	adiw	r26, 0x01	; 1
    5fe8:	9c 91       	ld	r25, X
    5fea:	11 97       	sbiw	r26, 0x01	; 1
    5fec:	69 17       	cp	r22, r25
    5fee:	98 f2       	brcs	.-90     	; 0x5f96 <lora_driver_sent_upload_message+0x20>
    5ff0:	01 c0       	rjmp	.+2      	; 0x5ff4 <lora_driver_sent_upload_message+0x7e>
    5ff2:	70 e0       	ldi	r23, 0x00	; 0
    5ff4:	e7 2f       	mov	r30, r23
    5ff6:	f0 e0       	ldi	r31, 0x00	; 0
    5ff8:	e2 51       	subi	r30, 0x12	; 18
    5ffa:	f6 4f       	sbci	r31, 0xF6	; 246
    5ffc:	10 82       	st	Z, r1
    5ffe:	4c 91       	ld	r20, X
    6000:	81 11       	cpse	r24, r1
    6002:	03 c0       	rjmp	.+6      	; 0x600a <lora_driver_sent_upload_message+0x94>
    6004:	85 e6       	ldi	r24, 0x65	; 101
    6006:	96 e0       	ldi	r25, 0x06	; 6
    6008:	02 c0       	rjmp	.+4      	; 0x600e <lora_driver_sent_upload_message+0x98>
    600a:	87 e6       	ldi	r24, 0x67	; 103
    600c:	96 e0       	ldi	r25, 0x06	; 6
    600e:	2e ee       	ldi	r18, 0xEE	; 238
    6010:	39 e0       	ldi	r19, 0x09	; 9
    6012:	3f 93       	push	r19
    6014:	2f 93       	push	r18
    6016:	1f 92       	push	r1
    6018:	4f 93       	push	r20
    601a:	9f 93       	push	r25
    601c:	8f 93       	push	r24
    601e:	8b e6       	ldi	r24, 0x6B	; 107
    6020:	96 e0       	ldi	r25, 0x06	; 6
    6022:	9f 93       	push	r25
    6024:	8f 93       	push	r24
    6026:	80 e3       	ldi	r24, 0x30	; 48
    6028:	9a e0       	ldi	r25, 0x0A	; 10
    602a:	9f 93       	push	r25
    602c:	8f 93       	push	r24
    602e:	0e 94 80 38 	call	0x7100	; 0x7100 <sprintf>
    6032:	60 e0       	ldi	r22, 0x00	; 0
    6034:	70 e0       	ldi	r23, 0x00	; 0
    6036:	80 e3       	ldi	r24, 0x30	; 48
    6038:	9a e0       	ldi	r25, 0x0A	; 10
    603a:	b9 de       	rcall	.-654    	; 0x5dae <_upload_message_rc>
    603c:	0f b6       	in	r0, 0x3f	; 63
    603e:	f8 94       	cli
    6040:	de bf       	out	0x3e, r29	; 62
    6042:	0f be       	out	0x3f, r0	; 63
    6044:	cd bf       	out	0x3d, r28	; 61
    6046:	8e 30       	cpi	r24, 0x0E	; 14
    6048:	51 f5       	brne	.+84     	; 0x609e <lora_driver_sent_upload_message+0x128>
    604a:	87 e0       	ldi	r24, 0x07	; 7
    604c:	89 83       	std	Y+1, r24	; 0x01
    604e:	be 01       	movw	r22, r28
    6050:	6f 5f       	subi	r22, 0xFF	; 255
    6052:	7f 4f       	sbci	r23, 0xFF	; 255
    6054:	8d e5       	ldi	r24, 0x5D	; 93
    6056:	9a e0       	ldi	r25, 0x0A	; 10
    6058:	38 d1       	rcall	.+624    	; 0x62ca <decode_port_no>
    605a:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <_downlink_payload>
    605e:	e9 81       	ldd	r30, Y+1	; 0x01
    6060:	f0 e0       	ldi	r31, 0x00	; 0
    6062:	e3 5a       	subi	r30, 0xA3	; 163
    6064:	f5 4f       	sbci	r31, 0xF5	; 245
    6066:	df 01       	movw	r26, r30
    6068:	0d 90       	ld	r0, X+
    606a:	00 20       	and	r0, r0
    606c:	e9 f7       	brne	.-6      	; 0x6068 <lora_driver_sent_upload_message+0xf2>
    606e:	11 97       	sbiw	r26, 0x01	; 1
    6070:	ae 1b       	sub	r26, r30
    6072:	bf 0b       	sbc	r27, r31
    6074:	aa 23       	and	r26, r26
    6076:	81 f0       	breq	.+32     	; 0x6098 <lora_driver_sent_upload_message+0x122>
    6078:	bb 27       	eor	r27, r27
    607a:	11 97       	sbiw	r26, 0x01	; 1
    607c:	cd 01       	movw	r24, r26
    607e:	0a f4       	brpl	.+2      	; 0x6082 <lora_driver_sent_upload_message+0x10c>
    6080:	01 96       	adiw	r24, 0x01	; 1
    6082:	95 95       	asr	r25
    6084:	87 95       	ror	r24
    6086:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <_downlink_payload+0x1>
    608a:	af 01       	movw	r20, r30
    608c:	4f 5f       	subi	r20, 0xFF	; 255
    608e:	5f 4f       	sbci	r21, 0xFF	; 255
    6090:	64 e1       	ldi	r22, 0x14	; 20
    6092:	8a ed       	ldi	r24, 0xDA	; 218
    6094:	99 e0       	ldi	r25, 0x09	; 9
    6096:	45 d1       	rcall	.+650    	; 0x6322 <decode_hexadecimal_string_bytes>
    6098:	8e e0       	ldi	r24, 0x0E	; 14
    609a:	01 c0       	rjmp	.+2      	; 0x609e <lora_driver_sent_upload_message+0x128>
    609c:	84 e1       	ldi	r24, 0x14	; 20
    609e:	0f 90       	pop	r0
    60a0:	df 91       	pop	r29
    60a2:	cf 91       	pop	r28
    60a4:	08 95       	ret

000060a6 <lora_driver_set_adaptive_data_rate>:
    60a6:	81 30       	cpi	r24, 0x01	; 1
    60a8:	19 f0       	breq	.+6      	; 0x60b0 <lora_driver_set_adaptive_data_rate+0xa>
    60aa:	6b e7       	ldi	r22, 0x7B	; 123
    60ac:	76 e0       	ldi	r23, 0x06	; 6
    60ae:	02 c0       	rjmp	.+4      	; 0x60b4 <lora_driver_set_adaptive_data_rate+0xe>
    60b0:	6b e3       	ldi	r22, 0x3B	; 59
    60b2:	77 e0       	ldi	r23, 0x07	; 7
    60b4:	8f e7       	ldi	r24, 0x7F	; 127
    60b6:	96 e0       	ldi	r25, 0x06	; 6
    60b8:	7a ce       	rjmp	.-780    	; 0x5dae <_upload_message_rc>
    60ba:	08 95       	ret

000060bc <lora_driver_configure_to_eu868>:
    60bc:	2f 92       	push	r2
    60be:	3f 92       	push	r3
    60c0:	4f 92       	push	r4
    60c2:	5f 92       	push	r5
    60c4:	6f 92       	push	r6
    60c6:	7f 92       	push	r7
    60c8:	8f 92       	push	r8
    60ca:	9f 92       	push	r9
    60cc:	af 92       	push	r10
    60ce:	bf 92       	push	r11
    60d0:	cf 92       	push	r12
    60d2:	df 92       	push	r13
    60d4:	ef 92       	push	r14
    60d6:	ff 92       	push	r15
    60d8:	0f 93       	push	r16
    60da:	1f 93       	push	r17
    60dc:	cf 93       	push	r28
    60de:	df 93       	push	r29
    60e0:	cd b7       	in	r28, 0x3d	; 61
    60e2:	de b7       	in	r29, 0x3e	; 62
    60e4:	a0 97       	sbiw	r28, 0x20	; 32
    60e6:	0f b6       	in	r0, 0x3f	; 63
    60e8:	f8 94       	cli
    60ea:	de bf       	out	0x3e, r29	; 62
    60ec:	0f be       	out	0x3f, r0	; 63
    60ee:	cd bf       	out	0x3d, r28	; 61
    60f0:	64 ec       	ldi	r22, 0xC4	; 196
    60f2:	76 e0       	ldi	r23, 0x06	; 6
    60f4:	80 ed       	ldi	r24, 0xD0	; 208
    60f6:	96 e0       	ldi	r25, 0x06	; 6
    60f8:	c7 dd       	rcall	.-1138   	; 0x5c88 <_upload_message>
    60fa:	1e de       	rcall	.-964    	; 0x5d38 <_reply2return_code>
    60fc:	81 11       	cpse	r24, r1
    60fe:	9f c0       	rjmp	.+318    	; 0x623e <lora_driver_configure_to_eu868+0x182>
    6100:	80 e2       	ldi	r24, 0x20	; 32
    6102:	ec e2       	ldi	r30, 0x2C	; 44
    6104:	f5 e0       	ldi	r31, 0x05	; 5
    6106:	de 01       	movw	r26, r28
    6108:	11 96       	adiw	r26, 0x01	; 1
    610a:	01 90       	ld	r0, Z+
    610c:	0d 92       	st	X+, r0
    610e:	8a 95       	dec	r24
    6110:	e1 f7       	brne	.-8      	; 0x610a <lora_driver_configure_to_eu868+0x4e>
    6112:	9e 01       	movw	r18, r28
    6114:	2f 5f       	subi	r18, 0xFF	; 255
    6116:	3f 4f       	sbci	r19, 0xFF	; 255
    6118:	69 01       	movw	r12, r18
    611a:	e1 2c       	mov	r14, r1
    611c:	f1 2c       	mov	r15, r1
    611e:	0f 2e       	mov	r0, r31
    6120:	fc ed       	ldi	r31, 0xDC	; 220
    6122:	af 2e       	mov	r10, r31
    6124:	f6 e0       	ldi	r31, 0x06	; 6
    6126:	bf 2e       	mov	r11, r31
    6128:	f0 2d       	mov	r31, r0
    612a:	00 e3       	ldi	r16, 0x30	; 48
    612c:	1a e0       	ldi	r17, 0x0A	; 10
    612e:	0f 2e       	mov	r0, r31
    6130:	f5 ef       	ldi	r31, 0xF5	; 245
    6132:	4f 2e       	mov	r4, r31
    6134:	f6 e0       	ldi	r31, 0x06	; 6
    6136:	5f 2e       	mov	r5, r31
    6138:	f0 2d       	mov	r31, r0
    613a:	0f 2e       	mov	r0, r31
    613c:	fc e0       	ldi	r31, 0x0C	; 12
    613e:	8f 2e       	mov	r8, r31
    6140:	f7 e0       	ldi	r31, 0x07	; 7
    6142:	9f 2e       	mov	r9, r31
    6144:	f0 2d       	mov	r31, r0
    6146:	0f 2e       	mov	r0, r31
    6148:	f6 e2       	ldi	r31, 0x26	; 38
    614a:	6f 2e       	mov	r6, r31
    614c:	f7 e0       	ldi	r31, 0x07	; 7
    614e:	7f 2e       	mov	r7, r31
    6150:	f0 2d       	mov	r31, r0
    6152:	3e 2c       	mov	r3, r14
    6154:	2f 2c       	mov	r2, r15
    6156:	ff 92       	push	r15
    6158:	ef 92       	push	r14
    615a:	bf 92       	push	r11
    615c:	af 92       	push	r10
    615e:	1f 93       	push	r17
    6160:	0f 93       	push	r16
    6162:	ce d7       	rcall	.+3996   	; 0x7100 <sprintf>
    6164:	60 e0       	ldi	r22, 0x00	; 0
    6166:	70 e0       	ldi	r23, 0x00	; 0
    6168:	c8 01       	movw	r24, r16
    616a:	8e dd       	rcall	.-1252   	; 0x5c88 <_upload_message>
    616c:	e5 dd       	rcall	.-1078   	; 0x5d38 <_reply2return_code>
    616e:	0f 90       	pop	r0
    6170:	0f 90       	pop	r0
    6172:	0f 90       	pop	r0
    6174:	0f 90       	pop	r0
    6176:	0f 90       	pop	r0
    6178:	0f 90       	pop	r0
    617a:	81 11       	cpse	r24, r1
    617c:	60 c0       	rjmp	.+192    	; 0x623e <lora_driver_configure_to_eu868+0x182>
    617e:	32 e0       	ldi	r19, 0x02	; 2
    6180:	3e 15       	cp	r19, r14
    6182:	e0 f4       	brcc	.+56     	; 0x61bc <lora_driver_configure_to_eu868+0x100>
    6184:	f6 01       	movw	r30, r12
    6186:	83 81       	ldd	r24, Z+3	; 0x03
    6188:	8f 93       	push	r24
    618a:	82 81       	ldd	r24, Z+2	; 0x02
    618c:	8f 93       	push	r24
    618e:	81 81       	ldd	r24, Z+1	; 0x01
    6190:	8f 93       	push	r24
    6192:	80 81       	ld	r24, Z
    6194:	8f 93       	push	r24
    6196:	ff 92       	push	r15
    6198:	ef 92       	push	r14
    619a:	5f 92       	push	r5
    619c:	4f 92       	push	r4
    619e:	1f 93       	push	r17
    61a0:	0f 93       	push	r16
    61a2:	ae d7       	rcall	.+3932   	; 0x7100 <sprintf>
    61a4:	60 e0       	ldi	r22, 0x00	; 0
    61a6:	70 e0       	ldi	r23, 0x00	; 0
    61a8:	c8 01       	movw	r24, r16
    61aa:	6e dd       	rcall	.-1316   	; 0x5c88 <_upload_message>
    61ac:	c5 dd       	rcall	.-1142   	; 0x5d38 <_reply2return_code>
    61ae:	0f b6       	in	r0, 0x3f	; 63
    61b0:	f8 94       	cli
    61b2:	de bf       	out	0x3e, r29	; 62
    61b4:	0f be       	out	0x3f, r0	; 63
    61b6:	cd bf       	out	0x3d, r28	; 61
    61b8:	81 11       	cpse	r24, r1
    61ba:	41 c0       	rjmp	.+130    	; 0x623e <lora_driver_configure_to_eu868+0x182>
    61bc:	2f 92       	push	r2
    61be:	3f 92       	push	r3
    61c0:	9f 92       	push	r9
    61c2:	8f 92       	push	r8
    61c4:	1f 93       	push	r17
    61c6:	0f 93       	push	r16
    61c8:	9b d7       	rcall	.+3894   	; 0x7100 <sprintf>
    61ca:	60 e0       	ldi	r22, 0x00	; 0
    61cc:	70 e0       	ldi	r23, 0x00	; 0
    61ce:	c8 01       	movw	r24, r16
    61d0:	5b dd       	rcall	.-1354   	; 0x5c88 <_upload_message>
    61d2:	b2 dd       	rcall	.-1180   	; 0x5d38 <_reply2return_code>
    61d4:	0f 90       	pop	r0
    61d6:	0f 90       	pop	r0
    61d8:	0f 90       	pop	r0
    61da:	0f 90       	pop	r0
    61dc:	0f 90       	pop	r0
    61de:	0f 90       	pop	r0
    61e0:	81 11       	cpse	r24, r1
    61e2:	2d c0       	rjmp	.+90     	; 0x623e <lora_driver_configure_to_eu868+0x182>
    61e4:	2f 92       	push	r2
    61e6:	3f 92       	push	r3
    61e8:	7f 92       	push	r7
    61ea:	6f 92       	push	r6
    61ec:	1f 93       	push	r17
    61ee:	0f 93       	push	r16
    61f0:	87 d7       	rcall	.+3854   	; 0x7100 <sprintf>
    61f2:	60 e0       	ldi	r22, 0x00	; 0
    61f4:	70 e0       	ldi	r23, 0x00	; 0
    61f6:	c8 01       	movw	r24, r16
    61f8:	47 dd       	rcall	.-1394   	; 0x5c88 <_upload_message>
    61fa:	9e dd       	rcall	.-1220   	; 0x5d38 <_reply2return_code>
    61fc:	0f 90       	pop	r0
    61fe:	0f 90       	pop	r0
    6200:	0f 90       	pop	r0
    6202:	0f 90       	pop	r0
    6204:	0f 90       	pop	r0
    6206:	0f 90       	pop	r0
    6208:	81 11       	cpse	r24, r1
    620a:	19 c0       	rjmp	.+50     	; 0x623e <lora_driver_configure_to_eu868+0x182>
    620c:	3f ef       	ldi	r19, 0xFF	; 255
    620e:	e3 1a       	sub	r14, r19
    6210:	f3 0a       	sbc	r15, r19
    6212:	84 e0       	ldi	r24, 0x04	; 4
    6214:	c8 0e       	add	r12, r24
    6216:	d1 1c       	adc	r13, r1
    6218:	98 e0       	ldi	r25, 0x08	; 8
    621a:	e9 16       	cp	r14, r25
    621c:	f1 04       	cpc	r15, r1
    621e:	09 f0       	breq	.+2      	; 0x6222 <lora_driver_configure_to_eu868+0x166>
    6220:	98 cf       	rjmp	.-208    	; 0x6152 <lora_driver_configure_to_eu868+0x96>
    6222:	60 e0       	ldi	r22, 0x00	; 0
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	8e e3       	ldi	r24, 0x3E	; 62
    6228:	97 e0       	ldi	r25, 0x07	; 7
    622a:	2e dd       	rcall	.-1444   	; 0x5c88 <_upload_message>
    622c:	85 dd       	rcall	.-1270   	; 0x5d38 <_reply2return_code>
    622e:	81 11       	cpse	r24, r1
    6230:	06 c0       	rjmp	.+12     	; 0x623e <lora_driver_configure_to_eu868+0x182>
    6232:	60 e0       	ldi	r22, 0x00	; 0
    6234:	70 e0       	ldi	r23, 0x00	; 0
    6236:	8f e4       	ldi	r24, 0x4F	; 79
    6238:	97 e0       	ldi	r25, 0x07	; 7
    623a:	26 dd       	rcall	.-1460   	; 0x5c88 <_upload_message>
    623c:	7d dd       	rcall	.-1286   	; 0x5d38 <_reply2return_code>
    623e:	a0 96       	adiw	r28, 0x20	; 32
    6240:	0f b6       	in	r0, 0x3f	; 63
    6242:	f8 94       	cli
    6244:	de bf       	out	0x3e, r29	; 62
    6246:	0f be       	out	0x3f, r0	; 63
    6248:	cd bf       	out	0x3d, r28	; 61
    624a:	df 91       	pop	r29
    624c:	cf 91       	pop	r28
    624e:	1f 91       	pop	r17
    6250:	0f 91       	pop	r16
    6252:	ff 90       	pop	r15
    6254:	ef 90       	pop	r14
    6256:	df 90       	pop	r13
    6258:	cf 90       	pop	r12
    625a:	bf 90       	pop	r11
    625c:	af 90       	pop	r10
    625e:	9f 90       	pop	r9
    6260:	8f 90       	pop	r8
    6262:	7f 90       	pop	r7
    6264:	6f 90       	pop	r6
    6266:	5f 90       	pop	r5
    6268:	4f 90       	pop	r4
    626a:	3f 90       	pop	r3
    626c:	2f 90       	pop	r2
    626e:	08 95       	ret

00006270 <lora_driver_set_otaa_identity>:
    6270:	ef 92       	push	r14
    6272:	ff 92       	push	r15
    6274:	0f 93       	push	r16
    6276:	1f 93       	push	r17
    6278:	cf 93       	push	r28
    627a:	df 93       	push	r29
    627c:	ec 01       	movw	r28, r24
    627e:	8b 01       	movw	r16, r22
    6280:	7a 01       	movw	r14, r20
    6282:	81 e0       	ldi	r24, 0x01	; 1
    6284:	10 df       	rcall	.-480    	; 0x60a6 <lora_driver_set_adaptive_data_rate>
    6286:	81 11       	cpse	r24, r1
    6288:	0d c0       	rjmp	.+26     	; 0x62a4 <lora_driver_set_otaa_identity+0x34>
    628a:	ce 01       	movw	r24, r28
    628c:	29 de       	rcall	.-942    	; 0x5ee0 <lora_driver_set_application_identifier>
    628e:	81 11       	cpse	r24, r1
    6290:	09 c0       	rjmp	.+18     	; 0x62a4 <lora_driver_set_otaa_identity+0x34>
    6292:	c8 01       	movw	r24, r16
    6294:	36 de       	rcall	.-916    	; 0x5f02 <lora_driver_set_application_key>
    6296:	81 11       	cpse	r24, r1
    6298:	05 c0       	rjmp	.+10     	; 0x62a4 <lora_driver_set_otaa_identity+0x34>
    629a:	c7 01       	movw	r24, r14
    629c:	10 de       	rcall	.-992    	; 0x5ebe <lora_driver_set_device_identifier>
    629e:	81 11       	cpse	r24, r1
    62a0:	01 c0       	rjmp	.+2      	; 0x62a4 <lora_driver_set_otaa_identity+0x34>
    62a2:	40 de       	rcall	.-896    	; 0x5f24 <lora_driver_save_mac>
    62a4:	df 91       	pop	r29
    62a6:	cf 91       	pop	r28
    62a8:	1f 91       	pop	r17
    62aa:	0f 91       	pop	r16
    62ac:	ff 90       	pop	r15
    62ae:	ef 90       	pop	r14
    62b0:	08 95       	ret

000062b2 <lora_driver_map_return_code_to_text>:
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	fc 01       	movw	r30, r24
    62b6:	ee 0f       	add	r30, r30
    62b8:	ff 1f       	adc	r31, r31
    62ba:	8e 0f       	add	r24, r30
    62bc:	9f 1f       	adc	r25, r31
    62be:	fc 01       	movw	r30, r24
    62c0:	e5 5e       	subi	r30, 0xE5	; 229
    62c2:	f7 4f       	sbci	r31, 0xF7	; 247
    62c4:	81 81       	ldd	r24, Z+1	; 0x01
    62c6:	92 81       	ldd	r25, Z+2	; 0x02
    62c8:	08 95       	ret

000062ca <decode_port_no>:
    62ca:	dc 01       	movw	r26, r24
    62cc:	00 97       	sbiw	r24, 0x00	; 0
    62ce:	29 f1       	breq	.+74     	; 0x631a <decode_port_no+0x50>
    62d0:	fb 01       	movw	r30, r22
    62d2:	20 81       	ld	r18, Z
    62d4:	fc 01       	movw	r30, r24
    62d6:	01 90       	ld	r0, Z+
    62d8:	00 20       	and	r0, r0
    62da:	e9 f7       	brne	.-6      	; 0x62d6 <decode_port_no+0xc>
    62dc:	31 97       	sbiw	r30, 0x01	; 1
    62de:	e8 1b       	sub	r30, r24
    62e0:	f9 0b       	sbc	r31, r25
    62e2:	82 2f       	mov	r24, r18
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	e8 17       	cp	r30, r24
    62e8:	f9 07       	cpc	r31, r25
    62ea:	c8 f0       	brcs	.+50     	; 0x631e <decode_port_no+0x54>
    62ec:	80 e0       	ldi	r24, 0x00	; 0
    62ee:	08 c0       	rjmp	.+16     	; 0x6300 <decode_port_no+0x36>
    62f0:	88 0f       	add	r24, r24
    62f2:	38 2f       	mov	r19, r24
    62f4:	33 0f       	add	r19, r19
    62f6:	33 0f       	add	r19, r19
    62f8:	83 0f       	add	r24, r19
    62fa:	80 53       	subi	r24, 0x30	; 48
    62fc:	89 0f       	add	r24, r25
    62fe:	2f 5f       	subi	r18, 0xFF	; 255
    6300:	fd 01       	movw	r30, r26
    6302:	e2 0f       	add	r30, r18
    6304:	f1 1d       	adc	r31, r1
    6306:	90 81       	ld	r25, Z
    6308:	30 ed       	ldi	r19, 0xD0	; 208
    630a:	39 0f       	add	r19, r25
    630c:	3a 30       	cpi	r19, 0x0A	; 10
    630e:	10 f4       	brcc	.+4      	; 0x6314 <decode_port_no+0x4a>
    6310:	91 11       	cpse	r25, r1
    6312:	ee cf       	rjmp	.-36     	; 0x62f0 <decode_port_no+0x26>
    6314:	fb 01       	movw	r30, r22
    6316:	20 83       	st	Z, r18
    6318:	08 95       	ret
    631a:	80 e0       	ldi	r24, 0x00	; 0
    631c:	08 95       	ret
    631e:	80 e0       	ldi	r24, 0x00	; 0
    6320:	08 95       	ret

00006322 <decode_hexadecimal_string_bytes>:
    6322:	0f 93       	push	r16
    6324:	1f 93       	push	r17
    6326:	cf 93       	push	r28
    6328:	df 93       	push	r29
    632a:	dc 01       	movw	r26, r24
    632c:	ea 01       	movw	r28, r20
    632e:	20 97       	sbiw	r28, 0x00	; 0
    6330:	e1 f1       	breq	.+120    	; 0x63aa <decode_hexadecimal_string_bytes+0x88>
    6332:	fa 01       	movw	r30, r20
    6334:	01 90       	ld	r0, Z+
    6336:	00 20       	and	r0, r0
    6338:	e9 f7       	brne	.-6      	; 0x6334 <decode_hexadecimal_string_bytes+0x12>
    633a:	31 97       	sbiw	r30, 0x01	; 1
    633c:	e4 1b       	sub	r30, r20
    633e:	f5 0b       	sbc	r31, r21
    6340:	32 97       	sbiw	r30, 0x02	; 2
    6342:	10 f5       	brcc	.+68     	; 0x6388 <decode_hexadecimal_string_bytes+0x66>
    6344:	32 c0       	rjmp	.+100    	; 0x63aa <decode_hexadecimal_string_bytes+0x88>
    6346:	8d 01       	movw	r16, r26
    6348:	04 0f       	add	r16, r20
    634a:	15 1f       	adc	r17, r21
    634c:	30 e0       	ldi	r19, 0x00	; 0
    634e:	ae 01       	movw	r20, r28
    6350:	42 0f       	add	r20, r18
    6352:	53 1f       	adc	r21, r19
    6354:	fa 01       	movw	r30, r20
    6356:	90 81       	ld	r25, Z
    6358:	91 34       	cpi	r25, 0x41	; 65
    635a:	28 f0       	brcs	.+10     	; 0x6366 <decode_hexadecimal_string_bytes+0x44>
    635c:	97 53       	subi	r25, 0x37	; 55
    635e:	59 2f       	mov	r21, r25
    6360:	52 95       	swap	r21
    6362:	50 7f       	andi	r21, 0xF0	; 240
    6364:	03 c0       	rjmp	.+6      	; 0x636c <decode_hexadecimal_string_bytes+0x4a>
    6366:	59 2f       	mov	r21, r25
    6368:	52 95       	swap	r21
    636a:	50 7f       	andi	r21, 0xF0	; 240
    636c:	2c 0f       	add	r18, r28
    636e:	3d 1f       	adc	r19, r29
    6370:	f9 01       	movw	r30, r18
    6372:	91 81       	ldd	r25, Z+1	; 0x01
    6374:	91 34       	cpi	r25, 0x41	; 65
    6376:	10 f0       	brcs	.+4      	; 0x637c <decode_hexadecimal_string_bytes+0x5a>
    6378:	97 53       	subi	r25, 0x37	; 55
    637a:	01 c0       	rjmp	.+2      	; 0x637e <decode_hexadecimal_string_bytes+0x5c>
    637c:	90 53       	subi	r25, 0x30	; 48
    637e:	95 0f       	add	r25, r21
    6380:	f8 01       	movw	r30, r16
    6382:	90 83       	st	Z, r25
    6384:	8f 5f       	subi	r24, 0xFF	; 255
    6386:	01 c0       	rjmp	.+2      	; 0x638a <decode_hexadecimal_string_bytes+0x68>
    6388:	80 e0       	ldi	r24, 0x00	; 0
    638a:	28 2f       	mov	r18, r24
    638c:	22 0f       	add	r18, r18
    638e:	48 2f       	mov	r20, r24
    6390:	50 e0       	ldi	r21, 0x00	; 0
    6392:	fe 01       	movw	r30, r28
    6394:	01 90       	ld	r0, Z+
    6396:	00 20       	and	r0, r0
    6398:	e9 f7       	brne	.-6      	; 0x6394 <decode_hexadecimal_string_bytes+0x72>
    639a:	31 97       	sbiw	r30, 0x01	; 1
    639c:	ec 1b       	sub	r30, r28
    639e:	fd 0b       	sbc	r31, r29
    63a0:	4e 17       	cp	r20, r30
    63a2:	5f 07       	cpc	r21, r31
    63a4:	10 f4       	brcc	.+4      	; 0x63aa <decode_hexadecimal_string_bytes+0x88>
    63a6:	86 13       	cpse	r24, r22
    63a8:	ce cf       	rjmp	.-100    	; 0x6346 <decode_hexadecimal_string_bytes+0x24>
    63aa:	df 91       	pop	r29
    63ac:	cf 91       	pop	r28
    63ae:	1f 91       	pop	r17
    63b0:	0f 91       	pop	r16
    63b2:	08 95       	ret

000063b4 <reg_read_register>:
    63b4:	fc 01       	movw	r30, r24
    63b6:	80 81       	ld	r24, Z
    63b8:	08 95       	ret

000063ba <reg_read_bit>:
    63ba:	fc 01       	movw	r30, r24
    63bc:	20 81       	ld	r18, Z
    63be:	81 e0       	ldi	r24, 0x01	; 1
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	02 c0       	rjmp	.+4      	; 0x63c8 <reg_read_bit+0xe>
    63c4:	88 0f       	add	r24, r24
    63c6:	99 1f       	adc	r25, r25
    63c8:	6a 95       	dec	r22
    63ca:	e2 f7       	brpl	.-8      	; 0x63c4 <reg_read_bit+0xa>
    63cc:	82 23       	and	r24, r18
    63ce:	08 95       	ret

000063d0 <reg_read_bits>:
    63d0:	fc 01       	movw	r30, r24
    63d2:	80 81       	ld	r24, Z
    63d4:	86 23       	and	r24, r22
    63d6:	08 95       	ret

000063d8 <reg_set_register>:
    63d8:	fc 01       	movw	r30, r24
    63da:	60 83       	st	Z, r22
    63dc:	08 95       	ret

000063de <reg_clear_register>:
    63de:	fc 01       	movw	r30, r24
    63e0:	10 82       	st	Z, r1
    63e2:	08 95       	ret

000063e4 <reg_set_bit>:
    63e4:	fc 01       	movw	r30, r24
    63e6:	40 81       	ld	r20, Z
    63e8:	21 e0       	ldi	r18, 0x01	; 1
    63ea:	30 e0       	ldi	r19, 0x00	; 0
    63ec:	02 c0       	rjmp	.+4      	; 0x63f2 <reg_set_bit+0xe>
    63ee:	22 0f       	add	r18, r18
    63f0:	33 1f       	adc	r19, r19
    63f2:	6a 95       	dec	r22
    63f4:	e2 f7       	brpl	.-8      	; 0x63ee <reg_set_bit+0xa>
    63f6:	24 2b       	or	r18, r20
    63f8:	20 83       	st	Z, r18
    63fa:	08 95       	ret

000063fc <reg_set_bits>:
    63fc:	fc 01       	movw	r30, r24
    63fe:	20 81       	ld	r18, Z
    6400:	62 2b       	or	r22, r18
    6402:	60 83       	st	Z, r22
    6404:	08 95       	ret

00006406 <reg_toggle_bit>:
    6406:	fc 01       	movw	r30, r24
    6408:	40 81       	ld	r20, Z
    640a:	21 e0       	ldi	r18, 0x01	; 1
    640c:	30 e0       	ldi	r19, 0x00	; 0
    640e:	02 c0       	rjmp	.+4      	; 0x6414 <reg_toggle_bit+0xe>
    6410:	22 0f       	add	r18, r18
    6412:	33 1f       	adc	r19, r19
    6414:	6a 95       	dec	r22
    6416:	e2 f7       	brpl	.-8      	; 0x6410 <reg_toggle_bit+0xa>
    6418:	24 27       	eor	r18, r20
    641a:	20 83       	st	Z, r18
    641c:	08 95       	ret

0000641e <reg_toggle_bits>:
    641e:	fc 01       	movw	r30, r24
    6420:	20 81       	ld	r18, Z
    6422:	62 27       	eor	r22, r18
    6424:	60 83       	st	Z, r22
    6426:	08 95       	ret

00006428 <reg_clear_bit>:
    6428:	fc 01       	movw	r30, r24
    642a:	90 81       	ld	r25, Z
    642c:	21 e0       	ldi	r18, 0x01	; 1
    642e:	30 e0       	ldi	r19, 0x00	; 0
    6430:	02 c0       	rjmp	.+4      	; 0x6436 <reg_clear_bit+0xe>
    6432:	22 0f       	add	r18, r18
    6434:	33 1f       	adc	r19, r19
    6436:	6a 95       	dec	r22
    6438:	e2 f7       	brpl	.-8      	; 0x6432 <reg_clear_bit+0xa>
    643a:	20 95       	com	r18
    643c:	29 23       	and	r18, r25
    643e:	20 83       	st	Z, r18
    6440:	08 95       	ret

00006442 <reg_clear_bits>:
    6442:	fc 01       	movw	r30, r24
    6444:	90 81       	ld	r25, Z
    6446:	60 95       	com	r22
    6448:	69 23       	and	r22, r25
    644a:	60 83       	st	Z, r22
    644c:	08 95       	ret

0000644e <_serial_call_back>:
    644e:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <crc_sum.1941>
    6452:	86 0f       	add	r24, r22
    6454:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <crc_sum.1941>
    6458:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <_mh_state>
    645c:	91 30       	cpi	r25, 0x01	; 1
    645e:	79 f0       	breq	.+30     	; 0x647e <_serial_call_back+0x30>
    6460:	28 f0       	brcs	.+10     	; 0x646c <_serial_call_back+0x1e>
    6462:	92 30       	cpi	r25, 0x02	; 2
    6464:	a9 f0       	breq	.+42     	; 0x6490 <_serial_call_back+0x42>
    6466:	93 30       	cpi	r25, 0x03	; 3
    6468:	19 f1       	breq	.+70     	; 0x64b0 <_serial_call_back+0x62>
    646a:	08 95       	ret
    646c:	6f 3f       	cpi	r22, 0xFF	; 255
    646e:	09 f0       	breq	.+2      	; 0x6472 <_serial_call_back+0x24>
    6470:	48 c0       	rjmp	.+144    	; 0x6502 <_serial_call_back+0xb4>
    6472:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <crc_sum.1941>
    6476:	81 e0       	ldi	r24, 0x01	; 1
    6478:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <_mh_state>
    647c:	08 95       	ret
    647e:	66 38       	cpi	r22, 0x86	; 134
    6480:	09 f0       	breq	.+2      	; 0x6484 <_serial_call_back+0x36>
    6482:	3f c0       	rjmp	.+126    	; 0x6502 <_serial_call_back+0xb4>
    6484:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <inDex.1939>
    6488:	82 e0       	ldi	r24, 0x02	; 2
    648a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <_mh_state>
    648e:	08 95       	ret
    6490:	e0 91 8c 0a 	lds	r30, 0x0A8C	; 0x800a8c <inDex.1939>
    6494:	81 e0       	ldi	r24, 0x01	; 1
    6496:	8e 0f       	add	r24, r30
    6498:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <inDex.1939>
    649c:	f0 e0       	ldi	r31, 0x00	; 0
    649e:	e6 57       	subi	r30, 0x76	; 118
    64a0:	f5 4f       	sbci	r31, 0xF5	; 245
    64a2:	60 83       	st	Z, r22
    64a4:	82 30       	cpi	r24, 0x02	; 2
    64a6:	69 f5       	brne	.+90     	; 0x6502 <_serial_call_back+0xb4>
    64a8:	83 e0       	ldi	r24, 0x03	; 3
    64aa:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <_mh_state>
    64ae:	08 95       	ret
    64b0:	90 91 8c 0a 	lds	r25, 0x0A8C	; 0x800a8c <inDex.1939>
    64b4:	21 e0       	ldi	r18, 0x01	; 1
    64b6:	29 0f       	add	r18, r25
    64b8:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <inDex.1939>
    64bc:	96 30       	cpi	r25, 0x06	; 6
    64be:	09 f5       	brne	.+66     	; 0x6502 <_serial_call_back+0xb4>
    64c0:	81 11       	cpse	r24, r1
    64c2:	0e c0       	rjmp	.+28     	; 0x64e0 <_serial_call_back+0x92>
    64c4:	ea e8       	ldi	r30, 0x8A	; 138
    64c6:	fa e0       	ldi	r31, 0x0A	; 10
    64c8:	80 81       	ld	r24, Z
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	98 2f       	mov	r25, r24
    64ce:	88 27       	eor	r24, r24
    64d0:	21 81       	ldd	r18, Z+1	; 0x01
    64d2:	82 0f       	add	r24, r18
    64d4:	91 1d       	adc	r25, r1
    64d6:	90 93 92 0a 	sts	0x0A92, r25	; 0x800a92 <_ppm+0x1>
    64da:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <_ppm>
    64de:	04 c0       	rjmp	.+8      	; 0x64e8 <_serial_call_back+0x9a>
    64e0:	10 92 92 0a 	sts	0x0A92, r1	; 0x800a92 <_ppm+0x1>
    64e4:	10 92 91 0a 	sts	0x0A91, r1	; 0x800a91 <_ppm>
    64e8:	10 92 90 0a 	sts	0x0A90, r1	; 0x800a90 <_mh_state>
    64ec:	e0 91 8e 0a 	lds	r30, 0x0A8E	; 0x800a8e <_app_call_back>
    64f0:	f0 91 8f 0a 	lds	r31, 0x0A8F	; 0x800a8f <_app_call_back+0x1>
    64f4:	30 97       	sbiw	r30, 0x00	; 0
    64f6:	29 f0       	breq	.+10     	; 0x6502 <_serial_call_back+0xb4>
    64f8:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <_ppm>
    64fc:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <_ppm+0x1>
    6500:	19 95       	eicall
    6502:	08 95       	ret

00006504 <mh_z19_create>:
    6504:	8f 92       	push	r8
    6506:	9f 92       	push	r9
    6508:	af 92       	push	r10
    650a:	cf 92       	push	r12
    650c:	ef 92       	push	r14
    650e:	0f 93       	push	r16
    6510:	cf 93       	push	r28
    6512:	df 93       	push	r29
    6514:	eb 01       	movw	r28, r22
    6516:	0f 2e       	mov	r0, r31
    6518:	f7 e2       	ldi	r31, 0x27	; 39
    651a:	8f 2e       	mov	r8, r31
    651c:	f2 e3       	ldi	r31, 0x32	; 50
    651e:	9f 2e       	mov	r9, r31
    6520:	f0 2d       	mov	r31, r0
    6522:	68 94       	set
    6524:	aa 24       	eor	r10, r10
    6526:	a4 f8       	bld	r10, 4
    6528:	68 94       	set
    652a:	cc 24       	eor	r12, r12
    652c:	c4 f8       	bld	r12, 4
    652e:	e1 2c       	mov	r14, r1
    6530:	00 e0       	ldi	r16, 0x00	; 0
    6532:	23 e0       	ldi	r18, 0x03	; 3
    6534:	40 e8       	ldi	r20, 0x80	; 128
    6536:	55 e2       	ldi	r21, 0x25	; 37
    6538:	60 e0       	ldi	r22, 0x00	; 0
    653a:	70 e0       	ldi	r23, 0x00	; 0
    653c:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <serial_new_instance>
    6540:	90 93 94 0a 	sts	0x0A94, r25	; 0x800a94 <_serial+0x1>
    6544:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <_serial>
    6548:	d0 93 8f 0a 	sts	0x0A8F, r29	; 0x800a8f <_app_call_back+0x1>
    654c:	c0 93 8e 0a 	sts	0x0A8E, r28	; 0x800a8e <_app_call_back>
    6550:	df 91       	pop	r29
    6552:	cf 91       	pop	r28
    6554:	0f 91       	pop	r16
    6556:	ef 90       	pop	r14
    6558:	cf 90       	pop	r12
    655a:	af 90       	pop	r10
    655c:	9f 90       	pop	r9
    655e:	8f 90       	pop	r8
    6560:	08 95       	ret

00006562 <mh_z19_take_meassuring>:
    6562:	cf 93       	push	r28
    6564:	df 93       	push	r29
    6566:	cd b7       	in	r28, 0x3d	; 61
    6568:	de b7       	in	r29, 0x3e	; 62
    656a:	29 97       	sbiw	r28, 0x09	; 9
    656c:	0f b6       	in	r0, 0x3f	; 63
    656e:	f8 94       	cli
    6570:	de bf       	out	0x3e, r29	; 62
    6572:	0f be       	out	0x3f, r0	; 63
    6574:	cd bf       	out	0x3d, r28	; 61
    6576:	89 e0       	ldi	r24, 0x09	; 9
    6578:	ec e4       	ldi	r30, 0x4C	; 76
    657a:	f5 e0       	ldi	r31, 0x05	; 5
    657c:	9e 01       	movw	r18, r28
    657e:	2f 5f       	subi	r18, 0xFF	; 255
    6580:	3f 4f       	sbci	r19, 0xFF	; 255
    6582:	d9 01       	movw	r26, r18
    6584:	01 90       	ld	r0, Z+
    6586:	0d 92       	st	X+, r0
    6588:	8a 95       	dec	r24
    658a:	e1 f7       	brne	.-8      	; 0x6584 <mh_z19_take_meassuring+0x22>
    658c:	10 92 92 0a 	sts	0x0A92, r1	; 0x800a92 <_ppm+0x1>
    6590:	10 92 91 0a 	sts	0x0A91, r1	; 0x800a91 <_ppm>
    6594:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <_serial>
    6598:	90 91 94 0a 	lds	r25, 0x0A94	; 0x800a94 <_serial+0x1>
    659c:	00 97       	sbiw	r24, 0x00	; 0
    659e:	39 f0       	breq	.+14     	; 0x65ae <mh_z19_take_meassuring+0x4c>
    65a0:	42 2f       	mov	r20, r18
    65a2:	53 2f       	mov	r21, r19
    65a4:	69 e0       	ldi	r22, 0x09	; 9
    65a6:	0e 94 a6 28 	call	0x514c	; 0x514c <serial_send_bytes>
    65aa:	80 e0       	ldi	r24, 0x00	; 0
    65ac:	01 c0       	rjmp	.+2      	; 0x65b0 <mh_z19_take_meassuring+0x4e>
    65ae:	82 e0       	ldi	r24, 0x02	; 2
    65b0:	29 96       	adiw	r28, 0x09	; 9
    65b2:	0f b6       	in	r0, 0x3f	; 63
    65b4:	f8 94       	cli
    65b6:	de bf       	out	0x3e, r29	; 62
    65b8:	0f be       	out	0x3f, r0	; 63
    65ba:	cd bf       	out	0x3d, r28	; 61
    65bc:	df 91       	pop	r29
    65be:	cf 91       	pop	r28
    65c0:	08 95       	ret

000065c2 <_initTwiInterface>:
    65c2:	80 91 a3 0a 	lds	r24, 0x0AA3	; 0x800aa3 <_twiIsInitiated>
    65c6:	81 11       	cpse	r24, r1
    65c8:	0c c0       	rjmp	.+24     	; 0x65e2 <_initTwiInterface+0x20>
    65ca:	8c e0       	ldi	r24, 0x0C	; 12
    65cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    65d0:	8f ef       	ldi	r24, 0xFF	; 255
    65d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    65d6:	84 e0       	ldi	r24, 0x04	; 4
    65d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    65dc:	81 e0       	ldi	r24, 0x01	; 1
    65de:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <_twiIsInitiated>
    65e2:	08 95       	ret

000065e4 <twiCreate>:
    65e4:	af 92       	push	r10
    65e6:	bf 92       	push	r11
    65e8:	cf 92       	push	r12
    65ea:	df 92       	push	r13
    65ec:	ef 92       	push	r14
    65ee:	ff 92       	push	r15
    65f0:	0f 93       	push	r16
    65f2:	1f 93       	push	r17
    65f4:	cf 93       	push	r28
    65f6:	df 93       	push	r29
    65f8:	a8 2e       	mov	r10, r24
    65fa:	b6 2e       	mov	r11, r22
    65fc:	69 01       	movw	r12, r18
    65fe:	7a 01       	movw	r14, r20
    6600:	84 e0       	ldi	r24, 0x04	; 4
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	db d3       	rcall	.+1974   	; 0x6dbc <malloc>
    6606:	ec 01       	movw	r28, r24
    6608:	89 2b       	or	r24, r25
    660a:	61 f1       	breq	.+88     	; 0x6664 <twiCreate+0x80>
    660c:	a8 82       	st	Y, r10
    660e:	81 e0       	ldi	r24, 0x01	; 1
    6610:	b8 12       	cpse	r11, r24
    6612:	12 c0       	rjmp	.+36     	; 0x6638 <twiCreate+0x54>
    6614:	c7 01       	movw	r24, r14
    6616:	b6 01       	movw	r22, r12
    6618:	20 ea       	ldi	r18, 0xA0	; 160
    661a:	36 e8       	ldi	r19, 0x86	; 134
    661c:	41 e0       	ldi	r20, 0x01	; 1
    661e:	50 e0       	ldi	r21, 0x00	; 0
    6620:	6e d1       	rcall	.+732    	; 0x68fe <__udivmodsi4>
    6622:	da 01       	movw	r26, r20
    6624:	c9 01       	movw	r24, r18
    6626:	40 97       	sbiw	r24, 0x10	; 16
    6628:	a1 09       	sbc	r26, r1
    662a:	b1 09       	sbc	r27, r1
    662c:	b6 95       	lsr	r27
    662e:	a7 95       	ror	r26
    6630:	97 95       	ror	r25
    6632:	87 95       	ror	r24
    6634:	89 83       	std	Y+1, r24	; 0x01
    6636:	11 c0       	rjmp	.+34     	; 0x665a <twiCreate+0x76>
    6638:	c7 01       	movw	r24, r14
    663a:	b6 01       	movw	r22, r12
    663c:	20 e8       	ldi	r18, 0x80	; 128
    663e:	3a e1       	ldi	r19, 0x1A	; 26
    6640:	46 e0       	ldi	r20, 0x06	; 6
    6642:	50 e0       	ldi	r21, 0x00	; 0
    6644:	5c d1       	rcall	.+696    	; 0x68fe <__udivmodsi4>
    6646:	da 01       	movw	r26, r20
    6648:	c9 01       	movw	r24, r18
    664a:	40 97       	sbiw	r24, 0x10	; 16
    664c:	a1 09       	sbc	r26, r1
    664e:	b1 09       	sbc	r27, r1
    6650:	b6 95       	lsr	r27
    6652:	a7 95       	ror	r26
    6654:	97 95       	ror	r25
    6656:	87 95       	ror	r24
    6658:	89 83       	std	Y+1, r24	; 0x01
    665a:	1b 83       	std	Y+3, r17	; 0x03
    665c:	0a 83       	std	Y+2, r16	; 0x02
    665e:	8c 2f       	mov	r24, r28
    6660:	9d 2f       	mov	r25, r29
    6662:	02 c0       	rjmp	.+4      	; 0x6668 <twiCreate+0x84>
    6664:	80 e0       	ldi	r24, 0x00	; 0
    6666:	90 e0       	ldi	r25, 0x00	; 0
    6668:	df 91       	pop	r29
    666a:	cf 91       	pop	r28
    666c:	1f 91       	pop	r17
    666e:	0f 91       	pop	r16
    6670:	ff 90       	pop	r15
    6672:	ef 90       	pop	r14
    6674:	df 90       	pop	r13
    6676:	cf 90       	pop	r12
    6678:	bf 90       	pop	r11
    667a:	af 90       	pop	r10
    667c:	08 95       	ret

0000667e <twiIsBusy>:
    667e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6682:	81 70       	andi	r24, 0x01	; 1
    6684:	08 95       	ret

00006686 <twiTransmit>:
    6686:	ff 92       	push	r15
    6688:	0f 93       	push	r16
    668a:	1f 93       	push	r17
    668c:	cf 93       	push	r28
    668e:	df 93       	push	r29
    6690:	00 97       	sbiw	r24, 0x00	; 0
    6692:	d1 f1       	breq	.+116    	; 0x6708 <twiTransmit+0x82>
    6694:	4a 30       	cpi	r20, 0x0A	; 10
    6696:	d0 f5       	brcc	.+116    	; 0x670c <twiTransmit+0x86>
    6698:	f4 2e       	mov	r15, r20
    669a:	8b 01       	movw	r16, r22
    669c:	ec 01       	movw	r28, r24
    669e:	ef df       	rcall	.-34     	; 0x667e <twiIsBusy>
    66a0:	81 11       	cpse	r24, r1
    66a2:	36 c0       	rjmp	.+108    	; 0x6710 <twiTransmit+0x8a>
    66a4:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <_twiCurrentHandler>
    66a8:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <_twiCurrentHandler+0x1>
    66ac:	c8 17       	cp	r28, r24
    66ae:	d9 07       	cpc	r29, r25
    66b0:	41 f0       	breq	.+16     	; 0x66c2 <twiTransmit+0x3c>
    66b2:	87 df       	rcall	.-242    	; 0x65c2 <_initTwiInterface>
    66b4:	89 81       	ldd	r24, Y+1	; 0x01
    66b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    66ba:	d0 93 97 0a 	sts	0x0A97, r29	; 0x800a97 <_twiCurrentHandler+0x1>
    66be:	c0 93 96 0a 	sts	0x0A96, r28	; 0x800a96 <_twiCurrentHandler>
    66c2:	81 e0       	ldi	r24, 0x01	; 1
    66c4:	8f 0d       	add	r24, r15
    66c6:	80 93 98 0a 	sts	0x0A98, r24	; 0x800a98 <_twiMessageLen>
    66ca:	88 81       	ld	r24, Y
    66cc:	88 0f       	add	r24, r24
    66ce:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <_twiMessageBuffer>
    66d2:	ff 20       	and	r15, r15
    66d4:	89 f0       	breq	.+34     	; 0x66f8 <twiTransmit+0x72>
    66d6:	f8 01       	movw	r30, r16
    66d8:	aa e9       	ldi	r26, 0x9A	; 154
    66da:	ba e0       	ldi	r27, 0x0A	; 10
    66dc:	4f ef       	ldi	r20, 0xFF	; 255
    66de:	4f 0d       	add	r20, r15
    66e0:	64 2f       	mov	r22, r20
    66e2:	70 e0       	ldi	r23, 0x00	; 0
    66e4:	cb 01       	movw	r24, r22
    66e6:	01 96       	adiw	r24, 0x01	; 1
    66e8:	b8 01       	movw	r22, r16
    66ea:	68 0f       	add	r22, r24
    66ec:	79 1f       	adc	r23, r25
    66ee:	81 91       	ld	r24, Z+
    66f0:	8d 93       	st	X+, r24
    66f2:	e6 17       	cp	r30, r22
    66f4:	f7 07       	cpc	r31, r23
    66f6:	d9 f7       	brne	.-10     	; 0x66ee <twiTransmit+0x68>
    66f8:	88 ef       	ldi	r24, 0xF8	; 248
    66fa:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    66fe:	85 ea       	ldi	r24, 0xA5	; 165
    6700:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6704:	84 e0       	ldi	r24, 0x04	; 4
    6706:	05 c0       	rjmp	.+10     	; 0x6712 <twiTransmit+0x8c>
    6708:	86 e0       	ldi	r24, 0x06	; 6
    670a:	03 c0       	rjmp	.+6      	; 0x6712 <twiTransmit+0x8c>
    670c:	87 e0       	ldi	r24, 0x07	; 7
    670e:	01 c0       	rjmp	.+2      	; 0x6712 <twiTransmit+0x8c>
    6710:	82 e0       	ldi	r24, 0x02	; 2
    6712:	df 91       	pop	r29
    6714:	cf 91       	pop	r28
    6716:	1f 91       	pop	r17
    6718:	0f 91       	pop	r16
    671a:	ff 90       	pop	r15
    671c:	08 95       	ret

0000671e <twiReceive>:
    671e:	1f 93       	push	r17
    6720:	cf 93       	push	r28
    6722:	df 93       	push	r29
    6724:	00 97       	sbiw	r24, 0x00	; 0
    6726:	29 f1       	breq	.+74     	; 0x6772 <twiReceive+0x54>
    6728:	6b 30       	cpi	r22, 0x0B	; 11
    672a:	28 f5       	brcc	.+74     	; 0x6776 <twiReceive+0x58>
    672c:	16 2f       	mov	r17, r22
    672e:	ec 01       	movw	r28, r24
    6730:	a6 df       	rcall	.-180    	; 0x667e <twiIsBusy>
    6732:	81 11       	cpse	r24, r1
    6734:	22 c0       	rjmp	.+68     	; 0x677a <twiReceive+0x5c>
    6736:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <_twiCurrentHandler>
    673a:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <_twiCurrentHandler+0x1>
    673e:	c8 17       	cp	r28, r24
    6740:	d9 07       	cpc	r29, r25
    6742:	41 f0       	breq	.+16     	; 0x6754 <twiReceive+0x36>
    6744:	3e df       	rcall	.-388    	; 0x65c2 <_initTwiInterface>
    6746:	89 81       	ldd	r24, Y+1	; 0x01
    6748:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    674c:	d0 93 97 0a 	sts	0x0A97, r29	; 0x800a97 <_twiCurrentHandler+0x1>
    6750:	c0 93 96 0a 	sts	0x0A96, r28	; 0x800a96 <_twiCurrentHandler>
    6754:	10 93 98 0a 	sts	0x0A98, r17	; 0x800a98 <_twiMessageLen>
    6758:	88 81       	ld	r24, Y
    675a:	88 0f       	add	r24, r24
    675c:	81 60       	ori	r24, 0x01	; 1
    675e:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <_twiMessageBuffer>
    6762:	88 ef       	ldi	r24, 0xF8	; 248
    6764:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    6768:	85 ea       	ldi	r24, 0xA5	; 165
    676a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    676e:	85 e0       	ldi	r24, 0x05	; 5
    6770:	05 c0       	rjmp	.+10     	; 0x677c <twiReceive+0x5e>
    6772:	86 e0       	ldi	r24, 0x06	; 6
    6774:	03 c0       	rjmp	.+6      	; 0x677c <twiReceive+0x5e>
    6776:	87 e0       	ldi	r24, 0x07	; 7
    6778:	01 c0       	rjmp	.+2      	; 0x677c <twiReceive+0x5e>
    677a:	82 e0       	ldi	r24, 0x02	; 2
    677c:	df 91       	pop	r29
    677e:	cf 91       	pop	r28
    6780:	1f 91       	pop	r17
    6782:	08 95       	ret

00006784 <__vector_39>:
    6784:	1f 92       	push	r1
    6786:	0f 92       	push	r0
    6788:	0f b6       	in	r0, 0x3f	; 63
    678a:	0f 92       	push	r0
    678c:	11 24       	eor	r1, r1
    678e:	0b b6       	in	r0, 0x3b	; 59
    6790:	0f 92       	push	r0
    6792:	2f 93       	push	r18
    6794:	3f 93       	push	r19
    6796:	4f 93       	push	r20
    6798:	5f 93       	push	r21
    679a:	6f 93       	push	r22
    679c:	7f 93       	push	r23
    679e:	8f 93       	push	r24
    67a0:	9f 93       	push	r25
    67a2:	af 93       	push	r26
    67a4:	bf 93       	push	r27
    67a6:	ef 93       	push	r30
    67a8:	ff 93       	push	r31
    67aa:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    67ae:	8e 2f       	mov	r24, r30
    67b0:	90 e0       	ldi	r25, 0x00	; 0
    67b2:	fc 01       	movw	r30, r24
    67b4:	38 97       	sbiw	r30, 0x08	; 8
    67b6:	e1 35       	cpi	r30, 0x51	; 81
    67b8:	f1 05       	cpc	r31, r1
    67ba:	08 f0       	brcs	.+2      	; 0x67be <__vector_39+0x3a>
    67bc:	75 c0       	rjmp	.+234    	; 0x68a8 <__vector_39+0x124>
    67be:	88 27       	eor	r24, r24
    67c0:	e4 58       	subi	r30, 0x84	; 132
    67c2:	ff 4f       	sbci	r31, 0xFF	; 255
    67c4:	8f 4f       	sbci	r24, 0xFF	; 255
    67c6:	bd c0       	rjmp	.+378    	; 0x6942 <__tablejump2__>
    67c8:	10 92 95 0a 	sts	0x0A95, r1	; 0x800a95 <_index.1885>
    67cc:	e0 91 95 0a 	lds	r30, 0x0A95	; 0x800a95 <_index.1885>
    67d0:	80 91 98 0a 	lds	r24, 0x0A98	; 0x800a98 <_twiMessageLen>
    67d4:	e8 17       	cp	r30, r24
    67d6:	70 f4       	brcc	.+28     	; 0x67f4 <__vector_39+0x70>
    67d8:	81 e0       	ldi	r24, 0x01	; 1
    67da:	8e 0f       	add	r24, r30
    67dc:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <_index.1885>
    67e0:	f0 e0       	ldi	r31, 0x00	; 0
    67e2:	e7 56       	subi	r30, 0x67	; 103
    67e4:	f5 4f       	sbci	r31, 0xF5	; 245
    67e6:	80 81       	ld	r24, Z
    67e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    67ec:	85 e8       	ldi	r24, 0x85	; 133
    67ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    67f2:	72 c0       	rjmp	.+228    	; 0x68d8 <__vector_39+0x154>
    67f4:	84 e9       	ldi	r24, 0x94	; 148
    67f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    67fa:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <_twiCurrentHandler>
    67fe:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <_twiCurrentHandler+0x1>
    6802:	dc 01       	movw	r26, r24
    6804:	12 96       	adiw	r26, 0x02	; 2
    6806:	ed 91       	ld	r30, X+
    6808:	fc 91       	ld	r31, X
    680a:	13 97       	sbiw	r26, 0x03	; 3
    680c:	30 97       	sbiw	r30, 0x00	; 0
    680e:	09 f4       	brne	.+2      	; 0x6812 <__vector_39+0x8e>
    6810:	63 c0       	rjmp	.+198    	; 0x68d8 <__vector_39+0x154>
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	40 e0       	ldi	r20, 0x00	; 0
    6816:	50 e0       	ldi	r21, 0x00	; 0
    6818:	64 e0       	ldi	r22, 0x04	; 4
    681a:	19 95       	eicall
    681c:	5d c0       	rjmp	.+186    	; 0x68d8 <__vector_39+0x154>
    681e:	e0 91 95 0a 	lds	r30, 0x0A95	; 0x800a95 <_index.1885>
    6822:	81 e0       	ldi	r24, 0x01	; 1
    6824:	8e 0f       	add	r24, r30
    6826:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <_index.1885>
    682a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    682e:	f0 e0       	ldi	r31, 0x00	; 0
    6830:	e7 56       	subi	r30, 0x67	; 103
    6832:	f5 4f       	sbci	r31, 0xF5	; 245
    6834:	80 83       	st	Z, r24
    6836:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    683a:	80 34       	cpi	r24, 0x40	; 64
    683c:	11 f4       	brne	.+4      	; 0x6842 <__vector_39+0xbe>
    683e:	10 92 95 0a 	sts	0x0A95, r1	; 0x800a95 <_index.1885>
    6842:	20 91 95 0a 	lds	r18, 0x0A95	; 0x800a95 <_index.1885>
    6846:	30 e0       	ldi	r19, 0x00	; 0
    6848:	80 91 98 0a 	lds	r24, 0x0A98	; 0x800a98 <_twiMessageLen>
    684c:	90 e0       	ldi	r25, 0x00	; 0
    684e:	01 97       	sbiw	r24, 0x01	; 1
    6850:	28 17       	cp	r18, r24
    6852:	39 07       	cpc	r19, r25
    6854:	24 f4       	brge	.+8      	; 0x685e <__vector_39+0xda>
    6856:	85 ec       	ldi	r24, 0xC5	; 197
    6858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    685c:	3d c0       	rjmp	.+122    	; 0x68d8 <__vector_39+0x154>
    685e:	85 e8       	ldi	r24, 0x85	; 133
    6860:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6864:	39 c0       	rjmp	.+114    	; 0x68d8 <__vector_39+0x154>
    6866:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    686a:	e0 91 95 0a 	lds	r30, 0x0A95	; 0x800a95 <_index.1885>
    686e:	f0 e0       	ldi	r31, 0x00	; 0
    6870:	e7 56       	subi	r30, 0x67	; 103
    6872:	f5 4f       	sbci	r31, 0xF5	; 245
    6874:	80 83       	st	Z, r24
    6876:	84 e9       	ldi	r24, 0x94	; 148
    6878:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    687c:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <_twiCurrentHandler>
    6880:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <_twiCurrentHandler+0x1>
    6884:	dc 01       	movw	r26, r24
    6886:	12 96       	adiw	r26, 0x02	; 2
    6888:	ed 91       	ld	r30, X+
    688a:	fc 91       	ld	r31, X
    688c:	13 97       	sbiw	r26, 0x03	; 3
    688e:	30 97       	sbiw	r30, 0x00	; 0
    6890:	19 f1       	breq	.+70     	; 0x68d8 <__vector_39+0x154>
    6892:	20 91 98 0a 	lds	r18, 0x0A98	; 0x800a98 <_twiMessageLen>
    6896:	49 e9       	ldi	r20, 0x99	; 153
    6898:	5a e0       	ldi	r21, 0x0A	; 10
    689a:	65 e0       	ldi	r22, 0x05	; 5
    689c:	19 95       	eicall
    689e:	1c c0       	rjmp	.+56     	; 0x68d8 <__vector_39+0x154>
    68a0:	85 ea       	ldi	r24, 0xA5	; 165
    68a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    68a6:	18 c0       	rjmp	.+48     	; 0x68d8 <__vector_39+0x154>
    68a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    68ac:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    68b0:	84 e0       	ldi	r24, 0x04	; 4
    68b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    68b6:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <_twiCurrentHandler>
    68ba:	90 91 97 0a 	lds	r25, 0x0A97	; 0x800a97 <_twiCurrentHandler+0x1>
    68be:	dc 01       	movw	r26, r24
    68c0:	12 96       	adiw	r26, 0x02	; 2
    68c2:	ed 91       	ld	r30, X+
    68c4:	fc 91       	ld	r31, X
    68c6:	13 97       	sbiw	r26, 0x03	; 3
    68c8:	30 97       	sbiw	r30, 0x00	; 0
    68ca:	31 f0       	breq	.+12     	; 0x68d8 <__vector_39+0x154>
    68cc:	20 e0       	ldi	r18, 0x00	; 0
    68ce:	40 e0       	ldi	r20, 0x00	; 0
    68d0:	50 e0       	ldi	r21, 0x00	; 0
    68d2:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    68d6:	19 95       	eicall
    68d8:	ff 91       	pop	r31
    68da:	ef 91       	pop	r30
    68dc:	bf 91       	pop	r27
    68de:	af 91       	pop	r26
    68e0:	9f 91       	pop	r25
    68e2:	8f 91       	pop	r24
    68e4:	7f 91       	pop	r23
    68e6:	6f 91       	pop	r22
    68e8:	5f 91       	pop	r21
    68ea:	4f 91       	pop	r20
    68ec:	3f 91       	pop	r19
    68ee:	2f 91       	pop	r18
    68f0:	0f 90       	pop	r0
    68f2:	0b be       	out	0x3b, r0	; 59
    68f4:	0f 90       	pop	r0
    68f6:	0f be       	out	0x3f, r0	; 63
    68f8:	0f 90       	pop	r0
    68fa:	1f 90       	pop	r1
    68fc:	18 95       	reti

000068fe <__udivmodsi4>:
    68fe:	a1 e2       	ldi	r26, 0x21	; 33
    6900:	1a 2e       	mov	r1, r26
    6902:	aa 1b       	sub	r26, r26
    6904:	bb 1b       	sub	r27, r27
    6906:	fd 01       	movw	r30, r26
    6908:	0d c0       	rjmp	.+26     	; 0x6924 <__udivmodsi4_ep>

0000690a <__udivmodsi4_loop>:
    690a:	aa 1f       	adc	r26, r26
    690c:	bb 1f       	adc	r27, r27
    690e:	ee 1f       	adc	r30, r30
    6910:	ff 1f       	adc	r31, r31
    6912:	a2 17       	cp	r26, r18
    6914:	b3 07       	cpc	r27, r19
    6916:	e4 07       	cpc	r30, r20
    6918:	f5 07       	cpc	r31, r21
    691a:	20 f0       	brcs	.+8      	; 0x6924 <__udivmodsi4_ep>
    691c:	a2 1b       	sub	r26, r18
    691e:	b3 0b       	sbc	r27, r19
    6920:	e4 0b       	sbc	r30, r20
    6922:	f5 0b       	sbc	r31, r21

00006924 <__udivmodsi4_ep>:
    6924:	66 1f       	adc	r22, r22
    6926:	77 1f       	adc	r23, r23
    6928:	88 1f       	adc	r24, r24
    692a:	99 1f       	adc	r25, r25
    692c:	1a 94       	dec	r1
    692e:	69 f7       	brne	.-38     	; 0x690a <__udivmodsi4_loop>
    6930:	60 95       	com	r22
    6932:	70 95       	com	r23
    6934:	80 95       	com	r24
    6936:	90 95       	com	r25
    6938:	9b 01       	movw	r18, r22
    693a:	ac 01       	movw	r20, r24
    693c:	bd 01       	movw	r22, r26
    693e:	cf 01       	movw	r24, r30
    6940:	08 95       	ret

00006942 <__tablejump2__>:
    6942:	ee 0f       	add	r30, r30
    6944:	ff 1f       	adc	r31, r31
    6946:	88 1f       	adc	r24, r24
    6948:	8b bf       	out	0x3b, r24	; 59
    694a:	07 90       	elpm	r0, Z+
    694c:	f6 91       	elpm	r31, Z
    694e:	e0 2d       	mov	r30, r0
    6950:	19 94       	eijmp

00006952 <__subsf3>:
    6952:	50 58       	subi	r21, 0x80	; 128

00006954 <__addsf3>:
    6954:	bb 27       	eor	r27, r27
    6956:	aa 27       	eor	r26, r26
    6958:	0e d0       	rcall	.+28     	; 0x6976 <__addsf3x>
    695a:	75 c1       	rjmp	.+746    	; 0x6c46 <__fp_round>
    695c:	66 d1       	rcall	.+716    	; 0x6c2a <__fp_pscA>
    695e:	30 f0       	brcs	.+12     	; 0x696c <__addsf3+0x18>
    6960:	6b d1       	rcall	.+726    	; 0x6c38 <__fp_pscB>
    6962:	20 f0       	brcs	.+8      	; 0x696c <__addsf3+0x18>
    6964:	31 f4       	brne	.+12     	; 0x6972 <__addsf3+0x1e>
    6966:	9f 3f       	cpi	r25, 0xFF	; 255
    6968:	11 f4       	brne	.+4      	; 0x696e <__addsf3+0x1a>
    696a:	1e f4       	brtc	.+6      	; 0x6972 <__addsf3+0x1e>
    696c:	5b c1       	rjmp	.+694    	; 0x6c24 <__fp_nan>
    696e:	0e f4       	brtc	.+2      	; 0x6972 <__addsf3+0x1e>
    6970:	e0 95       	com	r30
    6972:	e7 fb       	bst	r30, 7
    6974:	51 c1       	rjmp	.+674    	; 0x6c18 <__fp_inf>

00006976 <__addsf3x>:
    6976:	e9 2f       	mov	r30, r25
    6978:	77 d1       	rcall	.+750    	; 0x6c68 <__fp_split3>
    697a:	80 f3       	brcs	.-32     	; 0x695c <__addsf3+0x8>
    697c:	ba 17       	cp	r27, r26
    697e:	62 07       	cpc	r22, r18
    6980:	73 07       	cpc	r23, r19
    6982:	84 07       	cpc	r24, r20
    6984:	95 07       	cpc	r25, r21
    6986:	18 f0       	brcs	.+6      	; 0x698e <__addsf3x+0x18>
    6988:	71 f4       	brne	.+28     	; 0x69a6 <__addsf3x+0x30>
    698a:	9e f5       	brtc	.+102    	; 0x69f2 <__addsf3x+0x7c>
    698c:	8f c1       	rjmp	.+798    	; 0x6cac <__fp_zero>
    698e:	0e f4       	brtc	.+2      	; 0x6992 <__addsf3x+0x1c>
    6990:	e0 95       	com	r30
    6992:	0b 2e       	mov	r0, r27
    6994:	ba 2f       	mov	r27, r26
    6996:	a0 2d       	mov	r26, r0
    6998:	0b 01       	movw	r0, r22
    699a:	b9 01       	movw	r22, r18
    699c:	90 01       	movw	r18, r0
    699e:	0c 01       	movw	r0, r24
    69a0:	ca 01       	movw	r24, r20
    69a2:	a0 01       	movw	r20, r0
    69a4:	11 24       	eor	r1, r1
    69a6:	ff 27       	eor	r31, r31
    69a8:	59 1b       	sub	r21, r25
    69aa:	99 f0       	breq	.+38     	; 0x69d2 <__addsf3x+0x5c>
    69ac:	59 3f       	cpi	r21, 0xF9	; 249
    69ae:	50 f4       	brcc	.+20     	; 0x69c4 <__addsf3x+0x4e>
    69b0:	50 3e       	cpi	r21, 0xE0	; 224
    69b2:	68 f1       	brcs	.+90     	; 0x6a0e <__addsf3x+0x98>
    69b4:	1a 16       	cp	r1, r26
    69b6:	f0 40       	sbci	r31, 0x00	; 0
    69b8:	a2 2f       	mov	r26, r18
    69ba:	23 2f       	mov	r18, r19
    69bc:	34 2f       	mov	r19, r20
    69be:	44 27       	eor	r20, r20
    69c0:	58 5f       	subi	r21, 0xF8	; 248
    69c2:	f3 cf       	rjmp	.-26     	; 0x69aa <__addsf3x+0x34>
    69c4:	46 95       	lsr	r20
    69c6:	37 95       	ror	r19
    69c8:	27 95       	ror	r18
    69ca:	a7 95       	ror	r26
    69cc:	f0 40       	sbci	r31, 0x00	; 0
    69ce:	53 95       	inc	r21
    69d0:	c9 f7       	brne	.-14     	; 0x69c4 <__addsf3x+0x4e>
    69d2:	7e f4       	brtc	.+30     	; 0x69f2 <__addsf3x+0x7c>
    69d4:	1f 16       	cp	r1, r31
    69d6:	ba 0b       	sbc	r27, r26
    69d8:	62 0b       	sbc	r22, r18
    69da:	73 0b       	sbc	r23, r19
    69dc:	84 0b       	sbc	r24, r20
    69de:	ba f0       	brmi	.+46     	; 0x6a0e <__addsf3x+0x98>
    69e0:	91 50       	subi	r25, 0x01	; 1
    69e2:	a1 f0       	breq	.+40     	; 0x6a0c <__addsf3x+0x96>
    69e4:	ff 0f       	add	r31, r31
    69e6:	bb 1f       	adc	r27, r27
    69e8:	66 1f       	adc	r22, r22
    69ea:	77 1f       	adc	r23, r23
    69ec:	88 1f       	adc	r24, r24
    69ee:	c2 f7       	brpl	.-16     	; 0x69e0 <__addsf3x+0x6a>
    69f0:	0e c0       	rjmp	.+28     	; 0x6a0e <__addsf3x+0x98>
    69f2:	ba 0f       	add	r27, r26
    69f4:	62 1f       	adc	r22, r18
    69f6:	73 1f       	adc	r23, r19
    69f8:	84 1f       	adc	r24, r20
    69fa:	48 f4       	brcc	.+18     	; 0x6a0e <__addsf3x+0x98>
    69fc:	87 95       	ror	r24
    69fe:	77 95       	ror	r23
    6a00:	67 95       	ror	r22
    6a02:	b7 95       	ror	r27
    6a04:	f7 95       	ror	r31
    6a06:	9e 3f       	cpi	r25, 0xFE	; 254
    6a08:	08 f0       	brcs	.+2      	; 0x6a0c <__addsf3x+0x96>
    6a0a:	b3 cf       	rjmp	.-154    	; 0x6972 <__addsf3+0x1e>
    6a0c:	93 95       	inc	r25
    6a0e:	88 0f       	add	r24, r24
    6a10:	08 f0       	brcs	.+2      	; 0x6a14 <__addsf3x+0x9e>
    6a12:	99 27       	eor	r25, r25
    6a14:	ee 0f       	add	r30, r30
    6a16:	97 95       	ror	r25
    6a18:	87 95       	ror	r24
    6a1a:	08 95       	ret

00006a1c <__cmpsf2>:
    6a1c:	d9 d0       	rcall	.+434    	; 0x6bd0 <__fp_cmp>
    6a1e:	08 f4       	brcc	.+2      	; 0x6a22 <__cmpsf2+0x6>
    6a20:	81 e0       	ldi	r24, 0x01	; 1
    6a22:	08 95       	ret

00006a24 <__divsf3>:
    6a24:	0c d0       	rcall	.+24     	; 0x6a3e <__divsf3x>
    6a26:	0f c1       	rjmp	.+542    	; 0x6c46 <__fp_round>
    6a28:	07 d1       	rcall	.+526    	; 0x6c38 <__fp_pscB>
    6a2a:	40 f0       	brcs	.+16     	; 0x6a3c <__divsf3+0x18>
    6a2c:	fe d0       	rcall	.+508    	; 0x6c2a <__fp_pscA>
    6a2e:	30 f0       	brcs	.+12     	; 0x6a3c <__divsf3+0x18>
    6a30:	21 f4       	brne	.+8      	; 0x6a3a <__divsf3+0x16>
    6a32:	5f 3f       	cpi	r21, 0xFF	; 255
    6a34:	19 f0       	breq	.+6      	; 0x6a3c <__divsf3+0x18>
    6a36:	f0 c0       	rjmp	.+480    	; 0x6c18 <__fp_inf>
    6a38:	51 11       	cpse	r21, r1
    6a3a:	39 c1       	rjmp	.+626    	; 0x6cae <__fp_szero>
    6a3c:	f3 c0       	rjmp	.+486    	; 0x6c24 <__fp_nan>

00006a3e <__divsf3x>:
    6a3e:	14 d1       	rcall	.+552    	; 0x6c68 <__fp_split3>
    6a40:	98 f3       	brcs	.-26     	; 0x6a28 <__divsf3+0x4>

00006a42 <__divsf3_pse>:
    6a42:	99 23       	and	r25, r25
    6a44:	c9 f3       	breq	.-14     	; 0x6a38 <__divsf3+0x14>
    6a46:	55 23       	and	r21, r21
    6a48:	b1 f3       	breq	.-20     	; 0x6a36 <__divsf3+0x12>
    6a4a:	95 1b       	sub	r25, r21
    6a4c:	55 0b       	sbc	r21, r21
    6a4e:	bb 27       	eor	r27, r27
    6a50:	aa 27       	eor	r26, r26
    6a52:	62 17       	cp	r22, r18
    6a54:	73 07       	cpc	r23, r19
    6a56:	84 07       	cpc	r24, r20
    6a58:	38 f0       	brcs	.+14     	; 0x6a68 <__divsf3_pse+0x26>
    6a5a:	9f 5f       	subi	r25, 0xFF	; 255
    6a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    6a5e:	22 0f       	add	r18, r18
    6a60:	33 1f       	adc	r19, r19
    6a62:	44 1f       	adc	r20, r20
    6a64:	aa 1f       	adc	r26, r26
    6a66:	a9 f3       	breq	.-22     	; 0x6a52 <__divsf3_pse+0x10>
    6a68:	33 d0       	rcall	.+102    	; 0x6ad0 <__divsf3_pse+0x8e>
    6a6a:	0e 2e       	mov	r0, r30
    6a6c:	3a f0       	brmi	.+14     	; 0x6a7c <__divsf3_pse+0x3a>
    6a6e:	e0 e8       	ldi	r30, 0x80	; 128
    6a70:	30 d0       	rcall	.+96     	; 0x6ad2 <__divsf3_pse+0x90>
    6a72:	91 50       	subi	r25, 0x01	; 1
    6a74:	50 40       	sbci	r21, 0x00	; 0
    6a76:	e6 95       	lsr	r30
    6a78:	00 1c       	adc	r0, r0
    6a7a:	ca f7       	brpl	.-14     	; 0x6a6e <__divsf3_pse+0x2c>
    6a7c:	29 d0       	rcall	.+82     	; 0x6ad0 <__divsf3_pse+0x8e>
    6a7e:	fe 2f       	mov	r31, r30
    6a80:	27 d0       	rcall	.+78     	; 0x6ad0 <__divsf3_pse+0x8e>
    6a82:	66 0f       	add	r22, r22
    6a84:	77 1f       	adc	r23, r23
    6a86:	88 1f       	adc	r24, r24
    6a88:	bb 1f       	adc	r27, r27
    6a8a:	26 17       	cp	r18, r22
    6a8c:	37 07       	cpc	r19, r23
    6a8e:	48 07       	cpc	r20, r24
    6a90:	ab 07       	cpc	r26, r27
    6a92:	b0 e8       	ldi	r27, 0x80	; 128
    6a94:	09 f0       	breq	.+2      	; 0x6a98 <__divsf3_pse+0x56>
    6a96:	bb 0b       	sbc	r27, r27
    6a98:	80 2d       	mov	r24, r0
    6a9a:	bf 01       	movw	r22, r30
    6a9c:	ff 27       	eor	r31, r31
    6a9e:	93 58       	subi	r25, 0x83	; 131
    6aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    6aa2:	2a f0       	brmi	.+10     	; 0x6aae <__divsf3_pse+0x6c>
    6aa4:	9e 3f       	cpi	r25, 0xFE	; 254
    6aa6:	51 05       	cpc	r21, r1
    6aa8:	68 f0       	brcs	.+26     	; 0x6ac4 <__divsf3_pse+0x82>
    6aaa:	b6 c0       	rjmp	.+364    	; 0x6c18 <__fp_inf>
    6aac:	00 c1       	rjmp	.+512    	; 0x6cae <__fp_szero>
    6aae:	5f 3f       	cpi	r21, 0xFF	; 255
    6ab0:	ec f3       	brlt	.-6      	; 0x6aac <__divsf3_pse+0x6a>
    6ab2:	98 3e       	cpi	r25, 0xE8	; 232
    6ab4:	dc f3       	brlt	.-10     	; 0x6aac <__divsf3_pse+0x6a>
    6ab6:	86 95       	lsr	r24
    6ab8:	77 95       	ror	r23
    6aba:	67 95       	ror	r22
    6abc:	b7 95       	ror	r27
    6abe:	f7 95       	ror	r31
    6ac0:	9f 5f       	subi	r25, 0xFF	; 255
    6ac2:	c9 f7       	brne	.-14     	; 0x6ab6 <__divsf3_pse+0x74>
    6ac4:	88 0f       	add	r24, r24
    6ac6:	91 1d       	adc	r25, r1
    6ac8:	96 95       	lsr	r25
    6aca:	87 95       	ror	r24
    6acc:	97 f9       	bld	r25, 7
    6ace:	08 95       	ret
    6ad0:	e1 e0       	ldi	r30, 0x01	; 1
    6ad2:	66 0f       	add	r22, r22
    6ad4:	77 1f       	adc	r23, r23
    6ad6:	88 1f       	adc	r24, r24
    6ad8:	bb 1f       	adc	r27, r27
    6ada:	62 17       	cp	r22, r18
    6adc:	73 07       	cpc	r23, r19
    6ade:	84 07       	cpc	r24, r20
    6ae0:	ba 07       	cpc	r27, r26
    6ae2:	20 f0       	brcs	.+8      	; 0x6aec <__divsf3_pse+0xaa>
    6ae4:	62 1b       	sub	r22, r18
    6ae6:	73 0b       	sbc	r23, r19
    6ae8:	84 0b       	sbc	r24, r20
    6aea:	ba 0b       	sbc	r27, r26
    6aec:	ee 1f       	adc	r30, r30
    6aee:	88 f7       	brcc	.-30     	; 0x6ad2 <__divsf3_pse+0x90>
    6af0:	e0 95       	com	r30
    6af2:	08 95       	ret

00006af4 <__fixsfsi>:
    6af4:	04 d0       	rcall	.+8      	; 0x6afe <__fixunssfsi>
    6af6:	68 94       	set
    6af8:	b1 11       	cpse	r27, r1
    6afa:	d9 c0       	rjmp	.+434    	; 0x6cae <__fp_szero>
    6afc:	08 95       	ret

00006afe <__fixunssfsi>:
    6afe:	bc d0       	rcall	.+376    	; 0x6c78 <__fp_splitA>
    6b00:	88 f0       	brcs	.+34     	; 0x6b24 <__fixunssfsi+0x26>
    6b02:	9f 57       	subi	r25, 0x7F	; 127
    6b04:	90 f0       	brcs	.+36     	; 0x6b2a <__fixunssfsi+0x2c>
    6b06:	b9 2f       	mov	r27, r25
    6b08:	99 27       	eor	r25, r25
    6b0a:	b7 51       	subi	r27, 0x17	; 23
    6b0c:	a0 f0       	brcs	.+40     	; 0x6b36 <__fixunssfsi+0x38>
    6b0e:	d1 f0       	breq	.+52     	; 0x6b44 <__fixunssfsi+0x46>
    6b10:	66 0f       	add	r22, r22
    6b12:	77 1f       	adc	r23, r23
    6b14:	88 1f       	adc	r24, r24
    6b16:	99 1f       	adc	r25, r25
    6b18:	1a f0       	brmi	.+6      	; 0x6b20 <__fixunssfsi+0x22>
    6b1a:	ba 95       	dec	r27
    6b1c:	c9 f7       	brne	.-14     	; 0x6b10 <__fixunssfsi+0x12>
    6b1e:	12 c0       	rjmp	.+36     	; 0x6b44 <__fixunssfsi+0x46>
    6b20:	b1 30       	cpi	r27, 0x01	; 1
    6b22:	81 f0       	breq	.+32     	; 0x6b44 <__fixunssfsi+0x46>
    6b24:	c3 d0       	rcall	.+390    	; 0x6cac <__fp_zero>
    6b26:	b1 e0       	ldi	r27, 0x01	; 1
    6b28:	08 95       	ret
    6b2a:	c0 c0       	rjmp	.+384    	; 0x6cac <__fp_zero>
    6b2c:	67 2f       	mov	r22, r23
    6b2e:	78 2f       	mov	r23, r24
    6b30:	88 27       	eor	r24, r24
    6b32:	b8 5f       	subi	r27, 0xF8	; 248
    6b34:	39 f0       	breq	.+14     	; 0x6b44 <__fixunssfsi+0x46>
    6b36:	b9 3f       	cpi	r27, 0xF9	; 249
    6b38:	cc f3       	brlt	.-14     	; 0x6b2c <__fixunssfsi+0x2e>
    6b3a:	86 95       	lsr	r24
    6b3c:	77 95       	ror	r23
    6b3e:	67 95       	ror	r22
    6b40:	b3 95       	inc	r27
    6b42:	d9 f7       	brne	.-10     	; 0x6b3a <__fixunssfsi+0x3c>
    6b44:	3e f4       	brtc	.+14     	; 0x6b54 <__fixunssfsi+0x56>
    6b46:	90 95       	com	r25
    6b48:	80 95       	com	r24
    6b4a:	70 95       	com	r23
    6b4c:	61 95       	neg	r22
    6b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b50:	8f 4f       	sbci	r24, 0xFF	; 255
    6b52:	9f 4f       	sbci	r25, 0xFF	; 255
    6b54:	08 95       	ret

00006b56 <__floatunsisf>:
    6b56:	e8 94       	clt
    6b58:	09 c0       	rjmp	.+18     	; 0x6b6c <__floatsisf+0x12>

00006b5a <__floatsisf>:
    6b5a:	97 fb       	bst	r25, 7
    6b5c:	3e f4       	brtc	.+14     	; 0x6b6c <__floatsisf+0x12>
    6b5e:	90 95       	com	r25
    6b60:	80 95       	com	r24
    6b62:	70 95       	com	r23
    6b64:	61 95       	neg	r22
    6b66:	7f 4f       	sbci	r23, 0xFF	; 255
    6b68:	8f 4f       	sbci	r24, 0xFF	; 255
    6b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b6c:	99 23       	and	r25, r25
    6b6e:	a9 f0       	breq	.+42     	; 0x6b9a <__floatsisf+0x40>
    6b70:	f9 2f       	mov	r31, r25
    6b72:	96 e9       	ldi	r25, 0x96	; 150
    6b74:	bb 27       	eor	r27, r27
    6b76:	93 95       	inc	r25
    6b78:	f6 95       	lsr	r31
    6b7a:	87 95       	ror	r24
    6b7c:	77 95       	ror	r23
    6b7e:	67 95       	ror	r22
    6b80:	b7 95       	ror	r27
    6b82:	f1 11       	cpse	r31, r1
    6b84:	f8 cf       	rjmp	.-16     	; 0x6b76 <__floatsisf+0x1c>
    6b86:	fa f4       	brpl	.+62     	; 0x6bc6 <__floatsisf+0x6c>
    6b88:	bb 0f       	add	r27, r27
    6b8a:	11 f4       	brne	.+4      	; 0x6b90 <__floatsisf+0x36>
    6b8c:	60 ff       	sbrs	r22, 0
    6b8e:	1b c0       	rjmp	.+54     	; 0x6bc6 <__floatsisf+0x6c>
    6b90:	6f 5f       	subi	r22, 0xFF	; 255
    6b92:	7f 4f       	sbci	r23, 0xFF	; 255
    6b94:	8f 4f       	sbci	r24, 0xFF	; 255
    6b96:	9f 4f       	sbci	r25, 0xFF	; 255
    6b98:	16 c0       	rjmp	.+44     	; 0x6bc6 <__floatsisf+0x6c>
    6b9a:	88 23       	and	r24, r24
    6b9c:	11 f0       	breq	.+4      	; 0x6ba2 <__floatsisf+0x48>
    6b9e:	96 e9       	ldi	r25, 0x96	; 150
    6ba0:	11 c0       	rjmp	.+34     	; 0x6bc4 <__floatsisf+0x6a>
    6ba2:	77 23       	and	r23, r23
    6ba4:	21 f0       	breq	.+8      	; 0x6bae <__floatsisf+0x54>
    6ba6:	9e e8       	ldi	r25, 0x8E	; 142
    6ba8:	87 2f       	mov	r24, r23
    6baa:	76 2f       	mov	r23, r22
    6bac:	05 c0       	rjmp	.+10     	; 0x6bb8 <__floatsisf+0x5e>
    6bae:	66 23       	and	r22, r22
    6bb0:	71 f0       	breq	.+28     	; 0x6bce <__floatsisf+0x74>
    6bb2:	96 e8       	ldi	r25, 0x86	; 134
    6bb4:	86 2f       	mov	r24, r22
    6bb6:	70 e0       	ldi	r23, 0x00	; 0
    6bb8:	60 e0       	ldi	r22, 0x00	; 0
    6bba:	2a f0       	brmi	.+10     	; 0x6bc6 <__floatsisf+0x6c>
    6bbc:	9a 95       	dec	r25
    6bbe:	66 0f       	add	r22, r22
    6bc0:	77 1f       	adc	r23, r23
    6bc2:	88 1f       	adc	r24, r24
    6bc4:	da f7       	brpl	.-10     	; 0x6bbc <__floatsisf+0x62>
    6bc6:	88 0f       	add	r24, r24
    6bc8:	96 95       	lsr	r25
    6bca:	87 95       	ror	r24
    6bcc:	97 f9       	bld	r25, 7
    6bce:	08 95       	ret

00006bd0 <__fp_cmp>:
    6bd0:	99 0f       	add	r25, r25
    6bd2:	00 08       	sbc	r0, r0
    6bd4:	55 0f       	add	r21, r21
    6bd6:	aa 0b       	sbc	r26, r26
    6bd8:	e0 e8       	ldi	r30, 0x80	; 128
    6bda:	fe ef       	ldi	r31, 0xFE	; 254
    6bdc:	16 16       	cp	r1, r22
    6bde:	17 06       	cpc	r1, r23
    6be0:	e8 07       	cpc	r30, r24
    6be2:	f9 07       	cpc	r31, r25
    6be4:	c0 f0       	brcs	.+48     	; 0x6c16 <__fp_cmp+0x46>
    6be6:	12 16       	cp	r1, r18
    6be8:	13 06       	cpc	r1, r19
    6bea:	e4 07       	cpc	r30, r20
    6bec:	f5 07       	cpc	r31, r21
    6bee:	98 f0       	brcs	.+38     	; 0x6c16 <__fp_cmp+0x46>
    6bf0:	62 1b       	sub	r22, r18
    6bf2:	73 0b       	sbc	r23, r19
    6bf4:	84 0b       	sbc	r24, r20
    6bf6:	95 0b       	sbc	r25, r21
    6bf8:	39 f4       	brne	.+14     	; 0x6c08 <__fp_cmp+0x38>
    6bfa:	0a 26       	eor	r0, r26
    6bfc:	61 f0       	breq	.+24     	; 0x6c16 <__fp_cmp+0x46>
    6bfe:	23 2b       	or	r18, r19
    6c00:	24 2b       	or	r18, r20
    6c02:	25 2b       	or	r18, r21
    6c04:	21 f4       	brne	.+8      	; 0x6c0e <__fp_cmp+0x3e>
    6c06:	08 95       	ret
    6c08:	0a 26       	eor	r0, r26
    6c0a:	09 f4       	brne	.+2      	; 0x6c0e <__fp_cmp+0x3e>
    6c0c:	a1 40       	sbci	r26, 0x01	; 1
    6c0e:	a6 95       	lsr	r26
    6c10:	8f ef       	ldi	r24, 0xFF	; 255
    6c12:	81 1d       	adc	r24, r1
    6c14:	81 1d       	adc	r24, r1
    6c16:	08 95       	ret

00006c18 <__fp_inf>:
    6c18:	97 f9       	bld	r25, 7
    6c1a:	9f 67       	ori	r25, 0x7F	; 127
    6c1c:	80 e8       	ldi	r24, 0x80	; 128
    6c1e:	70 e0       	ldi	r23, 0x00	; 0
    6c20:	60 e0       	ldi	r22, 0x00	; 0
    6c22:	08 95       	ret

00006c24 <__fp_nan>:
    6c24:	9f ef       	ldi	r25, 0xFF	; 255
    6c26:	80 ec       	ldi	r24, 0xC0	; 192
    6c28:	08 95       	ret

00006c2a <__fp_pscA>:
    6c2a:	00 24       	eor	r0, r0
    6c2c:	0a 94       	dec	r0
    6c2e:	16 16       	cp	r1, r22
    6c30:	17 06       	cpc	r1, r23
    6c32:	18 06       	cpc	r1, r24
    6c34:	09 06       	cpc	r0, r25
    6c36:	08 95       	ret

00006c38 <__fp_pscB>:
    6c38:	00 24       	eor	r0, r0
    6c3a:	0a 94       	dec	r0
    6c3c:	12 16       	cp	r1, r18
    6c3e:	13 06       	cpc	r1, r19
    6c40:	14 06       	cpc	r1, r20
    6c42:	05 06       	cpc	r0, r21
    6c44:	08 95       	ret

00006c46 <__fp_round>:
    6c46:	09 2e       	mov	r0, r25
    6c48:	03 94       	inc	r0
    6c4a:	00 0c       	add	r0, r0
    6c4c:	11 f4       	brne	.+4      	; 0x6c52 <__fp_round+0xc>
    6c4e:	88 23       	and	r24, r24
    6c50:	52 f0       	brmi	.+20     	; 0x6c66 <__fp_round+0x20>
    6c52:	bb 0f       	add	r27, r27
    6c54:	40 f4       	brcc	.+16     	; 0x6c66 <__fp_round+0x20>
    6c56:	bf 2b       	or	r27, r31
    6c58:	11 f4       	brne	.+4      	; 0x6c5e <__fp_round+0x18>
    6c5a:	60 ff       	sbrs	r22, 0
    6c5c:	04 c0       	rjmp	.+8      	; 0x6c66 <__fp_round+0x20>
    6c5e:	6f 5f       	subi	r22, 0xFF	; 255
    6c60:	7f 4f       	sbci	r23, 0xFF	; 255
    6c62:	8f 4f       	sbci	r24, 0xFF	; 255
    6c64:	9f 4f       	sbci	r25, 0xFF	; 255
    6c66:	08 95       	ret

00006c68 <__fp_split3>:
    6c68:	57 fd       	sbrc	r21, 7
    6c6a:	90 58       	subi	r25, 0x80	; 128
    6c6c:	44 0f       	add	r20, r20
    6c6e:	55 1f       	adc	r21, r21
    6c70:	59 f0       	breq	.+22     	; 0x6c88 <__fp_splitA+0x10>
    6c72:	5f 3f       	cpi	r21, 0xFF	; 255
    6c74:	71 f0       	breq	.+28     	; 0x6c92 <__fp_splitA+0x1a>
    6c76:	47 95       	ror	r20

00006c78 <__fp_splitA>:
    6c78:	88 0f       	add	r24, r24
    6c7a:	97 fb       	bst	r25, 7
    6c7c:	99 1f       	adc	r25, r25
    6c7e:	61 f0       	breq	.+24     	; 0x6c98 <__fp_splitA+0x20>
    6c80:	9f 3f       	cpi	r25, 0xFF	; 255
    6c82:	79 f0       	breq	.+30     	; 0x6ca2 <__fp_splitA+0x2a>
    6c84:	87 95       	ror	r24
    6c86:	08 95       	ret
    6c88:	12 16       	cp	r1, r18
    6c8a:	13 06       	cpc	r1, r19
    6c8c:	14 06       	cpc	r1, r20
    6c8e:	55 1f       	adc	r21, r21
    6c90:	f2 cf       	rjmp	.-28     	; 0x6c76 <__fp_split3+0xe>
    6c92:	46 95       	lsr	r20
    6c94:	f1 df       	rcall	.-30     	; 0x6c78 <__fp_splitA>
    6c96:	08 c0       	rjmp	.+16     	; 0x6ca8 <__fp_splitA+0x30>
    6c98:	16 16       	cp	r1, r22
    6c9a:	17 06       	cpc	r1, r23
    6c9c:	18 06       	cpc	r1, r24
    6c9e:	99 1f       	adc	r25, r25
    6ca0:	f1 cf       	rjmp	.-30     	; 0x6c84 <__fp_splitA+0xc>
    6ca2:	86 95       	lsr	r24
    6ca4:	71 05       	cpc	r23, r1
    6ca6:	61 05       	cpc	r22, r1
    6ca8:	08 94       	sec
    6caa:	08 95       	ret

00006cac <__fp_zero>:
    6cac:	e8 94       	clt

00006cae <__fp_szero>:
    6cae:	bb 27       	eor	r27, r27
    6cb0:	66 27       	eor	r22, r22
    6cb2:	77 27       	eor	r23, r23
    6cb4:	cb 01       	movw	r24, r22
    6cb6:	97 f9       	bld	r25, 7
    6cb8:	08 95       	ret

00006cba <__gesf2>:
    6cba:	8a df       	rcall	.-236    	; 0x6bd0 <__fp_cmp>
    6cbc:	08 f4       	brcc	.+2      	; 0x6cc0 <__gesf2+0x6>
    6cbe:	8f ef       	ldi	r24, 0xFF	; 255
    6cc0:	08 95       	ret

00006cc2 <__mulsf3>:
    6cc2:	0b d0       	rcall	.+22     	; 0x6cda <__mulsf3x>
    6cc4:	c0 cf       	rjmp	.-128    	; 0x6c46 <__fp_round>
    6cc6:	b1 df       	rcall	.-158    	; 0x6c2a <__fp_pscA>
    6cc8:	28 f0       	brcs	.+10     	; 0x6cd4 <__mulsf3+0x12>
    6cca:	b6 df       	rcall	.-148    	; 0x6c38 <__fp_pscB>
    6ccc:	18 f0       	brcs	.+6      	; 0x6cd4 <__mulsf3+0x12>
    6cce:	95 23       	and	r25, r21
    6cd0:	09 f0       	breq	.+2      	; 0x6cd4 <__mulsf3+0x12>
    6cd2:	a2 cf       	rjmp	.-188    	; 0x6c18 <__fp_inf>
    6cd4:	a7 cf       	rjmp	.-178    	; 0x6c24 <__fp_nan>
    6cd6:	11 24       	eor	r1, r1
    6cd8:	ea cf       	rjmp	.-44     	; 0x6cae <__fp_szero>

00006cda <__mulsf3x>:
    6cda:	c6 df       	rcall	.-116    	; 0x6c68 <__fp_split3>
    6cdc:	a0 f3       	brcs	.-24     	; 0x6cc6 <__mulsf3+0x4>

00006cde <__mulsf3_pse>:
    6cde:	95 9f       	mul	r25, r21
    6ce0:	d1 f3       	breq	.-12     	; 0x6cd6 <__mulsf3+0x14>
    6ce2:	95 0f       	add	r25, r21
    6ce4:	50 e0       	ldi	r21, 0x00	; 0
    6ce6:	55 1f       	adc	r21, r21
    6ce8:	62 9f       	mul	r22, r18
    6cea:	f0 01       	movw	r30, r0
    6cec:	72 9f       	mul	r23, r18
    6cee:	bb 27       	eor	r27, r27
    6cf0:	f0 0d       	add	r31, r0
    6cf2:	b1 1d       	adc	r27, r1
    6cf4:	63 9f       	mul	r22, r19
    6cf6:	aa 27       	eor	r26, r26
    6cf8:	f0 0d       	add	r31, r0
    6cfa:	b1 1d       	adc	r27, r1
    6cfc:	aa 1f       	adc	r26, r26
    6cfe:	64 9f       	mul	r22, r20
    6d00:	66 27       	eor	r22, r22
    6d02:	b0 0d       	add	r27, r0
    6d04:	a1 1d       	adc	r26, r1
    6d06:	66 1f       	adc	r22, r22
    6d08:	82 9f       	mul	r24, r18
    6d0a:	22 27       	eor	r18, r18
    6d0c:	b0 0d       	add	r27, r0
    6d0e:	a1 1d       	adc	r26, r1
    6d10:	62 1f       	adc	r22, r18
    6d12:	73 9f       	mul	r23, r19
    6d14:	b0 0d       	add	r27, r0
    6d16:	a1 1d       	adc	r26, r1
    6d18:	62 1f       	adc	r22, r18
    6d1a:	83 9f       	mul	r24, r19
    6d1c:	a0 0d       	add	r26, r0
    6d1e:	61 1d       	adc	r22, r1
    6d20:	22 1f       	adc	r18, r18
    6d22:	74 9f       	mul	r23, r20
    6d24:	33 27       	eor	r19, r19
    6d26:	a0 0d       	add	r26, r0
    6d28:	61 1d       	adc	r22, r1
    6d2a:	23 1f       	adc	r18, r19
    6d2c:	84 9f       	mul	r24, r20
    6d2e:	60 0d       	add	r22, r0
    6d30:	21 1d       	adc	r18, r1
    6d32:	82 2f       	mov	r24, r18
    6d34:	76 2f       	mov	r23, r22
    6d36:	6a 2f       	mov	r22, r26
    6d38:	11 24       	eor	r1, r1
    6d3a:	9f 57       	subi	r25, 0x7F	; 127
    6d3c:	50 40       	sbci	r21, 0x00	; 0
    6d3e:	8a f0       	brmi	.+34     	; 0x6d62 <__mulsf3_pse+0x84>
    6d40:	e1 f0       	breq	.+56     	; 0x6d7a <__mulsf3_pse+0x9c>
    6d42:	88 23       	and	r24, r24
    6d44:	4a f0       	brmi	.+18     	; 0x6d58 <__mulsf3_pse+0x7a>
    6d46:	ee 0f       	add	r30, r30
    6d48:	ff 1f       	adc	r31, r31
    6d4a:	bb 1f       	adc	r27, r27
    6d4c:	66 1f       	adc	r22, r22
    6d4e:	77 1f       	adc	r23, r23
    6d50:	88 1f       	adc	r24, r24
    6d52:	91 50       	subi	r25, 0x01	; 1
    6d54:	50 40       	sbci	r21, 0x00	; 0
    6d56:	a9 f7       	brne	.-22     	; 0x6d42 <__mulsf3_pse+0x64>
    6d58:	9e 3f       	cpi	r25, 0xFE	; 254
    6d5a:	51 05       	cpc	r21, r1
    6d5c:	70 f0       	brcs	.+28     	; 0x6d7a <__mulsf3_pse+0x9c>
    6d5e:	5c cf       	rjmp	.-328    	; 0x6c18 <__fp_inf>
    6d60:	a6 cf       	rjmp	.-180    	; 0x6cae <__fp_szero>
    6d62:	5f 3f       	cpi	r21, 0xFF	; 255
    6d64:	ec f3       	brlt	.-6      	; 0x6d60 <__mulsf3_pse+0x82>
    6d66:	98 3e       	cpi	r25, 0xE8	; 232
    6d68:	dc f3       	brlt	.-10     	; 0x6d60 <__mulsf3_pse+0x82>
    6d6a:	86 95       	lsr	r24
    6d6c:	77 95       	ror	r23
    6d6e:	67 95       	ror	r22
    6d70:	b7 95       	ror	r27
    6d72:	f7 95       	ror	r31
    6d74:	e7 95       	ror	r30
    6d76:	9f 5f       	subi	r25, 0xFF	; 255
    6d78:	c1 f7       	brne	.-16     	; 0x6d6a <__mulsf3_pse+0x8c>
    6d7a:	fe 2b       	or	r31, r30
    6d7c:	88 0f       	add	r24, r24
    6d7e:	91 1d       	adc	r25, r1
    6d80:	96 95       	lsr	r25
    6d82:	87 95       	ror	r24
    6d84:	97 f9       	bld	r25, 7
    6d86:	08 95       	ret

00006d88 <calloc>:
    6d88:	0f 93       	push	r16
    6d8a:	1f 93       	push	r17
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	86 9f       	mul	r24, r22
    6d92:	80 01       	movw	r16, r0
    6d94:	87 9f       	mul	r24, r23
    6d96:	10 0d       	add	r17, r0
    6d98:	96 9f       	mul	r25, r22
    6d9a:	10 0d       	add	r17, r0
    6d9c:	11 24       	eor	r1, r1
    6d9e:	c8 01       	movw	r24, r16
    6da0:	0d d0       	rcall	.+26     	; 0x6dbc <malloc>
    6da2:	ec 01       	movw	r28, r24
    6da4:	00 97       	sbiw	r24, 0x00	; 0
    6da6:	21 f0       	breq	.+8      	; 0x6db0 <calloc+0x28>
    6da8:	a8 01       	movw	r20, r16
    6daa:	60 e0       	ldi	r22, 0x00	; 0
    6dac:	70 e0       	ldi	r23, 0x00	; 0
    6dae:	34 d1       	rcall	.+616    	; 0x7018 <memset>
    6db0:	ce 01       	movw	r24, r28
    6db2:	df 91       	pop	r29
    6db4:	cf 91       	pop	r28
    6db6:	1f 91       	pop	r17
    6db8:	0f 91       	pop	r16
    6dba:	08 95       	ret

00006dbc <malloc>:
    6dbc:	0f 93       	push	r16
    6dbe:	1f 93       	push	r17
    6dc0:	cf 93       	push	r28
    6dc2:	df 93       	push	r29
    6dc4:	82 30       	cpi	r24, 0x02	; 2
    6dc6:	91 05       	cpc	r25, r1
    6dc8:	10 f4       	brcc	.+4      	; 0x6dce <malloc+0x12>
    6dca:	82 e0       	ldi	r24, 0x02	; 2
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	e0 91 ca 0a 	lds	r30, 0x0ACA	; 0x800aca <__flp>
    6dd2:	f0 91 cb 0a 	lds	r31, 0x0ACB	; 0x800acb <__flp+0x1>
    6dd6:	20 e0       	ldi	r18, 0x00	; 0
    6dd8:	30 e0       	ldi	r19, 0x00	; 0
    6dda:	a0 e0       	ldi	r26, 0x00	; 0
    6ddc:	b0 e0       	ldi	r27, 0x00	; 0
    6dde:	30 97       	sbiw	r30, 0x00	; 0
    6de0:	19 f1       	breq	.+70     	; 0x6e28 <malloc+0x6c>
    6de2:	40 81       	ld	r20, Z
    6de4:	51 81       	ldd	r21, Z+1	; 0x01
    6de6:	02 81       	ldd	r16, Z+2	; 0x02
    6de8:	13 81       	ldd	r17, Z+3	; 0x03
    6dea:	48 17       	cp	r20, r24
    6dec:	59 07       	cpc	r21, r25
    6dee:	c8 f0       	brcs	.+50     	; 0x6e22 <malloc+0x66>
    6df0:	84 17       	cp	r24, r20
    6df2:	95 07       	cpc	r25, r21
    6df4:	69 f4       	brne	.+26     	; 0x6e10 <malloc+0x54>
    6df6:	10 97       	sbiw	r26, 0x00	; 0
    6df8:	31 f0       	breq	.+12     	; 0x6e06 <malloc+0x4a>
    6dfa:	12 96       	adiw	r26, 0x02	; 2
    6dfc:	0c 93       	st	X, r16
    6dfe:	12 97       	sbiw	r26, 0x02	; 2
    6e00:	13 96       	adiw	r26, 0x03	; 3
    6e02:	1c 93       	st	X, r17
    6e04:	27 c0       	rjmp	.+78     	; 0x6e54 <malloc+0x98>
    6e06:	00 93 ca 0a 	sts	0x0ACA, r16	; 0x800aca <__flp>
    6e0a:	10 93 cb 0a 	sts	0x0ACB, r17	; 0x800acb <__flp+0x1>
    6e0e:	22 c0       	rjmp	.+68     	; 0x6e54 <malloc+0x98>
    6e10:	21 15       	cp	r18, r1
    6e12:	31 05       	cpc	r19, r1
    6e14:	19 f0       	breq	.+6      	; 0x6e1c <malloc+0x60>
    6e16:	42 17       	cp	r20, r18
    6e18:	53 07       	cpc	r21, r19
    6e1a:	18 f4       	brcc	.+6      	; 0x6e22 <malloc+0x66>
    6e1c:	9a 01       	movw	r18, r20
    6e1e:	bd 01       	movw	r22, r26
    6e20:	ef 01       	movw	r28, r30
    6e22:	df 01       	movw	r26, r30
    6e24:	f8 01       	movw	r30, r16
    6e26:	db cf       	rjmp	.-74     	; 0x6dde <malloc+0x22>
    6e28:	21 15       	cp	r18, r1
    6e2a:	31 05       	cpc	r19, r1
    6e2c:	f9 f0       	breq	.+62     	; 0x6e6c <malloc+0xb0>
    6e2e:	28 1b       	sub	r18, r24
    6e30:	39 0b       	sbc	r19, r25
    6e32:	24 30       	cpi	r18, 0x04	; 4
    6e34:	31 05       	cpc	r19, r1
    6e36:	80 f4       	brcc	.+32     	; 0x6e58 <malloc+0x9c>
    6e38:	8a 81       	ldd	r24, Y+2	; 0x02
    6e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    6e3c:	61 15       	cp	r22, r1
    6e3e:	71 05       	cpc	r23, r1
    6e40:	21 f0       	breq	.+8      	; 0x6e4a <malloc+0x8e>
    6e42:	fb 01       	movw	r30, r22
    6e44:	93 83       	std	Z+3, r25	; 0x03
    6e46:	82 83       	std	Z+2, r24	; 0x02
    6e48:	04 c0       	rjmp	.+8      	; 0x6e52 <malloc+0x96>
    6e4a:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <__flp+0x1>
    6e4e:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <__flp>
    6e52:	fe 01       	movw	r30, r28
    6e54:	32 96       	adiw	r30, 0x02	; 2
    6e56:	44 c0       	rjmp	.+136    	; 0x6ee0 <malloc+0x124>
    6e58:	fe 01       	movw	r30, r28
    6e5a:	e2 0f       	add	r30, r18
    6e5c:	f3 1f       	adc	r31, r19
    6e5e:	81 93       	st	Z+, r24
    6e60:	91 93       	st	Z+, r25
    6e62:	22 50       	subi	r18, 0x02	; 2
    6e64:	31 09       	sbc	r19, r1
    6e66:	39 83       	std	Y+1, r19	; 0x01
    6e68:	28 83       	st	Y, r18
    6e6a:	3a c0       	rjmp	.+116    	; 0x6ee0 <malloc+0x124>
    6e6c:	20 91 c8 0a 	lds	r18, 0x0AC8	; 0x800ac8 <__brkval>
    6e70:	30 91 c9 0a 	lds	r19, 0x0AC9	; 0x800ac9 <__brkval+0x1>
    6e74:	23 2b       	or	r18, r19
    6e76:	41 f4       	brne	.+16     	; 0x6e88 <malloc+0xcc>
    6e78:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6e7c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6e80:	30 93 c9 0a 	sts	0x0AC9, r19	; 0x800ac9 <__brkval+0x1>
    6e84:	20 93 c8 0a 	sts	0x0AC8, r18	; 0x800ac8 <__brkval>
    6e88:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6e8c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    6e90:	21 15       	cp	r18, r1
    6e92:	31 05       	cpc	r19, r1
    6e94:	41 f4       	brne	.+16     	; 0x6ea6 <malloc+0xea>
    6e96:	2d b7       	in	r18, 0x3d	; 61
    6e98:	3e b7       	in	r19, 0x3e	; 62
    6e9a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6e9e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6ea2:	24 1b       	sub	r18, r20
    6ea4:	35 0b       	sbc	r19, r21
    6ea6:	e0 91 c8 0a 	lds	r30, 0x0AC8	; 0x800ac8 <__brkval>
    6eaa:	f0 91 c9 0a 	lds	r31, 0x0AC9	; 0x800ac9 <__brkval+0x1>
    6eae:	e2 17       	cp	r30, r18
    6eb0:	f3 07       	cpc	r31, r19
    6eb2:	a0 f4       	brcc	.+40     	; 0x6edc <malloc+0x120>
    6eb4:	2e 1b       	sub	r18, r30
    6eb6:	3f 0b       	sbc	r19, r31
    6eb8:	28 17       	cp	r18, r24
    6eba:	39 07       	cpc	r19, r25
    6ebc:	78 f0       	brcs	.+30     	; 0x6edc <malloc+0x120>
    6ebe:	ac 01       	movw	r20, r24
    6ec0:	4e 5f       	subi	r20, 0xFE	; 254
    6ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ec4:	24 17       	cp	r18, r20
    6ec6:	35 07       	cpc	r19, r21
    6ec8:	48 f0       	brcs	.+18     	; 0x6edc <malloc+0x120>
    6eca:	4e 0f       	add	r20, r30
    6ecc:	5f 1f       	adc	r21, r31
    6ece:	50 93 c9 0a 	sts	0x0AC9, r21	; 0x800ac9 <__brkval+0x1>
    6ed2:	40 93 c8 0a 	sts	0x0AC8, r20	; 0x800ac8 <__brkval>
    6ed6:	81 93       	st	Z+, r24
    6ed8:	91 93       	st	Z+, r25
    6eda:	02 c0       	rjmp	.+4      	; 0x6ee0 <malloc+0x124>
    6edc:	e0 e0       	ldi	r30, 0x00	; 0
    6ede:	f0 e0       	ldi	r31, 0x00	; 0
    6ee0:	cf 01       	movw	r24, r30
    6ee2:	df 91       	pop	r29
    6ee4:	cf 91       	pop	r28
    6ee6:	1f 91       	pop	r17
    6ee8:	0f 91       	pop	r16
    6eea:	08 95       	ret

00006eec <free>:
    6eec:	cf 93       	push	r28
    6eee:	df 93       	push	r29
    6ef0:	00 97       	sbiw	r24, 0x00	; 0
    6ef2:	09 f4       	brne	.+2      	; 0x6ef6 <free+0xa>
    6ef4:	81 c0       	rjmp	.+258    	; 0x6ff8 <free+0x10c>
    6ef6:	fc 01       	movw	r30, r24
    6ef8:	32 97       	sbiw	r30, 0x02	; 2
    6efa:	13 82       	std	Z+3, r1	; 0x03
    6efc:	12 82       	std	Z+2, r1	; 0x02
    6efe:	a0 91 ca 0a 	lds	r26, 0x0ACA	; 0x800aca <__flp>
    6f02:	b0 91 cb 0a 	lds	r27, 0x0ACB	; 0x800acb <__flp+0x1>
    6f06:	10 97       	sbiw	r26, 0x00	; 0
    6f08:	81 f4       	brne	.+32     	; 0x6f2a <free+0x3e>
    6f0a:	20 81       	ld	r18, Z
    6f0c:	31 81       	ldd	r19, Z+1	; 0x01
    6f0e:	82 0f       	add	r24, r18
    6f10:	93 1f       	adc	r25, r19
    6f12:	20 91 c8 0a 	lds	r18, 0x0AC8	; 0x800ac8 <__brkval>
    6f16:	30 91 c9 0a 	lds	r19, 0x0AC9	; 0x800ac9 <__brkval+0x1>
    6f1a:	28 17       	cp	r18, r24
    6f1c:	39 07       	cpc	r19, r25
    6f1e:	51 f5       	brne	.+84     	; 0x6f74 <free+0x88>
    6f20:	f0 93 c9 0a 	sts	0x0AC9, r31	; 0x800ac9 <__brkval+0x1>
    6f24:	e0 93 c8 0a 	sts	0x0AC8, r30	; 0x800ac8 <__brkval>
    6f28:	67 c0       	rjmp	.+206    	; 0x6ff8 <free+0x10c>
    6f2a:	ed 01       	movw	r28, r26
    6f2c:	20 e0       	ldi	r18, 0x00	; 0
    6f2e:	30 e0       	ldi	r19, 0x00	; 0
    6f30:	ce 17       	cp	r28, r30
    6f32:	df 07       	cpc	r29, r31
    6f34:	40 f4       	brcc	.+16     	; 0x6f46 <free+0x5a>
    6f36:	4a 81       	ldd	r20, Y+2	; 0x02
    6f38:	5b 81       	ldd	r21, Y+3	; 0x03
    6f3a:	9e 01       	movw	r18, r28
    6f3c:	41 15       	cp	r20, r1
    6f3e:	51 05       	cpc	r21, r1
    6f40:	f1 f0       	breq	.+60     	; 0x6f7e <free+0x92>
    6f42:	ea 01       	movw	r28, r20
    6f44:	f5 cf       	rjmp	.-22     	; 0x6f30 <free+0x44>
    6f46:	d3 83       	std	Z+3, r29	; 0x03
    6f48:	c2 83       	std	Z+2, r28	; 0x02
    6f4a:	40 81       	ld	r20, Z
    6f4c:	51 81       	ldd	r21, Z+1	; 0x01
    6f4e:	84 0f       	add	r24, r20
    6f50:	95 1f       	adc	r25, r21
    6f52:	c8 17       	cp	r28, r24
    6f54:	d9 07       	cpc	r29, r25
    6f56:	59 f4       	brne	.+22     	; 0x6f6e <free+0x82>
    6f58:	88 81       	ld	r24, Y
    6f5a:	99 81       	ldd	r25, Y+1	; 0x01
    6f5c:	84 0f       	add	r24, r20
    6f5e:	95 1f       	adc	r25, r21
    6f60:	02 96       	adiw	r24, 0x02	; 2
    6f62:	91 83       	std	Z+1, r25	; 0x01
    6f64:	80 83       	st	Z, r24
    6f66:	8a 81       	ldd	r24, Y+2	; 0x02
    6f68:	9b 81       	ldd	r25, Y+3	; 0x03
    6f6a:	93 83       	std	Z+3, r25	; 0x03
    6f6c:	82 83       	std	Z+2, r24	; 0x02
    6f6e:	21 15       	cp	r18, r1
    6f70:	31 05       	cpc	r19, r1
    6f72:	29 f4       	brne	.+10     	; 0x6f7e <free+0x92>
    6f74:	f0 93 cb 0a 	sts	0x0ACB, r31	; 0x800acb <__flp+0x1>
    6f78:	e0 93 ca 0a 	sts	0x0ACA, r30	; 0x800aca <__flp>
    6f7c:	3d c0       	rjmp	.+122    	; 0x6ff8 <free+0x10c>
    6f7e:	e9 01       	movw	r28, r18
    6f80:	fb 83       	std	Y+3, r31	; 0x03
    6f82:	ea 83       	std	Y+2, r30	; 0x02
    6f84:	49 91       	ld	r20, Y+
    6f86:	59 91       	ld	r21, Y+
    6f88:	c4 0f       	add	r28, r20
    6f8a:	d5 1f       	adc	r29, r21
    6f8c:	ec 17       	cp	r30, r28
    6f8e:	fd 07       	cpc	r31, r29
    6f90:	61 f4       	brne	.+24     	; 0x6faa <free+0xbe>
    6f92:	80 81       	ld	r24, Z
    6f94:	91 81       	ldd	r25, Z+1	; 0x01
    6f96:	84 0f       	add	r24, r20
    6f98:	95 1f       	adc	r25, r21
    6f9a:	02 96       	adiw	r24, 0x02	; 2
    6f9c:	e9 01       	movw	r28, r18
    6f9e:	99 83       	std	Y+1, r25	; 0x01
    6fa0:	88 83       	st	Y, r24
    6fa2:	82 81       	ldd	r24, Z+2	; 0x02
    6fa4:	93 81       	ldd	r25, Z+3	; 0x03
    6fa6:	9b 83       	std	Y+3, r25	; 0x03
    6fa8:	8a 83       	std	Y+2, r24	; 0x02
    6faa:	e0 e0       	ldi	r30, 0x00	; 0
    6fac:	f0 e0       	ldi	r31, 0x00	; 0
    6fae:	12 96       	adiw	r26, 0x02	; 2
    6fb0:	8d 91       	ld	r24, X+
    6fb2:	9c 91       	ld	r25, X
    6fb4:	13 97       	sbiw	r26, 0x03	; 3
    6fb6:	00 97       	sbiw	r24, 0x00	; 0
    6fb8:	19 f0       	breq	.+6      	; 0x6fc0 <free+0xd4>
    6fba:	fd 01       	movw	r30, r26
    6fbc:	dc 01       	movw	r26, r24
    6fbe:	f7 cf       	rjmp	.-18     	; 0x6fae <free+0xc2>
    6fc0:	8d 91       	ld	r24, X+
    6fc2:	9c 91       	ld	r25, X
    6fc4:	11 97       	sbiw	r26, 0x01	; 1
    6fc6:	9d 01       	movw	r18, r26
    6fc8:	2e 5f       	subi	r18, 0xFE	; 254
    6fca:	3f 4f       	sbci	r19, 0xFF	; 255
    6fcc:	82 0f       	add	r24, r18
    6fce:	93 1f       	adc	r25, r19
    6fd0:	20 91 c8 0a 	lds	r18, 0x0AC8	; 0x800ac8 <__brkval>
    6fd4:	30 91 c9 0a 	lds	r19, 0x0AC9	; 0x800ac9 <__brkval+0x1>
    6fd8:	28 17       	cp	r18, r24
    6fda:	39 07       	cpc	r19, r25
    6fdc:	69 f4       	brne	.+26     	; 0x6ff8 <free+0x10c>
    6fde:	30 97       	sbiw	r30, 0x00	; 0
    6fe0:	29 f4       	brne	.+10     	; 0x6fec <free+0x100>
    6fe2:	10 92 cb 0a 	sts	0x0ACB, r1	; 0x800acb <__flp+0x1>
    6fe6:	10 92 ca 0a 	sts	0x0ACA, r1	; 0x800aca <__flp>
    6fea:	02 c0       	rjmp	.+4      	; 0x6ff0 <free+0x104>
    6fec:	13 82       	std	Z+3, r1	; 0x03
    6fee:	12 82       	std	Z+2, r1	; 0x02
    6ff0:	b0 93 c9 0a 	sts	0x0AC9, r27	; 0x800ac9 <__brkval+0x1>
    6ff4:	a0 93 c8 0a 	sts	0x0AC8, r26	; 0x800ac8 <__brkval>
    6ff8:	df 91       	pop	r29
    6ffa:	cf 91       	pop	r28
    6ffc:	08 95       	ret

00006ffe <abort>:
    6ffe:	81 e0       	ldi	r24, 0x01	; 1
    7000:	90 e0       	ldi	r25, 0x00	; 0
    7002:	f8 94       	cli
    7004:	58 c3       	rjmp	.+1712   	; 0x76b6 <_exit>

00007006 <memcpy>:
    7006:	fb 01       	movw	r30, r22
    7008:	dc 01       	movw	r26, r24
    700a:	02 c0       	rjmp	.+4      	; 0x7010 <memcpy+0xa>
    700c:	01 90       	ld	r0, Z+
    700e:	0d 92       	st	X+, r0
    7010:	41 50       	subi	r20, 0x01	; 1
    7012:	50 40       	sbci	r21, 0x00	; 0
    7014:	d8 f7       	brcc	.-10     	; 0x700c <memcpy+0x6>
    7016:	08 95       	ret

00007018 <memset>:
    7018:	dc 01       	movw	r26, r24
    701a:	01 c0       	rjmp	.+2      	; 0x701e <memset+0x6>
    701c:	6d 93       	st	X+, r22
    701e:	41 50       	subi	r20, 0x01	; 1
    7020:	50 40       	sbci	r21, 0x00	; 0
    7022:	e0 f7       	brcc	.-8      	; 0x701c <memset+0x4>
    7024:	08 95       	ret

00007026 <strcat>:
    7026:	fb 01       	movw	r30, r22
    7028:	dc 01       	movw	r26, r24
    702a:	0d 90       	ld	r0, X+
    702c:	00 20       	and	r0, r0
    702e:	e9 f7       	brne	.-6      	; 0x702a <strcat+0x4>
    7030:	11 97       	sbiw	r26, 0x01	; 1
    7032:	01 90       	ld	r0, Z+
    7034:	0d 92       	st	X+, r0
    7036:	00 20       	and	r0, r0
    7038:	e1 f7       	brne	.-8      	; 0x7032 <strcat+0xc>
    703a:	08 95       	ret

0000703c <strcpy>:
    703c:	fb 01       	movw	r30, r22
    703e:	dc 01       	movw	r26, r24
    7040:	01 90       	ld	r0, Z+
    7042:	0d 92       	st	X+, r0
    7044:	00 20       	and	r0, r0
    7046:	e1 f7       	brne	.-8      	; 0x7040 <strcpy+0x4>
    7048:	08 95       	ret

0000704a <strncasecmp>:
    704a:	fb 01       	movw	r30, r22
    704c:	dc 01       	movw	r26, r24
    704e:	41 50       	subi	r20, 0x01	; 1
    7050:	50 40       	sbci	r21, 0x00	; 0
    7052:	88 f0       	brcs	.+34     	; 0x7076 <strncasecmp+0x2c>
    7054:	8d 91       	ld	r24, X+
    7056:	81 34       	cpi	r24, 0x41	; 65
    7058:	1c f0       	brlt	.+6      	; 0x7060 <strncasecmp+0x16>
    705a:	8b 35       	cpi	r24, 0x5B	; 91
    705c:	0c f4       	brge	.+2      	; 0x7060 <strncasecmp+0x16>
    705e:	80 5e       	subi	r24, 0xE0	; 224
    7060:	61 91       	ld	r22, Z+
    7062:	61 34       	cpi	r22, 0x41	; 65
    7064:	1c f0       	brlt	.+6      	; 0x706c <strncasecmp+0x22>
    7066:	6b 35       	cpi	r22, 0x5B	; 91
    7068:	0c f4       	brge	.+2      	; 0x706c <strncasecmp+0x22>
    706a:	60 5e       	subi	r22, 0xE0	; 224
    706c:	86 1b       	sub	r24, r22
    706e:	61 11       	cpse	r22, r1
    7070:	71 f3       	breq	.-36     	; 0x704e <strncasecmp+0x4>
    7072:	99 0b       	sbc	r25, r25
    7074:	08 95       	ret
    7076:	88 1b       	sub	r24, r24
    7078:	fc cf       	rjmp	.-8      	; 0x7072 <strncasecmp+0x28>

0000707a <printf>:
    707a:	cf 93       	push	r28
    707c:	df 93       	push	r29
    707e:	cd b7       	in	r28, 0x3d	; 61
    7080:	de b7       	in	r29, 0x3e	; 62
    7082:	ae 01       	movw	r20, r28
    7084:	4a 5f       	subi	r20, 0xFA	; 250
    7086:	5f 4f       	sbci	r21, 0xFF	; 255
    7088:	fa 01       	movw	r30, r20
    708a:	61 91       	ld	r22, Z+
    708c:	71 91       	ld	r23, Z+
    708e:	af 01       	movw	r20, r30
    7090:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <__iob+0x2>
    7094:	90 91 cf 0a 	lds	r25, 0x0ACF	; 0x800acf <__iob+0x3>
    7098:	61 d0       	rcall	.+194    	; 0x715c <vfprintf>
    709a:	df 91       	pop	r29
    709c:	cf 91       	pop	r28
    709e:	08 95       	ret

000070a0 <puts>:
    70a0:	0f 93       	push	r16
    70a2:	1f 93       	push	r17
    70a4:	cf 93       	push	r28
    70a6:	df 93       	push	r29
    70a8:	e0 91 ce 0a 	lds	r30, 0x0ACE	; 0x800ace <__iob+0x2>
    70ac:	f0 91 cf 0a 	lds	r31, 0x0ACF	; 0x800acf <__iob+0x3>
    70b0:	23 81       	ldd	r18, Z+3	; 0x03
    70b2:	21 ff       	sbrs	r18, 1
    70b4:	1b c0       	rjmp	.+54     	; 0x70ec <puts+0x4c>
    70b6:	8c 01       	movw	r16, r24
    70b8:	d0 e0       	ldi	r29, 0x00	; 0
    70ba:	c0 e0       	ldi	r28, 0x00	; 0
    70bc:	f8 01       	movw	r30, r16
    70be:	81 91       	ld	r24, Z+
    70c0:	8f 01       	movw	r16, r30
    70c2:	60 91 ce 0a 	lds	r22, 0x0ACE	; 0x800ace <__iob+0x2>
    70c6:	70 91 cf 0a 	lds	r23, 0x0ACF	; 0x800acf <__iob+0x3>
    70ca:	db 01       	movw	r26, r22
    70cc:	18 96       	adiw	r26, 0x08	; 8
    70ce:	ed 91       	ld	r30, X+
    70d0:	fc 91       	ld	r31, X
    70d2:	19 97       	sbiw	r26, 0x09	; 9
    70d4:	88 23       	and	r24, r24
    70d6:	31 f0       	breq	.+12     	; 0x70e4 <puts+0x44>
    70d8:	19 95       	eicall
    70da:	89 2b       	or	r24, r25
    70dc:	79 f3       	breq	.-34     	; 0x70bc <puts+0x1c>
    70de:	df ef       	ldi	r29, 0xFF	; 255
    70e0:	cf ef       	ldi	r28, 0xFF	; 255
    70e2:	ec cf       	rjmp	.-40     	; 0x70bc <puts+0x1c>
    70e4:	8a e0       	ldi	r24, 0x0A	; 10
    70e6:	19 95       	eicall
    70e8:	89 2b       	or	r24, r25
    70ea:	19 f0       	breq	.+6      	; 0x70f2 <puts+0x52>
    70ec:	8f ef       	ldi	r24, 0xFF	; 255
    70ee:	9f ef       	ldi	r25, 0xFF	; 255
    70f0:	02 c0       	rjmp	.+4      	; 0x70f6 <puts+0x56>
    70f2:	8d 2f       	mov	r24, r29
    70f4:	9c 2f       	mov	r25, r28
    70f6:	df 91       	pop	r29
    70f8:	cf 91       	pop	r28
    70fa:	1f 91       	pop	r17
    70fc:	0f 91       	pop	r16
    70fe:	08 95       	ret

00007100 <sprintf>:
    7100:	0f 93       	push	r16
    7102:	1f 93       	push	r17
    7104:	cf 93       	push	r28
    7106:	df 93       	push	r29
    7108:	cd b7       	in	r28, 0x3d	; 61
    710a:	de b7       	in	r29, 0x3e	; 62
    710c:	2e 97       	sbiw	r28, 0x0e	; 14
    710e:	0f b6       	in	r0, 0x3f	; 63
    7110:	f8 94       	cli
    7112:	de bf       	out	0x3e, r29	; 62
    7114:	0f be       	out	0x3f, r0	; 63
    7116:	cd bf       	out	0x3d, r28	; 61
    7118:	0e 89       	ldd	r16, Y+22	; 0x16
    711a:	1f 89       	ldd	r17, Y+23	; 0x17
    711c:	86 e0       	ldi	r24, 0x06	; 6
    711e:	8c 83       	std	Y+4, r24	; 0x04
    7120:	1a 83       	std	Y+2, r17	; 0x02
    7122:	09 83       	std	Y+1, r16	; 0x01
    7124:	8f ef       	ldi	r24, 0xFF	; 255
    7126:	9f e7       	ldi	r25, 0x7F	; 127
    7128:	9e 83       	std	Y+6, r25	; 0x06
    712a:	8d 83       	std	Y+5, r24	; 0x05
    712c:	ae 01       	movw	r20, r28
    712e:	46 5e       	subi	r20, 0xE6	; 230
    7130:	5f 4f       	sbci	r21, 0xFF	; 255
    7132:	68 8d       	ldd	r22, Y+24	; 0x18
    7134:	79 8d       	ldd	r23, Y+25	; 0x19
    7136:	ce 01       	movw	r24, r28
    7138:	01 96       	adiw	r24, 0x01	; 1
    713a:	10 d0       	rcall	.+32     	; 0x715c <vfprintf>
    713c:	ef 81       	ldd	r30, Y+7	; 0x07
    713e:	f8 85       	ldd	r31, Y+8	; 0x08
    7140:	e0 0f       	add	r30, r16
    7142:	f1 1f       	adc	r31, r17
    7144:	10 82       	st	Z, r1
    7146:	2e 96       	adiw	r28, 0x0e	; 14
    7148:	0f b6       	in	r0, 0x3f	; 63
    714a:	f8 94       	cli
    714c:	de bf       	out	0x3e, r29	; 62
    714e:	0f be       	out	0x3f, r0	; 63
    7150:	cd bf       	out	0x3d, r28	; 61
    7152:	df 91       	pop	r29
    7154:	cf 91       	pop	r28
    7156:	1f 91       	pop	r17
    7158:	0f 91       	pop	r16
    715a:	08 95       	ret

0000715c <vfprintf>:
    715c:	2f 92       	push	r2
    715e:	3f 92       	push	r3
    7160:	4f 92       	push	r4
    7162:	5f 92       	push	r5
    7164:	6f 92       	push	r6
    7166:	7f 92       	push	r7
    7168:	8f 92       	push	r8
    716a:	9f 92       	push	r9
    716c:	af 92       	push	r10
    716e:	bf 92       	push	r11
    7170:	cf 92       	push	r12
    7172:	df 92       	push	r13
    7174:	ef 92       	push	r14
    7176:	ff 92       	push	r15
    7178:	0f 93       	push	r16
    717a:	1f 93       	push	r17
    717c:	cf 93       	push	r28
    717e:	df 93       	push	r29
    7180:	cd b7       	in	r28, 0x3d	; 61
    7182:	de b7       	in	r29, 0x3e	; 62
    7184:	2b 97       	sbiw	r28, 0x0b	; 11
    7186:	0f b6       	in	r0, 0x3f	; 63
    7188:	f8 94       	cli
    718a:	de bf       	out	0x3e, r29	; 62
    718c:	0f be       	out	0x3f, r0	; 63
    718e:	cd bf       	out	0x3d, r28	; 61
    7190:	6c 01       	movw	r12, r24
    7192:	7b 01       	movw	r14, r22
    7194:	8a 01       	movw	r16, r20
    7196:	fc 01       	movw	r30, r24
    7198:	17 82       	std	Z+7, r1	; 0x07
    719a:	16 82       	std	Z+6, r1	; 0x06
    719c:	83 81       	ldd	r24, Z+3	; 0x03
    719e:	81 ff       	sbrs	r24, 1
    71a0:	bf c1       	rjmp	.+894    	; 0x7520 <vfprintf+0x3c4>
    71a2:	ce 01       	movw	r24, r28
    71a4:	01 96       	adiw	r24, 0x01	; 1
    71a6:	3c 01       	movw	r6, r24
    71a8:	f6 01       	movw	r30, r12
    71aa:	93 81       	ldd	r25, Z+3	; 0x03
    71ac:	f7 01       	movw	r30, r14
    71ae:	93 fd       	sbrc	r25, 3
    71b0:	85 91       	lpm	r24, Z+
    71b2:	93 ff       	sbrs	r25, 3
    71b4:	81 91       	ld	r24, Z+
    71b6:	7f 01       	movw	r14, r30
    71b8:	88 23       	and	r24, r24
    71ba:	09 f4       	brne	.+2      	; 0x71be <vfprintf+0x62>
    71bc:	ad c1       	rjmp	.+858    	; 0x7518 <vfprintf+0x3bc>
    71be:	85 32       	cpi	r24, 0x25	; 37
    71c0:	39 f4       	brne	.+14     	; 0x71d0 <vfprintf+0x74>
    71c2:	93 fd       	sbrc	r25, 3
    71c4:	85 91       	lpm	r24, Z+
    71c6:	93 ff       	sbrs	r25, 3
    71c8:	81 91       	ld	r24, Z+
    71ca:	7f 01       	movw	r14, r30
    71cc:	85 32       	cpi	r24, 0x25	; 37
    71ce:	21 f4       	brne	.+8      	; 0x71d8 <vfprintf+0x7c>
    71d0:	b6 01       	movw	r22, r12
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	d6 d1       	rcall	.+940    	; 0x7582 <fputc>
    71d6:	e8 cf       	rjmp	.-48     	; 0x71a8 <vfprintf+0x4c>
    71d8:	91 2c       	mov	r9, r1
    71da:	21 2c       	mov	r2, r1
    71dc:	31 2c       	mov	r3, r1
    71de:	ff e1       	ldi	r31, 0x1F	; 31
    71e0:	f3 15       	cp	r31, r3
    71e2:	d8 f0       	brcs	.+54     	; 0x721a <vfprintf+0xbe>
    71e4:	8b 32       	cpi	r24, 0x2B	; 43
    71e6:	79 f0       	breq	.+30     	; 0x7206 <vfprintf+0xaa>
    71e8:	38 f4       	brcc	.+14     	; 0x71f8 <vfprintf+0x9c>
    71ea:	80 32       	cpi	r24, 0x20	; 32
    71ec:	79 f0       	breq	.+30     	; 0x720c <vfprintf+0xb0>
    71ee:	83 32       	cpi	r24, 0x23	; 35
    71f0:	a1 f4       	brne	.+40     	; 0x721a <vfprintf+0xbe>
    71f2:	23 2d       	mov	r18, r3
    71f4:	20 61       	ori	r18, 0x10	; 16
    71f6:	1d c0       	rjmp	.+58     	; 0x7232 <vfprintf+0xd6>
    71f8:	8d 32       	cpi	r24, 0x2D	; 45
    71fa:	61 f0       	breq	.+24     	; 0x7214 <vfprintf+0xb8>
    71fc:	80 33       	cpi	r24, 0x30	; 48
    71fe:	69 f4       	brne	.+26     	; 0x721a <vfprintf+0xbe>
    7200:	23 2d       	mov	r18, r3
    7202:	21 60       	ori	r18, 0x01	; 1
    7204:	16 c0       	rjmp	.+44     	; 0x7232 <vfprintf+0xd6>
    7206:	83 2d       	mov	r24, r3
    7208:	82 60       	ori	r24, 0x02	; 2
    720a:	38 2e       	mov	r3, r24
    720c:	e3 2d       	mov	r30, r3
    720e:	e4 60       	ori	r30, 0x04	; 4
    7210:	3e 2e       	mov	r3, r30
    7212:	2a c0       	rjmp	.+84     	; 0x7268 <vfprintf+0x10c>
    7214:	f3 2d       	mov	r31, r3
    7216:	f8 60       	ori	r31, 0x08	; 8
    7218:	1d c0       	rjmp	.+58     	; 0x7254 <vfprintf+0xf8>
    721a:	37 fc       	sbrc	r3, 7
    721c:	2d c0       	rjmp	.+90     	; 0x7278 <vfprintf+0x11c>
    721e:	20 ed       	ldi	r18, 0xD0	; 208
    7220:	28 0f       	add	r18, r24
    7222:	2a 30       	cpi	r18, 0x0A	; 10
    7224:	40 f0       	brcs	.+16     	; 0x7236 <vfprintf+0xda>
    7226:	8e 32       	cpi	r24, 0x2E	; 46
    7228:	b9 f4       	brne	.+46     	; 0x7258 <vfprintf+0xfc>
    722a:	36 fc       	sbrc	r3, 6
    722c:	75 c1       	rjmp	.+746    	; 0x7518 <vfprintf+0x3bc>
    722e:	23 2d       	mov	r18, r3
    7230:	20 64       	ori	r18, 0x40	; 64
    7232:	32 2e       	mov	r3, r18
    7234:	19 c0       	rjmp	.+50     	; 0x7268 <vfprintf+0x10c>
    7236:	36 fe       	sbrs	r3, 6
    7238:	06 c0       	rjmp	.+12     	; 0x7246 <vfprintf+0xea>
    723a:	8a e0       	ldi	r24, 0x0A	; 10
    723c:	98 9e       	mul	r9, r24
    723e:	20 0d       	add	r18, r0
    7240:	11 24       	eor	r1, r1
    7242:	92 2e       	mov	r9, r18
    7244:	11 c0       	rjmp	.+34     	; 0x7268 <vfprintf+0x10c>
    7246:	ea e0       	ldi	r30, 0x0A	; 10
    7248:	2e 9e       	mul	r2, r30
    724a:	20 0d       	add	r18, r0
    724c:	11 24       	eor	r1, r1
    724e:	22 2e       	mov	r2, r18
    7250:	f3 2d       	mov	r31, r3
    7252:	f0 62       	ori	r31, 0x20	; 32
    7254:	3f 2e       	mov	r3, r31
    7256:	08 c0       	rjmp	.+16     	; 0x7268 <vfprintf+0x10c>
    7258:	8c 36       	cpi	r24, 0x6C	; 108
    725a:	21 f4       	brne	.+8      	; 0x7264 <vfprintf+0x108>
    725c:	83 2d       	mov	r24, r3
    725e:	80 68       	ori	r24, 0x80	; 128
    7260:	38 2e       	mov	r3, r24
    7262:	02 c0       	rjmp	.+4      	; 0x7268 <vfprintf+0x10c>
    7264:	88 36       	cpi	r24, 0x68	; 104
    7266:	41 f4       	brne	.+16     	; 0x7278 <vfprintf+0x11c>
    7268:	f7 01       	movw	r30, r14
    726a:	93 fd       	sbrc	r25, 3
    726c:	85 91       	lpm	r24, Z+
    726e:	93 ff       	sbrs	r25, 3
    7270:	81 91       	ld	r24, Z+
    7272:	7f 01       	movw	r14, r30
    7274:	81 11       	cpse	r24, r1
    7276:	b3 cf       	rjmp	.-154    	; 0x71de <vfprintf+0x82>
    7278:	98 2f       	mov	r25, r24
    727a:	9f 7d       	andi	r25, 0xDF	; 223
    727c:	95 54       	subi	r25, 0x45	; 69
    727e:	93 30       	cpi	r25, 0x03	; 3
    7280:	28 f4       	brcc	.+10     	; 0x728c <vfprintf+0x130>
    7282:	0c 5f       	subi	r16, 0xFC	; 252
    7284:	1f 4f       	sbci	r17, 0xFF	; 255
    7286:	9f e3       	ldi	r25, 0x3F	; 63
    7288:	99 83       	std	Y+1, r25	; 0x01
    728a:	0d c0       	rjmp	.+26     	; 0x72a6 <vfprintf+0x14a>
    728c:	83 36       	cpi	r24, 0x63	; 99
    728e:	31 f0       	breq	.+12     	; 0x729c <vfprintf+0x140>
    7290:	83 37       	cpi	r24, 0x73	; 115
    7292:	71 f0       	breq	.+28     	; 0x72b0 <vfprintf+0x154>
    7294:	83 35       	cpi	r24, 0x53	; 83
    7296:	09 f0       	breq	.+2      	; 0x729a <vfprintf+0x13e>
    7298:	55 c0       	rjmp	.+170    	; 0x7344 <vfprintf+0x1e8>
    729a:	20 c0       	rjmp	.+64     	; 0x72dc <vfprintf+0x180>
    729c:	f8 01       	movw	r30, r16
    729e:	80 81       	ld	r24, Z
    72a0:	89 83       	std	Y+1, r24	; 0x01
    72a2:	0e 5f       	subi	r16, 0xFE	; 254
    72a4:	1f 4f       	sbci	r17, 0xFF	; 255
    72a6:	88 24       	eor	r8, r8
    72a8:	83 94       	inc	r8
    72aa:	91 2c       	mov	r9, r1
    72ac:	53 01       	movw	r10, r6
    72ae:	12 c0       	rjmp	.+36     	; 0x72d4 <vfprintf+0x178>
    72b0:	28 01       	movw	r4, r16
    72b2:	f2 e0       	ldi	r31, 0x02	; 2
    72b4:	4f 0e       	add	r4, r31
    72b6:	51 1c       	adc	r5, r1
    72b8:	f8 01       	movw	r30, r16
    72ba:	a0 80       	ld	r10, Z
    72bc:	b1 80       	ldd	r11, Z+1	; 0x01
    72be:	36 fe       	sbrs	r3, 6
    72c0:	03 c0       	rjmp	.+6      	; 0x72c8 <vfprintf+0x16c>
    72c2:	69 2d       	mov	r22, r9
    72c4:	70 e0       	ldi	r23, 0x00	; 0
    72c6:	02 c0       	rjmp	.+4      	; 0x72cc <vfprintf+0x170>
    72c8:	6f ef       	ldi	r22, 0xFF	; 255
    72ca:	7f ef       	ldi	r23, 0xFF	; 255
    72cc:	c5 01       	movw	r24, r10
    72ce:	4e d1       	rcall	.+668    	; 0x756c <strnlen>
    72d0:	4c 01       	movw	r8, r24
    72d2:	82 01       	movw	r16, r4
    72d4:	f3 2d       	mov	r31, r3
    72d6:	ff 77       	andi	r31, 0x7F	; 127
    72d8:	3f 2e       	mov	r3, r31
    72da:	15 c0       	rjmp	.+42     	; 0x7306 <vfprintf+0x1aa>
    72dc:	28 01       	movw	r4, r16
    72de:	22 e0       	ldi	r18, 0x02	; 2
    72e0:	42 0e       	add	r4, r18
    72e2:	51 1c       	adc	r5, r1
    72e4:	f8 01       	movw	r30, r16
    72e6:	a0 80       	ld	r10, Z
    72e8:	b1 80       	ldd	r11, Z+1	; 0x01
    72ea:	36 fe       	sbrs	r3, 6
    72ec:	03 c0       	rjmp	.+6      	; 0x72f4 <vfprintf+0x198>
    72ee:	69 2d       	mov	r22, r9
    72f0:	70 e0       	ldi	r23, 0x00	; 0
    72f2:	02 c0       	rjmp	.+4      	; 0x72f8 <vfprintf+0x19c>
    72f4:	6f ef       	ldi	r22, 0xFF	; 255
    72f6:	7f ef       	ldi	r23, 0xFF	; 255
    72f8:	c5 01       	movw	r24, r10
    72fa:	2d d1       	rcall	.+602    	; 0x7556 <strnlen_P>
    72fc:	4c 01       	movw	r8, r24
    72fe:	f3 2d       	mov	r31, r3
    7300:	f0 68       	ori	r31, 0x80	; 128
    7302:	3f 2e       	mov	r3, r31
    7304:	82 01       	movw	r16, r4
    7306:	33 fc       	sbrc	r3, 3
    7308:	19 c0       	rjmp	.+50     	; 0x733c <vfprintf+0x1e0>
    730a:	82 2d       	mov	r24, r2
    730c:	90 e0       	ldi	r25, 0x00	; 0
    730e:	88 16       	cp	r8, r24
    7310:	99 06       	cpc	r9, r25
    7312:	a0 f4       	brcc	.+40     	; 0x733c <vfprintf+0x1e0>
    7314:	b6 01       	movw	r22, r12
    7316:	80 e2       	ldi	r24, 0x20	; 32
    7318:	90 e0       	ldi	r25, 0x00	; 0
    731a:	33 d1       	rcall	.+614    	; 0x7582 <fputc>
    731c:	2a 94       	dec	r2
    731e:	f5 cf       	rjmp	.-22     	; 0x730a <vfprintf+0x1ae>
    7320:	f5 01       	movw	r30, r10
    7322:	37 fc       	sbrc	r3, 7
    7324:	85 91       	lpm	r24, Z+
    7326:	37 fe       	sbrs	r3, 7
    7328:	81 91       	ld	r24, Z+
    732a:	5f 01       	movw	r10, r30
    732c:	b6 01       	movw	r22, r12
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	28 d1       	rcall	.+592    	; 0x7582 <fputc>
    7332:	21 10       	cpse	r2, r1
    7334:	2a 94       	dec	r2
    7336:	21 e0       	ldi	r18, 0x01	; 1
    7338:	82 1a       	sub	r8, r18
    733a:	91 08       	sbc	r9, r1
    733c:	81 14       	cp	r8, r1
    733e:	91 04       	cpc	r9, r1
    7340:	79 f7       	brne	.-34     	; 0x7320 <vfprintf+0x1c4>
    7342:	e1 c0       	rjmp	.+450    	; 0x7506 <vfprintf+0x3aa>
    7344:	84 36       	cpi	r24, 0x64	; 100
    7346:	11 f0       	breq	.+4      	; 0x734c <vfprintf+0x1f0>
    7348:	89 36       	cpi	r24, 0x69	; 105
    734a:	39 f5       	brne	.+78     	; 0x739a <vfprintf+0x23e>
    734c:	f8 01       	movw	r30, r16
    734e:	37 fe       	sbrs	r3, 7
    7350:	07 c0       	rjmp	.+14     	; 0x7360 <vfprintf+0x204>
    7352:	60 81       	ld	r22, Z
    7354:	71 81       	ldd	r23, Z+1	; 0x01
    7356:	82 81       	ldd	r24, Z+2	; 0x02
    7358:	93 81       	ldd	r25, Z+3	; 0x03
    735a:	0c 5f       	subi	r16, 0xFC	; 252
    735c:	1f 4f       	sbci	r17, 0xFF	; 255
    735e:	08 c0       	rjmp	.+16     	; 0x7370 <vfprintf+0x214>
    7360:	60 81       	ld	r22, Z
    7362:	71 81       	ldd	r23, Z+1	; 0x01
    7364:	07 2e       	mov	r0, r23
    7366:	00 0c       	add	r0, r0
    7368:	88 0b       	sbc	r24, r24
    736a:	99 0b       	sbc	r25, r25
    736c:	0e 5f       	subi	r16, 0xFE	; 254
    736e:	1f 4f       	sbci	r17, 0xFF	; 255
    7370:	f3 2d       	mov	r31, r3
    7372:	ff 76       	andi	r31, 0x6F	; 111
    7374:	3f 2e       	mov	r3, r31
    7376:	97 ff       	sbrs	r25, 7
    7378:	09 c0       	rjmp	.+18     	; 0x738c <vfprintf+0x230>
    737a:	90 95       	com	r25
    737c:	80 95       	com	r24
    737e:	70 95       	com	r23
    7380:	61 95       	neg	r22
    7382:	7f 4f       	sbci	r23, 0xFF	; 255
    7384:	8f 4f       	sbci	r24, 0xFF	; 255
    7386:	9f 4f       	sbci	r25, 0xFF	; 255
    7388:	f0 68       	ori	r31, 0x80	; 128
    738a:	3f 2e       	mov	r3, r31
    738c:	2a e0       	ldi	r18, 0x0A	; 10
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	a3 01       	movw	r20, r6
    7392:	33 d1       	rcall	.+614    	; 0x75fa <__ultoa_invert>
    7394:	88 2e       	mov	r8, r24
    7396:	86 18       	sub	r8, r6
    7398:	44 c0       	rjmp	.+136    	; 0x7422 <vfprintf+0x2c6>
    739a:	85 37       	cpi	r24, 0x75	; 117
    739c:	31 f4       	brne	.+12     	; 0x73aa <vfprintf+0x24e>
    739e:	23 2d       	mov	r18, r3
    73a0:	2f 7e       	andi	r18, 0xEF	; 239
    73a2:	b2 2e       	mov	r11, r18
    73a4:	2a e0       	ldi	r18, 0x0A	; 10
    73a6:	30 e0       	ldi	r19, 0x00	; 0
    73a8:	25 c0       	rjmp	.+74     	; 0x73f4 <vfprintf+0x298>
    73aa:	93 2d       	mov	r25, r3
    73ac:	99 7f       	andi	r25, 0xF9	; 249
    73ae:	b9 2e       	mov	r11, r25
    73b0:	8f 36       	cpi	r24, 0x6F	; 111
    73b2:	c1 f0       	breq	.+48     	; 0x73e4 <vfprintf+0x288>
    73b4:	18 f4       	brcc	.+6      	; 0x73bc <vfprintf+0x260>
    73b6:	88 35       	cpi	r24, 0x58	; 88
    73b8:	79 f0       	breq	.+30     	; 0x73d8 <vfprintf+0x27c>
    73ba:	ae c0       	rjmp	.+348    	; 0x7518 <vfprintf+0x3bc>
    73bc:	80 37       	cpi	r24, 0x70	; 112
    73be:	19 f0       	breq	.+6      	; 0x73c6 <vfprintf+0x26a>
    73c0:	88 37       	cpi	r24, 0x78	; 120
    73c2:	21 f0       	breq	.+8      	; 0x73cc <vfprintf+0x270>
    73c4:	a9 c0       	rjmp	.+338    	; 0x7518 <vfprintf+0x3bc>
    73c6:	e9 2f       	mov	r30, r25
    73c8:	e0 61       	ori	r30, 0x10	; 16
    73ca:	be 2e       	mov	r11, r30
    73cc:	b4 fe       	sbrs	r11, 4
    73ce:	0d c0       	rjmp	.+26     	; 0x73ea <vfprintf+0x28e>
    73d0:	fb 2d       	mov	r31, r11
    73d2:	f4 60       	ori	r31, 0x04	; 4
    73d4:	bf 2e       	mov	r11, r31
    73d6:	09 c0       	rjmp	.+18     	; 0x73ea <vfprintf+0x28e>
    73d8:	34 fe       	sbrs	r3, 4
    73da:	0a c0       	rjmp	.+20     	; 0x73f0 <vfprintf+0x294>
    73dc:	29 2f       	mov	r18, r25
    73de:	26 60       	ori	r18, 0x06	; 6
    73e0:	b2 2e       	mov	r11, r18
    73e2:	06 c0       	rjmp	.+12     	; 0x73f0 <vfprintf+0x294>
    73e4:	28 e0       	ldi	r18, 0x08	; 8
    73e6:	30 e0       	ldi	r19, 0x00	; 0
    73e8:	05 c0       	rjmp	.+10     	; 0x73f4 <vfprintf+0x298>
    73ea:	20 e1       	ldi	r18, 0x10	; 16
    73ec:	30 e0       	ldi	r19, 0x00	; 0
    73ee:	02 c0       	rjmp	.+4      	; 0x73f4 <vfprintf+0x298>
    73f0:	20 e1       	ldi	r18, 0x10	; 16
    73f2:	32 e0       	ldi	r19, 0x02	; 2
    73f4:	f8 01       	movw	r30, r16
    73f6:	b7 fe       	sbrs	r11, 7
    73f8:	07 c0       	rjmp	.+14     	; 0x7408 <vfprintf+0x2ac>
    73fa:	60 81       	ld	r22, Z
    73fc:	71 81       	ldd	r23, Z+1	; 0x01
    73fe:	82 81       	ldd	r24, Z+2	; 0x02
    7400:	93 81       	ldd	r25, Z+3	; 0x03
    7402:	0c 5f       	subi	r16, 0xFC	; 252
    7404:	1f 4f       	sbci	r17, 0xFF	; 255
    7406:	06 c0       	rjmp	.+12     	; 0x7414 <vfprintf+0x2b8>
    7408:	60 81       	ld	r22, Z
    740a:	71 81       	ldd	r23, Z+1	; 0x01
    740c:	80 e0       	ldi	r24, 0x00	; 0
    740e:	90 e0       	ldi	r25, 0x00	; 0
    7410:	0e 5f       	subi	r16, 0xFE	; 254
    7412:	1f 4f       	sbci	r17, 0xFF	; 255
    7414:	a3 01       	movw	r20, r6
    7416:	f1 d0       	rcall	.+482    	; 0x75fa <__ultoa_invert>
    7418:	88 2e       	mov	r8, r24
    741a:	86 18       	sub	r8, r6
    741c:	fb 2d       	mov	r31, r11
    741e:	ff 77       	andi	r31, 0x7F	; 127
    7420:	3f 2e       	mov	r3, r31
    7422:	36 fe       	sbrs	r3, 6
    7424:	0d c0       	rjmp	.+26     	; 0x7440 <vfprintf+0x2e4>
    7426:	23 2d       	mov	r18, r3
    7428:	2e 7f       	andi	r18, 0xFE	; 254
    742a:	a2 2e       	mov	r10, r18
    742c:	89 14       	cp	r8, r9
    742e:	58 f4       	brcc	.+22     	; 0x7446 <vfprintf+0x2ea>
    7430:	34 fe       	sbrs	r3, 4
    7432:	0b c0       	rjmp	.+22     	; 0x744a <vfprintf+0x2ee>
    7434:	32 fc       	sbrc	r3, 2
    7436:	09 c0       	rjmp	.+18     	; 0x744a <vfprintf+0x2ee>
    7438:	83 2d       	mov	r24, r3
    743a:	8e 7e       	andi	r24, 0xEE	; 238
    743c:	a8 2e       	mov	r10, r24
    743e:	05 c0       	rjmp	.+10     	; 0x744a <vfprintf+0x2ee>
    7440:	b8 2c       	mov	r11, r8
    7442:	a3 2c       	mov	r10, r3
    7444:	03 c0       	rjmp	.+6      	; 0x744c <vfprintf+0x2f0>
    7446:	b8 2c       	mov	r11, r8
    7448:	01 c0       	rjmp	.+2      	; 0x744c <vfprintf+0x2f0>
    744a:	b9 2c       	mov	r11, r9
    744c:	a4 fe       	sbrs	r10, 4
    744e:	0f c0       	rjmp	.+30     	; 0x746e <vfprintf+0x312>
    7450:	fe 01       	movw	r30, r28
    7452:	e8 0d       	add	r30, r8
    7454:	f1 1d       	adc	r31, r1
    7456:	80 81       	ld	r24, Z
    7458:	80 33       	cpi	r24, 0x30	; 48
    745a:	21 f4       	brne	.+8      	; 0x7464 <vfprintf+0x308>
    745c:	9a 2d       	mov	r25, r10
    745e:	99 7e       	andi	r25, 0xE9	; 233
    7460:	a9 2e       	mov	r10, r25
    7462:	09 c0       	rjmp	.+18     	; 0x7476 <vfprintf+0x31a>
    7464:	a2 fe       	sbrs	r10, 2
    7466:	06 c0       	rjmp	.+12     	; 0x7474 <vfprintf+0x318>
    7468:	b3 94       	inc	r11
    746a:	b3 94       	inc	r11
    746c:	04 c0       	rjmp	.+8      	; 0x7476 <vfprintf+0x31a>
    746e:	8a 2d       	mov	r24, r10
    7470:	86 78       	andi	r24, 0x86	; 134
    7472:	09 f0       	breq	.+2      	; 0x7476 <vfprintf+0x31a>
    7474:	b3 94       	inc	r11
    7476:	a3 fc       	sbrc	r10, 3
    7478:	10 c0       	rjmp	.+32     	; 0x749a <vfprintf+0x33e>
    747a:	a0 fe       	sbrs	r10, 0
    747c:	06 c0       	rjmp	.+12     	; 0x748a <vfprintf+0x32e>
    747e:	b2 14       	cp	r11, r2
    7480:	80 f4       	brcc	.+32     	; 0x74a2 <vfprintf+0x346>
    7482:	28 0c       	add	r2, r8
    7484:	92 2c       	mov	r9, r2
    7486:	9b 18       	sub	r9, r11
    7488:	0d c0       	rjmp	.+26     	; 0x74a4 <vfprintf+0x348>
    748a:	b2 14       	cp	r11, r2
    748c:	58 f4       	brcc	.+22     	; 0x74a4 <vfprintf+0x348>
    748e:	b6 01       	movw	r22, r12
    7490:	80 e2       	ldi	r24, 0x20	; 32
    7492:	90 e0       	ldi	r25, 0x00	; 0
    7494:	76 d0       	rcall	.+236    	; 0x7582 <fputc>
    7496:	b3 94       	inc	r11
    7498:	f8 cf       	rjmp	.-16     	; 0x748a <vfprintf+0x32e>
    749a:	b2 14       	cp	r11, r2
    749c:	18 f4       	brcc	.+6      	; 0x74a4 <vfprintf+0x348>
    749e:	2b 18       	sub	r2, r11
    74a0:	02 c0       	rjmp	.+4      	; 0x74a6 <vfprintf+0x34a>
    74a2:	98 2c       	mov	r9, r8
    74a4:	21 2c       	mov	r2, r1
    74a6:	a4 fe       	sbrs	r10, 4
    74a8:	0f c0       	rjmp	.+30     	; 0x74c8 <vfprintf+0x36c>
    74aa:	b6 01       	movw	r22, r12
    74ac:	80 e3       	ldi	r24, 0x30	; 48
    74ae:	90 e0       	ldi	r25, 0x00	; 0
    74b0:	68 d0       	rcall	.+208    	; 0x7582 <fputc>
    74b2:	a2 fe       	sbrs	r10, 2
    74b4:	16 c0       	rjmp	.+44     	; 0x74e2 <vfprintf+0x386>
    74b6:	a1 fc       	sbrc	r10, 1
    74b8:	03 c0       	rjmp	.+6      	; 0x74c0 <vfprintf+0x364>
    74ba:	88 e7       	ldi	r24, 0x78	; 120
    74bc:	90 e0       	ldi	r25, 0x00	; 0
    74be:	02 c0       	rjmp	.+4      	; 0x74c4 <vfprintf+0x368>
    74c0:	88 e5       	ldi	r24, 0x58	; 88
    74c2:	90 e0       	ldi	r25, 0x00	; 0
    74c4:	b6 01       	movw	r22, r12
    74c6:	0c c0       	rjmp	.+24     	; 0x74e0 <vfprintf+0x384>
    74c8:	8a 2d       	mov	r24, r10
    74ca:	86 78       	andi	r24, 0x86	; 134
    74cc:	51 f0       	breq	.+20     	; 0x74e2 <vfprintf+0x386>
    74ce:	a1 fe       	sbrs	r10, 1
    74d0:	02 c0       	rjmp	.+4      	; 0x74d6 <vfprintf+0x37a>
    74d2:	8b e2       	ldi	r24, 0x2B	; 43
    74d4:	01 c0       	rjmp	.+2      	; 0x74d8 <vfprintf+0x37c>
    74d6:	80 e2       	ldi	r24, 0x20	; 32
    74d8:	a7 fc       	sbrc	r10, 7
    74da:	8d e2       	ldi	r24, 0x2D	; 45
    74dc:	b6 01       	movw	r22, r12
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	50 d0       	rcall	.+160    	; 0x7582 <fputc>
    74e2:	89 14       	cp	r8, r9
    74e4:	30 f4       	brcc	.+12     	; 0x74f2 <vfprintf+0x396>
    74e6:	b6 01       	movw	r22, r12
    74e8:	80 e3       	ldi	r24, 0x30	; 48
    74ea:	90 e0       	ldi	r25, 0x00	; 0
    74ec:	4a d0       	rcall	.+148    	; 0x7582 <fputc>
    74ee:	9a 94       	dec	r9
    74f0:	f8 cf       	rjmp	.-16     	; 0x74e2 <vfprintf+0x386>
    74f2:	8a 94       	dec	r8
    74f4:	f3 01       	movw	r30, r6
    74f6:	e8 0d       	add	r30, r8
    74f8:	f1 1d       	adc	r31, r1
    74fa:	80 81       	ld	r24, Z
    74fc:	b6 01       	movw	r22, r12
    74fe:	90 e0       	ldi	r25, 0x00	; 0
    7500:	40 d0       	rcall	.+128    	; 0x7582 <fputc>
    7502:	81 10       	cpse	r8, r1
    7504:	f6 cf       	rjmp	.-20     	; 0x74f2 <vfprintf+0x396>
    7506:	22 20       	and	r2, r2
    7508:	09 f4       	brne	.+2      	; 0x750c <vfprintf+0x3b0>
    750a:	4e ce       	rjmp	.-868    	; 0x71a8 <vfprintf+0x4c>
    750c:	b6 01       	movw	r22, r12
    750e:	80 e2       	ldi	r24, 0x20	; 32
    7510:	90 e0       	ldi	r25, 0x00	; 0
    7512:	37 d0       	rcall	.+110    	; 0x7582 <fputc>
    7514:	2a 94       	dec	r2
    7516:	f7 cf       	rjmp	.-18     	; 0x7506 <vfprintf+0x3aa>
    7518:	f6 01       	movw	r30, r12
    751a:	86 81       	ldd	r24, Z+6	; 0x06
    751c:	97 81       	ldd	r25, Z+7	; 0x07
    751e:	02 c0       	rjmp	.+4      	; 0x7524 <vfprintf+0x3c8>
    7520:	8f ef       	ldi	r24, 0xFF	; 255
    7522:	9f ef       	ldi	r25, 0xFF	; 255
    7524:	2b 96       	adiw	r28, 0x0b	; 11
    7526:	0f b6       	in	r0, 0x3f	; 63
    7528:	f8 94       	cli
    752a:	de bf       	out	0x3e, r29	; 62
    752c:	0f be       	out	0x3f, r0	; 63
    752e:	cd bf       	out	0x3d, r28	; 61
    7530:	df 91       	pop	r29
    7532:	cf 91       	pop	r28
    7534:	1f 91       	pop	r17
    7536:	0f 91       	pop	r16
    7538:	ff 90       	pop	r15
    753a:	ef 90       	pop	r14
    753c:	df 90       	pop	r13
    753e:	cf 90       	pop	r12
    7540:	bf 90       	pop	r11
    7542:	af 90       	pop	r10
    7544:	9f 90       	pop	r9
    7546:	8f 90       	pop	r8
    7548:	7f 90       	pop	r7
    754a:	6f 90       	pop	r6
    754c:	5f 90       	pop	r5
    754e:	4f 90       	pop	r4
    7550:	3f 90       	pop	r3
    7552:	2f 90       	pop	r2
    7554:	08 95       	ret

00007556 <strnlen_P>:
    7556:	fc 01       	movw	r30, r24
    7558:	05 90       	lpm	r0, Z+
    755a:	61 50       	subi	r22, 0x01	; 1
    755c:	70 40       	sbci	r23, 0x00	; 0
    755e:	01 10       	cpse	r0, r1
    7560:	d8 f7       	brcc	.-10     	; 0x7558 <strnlen_P+0x2>
    7562:	80 95       	com	r24
    7564:	90 95       	com	r25
    7566:	8e 0f       	add	r24, r30
    7568:	9f 1f       	adc	r25, r31
    756a:	08 95       	ret

0000756c <strnlen>:
    756c:	fc 01       	movw	r30, r24
    756e:	61 50       	subi	r22, 0x01	; 1
    7570:	70 40       	sbci	r23, 0x00	; 0
    7572:	01 90       	ld	r0, Z+
    7574:	01 10       	cpse	r0, r1
    7576:	d8 f7       	brcc	.-10     	; 0x756e <strnlen+0x2>
    7578:	80 95       	com	r24
    757a:	90 95       	com	r25
    757c:	8e 0f       	add	r24, r30
    757e:	9f 1f       	adc	r25, r31
    7580:	08 95       	ret

00007582 <fputc>:
    7582:	0f 93       	push	r16
    7584:	1f 93       	push	r17
    7586:	cf 93       	push	r28
    7588:	df 93       	push	r29
    758a:	fb 01       	movw	r30, r22
    758c:	23 81       	ldd	r18, Z+3	; 0x03
    758e:	21 fd       	sbrc	r18, 1
    7590:	03 c0       	rjmp	.+6      	; 0x7598 <fputc+0x16>
    7592:	8f ef       	ldi	r24, 0xFF	; 255
    7594:	9f ef       	ldi	r25, 0xFF	; 255
    7596:	2c c0       	rjmp	.+88     	; 0x75f0 <fputc+0x6e>
    7598:	22 ff       	sbrs	r18, 2
    759a:	16 c0       	rjmp	.+44     	; 0x75c8 <fputc+0x46>
    759c:	46 81       	ldd	r20, Z+6	; 0x06
    759e:	57 81       	ldd	r21, Z+7	; 0x07
    75a0:	24 81       	ldd	r18, Z+4	; 0x04
    75a2:	35 81       	ldd	r19, Z+5	; 0x05
    75a4:	42 17       	cp	r20, r18
    75a6:	53 07       	cpc	r21, r19
    75a8:	44 f4       	brge	.+16     	; 0x75ba <fputc+0x38>
    75aa:	a0 81       	ld	r26, Z
    75ac:	b1 81       	ldd	r27, Z+1	; 0x01
    75ae:	9d 01       	movw	r18, r26
    75b0:	2f 5f       	subi	r18, 0xFF	; 255
    75b2:	3f 4f       	sbci	r19, 0xFF	; 255
    75b4:	31 83       	std	Z+1, r19	; 0x01
    75b6:	20 83       	st	Z, r18
    75b8:	8c 93       	st	X, r24
    75ba:	26 81       	ldd	r18, Z+6	; 0x06
    75bc:	37 81       	ldd	r19, Z+7	; 0x07
    75be:	2f 5f       	subi	r18, 0xFF	; 255
    75c0:	3f 4f       	sbci	r19, 0xFF	; 255
    75c2:	37 83       	std	Z+7, r19	; 0x07
    75c4:	26 83       	std	Z+6, r18	; 0x06
    75c6:	14 c0       	rjmp	.+40     	; 0x75f0 <fputc+0x6e>
    75c8:	8b 01       	movw	r16, r22
    75ca:	ec 01       	movw	r28, r24
    75cc:	fb 01       	movw	r30, r22
    75ce:	00 84       	ldd	r0, Z+8	; 0x08
    75d0:	f1 85       	ldd	r31, Z+9	; 0x09
    75d2:	e0 2d       	mov	r30, r0
    75d4:	19 95       	eicall
    75d6:	89 2b       	or	r24, r25
    75d8:	e1 f6       	brne	.-72     	; 0x7592 <fputc+0x10>
    75da:	d8 01       	movw	r26, r16
    75dc:	16 96       	adiw	r26, 0x06	; 6
    75de:	8d 91       	ld	r24, X+
    75e0:	9c 91       	ld	r25, X
    75e2:	17 97       	sbiw	r26, 0x07	; 7
    75e4:	01 96       	adiw	r24, 0x01	; 1
    75e6:	17 96       	adiw	r26, 0x07	; 7
    75e8:	9c 93       	st	X, r25
    75ea:	8e 93       	st	-X, r24
    75ec:	16 97       	sbiw	r26, 0x06	; 6
    75ee:	ce 01       	movw	r24, r28
    75f0:	df 91       	pop	r29
    75f2:	cf 91       	pop	r28
    75f4:	1f 91       	pop	r17
    75f6:	0f 91       	pop	r16
    75f8:	08 95       	ret

000075fa <__ultoa_invert>:
    75fa:	fa 01       	movw	r30, r20
    75fc:	aa 27       	eor	r26, r26
    75fe:	28 30       	cpi	r18, 0x08	; 8
    7600:	51 f1       	breq	.+84     	; 0x7656 <__ultoa_invert+0x5c>
    7602:	20 31       	cpi	r18, 0x10	; 16
    7604:	81 f1       	breq	.+96     	; 0x7666 <__ultoa_invert+0x6c>
    7606:	e8 94       	clt
    7608:	6f 93       	push	r22
    760a:	6e 7f       	andi	r22, 0xFE	; 254
    760c:	6e 5f       	subi	r22, 0xFE	; 254
    760e:	7f 4f       	sbci	r23, 0xFF	; 255
    7610:	8f 4f       	sbci	r24, 0xFF	; 255
    7612:	9f 4f       	sbci	r25, 0xFF	; 255
    7614:	af 4f       	sbci	r26, 0xFF	; 255
    7616:	b1 e0       	ldi	r27, 0x01	; 1
    7618:	3e d0       	rcall	.+124    	; 0x7696 <__ultoa_invert+0x9c>
    761a:	b4 e0       	ldi	r27, 0x04	; 4
    761c:	3c d0       	rcall	.+120    	; 0x7696 <__ultoa_invert+0x9c>
    761e:	67 0f       	add	r22, r23
    7620:	78 1f       	adc	r23, r24
    7622:	89 1f       	adc	r24, r25
    7624:	9a 1f       	adc	r25, r26
    7626:	a1 1d       	adc	r26, r1
    7628:	68 0f       	add	r22, r24
    762a:	79 1f       	adc	r23, r25
    762c:	8a 1f       	adc	r24, r26
    762e:	91 1d       	adc	r25, r1
    7630:	a1 1d       	adc	r26, r1
    7632:	6a 0f       	add	r22, r26
    7634:	71 1d       	adc	r23, r1
    7636:	81 1d       	adc	r24, r1
    7638:	91 1d       	adc	r25, r1
    763a:	a1 1d       	adc	r26, r1
    763c:	20 d0       	rcall	.+64     	; 0x767e <__ultoa_invert+0x84>
    763e:	09 f4       	brne	.+2      	; 0x7642 <__ultoa_invert+0x48>
    7640:	68 94       	set
    7642:	3f 91       	pop	r19
    7644:	2a e0       	ldi	r18, 0x0A	; 10
    7646:	26 9f       	mul	r18, r22
    7648:	11 24       	eor	r1, r1
    764a:	30 19       	sub	r19, r0
    764c:	30 5d       	subi	r19, 0xD0	; 208
    764e:	31 93       	st	Z+, r19
    7650:	de f6       	brtc	.-74     	; 0x7608 <__ultoa_invert+0xe>
    7652:	cf 01       	movw	r24, r30
    7654:	08 95       	ret
    7656:	46 2f       	mov	r20, r22
    7658:	47 70       	andi	r20, 0x07	; 7
    765a:	40 5d       	subi	r20, 0xD0	; 208
    765c:	41 93       	st	Z+, r20
    765e:	b3 e0       	ldi	r27, 0x03	; 3
    7660:	0f d0       	rcall	.+30     	; 0x7680 <__ultoa_invert+0x86>
    7662:	c9 f7       	brne	.-14     	; 0x7656 <__ultoa_invert+0x5c>
    7664:	f6 cf       	rjmp	.-20     	; 0x7652 <__ultoa_invert+0x58>
    7666:	46 2f       	mov	r20, r22
    7668:	4f 70       	andi	r20, 0x0F	; 15
    766a:	40 5d       	subi	r20, 0xD0	; 208
    766c:	4a 33       	cpi	r20, 0x3A	; 58
    766e:	18 f0       	brcs	.+6      	; 0x7676 <__ultoa_invert+0x7c>
    7670:	49 5d       	subi	r20, 0xD9	; 217
    7672:	31 fd       	sbrc	r19, 1
    7674:	40 52       	subi	r20, 0x20	; 32
    7676:	41 93       	st	Z+, r20
    7678:	02 d0       	rcall	.+4      	; 0x767e <__ultoa_invert+0x84>
    767a:	a9 f7       	brne	.-22     	; 0x7666 <__ultoa_invert+0x6c>
    767c:	ea cf       	rjmp	.-44     	; 0x7652 <__ultoa_invert+0x58>
    767e:	b4 e0       	ldi	r27, 0x04	; 4
    7680:	a6 95       	lsr	r26
    7682:	97 95       	ror	r25
    7684:	87 95       	ror	r24
    7686:	77 95       	ror	r23
    7688:	67 95       	ror	r22
    768a:	ba 95       	dec	r27
    768c:	c9 f7       	brne	.-14     	; 0x7680 <__ultoa_invert+0x86>
    768e:	00 97       	sbiw	r24, 0x00	; 0
    7690:	61 05       	cpc	r22, r1
    7692:	71 05       	cpc	r23, r1
    7694:	08 95       	ret
    7696:	9b 01       	movw	r18, r22
    7698:	ac 01       	movw	r20, r24
    769a:	0a 2e       	mov	r0, r26
    769c:	06 94       	lsr	r0
    769e:	57 95       	ror	r21
    76a0:	47 95       	ror	r20
    76a2:	37 95       	ror	r19
    76a4:	27 95       	ror	r18
    76a6:	ba 95       	dec	r27
    76a8:	c9 f7       	brne	.-14     	; 0x769c <__ultoa_invert+0xa2>
    76aa:	62 0f       	add	r22, r18
    76ac:	73 1f       	adc	r23, r19
    76ae:	84 1f       	adc	r24, r20
    76b0:	95 1f       	adc	r25, r21
    76b2:	a0 1d       	adc	r26, r0
    76b4:	08 95       	ret

000076b6 <_exit>:
    76b6:	f8 94       	cli

000076b8 <__stop_program>:
    76b8:	ff cf       	rjmp	.-2      	; 0x76b8 <__stop_program>
