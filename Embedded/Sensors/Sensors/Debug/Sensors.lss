
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000448  00800200  0000464c  000046e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000464c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000267  00800648  00800648  00004b28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004b28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000910  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bf7b  00000000  00000000  000054d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eef  00000000  00000000  0001144f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005911  00000000  00000000  0001433e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e4c  00000000  00000000  00019c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000399c  00000000  00000000  0001ba9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aede  00000000  00000000  0001f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  0002a316  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c5       	rjmp	.+2714   	; 0xacc <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__vector_25>
      68:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__vector_36>
      94:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 de 1b 	jmp	0x37bc	; 0x37bc <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__vector_51>
      d0:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__vector_54>
      dc:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	00 1c       	adc	r0, r0
      fa:	70 1c       	adc	r7, r0
      fc:	70 1c       	adc	r7, r0
      fe:	70 1c       	adc	r7, r0
     100:	70 1c       	adc	r7, r0
     102:	70 1c       	adc	r7, r0
     104:	70 1c       	adc	r7, r0
     106:	70 1c       	adc	r7, r0
     108:	00 1c       	adc	r0, r0
     10a:	70 1c       	adc	r7, r0
     10c:	70 1c       	adc	r7, r0
     10e:	70 1c       	adc	r7, r0
     110:	70 1c       	adc	r7, r0
     112:	70 1c       	adc	r7, r0
     114:	70 1c       	adc	r7, r0
     116:	70 1c       	adc	r7, r0
     118:	02 1c       	adc	r0, r2
     11a:	70 1c       	adc	r7, r0
     11c:	70 1c       	adc	r7, r0
     11e:	70 1c       	adc	r7, r0
     120:	70 1c       	adc	r7, r0
     122:	70 1c       	adc	r7, r0
     124:	70 1c       	adc	r7, r0
     126:	70 1c       	adc	r7, r0
     128:	70 1c       	adc	r7, r0
     12a:	70 1c       	adc	r7, r0
     12c:	70 1c       	adc	r7, r0
     12e:	70 1c       	adc	r7, r0
     130:	70 1c       	adc	r7, r0
     132:	70 1c       	adc	r7, r0
     134:	70 1c       	adc	r7, r0
     136:	70 1c       	adc	r7, r0
     138:	02 1c       	adc	r0, r2
     13a:	70 1c       	adc	r7, r0
     13c:	70 1c       	adc	r7, r0
     13e:	70 1c       	adc	r7, r0
     140:	70 1c       	adc	r7, r0
     142:	70 1c       	adc	r7, r0
     144:	70 1c       	adc	r7, r0
     146:	70 1c       	adc	r7, r0
     148:	70 1c       	adc	r7, r0
     14a:	70 1c       	adc	r7, r0
     14c:	70 1c       	adc	r7, r0
     14e:	70 1c       	adc	r7, r0
     150:	70 1c       	adc	r7, r0
     152:	70 1c       	adc	r7, r0
     154:	70 1c       	adc	r7, r0
     156:	70 1c       	adc	r7, r0
     158:	6c 1c       	adc	r6, r12
     15a:	70 1c       	adc	r7, r0
     15c:	70 1c       	adc	r7, r0
     15e:	70 1c       	adc	r7, r0
     160:	70 1c       	adc	r7, r0
     162:	70 1c       	adc	r7, r0
     164:	70 1c       	adc	r7, r0
     166:	70 1c       	adc	r7, r0
     168:	37 1c       	adc	r3, r7
     16a:	70 1c       	adc	r7, r0
     16c:	70 1c       	adc	r7, r0
     16e:	70 1c       	adc	r7, r0
     170:	70 1c       	adc	r7, r0
     172:	70 1c       	adc	r7, r0
     174:	70 1c       	adc	r7, r0
     176:	70 1c       	adc	r7, r0
     178:	70 1c       	adc	r7, r0
     17a:	70 1c       	adc	r7, r0
     17c:	70 1c       	adc	r7, r0
     17e:	70 1c       	adc	r7, r0
     180:	70 1c       	adc	r7, r0
     182:	70 1c       	adc	r7, r0
     184:	70 1c       	adc	r7, r0
     186:	70 1c       	adc	r7, r0
     188:	2b 1c       	adc	r2, r11
     18a:	70 1c       	adc	r7, r0
     18c:	70 1c       	adc	r7, r0
     18e:	70 1c       	adc	r7, r0
     190:	70 1c       	adc	r7, r0
     192:	70 1c       	adc	r7, r0
     194:	70 1c       	adc	r7, r0
     196:	70 1c       	adc	r7, r0
     198:	4f 1c       	adc	r4, r15

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0a ed       	ldi	r16, 0xDA	; 218
     19c:	16 e0       	ldi	r17, 0x06	; 6
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e0       	ldi	r31, 0x07	; 7
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	e6 d2       	rcall	.+1484   	; 0x798 <uxListRemove>
     1cc:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <uxCurrentNumberOfTasks>
     1d6:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	64 d2       	rcall	.+1224   	; 0x6b2 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	62 d2       	rcall	.+1220   	; 0x6b2 <vPortFree>
     1ee:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	a1 d3       	rcall	.+1858   	; 0x942 <vPortYield>
     200:	0e 94 bc 11 	call	0x2378	; 0x2378 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxCurrentTimerList>
     22a:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 4e 11 	call	0x229c	; 0x229c <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 c6 0c 	call	0x198c	; 0x198c <xTaskResumeAll>
     25c:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxCurrentTimerList>
     260:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	92 d2       	rcall	.+1316   	; 0x798 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 8f 10 	call	0x211e	; 0x211e <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 07 11 	call	0x220e	; 0x220e <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
     2d0:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
     2d4:	90 d6       	rcall	.+3360   	; 0xff6 <vQueueWaitForMessageRestricted>
     2d6:	0e 94 c6 0c 	call	0x198c	; 0x198c <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	31 d3       	rcall	.+1634   	; 0x942 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
     2e2:	0e 94 c6 0c 	call	0x198c	; 0x198c <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	4a d2       	rcall	.+1172   	; 0x798 <uxListRemove>
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 4e 11 	call	0x229c	; 0x229c <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__tablejump2__>
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 8f 10 	call	0x211e	; 0x211e <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 07 11 	call	0x220e	; 0x220e <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 8f 10 	call	0x211e	; 0x211e <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	77 d1       	rcall	.+750    	; 0x6b2 <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
     3d8:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
     3dc:	83 d5       	rcall	.+2822   	; 0xee4 <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
     3e4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <vTaskSuspendAll>
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 4e 11 	call	0x229c	; 0x229c <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
     3f6:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxOverflowTimerList>
     3fa:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	16 e0       	ldi	r17, 0x06	; 6
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	ec e4       	ldi	r30, 0x4C	; 76
     424:	f6 e4       	ldi	r31, 0x46	; 70
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a8 34       	cpi	r26, 0x48	; 72
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	28 e0       	ldi	r18, 0x08	; 8
     438:	a8 e4       	ldi	r26, 0x48	; 72
     43a:	b6 e0       	ldi	r27, 0x06	; 6
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	af 3a       	cpi	r26, 0xAF	; 175
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 d7 11 	call	0x23ae	; 0x23ae <main>
     44a:	0c 94 24 23 	jmp	0x4648	; 0x4648 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <lora_handler_task>:
void lora_handler_task( void *pvParameters )
{
	static e_LoRa_return_code_t rc;

	// Hardware reset of LoRaWAN transceiver
	lora_driver_reset_rn2483(1);
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 d6 18 	call	0x31ac	; 0x31ac <lora_driver_reset_rn2483>
	vTaskDelay(2);
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	0e 94 d6 18 	call	0x31ac	; 0x31ac <lora_driver_reset_rn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     464:	86 e9       	ldi	r24, 0x96	; 150
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <vTaskDelay>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
     46c:	0e 94 93 18 	call	0x3126	; 0x3126 <lora_driver_flush_buffers>
}

static void _lora_setup(void)
{
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     476:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <lora_driver_rn2483_factory_reset>
     47a:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	8d e3       	ldi	r24, 0x3D	; 61
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	0e 94 06 20 	call	0x400c	; 0x400c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     48e:	0e 94 15 1a 	call	0x342a	; 0x342a <lora_driver_configure_to_eu868>
     492:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	80 e5       	ldi	r24, 0x50	; 80
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	0e 94 06 20 	call	0x400c	; 0x400c <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     4a6:	8e e5       	ldi	r24, 0x5E	; 94
     4a8:	96 e0       	ldi	r25, 0x06	; 6
     4aa:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
     4ae:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     4b2:	ce e5       	ldi	r28, 0x5E	; 94
     4b4:	d6 e0       	ldi	r29, 0x06	; 6
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	89 e6       	ldi	r24, 0x69	; 105
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	0e 94 06 20 	call	0x400c	; 0x400c <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 17 19 	call	0x322e	; 0x322e <lora_driver_set_device_identifier>
     4d0:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	8d e7       	ldi	r24, 0x7D	; 125
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	0e 94 06 20 	call	0x400c	; 0x400c <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
     4e8:	ae 01       	movw	r20, r28
     4ea:	62 e9       	ldi	r22, 0x92	; 146
     4ec:	72 e0       	ldi	r23, 0x02	; 2
     4ee:	83 eb       	ldi	r24, 0xB3	; 179
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 ef 1a 	call	0x35de	; 0x35de <lora_driver_set_otaa_identity>
     4f6:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	82 e9       	ldi	r24, 0x92	; 146
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	83 eb       	ldi	r24, 0xB3	; 179
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	9f 93       	push	r25
     510:	8f 93       	push	r24
     512:	84 ec       	ldi	r24, 0xC4	; 196
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	0e 94 06 20 	call	0x400c	; 0x400c <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     51e:	0e 94 4a 19 	call	0x3294	; 0x3294 <lora_driver_save_mac>
     522:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     526:	9f 93       	push	r25
     528:	8f 93       	push	r24
     52a:	8a ef       	ldi	r24, 0xFA	; 250
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 06 20 	call	0x400c	; 0x400c <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     536:	8d b7       	in	r24, 0x3d	; 61
     538:	9e b7       	in	r25, 0x3e	; 62
     53a:	82 96       	adiw	r24, 0x22	; 34
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	9e bf       	out	0x3e, r25	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	8d bf       	out	0x3d, r24	; 61
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	0e 94 0a 1a 	call	0x3414	; 0x3414 <lora_driver_set_adaptive_data_rate>
     54c:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     550:	9f 93       	push	r25
     552:	8f 93       	push	r24
     554:	89 e0       	ldi	r24, 0x09	; 9
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	0e 94 06 20 	call	0x400c	; 0x400c <printf>
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	c5 e0       	ldi	r28, 0x05	; 5
     56a:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     56c:	0a e2       	ldi	r16, 0x2A	; 42
     56e:	13 e0       	ldi	r17, 0x03	; 3
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 50 19 	call	0x32a0	; 0x32a0 <lora_driver_join>
     576:	f8 2e       	mov	r15, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     578:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	df 93       	push	r29
     582:	cf 93       	push	r28
     584:	1f 93       	push	r17
     586:	0f 93       	push	r16
     588:	0e 94 06 20 	call	0x400c	; 0x400c <printf>

		if ( rc != LoRa_ACCEPTED)
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	f8 16       	cp	r15, r24
     59c:	89 f1       	breq	.+98     	; 0x600 <lora_handler_task+0x1b0>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     5a4:	8f e2       	ldi	r24, 0x2F	; 47
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <vTaskDelay>
     5ac:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     5ae:	01 f7       	brne	.-64     	; 0x570 <lora_handler_task+0x120>
     5b0:	20 c0       	rjmp	.+64     	; 0x5f2 <lora_handler_task+0x1a2>
		led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     5b2:	c7 d1       	rcall	.+910    	; 0x942 <vPortYield>
     5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <lora_handler_task+0x162>
	_uplink_payload.port_no = 2;


	for(;;)
	{
		vTaskDelay(pdMS_TO_TICKS(30000UL));
     5b6:	88 e1       	ldi	r24, 0x18	; 24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <vTaskDelay>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     5be:	aa 82       	std	Y+2, r10	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     5c0:	bb 82       	std	Y+3, r11	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     5c2:	cc 82       	std	Y+4, r12	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     5c4:	dd 82       	std	Y+5, r13	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     5c6:	ee 82       	std	Y+6, r14	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     5c8:	ff 82       	std	Y+7, r15	; 0x07

		led_short_puls(led_ST4);  // OPTIONAL
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <led_short_puls>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
     5d0:	be 01       	movw	r22, r28
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0e 94 73 19 	call	0x32e6	; 0x32e6 <lora_driver_sent_upload_message>
     5d8:	0e 94 10 1b 	call	0x3620	; 0x3620 <lora_driver_map_return_code_to_text>
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	1f 93       	push	r17
     5e2:	0f 93       	push	r16
     5e4:	0e 94 06 20 	call	0x400c	; 0x400c <printf>
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	e2 cf       	rjmp	.-60     	; 0x5b6 <lora_handler_task+0x166>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <led_fast_blink>
     5fe:	d9 cf       	rjmp	.-78     	; 0x5b2 <lora_handler_task+0x162>

	if (rc == LoRa_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <led_led_on>

	lora_driver_flush_buffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
     606:	e8 e4       	ldi	r30, 0x48	; 72
     608:	f6 e0       	ldi	r31, 0x06	; 6
     60a:	86 e0       	ldi	r24, 0x06	; 6
     60c:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	80 83       	st	Z, r24
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     612:	ef 01       	movw	r28, r30
     614:	0f 2e       	mov	r0, r31
     616:	f0 e3       	ldi	r31, 0x30	; 48
     618:	af 2e       	mov	r10, r31
     61a:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
     61c:	0f 2e       	mov	r0, r31
     61e:	f9 e3       	ldi	r31, 0x39	; 57
     620:	bf 2e       	mov	r11, r31
     622:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
     624:	68 94       	set
     626:	cc 24       	eor	r12, r12
     628:	c1 f8       	bld	r12, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
     62a:	0f 2e       	mov	r0, r31
     62c:	f3 ea       	ldi	r31, 0xA3	; 163
     62e:	df 2e       	mov	r13, r31
     630:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     632:	68 94       	set
     634:	ee 24       	eor	r14, r14
     636:	e2 f8       	bld	r14, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     638:	0f 2e       	mov	r0, r31
     63a:	fa e1       	ldi	r31, 0x1A	; 26
     63c:	ff 2e       	mov	r15, r31
     63e:	f0 2d       	mov	r31, r0

		led_short_puls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
     640:	0a e4       	ldi	r16, 0x4A	; 74
     642:	13 e0       	ldi	r17, 0x03	; 3
     644:	b8 cf       	rjmp	.-144    	; 0x5b6 <lora_handler_task+0x166>

00000646 <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
	xTaskCreate(
     64c:	e1 2c       	mov	r14, r1
     64e:	f1 2c       	mov	r15, r1
     650:	08 2f       	mov	r16, r24
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	48 e8       	ldi	r20, 0x88	; 136
     658:	51 e0       	ldi	r21, 0x01	; 1
     65a:	6f e5       	ldi	r22, 0x5F	; 95
     65c:	73 e0       	ldi	r23, 0x03	; 3
     65e:	88 e2       	ldi	r24, 0x28	; 40
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	88 d7       	rcall	.+3856   	; 0x1574 <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	08 95       	ret

0000066c <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     66c:	e8 e0       	ldi	r30, 0x08	; 8
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	90 81       	ld	r25, Z
     672:	90 7f       	andi	r25, 0xF0	; 240
     674:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     676:	90 81       	ld	r25, Z
     678:	8f 70       	andi	r24, 0x0F	; 15
     67a:	98 2b       	or	r25, r24
     67c:	90 83       	st	Z, r25
     67e:	08 95       	ret

00000680 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     680:	e8 e0       	ldi	r30, 0x08	; 8
     682:	f1 e0       	ldi	r31, 0x01	; 1
     684:	80 81       	ld	r24, Z
     686:	80 7f       	andi	r24, 0xF0	; 240
     688:	80 83       	st	Z, r24
     68a:	08 95       	ret

0000068c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     692:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     696:	ce 01       	movw	r24, r28
     698:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <malloc>
     69c:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     69e:	0e 94 c6 0c 	call	0x198c	; 0x198c <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     6a2:	20 97       	sbiw	r28, 0x00	; 0
     6a4:	11 f4       	brne	.+4      	; 0x6aa <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     6a6:	0e 94 bd 11 	call	0x237a	; 0x237a <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     6aa:	ce 01       	movw	r24, r28
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
    if( pv )
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	41 f0       	breq	.+16     	; 0x6ca <vPortFree+0x18>
     6ba:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     6bc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <vTaskSuspendAll>
        {
            free( pv );
     6c0:	ce 01       	movw	r24, r28
     6c2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     6c6:	0e 94 c6 0c 	call	0x198c	; 0x198c <xTaskResumeAll>
    }
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6d0:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6d2:	03 96       	adiw	r24, 0x03	; 3
     6d4:	92 83       	std	Z+2, r25	; 0x02
     6d6:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     6d8:	2f ef       	ldi	r18, 0xFF	; 255
     6da:	3f ef       	ldi	r19, 0xFF	; 255
     6dc:	34 83       	std	Z+4, r19	; 0x04
     6de:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e0:	96 83       	std	Z+6, r25	; 0x06
     6e2:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e4:	90 87       	std	Z+8, r25	; 0x08
     6e6:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6e8:	10 82       	st	Z, r1
     6ea:	08 95       	ret

000006ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     6ec:	fc 01       	movw	r30, r24
     6ee:	11 86       	std	Z+9, r1	; 0x09
     6f0:	10 86       	std	Z+8, r1	; 0x08
     6f2:	08 95       	ret

000006f4 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	9c 01       	movw	r18, r24
     6fa:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     6fc:	dc 01       	movw	r26, r24
     6fe:	11 96       	adiw	r26, 0x01	; 1
     700:	cd 91       	ld	r28, X+
     702:	dc 91       	ld	r29, X
     704:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     706:	d3 83       	std	Z+3, r29	; 0x03
     708:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     70a:	8c 81       	ldd	r24, Y+4	; 0x04
     70c:	9d 81       	ldd	r25, Y+5	; 0x05
     70e:	95 83       	std	Z+5, r25	; 0x05
     710:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     712:	8c 81       	ldd	r24, Y+4	; 0x04
     714:	9d 81       	ldd	r25, Y+5	; 0x05
     716:	dc 01       	movw	r26, r24
     718:	13 96       	adiw	r26, 0x03	; 3
     71a:	7c 93       	st	X, r23
     71c:	6e 93       	st	-X, r22
     71e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     720:	7d 83       	std	Y+5, r23	; 0x05
     722:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     724:	31 87       	std	Z+9, r19	; 0x09
     726:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     728:	f9 01       	movw	r30, r18
     72a:	80 81       	ld	r24, Z
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	80 83       	st	Z, r24
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     73c:	48 81       	ld	r20, Y
     73e:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     740:	4f 3f       	cpi	r20, 0xFF	; 255
     742:	2f ef       	ldi	r18, 0xFF	; 255
     744:	52 07       	cpc	r21, r18
     746:	21 f4       	brne	.+8      	; 0x750 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     748:	fc 01       	movw	r30, r24
     74a:	a7 81       	ldd	r26, Z+7	; 0x07
     74c:	b0 85       	ldd	r27, Z+8	; 0x08
     74e:	0d c0       	rjmp	.+26     	; 0x76a <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     750:	dc 01       	movw	r26, r24
     752:	13 96       	adiw	r26, 0x03	; 3
     754:	01 c0       	rjmp	.+2      	; 0x758 <vListInsert+0x22>
     756:	df 01       	movw	r26, r30
     758:	12 96       	adiw	r26, 0x02	; 2
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	13 97       	sbiw	r26, 0x03	; 3
     760:	20 81       	ld	r18, Z
     762:	31 81       	ldd	r19, Z+1	; 0x01
     764:	42 17       	cp	r20, r18
     766:	53 07       	cpc	r21, r19
     768:	b0 f7       	brcc	.-20     	; 0x756 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     76a:	12 96       	adiw	r26, 0x02	; 2
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	13 97       	sbiw	r26, 0x03	; 3
     772:	fb 83       	std	Y+3, r31	; 0x03
     774:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     776:	d5 83       	std	Z+5, r29	; 0x05
     778:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     77a:	bd 83       	std	Y+5, r27	; 0x05
     77c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     77e:	13 96       	adiw	r26, 0x03	; 3
     780:	dc 93       	st	X, r29
     782:	ce 93       	st	-X, r28
     784:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     786:	99 87       	std	Y+9, r25	; 0x09
     788:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     78a:	fc 01       	movw	r30, r24
     78c:	20 81       	ld	r18, Z
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	20 83       	st	Z, r18
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     79e:	a0 85       	ldd	r26, Z+8	; 0x08
     7a0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7a2:	c2 81       	ldd	r28, Z+2	; 0x02
     7a4:	d3 81       	ldd	r29, Z+3	; 0x03
     7a6:	84 81       	ldd	r24, Z+4	; 0x04
     7a8:	95 81       	ldd	r25, Z+5	; 0x05
     7aa:	9d 83       	std	Y+5, r25	; 0x05
     7ac:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7ae:	c4 81       	ldd	r28, Z+4	; 0x04
     7b0:	d5 81       	ldd	r29, Z+5	; 0x05
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	93 81       	ldd	r25, Z+3	; 0x03
     7b6:	9b 83       	std	Y+3, r25	; 0x03
     7b8:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     7ba:	11 96       	adiw	r26, 0x01	; 1
     7bc:	8d 91       	ld	r24, X+
     7be:	9c 91       	ld	r25, X
     7c0:	12 97       	sbiw	r26, 0x02	; 2
     7c2:	e8 17       	cp	r30, r24
     7c4:	f9 07       	cpc	r31, r25
     7c6:	31 f4       	brne	.+12     	; 0x7d4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     7c8:	84 81       	ldd	r24, Z+4	; 0x04
     7ca:	95 81       	ldd	r25, Z+5	; 0x05
     7cc:	12 96       	adiw	r26, 0x02	; 2
     7ce:	9c 93       	st	X, r25
     7d0:	8e 93       	st	-X, r24
     7d2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     7d4:	11 86       	std	Z+9, r1	; 0x09
     7d6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     7d8:	8c 91       	ld	r24, X
     7da:	81 50       	subi	r24, 0x01	; 1
     7dc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     7de:	8c 91       	ld	r24, X
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     7e6:	31 e1       	ldi	r19, 0x11	; 17
     7e8:	fc 01       	movw	r30, r24
     7ea:	30 83       	st	Z, r19
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	22 e2       	ldi	r18, 0x22	; 34
     7f0:	20 83       	st	Z, r18
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	a3 e3       	ldi	r26, 0x33	; 51
     7f6:	a0 83       	st	Z, r26
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	60 83       	st	Z, r22
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	70 83       	st	Z, r23
     800:	31 97       	sbiw	r30, 0x01	; 1
     802:	10 82       	st	Z, r1
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	10 82       	st	Z, r1
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	60 e8       	ldi	r22, 0x80	; 128
     80c:	60 83       	st	Z, r22
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	10 82       	st	Z, r1
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	10 82       	st	Z, r1
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	10 82       	st	Z, r1
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	62 e0       	ldi	r22, 0x02	; 2
     81e:	60 83       	st	Z, r22
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	63 e0       	ldi	r22, 0x03	; 3
     824:	60 83       	st	Z, r22
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	64 e0       	ldi	r22, 0x04	; 4
     82a:	60 83       	st	Z, r22
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	60 83       	st	Z, r22
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	66 e0       	ldi	r22, 0x06	; 6
     836:	60 83       	st	Z, r22
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	60 83       	st	Z, r22
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	68 e0       	ldi	r22, 0x08	; 8
     842:	60 83       	st	Z, r22
     844:	31 97       	sbiw	r30, 0x01	; 1
     846:	69 e0       	ldi	r22, 0x09	; 9
     848:	60 83       	st	Z, r22
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	60 e1       	ldi	r22, 0x10	; 16
     84e:	60 83       	st	Z, r22
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	30 83       	st	Z, r19
     854:	31 97       	sbiw	r30, 0x01	; 1
     856:	32 e1       	ldi	r19, 0x12	; 18
     858:	30 83       	st	Z, r19
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	33 e1       	ldi	r19, 0x13	; 19
     85e:	30 83       	st	Z, r19
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	34 e1       	ldi	r19, 0x14	; 20
     864:	30 83       	st	Z, r19
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	35 e1       	ldi	r19, 0x15	; 21
     86a:	30 83       	st	Z, r19
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	36 e1       	ldi	r19, 0x16	; 22
     870:	30 83       	st	Z, r19
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	37 e1       	ldi	r19, 0x17	; 23
     876:	30 83       	st	Z, r19
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	38 e1       	ldi	r19, 0x18	; 24
     87c:	30 83       	st	Z, r19
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	39 e1       	ldi	r19, 0x19	; 25
     882:	30 83       	st	Z, r19
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	30 e2       	ldi	r19, 0x20	; 32
     888:	30 83       	st	Z, r19
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	31 e2       	ldi	r19, 0x21	; 33
     88e:	30 83       	st	Z, r19
     890:	31 97       	sbiw	r30, 0x01	; 1
     892:	20 83       	st	Z, r18
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	23 e2       	ldi	r18, 0x23	; 35
     898:	20 83       	st	Z, r18
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	40 83       	st	Z, r20
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	50 83       	st	Z, r21
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	26 e2       	ldi	r18, 0x26	; 38
     8a6:	20 83       	st	Z, r18
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	27 e2       	ldi	r18, 0x27	; 39
     8ac:	20 83       	st	Z, r18
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	28 e2       	ldi	r18, 0x28	; 40
     8b2:	20 83       	st	Z, r18
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	29 e2       	ldi	r18, 0x29	; 41
     8b8:	20 83       	st	Z, r18
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	20 e3       	ldi	r18, 0x30	; 48
     8be:	20 83       	st	Z, r18
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	21 e3       	ldi	r18, 0x31	; 49
     8c4:	20 83       	st	Z, r18
     8c6:	89 97       	sbiw	r24, 0x29	; 41
     8c8:	08 95       	ret

000008ca <xPortStartScheduler>:
     8ca:	a8 95       	wdr
     8cc:	90 ec       	ldi	r25, 0xC0	; 192
     8ce:	88 e1       	ldi	r24, 0x18	; 24
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	a8 95       	wdr
     8d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8e0:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     8e4:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     8e8:	cd 91       	ld	r28, X+
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	dd 91       	ld	r29, X+
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	3f 90       	pop	r3
     92a:	2f 90       	pop	r2
     92c:	1f 90       	pop	r1
     92e:	0f 90       	pop	r0
     930:	0c be       	out	0x3c, r0	; 60
     932:	0f 90       	pop	r0
     934:	0b be       	out	0x3b, r0	; 59
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	08 95       	ret
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	08 95       	ret

00000942 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	0f 92       	push	r0
     94a:	0b b6       	in	r0, 0x3b	; 59
     94c:	0f 92       	push	r0
     94e:	0c b6       	in	r0, 0x3c	; 60
     950:	0f 92       	push	r0
     952:	1f 92       	push	r1
     954:	11 24       	eor	r1, r1
     956:	2f 92       	push	r2
     958:	3f 92       	push	r3
     95a:	4f 92       	push	r4
     95c:	5f 92       	push	r5
     95e:	6f 92       	push	r6
     960:	7f 92       	push	r7
     962:	8f 92       	push	r8
     964:	9f 92       	push	r9
     966:	af 92       	push	r10
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	2f 93       	push	r18
     978:	3f 93       	push	r19
     97a:	4f 93       	push	r20
     97c:	5f 93       	push	r21
     97e:	6f 93       	push	r22
     980:	7f 93       	push	r23
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
     992:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     996:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     99a:	0d b6       	in	r0, 0x3d	; 61
     99c:	0d 92       	st	X+, r0
     99e:	0e b6       	in	r0, 0x3e	; 62
     9a0:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     9a2:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     9a6:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     9aa:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     9ae:	cd 91       	ld	r28, X+
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	dd 91       	ld	r29, X+
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	ff 91       	pop	r31
     9b8:	ef 91       	pop	r30
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	bf 91       	pop	r27
     9c0:	af 91       	pop	r26
     9c2:	9f 91       	pop	r25
     9c4:	8f 91       	pop	r24
     9c6:	7f 91       	pop	r23
     9c8:	6f 91       	pop	r22
     9ca:	5f 91       	pop	r21
     9cc:	4f 91       	pop	r20
     9ce:	3f 91       	pop	r19
     9d0:	2f 91       	pop	r18
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	7f 90       	pop	r7
     9e8:	6f 90       	pop	r6
     9ea:	5f 90       	pop	r5
     9ec:	4f 90       	pop	r4
     9ee:	3f 90       	pop	r3
     9f0:	2f 90       	pop	r2
     9f2:	1f 90       	pop	r1
     9f4:	0f 90       	pop	r0
     9f6:	0c be       	out	0x3c, r0	; 60
     9f8:	0f 90       	pop	r0
     9fa:	0b be       	out	0x3b, r0	; 59
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a02:	08 95       	ret

00000a04 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	0f 92       	push	r0
     a0c:	0b b6       	in	r0, 0x3b	; 59
     a0e:	0f 92       	push	r0
     a10:	0c b6       	in	r0, 0x3c	; 60
     a12:	0f 92       	push	r0
     a14:	1f 92       	push	r1
     a16:	11 24       	eor	r1, r1
     a18:	2f 92       	push	r2
     a1a:	3f 92       	push	r3
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
     a54:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     a58:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     a5c:	0d b6       	in	r0, 0x3d	; 61
     a5e:	0d 92       	st	X+, r0
     a60:	0e b6       	in	r0, 0x3e	; 62
     a62:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     a64:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     a66:	d8 d6       	rcall	.+3504   	; 0x1818 <xTaskIncrementTick>
     a68:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a6a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     a6e:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
     a72:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
     a76:	cd 91       	ld	r28, X+
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	dd 91       	ld	r29, X+
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	9f 90       	pop	r9
     aac:	8f 90       	pop	r8
     aae:	7f 90       	pop	r7
     ab0:	6f 90       	pop	r6
     ab2:	5f 90       	pop	r5
     ab4:	4f 90       	pop	r4
     ab6:	3f 90       	pop	r3
     ab8:	2f 90       	pop	r2
     aba:	1f 90       	pop	r1
     abc:	0f 90       	pop	r0
     abe:	0c be       	out	0x3c, r0	; 60
     ac0:	0f 90       	pop	r0
     ac2:	0b be       	out	0x3b, r0	; 59
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     aca:	08 95       	ret

00000acc <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     acc:	9b df       	rcall	.-202    	; 0xa04 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ace:	18 95       	reti

00000ad0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	0f 92       	push	r0
     ad6:	fc 01       	movw	r30, r24
     ad8:	92 8d       	ldd	r25, Z+26	; 0x1a
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	91 11       	cpse	r25, r1
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	08 95       	ret

00000ae6 <prvCopyDataToQueue>:
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ec 01       	movw	r28, r24
     af0:	04 2f       	mov	r16, r20
     af2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     af4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     af6:	41 11       	cpse	r20, r1
     af8:	0c c0       	rjmp	.+24     	; 0xb12 <prvCopyDataToQueue+0x2c>
     afa:	88 81       	ld	r24, Y
     afc:	99 81       	ldd	r25, Y+1	; 0x01
     afe:	89 2b       	or	r24, r25
     b00:	09 f0       	breq	.+2      	; 0xb04 <prvCopyDataToQueue+0x1e>
     b02:	42 c0       	rjmp	.+132    	; 0xb88 <prvCopyDataToQueue+0xa2>
     b04:	8c 81       	ldd	r24, Y+4	; 0x04
     b06:	9d 81       	ldd	r25, Y+5	; 0x05
     b08:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <xTaskPriorityDisinherit>
     b0c:	1d 82       	std	Y+5, r1	; 0x05
     b0e:	1c 82       	std	Y+4, r1	; 0x04
     b10:	42 c0       	rjmp	.+132    	; 0xb96 <prvCopyDataToQueue+0xb0>
     b12:	01 11       	cpse	r16, r1
     b14:	17 c0       	rjmp	.+46     	; 0xb44 <prvCopyDataToQueue+0x5e>
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	9b 81       	ldd	r25, Y+3	; 0x03
     b1c:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <memcpy>
     b20:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	9b 81       	ldd	r25, Y+3	; 0x03
     b26:	82 0f       	add	r24, r18
     b28:	91 1d       	adc	r25, r1
     b2a:	9b 83       	std	Y+3, r25	; 0x03
     b2c:	8a 83       	std	Y+2, r24	; 0x02
     b2e:	2c 81       	ldd	r18, Y+4	; 0x04
     b30:	3d 81       	ldd	r19, Y+5	; 0x05
     b32:	82 17       	cp	r24, r18
     b34:	93 07       	cpc	r25, r19
     b36:	50 f1       	brcs	.+84     	; 0xb8c <prvCopyDataToQueue+0xa6>
     b38:	88 81       	ld	r24, Y
     b3a:	99 81       	ldd	r25, Y+1	; 0x01
     b3c:	9b 83       	std	Y+3, r25	; 0x03
     b3e:	8a 83       	std	Y+2, r24	; 0x02
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	29 c0       	rjmp	.+82     	; 0xb96 <prvCopyDataToQueue+0xb0>
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	8e 81       	ldd	r24, Y+6	; 0x06
     b48:	9f 81       	ldd	r25, Y+7	; 0x07
     b4a:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <memcpy>
     b4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	91 95       	neg	r25
     b54:	81 95       	neg	r24
     b56:	91 09       	sbc	r25, r1
     b58:	2e 81       	ldd	r18, Y+6	; 0x06
     b5a:	3f 81       	ldd	r19, Y+7	; 0x07
     b5c:	28 0f       	add	r18, r24
     b5e:	39 1f       	adc	r19, r25
     b60:	3f 83       	std	Y+7, r19	; 0x07
     b62:	2e 83       	std	Y+6, r18	; 0x06
     b64:	48 81       	ld	r20, Y
     b66:	59 81       	ldd	r21, Y+1	; 0x01
     b68:	24 17       	cp	r18, r20
     b6a:	35 07       	cpc	r19, r21
     b6c:	30 f4       	brcc	.+12     	; 0xb7a <prvCopyDataToQueue+0x94>
     b6e:	2c 81       	ldd	r18, Y+4	; 0x04
     b70:	3d 81       	ldd	r19, Y+5	; 0x05
     b72:	82 0f       	add	r24, r18
     b74:	93 1f       	adc	r25, r19
     b76:	9f 83       	std	Y+7, r25	; 0x07
     b78:	8e 83       	std	Y+6, r24	; 0x06
     b7a:	02 30       	cpi	r16, 0x02	; 2
     b7c:	49 f4       	brne	.+18     	; 0xb90 <prvCopyDataToQueue+0xaa>
     b7e:	11 23       	and	r17, r17
     b80:	49 f0       	breq	.+18     	; 0xb94 <prvCopyDataToQueue+0xae>
     b82:	11 50       	subi	r17, 0x01	; 1
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	07 c0       	rjmp	.+14     	; 0xb96 <prvCopyDataToQueue+0xb0>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <prvCopyDataToQueue+0xb0>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <prvCopyDataToQueue+0xb0>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <prvCopyDataToQueue+0xb0>
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	1f 5f       	subi	r17, 0xFF	; 255
     b98:	1a 8f       	std	Y+26, r17	; 0x1a
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret

00000ba4 <prvCopyDataFromQueue>:
     ba4:	fc 01       	movw	r30, r24
     ba6:	44 8d       	ldd	r20, Z+28	; 0x1c
     ba8:	44 23       	and	r20, r20
     baa:	a9 f0       	breq	.+42     	; 0xbd6 <prvCopyDataFromQueue+0x32>
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	26 81       	ldd	r18, Z+6	; 0x06
     bb0:	37 81       	ldd	r19, Z+7	; 0x07
     bb2:	24 0f       	add	r18, r20
     bb4:	35 1f       	adc	r19, r21
     bb6:	37 83       	std	Z+7, r19	; 0x07
     bb8:	26 83       	std	Z+6, r18	; 0x06
     bba:	84 81       	ldd	r24, Z+4	; 0x04
     bbc:	95 81       	ldd	r25, Z+5	; 0x05
     bbe:	28 17       	cp	r18, r24
     bc0:	39 07       	cpc	r19, r25
     bc2:	20 f0       	brcs	.+8      	; 0xbcc <prvCopyDataFromQueue+0x28>
     bc4:	80 81       	ld	r24, Z
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	97 83       	std	Z+7, r25	; 0x07
     bca:	86 83       	std	Z+6, r24	; 0x06
     bcc:	cb 01       	movw	r24, r22
     bce:	66 81       	ldd	r22, Z+6	; 0x06
     bd0:	77 81       	ldd	r23, Z+7	; 0x07
     bd2:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <memcpy>
     bd6:	08 95       	ret

00000bd8 <prvUnlockQueue>:
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	8c 01       	movw	r16, r24
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	0f 92       	push	r0
     bea:	fc 01       	movw	r30, r24
     bec:	c6 8d       	ldd	r28, Z+30	; 0x1e
     bee:	1c 16       	cp	r1, r28
     bf0:	ac f4       	brge	.+42     	; 0xc1c <prvUnlockQueue+0x44>
     bf2:	81 89       	ldd	r24, Z+17	; 0x11
     bf4:	81 11       	cpse	r24, r1
     bf6:	06 c0       	rjmp	.+12     	; 0xc04 <prvUnlockQueue+0x2c>
     bf8:	11 c0       	rjmp	.+34     	; 0xc1c <prvUnlockQueue+0x44>
     bfa:	f8 01       	movw	r30, r16
     bfc:	81 89       	ldd	r24, Z+17	; 0x11
     bfe:	81 11       	cpse	r24, r1
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <prvUnlockQueue+0x34>
     c02:	0c c0       	rjmp	.+24     	; 0xc1c <prvUnlockQueue+0x44>
     c04:	78 01       	movw	r14, r16
     c06:	f1 e1       	ldi	r31, 0x11	; 17
     c08:	ef 0e       	add	r14, r31
     c0a:	f1 1c       	adc	r15, r1
     c0c:	c7 01       	movw	r24, r14
     c0e:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <xTaskRemoveFromEventList>
     c12:	81 11       	cpse	r24, r1
     c14:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <vTaskMissedYield>
     c18:	c1 50       	subi	r28, 0x01	; 1
     c1a:	79 f7       	brne	.-34     	; 0xbfa <prvUnlockQueue+0x22>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	f8 01       	movw	r30, r16
     c20:	86 8f       	std	Z+30, r24	; 0x1e
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	0f 92       	push	r0
     c2c:	c5 8d       	ldd	r28, Z+29	; 0x1d
     c2e:	1c 16       	cp	r1, r28
     c30:	a4 f4       	brge	.+40     	; 0xc5a <prvUnlockQueue+0x82>
     c32:	80 85       	ldd	r24, Z+8	; 0x08
     c34:	81 11       	cpse	r24, r1
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <prvUnlockQueue+0x6c>
     c38:	10 c0       	rjmp	.+32     	; 0xc5a <prvUnlockQueue+0x82>
     c3a:	f8 01       	movw	r30, r16
     c3c:	80 85       	ldd	r24, Z+8	; 0x08
     c3e:	81 11       	cpse	r24, r1
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <prvUnlockQueue+0x74>
     c42:	0b c0       	rjmp	.+22     	; 0xc5a <prvUnlockQueue+0x82>
     c44:	78 01       	movw	r14, r16
     c46:	f8 e0       	ldi	r31, 0x08	; 8
     c48:	ef 0e       	add	r14, r31
     c4a:	f1 1c       	adc	r15, r1
     c4c:	c7 01       	movw	r24, r14
     c4e:	e3 d7       	rcall	.+4038   	; 0x1c16 <xTaskRemoveFromEventList>
     c50:	81 11       	cpse	r24, r1
     c52:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <vTaskMissedYield>
     c56:	c1 50       	subi	r28, 0x01	; 1
     c58:	81 f7       	brne	.-32     	; 0xc3a <prvUnlockQueue+0x62>
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	f8 01       	movw	r30, r16
     c5e:	85 8f       	std	Z+29, r24	; 0x1d
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	08 95       	ret

00000c70 <xQueueGenericReset>:
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	0f 92       	push	r0
     c7c:	e8 81       	ld	r30, Y
     c7e:	f9 81       	ldd	r31, Y+1	; 0x01
     c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c82:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	82 9f       	mul	r24, r18
     c8a:	a0 01       	movw	r20, r0
     c8c:	83 9f       	mul	r24, r19
     c8e:	50 0d       	add	r21, r0
     c90:	92 9f       	mul	r25, r18
     c92:	50 0d       	add	r21, r0
     c94:	11 24       	eor	r1, r1
     c96:	4e 0f       	add	r20, r30
     c98:	5f 1f       	adc	r21, r31
     c9a:	5d 83       	std	Y+5, r21	; 0x05
     c9c:	4c 83       	std	Y+4, r20	; 0x04
     c9e:	1a 8e       	std	Y+26, r1	; 0x1a
     ca0:	fb 83       	std	Y+3, r31	; 0x03
     ca2:	ea 83       	std	Y+2, r30	; 0x02
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	82 9f       	mul	r24, r18
     ca8:	a0 01       	movw	r20, r0
     caa:	83 9f       	mul	r24, r19
     cac:	50 0d       	add	r21, r0
     cae:	92 9f       	mul	r25, r18
     cb0:	50 0d       	add	r21, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	cf 01       	movw	r24, r30
     cb6:	84 0f       	add	r24, r20
     cb8:	95 1f       	adc	r25, r21
     cba:	9f 83       	std	Y+7, r25	; 0x07
     cbc:	8e 83       	std	Y+6, r24	; 0x06
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	8d 8f       	std	Y+29, r24	; 0x1d
     cc2:	8e 8f       	std	Y+30, r24	; 0x1e
     cc4:	61 11       	cpse	r22, r1
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <xQueueGenericReset+0x6c>
     cc8:	88 85       	ldd	r24, Y+8	; 0x08
     cca:	88 23       	and	r24, r24
     ccc:	69 f0       	breq	.+26     	; 0xce8 <xQueueGenericReset+0x78>
     cce:	ce 01       	movw	r24, r28
     cd0:	08 96       	adiw	r24, 0x08	; 8
     cd2:	a1 d7       	rcall	.+3906   	; 0x1c16 <xTaskRemoveFromEventList>
     cd4:	88 23       	and	r24, r24
     cd6:	41 f0       	breq	.+16     	; 0xce8 <xQueueGenericReset+0x78>
     cd8:	34 de       	rcall	.-920    	; 0x942 <vPortYield>
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <xQueueGenericReset+0x78>
     cdc:	ce 01       	movw	r24, r28
     cde:	08 96       	adiw	r24, 0x08	; 8
     ce0:	f7 dc       	rcall	.-1554   	; 0x6d0 <vListInitialise>
     ce2:	ce 01       	movw	r24, r28
     ce4:	41 96       	adiw	r24, 0x11	; 17
     ce6:	f4 dc       	rcall	.-1560   	; 0x6d0 <vListInitialise>
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <xQueueGenericCreate>:
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	08 2f       	mov	r16, r24
     d00:	16 2f       	mov	r17, r22
     d02:	f4 2e       	mov	r15, r20
     d04:	66 23       	and	r22, r22
     d06:	b9 f0       	breq	.+46     	; 0xd36 <xQueueGenericCreate+0x42>
     d08:	86 9f       	mul	r24, r22
     d0a:	c0 01       	movw	r24, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	81 96       	adiw	r24, 0x21	; 33
     d10:	bd dc       	rcall	.-1670   	; 0x68c <pvPortMalloc>
     d12:	ec 01       	movw	r28, r24
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	41 f4       	brne	.+16     	; 0xd28 <xQueueGenericCreate+0x34>
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <xQueueGenericCreate+0x4e>
     d1a:	0b 8f       	std	Y+27, r16	; 0x1b
     d1c:	1c 8f       	std	Y+28, r17	; 0x1c
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	ce 01       	movw	r24, r28
     d22:	a6 df       	rcall	.-180    	; 0xc70 <xQueueGenericReset>
     d24:	f8 a2       	std	Y+32, r15	; 0x20
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <xQueueGenericCreate+0x4e>
     d28:	81 96       	adiw	r24, 0x21	; 33
     d2a:	99 83       	std	Y+1, r25	; 0x01
     d2c:	88 83       	st	Y, r24
     d2e:	f5 cf       	rjmp	.-22     	; 0xd1a <xQueueGenericCreate+0x26>
     d30:	d9 83       	std	Y+1, r29	; 0x01
     d32:	c8 83       	st	Y, r28
     d34:	f2 cf       	rjmp	.-28     	; 0xd1a <xQueueGenericCreate+0x26>
     d36:	81 e2       	ldi	r24, 0x21	; 33
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a8 dc       	rcall	.-1712   	; 0x68c <pvPortMalloc>
     d3c:	ec 01       	movw	r28, r24
     d3e:	89 2b       	or	r24, r25
     d40:	b9 f7       	brne	.-18     	; 0xd30 <xQueueGenericCreate+0x3c>
     d42:	ce 01       	movw	r24, r28
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	08 95       	ret

00000d50 <xQueueGenericSend>:
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	00 d0       	rcall	.+0      	; 0xd68 <xQueueGenericSend+0x18>
     d68:	1f 92       	push	r1
     d6a:	1f 92       	push	r1
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	8c 01       	movw	r16, r24
     d72:	6b 01       	movw	r12, r22
     d74:	5d 83       	std	Y+5, r21	; 0x05
     d76:	4c 83       	std	Y+4, r20	; 0x04
     d78:	a2 2e       	mov	r10, r18
     d7a:	b1 2c       	mov	r11, r1
     d7c:	99 24       	eor	r9, r9
     d7e:	93 94       	inc	r9
     d80:	7c 01       	movw	r14, r24
     d82:	88 e0       	ldi	r24, 0x08	; 8
     d84:	e8 0e       	add	r14, r24
     d86:	f1 1c       	adc	r15, r1
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	0f 92       	push	r0
     d8e:	f8 01       	movw	r30, r16
     d90:	92 8d       	ldd	r25, Z+26	; 0x1a
     d92:	83 8d       	ldd	r24, Z+27	; 0x1b
     d94:	98 17       	cp	r25, r24
     d96:	18 f0       	brcs	.+6      	; 0xd9e <xQueueGenericSend+0x4e>
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	af 12       	cpse	r10, r31
     d9c:	15 c0       	rjmp	.+42     	; 0xdc8 <xQueueGenericSend+0x78>
     d9e:	4a 2d       	mov	r20, r10
     da0:	b6 01       	movw	r22, r12
     da2:	c8 01       	movw	r24, r16
     da4:	a0 de       	rcall	.-704    	; 0xae6 <prvCopyDataToQueue>
     da6:	f8 01       	movw	r30, r16
     da8:	91 89       	ldd	r25, Z+17	; 0x11
     daa:	99 23       	and	r25, r25
     dac:	39 f0       	breq	.+14     	; 0xdbc <xQueueGenericSend+0x6c>
     dae:	c8 01       	movw	r24, r16
     db0:	41 96       	adiw	r24, 0x11	; 17
     db2:	31 d7       	rcall	.+3682   	; 0x1c16 <xTaskRemoveFromEventList>
     db4:	88 23       	and	r24, r24
     db6:	21 f0       	breq	.+8      	; 0xdc0 <xQueueGenericSend+0x70>
     db8:	c4 dd       	rcall	.-1144   	; 0x942 <vPortYield>
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <xQueueGenericSend+0x70>
     dbc:	81 11       	cpse	r24, r1
     dbe:	c1 dd       	rcall	.-1150   	; 0x942 <vPortYield>
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	45 c0       	rjmp	.+138    	; 0xe52 <xQueueGenericSend+0x102>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	89 2b       	or	r24, r25
     dce:	21 f4       	brne	.+8      	; 0xdd8 <xQueueGenericSend+0x88>
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	3d c0       	rjmp	.+122    	; 0xe52 <xQueueGenericSend+0x102>
     dd8:	b1 10       	cpse	r11, r1
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <xQueueGenericSend+0x94>
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	62 d7       	rcall	.+3780   	; 0x1ca6 <vTaskInternalSetTimeOutState>
     de2:	b9 2c       	mov	r11, r9
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	07 d5       	rcall	.+2574   	; 0x17f8 <vTaskSuspendAll>
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	0f 92       	push	r0
     df0:	f8 01       	movw	r30, r16
     df2:	85 8d       	ldd	r24, Z+29	; 0x1d
     df4:	8f 3f       	cpi	r24, 0xFF	; 255
     df6:	09 f4       	brne	.+2      	; 0xdfa <xQueueGenericSend+0xaa>
     df8:	15 8e       	std	Z+29, r1	; 0x1d
     dfa:	f8 01       	movw	r30, r16
     dfc:	86 8d       	ldd	r24, Z+30	; 0x1e
     dfe:	8f 3f       	cpi	r24, 0xFF	; 255
     e00:	09 f4       	brne	.+2      	; 0xe04 <xQueueGenericSend+0xb4>
     e02:	16 8e       	std	Z+30, r1	; 0x1e
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	be 01       	movw	r22, r28
     e0a:	6c 5f       	subi	r22, 0xFC	; 252
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	54 d7       	rcall	.+3752   	; 0x1cbc <xTaskCheckForTimeOut>
     e14:	81 11       	cpse	r24, r1
     e16:	19 c0       	rjmp	.+50     	; 0xe4a <xQueueGenericSend+0xfa>
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	0f 92       	push	r0
     e1e:	f8 01       	movw	r30, r16
     e20:	92 8d       	ldd	r25, Z+26	; 0x1a
     e22:	83 8d       	ldd	r24, Z+27	; 0x1b
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	98 13       	cpse	r25, r24
     e2a:	0b c0       	rjmp	.+22     	; 0xe42 <xQueueGenericSend+0xf2>
     e2c:	6c 81       	ldd	r22, Y+4	; 0x04
     e2e:	7d 81       	ldd	r23, Y+5	; 0x05
     e30:	c7 01       	movw	r24, r14
     e32:	c8 d6       	rcall	.+3472   	; 0x1bc4 <vTaskPlaceOnEventList>
     e34:	c8 01       	movw	r24, r16
     e36:	d0 de       	rcall	.-608    	; 0xbd8 <prvUnlockQueue>
     e38:	a9 d5       	rcall	.+2898   	; 0x198c <xTaskResumeAll>
     e3a:	81 11       	cpse	r24, r1
     e3c:	a5 cf       	rjmp	.-182    	; 0xd88 <xQueueGenericSend+0x38>
     e3e:	81 dd       	rcall	.-1278   	; 0x942 <vPortYield>
     e40:	a3 cf       	rjmp	.-186    	; 0xd88 <xQueueGenericSend+0x38>
     e42:	c8 01       	movw	r24, r16
     e44:	c9 de       	rcall	.-622    	; 0xbd8 <prvUnlockQueue>
     e46:	a2 d5       	rcall	.+2884   	; 0x198c <xTaskResumeAll>
     e48:	9f cf       	rjmp	.-194    	; 0xd88 <xQueueGenericSend+0x38>
     e4a:	c8 01       	movw	r24, r16
     e4c:	c5 de       	rcall	.-630    	; 0xbd8 <prvUnlockQueue>
     e4e:	9e d5       	rcall	.+2876   	; 0x198c <xTaskResumeAll>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	08 95       	ret

00000e74 <xQueueGenericSendFromISR>:
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	8a 01       	movw	r16, r20
     e82:	fc 01       	movw	r30, r24
     e84:	52 8d       	ldd	r21, Z+26	; 0x1a
     e86:	33 8d       	ldd	r19, Z+27	; 0x1b
     e88:	53 17       	cp	r21, r19
     e8a:	10 f0       	brcs	.+4      	; 0xe90 <xQueueGenericSendFromISR+0x1c>
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	e1 f4       	brne	.+56     	; 0xec8 <xQueueGenericSendFromISR+0x54>
     e90:	42 2f       	mov	r20, r18
     e92:	78 01       	movw	r14, r16
     e94:	ec 01       	movw	r28, r24
     e96:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e98:	26 de       	rcall	.-948    	; 0xae6 <prvCopyDataToQueue>
     e9a:	1f 3f       	cpi	r17, 0xFF	; 255
     e9c:	79 f4       	brne	.+30     	; 0xebc <xQueueGenericSendFromISR+0x48>
     e9e:	89 89       	ldd	r24, Y+17	; 0x11
     ea0:	88 23       	and	r24, r24
     ea2:	a1 f0       	breq	.+40     	; 0xecc <xQueueGenericSendFromISR+0x58>
     ea4:	ce 01       	movw	r24, r28
     ea6:	41 96       	adiw	r24, 0x11	; 17
     ea8:	b6 d6       	rcall	.+3436   	; 0x1c16 <xTaskRemoveFromEventList>
     eaa:	88 23       	and	r24, r24
     eac:	89 f0       	breq	.+34     	; 0xed0 <xQueueGenericSendFromISR+0x5c>
     eae:	e1 14       	cp	r14, r1
     eb0:	f1 04       	cpc	r15, r1
     eb2:	81 f0       	breq	.+32     	; 0xed4 <xQueueGenericSendFromISR+0x60>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	f7 01       	movw	r30, r14
     eb8:	80 83       	st	Z, r24
     eba:	0d c0       	rjmp	.+26     	; 0xed6 <xQueueGenericSendFromISR+0x62>
     ebc:	ff 24       	eor	r15, r15
     ebe:	f3 94       	inc	r15
     ec0:	f1 0e       	add	r15, r17
     ec2:	fe 8e       	std	Y+30, r15	; 0x1e
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	07 c0       	rjmp	.+14     	; 0xed6 <xQueueGenericSendFromISR+0x62>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <xQueueGenericSendFromISR+0x62>
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <xQueueGenericSendFromISR+0x62>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <xQueueGenericSendFromISR+0x62>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	08 95       	ret

00000ee4 <xQueueReceive>:
     ee4:	9f 92       	push	r9
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	00 d0       	rcall	.+0      	; 0xefc <xQueueReceive+0x18>
     efc:	1f 92       	push	r1
     efe:	1f 92       	push	r1
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	8c 01       	movw	r16, r24
     f06:	5b 01       	movw	r10, r22
     f08:	5d 83       	std	Y+5, r21	; 0x05
     f0a:	4c 83       	std	Y+4, r20	; 0x04
     f0c:	e1 2c       	mov	r14, r1
     f0e:	99 24       	eor	r9, r9
     f10:	93 94       	inc	r9
     f12:	6c 01       	movw	r12, r24
     f14:	81 e1       	ldi	r24, 0x11	; 17
     f16:	c8 0e       	add	r12, r24
     f18:	d1 1c       	adc	r13, r1
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	0f 92       	push	r0
     f20:	f8 01       	movw	r30, r16
     f22:	f2 8c       	ldd	r15, Z+26	; 0x1a
     f24:	ff 20       	and	r15, r15
     f26:	91 f0       	breq	.+36     	; 0xf4c <xQueueReceive+0x68>
     f28:	b5 01       	movw	r22, r10
     f2a:	c8 01       	movw	r24, r16
     f2c:	3b de       	rcall	.-906    	; 0xba4 <prvCopyDataFromQueue>
     f2e:	fa 94       	dec	r15
     f30:	f8 01       	movw	r30, r16
     f32:	f2 8e       	std	Z+26, r15	; 0x1a
     f34:	80 85       	ldd	r24, Z+8	; 0x08
     f36:	88 23       	and	r24, r24
     f38:	29 f0       	breq	.+10     	; 0xf44 <xQueueReceive+0x60>
     f3a:	c8 01       	movw	r24, r16
     f3c:	08 96       	adiw	r24, 0x08	; 8
     f3e:	6b d6       	rcall	.+3286   	; 0x1c16 <xTaskRemoveFromEventList>
     f40:	81 11       	cpse	r24, r1
     f42:	ff dc       	rcall	.-1538   	; 0x942 <vPortYield>
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	44 c0       	rjmp	.+136    	; 0xfd4 <xQueueReceive+0xf0>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	89 2b       	or	r24, r25
     f52:	21 f4       	brne	.+8      	; 0xf5c <xQueueReceive+0x78>
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	3c c0       	rjmp	.+120    	; 0xfd4 <xQueueReceive+0xf0>
     f5c:	e1 10       	cpse	r14, r1
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <xQueueReceive+0x84>
     f60:	ce 01       	movw	r24, r28
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	a0 d6       	rcall	.+3392   	; 0x1ca6 <vTaskInternalSetTimeOutState>
     f66:	e9 2c       	mov	r14, r9
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	45 d4       	rcall	.+2186   	; 0x17f8 <vTaskSuspendAll>
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	0f 92       	push	r0
     f74:	f8 01       	movw	r30, r16
     f76:	85 8d       	ldd	r24, Z+29	; 0x1d
     f78:	8f 3f       	cpi	r24, 0xFF	; 255
     f7a:	09 f4       	brne	.+2      	; 0xf7e <xQueueReceive+0x9a>
     f7c:	15 8e       	std	Z+29, r1	; 0x1d
     f7e:	f8 01       	movw	r30, r16
     f80:	86 8d       	ldd	r24, Z+30	; 0x1e
     f82:	8f 3f       	cpi	r24, 0xFF	; 255
     f84:	09 f4       	brne	.+2      	; 0xf88 <xQueueReceive+0xa4>
     f86:	16 8e       	std	Z+30, r1	; 0x1e
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	be 01       	movw	r22, r28
     f8e:	6c 5f       	subi	r22, 0xFC	; 252
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	92 d6       	rcall	.+3364   	; 0x1cbc <xTaskCheckForTimeOut>
     f98:	81 11       	cpse	r24, r1
     f9a:	13 c0       	rjmp	.+38     	; 0xfc2 <xQueueReceive+0xde>
     f9c:	c8 01       	movw	r24, r16
     f9e:	98 dd       	rcall	.-1232   	; 0xad0 <prvIsQueueEmpty>
     fa0:	88 23       	and	r24, r24
     fa2:	59 f0       	breq	.+22     	; 0xfba <xQueueReceive+0xd6>
     fa4:	6c 81       	ldd	r22, Y+4	; 0x04
     fa6:	7d 81       	ldd	r23, Y+5	; 0x05
     fa8:	c6 01       	movw	r24, r12
     faa:	0c d6       	rcall	.+3096   	; 0x1bc4 <vTaskPlaceOnEventList>
     fac:	c8 01       	movw	r24, r16
     fae:	14 de       	rcall	.-984    	; 0xbd8 <prvUnlockQueue>
     fb0:	ed d4       	rcall	.+2522   	; 0x198c <xTaskResumeAll>
     fb2:	81 11       	cpse	r24, r1
     fb4:	b2 cf       	rjmp	.-156    	; 0xf1a <xQueueReceive+0x36>
     fb6:	c5 dc       	rcall	.-1654   	; 0x942 <vPortYield>
     fb8:	b0 cf       	rjmp	.-160    	; 0xf1a <xQueueReceive+0x36>
     fba:	c8 01       	movw	r24, r16
     fbc:	0d de       	rcall	.-998    	; 0xbd8 <prvUnlockQueue>
     fbe:	e6 d4       	rcall	.+2508   	; 0x198c <xTaskResumeAll>
     fc0:	ac cf       	rjmp	.-168    	; 0xf1a <xQueueReceive+0x36>
     fc2:	c8 01       	movw	r24, r16
     fc4:	09 de       	rcall	.-1006   	; 0xbd8 <prvUnlockQueue>
     fc6:	e2 d4       	rcall	.+2500   	; 0x198c <xTaskResumeAll>
     fc8:	c8 01       	movw	r24, r16
     fca:	82 dd       	rcall	.-1276   	; 0xad0 <prvIsQueueEmpty>
     fcc:	88 23       	and	r24, r24
     fce:	09 f4       	brne	.+2      	; 0xfd2 <xQueueReceive+0xee>
     fd0:	a4 cf       	rjmp	.-184    	; 0xf1a <xQueueReceive+0x36>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	9f 90       	pop	r9
     ff4:	08 95       	ret

00000ff6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	0f 92       	push	r0
    1002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1004:	8f 3f       	cpi	r24, 0xFF	; 255
    1006:	09 f4       	brne	.+2      	; 0x100a <vQueueWaitForMessageRestricted+0x14>
    1008:	1d 8e       	std	Y+29, r1	; 0x1d
    100a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    100c:	8f 3f       	cpi	r24, 0xFF	; 255
    100e:	09 f4       	brne	.+2      	; 0x1012 <vQueueWaitForMessageRestricted+0x1c>
    1010:	1e 8e       	std	Y+30, r1	; 0x1e
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1016:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1018:	81 11       	cpse	r24, r1
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    101c:	ce 01       	movw	r24, r28
    101e:	41 96       	adiw	r24, 0x11	; 17
    1020:	e2 d5       	rcall	.+3012   	; 0x1be6 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1022:	ce 01       	movw	r24, r28
    1024:	d9 dd       	rcall	.-1102   	; 0xbd8 <prvUnlockQueue>
    }
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    102c:	fc 01       	movw	r30, r24
    102e:	44 81       	ldd	r20, Z+4	; 0x04
    1030:	55 81       	ldd	r21, Z+5	; 0x05
    1032:	22 81       	ldd	r18, Z+2	; 0x02
    1034:	33 81       	ldd	r19, Z+3	; 0x03
    1036:	24 0f       	add	r18, r20
    1038:	35 1f       	adc	r19, r21
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	b9 01       	movw	r22, r18
    1040:	68 1b       	sub	r22, r24
    1042:	79 0b       	sbc	r23, r25
    1044:	cb 01       	movw	r24, r22
    1046:	64 17       	cp	r22, r20
    1048:	75 07       	cpc	r23, r21
    104a:	10 f0       	brcs	.+4      	; 0x1050 <prvBytesInBuffer+0x24>
    104c:	84 1b       	sub	r24, r20
    104e:	95 0b       	sbc	r25, r21
    1050:	08 95       	ret

00001052 <prvWriteBytesToBuffer>:
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	6c 01       	movw	r12, r24
    1068:	5b 01       	movw	r10, r22
    106a:	7a 01       	movw	r14, r20
    106c:	fc 01       	movw	r30, r24
    106e:	c2 81       	ldd	r28, Z+2	; 0x02
    1070:	d3 81       	ldd	r29, Z+3	; 0x03
    1072:	04 81       	ldd	r16, Z+4	; 0x04
    1074:	15 81       	ldd	r17, Z+5	; 0x05
    1076:	0c 1b       	sub	r16, r28
    1078:	1d 0b       	sbc	r17, r29
    107a:	40 17       	cp	r20, r16
    107c:	51 07       	cpc	r21, r17
    107e:	08 f4       	brcc	.+2      	; 0x1082 <prvWriteBytesToBuffer+0x30>
    1080:	8a 01       	movw	r16, r20
    1082:	f6 01       	movw	r30, r12
    1084:	84 85       	ldd	r24, Z+12	; 0x0c
    1086:	95 85       	ldd	r25, Z+13	; 0x0d
    1088:	a8 01       	movw	r20, r16
    108a:	b5 01       	movw	r22, r10
    108c:	8c 0f       	add	r24, r28
    108e:	9d 1f       	adc	r25, r29
    1090:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <memcpy>
    1094:	0e 15       	cp	r16, r14
    1096:	1f 05       	cpc	r17, r15
    1098:	58 f4       	brcc	.+22     	; 0x10b0 <prvWriteBytesToBuffer+0x5e>
    109a:	a7 01       	movw	r20, r14
    109c:	40 1b       	sub	r20, r16
    109e:	51 0b       	sbc	r21, r17
    10a0:	b5 01       	movw	r22, r10
    10a2:	60 0f       	add	r22, r16
    10a4:	71 1f       	adc	r23, r17
    10a6:	f6 01       	movw	r30, r12
    10a8:	84 85       	ldd	r24, Z+12	; 0x0c
    10aa:	95 85       	ldd	r25, Z+13	; 0x0d
    10ac:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <memcpy>
    10b0:	ce 01       	movw	r24, r28
    10b2:	8e 0d       	add	r24, r14
    10b4:	9f 1d       	adc	r25, r15
    10b6:	f6 01       	movw	r30, r12
    10b8:	24 81       	ldd	r18, Z+4	; 0x04
    10ba:	35 81       	ldd	r19, Z+5	; 0x05
    10bc:	82 17       	cp	r24, r18
    10be:	93 07       	cpc	r25, r19
    10c0:	10 f0       	brcs	.+4      	; 0x10c6 <prvWriteBytesToBuffer+0x74>
    10c2:	82 1b       	sub	r24, r18
    10c4:	93 0b       	sbc	r25, r19
    10c6:	f6 01       	movw	r30, r12
    10c8:	93 83       	std	Z+3, r25	; 0x03
    10ca:	82 83       	std	Z+2, r24	; 0x02
    10cc:	c7 01       	movw	r24, r14
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	df 90       	pop	r13
    10dc:	cf 90       	pop	r12
    10de:	bf 90       	pop	r11
    10e0:	af 90       	pop	r10
    10e2:	08 95       	ret

000010e4 <prvWriteMessageToBuffer>:
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	1f 92       	push	r1
    10f6:	1f 92       	push	r1
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	5a 83       	std	Y+2, r21	; 0x02
    10fe:	49 83       	std	Y+1, r20	; 0x01
    1100:	21 15       	cp	r18, r1
    1102:	31 05       	cpc	r19, r1
    1104:	c9 f0       	breq	.+50     	; 0x1138 <prvWriteMessageToBuffer+0x54>
    1106:	6b 01       	movw	r12, r22
    1108:	7c 01       	movw	r14, r24
    110a:	fc 01       	movw	r30, r24
    110c:	86 85       	ldd	r24, Z+14	; 0x0e
    110e:	80 fd       	sbrc	r24, 0
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <prvWriteMessageToBuffer+0x3e>
    1112:	ca 01       	movw	r24, r20
    1114:	24 17       	cp	r18, r20
    1116:	35 07       	cpc	r19, r21
    1118:	08 f4       	brcc	.+2      	; 0x111c <prvWriteMessageToBuffer+0x38>
    111a:	c9 01       	movw	r24, r18
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <prvWriteMessageToBuffer+0x60>
    1122:	20 17       	cp	r18, r16
    1124:	31 07       	cpc	r19, r17
    1126:	58 f0       	brcs	.+22     	; 0x113e <prvWriteMessageToBuffer+0x5a>
    1128:	42 e0       	ldi	r20, 0x02	; 2
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	be 01       	movw	r22, r28
    112e:	6f 5f       	subi	r22, 0xFF	; 255
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	c7 01       	movw	r24, r14
    1134:	8e df       	rcall	.-228    	; 0x1052 <prvWriteBytesToBuffer>
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <prvWriteMessageToBuffer+0x60>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	08 c0       	rjmp	.+16     	; 0x114e <prvWriteMessageToBuffer+0x6a>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	05 c0       	rjmp	.+10     	; 0x114e <prvWriteMessageToBuffer+0x6a>
    1144:	49 81       	ldd	r20, Y+1	; 0x01
    1146:	5a 81       	ldd	r21, Y+2	; 0x02
    1148:	b6 01       	movw	r22, r12
    114a:	c7 01       	movw	r24, r14
    114c:	82 df       	rcall	.-252    	; 0x1052 <prvWriteBytesToBuffer>
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	08 95       	ret

00001164 <prvReadBytesFromBuffer>:
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	7c 01       	movw	r14, r24
    117a:	5b 01       	movw	r10, r22
    117c:	e9 01       	movw	r28, r18
    117e:	42 17       	cp	r20, r18
    1180:	53 07       	cpc	r21, r19
    1182:	08 f4       	brcc	.+2      	; 0x1186 <prvReadBytesFromBuffer+0x22>
    1184:	ea 01       	movw	r28, r20
    1186:	20 97       	sbiw	r28, 0x00	; 0
    1188:	79 f1       	breq	.+94     	; 0x11e8 <prvReadBytesFromBuffer+0x84>
    118a:	f7 01       	movw	r30, r14
    118c:	00 81       	ld	r16, Z
    118e:	11 81       	ldd	r17, Z+1	; 0x01
    1190:	c4 80       	ldd	r12, Z+4	; 0x04
    1192:	d5 80       	ldd	r13, Z+5	; 0x05
    1194:	c0 1a       	sub	r12, r16
    1196:	d1 0a       	sbc	r13, r17
    1198:	cc 15       	cp	r28, r12
    119a:	dd 05       	cpc	r29, r13
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <prvReadBytesFromBuffer+0x3c>
    119e:	6e 01       	movw	r12, r28
    11a0:	f7 01       	movw	r30, r14
    11a2:	64 85       	ldd	r22, Z+12	; 0x0c
    11a4:	75 85       	ldd	r23, Z+13	; 0x0d
    11a6:	60 0f       	add	r22, r16
    11a8:	71 1f       	adc	r23, r17
    11aa:	a6 01       	movw	r20, r12
    11ac:	c5 01       	movw	r24, r10
    11ae:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <memcpy>
    11b2:	cc 16       	cp	r12, r28
    11b4:	dd 06       	cpc	r13, r29
    11b6:	58 f4       	brcc	.+22     	; 0x11ce <prvReadBytesFromBuffer+0x6a>
    11b8:	ae 01       	movw	r20, r28
    11ba:	4c 19       	sub	r20, r12
    11bc:	5d 09       	sbc	r21, r13
    11be:	f7 01       	movw	r30, r14
    11c0:	64 85       	ldd	r22, Z+12	; 0x0c
    11c2:	75 85       	ldd	r23, Z+13	; 0x0d
    11c4:	c5 01       	movw	r24, r10
    11c6:	8c 0d       	add	r24, r12
    11c8:	9d 1d       	adc	r25, r13
    11ca:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <memcpy>
    11ce:	0c 0f       	add	r16, r28
    11d0:	1d 1f       	adc	r17, r29
    11d2:	f7 01       	movw	r30, r14
    11d4:	84 81       	ldd	r24, Z+4	; 0x04
    11d6:	95 81       	ldd	r25, Z+5	; 0x05
    11d8:	08 17       	cp	r16, r24
    11da:	19 07       	cpc	r17, r25
    11dc:	10 f0       	brcs	.+4      	; 0x11e2 <prvReadBytesFromBuffer+0x7e>
    11de:	08 1b       	sub	r16, r24
    11e0:	19 0b       	sbc	r17, r25
    11e2:	f7 01       	movw	r30, r14
    11e4:	11 83       	std	Z+1, r17	; 0x01
    11e6:	00 83       	st	Z, r16
    11e8:	ce 01       	movw	r24, r28
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	bf 90       	pop	r11
    11fc:	af 90       	pop	r10
    11fe:	08 95       	ret

00001200 <xStreamBufferGenericCreate>:
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	eb 01       	movw	r28, r22
    120c:	11 e0       	ldi	r17, 0x01	; 1
    120e:	41 30       	cpi	r20, 0x01	; 1
    1210:	09 f0       	breq	.+2      	; 0x1214 <xStreamBufferGenericCreate+0x14>
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	20 97       	sbiw	r28, 0x00	; 0
    1216:	11 f4       	brne	.+4      	; 0x121c <xStreamBufferGenericCreate+0x1c>
    1218:	c1 e0       	ldi	r28, 0x01	; 1
    121a:	d0 e0       	ldi	r29, 0x00	; 0
    121c:	7c 01       	movw	r14, r24
    121e:	2f ef       	ldi	r18, 0xFF	; 255
    1220:	e2 1a       	sub	r14, r18
    1222:	f2 0a       	sbc	r15, r18
    1224:	41 96       	adiw	r24, 0x11	; 17
    1226:	32 da       	rcall	.-2972   	; 0x68c <pvPortMalloc>
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	81 f0       	breq	.+32     	; 0x124c <xStreamBufferGenericCreate+0x4c>
    122c:	20 e1       	ldi	r18, 0x10	; 16
    122e:	fc 01       	movw	r30, r24
    1230:	11 92       	st	Z+, r1
    1232:	2a 95       	dec	r18
    1234:	e9 f7       	brne	.-6      	; 0x1230 <xStreamBufferGenericCreate+0x30>
    1236:	9c 01       	movw	r18, r24
    1238:	20 5f       	subi	r18, 0xF0	; 240
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	fc 01       	movw	r30, r24
    123e:	35 87       	std	Z+13, r19	; 0x0d
    1240:	24 87       	std	Z+12, r18	; 0x0c
    1242:	f5 82       	std	Z+5, r15	; 0x05
    1244:	e4 82       	std	Z+4, r14	; 0x04
    1246:	d7 83       	std	Z+7, r29	; 0x07
    1248:	c6 83       	std	Z+6, r28	; 0x06
    124a:	16 87       	std	Z+14, r17	; 0x0e
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	08 95       	ret

00001258 <xStreamBufferReset>:
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	fc 01       	movw	r30, r24
    125e:	27 85       	ldd	r18, Z+15	; 0x0f
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	0f 92       	push	r0
    1266:	80 85       	ldd	r24, Z+8	; 0x08
    1268:	91 85       	ldd	r25, Z+9	; 0x09
    126a:	89 2b       	or	r24, r25
    126c:	d1 f4       	brne	.+52     	; 0x12a2 <xStreamBufferReset+0x4a>
    126e:	82 85       	ldd	r24, Z+10	; 0x0a
    1270:	93 85       	ldd	r25, Z+11	; 0x0b
    1272:	89 2b       	or	r24, r25
    1274:	c1 f4       	brne	.+48     	; 0x12a6 <xStreamBufferReset+0x4e>
    1276:	86 85       	ldd	r24, Z+14	; 0x0e
    1278:	46 81       	ldd	r20, Z+6	; 0x06
    127a:	57 81       	ldd	r21, Z+7	; 0x07
    127c:	64 81       	ldd	r22, Z+4	; 0x04
    127e:	75 81       	ldd	r23, Z+5	; 0x05
    1280:	a4 85       	ldd	r26, Z+12	; 0x0c
    1282:	b5 85       	ldd	r27, Z+13	; 0x0d
    1284:	90 e1       	ldi	r25, 0x10	; 16
    1286:	ef 01       	movw	r28, r30
    1288:	19 92       	st	Y+, r1
    128a:	9a 95       	dec	r25
    128c:	e9 f7       	brne	.-6      	; 0x1288 <xStreamBufferReset+0x30>
    128e:	b5 87       	std	Z+13, r27	; 0x0d
    1290:	a4 87       	std	Z+12, r26	; 0x0c
    1292:	75 83       	std	Z+5, r23	; 0x05
    1294:	64 83       	std	Z+4, r22	; 0x04
    1296:	57 83       	std	Z+7, r21	; 0x07
    1298:	46 83       	std	Z+6, r20	; 0x06
    129a:	86 87       	std	Z+14, r24	; 0x0e
    129c:	27 87       	std	Z+15, r18	; 0x0f
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <xStreamBufferReset+0x50>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <xStreamBufferReset+0x50>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <xStreamBufferSpacesAvailable>:
    12b2:	fc 01       	movw	r30, r24
    12b4:	24 81       	ldd	r18, Z+4	; 0x04
    12b6:	35 81       	ldd	r19, Z+5	; 0x05
    12b8:	80 81       	ld	r24, Z
    12ba:	91 81       	ldd	r25, Z+1	; 0x01
    12bc:	42 81       	ldd	r20, Z+2	; 0x02
    12be:	53 81       	ldd	r21, Z+3	; 0x03
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	84 1b       	sub	r24, r20
    12c8:	95 0b       	sbc	r25, r21
    12ca:	82 17       	cp	r24, r18
    12cc:	93 07       	cpc	r25, r19
    12ce:	10 f0       	brcs	.+4      	; 0x12d4 <xStreamBufferSpacesAvailable+0x22>
    12d0:	82 1b       	sub	r24, r18
    12d2:	93 0b       	sbc	r25, r19
    12d4:	08 95       	ret

000012d6 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    12d6:	af 92       	push	r10
    12d8:	bf 92       	push	r11
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	ec 01       	movw	r28, r24
    12ec:	5b 01       	movw	r10, r22
    12ee:	6a 01       	movw	r12, r20
    12f0:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f4:	80 ff       	sbrs	r24, 0
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12f8:	8a 01       	movw	r16, r20
    12fa:	0e 5f       	subi	r16, 0xFE	; 254
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1300:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1302:	ce 01       	movw	r24, r28
    1304:	d6 df       	rcall	.-84     	; 0x12b2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1306:	9c 01       	movw	r18, r24
    1308:	a6 01       	movw	r20, r12
    130a:	b5 01       	movw	r22, r10
    130c:	ce 01       	movw	r24, r28
    130e:	ea de       	rcall	.-556    	; 0x10e4 <prvWriteMessageToBuffer>
    1310:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1312:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1314:	b1 f0       	breq	.+44     	; 0x1342 <xStreamBufferSendFromISR+0x6c>
    1316:	ce 01       	movw	r24, r28
    1318:	89 de       	rcall	.-750    	; 0x102c <prvBytesInBuffer>
    131a:	2e 81       	ldd	r18, Y+6	; 0x06
    131c:	3f 81       	ldd	r19, Y+7	; 0x07
    131e:	82 17       	cp	r24, r18
    1320:	93 07       	cpc	r25, r19
    1322:	78 f0       	brcs	.+30     	; 0x1342 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1324:	88 85       	ldd	r24, Y+8	; 0x08
    1326:	99 85       	ldd	r25, Y+9	; 0x09
    1328:	89 2b       	or	r24, r25
    132a:	59 f0       	breq	.+22     	; 0x1342 <xStreamBufferSendFromISR+0x6c>
    132c:	88 85       	ldd	r24, Y+8	; 0x08
    132e:	99 85       	ldd	r25, Y+9	; 0x09
    1330:	00 e0       	ldi	r16, 0x00	; 0
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	ba 01       	movw	r22, r20
    133c:	4c d6       	rcall	.+3224   	; 0x1fd6 <xTaskGenericNotifyFromISR>
    133e:	19 86       	std	Y+9, r1	; 0x09
    1340:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1342:	c6 01       	movw	r24, r12
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	08 95       	ret

0000135a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    135a:	6f 92       	push	r6
    135c:	7f 92       	push	r7
    135e:	8f 92       	push	r8
    1360:	9f 92       	push	r9
    1362:	af 92       	push	r10
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	1f 92       	push	r1
    1378:	1f 92       	push	r1
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	6c 01       	movw	r12, r24
    1380:	3b 01       	movw	r6, r22
    1382:	4a 01       	movw	r8, r20
    1384:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1386:	fc 01       	movw	r30, r24
    1388:	86 85       	ldd	r24, Z+14	; 0x0e
    138a:	80 fd       	sbrc	r24, 0
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    138e:	a1 2c       	mov	r10, r1
    1390:	b1 2c       	mov	r11, r1
    1392:	04 c0       	rjmp	.+8      	; 0x139c <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1394:	68 94       	set
    1396:	aa 24       	eor	r10, r10
    1398:	a1 f8       	bld	r10, 1
    139a:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    139c:	e1 14       	cp	r14, r1
    139e:	f1 04       	cpc	r15, r1
    13a0:	29 f1       	breq	.+74     	; 0x13ec <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13a8:	c6 01       	movw	r24, r12
    13aa:	40 de       	rcall	.-896    	; 0x102c <prvBytesInBuffer>
    13ac:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    13ae:	a8 16       	cp	r10, r24
    13b0:	b9 06       	cpc	r11, r25
    13b2:	38 f0       	brcs	.+14     	; 0x13c2 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    13b8:	9e d6       	rcall	.+3388   	; 0x20f6 <xTaskNotifyStateClear>
    13ba:	b9 d4       	rcall	.+2418   	; 0x1d2e <xTaskGetCurrentTaskHandle>
    13bc:	f6 01       	movw	r30, r12
    13be:	91 87       	std	Z+9, r25	; 0x09
    13c0:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    13c6:	a0 16       	cp	r10, r16
    13c8:	b1 06       	cpc	r11, r17
    13ca:	b0 f0       	brcs	.+44     	; 0x13f8 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	cb 01       	movw	r24, r22
    13dc:	fb d4       	rcall	.+2550   	; 0x1dd4 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    13de:	f6 01       	movw	r30, r12
    13e0:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13e2:	10 86       	std	Z+8, r1	; 0x08
    13e4:	c6 01       	movw	r24, r12
    13e6:	22 de       	rcall	.-956    	; 0x102c <prvBytesInBuffer>
    13e8:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <xStreamBufferReceive+0x98>
    13ec:	c6 01       	movw	r24, r12
    13ee:	1e de       	rcall	.-964    	; 0x102c <prvBytesInBuffer>
    13f0:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    13f2:	a0 16       	cp	r10, r16
    13f4:	b1 06       	cpc	r11, r17
    13f6:	b8 f5       	brcc	.+110    	; 0x1466 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    13f8:	a1 14       	cp	r10, r1
    13fa:	b1 04       	cpc	r11, r1
    13fc:	c1 f0       	breq	.+48     	; 0x142e <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    13fe:	f6 01       	movw	r30, r12
    1400:	e0 80       	ld	r14, Z
    1402:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1404:	98 01       	movw	r18, r16
    1406:	a5 01       	movw	r20, r10
    1408:	be 01       	movw	r22, r28
    140a:	6f 5f       	subi	r22, 0xFF	; 255
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	c6 01       	movw	r24, r12
    1410:	a9 de       	rcall	.-686    	; 0x1164 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1416:	0a 19       	sub	r16, r10
    1418:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    141a:	88 16       	cp	r8, r24
    141c:	99 06       	cpc	r9, r25
    141e:	30 f4       	brcc	.+12     	; 0x142c <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1420:	f6 01       	movw	r30, r12
    1422:	f1 82       	std	Z+1, r15	; 0x01
    1424:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1426:	81 2c       	mov	r8, r1
    1428:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    142a:	01 c0       	rjmp	.+2      	; 0x142e <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    142c:	4c 01       	movw	r8, r24
    142e:	98 01       	movw	r18, r16
    1430:	a4 01       	movw	r20, r8
    1432:	b3 01       	movw	r22, r6
    1434:	c6 01       	movw	r24, r12
    1436:	96 de       	rcall	.-724    	; 0x1164 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1438:	7c 01       	movw	r14, r24
    143a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    143c:	b1 f0       	breq	.+44     	; 0x146a <xStreamBufferReceive+0x110>
    143e:	dc d1       	rcall	.+952    	; 0x17f8 <vTaskSuspendAll>
    1440:	f6 01       	movw	r30, r12
    1442:	82 85       	ldd	r24, Z+10	; 0x0a
    1444:	93 85       	ldd	r25, Z+11	; 0x0b
    1446:	89 2b       	or	r24, r25
    1448:	61 f0       	breq	.+24     	; 0x1462 <xStreamBufferReceive+0x108>
    144a:	82 85       	ldd	r24, Z+10	; 0x0a
    144c:	93 85       	ldd	r25, Z+11	; 0x0b
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	ba 01       	movw	r22, r20
    145a:	3f d5       	rcall	.+2686   	; 0x1eda <xTaskGenericNotify>
    145c:	f6 01       	movw	r30, r12
    145e:	13 86       	std	Z+11, r1	; 0x0b
    1460:	12 86       	std	Z+10, r1	; 0x0a
    1462:	94 d2       	rcall	.+1320   	; 0x198c <xTaskResumeAll>
    1464:	02 c0       	rjmp	.+4      	; 0x146a <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1466:	e1 2c       	mov	r14, r1
    1468:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    146a:	c7 01       	movw	r24, r14
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	bf 90       	pop	r11
    1482:	af 90       	pop	r10
    1484:	9f 90       	pop	r9
    1486:	8f 90       	pop	r8
    1488:	7f 90       	pop	r7
    148a:	6f 90       	pop	r6
    148c:	08 95       	ret

0000148e <prvResetNextTaskUnblockTime>:
    148e:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    1492:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    1496:	80 81       	ld	r24, Z
    1498:	81 11       	cpse	r24, r1
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <prvResetNextTaskUnblockTime+0x1c>
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	9f ef       	ldi	r25, 0xFF	; 255
    14a0:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    14a4:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    14a8:	08 95       	ret
    14aa:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    14ae:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    14b2:	05 80       	ldd	r0, Z+5	; 0x05
    14b4:	f6 81       	ldd	r31, Z+6	; 0x06
    14b6:	e0 2d       	mov	r30, r0
    14b8:	06 80       	ldd	r0, Z+6	; 0x06
    14ba:	f7 81       	ldd	r31, Z+7	; 0x07
    14bc:	e0 2d       	mov	r30, r0
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    14c6:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    14ca:	08 95       	ret

000014cc <prvAddCurrentTaskToDelayedList>:
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	f6 2e       	mov	r15, r22
    14da:	00 91 cd 06 	lds	r16, 0x06CD	; 0x8006cd <xTickCount>
    14de:	10 91 ce 06 	lds	r17, 0x06CE	; 0x8006ce <xTickCount+0x1>
    14e2:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    14e6:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    14ea:	02 96       	adiw	r24, 0x02	; 2
    14ec:	55 d9       	rcall	.-3414   	; 0x798 <uxListRemove>
    14ee:	cf 3f       	cpi	r28, 0xFF	; 255
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	d8 07       	cpc	r29, r24
    14f4:	61 f4       	brne	.+24     	; 0x150e <prvAddCurrentTaskToDelayedList+0x42>
    14f6:	ff 20       	and	r15, r15
    14f8:	51 f0       	breq	.+20     	; 0x150e <prvAddCurrentTaskToDelayedList+0x42>
    14fa:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    14fe:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1502:	6e 5f       	subi	r22, 0xFE	; 254
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	80 ed       	ldi	r24, 0xD0	; 208
    1508:	96 e0       	ldi	r25, 0x06	; 6
    150a:	f4 d8       	rcall	.-3608   	; 0x6f4 <vListInsertEnd>
    150c:	2d c0       	rjmp	.+90     	; 0x1568 <prvAddCurrentTaskToDelayedList+0x9c>
    150e:	c0 0f       	add	r28, r16
    1510:	d1 1f       	adc	r29, r17
    1512:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1516:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    151a:	d3 83       	std	Z+3, r29	; 0x03
    151c:	c2 83       	std	Z+2, r28	; 0x02
    151e:	c0 17       	cp	r28, r16
    1520:	d1 07       	cpc	r29, r17
    1522:	60 f4       	brcc	.+24     	; 0x153c <prvAddCurrentTaskToDelayedList+0x70>
    1524:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1528:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    152c:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <pxOverflowDelayedTaskList>
    1530:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    1534:	6e 5f       	subi	r22, 0xFE	; 254
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	fe d8       	rcall	.-3588   	; 0x736 <vListInsert>
    153a:	16 c0       	rjmp	.+44     	; 0x1568 <prvAddCurrentTaskToDelayedList+0x9c>
    153c:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1540:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1544:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    1548:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    154c:	6e 5f       	subi	r22, 0xFE	; 254
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	f2 d8       	rcall	.-3612   	; 0x736 <vListInsert>
    1552:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextTaskUnblockTime>
    1556:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    155a:	c8 17       	cp	r28, r24
    155c:	d9 07       	cpc	r29, r25
    155e:	20 f4       	brcc	.+8      	; 0x1568 <prvAddCurrentTaskToDelayedList+0x9c>
    1560:	d0 93 c6 06 	sts	0x06C6, r29	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    1564:	c0 93 c5 06 	sts	0x06C5, r28	; 0x8006c5 <xNextTaskUnblockTime>
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	08 95       	ret

00001574 <xTaskCreate>:
    1574:	4f 92       	push	r4
    1576:	5f 92       	push	r5
    1578:	6f 92       	push	r6
    157a:	7f 92       	push	r7
    157c:	8f 92       	push	r8
    157e:	9f 92       	push	r9
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	4c 01       	movw	r8, r24
    1594:	6b 01       	movw	r12, r22
    1596:	5a 01       	movw	r10, r20
    1598:	29 01       	movw	r4, r18
    159a:	ca 01       	movw	r24, r20
    159c:	77 d8       	rcall	.-3858   	; 0x68c <pvPortMalloc>
    159e:	3c 01       	movw	r6, r24
    15a0:	89 2b       	or	r24, r25
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <xTaskCreate+0x32>
    15a4:	e6 c0       	rjmp	.+460    	; 0x1772 <xTaskCreate+0x1fe>
    15a6:	8c e2       	ldi	r24, 0x2C	; 44
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	70 d8       	rcall	.-3872   	; 0x68c <pvPortMalloc>
    15ac:	ec 01       	movw	r28, r24
    15ae:	89 2b       	or	r24, r25
    15b0:	99 f0       	breq	.+38     	; 0x15d8 <xTaskCreate+0x64>
    15b2:	78 8e       	std	Y+24, r7	; 0x18
    15b4:	6f 8a       	std	Y+23, r6	; 0x17
    15b6:	a5 01       	movw	r20, r10
    15b8:	65 ea       	ldi	r22, 0xA5	; 165
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	c3 01       	movw	r24, r6
    15be:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <memset>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	a8 1a       	sub	r10, r24
    15c6:	b1 08       	sbc	r11, r1
    15c8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ca:	98 8d       	ldd	r25, Y+24	; 0x18
    15cc:	a8 0e       	add	r10, r24
    15ce:	b9 1e       	adc	r11, r25
    15d0:	c1 14       	cp	r12, r1
    15d2:	d1 04       	cpc	r13, r1
    15d4:	21 f4       	brne	.+8      	; 0x15de <xTaskCreate+0x6a>
    15d6:	1f c0       	rjmp	.+62     	; 0x1616 <xTaskCreate+0xa2>
    15d8:	c3 01       	movw	r24, r6
    15da:	6b d8       	rcall	.-3882   	; 0x6b2 <vPortFree>
    15dc:	ca c0       	rjmp	.+404    	; 0x1772 <xTaskCreate+0x1fe>
    15de:	d6 01       	movw	r26, r12
    15e0:	8c 91       	ld	r24, X
    15e2:	89 8f       	std	Y+25, r24	; 0x19
    15e4:	8c 91       	ld	r24, X
    15e6:	88 23       	and	r24, r24
    15e8:	a1 f0       	breq	.+40     	; 0x1612 <xTaskCreate+0x9e>
    15ea:	ae 01       	movw	r20, r28
    15ec:	46 5e       	subi	r20, 0xE6	; 230
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	f6 01       	movw	r30, r12
    15f2:	31 96       	adiw	r30, 0x01	; 1
    15f4:	b8 e0       	ldi	r27, 0x08	; 8
    15f6:	cb 0e       	add	r12, r27
    15f8:	d1 1c       	adc	r13, r1
    15fa:	cf 01       	movw	r24, r30
    15fc:	21 91       	ld	r18, Z+
    15fe:	da 01       	movw	r26, r20
    1600:	2d 93       	st	X+, r18
    1602:	ad 01       	movw	r20, r26
    1604:	dc 01       	movw	r26, r24
    1606:	8c 91       	ld	r24, X
    1608:	88 23       	and	r24, r24
    160a:	19 f0       	breq	.+6      	; 0x1612 <xTaskCreate+0x9e>
    160c:	ec 15       	cp	r30, r12
    160e:	fd 05       	cpc	r31, r13
    1610:	a1 f7       	brne	.-24     	; 0x15fa <xTaskCreate+0x86>
    1612:	18 a2       	std	Y+32, r1	; 0x20
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <xTaskCreate+0xa4>
    1616:	19 8e       	std	Y+25, r1	; 0x19
    1618:	04 30       	cpi	r16, 0x04	; 4
    161a:	08 f0       	brcs	.+2      	; 0x161e <xTaskCreate+0xaa>
    161c:	03 e0       	ldi	r16, 0x03	; 3
    161e:	0e 8b       	std	Y+22, r16	; 0x16
    1620:	0b a3       	std	Y+35, r16	; 0x23
    1622:	1c a2       	std	Y+36, r1	; 0x24
    1624:	6e 01       	movw	r12, r28
    1626:	b2 e0       	ldi	r27, 0x02	; 2
    1628:	cb 0e       	add	r12, r27
    162a:	d1 1c       	adc	r13, r1
    162c:	c6 01       	movw	r24, r12
    162e:	5e d8       	rcall	.-3908   	; 0x6ec <vListInitialiseItem>
    1630:	ce 01       	movw	r24, r28
    1632:	0c 96       	adiw	r24, 0x0c	; 12
    1634:	5b d8       	rcall	.-3914   	; 0x6ec <vListInitialiseItem>
    1636:	d9 87       	std	Y+9, r29	; 0x09
    1638:	c8 87       	std	Y+8, r28	; 0x08
    163a:	84 e0       	ldi	r24, 0x04	; 4
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	80 1b       	sub	r24, r16
    1640:	91 09       	sbc	r25, r1
    1642:	9d 87       	std	Y+13, r25	; 0x0d
    1644:	8c 87       	std	Y+12, r24	; 0x0c
    1646:	db 8b       	std	Y+19, r29	; 0x13
    1648:	ca 8b       	std	Y+18, r28	; 0x12
    164a:	1e a2       	std	Y+38, r1	; 0x26
    164c:	1d a2       	std	Y+37, r1	; 0x25
    164e:	1f a2       	std	Y+39, r1	; 0x27
    1650:	18 a6       	std	Y+40, r1	; 0x28
    1652:	19 a6       	std	Y+41, r1	; 0x29
    1654:	1a a6       	std	Y+42, r1	; 0x2a
    1656:	1b a6       	std	Y+43, r1	; 0x2b
    1658:	a2 01       	movw	r20, r4
    165a:	b4 01       	movw	r22, r8
    165c:	c5 01       	movw	r24, r10
    165e:	c3 d8       	rcall	.-3706   	; 0x7e6 <pxPortInitialiseStack>
    1660:	99 83       	std	Y+1, r25	; 0x01
    1662:	88 83       	st	Y, r24
    1664:	e1 14       	cp	r14, r1
    1666:	f1 04       	cpc	r15, r1
    1668:	19 f0       	breq	.+6      	; 0x1670 <xTaskCreate+0xfc>
    166a:	f7 01       	movw	r30, r14
    166c:	d1 83       	std	Z+1, r29	; 0x01
    166e:	c0 83       	st	Z, r28
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	0f 92       	push	r0
    1676:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <uxCurrentNumberOfTasks>
    1680:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    1684:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1688:	89 2b       	or	r24, r25
    168a:	91 f5       	brne	.+100    	; 0x16f0 <xTaskCreate+0x17c>
    168c:	d0 93 27 07 	sts	0x0727, r29	; 0x800727 <pxCurrentTCB+0x1>
    1690:	c0 93 26 07 	sts	0x0726, r28	; 0x800726 <pxCurrentTCB>
    1694:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	09 f0       	breq	.+2      	; 0x169e <xTaskCreate+0x12a>
    169c:	39 c0       	rjmp	.+114    	; 0x1710 <xTaskCreate+0x19c>
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	97 e0       	ldi	r25, 0x07	; 7
    16a2:	16 d8       	rcall	.-4052   	; 0x6d0 <vListInitialise>
    16a4:	8b e0       	ldi	r24, 0x0B	; 11
    16a6:	97 e0       	ldi	r25, 0x07	; 7
    16a8:	13 d8       	rcall	.-4058   	; 0x6d0 <vListInitialise>
    16aa:	84 e1       	ldi	r24, 0x14	; 20
    16ac:	97 e0       	ldi	r25, 0x07	; 7
    16ae:	10 d8       	rcall	.-4064   	; 0x6d0 <vListInitialise>
    16b0:	8d e1       	ldi	r24, 0x1D	; 29
    16b2:	97 e0       	ldi	r25, 0x07	; 7
    16b4:	0d d8       	rcall	.-4070   	; 0x6d0 <vListInitialise>
    16b6:	89 ef       	ldi	r24, 0xF9	; 249
    16b8:	96 e0       	ldi	r25, 0x06	; 6
    16ba:	0a d8       	rcall	.-4076   	; 0x6d0 <vListInitialise>
    16bc:	80 ef       	ldi	r24, 0xF0	; 240
    16be:	96 e0       	ldi	r25, 0x06	; 6
    16c0:	07 d8       	rcall	.-4082   	; 0x6d0 <vListInitialise>
    16c2:	83 ee       	ldi	r24, 0xE3	; 227
    16c4:	96 e0       	ldi	r25, 0x06	; 6
    16c6:	04 d8       	rcall	.-4088   	; 0x6d0 <vListInitialise>
    16c8:	8a ed       	ldi	r24, 0xDA	; 218
    16ca:	96 e0       	ldi	r25, 0x06	; 6
    16cc:	01 d8       	rcall	.-4094   	; 0x6d0 <vListInitialise>
    16ce:	80 ed       	ldi	r24, 0xD0	; 208
    16d0:	96 e0       	ldi	r25, 0x06	; 6
    16d2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    16d6:	89 ef       	ldi	r24, 0xF9	; 249
    16d8:	96 e0       	ldi	r25, 0x06	; 6
    16da:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <pxDelayedTaskList+0x1>
    16de:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <pxDelayedTaskList>
    16e2:	80 ef       	ldi	r24, 0xF0	; 240
    16e4:	96 e0       	ldi	r25, 0x06	; 6
    16e6:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    16ea:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <pxOverflowDelayedTaskList>
    16ee:	10 c0       	rjmp	.+32     	; 0x1710 <xTaskCreate+0x19c>
    16f0:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <xSchedulerRunning>
    16f4:	81 11       	cpse	r24, r1
    16f6:	0c c0       	rjmp	.+24     	; 0x1710 <xTaskCreate+0x19c>
    16f8:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    16fc:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1700:	96 89       	ldd	r25, Z+22	; 0x16
    1702:	8e 89       	ldd	r24, Y+22	; 0x16
    1704:	89 17       	cp	r24, r25
    1706:	20 f0       	brcs	.+8      	; 0x1710 <xTaskCreate+0x19c>
    1708:	d0 93 27 07 	sts	0x0727, r29	; 0x800727 <pxCurrentTCB+0x1>
    170c:	c0 93 26 07 	sts	0x0726, r28	; 0x800726 <pxCurrentTCB>
    1710:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <uxTaskNumber>
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <uxTaskNumber>
    171a:	89 a3       	std	Y+33, r24	; 0x21
    171c:	8e 89       	ldd	r24, Y+22	; 0x16
    171e:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1722:	98 17       	cp	r25, r24
    1724:	10 f4       	brcc	.+4      	; 0x172a <xTaskCreate+0x1b6>
    1726:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 01       	movw	r18, r24
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	82 0f       	add	r24, r18
    173c:	93 1f       	adc	r25, r19
    173e:	b6 01       	movw	r22, r12
    1740:	8e 5f       	subi	r24, 0xFE	; 254
    1742:	98 4f       	sbci	r25, 0xF8	; 248
    1744:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <xSchedulerRunning>
    1750:	88 23       	and	r24, r24
    1752:	59 f0       	breq	.+22     	; 0x176a <xTaskCreate+0x1f6>
    1754:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1758:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    175c:	96 89       	ldd	r25, Z+22	; 0x16
    175e:	8e 89       	ldd	r24, Y+22	; 0x16
    1760:	98 17       	cp	r25, r24
    1762:	28 f4       	brcc	.+10     	; 0x176e <xTaskCreate+0x1fa>
    1764:	ee d8       	rcall	.-3620   	; 0x942 <vPortYield>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <xTaskCreate+0x200>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <xTaskCreate+0x200>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <xTaskCreate+0x200>
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	6f 90       	pop	r6
    178e:	5f 90       	pop	r5
    1790:	4f 90       	pop	r4
    1792:	08 95       	ret

00001794 <vTaskStartScheduler>:
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	0f 2e       	mov	r0, r31
    179c:	f3 ec       	ldi	r31, 0xC3	; 195
    179e:	ef 2e       	mov	r14, r31
    17a0:	f6 e0       	ldi	r31, 0x06	; 6
    17a2:	ff 2e       	mov	r15, r31
    17a4:	f0 2d       	mov	r31, r0
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 ec       	ldi	r20, 0xC0	; 192
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	66 e6       	ldi	r22, 0x66	; 102
    17b2:	73 e0       	ldi	r23, 0x03	; 3
    17b4:	8d ec       	ldi	r24, 0xCD	; 205
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	dd de       	rcall	.-582    	; 0x1574 <xTaskCreate>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	c9 f4       	brne	.+50     	; 0x17f0 <vTaskStartScheduler+0x5c>
    17be:	07 d5       	rcall	.+2574   	; 0x21ce <xTimerCreateTimerTask>
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	b1 f4       	brne	.+44     	; 0x17f0 <vTaskStartScheduler+0x5c>
    17c4:	f8 94       	cli
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    17ce:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <xSchedulerRunning>
    17d8:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <xTickCount+0x1>
    17dc:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <xTickCount>
    17e0:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    17e4:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    17e8:	85 a1       	ldd	r24, Z+37	; 0x25
    17ea:	0e 94 36 03 	call	0x66c	; 0x66c <task_switch_in>
    17ee:	6d d8       	rcall	.-3878   	; 0x8ca <xPortStartScheduler>
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	08 95       	ret

000017f8 <vTaskSuspendAll>:
    17f8:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxSchedulerSuspended>
    1802:	08 95       	ret

00001804 <xTaskGetTickCount>:
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	0f 92       	push	r0
    180a:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <xTickCount>
    180e:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	08 95       	ret

00001818 <xTaskIncrementTick>:
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    182c:	81 11       	cpse	r24, r1
    182e:	98 c0       	rjmp	.+304    	; 0x1960 <xTaskIncrementTick+0x148>
    1830:	e0 90 cd 06 	lds	r14, 0x06CD	; 0x8006cd <xTickCount>
    1834:	f0 90 ce 06 	lds	r15, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	e8 1a       	sub	r14, r24
    183c:	f8 0a       	sbc	r15, r24
    183e:	f0 92 ce 06 	sts	0x06CE, r15	; 0x8006ce <xTickCount+0x1>
    1842:	e0 92 cd 06 	sts	0x06CD, r14	; 0x8006cd <xTickCount>
    1846:	e1 14       	cp	r14, r1
    1848:	f1 04       	cpc	r15, r1
    184a:	b1 f4       	brne	.+44     	; 0x1878 <xTaskIncrementTick+0x60>
    184c:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    1850:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    1854:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <pxOverflowDelayedTaskList>
    1858:	30 91 ed 06 	lds	r19, 0x06ED	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    185c:	30 93 ef 06 	sts	0x06EF, r19	; 0x8006ef <pxDelayedTaskList+0x1>
    1860:	20 93 ee 06 	sts	0x06EE, r18	; 0x8006ee <pxDelayedTaskList>
    1864:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <pxOverflowDelayedTaskList+0x1>
    1868:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <pxOverflowDelayedTaskList>
    186c:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <xNumOfOverflows>
    1876:	0b de       	rcall	.-1002   	; 0x148e <prvResetNextTaskUnblockTime>
    1878:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextTaskUnblockTime>
    187c:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    1880:	e8 16       	cp	r14, r24
    1882:	f9 06       	cpc	r15, r25
    1884:	10 f4       	brcc	.+4      	; 0x188a <xTaskIncrementTick+0x72>
    1886:	d1 2c       	mov	r13, r1
    1888:	53 c0       	rjmp	.+166    	; 0x1930 <xTaskIncrementTick+0x118>
    188a:	d1 2c       	mov	r13, r1
    188c:	cc 24       	eor	r12, r12
    188e:	c3 94       	inc	r12
    1890:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    1894:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    1898:	80 81       	ld	r24, Z
    189a:	81 11       	cpse	r24, r1
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <xTaskIncrementTick+0x94>
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	9f ef       	ldi	r25, 0xFF	; 255
    18a2:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    18a6:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    18aa:	42 c0       	rjmp	.+132    	; 0x1930 <xTaskIncrementTick+0x118>
    18ac:	e0 91 ee 06 	lds	r30, 0x06EE	; 0x8006ee <pxDelayedTaskList>
    18b0:	f0 91 ef 06 	lds	r31, 0x06EF	; 0x8006ef <pxDelayedTaskList+0x1>
    18b4:	05 80       	ldd	r0, Z+5	; 0x05
    18b6:	f6 81       	ldd	r31, Z+6	; 0x06
    18b8:	e0 2d       	mov	r30, r0
    18ba:	c6 81       	ldd	r28, Z+6	; 0x06
    18bc:	d7 81       	ldd	r29, Z+7	; 0x07
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	e8 16       	cp	r14, r24
    18c4:	f9 06       	cpc	r15, r25
    18c6:	28 f4       	brcc	.+10     	; 0x18d2 <xTaskIncrementTick+0xba>
    18c8:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    18cc:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    18d0:	2f c0       	rjmp	.+94     	; 0x1930 <xTaskIncrementTick+0x118>
    18d2:	8e 01       	movw	r16, r28
    18d4:	0e 5f       	subi	r16, 0xFE	; 254
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	c8 01       	movw	r24, r16
    18da:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    18de:	8c 89       	ldd	r24, Y+20	; 0x14
    18e0:	9d 89       	ldd	r25, Y+21	; 0x15
    18e2:	89 2b       	or	r24, r25
    18e4:	21 f0       	breq	.+8      	; 0x18ee <xTaskIncrementTick+0xd6>
    18e6:	ce 01       	movw	r24, r28
    18e8:	0c 96       	adiw	r24, 0x0c	; 12
    18ea:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    18ee:	8e 89       	ldd	r24, Y+22	; 0x16
    18f0:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    18f4:	98 17       	cp	r25, r24
    18f6:	10 f4       	brcc	.+4      	; 0x18fc <xTaskIncrementTick+0xe4>
    18f8:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9c 01       	movw	r18, r24
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	22 0f       	add	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	22 0f       	add	r18, r18
    190a:	33 1f       	adc	r19, r19
    190c:	82 0f       	add	r24, r18
    190e:	93 1f       	adc	r25, r19
    1910:	b8 01       	movw	r22, r16
    1912:	8e 5f       	subi	r24, 0xFE	; 254
    1914:	98 4f       	sbci	r25, 0xF8	; 248
    1916:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    191a:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    191e:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1922:	9e 89       	ldd	r25, Y+22	; 0x16
    1924:	86 89       	ldd	r24, Z+22	; 0x16
    1926:	98 17       	cp	r25, r24
    1928:	08 f4       	brcc	.+2      	; 0x192c <xTaskIncrementTick+0x114>
    192a:	b2 cf       	rjmp	.-156    	; 0x1890 <xTaskIncrementTick+0x78>
    192c:	dc 2c       	mov	r13, r12
    192e:	b0 cf       	rjmp	.-160    	; 0x1890 <xTaskIncrementTick+0x78>
    1930:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1934:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1938:	86 89       	ldd	r24, Z+22	; 0x16
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	fc 01       	movw	r30, r24
    193e:	ee 0f       	add	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	8e 0f       	add	r24, r30
    194c:	9f 1f       	adc	r25, r31
    194e:	fc 01       	movw	r30, r24
    1950:	ee 5f       	subi	r30, 0xFE	; 254
    1952:	f8 4f       	sbci	r31, 0xF8	; 248
    1954:	80 81       	ld	r24, Z
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	48 f0       	brcs	.+18     	; 0x196c <xTaskIncrementTick+0x154>
    195a:	dd 24       	eor	r13, r13
    195c:	d3 94       	inc	r13
    195e:	06 c0       	rjmp	.+12     	; 0x196c <xTaskIncrementTick+0x154>
    1960:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <uxPendedTicks>
    1964:	8f 5f       	subi	r24, 0xFF	; 255
    1966:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <uxPendedTicks>
    196a:	d1 2c       	mov	r13, r1
    196c:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xYieldPending>
    1970:	88 23       	and	r24, r24
    1972:	11 f0       	breq	.+4      	; 0x1978 <xTaskIncrementTick+0x160>
    1974:	dd 24       	eor	r13, r13
    1976:	d3 94       	inc	r13
    1978:	8d 2d       	mov	r24, r13
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	08 95       	ret

0000198c <xTaskResumeAll>:
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	0f 92       	push	r0
    19a0:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    19a4:	81 50       	subi	r24, 0x01	; 1
    19a6:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxSchedulerSuspended>
    19aa:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    19ae:	81 11       	cpse	r24, r1
    19b0:	5d c0       	rjmp	.+186    	; 0x1a6c <xTaskResumeAll+0xe0>
    19b2:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <uxCurrentNumberOfTasks>
    19b6:	81 11       	cpse	r24, r1
    19b8:	33 c0       	rjmp	.+102    	; 0x1a20 <xTaskResumeAll+0x94>
    19ba:	5b c0       	rjmp	.+182    	; 0x1a72 <xTaskResumeAll+0xe6>
    19bc:	d7 01       	movw	r26, r14
    19be:	15 96       	adiw	r26, 0x05	; 5
    19c0:	ed 91       	ld	r30, X+
    19c2:	fc 91       	ld	r31, X
    19c4:	16 97       	sbiw	r26, 0x06	; 6
    19c6:	c6 81       	ldd	r28, Z+6	; 0x06
    19c8:	d7 81       	ldd	r29, Z+7	; 0x07
    19ca:	ce 01       	movw	r24, r28
    19cc:	0c 96       	adiw	r24, 0x0c	; 12
    19ce:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    19d2:	8e 01       	movw	r16, r28
    19d4:	0e 5f       	subi	r16, 0xFE	; 254
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	c8 01       	movw	r24, r16
    19da:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    19de:	8e 89       	ldd	r24, Y+22	; 0x16
    19e0:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    19e4:	98 17       	cp	r25, r24
    19e6:	10 f4       	brcc	.+4      	; 0x19ec <xTaskResumeAll+0x60>
    19e8:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 01       	movw	r18, r24
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	22 0f       	add	r18, r18
    19f6:	33 1f       	adc	r19, r19
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	82 0f       	add	r24, r18
    19fe:	93 1f       	adc	r25, r19
    1a00:	b8 01       	movw	r22, r16
    1a02:	8e 5f       	subi	r24, 0xFE	; 254
    1a04:	98 4f       	sbci	r25, 0xF8	; 248
    1a06:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    1a0a:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1a0e:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1a12:	9e 89       	ldd	r25, Y+22	; 0x16
    1a14:	86 89       	ldd	r24, Z+22	; 0x16
    1a16:	98 17       	cp	r25, r24
    1a18:	68 f0       	brcs	.+26     	; 0x1a34 <xTaskResumeAll+0xa8>
    1a1a:	d0 92 c9 06 	sts	0x06C9, r13	; 0x8006c9 <xYieldPending>
    1a1e:	0a c0       	rjmp	.+20     	; 0x1a34 <xTaskResumeAll+0xa8>
    1a20:	c0 e0       	ldi	r28, 0x00	; 0
    1a22:	d0 e0       	ldi	r29, 0x00	; 0
    1a24:	0f 2e       	mov	r0, r31
    1a26:	f3 ee       	ldi	r31, 0xE3	; 227
    1a28:	ef 2e       	mov	r14, r31
    1a2a:	f6 e0       	ldi	r31, 0x06	; 6
    1a2c:	ff 2e       	mov	r15, r31
    1a2e:	f0 2d       	mov	r31, r0
    1a30:	dd 24       	eor	r13, r13
    1a32:	d3 94       	inc	r13
    1a34:	f7 01       	movw	r30, r14
    1a36:	80 81       	ld	r24, Z
    1a38:	81 11       	cpse	r24, r1
    1a3a:	c0 cf       	rjmp	.-128    	; 0x19bc <xTaskResumeAll+0x30>
    1a3c:	cd 2b       	or	r28, r29
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <xTaskResumeAll+0xb6>
    1a40:	26 dd       	rcall	.-1460   	; 0x148e <prvResetNextTaskUnblockTime>
    1a42:	c0 91 ca 06 	lds	r28, 0x06CA	; 0x8006ca <uxPendedTicks>
    1a46:	cc 23       	and	r28, r28
    1a48:	49 f0       	breq	.+18     	; 0x1a5c <xTaskResumeAll+0xd0>
    1a4a:	d1 e0       	ldi	r29, 0x01	; 1
    1a4c:	e5 de       	rcall	.-566    	; 0x1818 <xTaskIncrementTick>
    1a4e:	81 11       	cpse	r24, r1
    1a50:	d0 93 c9 06 	sts	0x06C9, r29	; 0x8006c9 <xYieldPending>
    1a54:	c1 50       	subi	r28, 0x01	; 1
    1a56:	d1 f7       	brne	.-12     	; 0x1a4c <xTaskResumeAll+0xc0>
    1a58:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <uxPendedTicks>
    1a5c:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xYieldPending>
    1a60:	88 23       	and	r24, r24
    1a62:	31 f0       	breq	.+12     	; 0x1a70 <xTaskResumeAll+0xe4>
    1a64:	0e 94 a1 04 	call	0x942	; 0x942 <vPortYield>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <xTaskResumeAll+0xe6>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <xTaskResumeAll+0xe6>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	08 95       	ret

00001a86 <vTaskDelay>:
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	ec 01       	movw	r28, r24
    1a8c:	89 2b       	or	r24, r25
    1a8e:	39 f0       	breq	.+14     	; 0x1a9e <vTaskDelay+0x18>
    1a90:	b3 de       	rcall	.-666    	; 0x17f8 <vTaskSuspendAll>
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	ce 01       	movw	r24, r28
    1a96:	1a dd       	rcall	.-1484   	; 0x14cc <prvAddCurrentTaskToDelayedList>
    1a98:	79 df       	rcall	.-270    	; 0x198c <xTaskResumeAll>
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <vTaskDelay+0x1c>
    1a9e:	0e 94 a1 04 	call	0x942	; 0x942 <vPortYield>
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <vTaskSwitchContext>:
    1aa8:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1aac:	88 23       	and	r24, r24
    1aae:	21 f0       	breq	.+8      	; 0x1ab8 <vTaskSwitchContext+0x10>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1ab6:	08 95       	ret
    1ab8:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <xYieldPending>
    1abc:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1ac0:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1ac4:	85 a1       	ldd	r24, Z+37	; 0x25
    1ac6:	0e 94 40 03 	call	0x680	; 0x680 <task_switch_out>
    1aca:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <pxCurrentTCB>
    1ace:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1ad2:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1ad6:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1ada:	2d 91       	ld	r18, X+
    1adc:	3c 91       	ld	r19, X
    1ade:	87 89       	ldd	r24, Z+23	; 0x17
    1ae0:	90 8d       	ldd	r25, Z+24	; 0x18
    1ae2:	82 17       	cp	r24, r18
    1ae4:	93 07       	cpc	r25, r19
    1ae6:	58 f0       	brcs	.+22     	; 0x1afe <vTaskSwitchContext+0x56>
    1ae8:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1aec:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1af0:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    1af4:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1af8:	67 5e       	subi	r22, 0xE7	; 231
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	4b d4       	rcall	.+2198   	; 0x2394 <vApplicationStackOverflowHook>
    1afe:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1b02:	82 2f       	mov	r24, r18
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	fc 01       	movw	r30, r24
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	e8 0f       	add	r30, r24
    1b16:	f9 1f       	adc	r31, r25
    1b18:	ee 5f       	subi	r30, 0xFE	; 254
    1b1a:	f8 4f       	sbci	r31, 0xF8	; 248
    1b1c:	30 81       	ld	r19, Z
    1b1e:	31 11       	cpse	r19, r1
    1b20:	11 c0       	rjmp	.+34     	; 0x1b44 <vTaskSwitchContext+0x9c>
    1b22:	21 50       	subi	r18, 0x01	; 1
    1b24:	82 2f       	mov	r24, r18
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	fc 01       	movw	r30, r24
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	e8 0f       	add	r30, r24
    1b38:	f9 1f       	adc	r31, r25
    1b3a:	ee 5f       	subi	r30, 0xFE	; 254
    1b3c:	f8 4f       	sbci	r31, 0xF8	; 248
    1b3e:	30 81       	ld	r19, Z
    1b40:	33 23       	and	r19, r19
    1b42:	79 f3       	breq	.-34     	; 0x1b22 <vTaskSwitchContext+0x7a>
    1b44:	ac 01       	movw	r20, r24
    1b46:	44 0f       	add	r20, r20
    1b48:	55 1f       	adc	r21, r21
    1b4a:	44 0f       	add	r20, r20
    1b4c:	55 1f       	adc	r21, r21
    1b4e:	44 0f       	add	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	48 0f       	add	r20, r24
    1b54:	59 1f       	adc	r21, r25
    1b56:	da 01       	movw	r26, r20
    1b58:	ae 5f       	subi	r26, 0xFE	; 254
    1b5a:	b8 4f       	sbci	r27, 0xF8	; 248
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	12 97       	sbiw	r26, 0x02	; 2
    1b64:	02 80       	ldd	r0, Z+2	; 0x02
    1b66:	f3 81       	ldd	r31, Z+3	; 0x03
    1b68:	e0 2d       	mov	r30, r0
    1b6a:	12 96       	adiw	r26, 0x02	; 2
    1b6c:	fc 93       	st	X, r31
    1b6e:	ee 93       	st	-X, r30
    1b70:	11 97       	sbiw	r26, 0x01	; 1
    1b72:	4b 5f       	subi	r20, 0xFB	; 251
    1b74:	58 4f       	sbci	r21, 0xF8	; 248
    1b76:	e4 17       	cp	r30, r20
    1b78:	f5 07       	cpc	r31, r21
    1b7a:	29 f4       	brne	.+10     	; 0x1b86 <vTaskSwitchContext+0xde>
    1b7c:	42 81       	ldd	r20, Z+2	; 0x02
    1b7e:	53 81       	ldd	r21, Z+3	; 0x03
    1b80:	fd 01       	movw	r30, r26
    1b82:	52 83       	std	Z+2, r21	; 0x02
    1b84:	41 83       	std	Z+1, r20	; 0x01
    1b86:	fc 01       	movw	r30, r24
    1b88:	ee 0f       	add	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	8e 0f       	add	r24, r30
    1b96:	9f 1f       	adc	r25, r31
    1b98:	fc 01       	movw	r30, r24
    1b9a:	ee 5f       	subi	r30, 0xFE	; 254
    1b9c:	f8 4f       	sbci	r31, 0xF8	; 248
    1b9e:	01 80       	ldd	r0, Z+1	; 0x01
    1ba0:	f2 81       	ldd	r31, Z+2	; 0x02
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	86 81       	ldd	r24, Z+6	; 0x06
    1ba6:	97 81       	ldd	r25, Z+7	; 0x07
    1ba8:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxCurrentTCB+0x1>
    1bac:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxCurrentTCB>
    1bb0:	20 93 cc 06 	sts	0x06CC, r18	; 0x8006cc <uxTopReadyPriority>
    1bb4:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1bb8:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1bbc:	85 a1       	ldd	r24, Z+37	; 0x25
    1bbe:	0c 94 36 03 	jmp	0x66c	; 0x66c <task_switch_in>
    1bc2:	08 95       	ret

00001bc4 <vTaskPlaceOnEventList>:
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	eb 01       	movw	r28, r22
    1bca:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1bce:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1bd2:	64 5f       	subi	r22, 0xF4	; 244
    1bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd6:	0e 94 9b 03 	call	0x736	; 0x736 <vListInsert>
    1bda:	61 e0       	ldi	r22, 0x01	; 1
    1bdc:	ce 01       	movw	r24, r28
    1bde:	76 dc       	rcall	.-1812   	; 0x14cc <prvAddCurrentTaskToDelayedList>
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <vTaskPlaceOnEventListRestricted>:
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	8b 01       	movw	r16, r22
    1bee:	c4 2f       	mov	r28, r20
    1bf0:	60 91 26 07 	lds	r22, 0x0726	; 0x800726 <pxCurrentTCB>
    1bf4:	70 91 27 07 	lds	r23, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1bf8:	64 5f       	subi	r22, 0xF4	; 244
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    1c00:	cc 23       	and	r28, r28
    1c02:	11 f0       	breq	.+4      	; 0x1c08 <vTaskPlaceOnEventListRestricted+0x22>
    1c04:	0f ef       	ldi	r16, 0xFF	; 255
    1c06:	1f ef       	ldi	r17, 0xFF	; 255
    1c08:	6c 2f       	mov	r22, r28
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	5f dc       	rcall	.-1858   	; 0x14cc <prvAddCurrentTaskToDelayedList>
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	08 95       	ret

00001c16 <xTaskRemoveFromEventList>:
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	dc 01       	movw	r26, r24
    1c20:	15 96       	adiw	r26, 0x05	; 5
    1c22:	ed 91       	ld	r30, X+
    1c24:	fc 91       	ld	r31, X
    1c26:	16 97       	sbiw	r26, 0x06	; 6
    1c28:	c6 81       	ldd	r28, Z+6	; 0x06
    1c2a:	d7 81       	ldd	r29, Z+7	; 0x07
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	04 5f       	subi	r16, 0xF4	; 244
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    1c38:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1c3c:	81 11       	cpse	r24, r1
    1c3e:	1c c0       	rjmp	.+56     	; 0x1c78 <xTaskRemoveFromEventList+0x62>
    1c40:	0a 50       	subi	r16, 0x0A	; 10
    1c42:	11 09       	sbc	r17, r1
    1c44:	c8 01       	movw	r24, r16
    1c46:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    1c4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c4c:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1c50:	98 17       	cp	r25, r24
    1c52:	10 f4       	brcc	.+4      	; 0x1c58 <xTaskRemoveFromEventList+0x42>
    1c54:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	22 0f       	add	r18, r18
    1c62:	33 1f       	adc	r19, r19
    1c64:	22 0f       	add	r18, r18
    1c66:	33 1f       	adc	r19, r19
    1c68:	82 0f       	add	r24, r18
    1c6a:	93 1f       	adc	r25, r19
    1c6c:	b8 01       	movw	r22, r16
    1c6e:	8e 5f       	subi	r24, 0xFE	; 254
    1c70:	98 4f       	sbci	r25, 0xF8	; 248
    1c72:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <xTaskRemoveFromEventList+0x6c>
    1c78:	b8 01       	movw	r22, r16
    1c7a:	83 ee       	ldi	r24, 0xE3	; 227
    1c7c:	96 e0       	ldi	r25, 0x06	; 6
    1c7e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    1c82:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1c86:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1c8a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c8c:	86 89       	ldd	r24, Z+22	; 0x16
    1c8e:	89 17       	cp	r24, r25
    1c90:	20 f4       	brcc	.+8      	; 0x1c9a <xTaskRemoveFromEventList+0x84>
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1c98:	01 c0       	rjmp	.+2      	; 0x1c9c <xTaskRemoveFromEventList+0x86>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	08 95       	ret

00001ca6 <vTaskInternalSetTimeOutState>:
    1ca6:	20 91 c8 06 	lds	r18, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18
    1cae:	20 91 cd 06 	lds	r18, 0x06CD	; 0x8006cd <xTickCount>
    1cb2:	30 91 ce 06 	lds	r19, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1cb6:	32 83       	std	Z+2, r19	; 0x02
    1cb8:	21 83       	std	Z+1, r18	; 0x01
    1cba:	08 95       	ret

00001cbc <xTaskCheckForTimeOut>:
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	0f 92       	push	r0
    1cc6:	20 91 cd 06 	lds	r18, 0x06CD	; 0x8006cd <xTickCount>
    1cca:	30 91 ce 06 	lds	r19, 0x06CE	; 0x8006ce <xTickCount+0x1>
    1cce:	db 01       	movw	r26, r22
    1cd0:	4d 91       	ld	r20, X+
    1cd2:	5c 91       	ld	r21, X
    1cd4:	4f 3f       	cpi	r20, 0xFF	; 255
    1cd6:	bf ef       	ldi	r27, 0xFF	; 255
    1cd8:	5b 07       	cpc	r21, r27
    1cda:	e9 f0       	breq	.+58     	; 0x1d16 <xTaskCheckForTimeOut+0x5a>
    1cdc:	ec 01       	movw	r28, r24
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    1ce6:	b8 81       	ld	r27, Y
    1ce8:	ba 17       	cp	r27, r26
    1cea:	19 f0       	breq	.+6      	; 0x1cf2 <xTaskCheckForTimeOut+0x36>
    1cec:	2e 17       	cp	r18, r30
    1cee:	3f 07       	cpc	r19, r31
    1cf0:	a0 f4       	brcc	.+40     	; 0x1d1a <xTaskCheckForTimeOut+0x5e>
    1cf2:	2e 1b       	sub	r18, r30
    1cf4:	3f 0b       	sbc	r19, r31
    1cf6:	24 17       	cp	r18, r20
    1cf8:	35 07       	cpc	r19, r21
    1cfa:	40 f4       	brcc	.+16     	; 0x1d0c <xTaskCheckForTimeOut+0x50>
    1cfc:	fb 01       	movw	r30, r22
    1cfe:	42 1b       	sub	r20, r18
    1d00:	53 0b       	sbc	r21, r19
    1d02:	51 83       	std	Z+1, r21	; 0x01
    1d04:	40 83       	st	Z, r20
    1d06:	cf df       	rcall	.-98     	; 0x1ca6 <vTaskInternalSetTimeOutState>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <xTaskCheckForTimeOut+0x60>
    1d0c:	fb 01       	movw	r30, r22
    1d0e:	11 82       	std	Z+1, r1	; 0x01
    1d10:	10 82       	st	Z, r1
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <xTaskCheckForTimeOut+0x60>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <xTaskCheckForTimeOut+0x60>
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <vTaskMissedYield>:
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1d2c:	08 95       	ret

00001d2e <xTaskGetCurrentTaskHandle>:
    1d2e:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    1d32:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1d36:	08 95       	ret

00001d38 <xTaskGetSchedulerState>:
    1d38:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <xSchedulerRunning>
    1d3c:	88 23       	and	r24, r24
    1d3e:	31 f0       	breq	.+12     	; 0x1d4c <xTaskGetSchedulerState+0x14>
    1d40:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1d44:	88 23       	and	r24, r24
    1d46:	21 f0       	breq	.+8      	; 0x1d50 <xTaskGetSchedulerState+0x18>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	08 95       	ret
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	08 95       	ret
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	08 95       	ret

00001d54 <xTaskPriorityDisinherit>:
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	89 2b       	or	r24, r25
    1d60:	79 f1       	breq	.+94     	; 0x1dc0 <xTaskPriorityDisinherit+0x6c>
    1d62:	84 a1       	ldd	r24, Z+36	; 0x24
    1d64:	81 50       	subi	r24, 0x01	; 1
    1d66:	84 a3       	std	Z+36, r24	; 0x24
    1d68:	26 89       	ldd	r18, Z+22	; 0x16
    1d6a:	93 a1       	ldd	r25, Z+35	; 0x23
    1d6c:	29 17       	cp	r18, r25
    1d6e:	51 f1       	breq	.+84     	; 0x1dc4 <xTaskPriorityDisinherit+0x70>
    1d70:	81 11       	cpse	r24, r1
    1d72:	2a c0       	rjmp	.+84     	; 0x1dc8 <xTaskPriorityDisinherit+0x74>
    1d74:	ef 01       	movw	r28, r30
    1d76:	8f 01       	movw	r16, r30
    1d78:	0e 5f       	subi	r16, 0xFE	; 254
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    1d82:	8b a1       	ldd	r24, Y+35	; 0x23
    1d84:	8e 8b       	std	Y+22, r24	; 0x16
    1d86:	24 e0       	ldi	r18, 0x04	; 4
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	28 1b       	sub	r18, r24
    1d8c:	31 09       	sbc	r19, r1
    1d8e:	3d 87       	std	Y+13, r19	; 0x0d
    1d90:	2c 87       	std	Y+12, r18	; 0x0c
    1d92:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1d96:	98 17       	cp	r25, r24
    1d98:	10 f4       	brcc	.+4      	; 0x1d9e <xTaskPriorityDisinherit+0x4a>
    1d9a:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9c 01       	movw	r18, r24
    1da2:	22 0f       	add	r18, r18
    1da4:	33 1f       	adc	r19, r19
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	22 0f       	add	r18, r18
    1dac:	33 1f       	adc	r19, r19
    1dae:	82 0f       	add	r24, r18
    1db0:	93 1f       	adc	r25, r19
    1db2:	b8 01       	movw	r22, r16
    1db4:	8e 5f       	subi	r24, 0xFE	; 254
    1db6:	98 4f       	sbci	r25, 0xF8	; 248
    1db8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	05 c0       	rjmp	.+10     	; 0x1dca <xTaskPriorityDisinherit+0x76>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <xTaskPriorityDisinherit+0x76>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <xTaskPriorityDisinherit+0x76>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	08 95       	ret

00001dd4 <xTaskNotifyWait>:
    1dd4:	4f 92       	push	r4
    1dd6:	5f 92       	push	r5
    1dd8:	6f 92       	push	r6
    1dda:	7f 92       	push	r7
    1ddc:	8f 92       	push	r8
    1dde:	9f 92       	push	r9
    1de0:	af 92       	push	r10
    1de2:	bf 92       	push	r11
    1de4:	ef 92       	push	r14
    1de6:	ff 92       	push	r15
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	49 01       	movw	r8, r18
    1dee:	5a 01       	movw	r10, r20
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	0f 92       	push	r0
    1df6:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1dfa:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1dfe:	23 a5       	ldd	r18, Z+43	; 0x2b
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	21 f1       	breq	.+72     	; 0x1e4c <xTaskNotifyWait+0x78>
    1e04:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e08:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e0c:	47 a0       	ldd	r4, Z+39	; 0x27
    1e0e:	50 a4       	ldd	r5, Z+40	; 0x28
    1e10:	61 a4       	ldd	r6, Z+41	; 0x29
    1e12:	72 a4       	ldd	r7, Z+42	; 0x2a
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	80 95       	com	r24
    1e1a:	90 95       	com	r25
    1e1c:	a0 95       	com	r26
    1e1e:	b0 95       	com	r27
    1e20:	84 21       	and	r24, r4
    1e22:	95 21       	and	r25, r5
    1e24:	a6 21       	and	r26, r6
    1e26:	b7 21       	and	r27, r7
    1e28:	87 a3       	std	Z+39, r24	; 0x27
    1e2a:	90 a7       	std	Z+40, r25	; 0x28
    1e2c:	a1 a7       	std	Z+41, r26	; 0x29
    1e2e:	b2 a7       	std	Z+42, r27	; 0x2a
    1e30:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e34:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	83 a7       	std	Z+43, r24	; 0x2b
    1e3c:	e1 14       	cp	r14, r1
    1e3e:	f1 04       	cpc	r15, r1
    1e40:	29 f0       	breq	.+10     	; 0x1e4c <xTaskNotifyWait+0x78>
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	c7 01       	movw	r24, r14
    1e46:	42 db       	rcall	.-2428   	; 0x14cc <prvAddCurrentTaskToDelayedList>
    1e48:	0e 94 a1 04 	call	0x942	; 0x942 <vPortYield>
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	0f 92       	push	r0
    1e56:	01 15       	cp	r16, r1
    1e58:	11 05       	cpc	r17, r1
    1e5a:	69 f0       	breq	.+26     	; 0x1e76 <xTaskNotifyWait+0xa2>
    1e5c:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e60:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e64:	87 a1       	ldd	r24, Z+39	; 0x27
    1e66:	90 a5       	ldd	r25, Z+40	; 0x28
    1e68:	a1 a5       	ldd	r26, Z+41	; 0x29
    1e6a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
    1e76:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e7a:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e7e:	83 a5       	ldd	r24, Z+43	; 0x2b
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	b1 f4       	brne	.+44     	; 0x1eb0 <xTaskNotifyWait+0xdc>
    1e84:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1e88:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1e8c:	87 a1       	ldd	r24, Z+39	; 0x27
    1e8e:	90 a5       	ldd	r25, Z+40	; 0x28
    1e90:	a1 a5       	ldd	r26, Z+41	; 0x29
    1e92:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1e94:	80 94       	com	r8
    1e96:	90 94       	com	r9
    1e98:	a0 94       	com	r10
    1e9a:	b0 94       	com	r11
    1e9c:	88 22       	and	r8, r24
    1e9e:	99 22       	and	r9, r25
    1ea0:	aa 22       	and	r10, r26
    1ea2:	bb 22       	and	r11, r27
    1ea4:	87 a2       	std	Z+39, r8	; 0x27
    1ea6:	90 a6       	std	Z+40, r9	; 0x28
    1ea8:	a1 a6       	std	Z+41, r10	; 0x29
    1eaa:	b2 a6       	std	Z+42, r11	; 0x2a
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <xTaskNotifyWait+0xde>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1eb6:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1eba:	13 a6       	std	Z+43, r1	; 0x2b
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	9f 90       	pop	r9
    1ece:	8f 90       	pop	r8
    1ed0:	7f 90       	pop	r7
    1ed2:	6f 90       	pop	r6
    1ed4:	5f 90       	pop	r5
    1ed6:	4f 90       	pop	r4
    1ed8:	08 95       	ret

00001eda <xTaskGenericNotify>:
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	0f 92       	push	r0
    1eea:	01 15       	cp	r16, r1
    1eec:	11 05       	cpc	r17, r1
    1eee:	49 f0       	breq	.+18     	; 0x1f02 <xTaskGenericNotify+0x28>
    1ef0:	87 a1       	ldd	r24, Z+39	; 0x27
    1ef2:	90 a5       	ldd	r25, Z+40	; 0x28
    1ef4:	a1 a5       	ldd	r26, Z+41	; 0x29
    1ef6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1ef8:	e8 01       	movw	r28, r16
    1efa:	88 83       	st	Y, r24
    1efc:	99 83       	std	Y+1, r25	; 0x01
    1efe:	aa 83       	std	Y+2, r26	; 0x02
    1f00:	bb 83       	std	Y+3, r27	; 0x03
    1f02:	83 a5       	ldd	r24, Z+43	; 0x2b
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	93 a7       	std	Z+43, r25	; 0x2b
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	b1 f0       	breq	.+44     	; 0x1f38 <xTaskGenericNotify+0x5e>
    1f0c:	18 f4       	brcc	.+6      	; 0x1f14 <xTaskGenericNotify+0x3a>
    1f0e:	21 30       	cpi	r18, 0x01	; 1
    1f10:	31 f0       	breq	.+12     	; 0x1f1e <xTaskGenericNotify+0x44>
    1f12:	2a c0       	rjmp	.+84     	; 0x1f68 <xTaskGenericNotify+0x8e>
    1f14:	23 30       	cpi	r18, 0x03	; 3
    1f16:	e9 f0       	breq	.+58     	; 0x1f52 <xTaskGenericNotify+0x78>
    1f18:	24 30       	cpi	r18, 0x04	; 4
    1f1a:	01 f1       	breq	.+64     	; 0x1f5c <xTaskGenericNotify+0x82>
    1f1c:	25 c0       	rjmp	.+74     	; 0x1f68 <xTaskGenericNotify+0x8e>
    1f1e:	07 a1       	ldd	r16, Z+39	; 0x27
    1f20:	10 a5       	ldd	r17, Z+40	; 0x28
    1f22:	21 a5       	ldd	r18, Z+41	; 0x29
    1f24:	32 a5       	ldd	r19, Z+42	; 0x2a
    1f26:	40 2b       	or	r20, r16
    1f28:	51 2b       	or	r21, r17
    1f2a:	62 2b       	or	r22, r18
    1f2c:	73 2b       	or	r23, r19
    1f2e:	47 a3       	std	Z+39, r20	; 0x27
    1f30:	50 a7       	std	Z+40, r21	; 0x28
    1f32:	61 a7       	std	Z+41, r22	; 0x29
    1f34:	72 a7       	std	Z+42, r23	; 0x2a
    1f36:	18 c0       	rjmp	.+48     	; 0x1f68 <xTaskGenericNotify+0x8e>
    1f38:	47 a1       	ldd	r20, Z+39	; 0x27
    1f3a:	50 a5       	ldd	r21, Z+40	; 0x28
    1f3c:	61 a5       	ldd	r22, Z+41	; 0x29
    1f3e:	72 a5       	ldd	r23, Z+42	; 0x2a
    1f40:	4f 5f       	subi	r20, 0xFF	; 255
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255
    1f44:	6f 4f       	sbci	r22, 0xFF	; 255
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	47 a3       	std	Z+39, r20	; 0x27
    1f4a:	50 a7       	std	Z+40, r21	; 0x28
    1f4c:	61 a7       	std	Z+41, r22	; 0x29
    1f4e:	72 a7       	std	Z+42, r23	; 0x2a
    1f50:	0b c0       	rjmp	.+22     	; 0x1f68 <xTaskGenericNotify+0x8e>
    1f52:	47 a3       	std	Z+39, r20	; 0x27
    1f54:	50 a7       	std	Z+40, r21	; 0x28
    1f56:	61 a7       	std	Z+41, r22	; 0x29
    1f58:	72 a7       	std	Z+42, r23	; 0x2a
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <xTaskGenericNotify+0x8e>
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	79 f1       	breq	.+94     	; 0x1fbe <xTaskGenericNotify+0xe4>
    1f60:	47 a3       	std	Z+39, r20	; 0x27
    1f62:	50 a7       	std	Z+40, r21	; 0x28
    1f64:	61 a7       	std	Z+41, r22	; 0x29
    1f66:	72 a7       	std	Z+42, r23	; 0x2a
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	59 f5       	brne	.+86     	; 0x1fc2 <xTaskGenericNotify+0xe8>
    1f6c:	ef 01       	movw	r28, r30
    1f6e:	8f 01       	movw	r16, r30
    1f70:	0e 5f       	subi	r16, 0xFE	; 254
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	c8 01       	movw	r24, r16
    1f76:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    1f7a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f7c:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    1f80:	98 17       	cp	r25, r24
    1f82:	10 f4       	brcc	.+4      	; 0x1f88 <xTaskGenericNotify+0xae>
    1f84:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9c 01       	movw	r18, r24
    1f8c:	22 0f       	add	r18, r18
    1f8e:	33 1f       	adc	r19, r19
    1f90:	22 0f       	add	r18, r18
    1f92:	33 1f       	adc	r19, r19
    1f94:	22 0f       	add	r18, r18
    1f96:	33 1f       	adc	r19, r19
    1f98:	82 0f       	add	r24, r18
    1f9a:	93 1f       	adc	r25, r19
    1f9c:	b8 01       	movw	r22, r16
    1f9e:	8e 5f       	subi	r24, 0xFE	; 254
    1fa0:	98 4f       	sbci	r25, 0xF8	; 248
    1fa2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    1fa6:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    1faa:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    1fae:	9e 89       	ldd	r25, Y+22	; 0x16
    1fb0:	86 89       	ldd	r24, Z+22	; 0x16
    1fb2:	89 17       	cp	r24, r25
    1fb4:	40 f4       	brcc	.+16     	; 0x1fc6 <xTaskGenericNotify+0xec>
    1fb6:	0e 94 a1 04 	call	0x942	; 0x942 <vPortYield>
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	05 c0       	rjmp	.+10     	; 0x1fc8 <xTaskGenericNotify+0xee>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <xTaskGenericNotify+0xee>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <xTaskGenericNotify+0xee>
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	08 95       	ret

00001fd6 <xTaskGenericNotifyFromISR>:
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	01 15       	cp	r16, r1
    1fe6:	11 05       	cpc	r17, r1
    1fe8:	49 f0       	breq	.+18     	; 0x1ffc <xTaskGenericNotifyFromISR+0x26>
    1fea:	87 a1       	ldd	r24, Z+39	; 0x27
    1fec:	90 a5       	ldd	r25, Z+40	; 0x28
    1fee:	a1 a5       	ldd	r26, Z+41	; 0x29
    1ff0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1ff2:	e8 01       	movw	r28, r16
    1ff4:	88 83       	st	Y, r24
    1ff6:	99 83       	std	Y+1, r25	; 0x01
    1ff8:	aa 83       	std	Y+2, r26	; 0x02
    1ffa:	bb 83       	std	Y+3, r27	; 0x03
    1ffc:	83 a5       	ldd	r24, Z+43	; 0x2b
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	93 a7       	std	Z+43, r25	; 0x2b
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	b1 f0       	breq	.+44     	; 0x2032 <xTaskGenericNotifyFromISR+0x5c>
    2006:	18 f4       	brcc	.+6      	; 0x200e <xTaskGenericNotifyFromISR+0x38>
    2008:	21 30       	cpi	r18, 0x01	; 1
    200a:	31 f0       	breq	.+12     	; 0x2018 <xTaskGenericNotifyFromISR+0x42>
    200c:	2b c0       	rjmp	.+86     	; 0x2064 <xTaskGenericNotifyFromISR+0x8e>
    200e:	23 30       	cpi	r18, 0x03	; 3
    2010:	e9 f0       	breq	.+58     	; 0x204c <xTaskGenericNotifyFromISR+0x76>
    2012:	24 30       	cpi	r18, 0x04	; 4
    2014:	01 f1       	breq	.+64     	; 0x2056 <xTaskGenericNotifyFromISR+0x80>
    2016:	26 c0       	rjmp	.+76     	; 0x2064 <xTaskGenericNotifyFromISR+0x8e>
    2018:	07 a1       	ldd	r16, Z+39	; 0x27
    201a:	10 a5       	ldd	r17, Z+40	; 0x28
    201c:	21 a5       	ldd	r18, Z+41	; 0x29
    201e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2020:	40 2b       	or	r20, r16
    2022:	51 2b       	or	r21, r17
    2024:	62 2b       	or	r22, r18
    2026:	73 2b       	or	r23, r19
    2028:	47 a3       	std	Z+39, r20	; 0x27
    202a:	50 a7       	std	Z+40, r21	; 0x28
    202c:	61 a7       	std	Z+41, r22	; 0x29
    202e:	72 a7       	std	Z+42, r23	; 0x2a
    2030:	19 c0       	rjmp	.+50     	; 0x2064 <xTaskGenericNotifyFromISR+0x8e>
    2032:	47 a1       	ldd	r20, Z+39	; 0x27
    2034:	50 a5       	ldd	r21, Z+40	; 0x28
    2036:	61 a5       	ldd	r22, Z+41	; 0x29
    2038:	72 a5       	ldd	r23, Z+42	; 0x2a
    203a:	4f 5f       	subi	r20, 0xFF	; 255
    203c:	5f 4f       	sbci	r21, 0xFF	; 255
    203e:	6f 4f       	sbci	r22, 0xFF	; 255
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	47 a3       	std	Z+39, r20	; 0x27
    2044:	50 a7       	std	Z+40, r21	; 0x28
    2046:	61 a7       	std	Z+41, r22	; 0x29
    2048:	72 a7       	std	Z+42, r23	; 0x2a
    204a:	0c c0       	rjmp	.+24     	; 0x2064 <xTaskGenericNotifyFromISR+0x8e>
    204c:	47 a3       	std	Z+39, r20	; 0x27
    204e:	50 a7       	std	Z+40, r21	; 0x28
    2050:	61 a7       	std	Z+41, r22	; 0x29
    2052:	72 a7       	std	Z+42, r23	; 0x2a
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <xTaskGenericNotifyFromISR+0x8e>
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	09 f4       	brne	.+2      	; 0x205c <xTaskGenericNotifyFromISR+0x86>
    205a:	41 c0       	rjmp	.+130    	; 0x20de <xTaskGenericNotifyFromISR+0x108>
    205c:	47 a3       	std	Z+39, r20	; 0x27
    205e:	50 a7       	std	Z+40, r21	; 0x28
    2060:	61 a7       	std	Z+41, r22	; 0x29
    2062:	72 a7       	std	Z+42, r23	; 0x2a
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	e9 f5       	brne	.+122    	; 0x20e2 <xTaskGenericNotifyFromISR+0x10c>
    2068:	ef 01       	movw	r28, r30
    206a:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    206e:	81 11       	cpse	r24, r1
    2070:	1d c0       	rjmp	.+58     	; 0x20ac <xTaskGenericNotifyFromISR+0xd6>
    2072:	8f 01       	movw	r16, r30
    2074:	0e 5f       	subi	r16, 0xFE	; 254
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	c8 01       	movw	r24, r16
    207a:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
    207e:	8e 89       	ldd	r24, Y+22	; 0x16
    2080:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <uxTopReadyPriority>
    2084:	98 17       	cp	r25, r24
    2086:	10 f4       	brcc	.+4      	; 0x208c <xTaskGenericNotifyFromISR+0xb6>
    2088:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <uxTopReadyPriority>
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9c 01       	movw	r18, r24
    2090:	22 0f       	add	r18, r18
    2092:	33 1f       	adc	r19, r19
    2094:	22 0f       	add	r18, r18
    2096:	33 1f       	adc	r19, r19
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	82 0f       	add	r24, r18
    209e:	93 1f       	adc	r25, r19
    20a0:	b8 01       	movw	r22, r16
    20a2:	8e 5f       	subi	r24, 0xFE	; 254
    20a4:	98 4f       	sbci	r25, 0xF8	; 248
    20a6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    20aa:	07 c0       	rjmp	.+14     	; 0x20ba <xTaskGenericNotifyFromISR+0xe4>
    20ac:	bf 01       	movw	r22, r30
    20ae:	64 5f       	subi	r22, 0xF4	; 244
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	83 ee       	ldi	r24, 0xE3	; 227
    20b4:	96 e0       	ldi	r25, 0x06	; 6
    20b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vListInsertEnd>
    20ba:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxCurrentTCB>
    20be:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxCurrentTCB+0x1>
    20c2:	9e 89       	ldd	r25, Y+22	; 0x16
    20c4:	86 89       	ldd	r24, Z+22	; 0x16
    20c6:	89 17       	cp	r24, r25
    20c8:	70 f4       	brcc	.+28     	; 0x20e6 <xTaskGenericNotifyFromISR+0x110>
    20ca:	e1 14       	cp	r14, r1
    20cc:	f1 04       	cpc	r15, r1
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <xTaskGenericNotifyFromISR+0x100>
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	f7 01       	movw	r30, r14
    20d4:	80 83       	st	Z, r24
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    20dc:	05 c0       	rjmp	.+10     	; 0x20e8 <xTaskGenericNotifyFromISR+0x112>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	03 c0       	rjmp	.+6      	; 0x20e8 <xTaskGenericNotifyFromISR+0x112>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <xTaskGenericNotifyFromISR+0x112>
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	08 95       	ret

000020f6 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	21 f4       	brne	.+8      	; 0x2102 <xTaskNotifyStateClear+0xc>
    20fa:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxCurrentTCB>
    20fe:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2108:	fc 01       	movw	r30, r24
    210a:	23 a5       	ldd	r18, Z+43	; 0x2b
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	19 f4       	brne	.+6      	; 0x2116 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2110:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2116:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    211c:	08 95       	ret

0000211e <prvInsertTimerInActiveList>:
    211e:	fc 01       	movw	r30, r24
    2120:	73 83       	std	Z+3, r23	; 0x03
    2122:	62 83       	std	Z+2, r22	; 0x02
    2124:	91 87       	std	Z+9, r25	; 0x09
    2126:	80 87       	std	Z+8, r24	; 0x08
    2128:	46 17       	cp	r20, r22
    212a:	57 07       	cpc	r21, r23
    212c:	90 f0       	brcs	.+36     	; 0x2152 <prvInsertTimerInActiveList+0x34>
    212e:	42 1b       	sub	r20, r18
    2130:	53 0b       	sbc	r21, r19
    2132:	84 85       	ldd	r24, Z+12	; 0x0c
    2134:	95 85       	ldd	r25, Z+13	; 0x0d
    2136:	48 17       	cp	r20, r24
    2138:	59 07       	cpc	r21, r25
    213a:	e0 f4       	brcc	.+56     	; 0x2174 <prvInsertTimerInActiveList+0x56>
    213c:	bf 01       	movw	r22, r30
    213e:	6e 5f       	subi	r22, 0xFE	; 254
    2140:	7f 4f       	sbci	r23, 0xFF	; 255
    2142:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxOverflowTimerList>
    2146:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxOverflowTimerList+0x1>
    214a:	0e 94 9b 03 	call	0x736	; 0x736 <vListInsert>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	08 95       	ret
    2152:	42 17       	cp	r20, r18
    2154:	53 07       	cpc	r21, r19
    2156:	18 f4       	brcc	.+6      	; 0x215e <prvInsertTimerInActiveList+0x40>
    2158:	62 17       	cp	r22, r18
    215a:	73 07       	cpc	r23, r19
    215c:	68 f4       	brcc	.+26     	; 0x2178 <prvInsertTimerInActiveList+0x5a>
    215e:	bf 01       	movw	r22, r30
    2160:	6e 5f       	subi	r22, 0xFE	; 254
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <pxCurrentTimerList>
    2168:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
    216c:	0e 94 9b 03 	call	0x736	; 0x736 <vListInsert>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	08 95       	ret
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	08 95       	ret
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	08 95       	ret

0000217c <prvCheckForValidListAndQueue>:
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	0f 92       	push	r0
    2182:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    2186:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    218a:	89 2b       	or	r24, r25
    218c:	e9 f4       	brne	.+58     	; 0x21c8 <prvCheckForValidListAndQueue+0x4c>
    218e:	8b e3       	ldi	r24, 0x3B	; 59
    2190:	97 e0       	ldi	r25, 0x07	; 7
    2192:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    2196:	82 e3       	ldi	r24, 0x32	; 50
    2198:	97 e0       	ldi	r25, 0x07	; 7
    219a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    219e:	8b e3       	ldi	r24, 0x3B	; 59
    21a0:	97 e0       	ldi	r25, 0x07	; 7
    21a2:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <pxCurrentTimerList+0x1>
    21a6:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <pxCurrentTimerList>
    21aa:	82 e3       	ldi	r24, 0x32	; 50
    21ac:	97 e0       	ldi	r25, 0x07	; 7
    21ae:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <pxOverflowTimerList+0x1>
    21b2:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <pxOverflowTimerList>
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	65 e0       	ldi	r22, 0x05	; 5
    21ba:	8a e0       	ldi	r24, 0x0A	; 10
    21bc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <xQueueGenericCreate>
    21c0:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <xTimerQueue+0x1>
    21c4:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <xTimerQueue>
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	08 95       	ret

000021ce <xTimerCreateTimerTask>:
    21ce:	ef 92       	push	r14
    21d0:	ff 92       	push	r15
    21d2:	0f 93       	push	r16
    21d4:	d3 df       	rcall	.-90     	; 0x217c <prvCheckForValidListAndQueue>
    21d6:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    21da:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    21de:	89 2b       	or	r24, r25
    21e0:	89 f0       	breq	.+34     	; 0x2204 <__stack+0x5>
    21e2:	0f 2e       	mov	r0, r31
    21e4:	fa e2       	ldi	r31, 0x2A	; 42
    21e6:	ef 2e       	mov	r14, r31
    21e8:	f7 e0       	ldi	r31, 0x07	; 7
    21ea:	ff 2e       	mov	r15, r31
    21ec:	f0 2d       	mov	r31, r0
    21ee:	03 e0       	ldi	r16, 0x03	; 3
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	45 e5       	ldi	r20, 0x55	; 85
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	6b e6       	ldi	r22, 0x6B	; 107
    21fa:	73 e0       	ldi	r23, 0x03	; 3
    21fc:	83 e0       	ldi	r24, 0x03	; 3
    21fe:	91 e0       	ldi	r25, 0x01	; 1
    2200:	b9 d9       	rcall	.-3214   	; 0x1574 <xTaskCreate>
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <__stack+0x7>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	08 95       	ret

0000220e <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	00 d0       	rcall	.+0      	; 0x2218 <xTimerGenericCommand+0xa>
    2218:	1f 92       	push	r1
    221a:	1f 92       	push	r1
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2220:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <xTimerQueue>
    2224:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <xTimerQueue+0x1>
    2228:	30 97       	sbiw	r30, 0x00	; 0
    222a:	69 f1       	breq	.+90     	; 0x2286 <xTimerGenericCommand+0x78>
    222c:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    222e:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2230:	5b 83       	std	Y+3, r21	; 0x03
    2232:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2234:	9d 83       	std	Y+5, r25	; 0x05
    2236:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2238:	66 30       	cpi	r22, 0x06	; 6
    223a:	e4 f4       	brge	.+56     	; 0x2274 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    223c:	7d dd       	rcall	.-1286   	; 0x1d38 <xTaskGetSchedulerState>
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f4       	brne	.+24     	; 0x225a <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	a8 01       	movw	r20, r16
    2246:	be 01       	movw	r22, r28
    2248:	6f 5f       	subi	r22, 0xFF	; 255
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    2250:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    2254:	0e 94 a8 06 	call	0xd50	; 0xd50 <xQueueGenericSend>
    2258:	17 c0       	rjmp	.+46     	; 0x2288 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	be 01       	movw	r22, r28
    2262:	6f 5f       	subi	r22, 0xFF	; 255
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTimerQueue>
    226a:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTimerQueue+0x1>
    226e:	0e 94 a8 06 	call	0xd50	; 0xd50 <xQueueGenericSend>
    2272:	0a c0       	rjmp	.+20     	; 0x2288 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	ad 01       	movw	r20, r26
    2278:	be 01       	movw	r22, r28
    227a:	6f 5f       	subi	r22, 0xFF	; 255
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	cf 01       	movw	r24, r30
    2280:	0e 94 3a 07 	call	0xe74	; 0xe74 <xQueueGenericSendFromISR>
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2286:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	08 95       	ret

0000229c <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    229c:	af 92       	push	r10
    229e:	bf 92       	push	r11
    22a0:	cf 92       	push	r12
    22a2:	df 92       	push	r13
    22a4:	ef 92       	push	r14
    22a6:	ff 92       	push	r15
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    22b2:	a8 da       	rcall	.-2736   	; 0x1804 <xTaskGetTickCount>
    22b4:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    22b6:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <xLastTime.2432>
    22ba:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <xLastTime.2432+0x1>
    22be:	e8 16       	cp	r14, r24
    22c0:	f9 06       	cpc	r15, r25
    22c2:	08 f0       	brcs	.+2      	; 0x22c6 <prvSampleTimeNow+0x2a>
    22c4:	47 c0       	rjmp	.+142    	; 0x2354 <prvSampleTimeNow+0xb8>
    22c6:	2f c0       	rjmp	.+94     	; 0x2326 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    22c8:	05 80       	ldd	r0, Z+5	; 0x05
    22ca:	f6 81       	ldd	r31, Z+6	; 0x06
    22cc:	e0 2d       	mov	r30, r0
    22ce:	a0 80       	ld	r10, Z
    22d0:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    22d2:	c6 81       	ldd	r28, Z+6	; 0x06
    22d4:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22d6:	8e 01       	movw	r16, r28
    22d8:	0e 5f       	subi	r16, 0xFE	; 254
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	c8 01       	movw	r24, r16
    22de:	0e 94 cc 03 	call	0x798	; 0x798 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    22e2:	e8 89       	ldd	r30, Y+16	; 0x10
    22e4:	f9 89       	ldd	r31, Y+17	; 0x11
    22e6:	ce 01       	movw	r24, r28
    22e8:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    22ea:	8b 89       	ldd	r24, Y+19	; 0x13
    22ec:	82 ff       	sbrs	r24, 2
    22ee:	1b c0       	rjmp	.+54     	; 0x2326 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    22f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    22f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    22f4:	8a 0d       	add	r24, r10
    22f6:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    22f8:	a8 16       	cp	r10, r24
    22fa:	b9 06       	cpc	r11, r25
    22fc:	60 f4       	brcc	.+24     	; 0x2316 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    22fe:	9b 83       	std	Y+3, r25	; 0x03
    2300:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2302:	d9 87       	std	Y+9, r29	; 0x09
    2304:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2306:	b8 01       	movw	r22, r16
    2308:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <pxCurrentTimerList>
    230c:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
    2310:	0e 94 9b 03 	call	0x736	; 0x736 <vListInsert>
    2314:	08 c0       	rjmp	.+16     	; 0x2326 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2316:	00 e0       	ldi	r16, 0x00	; 0
    2318:	10 e0       	ldi	r17, 0x00	; 0
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	a5 01       	movw	r20, r10
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	ce 01       	movw	r24, r28
    2324:	74 df       	rcall	.-280    	; 0x220e <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2326:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxCurrentTimerList>
    232a:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxCurrentTimerList+0x1>
    232e:	80 81       	ld	r24, Z
    2330:	81 11       	cpse	r24, r1
    2332:	ca cf       	rjmp	.-108    	; 0x22c8 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2334:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxOverflowTimerList>
    2338:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxOverflowTimerList+0x1>
    233c:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <pxCurrentTimerList+0x1>
    2340:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2344:	f0 93 2f 07 	sts	0x072F, r31	; 0x80072f <pxOverflowTimerList+0x1>
    2348:	e0 93 2e 07 	sts	0x072E, r30	; 0x80072e <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	f6 01       	movw	r30, r12
    2350:	80 83       	st	Z, r24
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2354:	f6 01       	movw	r30, r12
    2356:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2358:	f0 92 29 07 	sts	0x0729, r15	; 0x800729 <xLastTime.2432+0x1>
    235c:	e0 92 28 07 	sts	0x0728, r14	; 0x800728 <xLastTime.2432>

    return xTimeNow;
}
    2360:	c7 01       	movw	r24, r14
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	ff 90       	pop	r15
    236c:	ef 90       	pop	r14
    236e:	df 90       	pop	r13
    2370:	cf 90       	pop	r12
    2372:	bf 90       	pop	r11
    2374:	af 90       	pop	r10
    2376:	08 95       	ret

00002378 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2378:	08 95       	ret

0000237a <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    237a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    237c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    237e:	2f ef       	ldi	r18, 0xFF	; 255
    2380:	80 e7       	ldi	r24, 0x70	; 112
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	21 50       	subi	r18, 0x01	; 1
    2386:	80 40       	sbci	r24, 0x00	; 0
    2388:	90 40       	sbci	r25, 0x00	; 0
    238a:	e1 f7       	brne	.-8      	; 0x2384 <vApplicationMallocFailedHook+0xa>
    238c:	00 c0       	rjmp	.+0      	; 0x238e <vApplicationMallocFailedHook+0x14>
    238e:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2390:	1f 9a       	sbi	0x03, 7	; 3
    2392:	f5 cf       	rjmp	.-22     	; 0x237e <vApplicationMallocFailedHook+0x4>

00002394 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2394:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2396:	2f 9a       	sbi	0x05, 7	; 5
    2398:	2f ef       	ldi	r18, 0xFF	; 255
    239a:	87 ea       	ldi	r24, 0xA7	; 167
    239c:	91 e6       	ldi	r25, 0x61	; 97
    239e:	21 50       	subi	r18, 0x01	; 1
    23a0:	80 40       	sbci	r24, 0x00	; 0
    23a2:	90 40       	sbci	r25, 0x00	; 0
    23a4:	e1 f7       	brne	.-8      	; 0x239e <vApplicationStackOverflowHook+0xa>
    23a6:	00 c0       	rjmp	.+0      	; 0x23a8 <vApplicationStackOverflowHook+0x14>
    23a8:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    23aa:	1f 9a       	sbi	0x03, 7	; 3
    23ac:	f5 cf       	rjmp	.-22     	; 0x2398 <vApplicationStackOverflowHook+0x4>

000023ae <main>:
//TimerHandle_t xTimer;
//SemaphoreHandle_t xMutex;

int main(void)
{
	stdioCreate(0);
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	29 d0       	rcall	.+82     	; 0x2404 <stdioCreate>
	
	sei(); // enables interrupts
    23b2:	78 94       	sei
	}*/
	
	//mh_z19_create(ser_USART3, my_co2_call_back); 
	//xMutex = xSemaphoreCreateMutex();
	//
	hal_create(LED_TASK_PRIORITY);
    23b4:	8a e0       	ldi	r24, 0x0A	; 10
    23b6:	f7 d3       	rcall	.+2030   	; 0x2ba6 <hal_create>
	lora_driver_create(ser_USART1);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	bb d6       	rcall	.+3446   	; 0x3134 <lora_driver_create>
	
	lora_handler_create(LORA_HANDLER_TASK_PRIORITY);
    23be:	87 e0       	ldi	r24, 0x07	; 7
    23c0:	0e 94 23 03 	call	0x646	; 0x646 <lora_handler_create>
	//configMINIMAL_STACK_SIZE, NULL,
	//tskIDLE_PRIORITY, NULL);
				
	//xMutex = xSemaphoreCreateMutex();
	//xTimerStart(xTimer,0);
	vTaskStartScheduler();
    23c4:	e7 d9       	rcall	.-3122   	; 0x1794 <vTaskStartScheduler>
    23c6:	ff cf       	rjmp	.-2      	; 0x23c6 <main+0x18>

000023c8 <usart_getchar>:
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	1f 92       	push	r1
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	be 01       	movw	r22, r28
    23d4:	6f 5f       	subi	r22, 0xFF	; 255
    23d6:	7f 4f       	sbci	r23, 0xFF	; 255
    23d8:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <_com_serial_instance>
    23dc:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <_com_serial_instance+0x1>
    23e0:	4f d1       	rcall	.+670    	; 0x2680 <serial_get_byte>
    23e2:	81 11       	cpse	r24, r1
    23e4:	f6 cf       	rjmp	.-20     	; 0x23d2 <usart_getchar+0xa>
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0f 90       	pop	r0
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	08 95       	ret

000023f2 <usart_putchar>:
    23f2:	68 2f       	mov	r22, r24
    23f4:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <_com_serial_instance>
    23f8:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <_com_serial_instance+0x1>
    23fc:	cc d0       	rcall	.+408    	; 0x2596 <serial_send_byte>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	08 95       	ret

00002404 <stdioCreate>:
    2404:	8f 92       	push	r8
    2406:	9f 92       	push	r9
    2408:	af 92       	push	r10
    240a:	cf 92       	push	r12
    240c:	ef 92       	push	r14
    240e:	0f 93       	push	r16
    2410:	81 2c       	mov	r8, r1
    2412:	91 2c       	mov	r9, r1
    2414:	68 94       	set
    2416:	aa 24       	eor	r10, r10
    2418:	a7 f8       	bld	r10, 7
    241a:	68 94       	set
    241c:	cc 24       	eor	r12, r12
    241e:	c7 f8       	bld	r12, 7
    2420:	e1 2c       	mov	r14, r1
    2422:	00 e0       	ldi	r16, 0x00	; 0
    2424:	23 e0       	ldi	r18, 0x03	; 3
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	51 ee       	ldi	r21, 0xE1	; 225
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	13 d0       	rcall	.+38     	; 0x2456 <serial_new_instance>
    2430:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <_com_serial_instance+0x1>
    2434:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <_com_serial_instance>
    2438:	e9 ea       	ldi	r30, 0xA9	; 169
    243a:	f8 e0       	ldi	r31, 0x08	; 8
    243c:	86 e0       	ldi	r24, 0x06	; 6
    243e:	92 e0       	ldi	r25, 0x02	; 2
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
    2444:	93 83       	std	Z+3, r25	; 0x03
    2446:	82 83       	std	Z+2, r24	; 0x02
    2448:	0f 91       	pop	r16
    244a:	ef 90       	pop	r14
    244c:	cf 90       	pop	r12
    244e:	af 90       	pop	r10
    2450:	9f 90       	pop	r9
    2452:	8f 90       	pop	r8
    2454:	08 95       	ret

00002456 <serial_new_instance>:
    2456:	2f 92       	push	r2
    2458:	3f 92       	push	r3
    245a:	4f 92       	push	r4
    245c:	5f 92       	push	r5
    245e:	6f 92       	push	r6
    2460:	7f 92       	push	r7
    2462:	8f 92       	push	r8
    2464:	9f 92       	push	r9
    2466:	af 92       	push	r10
    2468:	cf 92       	push	r12
    246a:	ef 92       	push	r14
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	f8 2e       	mov	r15, r24
    247c:	2a 01       	movw	r4, r20
    247e:	3b 01       	movw	r6, r22
    2480:	88 e0       	ldi	r24, 0x08	; 8
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <malloc>
    2488:	8c 01       	movw	r16, r24
    248a:	8f 2d       	mov	r24, r15
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	fc 01       	movw	r30, r24
    2494:	ea 5b       	subi	r30, 0xBA	; 186
    2496:	f8 4f       	sbci	r31, 0xF8	; 248
    2498:	11 83       	std	Z+1, r17	; 0x01
    249a:	00 83       	st	Z, r16
    249c:	fc 01       	movw	r30, r24
    249e:	ec 5e       	subi	r30, 0xEC	; 236
    24a0:	fd 4f       	sbci	r31, 0xFD	; 253
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	d8 01       	movw	r26, r16
    24a8:	8d 93       	st	X+, r24
    24aa:	9c 93       	st	X, r25
    24ac:	6c 2d       	mov	r22, r12
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	84 e0       	ldi	r24, 0x04	; 4
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <calloc>
    24b8:	1c 01       	movw	r2, r24
    24ba:	61 e0       	ldi	r22, 0x01	; 1
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	86 e0       	ldi	r24, 0x06	; 6
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <calloc>
    24c6:	7c 01       	movw	r14, r24
    24c8:	4c 2d       	mov	r20, r12
    24ca:	b1 01       	movw	r22, r2
    24cc:	4d d3       	rcall	.+1690   	; 0x2b68 <fifo_init>
    24ce:	f8 01       	movw	r30, r16
    24d0:	f5 82       	std	Z+5, r15	; 0x05
    24d2:	e4 82       	std	Z+4, r14	; 0x04
    24d4:	6a 2d       	mov	r22, r10
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	84 e0       	ldi	r24, 0x04	; 4
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <calloc>
    24e0:	1c 01       	movw	r2, r24
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	86 e0       	ldi	r24, 0x06	; 6
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <calloc>
    24ee:	7c 01       	movw	r14, r24
    24f0:	4a 2d       	mov	r20, r10
    24f2:	b1 01       	movw	r22, r2
    24f4:	39 d3       	rcall	.+1650   	; 0x2b68 <fifo_init>
    24f6:	d8 01       	movw	r26, r16
    24f8:	13 96       	adiw	r26, 0x03	; 3
    24fa:	fc 92       	st	X, r15
    24fc:	ee 92       	st	-X, r14
    24fe:	12 97       	sbiw	r26, 0x02	; 2
    2500:	17 96       	adiw	r26, 0x07	; 7
    2502:	9c 92       	st	X, r9
    2504:	8e 92       	st	-X, r8
    2506:	16 97       	sbiw	r26, 0x06	; 6
    2508:	ff b6       	in	r15, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	ed 91       	ld	r30, X+
    250e:	fc 91       	ld	r31, X
    2510:	11 97       	sbiw	r26, 0x01	; 1
    2512:	36 97       	sbiw	r30, 0x06	; 6
    2514:	80 81       	ld	r24, Z
    2516:	82 60       	ori	r24, 0x02	; 2
    2518:	80 83       	st	Z, r24
    251a:	8d 90       	ld	r8, X+
    251c:	9c 90       	ld	r9, X
    251e:	c3 01       	movw	r24, r6
    2520:	b2 01       	movw	r22, r4
    2522:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <__floatunsisf>
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__mulsf3>
    2532:	9b 01       	movw	r18, r22
    2534:	ac 01       	movw	r20, r24
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	74 e2       	ldi	r23, 0x24	; 36
    253a:	84 e7       	ldi	r24, 0x74	; 116
    253c:	9b e4       	ldi	r25, 0x4B	; 75
    253e:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__divsf3>
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__subsf3>
    254e:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fixunssfsi>
    2552:	f4 01       	movw	r30, r8
    2554:	32 97       	sbiw	r30, 0x02	; 2
    2556:	60 83       	st	Z, r22
    2558:	d8 01       	movw	r26, r16
    255a:	ed 91       	ld	r30, X+
    255c:	fc 91       	ld	r31, X
    255e:	11 97       	sbiw	r26, 0x01	; 1
    2560:	35 97       	sbiw	r30, 0x05	; 5
    2562:	88 e9       	ldi	r24, 0x98	; 152
    2564:	80 83       	st	Z, r24
    2566:	ed 91       	ld	r30, X+
    2568:	fc 91       	ld	r31, X
    256a:	34 97       	sbiw	r30, 0x04	; 4
    256c:	86 e0       	ldi	r24, 0x06	; 6
    256e:	80 83       	st	Z, r24
    2570:	ff be       	out	0x3f, r15	; 63
    2572:	c8 01       	movw	r24, r16
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	cf 90       	pop	r12
    2582:	af 90       	pop	r10
    2584:	9f 90       	pop	r9
    2586:	8f 90       	pop	r8
    2588:	7f 90       	pop	r7
    258a:	6f 90       	pop	r6
    258c:	5f 90       	pop	r5
    258e:	4f 90       	pop	r4
    2590:	3f 90       	pop	r3
    2592:	2f 90       	pop	r2
    2594:	08 95       	ret

00002596 <serial_send_byte>:
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	ec 01       	movw	r28, r24
    259c:	ea 81       	ldd	r30, Y+2	; 0x02
    259e:	fb 81       	ldd	r31, Y+3	; 0x03
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	25 81       	ldd	r18, Z+5	; 0x05
    25a6:	98 1b       	sub	r25, r24
    25a8:	92 23       	and	r25, r18
    25aa:	84 81       	ldd	r24, Z+4	; 0x04
    25ac:	98 17       	cp	r25, r24
    25ae:	a1 f0       	breq	.+40     	; 0x25d8 <serial_send_byte+0x42>
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	26 95       	lsr	r18
    25b4:	29 23       	and	r18, r25
    25b6:	a0 81       	ld	r26, Z
    25b8:	b1 81       	ldd	r27, Z+1	; 0x01
    25ba:	a2 0f       	add	r26, r18
    25bc:	b1 1d       	adc	r27, r1
    25be:	6c 93       	st	X, r22
    25c0:	9f 5f       	subi	r25, 0xFF	; 255
    25c2:	25 81       	ldd	r18, Z+5	; 0x05
    25c4:	92 23       	and	r25, r18
    25c6:	93 83       	std	Z+3, r25	; 0x03
    25c8:	e8 81       	ld	r30, Y
    25ca:	f9 81       	ldd	r31, Y+1	; 0x01
    25cc:	35 97       	sbiw	r30, 0x05	; 5
    25ce:	80 81       	ld	r24, Z
    25d0:	80 62       	ori	r24, 0x20	; 32
    25d2:	80 83       	st	Z, r24
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	01 c0       	rjmp	.+2      	; 0x25da <serial_send_byte+0x44>
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	08 95       	ret

000025e0 <serial_send_bytes>:
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	7c 01       	movw	r14, r24
    25ee:	dc 01       	movw	r26, r24
    25f0:	12 96       	adiw	r26, 0x02	; 2
    25f2:	ed 91       	ld	r30, X+
    25f4:	fc 91       	ld	r31, X
    25f6:	13 97       	sbiw	r26, 0x03	; 3
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	98 1b       	sub	r25, r24
    25fe:	85 81       	ldd	r24, Z+5	; 0x05
    2600:	98 23       	and	r25, r24
    2602:	84 81       	ldd	r24, Z+4	; 0x04
    2604:	89 1b       	sub	r24, r25
    2606:	86 17       	cp	r24, r22
    2608:	98 f1       	brcs	.+102    	; 0x2670 <serial_send_bytes+0x90>
    260a:	66 23       	and	r22, r22
    260c:	41 f1       	breq	.+80     	; 0x265e <serial_send_bytes+0x7e>
    260e:	84 2f       	mov	r24, r20
    2610:	95 2f       	mov	r25, r21
    2612:	dc 01       	movw	r26, r24
    2614:	61 50       	subi	r22, 0x01	; 1
    2616:	46 2f       	mov	r20, r22
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	4f 5f       	subi	r20, 0xFF	; 255
    261c:	5f 4f       	sbci	r21, 0xFF	; 255
    261e:	48 0f       	add	r20, r24
    2620:	59 1f       	adc	r21, r25
    2622:	e7 01       	movw	r28, r14
    2624:	ea 81       	ldd	r30, Y+2	; 0x02
    2626:	fb 81       	ldd	r31, Y+3	; 0x03
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	25 81       	ldd	r18, Z+5	; 0x05
    262e:	98 1b       	sub	r25, r24
    2630:	92 23       	and	r25, r18
    2632:	84 81       	ldd	r24, Z+4	; 0x04
    2634:	98 17       	cp	r25, r24
    2636:	79 f0       	breq	.+30     	; 0x2656 <serial_send_bytes+0x76>
    2638:	8c 91       	ld	r24, X
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	26 95       	lsr	r18
    263e:	29 23       	and	r18, r25
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	8b 01       	movw	r16, r22
    2646:	02 0f       	add	r16, r18
    2648:	11 1d       	adc	r17, r1
    264a:	e8 01       	movw	r28, r16
    264c:	88 83       	st	Y, r24
    264e:	9f 5f       	subi	r25, 0xFF	; 255
    2650:	85 81       	ldd	r24, Z+5	; 0x05
    2652:	98 23       	and	r25, r24
    2654:	93 83       	std	Z+3, r25	; 0x03
    2656:	11 96       	adiw	r26, 0x01	; 1
    2658:	a4 17       	cp	r26, r20
    265a:	b5 07       	cpc	r27, r21
    265c:	11 f7       	brne	.-60     	; 0x2622 <serial_send_bytes+0x42>
    265e:	d7 01       	movw	r26, r14
    2660:	ed 91       	ld	r30, X+
    2662:	fc 91       	ld	r31, X
    2664:	35 97       	sbiw	r30, 0x05	; 5
    2666:	80 81       	ld	r24, Z
    2668:	80 62       	ori	r24, 0x20	; 32
    266a:	80 83       	st	Z, r24
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <serial_send_bytes+0x92>
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	08 95       	ret

00002680 <serial_get_byte>:
    2680:	dc 01       	movw	r26, r24
    2682:	14 96       	adiw	r26, 0x04	; 4
    2684:	ed 91       	ld	r30, X+
    2686:	fc 91       	ld	r31, X
    2688:	15 97       	sbiw	r26, 0x05	; 5
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	98 17       	cp	r25, r24
    2690:	89 f0       	breq	.+34     	; 0x26b4 <serial_get_byte+0x34>
    2692:	92 81       	ldd	r25, Z+2	; 0x02
    2694:	85 81       	ldd	r24, Z+5	; 0x05
    2696:	86 95       	lsr	r24
    2698:	89 23       	and	r24, r25
    269a:	a0 81       	ld	r26, Z
    269c:	b1 81       	ldd	r27, Z+1	; 0x01
    269e:	a8 0f       	add	r26, r24
    26a0:	b1 1d       	adc	r27, r1
    26a2:	8c 91       	ld	r24, X
    26a4:	db 01       	movw	r26, r22
    26a6:	8c 93       	st	X, r24
    26a8:	9f 5f       	subi	r25, 0xFF	; 255
    26aa:	85 81       	ldd	r24, Z+5	; 0x05
    26ac:	98 23       	and	r25, r24
    26ae:	92 83       	std	Z+2, r25	; 0x02
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	08 95       	ret
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	08 95       	ret

000026b8 <__vector_25>:
    26b8:	1f 92       	push	r1
    26ba:	0f 92       	push	r0
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	0f 92       	push	r0
    26c0:	11 24       	eor	r1, r1
    26c2:	0b b6       	in	r0, 0x3b	; 59
    26c4:	0f 92       	push	r0
    26c6:	2f 93       	push	r18
    26c8:	3f 93       	push	r19
    26ca:	4f 93       	push	r20
    26cc:	5f 93       	push	r21
    26ce:	6f 93       	push	r22
    26d0:	7f 93       	push	r23
    26d2:	8f 93       	push	r24
    26d4:	9f 93       	push	r25
    26d6:	af 93       	push	r26
    26d8:	bf 93       	push	r27
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	ef 93       	push	r30
    26e0:	ff 93       	push	r31
    26e2:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <_ser_handle>
    26e6:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <_ser_handle+0x1>
    26ea:	10 97       	sbiw	r26, 0x00	; 0
    26ec:	11 f1       	breq	.+68     	; 0x2732 <__vector_25+0x7a>
    26ee:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    26f2:	14 96       	adiw	r26, 0x04	; 4
    26f4:	ed 91       	ld	r30, X+
    26f6:	fc 91       	ld	r31, X
    26f8:	15 97       	sbiw	r26, 0x05	; 5
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	25 81       	ldd	r18, Z+5	; 0x05
    2700:	98 1b       	sub	r25, r24
    2702:	92 23       	and	r25, r18
    2704:	84 81       	ldd	r24, Z+4	; 0x04
    2706:	98 17       	cp	r25, r24
    2708:	61 f0       	breq	.+24     	; 0x2722 <__vector_25+0x6a>
    270a:	83 81       	ldd	r24, Z+3	; 0x03
    270c:	26 95       	lsr	r18
    270e:	28 23       	and	r18, r24
    2710:	c0 81       	ld	r28, Z
    2712:	d1 81       	ldd	r29, Z+1	; 0x01
    2714:	c2 0f       	add	r28, r18
    2716:	d1 1d       	adc	r29, r1
    2718:	68 83       	st	Y, r22
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	95 81       	ldd	r25, Z+5	; 0x05
    271e:	89 23       	and	r24, r25
    2720:	83 83       	std	Z+3, r24	; 0x03
    2722:	16 96       	adiw	r26, 0x06	; 6
    2724:	ed 91       	ld	r30, X+
    2726:	fc 91       	ld	r31, X
    2728:	17 97       	sbiw	r26, 0x07	; 7
    272a:	30 97       	sbiw	r30, 0x00	; 0
    272c:	11 f0       	breq	.+4      	; 0x2732 <__vector_25+0x7a>
    272e:	cd 01       	movw	r24, r26
    2730:	19 95       	eicall
    2732:	ff 91       	pop	r31
    2734:	ef 91       	pop	r30
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	bf 91       	pop	r27
    273c:	af 91       	pop	r26
    273e:	9f 91       	pop	r25
    2740:	8f 91       	pop	r24
    2742:	7f 91       	pop	r23
    2744:	6f 91       	pop	r22
    2746:	5f 91       	pop	r21
    2748:	4f 91       	pop	r20
    274a:	3f 91       	pop	r19
    274c:	2f 91       	pop	r18
    274e:	0f 90       	pop	r0
    2750:	0b be       	out	0x3b, r0	; 59
    2752:	0f 90       	pop	r0
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	0f 90       	pop	r0
    2758:	1f 90       	pop	r1
    275a:	18 95       	reti

0000275c <__vector_26>:
    275c:	1f 92       	push	r1
    275e:	0f 92       	push	r0
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	0f 92       	push	r0
    2764:	11 24       	eor	r1, r1
    2766:	0b b6       	in	r0, 0x3b	; 59
    2768:	0f 92       	push	r0
    276a:	2f 93       	push	r18
    276c:	8f 93       	push	r24
    276e:	9f 93       	push	r25
    2770:	af 93       	push	r26
    2772:	bf 93       	push	r27
    2774:	ef 93       	push	r30
    2776:	ff 93       	push	r31
    2778:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <_ser_handle>
    277c:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <_ser_handle+0x1>
    2780:	30 97       	sbiw	r30, 0x00	; 0
    2782:	b9 f0       	breq	.+46     	; 0x27b2 <__vector_26+0x56>
    2784:	02 80       	ldd	r0, Z+2	; 0x02
    2786:	f3 81       	ldd	r31, Z+3	; 0x03
    2788:	e0 2d       	mov	r30, r0
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	98 17       	cp	r25, r24
    2790:	b1 f0       	breq	.+44     	; 0x27be <__vector_26+0x62>
    2792:	92 81       	ldd	r25, Z+2	; 0x02
    2794:	85 81       	ldd	r24, Z+5	; 0x05
    2796:	28 2f       	mov	r18, r24
    2798:	26 95       	lsr	r18
    279a:	29 23       	and	r18, r25
    279c:	a0 81       	ld	r26, Z
    279e:	b1 81       	ldd	r27, Z+1	; 0x01
    27a0:	a2 0f       	add	r26, r18
    27a2:	b1 1d       	adc	r27, r1
    27a4:	2c 91       	ld	r18, X
    27a6:	9f 5f       	subi	r25, 0xFF	; 255
    27a8:	89 23       	and	r24, r25
    27aa:	82 83       	std	Z+2, r24	; 0x02
    27ac:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    27b0:	0b c0       	rjmp	.+22     	; 0x27c8 <__vector_26+0x6c>
    27b2:	e1 ec       	ldi	r30, 0xC1	; 193
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8f 7d       	andi	r24, 0xDF	; 223
    27ba:	80 83       	st	Z, r24
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <__vector_26+0x6c>
    27be:	e1 ec       	ldi	r30, 0xC1	; 193
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	8f 7d       	andi	r24, 0xDF	; 223
    27c6:	80 83       	st	Z, r24
    27c8:	ff 91       	pop	r31
    27ca:	ef 91       	pop	r30
    27cc:	bf 91       	pop	r27
    27ce:	af 91       	pop	r26
    27d0:	9f 91       	pop	r25
    27d2:	8f 91       	pop	r24
    27d4:	2f 91       	pop	r18
    27d6:	0f 90       	pop	r0
    27d8:	0b be       	out	0x3b, r0	; 59
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	0f 90       	pop	r0
    27e0:	1f 90       	pop	r1
    27e2:	18 95       	reti

000027e4 <__vector_36>:
    27e4:	1f 92       	push	r1
    27e6:	0f 92       	push	r0
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	0f 92       	push	r0
    27ec:	11 24       	eor	r1, r1
    27ee:	0b b6       	in	r0, 0x3b	; 59
    27f0:	0f 92       	push	r0
    27f2:	2f 93       	push	r18
    27f4:	3f 93       	push	r19
    27f6:	4f 93       	push	r20
    27f8:	5f 93       	push	r21
    27fa:	6f 93       	push	r22
    27fc:	7f 93       	push	r23
    27fe:	8f 93       	push	r24
    2800:	9f 93       	push	r25
    2802:	af 93       	push	r26
    2804:	bf 93       	push	r27
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	ef 93       	push	r30
    280c:	ff 93       	push	r31
    280e:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <_ser_handle+0x2>
    2812:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <_ser_handle+0x3>
    2816:	10 97       	sbiw	r26, 0x00	; 0
    2818:	11 f1       	breq	.+68     	; 0x285e <__vector_36+0x7a>
    281a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    281e:	14 96       	adiw	r26, 0x04	; 4
    2820:	ed 91       	ld	r30, X+
    2822:	fc 91       	ld	r31, X
    2824:	15 97       	sbiw	r26, 0x05	; 5
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	25 81       	ldd	r18, Z+5	; 0x05
    282c:	98 1b       	sub	r25, r24
    282e:	92 23       	and	r25, r18
    2830:	84 81       	ldd	r24, Z+4	; 0x04
    2832:	98 17       	cp	r25, r24
    2834:	61 f0       	breq	.+24     	; 0x284e <__vector_36+0x6a>
    2836:	83 81       	ldd	r24, Z+3	; 0x03
    2838:	26 95       	lsr	r18
    283a:	28 23       	and	r18, r24
    283c:	c0 81       	ld	r28, Z
    283e:	d1 81       	ldd	r29, Z+1	; 0x01
    2840:	c2 0f       	add	r28, r18
    2842:	d1 1d       	adc	r29, r1
    2844:	68 83       	st	Y, r22
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	95 81       	ldd	r25, Z+5	; 0x05
    284a:	89 23       	and	r24, r25
    284c:	83 83       	std	Z+3, r24	; 0x03
    284e:	16 96       	adiw	r26, 0x06	; 6
    2850:	ed 91       	ld	r30, X+
    2852:	fc 91       	ld	r31, X
    2854:	17 97       	sbiw	r26, 0x07	; 7
    2856:	30 97       	sbiw	r30, 0x00	; 0
    2858:	11 f0       	breq	.+4      	; 0x285e <__vector_36+0x7a>
    285a:	cd 01       	movw	r24, r26
    285c:	19 95       	eicall
    285e:	ff 91       	pop	r31
    2860:	ef 91       	pop	r30
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	bf 91       	pop	r27
    2868:	af 91       	pop	r26
    286a:	9f 91       	pop	r25
    286c:	8f 91       	pop	r24
    286e:	7f 91       	pop	r23
    2870:	6f 91       	pop	r22
    2872:	5f 91       	pop	r21
    2874:	4f 91       	pop	r20
    2876:	3f 91       	pop	r19
    2878:	2f 91       	pop	r18
    287a:	0f 90       	pop	r0
    287c:	0b be       	out	0x3b, r0	; 59
    287e:	0f 90       	pop	r0
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	0f 90       	pop	r0
    2884:	1f 90       	pop	r1
    2886:	18 95       	reti

00002888 <__vector_37>:
    2888:	1f 92       	push	r1
    288a:	0f 92       	push	r0
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	0f 92       	push	r0
    2890:	11 24       	eor	r1, r1
    2892:	0b b6       	in	r0, 0x3b	; 59
    2894:	0f 92       	push	r0
    2896:	2f 93       	push	r18
    2898:	8f 93       	push	r24
    289a:	9f 93       	push	r25
    289c:	af 93       	push	r26
    289e:	bf 93       	push	r27
    28a0:	ef 93       	push	r30
    28a2:	ff 93       	push	r31
    28a4:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <_ser_handle+0x2>
    28a8:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <_ser_handle+0x3>
    28ac:	30 97       	sbiw	r30, 0x00	; 0
    28ae:	b9 f0       	breq	.+46     	; 0x28de <__vector_37+0x56>
    28b0:	02 80       	ldd	r0, Z+2	; 0x02
    28b2:	f3 81       	ldd	r31, Z+3	; 0x03
    28b4:	e0 2d       	mov	r30, r0
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	98 17       	cp	r25, r24
    28bc:	b1 f0       	breq	.+44     	; 0x28ea <__vector_37+0x62>
    28be:	92 81       	ldd	r25, Z+2	; 0x02
    28c0:	85 81       	ldd	r24, Z+5	; 0x05
    28c2:	28 2f       	mov	r18, r24
    28c4:	26 95       	lsr	r18
    28c6:	29 23       	and	r18, r25
    28c8:	a0 81       	ld	r26, Z
    28ca:	b1 81       	ldd	r27, Z+1	; 0x01
    28cc:	a2 0f       	add	r26, r18
    28ce:	b1 1d       	adc	r27, r1
    28d0:	2c 91       	ld	r18, X
    28d2:	9f 5f       	subi	r25, 0xFF	; 255
    28d4:	89 23       	and	r24, r25
    28d6:	82 83       	std	Z+2, r24	; 0x02
    28d8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    28dc:	0b c0       	rjmp	.+22     	; 0x28f4 <__vector_37+0x6c>
    28de:	e9 ec       	ldi	r30, 0xC9	; 201
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	8f 7d       	andi	r24, 0xDF	; 223
    28e6:	80 83       	st	Z, r24
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <__vector_37+0x6c>
    28ea:	e9 ec       	ldi	r30, 0xC9	; 201
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	8f 7d       	andi	r24, 0xDF	; 223
    28f2:	80 83       	st	Z, r24
    28f4:	ff 91       	pop	r31
    28f6:	ef 91       	pop	r30
    28f8:	bf 91       	pop	r27
    28fa:	af 91       	pop	r26
    28fc:	9f 91       	pop	r25
    28fe:	8f 91       	pop	r24
    2900:	2f 91       	pop	r18
    2902:	0f 90       	pop	r0
    2904:	0b be       	out	0x3b, r0	; 59
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	0f 90       	pop	r0
    290c:	1f 90       	pop	r1
    290e:	18 95       	reti

00002910 <__vector_51>:
    2910:	1f 92       	push	r1
    2912:	0f 92       	push	r0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	0f 92       	push	r0
    2918:	11 24       	eor	r1, r1
    291a:	0b b6       	in	r0, 0x3b	; 59
    291c:	0f 92       	push	r0
    291e:	2f 93       	push	r18
    2920:	3f 93       	push	r19
    2922:	4f 93       	push	r20
    2924:	5f 93       	push	r21
    2926:	6f 93       	push	r22
    2928:	7f 93       	push	r23
    292a:	8f 93       	push	r24
    292c:	9f 93       	push	r25
    292e:	af 93       	push	r26
    2930:	bf 93       	push	r27
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	ef 93       	push	r30
    2938:	ff 93       	push	r31
    293a:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <_ser_handle+0x4>
    293e:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <_ser_handle+0x5>
    2942:	10 97       	sbiw	r26, 0x00	; 0
    2944:	11 f1       	breq	.+68     	; 0x298a <__vector_51+0x7a>
    2946:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    294a:	14 96       	adiw	r26, 0x04	; 4
    294c:	ed 91       	ld	r30, X+
    294e:	fc 91       	ld	r31, X
    2950:	15 97       	sbiw	r26, 0x05	; 5
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	25 81       	ldd	r18, Z+5	; 0x05
    2958:	98 1b       	sub	r25, r24
    295a:	92 23       	and	r25, r18
    295c:	84 81       	ldd	r24, Z+4	; 0x04
    295e:	98 17       	cp	r25, r24
    2960:	61 f0       	breq	.+24     	; 0x297a <__vector_51+0x6a>
    2962:	83 81       	ldd	r24, Z+3	; 0x03
    2964:	26 95       	lsr	r18
    2966:	28 23       	and	r18, r24
    2968:	c0 81       	ld	r28, Z
    296a:	d1 81       	ldd	r29, Z+1	; 0x01
    296c:	c2 0f       	add	r28, r18
    296e:	d1 1d       	adc	r29, r1
    2970:	68 83       	st	Y, r22
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	95 81       	ldd	r25, Z+5	; 0x05
    2976:	89 23       	and	r24, r25
    2978:	83 83       	std	Z+3, r24	; 0x03
    297a:	16 96       	adiw	r26, 0x06	; 6
    297c:	ed 91       	ld	r30, X+
    297e:	fc 91       	ld	r31, X
    2980:	17 97       	sbiw	r26, 0x07	; 7
    2982:	30 97       	sbiw	r30, 0x00	; 0
    2984:	11 f0       	breq	.+4      	; 0x298a <__vector_51+0x7a>
    2986:	cd 01       	movw	r24, r26
    2988:	19 95       	eicall
    298a:	ff 91       	pop	r31
    298c:	ef 91       	pop	r30
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	bf 91       	pop	r27
    2994:	af 91       	pop	r26
    2996:	9f 91       	pop	r25
    2998:	8f 91       	pop	r24
    299a:	7f 91       	pop	r23
    299c:	6f 91       	pop	r22
    299e:	5f 91       	pop	r21
    29a0:	4f 91       	pop	r20
    29a2:	3f 91       	pop	r19
    29a4:	2f 91       	pop	r18
    29a6:	0f 90       	pop	r0
    29a8:	0b be       	out	0x3b, r0	; 59
    29aa:	0f 90       	pop	r0
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	0f 90       	pop	r0
    29b0:	1f 90       	pop	r1
    29b2:	18 95       	reti

000029b4 <__vector_52>:
    29b4:	1f 92       	push	r1
    29b6:	0f 92       	push	r0
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	0f 92       	push	r0
    29bc:	11 24       	eor	r1, r1
    29be:	0b b6       	in	r0, 0x3b	; 59
    29c0:	0f 92       	push	r0
    29c2:	2f 93       	push	r18
    29c4:	8f 93       	push	r24
    29c6:	9f 93       	push	r25
    29c8:	af 93       	push	r26
    29ca:	bf 93       	push	r27
    29cc:	ef 93       	push	r30
    29ce:	ff 93       	push	r31
    29d0:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <_ser_handle+0x4>
    29d4:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <_ser_handle+0x5>
    29d8:	30 97       	sbiw	r30, 0x00	; 0
    29da:	b9 f0       	breq	.+46     	; 0x2a0a <__vector_52+0x56>
    29dc:	02 80       	ldd	r0, Z+2	; 0x02
    29de:	f3 81       	ldd	r31, Z+3	; 0x03
    29e0:	e0 2d       	mov	r30, r0
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	98 17       	cp	r25, r24
    29e8:	b1 f0       	breq	.+44     	; 0x2a16 <__vector_52+0x62>
    29ea:	92 81       	ldd	r25, Z+2	; 0x02
    29ec:	85 81       	ldd	r24, Z+5	; 0x05
    29ee:	28 2f       	mov	r18, r24
    29f0:	26 95       	lsr	r18
    29f2:	29 23       	and	r18, r25
    29f4:	a0 81       	ld	r26, Z
    29f6:	b1 81       	ldd	r27, Z+1	; 0x01
    29f8:	a2 0f       	add	r26, r18
    29fa:	b1 1d       	adc	r27, r1
    29fc:	2c 91       	ld	r18, X
    29fe:	9f 5f       	subi	r25, 0xFF	; 255
    2a00:	89 23       	and	r24, r25
    2a02:	82 83       	std	Z+2, r24	; 0x02
    2a04:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2a08:	0b c0       	rjmp	.+22     	; 0x2a20 <__vector_52+0x6c>
    2a0a:	e1 ed       	ldi	r30, 0xD1	; 209
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	8f 7d       	andi	r24, 0xDF	; 223
    2a12:	80 83       	st	Z, r24
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <__vector_52+0x6c>
    2a16:	e1 ed       	ldi	r30, 0xD1	; 209
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8f 7d       	andi	r24, 0xDF	; 223
    2a1e:	80 83       	st	Z, r24
    2a20:	ff 91       	pop	r31
    2a22:	ef 91       	pop	r30
    2a24:	bf 91       	pop	r27
    2a26:	af 91       	pop	r26
    2a28:	9f 91       	pop	r25
    2a2a:	8f 91       	pop	r24
    2a2c:	2f 91       	pop	r18
    2a2e:	0f 90       	pop	r0
    2a30:	0b be       	out	0x3b, r0	; 59
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	0f 90       	pop	r0
    2a38:	1f 90       	pop	r1
    2a3a:	18 95       	reti

00002a3c <__vector_54>:
    2a3c:	1f 92       	push	r1
    2a3e:	0f 92       	push	r0
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	0f 92       	push	r0
    2a44:	11 24       	eor	r1, r1
    2a46:	0b b6       	in	r0, 0x3b	; 59
    2a48:	0f 92       	push	r0
    2a4a:	2f 93       	push	r18
    2a4c:	3f 93       	push	r19
    2a4e:	4f 93       	push	r20
    2a50:	5f 93       	push	r21
    2a52:	6f 93       	push	r22
    2a54:	7f 93       	push	r23
    2a56:	8f 93       	push	r24
    2a58:	9f 93       	push	r25
    2a5a:	af 93       	push	r26
    2a5c:	bf 93       	push	r27
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	ef 93       	push	r30
    2a64:	ff 93       	push	r31
    2a66:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <_ser_handle+0x6>
    2a6a:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <_ser_handle+0x7>
    2a6e:	10 97       	sbiw	r26, 0x00	; 0
    2a70:	11 f1       	breq	.+68     	; 0x2ab6 <__vector_54+0x7a>
    2a72:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2a76:	14 96       	adiw	r26, 0x04	; 4
    2a78:	ed 91       	ld	r30, X+
    2a7a:	fc 91       	ld	r31, X
    2a7c:	15 97       	sbiw	r26, 0x05	; 5
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	25 81       	ldd	r18, Z+5	; 0x05
    2a84:	98 1b       	sub	r25, r24
    2a86:	92 23       	and	r25, r18
    2a88:	84 81       	ldd	r24, Z+4	; 0x04
    2a8a:	98 17       	cp	r25, r24
    2a8c:	61 f0       	breq	.+24     	; 0x2aa6 <__vector_54+0x6a>
    2a8e:	83 81       	ldd	r24, Z+3	; 0x03
    2a90:	26 95       	lsr	r18
    2a92:	28 23       	and	r18, r24
    2a94:	c0 81       	ld	r28, Z
    2a96:	d1 81       	ldd	r29, Z+1	; 0x01
    2a98:	c2 0f       	add	r28, r18
    2a9a:	d1 1d       	adc	r29, r1
    2a9c:	68 83       	st	Y, r22
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	95 81       	ldd	r25, Z+5	; 0x05
    2aa2:	89 23       	and	r24, r25
    2aa4:	83 83       	std	Z+3, r24	; 0x03
    2aa6:	16 96       	adiw	r26, 0x06	; 6
    2aa8:	ed 91       	ld	r30, X+
    2aaa:	fc 91       	ld	r31, X
    2aac:	17 97       	sbiw	r26, 0x07	; 7
    2aae:	30 97       	sbiw	r30, 0x00	; 0
    2ab0:	11 f0       	breq	.+4      	; 0x2ab6 <__vector_54+0x7a>
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	19 95       	eicall
    2ab6:	ff 91       	pop	r31
    2ab8:	ef 91       	pop	r30
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	bf 91       	pop	r27
    2ac0:	af 91       	pop	r26
    2ac2:	9f 91       	pop	r25
    2ac4:	8f 91       	pop	r24
    2ac6:	7f 91       	pop	r23
    2ac8:	6f 91       	pop	r22
    2aca:	5f 91       	pop	r21
    2acc:	4f 91       	pop	r20
    2ace:	3f 91       	pop	r19
    2ad0:	2f 91       	pop	r18
    2ad2:	0f 90       	pop	r0
    2ad4:	0b be       	out	0x3b, r0	; 59
    2ad6:	0f 90       	pop	r0
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	0f 90       	pop	r0
    2adc:	1f 90       	pop	r1
    2ade:	18 95       	reti

00002ae0 <__vector_55>:
    2ae0:	1f 92       	push	r1
    2ae2:	0f 92       	push	r0
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	0f 92       	push	r0
    2ae8:	11 24       	eor	r1, r1
    2aea:	0b b6       	in	r0, 0x3b	; 59
    2aec:	0f 92       	push	r0
    2aee:	2f 93       	push	r18
    2af0:	8f 93       	push	r24
    2af2:	9f 93       	push	r25
    2af4:	af 93       	push	r26
    2af6:	bf 93       	push	r27
    2af8:	ef 93       	push	r30
    2afa:	ff 93       	push	r31
    2afc:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <_ser_handle+0x6>
    2b00:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <_ser_handle+0x7>
    2b04:	30 97       	sbiw	r30, 0x00	; 0
    2b06:	b9 f0       	breq	.+46     	; 0x2b36 <__vector_55+0x56>
    2b08:	02 80       	ldd	r0, Z+2	; 0x02
    2b0a:	f3 81       	ldd	r31, Z+3	; 0x03
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	98 17       	cp	r25, r24
    2b14:	b1 f0       	breq	.+44     	; 0x2b42 <__vector_55+0x62>
    2b16:	92 81       	ldd	r25, Z+2	; 0x02
    2b18:	85 81       	ldd	r24, Z+5	; 0x05
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	26 95       	lsr	r18
    2b1e:	29 23       	and	r18, r25
    2b20:	a0 81       	ld	r26, Z
    2b22:	b1 81       	ldd	r27, Z+1	; 0x01
    2b24:	a2 0f       	add	r26, r18
    2b26:	b1 1d       	adc	r27, r1
    2b28:	2c 91       	ld	r18, X
    2b2a:	9f 5f       	subi	r25, 0xFF	; 255
    2b2c:	89 23       	and	r24, r25
    2b2e:	82 83       	std	Z+2, r24	; 0x02
    2b30:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2b34:	0b c0       	rjmp	.+22     	; 0x2b4c <__vector_55+0x6c>
    2b36:	e1 e3       	ldi	r30, 0x31	; 49
    2b38:	f1 e0       	ldi	r31, 0x01	; 1
    2b3a:	80 81       	ld	r24, Z
    2b3c:	8f 7d       	andi	r24, 0xDF	; 223
    2b3e:	80 83       	st	Z, r24
    2b40:	05 c0       	rjmp	.+10     	; 0x2b4c <__vector_55+0x6c>
    2b42:	e1 e3       	ldi	r30, 0x31	; 49
    2b44:	f1 e0       	ldi	r31, 0x01	; 1
    2b46:	80 81       	ld	r24, Z
    2b48:	8f 7d       	andi	r24, 0xDF	; 223
    2b4a:	80 83       	st	Z, r24
    2b4c:	ff 91       	pop	r31
    2b4e:	ef 91       	pop	r30
    2b50:	bf 91       	pop	r27
    2b52:	af 91       	pop	r26
    2b54:	9f 91       	pop	r25
    2b56:	8f 91       	pop	r24
    2b58:	2f 91       	pop	r18
    2b5a:	0f 90       	pop	r0
    2b5c:	0b be       	out	0x3b, r0	; 59
    2b5e:	0f 90       	pop	r0
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	0f 90       	pop	r0
    2b64:	1f 90       	pop	r1
    2b66:	18 95       	reti

00002b68 <fifo_init>:
    2b68:	fc 01       	movw	r30, r24
    2b6a:	41 11       	cpse	r20, r1
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <fifo_init+0xa>
    2b6e:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <abort>
    2b72:	84 2f       	mov	r24, r20
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9c 01       	movw	r18, r24
    2b78:	21 50       	subi	r18, 0x01	; 1
    2b7a:	31 09       	sbc	r19, r1
    2b7c:	82 23       	and	r24, r18
    2b7e:	93 23       	and	r25, r19
    2b80:	89 2b       	or	r24, r25
    2b82:	11 f0       	breq	.+4      	; 0x2b88 <fifo_init+0x20>
    2b84:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <abort>
    2b88:	41 38       	cpi	r20, 0x81	; 129
    2b8a:	10 f0       	brcs	.+4      	; 0x2b90 <fifo_init+0x28>
    2b8c:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <abort>
    2b90:	12 82       	std	Z+2, r1	; 0x02
    2b92:	13 82       	std	Z+3, r1	; 0x03
    2b94:	44 83       	std	Z+4, r20	; 0x04
    2b96:	44 0f       	add	r20, r20
    2b98:	41 50       	subi	r20, 0x01	; 1
    2b9a:	45 83       	std	Z+5, r20	; 0x05
    2b9c:	71 83       	std	Z+1, r23	; 0x01
    2b9e:	60 83       	st	Z, r22
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	08 95       	ret

00002ba6 <hal_create>:
    2ba6:	ef e8       	ldi	r30, 0x8F	; 143
    2ba8:	f8 e0       	ldi	r31, 0x08	; 8
    2baa:	21 e9       	ldi	r18, 0x91	; 145
    2bac:	3b e1       	ldi	r19, 0x1B	; 27
    2bae:	31 83       	std	Z+1, r19	; 0x01
    2bb0:	20 83       	st	Z, r18
    2bb2:	24 e9       	ldi	r18, 0x94	; 148
    2bb4:	3b e1       	ldi	r19, 0x1B	; 27
    2bb6:	33 83       	std	Z+3, r19	; 0x03
    2bb8:	22 83       	std	Z+2, r18	; 0x02
    2bba:	2f e9       	ldi	r18, 0x9F	; 159
    2bbc:	3b e1       	ldi	r19, 0x1B	; 27
    2bbe:	35 83       	std	Z+5, r19	; 0x05
    2bc0:	24 83       	std	Z+4, r18	; 0x04
    2bc2:	23 ea       	ldi	r18, 0xA3	; 163
    2bc4:	3b e1       	ldi	r19, 0x1B	; 27
    2bc6:	37 83       	std	Z+7, r19	; 0x07
    2bc8:	26 83       	std	Z+6, r18	; 0x06
    2bca:	29 ea       	ldi	r18, 0xA9	; 169
    2bcc:	3b e1       	ldi	r19, 0x1B	; 27
    2bce:	31 87       	std	Z+9, r19	; 0x09
    2bd0:	20 87       	std	Z+8, r18	; 0x08
    2bd2:	25 eb       	ldi	r18, 0xB5	; 181
    2bd4:	3b e1       	ldi	r19, 0x1B	; 27
    2bd6:	33 87       	std	Z+11, r19	; 0x0b
    2bd8:	22 87       	std	Z+10, r18	; 0x0a
    2bda:	2a eb       	ldi	r18, 0xBA	; 186
    2bdc:	3b e1       	ldi	r19, 0x1B	; 27
    2bde:	35 87       	std	Z+13, r19	; 0x0d
    2be0:	24 87       	std	Z+12, r18	; 0x0c
    2be2:	26 ec       	ldi	r18, 0xC6	; 198
    2be4:	3b e1       	ldi	r19, 0x1B	; 27
    2be6:	37 87       	std	Z+15, r19	; 0x0f
    2be8:	26 87       	std	Z+14, r18	; 0x0e
    2bea:	26 ea       	ldi	r18, 0xA6	; 166
    2bec:	3b e1       	ldi	r19, 0x1B	; 27
    2bee:	31 8b       	std	Z+17, r19	; 0x11
    2bf0:	20 8b       	std	Z+16, r18	; 0x10
    2bf2:	2b ec       	ldi	r18, 0xCB	; 203
    2bf4:	3b e1       	ldi	r19, 0x1B	; 27
    2bf6:	33 8b       	std	Z+19, r19	; 0x13
    2bf8:	22 8b       	std	Z+18, r18	; 0x12
    2bfa:	28 ed       	ldi	r18, 0xD8	; 216
    2bfc:	3b e1       	ldi	r19, 0x1B	; 27
    2bfe:	35 8b       	std	Z+21, r19	; 0x15
    2c00:	24 8b       	std	Z+20, r18	; 0x14
    2c02:	68 2f       	mov	r22, r24
    2c04:	cf 01       	movw	r24, r30
    2c06:	a1 c0       	rjmp	.+322    	; 0x2d4a <led_create>
    2c08:	08 95       	ret

00002c0a <_turn_off>:
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	fc 01       	movw	r30, r24
    2c12:	ee 0f       	add	r30, r30
    2c14:	ff 1f       	adc	r31, r31
    2c16:	e8 0f       	add	r30, r24
    2c18:	f9 1f       	adc	r31, r25
    2c1a:	ee 0f       	add	r30, r30
    2c1c:	ff 1f       	adc	r31, r31
    2c1e:	e2 5b       	subi	r30, 0xB2	; 178
    2c20:	f8 4f       	sbci	r31, 0xF8	; 248
    2c22:	23 81       	ldd	r18, Z+3	; 0x03
    2c24:	21 11       	cpse	r18, r1
    2c26:	0a c0       	rjmp	.+20     	; 0x2c3c <_turn_off+0x32>
    2c28:	ef 01       	movw	r28, r30
    2c2a:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    2c2e:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    2c32:	6a 81       	ldd	r22, Y+2	; 0x02
    2c34:	88 81       	ld	r24, Y
    2c36:	99 81       	ldd	r25, Y+1	; 0x01
    2c38:	19 95       	eicall
    2c3a:	12 c0       	rjmp	.+36     	; 0x2c60 <_turn_off+0x56>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	aa 0f       	add	r26, r26
    2c40:	bb 1f       	adc	r27, r27
    2c42:	ed 01       	movw	r28, r26
    2c44:	c8 0f       	add	r28, r24
    2c46:	d9 1f       	adc	r29, r25
    2c48:	cc 0f       	add	r28, r28
    2c4a:	dd 1f       	adc	r29, r29
    2c4c:	c2 5b       	subi	r28, 0xB2	; 178
    2c4e:	d8 4f       	sbci	r29, 0xF8	; 248
    2c50:	e0 91 a1 08 	lds	r30, 0x08A1	; 0x8008a1 <register_access+0x12>
    2c54:	f0 91 a2 08 	lds	r31, 0x08A2	; 0x8008a2 <register_access+0x13>
    2c58:	6a 81       	ldd	r22, Y+2	; 0x02
    2c5a:	88 81       	ld	r24, Y
    2c5c:	99 81       	ldd	r25, Y+1	; 0x01
    2c5e:	19 95       	eicall
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <_turn_on>:
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	e8 0f       	add	r30, r24
    2c74:	f9 1f       	adc	r31, r25
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	e2 5b       	subi	r30, 0xB2	; 178
    2c7c:	f8 4f       	sbci	r31, 0xF8	; 248
    2c7e:	23 81       	ldd	r18, Z+3	; 0x03
    2c80:	21 11       	cpse	r18, r1
    2c82:	0a c0       	rjmp	.+20     	; 0x2c98 <_turn_on+0x32>
    2c84:	ef 01       	movw	r28, r30
    2c86:	e0 91 a1 08 	lds	r30, 0x08A1	; 0x8008a1 <register_access+0x12>
    2c8a:	f0 91 a2 08 	lds	r31, 0x08A2	; 0x8008a2 <register_access+0x13>
    2c8e:	6a 81       	ldd	r22, Y+2	; 0x02
    2c90:	88 81       	ld	r24, Y
    2c92:	99 81       	ldd	r25, Y+1	; 0x01
    2c94:	19 95       	eicall
    2c96:	12 c0       	rjmp	.+36     	; 0x2cbc <_turn_on+0x56>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	aa 0f       	add	r26, r26
    2c9c:	bb 1f       	adc	r27, r27
    2c9e:	ed 01       	movw	r28, r26
    2ca0:	c8 0f       	add	r28, r24
    2ca2:	d9 1f       	adc	r29, r25
    2ca4:	cc 0f       	add	r28, r28
    2ca6:	dd 1f       	adc	r29, r29
    2ca8:	c2 5b       	subi	r28, 0xB2	; 178
    2caa:	d8 4f       	sbci	r29, 0xF8	; 248
    2cac:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    2cb0:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    2cb4:	6a 81       	ldd	r22, Y+2	; 0x02
    2cb6:	88 81       	ld	r24, Y
    2cb8:	99 81       	ldd	r25, Y+1	; 0x01
    2cba:	19 95       	eicall
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	08 95       	ret

00002cc2 <_hal_led_task>:
    2cc2:	83 e7       	ldi	r24, 0x73	; 115
    2cc4:	93 e0       	ldi	r25, 0x03	; 3
    2cc6:	0e 94 19 20 	call	0x4032	; 0x4032 <puts>
    2cca:	0f 2e       	mov	r0, r31
    2ccc:	ff e8       	ldi	r31, 0x8F	; 143
    2cce:	cf 2e       	mov	r12, r31
    2cd0:	f8 e0       	ldi	r31, 0x08	; 8
    2cd2:	df 2e       	mov	r13, r31
    2cd4:	f0 2d       	mov	r31, r0
    2cd6:	04 e0       	ldi	r16, 0x04	; 4
    2cd8:	ce e4       	ldi	r28, 0x4E	; 78
    2cda:	d7 e0       	ldi	r29, 0x07	; 7
    2cdc:	10 e0       	ldi	r17, 0x00	; 0
    2cde:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce0:	81 30       	cpi	r24, 0x01	; 1
    2ce2:	69 f0       	breq	.+26     	; 0x2cfe <_hal_led_task+0x3c>
    2ce4:	e8 f0       	brcs	.+58     	; 0x2d20 <_hal_led_task+0x5e>
    2ce6:	82 30       	cpi	r24, 0x02	; 2
    2ce8:	39 f5       	brne	.+78     	; 0x2d38 <_hal_led_task+0x76>
    2cea:	d6 01       	movw	r26, r12
    2cec:	1c 96       	adiw	r26, 0x0c	; 12
    2cee:	ed 91       	ld	r30, X+
    2cf0:	fc 91       	ld	r31, X
    2cf2:	1d 97       	sbiw	r26, 0x0d	; 13
    2cf4:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf6:	88 81       	ld	r24, Y
    2cf8:	99 81       	ldd	r25, Y+1	; 0x01
    2cfa:	19 95       	eicall
    2cfc:	1d c0       	rjmp	.+58     	; 0x2d38 <_hal_led_task+0x76>
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	8a 30       	cpi	r24, 0x0A	; 10
    2d04:	10 f4       	brcc	.+4      	; 0x2d0a <_hal_led_task+0x48>
    2d06:	8d 83       	std	Y+5, r24	; 0x05
    2d08:	17 c0       	rjmp	.+46     	; 0x2d38 <_hal_led_task+0x76>
    2d0a:	1d 82       	std	Y+5, r1	; 0x05
    2d0c:	d6 01       	movw	r26, r12
    2d0e:	1c 96       	adiw	r26, 0x0c	; 12
    2d10:	ed 91       	ld	r30, X+
    2d12:	fc 91       	ld	r31, X
    2d14:	1d 97       	sbiw	r26, 0x0d	; 13
    2d16:	6a 81       	ldd	r22, Y+2	; 0x02
    2d18:	88 81       	ld	r24, Y
    2d1a:	99 81       	ldd	r25, Y+1	; 0x01
    2d1c:	19 95       	eicall
    2d1e:	0c c0       	rjmp	.+24     	; 0x2d38 <_hal_led_task+0x76>
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	88 23       	and	r24, r24
    2d24:	31 f0       	breq	.+12     	; 0x2d32 <_hal_led_task+0x70>
    2d26:	81 2f       	mov	r24, r17
    2d28:	9e df       	rcall	.-196    	; 0x2c66 <_turn_on>
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	81 50       	subi	r24, 0x01	; 1
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <_hal_led_task+0x76>
    2d32:	0c 83       	std	Y+4, r16	; 0x04
    2d34:	81 2f       	mov	r24, r17
    2d36:	69 df       	rcall	.-302    	; 0x2c0a <_turn_off>
    2d38:	1f 5f       	subi	r17, 0xFF	; 255
    2d3a:	26 96       	adiw	r28, 0x06	; 6
    2d3c:	14 30       	cpi	r17, 0x04	; 4
    2d3e:	79 f6       	brne	.-98     	; 0x2cde <_hal_led_task+0x1c>
    2d40:	85 e0       	ldi	r24, 0x05	; 5
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <vTaskDelay>
    2d48:	c7 cf       	rjmp	.-114    	; 0x2cd8 <_hal_led_task+0x16>

00002d4a <led_create>:
    2d4a:	cf 92       	push	r12
    2d4c:	df 92       	push	r13
    2d4e:	ef 92       	push	r14
    2d50:	ff 92       	push	r15
    2d52:	0f 93       	push	r16
    2d54:	1f 93       	push	r17
    2d56:	cf 93       	push	r28
    2d58:	df 93       	push	r29
    2d5a:	06 2f       	mov	r16, r22
    2d5c:	0f 2e       	mov	r0, r31
    2d5e:	ff e8       	ldi	r31, 0x8F	; 143
    2d60:	ef 2e       	mov	r14, r31
    2d62:	f8 e0       	ldi	r31, 0x08	; 8
    2d64:	ff 2e       	mov	r15, r31
    2d66:	f0 2d       	mov	r31, r0
    2d68:	d7 01       	movw	r26, r14
    2d6a:	18 96       	adiw	r26, 0x08	; 8
    2d6c:	ed 91       	ld	r30, X+
    2d6e:	fc 91       	ld	r31, X
    2d70:	19 97       	sbiw	r26, 0x09	; 9
    2d72:	66 e0       	ldi	r22, 0x06	; 6
    2d74:	87 e2       	ldi	r24, 0x27	; 39
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	19 95       	eicall
    2d7a:	ce e4       	ldi	r28, 0x4E	; 78
    2d7c:	d7 e0       	ldi	r29, 0x07	; 7
    2d7e:	0f 2e       	mov	r0, r31
    2d80:	f8 e2       	ldi	r31, 0x28	; 40
    2d82:	cf 2e       	mov	r12, r31
    2d84:	d1 2c       	mov	r13, r1
    2d86:	f0 2d       	mov	r31, r0
    2d88:	d9 82       	std	Y+1, r13	; 0x01
    2d8a:	c8 82       	st	Y, r12
    2d8c:	86 e0       	ldi	r24, 0x06	; 6
    2d8e:	8a 83       	std	Y+2, r24	; 0x02
    2d90:	1b 82       	std	Y+3, r1	; 0x03
    2d92:	14 e0       	ldi	r17, 0x04	; 4
    2d94:	1c 83       	std	Y+4, r17	; 0x04
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	38 df       	rcall	.-400    	; 0x2c0a <_turn_off>
    2d9a:	d7 01       	movw	r26, r14
    2d9c:	18 96       	adiw	r26, 0x08	; 8
    2d9e:	ed 91       	ld	r30, X+
    2da0:	fc 91       	ld	r31, X
    2da2:	19 97       	sbiw	r26, 0x09	; 9
    2da4:	67 e0       	ldi	r22, 0x07	; 7
    2da6:	87 e2       	ldi	r24, 0x27	; 39
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	19 95       	eicall
    2dac:	df 82       	std	Y+7, r13	; 0x07
    2dae:	ce 82       	std	Y+6, r12	; 0x06
    2db0:	87 e0       	ldi	r24, 0x07	; 7
    2db2:	88 87       	std	Y+8, r24	; 0x08
    2db4:	19 86       	std	Y+9, r1	; 0x09
    2db6:	1a 87       	std	Y+10, r17	; 0x0a
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	27 df       	rcall	.-434    	; 0x2c0a <_turn_off>
    2dbc:	d7 01       	movw	r26, r14
    2dbe:	18 96       	adiw	r26, 0x08	; 8
    2dc0:	ed 91       	ld	r30, X+
    2dc2:	fc 91       	ld	r31, X
    2dc4:	19 97       	sbiw	r26, 0x09	; 9
    2dc6:	65 e0       	ldi	r22, 0x05	; 5
    2dc8:	83 e3       	ldi	r24, 0x33	; 51
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	19 95       	eicall
    2dce:	d7 01       	movw	r26, r14
    2dd0:	18 96       	adiw	r26, 0x08	; 8
    2dd2:	ed 91       	ld	r30, X+
    2dd4:	fc 91       	ld	r31, X
    2dd6:	19 97       	sbiw	r26, 0x09	; 9
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	84 e3       	ldi	r24, 0x34	; 52
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	19 95       	eicall
    2de0:	84 e3       	ldi	r24, 0x34	; 52
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	9d 87       	std	Y+13, r25	; 0x0d
    2de6:	8c 87       	std	Y+12, r24	; 0x0c
    2de8:	85 e0       	ldi	r24, 0x05	; 5
    2dea:	8e 87       	std	Y+14, r24	; 0x0e
    2dec:	1f 86       	std	Y+15, r1	; 0x0f
    2dee:	18 8b       	std	Y+16, r17	; 0x10
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	0b df       	rcall	.-490    	; 0x2c0a <_turn_off>
    2df4:	d7 01       	movw	r26, r14
    2df6:	18 96       	adiw	r26, 0x08	; 8
    2df8:	ed 91       	ld	r30, X+
    2dfa:	fc 91       	ld	r31, X
    2dfc:	19 97       	sbiw	r26, 0x09	; 9
    2dfe:	64 e0       	ldi	r22, 0x04	; 4
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	91 e0       	ldi	r25, 0x01	; 1
    2e04:	19 95       	eicall
    2e06:	d7 01       	movw	r26, r14
    2e08:	18 96       	adiw	r26, 0x08	; 8
    2e0a:	ed 91       	ld	r30, X+
    2e0c:	fc 91       	ld	r31, X
    2e0e:	19 97       	sbiw	r26, 0x09	; 9
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	91 e0       	ldi	r25, 0x01	; 1
    2e16:	19 95       	eicall
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	9b 8b       	std	Y+19, r25	; 0x13
    2e1e:	8a 8b       	std	Y+18, r24	; 0x12
    2e20:	1c 8b       	std	Y+20, r17	; 0x14
    2e22:	1d 8a       	std	Y+21, r1	; 0x15
    2e24:	1e 8b       	std	Y+22, r17	; 0x16
    2e26:	83 e0       	ldi	r24, 0x03	; 3
    2e28:	f0 de       	rcall	.-544    	; 0x2c0a <_turn_off>
    2e2a:	e1 2c       	mov	r14, r1
    2e2c:	f1 2c       	mov	r15, r1
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 ec       	ldi	r20, 0xC0	; 192
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	6a e8       	ldi	r22, 0x8A	; 138
    2e38:	73 e0       	ldi	r23, 0x03	; 3
    2e3a:	81 e6       	ldi	r24, 0x61	; 97
    2e3c:	96 e1       	ldi	r25, 0x16	; 22
    2e3e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskCreate>
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	ff 90       	pop	r15
    2e4c:	ef 90       	pop	r14
    2e4e:	df 90       	pop	r13
    2e50:	cf 90       	pop	r12
    2e52:	08 95       	ret

00002e54 <led_slow_blink>:
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	c8 2f       	mov	r28, r24
    2e5e:	d0 e0       	ldi	r29, 0x00	; 0
    2e60:	8e 01       	movw	r16, r28
    2e62:	00 0f       	add	r16, r16
    2e64:	11 1f       	adc	r17, r17
    2e66:	d8 01       	movw	r26, r16
    2e68:	ac 0f       	add	r26, r28
    2e6a:	bd 1f       	adc	r27, r29
    2e6c:	aa 0f       	add	r26, r26
    2e6e:	bb 1f       	adc	r27, r27
    2e70:	a2 5b       	subi	r26, 0xB2	; 178
    2e72:	b8 4f       	sbci	r27, 0xF8	; 248
    2e74:	e0 91 9b 08 	lds	r30, 0x089B	; 0x80089b <register_access+0xc>
    2e78:	f0 91 9c 08 	lds	r31, 0x089C	; 0x80089c <register_access+0xd>
    2e7c:	12 96       	adiw	r26, 0x02	; 2
    2e7e:	6c 91       	ld	r22, X
    2e80:	12 97       	sbiw	r26, 0x02	; 2
    2e82:	8d 91       	ld	r24, X+
    2e84:	9c 91       	ld	r25, X
    2e86:	19 95       	eicall
    2e88:	c0 0f       	add	r28, r16
    2e8a:	d1 1f       	adc	r29, r17
    2e8c:	cc 0f       	add	r28, r28
    2e8e:	dd 1f       	adc	r29, r29
    2e90:	c2 5b       	subi	r28, 0xB2	; 178
    2e92:	d8 4f       	sbci	r29, 0xF8	; 248
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	8c 83       	std	Y+4, r24	; 0x04
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	08 95       	ret

00002ea2 <led_fast_blink>:
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	c8 2f       	mov	r28, r24
    2eac:	d0 e0       	ldi	r29, 0x00	; 0
    2eae:	8e 01       	movw	r16, r28
    2eb0:	00 0f       	add	r16, r16
    2eb2:	11 1f       	adc	r17, r17
    2eb4:	d8 01       	movw	r26, r16
    2eb6:	ac 0f       	add	r26, r28
    2eb8:	bd 1f       	adc	r27, r29
    2eba:	aa 0f       	add	r26, r26
    2ebc:	bb 1f       	adc	r27, r27
    2ebe:	a2 5b       	subi	r26, 0xB2	; 178
    2ec0:	b8 4f       	sbci	r27, 0xF8	; 248
    2ec2:	e0 91 9b 08 	lds	r30, 0x089B	; 0x80089b <register_access+0xc>
    2ec6:	f0 91 9c 08 	lds	r31, 0x089C	; 0x80089c <register_access+0xd>
    2eca:	12 96       	adiw	r26, 0x02	; 2
    2ecc:	6c 91       	ld	r22, X
    2ece:	12 97       	sbiw	r26, 0x02	; 2
    2ed0:	8d 91       	ld	r24, X+
    2ed2:	9c 91       	ld	r25, X
    2ed4:	19 95       	eicall
    2ed6:	c0 0f       	add	r28, r16
    2ed8:	d1 1f       	adc	r29, r17
    2eda:	cc 0f       	add	r28, r28
    2edc:	dd 1f       	adc	r29, r29
    2ede:	c2 5b       	subi	r28, 0xB2	; 178
    2ee0:	d8 4f       	sbci	r29, 0xF8	; 248
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	8c 83       	std	Y+4, r24	; 0x04
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	08 95       	ret

00002ef0 <led_led_on>:
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	f9 01       	movw	r30, r18
    2ef6:	ee 0f       	add	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	e2 0f       	add	r30, r18
    2efc:	f3 1f       	adc	r31, r19
    2efe:	ee 0f       	add	r30, r30
    2f00:	ff 1f       	adc	r31, r31
    2f02:	e2 5b       	subi	r30, 0xB2	; 178
    2f04:	f8 4f       	sbci	r31, 0xF8	; 248
    2f06:	93 e0       	ldi	r25, 0x03	; 3
    2f08:	94 83       	std	Z+4, r25	; 0x04
    2f0a:	ad ce       	rjmp	.-678    	; 0x2c66 <_turn_on>
    2f0c:	08 95       	ret

00002f0e <led_led_off>:
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	f9 01       	movw	r30, r18
    2f14:	ee 0f       	add	r30, r30
    2f16:	ff 1f       	adc	r31, r31
    2f18:	e2 0f       	add	r30, r18
    2f1a:	f3 1f       	adc	r31, r19
    2f1c:	ee 0f       	add	r30, r30
    2f1e:	ff 1f       	adc	r31, r31
    2f20:	e2 5b       	subi	r30, 0xB2	; 178
    2f22:	f8 4f       	sbci	r31, 0xF8	; 248
    2f24:	94 e0       	ldi	r25, 0x04	; 4
    2f26:	94 83       	std	Z+4, r25	; 0x04
    2f28:	70 ce       	rjmp	.-800    	; 0x2c0a <_turn_off>
    2f2a:	08 95       	ret

00002f2c <led_long_puls>:
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	fc 01       	movw	r30, r24
    2f30:	ee 0f       	add	r30, r30
    2f32:	ff 1f       	adc	r31, r31
    2f34:	df 01       	movw	r26, r30
    2f36:	a8 0f       	add	r26, r24
    2f38:	b9 1f       	adc	r27, r25
    2f3a:	aa 0f       	add	r26, r26
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	a2 5b       	subi	r26, 0xB2	; 178
    2f40:	b8 4f       	sbci	r27, 0xF8	; 248
    2f42:	24 e0       	ldi	r18, 0x04	; 4
    2f44:	15 96       	adiw	r26, 0x05	; 5
    2f46:	2c 93       	st	X, r18
    2f48:	15 97       	sbiw	r26, 0x05	; 5
    2f4a:	fd 01       	movw	r30, r26
    2f4c:	14 82       	std	Z+4, r1	; 0x04
    2f4e:	08 95       	ret

00002f50 <led_short_puls>:
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	fc 01       	movw	r30, r24
    2f54:	ee 0f       	add	r30, r30
    2f56:	ff 1f       	adc	r31, r31
    2f58:	df 01       	movw	r26, r30
    2f5a:	a8 0f       	add	r26, r24
    2f5c:	b9 1f       	adc	r27, r25
    2f5e:	aa 0f       	add	r26, r26
    2f60:	bb 1f       	adc	r27, r27
    2f62:	a2 5b       	subi	r26, 0xB2	; 178
    2f64:	b8 4f       	sbci	r27, 0xF8	; 248
    2f66:	21 e0       	ldi	r18, 0x01	; 1
    2f68:	15 96       	adiw	r26, 0x05	; 5
    2f6a:	2c 93       	st	X, r18
    2f6c:	15 97       	sbiw	r26, 0x05	; 5
    2f6e:	fd 01       	movw	r30, r26
    2f70:	14 82       	std	Z+4, r1	; 0x04
    2f72:	08 95       	ret

00002f74 <_serial_call_back>:
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	1f 92       	push	r1
    2f7e:	1f 92       	push	r1
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	8c 01       	movw	r16, r24
    2f86:	19 82       	std	Y+1, r1	; 0x01
    2f88:	2d c0       	rjmp	.+90     	; 0x2fe4 <_serial_call_back+0x70>
    2f8a:	e0 91 ca 07 	lds	r30, 0x07CA	; 0x8007ca <rec_buf_inp.2926>
    2f8e:	ec 32       	cpi	r30, 0x2C	; 44
    2f90:	50 f4       	brcc	.+20     	; 0x2fa6 <_serial_call_back+0x32>
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	8e 0f       	add	r24, r30
    2f96:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <rec_buf_inp.2926>
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	e6 50       	subi	r30, 0x06	; 6
    2f9e:	f8 4f       	sbci	r31, 0xF8	; 248
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	80 83       	st	Z, r24
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <_serial_call_back+0x36>
    2fa6:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <rec_buf_inp.2926>
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	8a 30       	cpi	r24, 0x0A	; 10
    2fae:	d1 f4       	brne	.+52     	; 0x2fe4 <_serial_call_back+0x70>
    2fb0:	40 91 ca 07 	lds	r20, 0x07CA	; 0x8007ca <rec_buf_inp.2926>
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	fa 01       	movw	r30, r20
    2fb8:	e8 50       	subi	r30, 0x08	; 8
    2fba:	f8 4f       	sbci	r31, 0xF8	; 248
    2fbc:	10 82       	st	Z, r1
    2fbe:	41 50       	subi	r20, 0x01	; 1
    2fc0:	51 09       	sbc	r21, r1
    2fc2:	9e 01       	movw	r18, r28
    2fc4:	2f 5f       	subi	r18, 0xFF	; 255
    2fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc8:	6a ef       	ldi	r22, 0xFA	; 250
    2fca:	77 e0       	ldi	r23, 0x07	; 7
    2fcc:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    2fd0:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    2fd4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <xStreamBufferSendFromISR>
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	81 11       	cpse	r24, r1
    2fdc:	0e 94 a1 04 	call	0x942	; 0x942 <vPortYield>
    2fe0:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <rec_buf_inp.2926>
    2fe4:	be 01       	movw	r22, r28
    2fe6:	6e 5f       	subi	r22, 0xFE	; 254
    2fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fea:	c8 01       	movw	r24, r16
    2fec:	49 db       	rcall	.-2414   	; 0x2680 <serial_get_byte>
    2fee:	88 23       	and	r24, r24
    2ff0:	61 f2       	breq	.-104    	; 0x2f8a <_serial_call_back+0x16>
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	08 95       	ret

00003000 <_upload_message>:
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	8c 01       	movw	r16, r24
    300a:	eb 01       	movw	r28, r22
    300c:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    3010:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    3014:	0e 94 2c 09 	call	0x1258	; 0x1258 <xStreamBufferReset>
    3018:	b8 01       	movw	r22, r16
    301a:	86 e6       	ldi	r24, 0x66	; 102
    301c:	97 e0       	ldi	r25, 0x07	; 7
    301e:	d7 d7       	rcall	.+4014   	; 0x3fce <strcpy>
    3020:	20 97       	sbiw	r28, 0x00	; 0
    3022:	71 f0       	breq	.+28     	; 0x3040 <_upload_message+0x40>
    3024:	e6 e6       	ldi	r30, 0x66	; 102
    3026:	f7 e0       	ldi	r31, 0x07	; 7
    3028:	01 90       	ld	r0, Z+
    302a:	00 20       	and	r0, r0
    302c:	e9 f7       	brne	.-6      	; 0x3028 <_upload_message+0x28>
    302e:	31 97       	sbiw	r30, 0x01	; 1
    3030:	80 e2       	ldi	r24, 0x20	; 32
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
    3038:	be 01       	movw	r22, r28
    303a:	86 e6       	ldi	r24, 0x66	; 102
    303c:	97 e0       	ldi	r25, 0x07	; 7
    303e:	bc d7       	rcall	.+3960   	; 0x3fb8 <strcat>
    3040:	e6 e6       	ldi	r30, 0x66	; 102
    3042:	f7 e0       	ldi	r31, 0x07	; 7
    3044:	df 01       	movw	r26, r30
    3046:	0d 90       	ld	r0, X+
    3048:	00 20       	and	r0, r0
    304a:	e9 f7       	brne	.-6      	; 0x3046 <_upload_message+0x46>
    304c:	11 97       	sbiw	r26, 0x01	; 1
    304e:	8d e0       	ldi	r24, 0x0D	; 13
    3050:	9a e0       	ldi	r25, 0x0A	; 10
    3052:	11 96       	adiw	r26, 0x01	; 1
    3054:	9c 93       	st	X, r25
    3056:	8e 93       	st	-X, r24
    3058:	12 96       	adiw	r26, 0x02	; 2
    305a:	1c 92       	st	X, r1
    305c:	01 90       	ld	r0, Z+
    305e:	00 20       	and	r0, r0
    3060:	e9 f7       	brne	.-6      	; 0x305c <_upload_message+0x5c>
    3062:	31 97       	sbiw	r30, 0x01	; 1
    3064:	e6 56       	subi	r30, 0x66	; 102
    3066:	f7 40       	sbci	r31, 0x07	; 7
    3068:	ae 2f       	mov	r26, r30
    306a:	86 e6       	ldi	r24, 0x66	; 102
    306c:	97 e0       	ldi	r25, 0x07	; 7
    306e:	ac 01       	movw	r20, r24
    3070:	6a 2f       	mov	r22, r26
    3072:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <_rn2483_serial>
    3076:	90 91 ce 07 	lds	r25, 0x07CE	; 0x8007ce <_rn2483_serial+0x1>
    307a:	b2 da       	rcall	.-2716   	; 0x25e0 <serial_send_bytes>
    307c:	81 11       	cpse	r24, r1
    307e:	0f c0       	rjmp	.+30     	; 0x309e <_upload_message+0x9e>
    3080:	28 e2       	ldi	r18, 0x28	; 40
    3082:	35 e0       	ldi	r19, 0x05	; 5
    3084:	4d e2       	ldi	r20, 0x2D	; 45
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	64 e5       	ldi	r22, 0x54	; 84
    308a:	78 e0       	ldi	r23, 0x08	; 8
    308c:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    3090:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    3094:	0e 94 ad 09 	call	0x135a	; 0x135a <xStreamBufferReceive>
    3098:	84 e5       	ldi	r24, 0x54	; 84
    309a:	98 e0       	ldi	r25, 0x08	; 8
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <_upload_message+0xa2>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	08 95       	ret

000030ac <_reply2return_code>:
    30ac:	af 92       	push	r10
    30ae:	bf 92       	push	r11
    30b0:	cf 92       	push	r12
    30b2:	df 92       	push	r13
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29
    30c0:	6c 01       	movw	r12, r24
    30c2:	fc 01       	movw	r30, r24
    30c4:	01 90       	ld	r0, Z+
    30c6:	00 20       	and	r0, r0
    30c8:	e9 f7       	brne	.-6      	; 0x30c4 <_reply2return_code+0x18>
    30ca:	31 97       	sbiw	r30, 0x01	; 1
    30cc:	7f 01       	movw	r14, r30
    30ce:	e8 1a       	sub	r14, r24
    30d0:	f9 0a       	sbc	r15, r25
    30d2:	06 e1       	ldi	r16, 0x16	; 22
    30d4:	16 e0       	ldi	r17, 0x06	; 6
    30d6:	c0 e0       	ldi	r28, 0x00	; 0
    30d8:	d0 e0       	ldi	r29, 0x00	; 0
    30da:	f8 01       	movw	r30, r16
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	a7 01       	movw	r20, r14
    30e2:	c6 01       	movw	r24, r12
    30e4:	7b d7       	rcall	.+3830   	; 0x3fdc <strncasecmp>
    30e6:	89 2b       	or	r24, r25
    30e8:	49 f4       	brne	.+18     	; 0x30fc <_reply2return_code+0x50>
    30ea:	fe 01       	movw	r30, r28
    30ec:	ee 0f       	add	r30, r30
    30ee:	ff 1f       	adc	r31, r31
    30f0:	ec 0f       	add	r30, r28
    30f2:	fd 1f       	adc	r31, r29
    30f4:	eb 5e       	subi	r30, 0xEB	; 235
    30f6:	f9 4f       	sbci	r31, 0xF9	; 249
    30f8:	80 81       	ld	r24, Z
    30fa:	07 c0       	rjmp	.+14     	; 0x310a <_reply2return_code+0x5e>
    30fc:	21 96       	adiw	r28, 0x01	; 1
    30fe:	0d 5f       	subi	r16, 0xFD	; 253
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	c1 31       	cpi	r28, 0x11	; 17
    3104:	d1 05       	cpc	r29, r1
    3106:	49 f7       	brne	.-46     	; 0x30da <_reply2return_code+0x2e>
    3108:	80 e1       	ldi	r24, 0x10	; 16
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	bf 90       	pop	r11
    311c:	af 90       	pop	r10
    311e:	08 95       	ret

00003120 <_upload_message_rc>:
    3120:	6f df       	rcall	.-290    	; 0x3000 <_upload_message>
    3122:	c4 cf       	rjmp	.-120    	; 0x30ac <_reply2return_code>
    3124:	08 95       	ret

00003126 <lora_driver_flush_buffers>:
    3126:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    312a:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    312e:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <xStreamBufferReset>
    3132:	08 95       	ret

00003134 <lora_driver_create>:
    3134:	8f 92       	push	r8
    3136:	9f 92       	push	r9
    3138:	af 92       	push	r10
    313a:	cf 92       	push	r12
    313c:	ef 92       	push	r14
    313e:	0f 93       	push	r16
    3140:	cf 93       	push	r28
    3142:	c8 2f       	mov	r28, r24
    3144:	41 e0       	ldi	r20, 0x01	; 1
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	88 ec       	ldi	r24, 0xC8	; 200
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	0e 94 00 09 	call	0x1200	; 0x1200 <xStreamBufferGenericCreate>
    3152:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <_reply_buffer_handle+0x1>
    3156:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <_reply_buffer_handle>
    315a:	0f 2e       	mov	r0, r31
    315c:	fa eb       	ldi	r31, 0xBA	; 186
    315e:	8f 2e       	mov	r8, r31
    3160:	f7 e1       	ldi	r31, 0x17	; 23
    3162:	9f 2e       	mov	r9, r31
    3164:	f0 2d       	mov	r31, r0
    3166:	68 94       	set
    3168:	aa 24       	eor	r10, r10
    316a:	a6 f8       	bld	r10, 6
    316c:	68 94       	set
    316e:	cc 24       	eor	r12, r12
    3170:	c6 f8       	bld	r12, 6
    3172:	e1 2c       	mov	r14, r1
    3174:	00 e0       	ldi	r16, 0x00	; 0
    3176:	23 e0       	ldi	r18, 0x03	; 3
    3178:	40 e0       	ldi	r20, 0x00	; 0
    317a:	51 ee       	ldi	r21, 0xE1	; 225
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	8c 2f       	mov	r24, r28
    3182:	69 d9       	rcall	.-3374   	; 0x2456 <serial_new_instance>
    3184:	90 93 ce 07 	sts	0x07CE, r25	; 0x8007ce <_rn2483_serial+0x1>
    3188:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <_rn2483_serial>
    318c:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    3190:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    3194:	64 e0       	ldi	r22, 0x04	; 4
    3196:	87 e0       	ldi	r24, 0x07	; 7
    3198:	91 e0       	ldi	r25, 0x01	; 1
    319a:	19 95       	eicall
    319c:	cf 91       	pop	r28
    319e:	0f 91       	pop	r16
    31a0:	ef 90       	pop	r14
    31a2:	cf 90       	pop	r12
    31a4:	af 90       	pop	r10
    31a6:	9f 90       	pop	r9
    31a8:	8f 90       	pop	r8
    31aa:	08 95       	ret

000031ac <lora_driver_reset_rn2483>:
    31ac:	88 23       	and	r24, r24
    31ae:	49 f0       	breq	.+18     	; 0x31c2 <lora_driver_reset_rn2483+0x16>
    31b0:	e0 91 a1 08 	lds	r30, 0x08A1	; 0x8008a1 <register_access+0x12>
    31b4:	f0 91 a2 08 	lds	r31, 0x08A2	; 0x8008a2 <register_access+0x13>
    31b8:	64 e0       	ldi	r22, 0x04	; 4
    31ba:	88 e0       	ldi	r24, 0x08	; 8
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	19 95       	eicall
    31c0:	08 95       	ret
    31c2:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <register_access+0x8>
    31c6:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <register_access+0x9>
    31ca:	64 e0       	ldi	r22, 0x04	; 4
    31cc:	88 e0       	ldi	r24, 0x08	; 8
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	19 95       	eicall
    31d2:	08 95       	ret

000031d4 <lora_driver_rn2483_factory_reset>:
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	81 eb       	ldi	r24, 0xB1	; 177
    31da:	93 e0       	ldi	r25, 0x03	; 3
    31dc:	11 df       	rcall	.-478    	; 0x3000 <_upload_message>
    31de:	e4 e5       	ldi	r30, 0x54	; 84
    31e0:	f8 e0       	ldi	r31, 0x08	; 8
    31e2:	01 90       	ld	r0, Z+
    31e4:	00 20       	and	r0, r0
    31e6:	e9 f7       	brne	.-6      	; 0x31e2 <lora_driver_rn2483_factory_reset+0xe>
    31e8:	31 97       	sbiw	r30, 0x01	; 1
    31ea:	e4 55       	subi	r30, 0x54	; 84
    31ec:	f8 40       	sbci	r31, 0x08	; 8
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	75 97       	sbiw	r30, 0x15	; 21
    31f2:	08 f0       	brcs	.+2      	; 0x31f6 <lora_driver_rn2483_factory_reset+0x22>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	08 95       	ret

000031f8 <lora_driver_get_rn2483_hweui>:
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	ec 01       	movw	r28, r24
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	82 ec       	ldi	r24, 0xC2	; 194
    3204:	93 e0       	ldi	r25, 0x03	; 3
    3206:	fc de       	rcall	.-520    	; 0x3000 <_upload_message>
    3208:	e4 e5       	ldi	r30, 0x54	; 84
    320a:	f8 e0       	ldi	r31, 0x08	; 8
    320c:	01 90       	ld	r0, Z+
    320e:	00 20       	and	r0, r0
    3210:	e9 f7       	brne	.-6      	; 0x320c <lora_driver_get_rn2483_hweui+0x14>
    3212:	e5 56       	subi	r30, 0x65	; 101
    3214:	f8 40       	sbci	r31, 0x08	; 8
    3216:	31 f4       	brne	.+12     	; 0x3224 <lora_driver_get_rn2483_hweui+0x2c>
    3218:	64 e5       	ldi	r22, 0x54	; 84
    321a:	78 e0       	ldi	r23, 0x08	; 8
    321c:	ce 01       	movw	r24, r28
    321e:	d7 d6       	rcall	.+3502   	; 0x3fce <strcpy>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <lora_driver_get_rn2483_hweui+0x30>
    3224:	18 82       	st	Y, r1
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	08 95       	ret

0000322e <lora_driver_set_device_identifier>:
    322e:	fc 01       	movw	r30, r24
    3230:	01 90       	ld	r0, Z+
    3232:	00 20       	and	r0, r0
    3234:	e9 f7       	brne	.-6      	; 0x3230 <lora_driver_set_device_identifier+0x2>
    3236:	9f 01       	movw	r18, r30
    3238:	21 51       	subi	r18, 0x11	; 17
    323a:	31 09       	sbc	r19, r1
    323c:	28 17       	cp	r18, r24
    323e:	39 07       	cpc	r19, r25
    3240:	29 f4       	brne	.+10     	; 0x324c <lora_driver_set_device_identifier+0x1e>
    3242:	bc 01       	movw	r22, r24
    3244:	80 ef       	ldi	r24, 0xF0	; 240
    3246:	93 e0       	ldi	r25, 0x03	; 3
    3248:	6b cf       	rjmp	.-298    	; 0x3120 <_upload_message_rc>
    324a:	08 95       	ret
    324c:	89 e0       	ldi	r24, 0x09	; 9
    324e:	08 95       	ret

00003250 <lora_driver_set_application_identifier>:
    3250:	fc 01       	movw	r30, r24
    3252:	01 90       	ld	r0, Z+
    3254:	00 20       	and	r0, r0
    3256:	e9 f7       	brne	.-6      	; 0x3252 <lora_driver_set_application_identifier+0x2>
    3258:	9f 01       	movw	r18, r30
    325a:	21 51       	subi	r18, 0x11	; 17
    325c:	31 09       	sbc	r19, r1
    325e:	28 17       	cp	r18, r24
    3260:	39 07       	cpc	r19, r25
    3262:	29 f4       	brne	.+10     	; 0x326e <lora_driver_set_application_identifier+0x1e>
    3264:	bc 01       	movw	r22, r24
    3266:	8f ef       	ldi	r24, 0xFF	; 255
    3268:	93 e0       	ldi	r25, 0x03	; 3
    326a:	5a cf       	rjmp	.-332    	; 0x3120 <_upload_message_rc>
    326c:	08 95       	ret
    326e:	89 e0       	ldi	r24, 0x09	; 9
    3270:	08 95       	ret

00003272 <lora_driver_set_application_key>:
    3272:	fc 01       	movw	r30, r24
    3274:	01 90       	ld	r0, Z+
    3276:	00 20       	and	r0, r0
    3278:	e9 f7       	brne	.-6      	; 0x3274 <lora_driver_set_application_key+0x2>
    327a:	9f 01       	movw	r18, r30
    327c:	21 52       	subi	r18, 0x21	; 33
    327e:	31 09       	sbc	r19, r1
    3280:	28 17       	cp	r18, r24
    3282:	39 07       	cpc	r19, r25
    3284:	29 f4       	brne	.+10     	; 0x3290 <lora_driver_set_application_key+0x1e>
    3286:	bc 01       	movw	r22, r24
    3288:	8e e0       	ldi	r24, 0x0E	; 14
    328a:	94 e0       	ldi	r25, 0x04	; 4
    328c:	49 cf       	rjmp	.-366    	; 0x3120 <_upload_message_rc>
    328e:	08 95       	ret
    3290:	89 e0       	ldi	r24, 0x09	; 9
    3292:	08 95       	ret

00003294 <lora_driver_save_mac>:
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	8d e4       	ldi	r24, 0x4D	; 77
    329a:	94 e0       	ldi	r25, 0x04	; 4
    329c:	41 cf       	rjmp	.-382    	; 0x3120 <_upload_message_rc>
    329e:	08 95       	ret

000032a0 <lora_driver_join>:
    32a0:	e8 2f       	mov	r30, r24
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	ee 0f       	add	r30, r30
    32a6:	ff 1f       	adc	r31, r31
    32a8:	ef 5e       	subi	r30, 0xEF	; 239
    32aa:	f9 4f       	sbci	r31, 0xF9	; 249
    32ac:	60 81       	ld	r22, Z
    32ae:	71 81       	ldd	r23, Z+1	; 0x01
    32b0:	86 e5       	ldi	r24, 0x56	; 86
    32b2:	94 e0       	ldi	r25, 0x04	; 4
    32b4:	35 df       	rcall	.-406    	; 0x3120 <_upload_message_rc>
    32b6:	81 11       	cpse	r24, r1
    32b8:	12 c0       	rjmp	.+36     	; 0x32de <lora_driver_join+0x3e>
    32ba:	28 e2       	ldi	r18, 0x28	; 40
    32bc:	35 e0       	ldi	r19, 0x05	; 5
    32be:	4d e2       	ldi	r20, 0x2D	; 45
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	64 e5       	ldi	r22, 0x54	; 84
    32c4:	78 e0       	ldi	r23, 0x08	; 8
    32c6:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <_reply_buffer_handle>
    32ca:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <_reply_buffer_handle+0x1>
    32ce:	0e 94 ad 09 	call	0x135a	; 0x135a <xStreamBufferReceive>
    32d2:	88 23       	and	r24, r24
    32d4:	21 f0       	breq	.+8      	; 0x32de <lora_driver_join+0x3e>
    32d6:	84 e5       	ldi	r24, 0x54	; 84
    32d8:	98 e0       	ldi	r25, 0x08	; 8
    32da:	e8 ce       	rjmp	.-560    	; 0x30ac <_reply2return_code>
    32dc:	08 95       	ret
    32de:	84 e5       	ldi	r24, 0x54	; 84
    32e0:	98 e0       	ldi	r25, 0x08	; 8
    32e2:	e4 ce       	rjmp	.-568    	; 0x30ac <_reply2return_code>
    32e4:	08 95       	ret

000032e6 <lora_driver_sent_upload_message>:
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	1f 92       	push	r1
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	db 01       	movw	r26, r22
    32f2:	11 96       	adiw	r26, 0x01	; 1
    32f4:	9c 91       	ld	r25, X
    32f6:	11 97       	sbiw	r26, 0x01	; 1
    32f8:	95 31       	cpi	r25, 0x15	; 21
    32fa:	08 f0       	brcs	.+2      	; 0x32fe <lora_driver_sent_upload_message+0x18>
    32fc:	86 c0       	rjmp	.+268    	; 0x340a <lora_driver_sent_upload_message+0x124>
    32fe:	99 23       	and	r25, r25
    3300:	81 f1       	breq	.+96     	; 0x3362 <lora_driver_sent_upload_message+0x7c>
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	27 2f       	mov	r18, r23
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	46 2f       	mov	r20, r22
    330c:	50 e0       	ldi	r21, 0x00	; 0
    330e:	fd 01       	movw	r30, r26
    3310:	e4 0f       	add	r30, r20
    3312:	f5 1f       	adc	r31, r21
    3314:	92 81       	ldd	r25, Z+2	; 0x02
    3316:	92 95       	swap	r25
    3318:	9f 70       	andi	r25, 0x0F	; 15
    331a:	9a 30       	cpi	r25, 0x0A	; 10
    331c:	10 f0       	brcs	.+4      	; 0x3322 <lora_driver_sent_upload_message+0x3c>
    331e:	99 5c       	subi	r25, 0xC9	; 201
    3320:	01 c0       	rjmp	.+2      	; 0x3324 <lora_driver_sent_upload_message+0x3e>
    3322:	90 5d       	subi	r25, 0xD0	; 208
    3324:	f9 01       	movw	r30, r18
    3326:	eb 51       	subi	r30, 0x1B	; 27
    3328:	f8 4f       	sbci	r31, 0xF8	; 248
    332a:	90 83       	st	Z, r25
    332c:	2f 5f       	subi	r18, 0xFF	; 255
    332e:	3f 4f       	sbci	r19, 0xFF	; 255
    3330:	fd 01       	movw	r30, r26
    3332:	e4 0f       	add	r30, r20
    3334:	f5 1f       	adc	r31, r21
    3336:	92 81       	ldd	r25, Z+2	; 0x02
    3338:	9f 70       	andi	r25, 0x0F	; 15
    333a:	49 2f       	mov	r20, r25
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	4a 30       	cpi	r20, 0x0A	; 10
    3340:	51 05       	cpc	r21, r1
    3342:	14 f0       	brlt	.+4      	; 0x3348 <lora_driver_sent_upload_message+0x62>
    3344:	99 5c       	subi	r25, 0xC9	; 201
    3346:	01 c0       	rjmp	.+2      	; 0x334a <lora_driver_sent_upload_message+0x64>
    3348:	90 5d       	subi	r25, 0xD0	; 208
    334a:	f9 01       	movw	r30, r18
    334c:	eb 51       	subi	r30, 0x1B	; 27
    334e:	f8 4f       	sbci	r31, 0xF8	; 248
    3350:	90 83       	st	Z, r25
    3352:	7e 5f       	subi	r23, 0xFE	; 254
    3354:	6f 5f       	subi	r22, 0xFF	; 255
    3356:	11 96       	adiw	r26, 0x01	; 1
    3358:	9c 91       	ld	r25, X
    335a:	11 97       	sbiw	r26, 0x01	; 1
    335c:	69 17       	cp	r22, r25
    335e:	98 f2       	brcs	.-90     	; 0x3306 <lora_driver_sent_upload_message+0x20>
    3360:	01 c0       	rjmp	.+2      	; 0x3364 <lora_driver_sent_upload_message+0x7e>
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	e7 2f       	mov	r30, r23
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	eb 51       	subi	r30, 0x1B	; 27
    336a:	f8 4f       	sbci	r31, 0xF8	; 248
    336c:	10 82       	st	Z, r1
    336e:	4c 91       	ld	r20, X
    3370:	81 11       	cpse	r24, r1
    3372:	03 c0       	rjmp	.+6      	; 0x337a <lora_driver_sent_upload_message+0x94>
    3374:	8f e5       	ldi	r24, 0x5F	; 95
    3376:	94 e0       	ldi	r25, 0x04	; 4
    3378:	02 c0       	rjmp	.+4      	; 0x337e <lora_driver_sent_upload_message+0x98>
    337a:	81 e6       	ldi	r24, 0x61	; 97
    337c:	94 e0       	ldi	r25, 0x04	; 4
    337e:	25 ee       	ldi	r18, 0xE5	; 229
    3380:	37 e0       	ldi	r19, 0x07	; 7
    3382:	3f 93       	push	r19
    3384:	2f 93       	push	r18
    3386:	1f 92       	push	r1
    3388:	4f 93       	push	r20
    338a:	9f 93       	push	r25
    338c:	8f 93       	push	r24
    338e:	85 e6       	ldi	r24, 0x65	; 101
    3390:	94 e0       	ldi	r25, 0x04	; 4
    3392:	9f 93       	push	r25
    3394:	8f 93       	push	r24
    3396:	87 e2       	ldi	r24, 0x27	; 39
    3398:	98 e0       	ldi	r25, 0x08	; 8
    339a:	9f 93       	push	r25
    339c:	8f 93       	push	r24
    339e:	79 d6       	rcall	.+3314   	; 0x4092 <sprintf>
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	87 e2       	ldi	r24, 0x27	; 39
    33a6:	98 e0       	ldi	r25, 0x08	; 8
    33a8:	bb de       	rcall	.-650    	; 0x3120 <_upload_message_rc>
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	8e 30       	cpi	r24, 0x0E	; 14
    33b6:	51 f5       	brne	.+84     	; 0x340c <lora_driver_sent_upload_message+0x126>
    33b8:	87 e0       	ldi	r24, 0x07	; 7
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	be 01       	movw	r22, r28
    33be:	6f 5f       	subi	r22, 0xFF	; 255
    33c0:	7f 4f       	sbci	r23, 0xFF	; 255
    33c2:	84 e5       	ldi	r24, 0x54	; 84
    33c4:	98 e0       	ldi	r25, 0x08	; 8
    33c6:	38 d1       	rcall	.+624    	; 0x3638 <decode_port_no>
    33c8:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_downlink_payload>
    33cc:	e9 81       	ldd	r30, Y+1	; 0x01
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	ec 5a       	subi	r30, 0xAC	; 172
    33d2:	f7 4f       	sbci	r31, 0xF7	; 247
    33d4:	df 01       	movw	r26, r30
    33d6:	0d 90       	ld	r0, X+
    33d8:	00 20       	and	r0, r0
    33da:	e9 f7       	brne	.-6      	; 0x33d6 <lora_driver_sent_upload_message+0xf0>
    33dc:	11 97       	sbiw	r26, 0x01	; 1
    33de:	ae 1b       	sub	r26, r30
    33e0:	bf 0b       	sbc	r27, r31
    33e2:	aa 23       	and	r26, r26
    33e4:	81 f0       	breq	.+32     	; 0x3406 <lora_driver_sent_upload_message+0x120>
    33e6:	bb 27       	eor	r27, r27
    33e8:	11 97       	sbiw	r26, 0x01	; 1
    33ea:	cd 01       	movw	r24, r26
    33ec:	0a f4       	brpl	.+2      	; 0x33f0 <lora_driver_sent_upload_message+0x10a>
    33ee:	01 96       	adiw	r24, 0x01	; 1
    33f0:	95 95       	asr	r25
    33f2:	87 95       	ror	r24
    33f4:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <_downlink_payload+0x1>
    33f8:	af 01       	movw	r20, r30
    33fa:	4f 5f       	subi	r20, 0xFF	; 255
    33fc:	5f 4f       	sbci	r21, 0xFF	; 255
    33fe:	64 e1       	ldi	r22, 0x14	; 20
    3400:	81 ed       	ldi	r24, 0xD1	; 209
    3402:	97 e0       	ldi	r25, 0x07	; 7
    3404:	45 d1       	rcall	.+650    	; 0x3690 <decode_hexadecimal_string_bytes>
    3406:	8e e0       	ldi	r24, 0x0E	; 14
    3408:	01 c0       	rjmp	.+2      	; 0x340c <lora_driver_sent_upload_message+0x126>
    340a:	84 e1       	ldi	r24, 0x14	; 20
    340c:	0f 90       	pop	r0
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	08 95       	ret

00003414 <lora_driver_set_adaptive_data_rate>:
    3414:	81 30       	cpi	r24, 0x01	; 1
    3416:	19 f0       	breq	.+6      	; 0x341e <lora_driver_set_adaptive_data_rate+0xa>
    3418:	65 e7       	ldi	r22, 0x75	; 117
    341a:	74 e0       	ldi	r23, 0x04	; 4
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <lora_driver_set_adaptive_data_rate+0xe>
    341e:	65 e3       	ldi	r22, 0x35	; 53
    3420:	75 e0       	ldi	r23, 0x05	; 5
    3422:	89 e7       	ldi	r24, 0x79	; 121
    3424:	94 e0       	ldi	r25, 0x04	; 4
    3426:	7c ce       	rjmp	.-776    	; 0x3120 <_upload_message_rc>
    3428:	08 95       	ret

0000342a <lora_driver_configure_to_eu868>:
    342a:	2f 92       	push	r2
    342c:	3f 92       	push	r3
    342e:	4f 92       	push	r4
    3430:	5f 92       	push	r5
    3432:	6f 92       	push	r6
    3434:	7f 92       	push	r7
    3436:	8f 92       	push	r8
    3438:	9f 92       	push	r9
    343a:	af 92       	push	r10
    343c:	bf 92       	push	r11
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	a0 97       	sbiw	r28, 0x20	; 32
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	6e eb       	ldi	r22, 0xBE	; 190
    3460:	74 e0       	ldi	r23, 0x04	; 4
    3462:	8a ec       	ldi	r24, 0xCA	; 202
    3464:	94 e0       	ldi	r25, 0x04	; 4
    3466:	cc dd       	rcall	.-1128   	; 0x3000 <_upload_message>
    3468:	21 de       	rcall	.-958    	; 0x30ac <_reply2return_code>
    346a:	81 11       	cpse	r24, r1
    346c:	9f c0       	rjmp	.+318    	; 0x35ac <lora_driver_configure_to_eu868+0x182>
    346e:	80 e2       	ldi	r24, 0x20	; 32
    3470:	ed e1       	ldi	r30, 0x1D	; 29
    3472:	f2 e0       	ldi	r31, 0x02	; 2
    3474:	de 01       	movw	r26, r28
    3476:	11 96       	adiw	r26, 0x01	; 1
    3478:	01 90       	ld	r0, Z+
    347a:	0d 92       	st	X+, r0
    347c:	8a 95       	dec	r24
    347e:	e1 f7       	brne	.-8      	; 0x3478 <lora_driver_configure_to_eu868+0x4e>
    3480:	9e 01       	movw	r18, r28
    3482:	2f 5f       	subi	r18, 0xFF	; 255
    3484:	3f 4f       	sbci	r19, 0xFF	; 255
    3486:	69 01       	movw	r12, r18
    3488:	e1 2c       	mov	r14, r1
    348a:	f1 2c       	mov	r15, r1
    348c:	0f 2e       	mov	r0, r31
    348e:	f6 ed       	ldi	r31, 0xD6	; 214
    3490:	af 2e       	mov	r10, r31
    3492:	f4 e0       	ldi	r31, 0x04	; 4
    3494:	bf 2e       	mov	r11, r31
    3496:	f0 2d       	mov	r31, r0
    3498:	07 e2       	ldi	r16, 0x27	; 39
    349a:	18 e0       	ldi	r17, 0x08	; 8
    349c:	0f 2e       	mov	r0, r31
    349e:	ff ee       	ldi	r31, 0xEF	; 239
    34a0:	4f 2e       	mov	r4, r31
    34a2:	f4 e0       	ldi	r31, 0x04	; 4
    34a4:	5f 2e       	mov	r5, r31
    34a6:	f0 2d       	mov	r31, r0
    34a8:	0f 2e       	mov	r0, r31
    34aa:	f6 e0       	ldi	r31, 0x06	; 6
    34ac:	8f 2e       	mov	r8, r31
    34ae:	f5 e0       	ldi	r31, 0x05	; 5
    34b0:	9f 2e       	mov	r9, r31
    34b2:	f0 2d       	mov	r31, r0
    34b4:	0f 2e       	mov	r0, r31
    34b6:	f0 e2       	ldi	r31, 0x20	; 32
    34b8:	6f 2e       	mov	r6, r31
    34ba:	f5 e0       	ldi	r31, 0x05	; 5
    34bc:	7f 2e       	mov	r7, r31
    34be:	f0 2d       	mov	r31, r0
    34c0:	3e 2c       	mov	r3, r14
    34c2:	2f 2c       	mov	r2, r15
    34c4:	ff 92       	push	r15
    34c6:	ef 92       	push	r14
    34c8:	bf 92       	push	r11
    34ca:	af 92       	push	r10
    34cc:	1f 93       	push	r17
    34ce:	0f 93       	push	r16
    34d0:	e0 d5       	rcall	.+3008   	; 0x4092 <sprintf>
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	c8 01       	movw	r24, r16
    34d8:	93 dd       	rcall	.-1242   	; 0x3000 <_upload_message>
    34da:	e8 dd       	rcall	.-1072   	; 0x30ac <_reply2return_code>
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	81 11       	cpse	r24, r1
    34ea:	60 c0       	rjmp	.+192    	; 0x35ac <lora_driver_configure_to_eu868+0x182>
    34ec:	32 e0       	ldi	r19, 0x02	; 2
    34ee:	3e 15       	cp	r19, r14
    34f0:	e0 f4       	brcc	.+56     	; 0x352a <lora_driver_configure_to_eu868+0x100>
    34f2:	f6 01       	movw	r30, r12
    34f4:	83 81       	ldd	r24, Z+3	; 0x03
    34f6:	8f 93       	push	r24
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	8f 93       	push	r24
    34fc:	81 81       	ldd	r24, Z+1	; 0x01
    34fe:	8f 93       	push	r24
    3500:	80 81       	ld	r24, Z
    3502:	8f 93       	push	r24
    3504:	ff 92       	push	r15
    3506:	ef 92       	push	r14
    3508:	5f 92       	push	r5
    350a:	4f 92       	push	r4
    350c:	1f 93       	push	r17
    350e:	0f 93       	push	r16
    3510:	c0 d5       	rcall	.+2944   	; 0x4092 <sprintf>
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	c8 01       	movw	r24, r16
    3518:	73 dd       	rcall	.-1306   	; 0x3000 <_upload_message>
    351a:	c8 dd       	rcall	.-1136   	; 0x30ac <_reply2return_code>
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	81 11       	cpse	r24, r1
    3528:	41 c0       	rjmp	.+130    	; 0x35ac <lora_driver_configure_to_eu868+0x182>
    352a:	2f 92       	push	r2
    352c:	3f 92       	push	r3
    352e:	9f 92       	push	r9
    3530:	8f 92       	push	r8
    3532:	1f 93       	push	r17
    3534:	0f 93       	push	r16
    3536:	ad d5       	rcall	.+2906   	; 0x4092 <sprintf>
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	c8 01       	movw	r24, r16
    353e:	60 dd       	rcall	.-1344   	; 0x3000 <_upload_message>
    3540:	b5 dd       	rcall	.-1174   	; 0x30ac <_reply2return_code>
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	81 11       	cpse	r24, r1
    3550:	2d c0       	rjmp	.+90     	; 0x35ac <lora_driver_configure_to_eu868+0x182>
    3552:	2f 92       	push	r2
    3554:	3f 92       	push	r3
    3556:	7f 92       	push	r7
    3558:	6f 92       	push	r6
    355a:	1f 93       	push	r17
    355c:	0f 93       	push	r16
    355e:	99 d5       	rcall	.+2866   	; 0x4092 <sprintf>
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	c8 01       	movw	r24, r16
    3566:	4c dd       	rcall	.-1384   	; 0x3000 <_upload_message>
    3568:	a1 dd       	rcall	.-1214   	; 0x30ac <_reply2return_code>
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	81 11       	cpse	r24, r1
    3578:	19 c0       	rjmp	.+50     	; 0x35ac <lora_driver_configure_to_eu868+0x182>
    357a:	3f ef       	ldi	r19, 0xFF	; 255
    357c:	e3 1a       	sub	r14, r19
    357e:	f3 0a       	sbc	r15, r19
    3580:	84 e0       	ldi	r24, 0x04	; 4
    3582:	c8 0e       	add	r12, r24
    3584:	d1 1c       	adc	r13, r1
    3586:	98 e0       	ldi	r25, 0x08	; 8
    3588:	e9 16       	cp	r14, r25
    358a:	f1 04       	cpc	r15, r1
    358c:	09 f0       	breq	.+2      	; 0x3590 <lora_driver_configure_to_eu868+0x166>
    358e:	98 cf       	rjmp	.-208    	; 0x34c0 <lora_driver_configure_to_eu868+0x96>
    3590:	60 e0       	ldi	r22, 0x00	; 0
    3592:	70 e0       	ldi	r23, 0x00	; 0
    3594:	88 e3       	ldi	r24, 0x38	; 56
    3596:	95 e0       	ldi	r25, 0x05	; 5
    3598:	33 dd       	rcall	.-1434   	; 0x3000 <_upload_message>
    359a:	88 dd       	rcall	.-1264   	; 0x30ac <_reply2return_code>
    359c:	81 11       	cpse	r24, r1
    359e:	06 c0       	rjmp	.+12     	; 0x35ac <lora_driver_configure_to_eu868+0x182>
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	89 e4       	ldi	r24, 0x49	; 73
    35a6:	95 e0       	ldi	r25, 0x05	; 5
    35a8:	2b dd       	rcall	.-1450   	; 0x3000 <_upload_message>
    35aa:	80 dd       	rcall	.-1280   	; 0x30ac <_reply2return_code>
    35ac:	a0 96       	adiw	r28, 0x20	; 32
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	1f 91       	pop	r17
    35be:	0f 91       	pop	r16
    35c0:	ff 90       	pop	r15
    35c2:	ef 90       	pop	r14
    35c4:	df 90       	pop	r13
    35c6:	cf 90       	pop	r12
    35c8:	bf 90       	pop	r11
    35ca:	af 90       	pop	r10
    35cc:	9f 90       	pop	r9
    35ce:	8f 90       	pop	r8
    35d0:	7f 90       	pop	r7
    35d2:	6f 90       	pop	r6
    35d4:	5f 90       	pop	r5
    35d6:	4f 90       	pop	r4
    35d8:	3f 90       	pop	r3
    35da:	2f 90       	pop	r2
    35dc:	08 95       	ret

000035de <lora_driver_set_otaa_identity>:
    35de:	ef 92       	push	r14
    35e0:	ff 92       	push	r15
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	ec 01       	movw	r28, r24
    35ec:	8b 01       	movw	r16, r22
    35ee:	7a 01       	movw	r14, r20
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	10 df       	rcall	.-480    	; 0x3414 <lora_driver_set_adaptive_data_rate>
    35f4:	81 11       	cpse	r24, r1
    35f6:	0d c0       	rjmp	.+26     	; 0x3612 <lora_driver_set_otaa_identity+0x34>
    35f8:	ce 01       	movw	r24, r28
    35fa:	2a de       	rcall	.-940    	; 0x3250 <lora_driver_set_application_identifier>
    35fc:	81 11       	cpse	r24, r1
    35fe:	09 c0       	rjmp	.+18     	; 0x3612 <lora_driver_set_otaa_identity+0x34>
    3600:	c8 01       	movw	r24, r16
    3602:	37 de       	rcall	.-914    	; 0x3272 <lora_driver_set_application_key>
    3604:	81 11       	cpse	r24, r1
    3606:	05 c0       	rjmp	.+10     	; 0x3612 <lora_driver_set_otaa_identity+0x34>
    3608:	c7 01       	movw	r24, r14
    360a:	11 de       	rcall	.-990    	; 0x322e <lora_driver_set_device_identifier>
    360c:	81 11       	cpse	r24, r1
    360e:	01 c0       	rjmp	.+2      	; 0x3612 <lora_driver_set_otaa_identity+0x34>
    3610:	41 de       	rcall	.-894    	; 0x3294 <lora_driver_save_mac>
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	ff 90       	pop	r15
    361c:	ef 90       	pop	r14
    361e:	08 95       	ret

00003620 <lora_driver_map_return_code_to_text>:
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	fc 01       	movw	r30, r24
    3624:	ee 0f       	add	r30, r30
    3626:	ff 1f       	adc	r31, r31
    3628:	8e 0f       	add	r24, r30
    362a:	9f 1f       	adc	r25, r31
    362c:	fc 01       	movw	r30, r24
    362e:	eb 5e       	subi	r30, 0xEB	; 235
    3630:	f9 4f       	sbci	r31, 0xF9	; 249
    3632:	81 81       	ldd	r24, Z+1	; 0x01
    3634:	92 81       	ldd	r25, Z+2	; 0x02
    3636:	08 95       	ret

00003638 <decode_port_no>:
    3638:	dc 01       	movw	r26, r24
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	29 f1       	breq	.+74     	; 0x3688 <decode_port_no+0x50>
    363e:	fb 01       	movw	r30, r22
    3640:	20 81       	ld	r18, Z
    3642:	fc 01       	movw	r30, r24
    3644:	01 90       	ld	r0, Z+
    3646:	00 20       	and	r0, r0
    3648:	e9 f7       	brne	.-6      	; 0x3644 <decode_port_no+0xc>
    364a:	31 97       	sbiw	r30, 0x01	; 1
    364c:	e8 1b       	sub	r30, r24
    364e:	f9 0b       	sbc	r31, r25
    3650:	82 2f       	mov	r24, r18
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	e8 17       	cp	r30, r24
    3656:	f9 07       	cpc	r31, r25
    3658:	c8 f0       	brcs	.+50     	; 0x368c <decode_port_no+0x54>
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	08 c0       	rjmp	.+16     	; 0x366e <decode_port_no+0x36>
    365e:	88 0f       	add	r24, r24
    3660:	38 2f       	mov	r19, r24
    3662:	33 0f       	add	r19, r19
    3664:	33 0f       	add	r19, r19
    3666:	83 0f       	add	r24, r19
    3668:	80 53       	subi	r24, 0x30	; 48
    366a:	89 0f       	add	r24, r25
    366c:	2f 5f       	subi	r18, 0xFF	; 255
    366e:	fd 01       	movw	r30, r26
    3670:	e2 0f       	add	r30, r18
    3672:	f1 1d       	adc	r31, r1
    3674:	90 81       	ld	r25, Z
    3676:	30 ed       	ldi	r19, 0xD0	; 208
    3678:	39 0f       	add	r19, r25
    367a:	3a 30       	cpi	r19, 0x0A	; 10
    367c:	10 f4       	brcc	.+4      	; 0x3682 <decode_port_no+0x4a>
    367e:	91 11       	cpse	r25, r1
    3680:	ee cf       	rjmp	.-36     	; 0x365e <decode_port_no+0x26>
    3682:	fb 01       	movw	r30, r22
    3684:	20 83       	st	Z, r18
    3686:	08 95       	ret
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	08 95       	ret
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	08 95       	ret

00003690 <decode_hexadecimal_string_bytes>:
    3690:	0f 93       	push	r16
    3692:	1f 93       	push	r17
    3694:	cf 93       	push	r28
    3696:	df 93       	push	r29
    3698:	dc 01       	movw	r26, r24
    369a:	ea 01       	movw	r28, r20
    369c:	20 97       	sbiw	r28, 0x00	; 0
    369e:	e1 f1       	breq	.+120    	; 0x3718 <decode_hexadecimal_string_bytes+0x88>
    36a0:	fa 01       	movw	r30, r20
    36a2:	01 90       	ld	r0, Z+
    36a4:	00 20       	and	r0, r0
    36a6:	e9 f7       	brne	.-6      	; 0x36a2 <decode_hexadecimal_string_bytes+0x12>
    36a8:	31 97       	sbiw	r30, 0x01	; 1
    36aa:	e4 1b       	sub	r30, r20
    36ac:	f5 0b       	sbc	r31, r21
    36ae:	32 97       	sbiw	r30, 0x02	; 2
    36b0:	10 f5       	brcc	.+68     	; 0x36f6 <decode_hexadecimal_string_bytes+0x66>
    36b2:	32 c0       	rjmp	.+100    	; 0x3718 <decode_hexadecimal_string_bytes+0x88>
    36b4:	8d 01       	movw	r16, r26
    36b6:	04 0f       	add	r16, r20
    36b8:	15 1f       	adc	r17, r21
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	ae 01       	movw	r20, r28
    36be:	42 0f       	add	r20, r18
    36c0:	53 1f       	adc	r21, r19
    36c2:	fa 01       	movw	r30, r20
    36c4:	90 81       	ld	r25, Z
    36c6:	91 34       	cpi	r25, 0x41	; 65
    36c8:	28 f0       	brcs	.+10     	; 0x36d4 <decode_hexadecimal_string_bytes+0x44>
    36ca:	97 53       	subi	r25, 0x37	; 55
    36cc:	59 2f       	mov	r21, r25
    36ce:	52 95       	swap	r21
    36d0:	50 7f       	andi	r21, 0xF0	; 240
    36d2:	03 c0       	rjmp	.+6      	; 0x36da <decode_hexadecimal_string_bytes+0x4a>
    36d4:	59 2f       	mov	r21, r25
    36d6:	52 95       	swap	r21
    36d8:	50 7f       	andi	r21, 0xF0	; 240
    36da:	2c 0f       	add	r18, r28
    36dc:	3d 1f       	adc	r19, r29
    36de:	f9 01       	movw	r30, r18
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	91 34       	cpi	r25, 0x41	; 65
    36e4:	10 f0       	brcs	.+4      	; 0x36ea <decode_hexadecimal_string_bytes+0x5a>
    36e6:	97 53       	subi	r25, 0x37	; 55
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <decode_hexadecimal_string_bytes+0x5c>
    36ea:	90 53       	subi	r25, 0x30	; 48
    36ec:	95 0f       	add	r25, r21
    36ee:	f8 01       	movw	r30, r16
    36f0:	90 83       	st	Z, r25
    36f2:	8f 5f       	subi	r24, 0xFF	; 255
    36f4:	01 c0       	rjmp	.+2      	; 0x36f8 <decode_hexadecimal_string_bytes+0x68>
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	28 2f       	mov	r18, r24
    36fa:	22 0f       	add	r18, r18
    36fc:	48 2f       	mov	r20, r24
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	fe 01       	movw	r30, r28
    3702:	01 90       	ld	r0, Z+
    3704:	00 20       	and	r0, r0
    3706:	e9 f7       	brne	.-6      	; 0x3702 <decode_hexadecimal_string_bytes+0x72>
    3708:	31 97       	sbiw	r30, 0x01	; 1
    370a:	ec 1b       	sub	r30, r28
    370c:	fd 0b       	sbc	r31, r29
    370e:	4e 17       	cp	r20, r30
    3710:	5f 07       	cpc	r21, r31
    3712:	10 f4       	brcc	.+4      	; 0x3718 <decode_hexadecimal_string_bytes+0x88>
    3714:	86 13       	cpse	r24, r22
    3716:	ce cf       	rjmp	.-100    	; 0x36b4 <decode_hexadecimal_string_bytes+0x24>
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	08 95       	ret

00003722 <reg_read_register>:
    3722:	fc 01       	movw	r30, r24
    3724:	80 81       	ld	r24, Z
    3726:	08 95       	ret

00003728 <reg_read_bit>:
    3728:	fc 01       	movw	r30, r24
    372a:	20 81       	ld	r18, Z
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <reg_read_bit+0xe>
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	6a 95       	dec	r22
    3738:	e2 f7       	brpl	.-8      	; 0x3732 <reg_read_bit+0xa>
    373a:	82 23       	and	r24, r18
    373c:	08 95       	ret

0000373e <reg_read_bits>:
    373e:	fc 01       	movw	r30, r24
    3740:	80 81       	ld	r24, Z
    3742:	86 23       	and	r24, r22
    3744:	08 95       	ret

00003746 <reg_set_register>:
    3746:	fc 01       	movw	r30, r24
    3748:	60 83       	st	Z, r22
    374a:	08 95       	ret

0000374c <reg_clear_register>:
    374c:	fc 01       	movw	r30, r24
    374e:	10 82       	st	Z, r1
    3750:	08 95       	ret

00003752 <reg_set_bit>:
    3752:	fc 01       	movw	r30, r24
    3754:	40 81       	ld	r20, Z
    3756:	21 e0       	ldi	r18, 0x01	; 1
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <reg_set_bit+0xe>
    375c:	22 0f       	add	r18, r18
    375e:	33 1f       	adc	r19, r19
    3760:	6a 95       	dec	r22
    3762:	e2 f7       	brpl	.-8      	; 0x375c <reg_set_bit+0xa>
    3764:	24 2b       	or	r18, r20
    3766:	20 83       	st	Z, r18
    3768:	08 95       	ret

0000376a <reg_set_bits>:
    376a:	fc 01       	movw	r30, r24
    376c:	20 81       	ld	r18, Z
    376e:	62 2b       	or	r22, r18
    3770:	60 83       	st	Z, r22
    3772:	08 95       	ret

00003774 <reg_toggle_bit>:
    3774:	fc 01       	movw	r30, r24
    3776:	40 81       	ld	r20, Z
    3778:	21 e0       	ldi	r18, 0x01	; 1
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <reg_toggle_bit+0xe>
    377e:	22 0f       	add	r18, r18
    3780:	33 1f       	adc	r19, r19
    3782:	6a 95       	dec	r22
    3784:	e2 f7       	brpl	.-8      	; 0x377e <reg_toggle_bit+0xa>
    3786:	24 27       	eor	r18, r20
    3788:	20 83       	st	Z, r18
    378a:	08 95       	ret

0000378c <reg_toggle_bits>:
    378c:	fc 01       	movw	r30, r24
    378e:	20 81       	ld	r18, Z
    3790:	62 27       	eor	r22, r18
    3792:	60 83       	st	Z, r22
    3794:	08 95       	ret

00003796 <reg_clear_bit>:
    3796:	fc 01       	movw	r30, r24
    3798:	90 81       	ld	r25, Z
    379a:	21 e0       	ldi	r18, 0x01	; 1
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <reg_clear_bit+0xe>
    37a0:	22 0f       	add	r18, r18
    37a2:	33 1f       	adc	r19, r19
    37a4:	6a 95       	dec	r22
    37a6:	e2 f7       	brpl	.-8      	; 0x37a0 <reg_clear_bit+0xa>
    37a8:	20 95       	com	r18
    37aa:	29 23       	and	r18, r25
    37ac:	20 83       	st	Z, r18
    37ae:	08 95       	ret

000037b0 <reg_clear_bits>:
    37b0:	fc 01       	movw	r30, r24
    37b2:	90 81       	ld	r25, Z
    37b4:	60 95       	com	r22
    37b6:	69 23       	and	r22, r25
    37b8:	60 83       	st	Z, r22
    37ba:	08 95       	ret

000037bc <__vector_39>:
    37bc:	1f 92       	push	r1
    37be:	0f 92       	push	r0
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	0f 92       	push	r0
    37c4:	11 24       	eor	r1, r1
    37c6:	0b b6       	in	r0, 0x3b	; 59
    37c8:	0f 92       	push	r0
    37ca:	2f 93       	push	r18
    37cc:	3f 93       	push	r19
    37ce:	4f 93       	push	r20
    37d0:	5f 93       	push	r21
    37d2:	6f 93       	push	r22
    37d4:	7f 93       	push	r23
    37d6:	8f 93       	push	r24
    37d8:	9f 93       	push	r25
    37da:	af 93       	push	r26
    37dc:	bf 93       	push	r27
    37de:	ef 93       	push	r30
    37e0:	ff 93       	push	r31
    37e2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    37e6:	8e 2f       	mov	r24, r30
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	fc 01       	movw	r30, r24
    37ec:	38 97       	sbiw	r30, 0x08	; 8
    37ee:	e1 35       	cpi	r30, 0x51	; 81
    37f0:	f1 05       	cpc	r31, r1
    37f2:	08 f0       	brcs	.+2      	; 0x37f6 <__vector_39+0x3a>
    37f4:	75 c0       	rjmp	.+234    	; 0x38e0 <__vector_39+0x124>
    37f6:	88 27       	eor	r24, r24
    37f8:	e4 58       	subi	r30, 0x84	; 132
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	8f 4f       	sbci	r24, 0xFF	; 255
    37fe:	9b c0       	rjmp	.+310    	; 0x3936 <__tablejump2__>
    3800:	10 92 81 08 	sts	0x0881, r1	; 0x800881 <_index.1885>
    3804:	e0 91 81 08 	lds	r30, 0x0881	; 0x800881 <_index.1885>
    3808:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <_twiMessageLen>
    380c:	e8 17       	cp	r30, r24
    380e:	70 f4       	brcc	.+28     	; 0x382c <__vector_39+0x70>
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	8e 0f       	add	r24, r30
    3814:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <_index.1885>
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	eb 57       	subi	r30, 0x7B	; 123
    381c:	f7 4f       	sbci	r31, 0xF7	; 247
    381e:	80 81       	ld	r24, Z
    3820:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3824:	85 e8       	ldi	r24, 0x85	; 133
    3826:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    382a:	72 c0       	rjmp	.+228    	; 0x3910 <__vector_39+0x154>
    382c:	84 e9       	ldi	r24, 0x94	; 148
    382e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3832:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_twiCurrentHandler>
    3836:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_twiCurrentHandler+0x1>
    383a:	dc 01       	movw	r26, r24
    383c:	12 96       	adiw	r26, 0x02	; 2
    383e:	ed 91       	ld	r30, X+
    3840:	fc 91       	ld	r31, X
    3842:	13 97       	sbiw	r26, 0x03	; 3
    3844:	30 97       	sbiw	r30, 0x00	; 0
    3846:	09 f4       	brne	.+2      	; 0x384a <__vector_39+0x8e>
    3848:	63 c0       	rjmp	.+198    	; 0x3910 <__vector_39+0x154>
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	40 e0       	ldi	r20, 0x00	; 0
    384e:	50 e0       	ldi	r21, 0x00	; 0
    3850:	64 e0       	ldi	r22, 0x04	; 4
    3852:	19 95       	eicall
    3854:	5d c0       	rjmp	.+186    	; 0x3910 <__vector_39+0x154>
    3856:	e0 91 81 08 	lds	r30, 0x0881	; 0x800881 <_index.1885>
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	8e 0f       	add	r24, r30
    385e:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <_index.1885>
    3862:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	eb 57       	subi	r30, 0x7B	; 123
    386a:	f7 4f       	sbci	r31, 0xF7	; 247
    386c:	80 83       	st	Z, r24
    386e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3872:	80 34       	cpi	r24, 0x40	; 64
    3874:	11 f4       	brne	.+4      	; 0x387a <__vector_39+0xbe>
    3876:	10 92 81 08 	sts	0x0881, r1	; 0x800881 <_index.1885>
    387a:	20 91 81 08 	lds	r18, 0x0881	; 0x800881 <_index.1885>
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <_twiMessageLen>
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	28 17       	cp	r18, r24
    388a:	39 07       	cpc	r19, r25
    388c:	24 f4       	brge	.+8      	; 0x3896 <__vector_39+0xda>
    388e:	85 ec       	ldi	r24, 0xC5	; 197
    3890:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3894:	3d c0       	rjmp	.+122    	; 0x3910 <__vector_39+0x154>
    3896:	85 e8       	ldi	r24, 0x85	; 133
    3898:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    389c:	39 c0       	rjmp	.+114    	; 0x3910 <__vector_39+0x154>
    389e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    38a2:	e0 91 81 08 	lds	r30, 0x0881	; 0x800881 <_index.1885>
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	eb 57       	subi	r30, 0x7B	; 123
    38aa:	f7 4f       	sbci	r31, 0xF7	; 247
    38ac:	80 83       	st	Z, r24
    38ae:	84 e9       	ldi	r24, 0x94	; 148
    38b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38b4:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_twiCurrentHandler>
    38b8:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_twiCurrentHandler+0x1>
    38bc:	dc 01       	movw	r26, r24
    38be:	12 96       	adiw	r26, 0x02	; 2
    38c0:	ed 91       	ld	r30, X+
    38c2:	fc 91       	ld	r31, X
    38c4:	13 97       	sbiw	r26, 0x03	; 3
    38c6:	30 97       	sbiw	r30, 0x00	; 0
    38c8:	19 f1       	breq	.+70     	; 0x3910 <__vector_39+0x154>
    38ca:	20 91 84 08 	lds	r18, 0x0884	; 0x800884 <_twiMessageLen>
    38ce:	45 e8       	ldi	r20, 0x85	; 133
    38d0:	58 e0       	ldi	r21, 0x08	; 8
    38d2:	65 e0       	ldi	r22, 0x05	; 5
    38d4:	19 95       	eicall
    38d6:	1c c0       	rjmp	.+56     	; 0x3910 <__vector_39+0x154>
    38d8:	85 ea       	ldi	r24, 0xA5	; 165
    38da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38de:	18 c0       	rjmp	.+48     	; 0x3910 <__vector_39+0x154>
    38e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    38e4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_twiCurrentState>
    38e8:	84 e0       	ldi	r24, 0x04	; 4
    38ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38ee:	80 91 82 08 	lds	r24, 0x0882	; 0x800882 <_twiCurrentHandler>
    38f2:	90 91 83 08 	lds	r25, 0x0883	; 0x800883 <_twiCurrentHandler+0x1>
    38f6:	dc 01       	movw	r26, r24
    38f8:	12 96       	adiw	r26, 0x02	; 2
    38fa:	ed 91       	ld	r30, X+
    38fc:	fc 91       	ld	r31, X
    38fe:	13 97       	sbiw	r26, 0x03	; 3
    3900:	30 97       	sbiw	r30, 0x00	; 0
    3902:	31 f0       	breq	.+12     	; 0x3910 <__vector_39+0x154>
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	40 e0       	ldi	r20, 0x00	; 0
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_twiCurrentState>
    390e:	19 95       	eicall
    3910:	ff 91       	pop	r31
    3912:	ef 91       	pop	r30
    3914:	bf 91       	pop	r27
    3916:	af 91       	pop	r26
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	7f 91       	pop	r23
    391e:	6f 91       	pop	r22
    3920:	5f 91       	pop	r21
    3922:	4f 91       	pop	r20
    3924:	3f 91       	pop	r19
    3926:	2f 91       	pop	r18
    3928:	0f 90       	pop	r0
    392a:	0b be       	out	0x3b, r0	; 59
    392c:	0f 90       	pop	r0
    392e:	0f be       	out	0x3f, r0	; 63
    3930:	0f 90       	pop	r0
    3932:	1f 90       	pop	r1
    3934:	18 95       	reti

00003936 <__tablejump2__>:
    3936:	ee 0f       	add	r30, r30
    3938:	ff 1f       	adc	r31, r31
    393a:	88 1f       	adc	r24, r24
    393c:	8b bf       	out	0x3b, r24	; 59
    393e:	07 90       	elpm	r0, Z+
    3940:	f6 91       	elpm	r31, Z
    3942:	e0 2d       	mov	r30, r0
    3944:	19 94       	eijmp

00003946 <__subsf3>:
    3946:	50 58       	subi	r21, 0x80	; 128

00003948 <__addsf3>:
    3948:	bb 27       	eor	r27, r27
    394a:	aa 27       	eor	r26, r26
    394c:	0e d0       	rcall	.+28     	; 0x396a <__addsf3x>
    394e:	48 c1       	rjmp	.+656    	; 0x3be0 <__fp_round>
    3950:	39 d1       	rcall	.+626    	; 0x3bc4 <__fp_pscA>
    3952:	30 f0       	brcs	.+12     	; 0x3960 <__addsf3+0x18>
    3954:	3e d1       	rcall	.+636    	; 0x3bd2 <__fp_pscB>
    3956:	20 f0       	brcs	.+8      	; 0x3960 <__addsf3+0x18>
    3958:	31 f4       	brne	.+12     	; 0x3966 <__addsf3+0x1e>
    395a:	9f 3f       	cpi	r25, 0xFF	; 255
    395c:	11 f4       	brne	.+4      	; 0x3962 <__addsf3+0x1a>
    395e:	1e f4       	brtc	.+6      	; 0x3966 <__addsf3+0x1e>
    3960:	2e c1       	rjmp	.+604    	; 0x3bbe <__fp_nan>
    3962:	0e f4       	brtc	.+2      	; 0x3966 <__addsf3+0x1e>
    3964:	e0 95       	com	r30
    3966:	e7 fb       	bst	r30, 7
    3968:	24 c1       	rjmp	.+584    	; 0x3bb2 <__fp_inf>

0000396a <__addsf3x>:
    396a:	e9 2f       	mov	r30, r25
    396c:	4a d1       	rcall	.+660    	; 0x3c02 <__fp_split3>
    396e:	80 f3       	brcs	.-32     	; 0x3950 <__addsf3+0x8>
    3970:	ba 17       	cp	r27, r26
    3972:	62 07       	cpc	r22, r18
    3974:	73 07       	cpc	r23, r19
    3976:	84 07       	cpc	r24, r20
    3978:	95 07       	cpc	r25, r21
    397a:	18 f0       	brcs	.+6      	; 0x3982 <__addsf3x+0x18>
    397c:	71 f4       	brne	.+28     	; 0x399a <__addsf3x+0x30>
    397e:	9e f5       	brtc	.+102    	; 0x39e6 <__addsf3x+0x7c>
    3980:	62 c1       	rjmp	.+708    	; 0x3c46 <__fp_zero>
    3982:	0e f4       	brtc	.+2      	; 0x3986 <__addsf3x+0x1c>
    3984:	e0 95       	com	r30
    3986:	0b 2e       	mov	r0, r27
    3988:	ba 2f       	mov	r27, r26
    398a:	a0 2d       	mov	r26, r0
    398c:	0b 01       	movw	r0, r22
    398e:	b9 01       	movw	r22, r18
    3990:	90 01       	movw	r18, r0
    3992:	0c 01       	movw	r0, r24
    3994:	ca 01       	movw	r24, r20
    3996:	a0 01       	movw	r20, r0
    3998:	11 24       	eor	r1, r1
    399a:	ff 27       	eor	r31, r31
    399c:	59 1b       	sub	r21, r25
    399e:	99 f0       	breq	.+38     	; 0x39c6 <__addsf3x+0x5c>
    39a0:	59 3f       	cpi	r21, 0xF9	; 249
    39a2:	50 f4       	brcc	.+20     	; 0x39b8 <__addsf3x+0x4e>
    39a4:	50 3e       	cpi	r21, 0xE0	; 224
    39a6:	68 f1       	brcs	.+90     	; 0x3a02 <__addsf3x+0x98>
    39a8:	1a 16       	cp	r1, r26
    39aa:	f0 40       	sbci	r31, 0x00	; 0
    39ac:	a2 2f       	mov	r26, r18
    39ae:	23 2f       	mov	r18, r19
    39b0:	34 2f       	mov	r19, r20
    39b2:	44 27       	eor	r20, r20
    39b4:	58 5f       	subi	r21, 0xF8	; 248
    39b6:	f3 cf       	rjmp	.-26     	; 0x399e <__addsf3x+0x34>
    39b8:	46 95       	lsr	r20
    39ba:	37 95       	ror	r19
    39bc:	27 95       	ror	r18
    39be:	a7 95       	ror	r26
    39c0:	f0 40       	sbci	r31, 0x00	; 0
    39c2:	53 95       	inc	r21
    39c4:	c9 f7       	brne	.-14     	; 0x39b8 <__addsf3x+0x4e>
    39c6:	7e f4       	brtc	.+30     	; 0x39e6 <__addsf3x+0x7c>
    39c8:	1f 16       	cp	r1, r31
    39ca:	ba 0b       	sbc	r27, r26
    39cc:	62 0b       	sbc	r22, r18
    39ce:	73 0b       	sbc	r23, r19
    39d0:	84 0b       	sbc	r24, r20
    39d2:	ba f0       	brmi	.+46     	; 0x3a02 <__addsf3x+0x98>
    39d4:	91 50       	subi	r25, 0x01	; 1
    39d6:	a1 f0       	breq	.+40     	; 0x3a00 <__addsf3x+0x96>
    39d8:	ff 0f       	add	r31, r31
    39da:	bb 1f       	adc	r27, r27
    39dc:	66 1f       	adc	r22, r22
    39de:	77 1f       	adc	r23, r23
    39e0:	88 1f       	adc	r24, r24
    39e2:	c2 f7       	brpl	.-16     	; 0x39d4 <__addsf3x+0x6a>
    39e4:	0e c0       	rjmp	.+28     	; 0x3a02 <__addsf3x+0x98>
    39e6:	ba 0f       	add	r27, r26
    39e8:	62 1f       	adc	r22, r18
    39ea:	73 1f       	adc	r23, r19
    39ec:	84 1f       	adc	r24, r20
    39ee:	48 f4       	brcc	.+18     	; 0x3a02 <__addsf3x+0x98>
    39f0:	87 95       	ror	r24
    39f2:	77 95       	ror	r23
    39f4:	67 95       	ror	r22
    39f6:	b7 95       	ror	r27
    39f8:	f7 95       	ror	r31
    39fa:	9e 3f       	cpi	r25, 0xFE	; 254
    39fc:	08 f0       	brcs	.+2      	; 0x3a00 <__addsf3x+0x96>
    39fe:	b3 cf       	rjmp	.-154    	; 0x3966 <__addsf3+0x1e>
    3a00:	93 95       	inc	r25
    3a02:	88 0f       	add	r24, r24
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <__addsf3x+0x9e>
    3a06:	99 27       	eor	r25, r25
    3a08:	ee 0f       	add	r30, r30
    3a0a:	97 95       	ror	r25
    3a0c:	87 95       	ror	r24
    3a0e:	08 95       	ret

00003a10 <__divsf3>:
    3a10:	0c d0       	rcall	.+24     	; 0x3a2a <__divsf3x>
    3a12:	e6 c0       	rjmp	.+460    	; 0x3be0 <__fp_round>
    3a14:	de d0       	rcall	.+444    	; 0x3bd2 <__fp_pscB>
    3a16:	40 f0       	brcs	.+16     	; 0x3a28 <__divsf3+0x18>
    3a18:	d5 d0       	rcall	.+426    	; 0x3bc4 <__fp_pscA>
    3a1a:	30 f0       	brcs	.+12     	; 0x3a28 <__divsf3+0x18>
    3a1c:	21 f4       	brne	.+8      	; 0x3a26 <__divsf3+0x16>
    3a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a20:	19 f0       	breq	.+6      	; 0x3a28 <__divsf3+0x18>
    3a22:	c7 c0       	rjmp	.+398    	; 0x3bb2 <__fp_inf>
    3a24:	51 11       	cpse	r21, r1
    3a26:	10 c1       	rjmp	.+544    	; 0x3c48 <__fp_szero>
    3a28:	ca c0       	rjmp	.+404    	; 0x3bbe <__fp_nan>

00003a2a <__divsf3x>:
    3a2a:	eb d0       	rcall	.+470    	; 0x3c02 <__fp_split3>
    3a2c:	98 f3       	brcs	.-26     	; 0x3a14 <__divsf3+0x4>

00003a2e <__divsf3_pse>:
    3a2e:	99 23       	and	r25, r25
    3a30:	c9 f3       	breq	.-14     	; 0x3a24 <__divsf3+0x14>
    3a32:	55 23       	and	r21, r21
    3a34:	b1 f3       	breq	.-20     	; 0x3a22 <__divsf3+0x12>
    3a36:	95 1b       	sub	r25, r21
    3a38:	55 0b       	sbc	r21, r21
    3a3a:	bb 27       	eor	r27, r27
    3a3c:	aa 27       	eor	r26, r26
    3a3e:	62 17       	cp	r22, r18
    3a40:	73 07       	cpc	r23, r19
    3a42:	84 07       	cpc	r24, r20
    3a44:	38 f0       	brcs	.+14     	; 0x3a54 <__divsf3_pse+0x26>
    3a46:	9f 5f       	subi	r25, 0xFF	; 255
    3a48:	5f 4f       	sbci	r21, 0xFF	; 255
    3a4a:	22 0f       	add	r18, r18
    3a4c:	33 1f       	adc	r19, r19
    3a4e:	44 1f       	adc	r20, r20
    3a50:	aa 1f       	adc	r26, r26
    3a52:	a9 f3       	breq	.-22     	; 0x3a3e <__divsf3_pse+0x10>
    3a54:	33 d0       	rcall	.+102    	; 0x3abc <__divsf3_pse+0x8e>
    3a56:	0e 2e       	mov	r0, r30
    3a58:	3a f0       	brmi	.+14     	; 0x3a68 <__divsf3_pse+0x3a>
    3a5a:	e0 e8       	ldi	r30, 0x80	; 128
    3a5c:	30 d0       	rcall	.+96     	; 0x3abe <__divsf3_pse+0x90>
    3a5e:	91 50       	subi	r25, 0x01	; 1
    3a60:	50 40       	sbci	r21, 0x00	; 0
    3a62:	e6 95       	lsr	r30
    3a64:	00 1c       	adc	r0, r0
    3a66:	ca f7       	brpl	.-14     	; 0x3a5a <__divsf3_pse+0x2c>
    3a68:	29 d0       	rcall	.+82     	; 0x3abc <__divsf3_pse+0x8e>
    3a6a:	fe 2f       	mov	r31, r30
    3a6c:	27 d0       	rcall	.+78     	; 0x3abc <__divsf3_pse+0x8e>
    3a6e:	66 0f       	add	r22, r22
    3a70:	77 1f       	adc	r23, r23
    3a72:	88 1f       	adc	r24, r24
    3a74:	bb 1f       	adc	r27, r27
    3a76:	26 17       	cp	r18, r22
    3a78:	37 07       	cpc	r19, r23
    3a7a:	48 07       	cpc	r20, r24
    3a7c:	ab 07       	cpc	r26, r27
    3a7e:	b0 e8       	ldi	r27, 0x80	; 128
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <__divsf3_pse+0x56>
    3a82:	bb 0b       	sbc	r27, r27
    3a84:	80 2d       	mov	r24, r0
    3a86:	bf 01       	movw	r22, r30
    3a88:	ff 27       	eor	r31, r31
    3a8a:	93 58       	subi	r25, 0x83	; 131
    3a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a8e:	2a f0       	brmi	.+10     	; 0x3a9a <__divsf3_pse+0x6c>
    3a90:	9e 3f       	cpi	r25, 0xFE	; 254
    3a92:	51 05       	cpc	r21, r1
    3a94:	68 f0       	brcs	.+26     	; 0x3ab0 <__divsf3_pse+0x82>
    3a96:	8d c0       	rjmp	.+282    	; 0x3bb2 <__fp_inf>
    3a98:	d7 c0       	rjmp	.+430    	; 0x3c48 <__fp_szero>
    3a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a9c:	ec f3       	brlt	.-6      	; 0x3a98 <__divsf3_pse+0x6a>
    3a9e:	98 3e       	cpi	r25, 0xE8	; 232
    3aa0:	dc f3       	brlt	.-10     	; 0x3a98 <__divsf3_pse+0x6a>
    3aa2:	86 95       	lsr	r24
    3aa4:	77 95       	ror	r23
    3aa6:	67 95       	ror	r22
    3aa8:	b7 95       	ror	r27
    3aaa:	f7 95       	ror	r31
    3aac:	9f 5f       	subi	r25, 0xFF	; 255
    3aae:	c9 f7       	brne	.-14     	; 0x3aa2 <__divsf3_pse+0x74>
    3ab0:	88 0f       	add	r24, r24
    3ab2:	91 1d       	adc	r25, r1
    3ab4:	96 95       	lsr	r25
    3ab6:	87 95       	ror	r24
    3ab8:	97 f9       	bld	r25, 7
    3aba:	08 95       	ret
    3abc:	e1 e0       	ldi	r30, 0x01	; 1
    3abe:	66 0f       	add	r22, r22
    3ac0:	77 1f       	adc	r23, r23
    3ac2:	88 1f       	adc	r24, r24
    3ac4:	bb 1f       	adc	r27, r27
    3ac6:	62 17       	cp	r22, r18
    3ac8:	73 07       	cpc	r23, r19
    3aca:	84 07       	cpc	r24, r20
    3acc:	ba 07       	cpc	r27, r26
    3ace:	20 f0       	brcs	.+8      	; 0x3ad8 <__divsf3_pse+0xaa>
    3ad0:	62 1b       	sub	r22, r18
    3ad2:	73 0b       	sbc	r23, r19
    3ad4:	84 0b       	sbc	r24, r20
    3ad6:	ba 0b       	sbc	r27, r26
    3ad8:	ee 1f       	adc	r30, r30
    3ada:	88 f7       	brcc	.-30     	; 0x3abe <__divsf3_pse+0x90>
    3adc:	e0 95       	com	r30
    3ade:	08 95       	ret

00003ae0 <__fixunssfsi>:
    3ae0:	98 d0       	rcall	.+304    	; 0x3c12 <__fp_splitA>
    3ae2:	88 f0       	brcs	.+34     	; 0x3b06 <__fixunssfsi+0x26>
    3ae4:	9f 57       	subi	r25, 0x7F	; 127
    3ae6:	90 f0       	brcs	.+36     	; 0x3b0c <__fixunssfsi+0x2c>
    3ae8:	b9 2f       	mov	r27, r25
    3aea:	99 27       	eor	r25, r25
    3aec:	b7 51       	subi	r27, 0x17	; 23
    3aee:	a0 f0       	brcs	.+40     	; 0x3b18 <__fixunssfsi+0x38>
    3af0:	d1 f0       	breq	.+52     	; 0x3b26 <__fixunssfsi+0x46>
    3af2:	66 0f       	add	r22, r22
    3af4:	77 1f       	adc	r23, r23
    3af6:	88 1f       	adc	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	1a f0       	brmi	.+6      	; 0x3b02 <__fixunssfsi+0x22>
    3afc:	ba 95       	dec	r27
    3afe:	c9 f7       	brne	.-14     	; 0x3af2 <__fixunssfsi+0x12>
    3b00:	12 c0       	rjmp	.+36     	; 0x3b26 <__fixunssfsi+0x46>
    3b02:	b1 30       	cpi	r27, 0x01	; 1
    3b04:	81 f0       	breq	.+32     	; 0x3b26 <__fixunssfsi+0x46>
    3b06:	9f d0       	rcall	.+318    	; 0x3c46 <__fp_zero>
    3b08:	b1 e0       	ldi	r27, 0x01	; 1
    3b0a:	08 95       	ret
    3b0c:	9c c0       	rjmp	.+312    	; 0x3c46 <__fp_zero>
    3b0e:	67 2f       	mov	r22, r23
    3b10:	78 2f       	mov	r23, r24
    3b12:	88 27       	eor	r24, r24
    3b14:	b8 5f       	subi	r27, 0xF8	; 248
    3b16:	39 f0       	breq	.+14     	; 0x3b26 <__fixunssfsi+0x46>
    3b18:	b9 3f       	cpi	r27, 0xF9	; 249
    3b1a:	cc f3       	brlt	.-14     	; 0x3b0e <__fixunssfsi+0x2e>
    3b1c:	86 95       	lsr	r24
    3b1e:	77 95       	ror	r23
    3b20:	67 95       	ror	r22
    3b22:	b3 95       	inc	r27
    3b24:	d9 f7       	brne	.-10     	; 0x3b1c <__fixunssfsi+0x3c>
    3b26:	3e f4       	brtc	.+14     	; 0x3b36 <__fixunssfsi+0x56>
    3b28:	90 95       	com	r25
    3b2a:	80 95       	com	r24
    3b2c:	70 95       	com	r23
    3b2e:	61 95       	neg	r22
    3b30:	7f 4f       	sbci	r23, 0xFF	; 255
    3b32:	8f 4f       	sbci	r24, 0xFF	; 255
    3b34:	9f 4f       	sbci	r25, 0xFF	; 255
    3b36:	08 95       	ret

00003b38 <__floatunsisf>:
    3b38:	e8 94       	clt
    3b3a:	09 c0       	rjmp	.+18     	; 0x3b4e <__floatsisf+0x12>

00003b3c <__floatsisf>:
    3b3c:	97 fb       	bst	r25, 7
    3b3e:	3e f4       	brtc	.+14     	; 0x3b4e <__floatsisf+0x12>
    3b40:	90 95       	com	r25
    3b42:	80 95       	com	r24
    3b44:	70 95       	com	r23
    3b46:	61 95       	neg	r22
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b4e:	99 23       	and	r25, r25
    3b50:	a9 f0       	breq	.+42     	; 0x3b7c <__floatsisf+0x40>
    3b52:	f9 2f       	mov	r31, r25
    3b54:	96 e9       	ldi	r25, 0x96	; 150
    3b56:	bb 27       	eor	r27, r27
    3b58:	93 95       	inc	r25
    3b5a:	f6 95       	lsr	r31
    3b5c:	87 95       	ror	r24
    3b5e:	77 95       	ror	r23
    3b60:	67 95       	ror	r22
    3b62:	b7 95       	ror	r27
    3b64:	f1 11       	cpse	r31, r1
    3b66:	f8 cf       	rjmp	.-16     	; 0x3b58 <__floatsisf+0x1c>
    3b68:	fa f4       	brpl	.+62     	; 0x3ba8 <__floatsisf+0x6c>
    3b6a:	bb 0f       	add	r27, r27
    3b6c:	11 f4       	brne	.+4      	; 0x3b72 <__floatsisf+0x36>
    3b6e:	60 ff       	sbrs	r22, 0
    3b70:	1b c0       	rjmp	.+54     	; 0x3ba8 <__floatsisf+0x6c>
    3b72:	6f 5f       	subi	r22, 0xFF	; 255
    3b74:	7f 4f       	sbci	r23, 0xFF	; 255
    3b76:	8f 4f       	sbci	r24, 0xFF	; 255
    3b78:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7a:	16 c0       	rjmp	.+44     	; 0x3ba8 <__floatsisf+0x6c>
    3b7c:	88 23       	and	r24, r24
    3b7e:	11 f0       	breq	.+4      	; 0x3b84 <__floatsisf+0x48>
    3b80:	96 e9       	ldi	r25, 0x96	; 150
    3b82:	11 c0       	rjmp	.+34     	; 0x3ba6 <__floatsisf+0x6a>
    3b84:	77 23       	and	r23, r23
    3b86:	21 f0       	breq	.+8      	; 0x3b90 <__floatsisf+0x54>
    3b88:	9e e8       	ldi	r25, 0x8E	; 142
    3b8a:	87 2f       	mov	r24, r23
    3b8c:	76 2f       	mov	r23, r22
    3b8e:	05 c0       	rjmp	.+10     	; 0x3b9a <__floatsisf+0x5e>
    3b90:	66 23       	and	r22, r22
    3b92:	71 f0       	breq	.+28     	; 0x3bb0 <__floatsisf+0x74>
    3b94:	96 e8       	ldi	r25, 0x86	; 134
    3b96:	86 2f       	mov	r24, r22
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	2a f0       	brmi	.+10     	; 0x3ba8 <__floatsisf+0x6c>
    3b9e:	9a 95       	dec	r25
    3ba0:	66 0f       	add	r22, r22
    3ba2:	77 1f       	adc	r23, r23
    3ba4:	88 1f       	adc	r24, r24
    3ba6:	da f7       	brpl	.-10     	; 0x3b9e <__floatsisf+0x62>
    3ba8:	88 0f       	add	r24, r24
    3baa:	96 95       	lsr	r25
    3bac:	87 95       	ror	r24
    3bae:	97 f9       	bld	r25, 7
    3bb0:	08 95       	ret

00003bb2 <__fp_inf>:
    3bb2:	97 f9       	bld	r25, 7
    3bb4:	9f 67       	ori	r25, 0x7F	; 127
    3bb6:	80 e8       	ldi	r24, 0x80	; 128
    3bb8:	70 e0       	ldi	r23, 0x00	; 0
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	08 95       	ret

00003bbe <__fp_nan>:
    3bbe:	9f ef       	ldi	r25, 0xFF	; 255
    3bc0:	80 ec       	ldi	r24, 0xC0	; 192
    3bc2:	08 95       	ret

00003bc4 <__fp_pscA>:
    3bc4:	00 24       	eor	r0, r0
    3bc6:	0a 94       	dec	r0
    3bc8:	16 16       	cp	r1, r22
    3bca:	17 06       	cpc	r1, r23
    3bcc:	18 06       	cpc	r1, r24
    3bce:	09 06       	cpc	r0, r25
    3bd0:	08 95       	ret

00003bd2 <__fp_pscB>:
    3bd2:	00 24       	eor	r0, r0
    3bd4:	0a 94       	dec	r0
    3bd6:	12 16       	cp	r1, r18
    3bd8:	13 06       	cpc	r1, r19
    3bda:	14 06       	cpc	r1, r20
    3bdc:	05 06       	cpc	r0, r21
    3bde:	08 95       	ret

00003be0 <__fp_round>:
    3be0:	09 2e       	mov	r0, r25
    3be2:	03 94       	inc	r0
    3be4:	00 0c       	add	r0, r0
    3be6:	11 f4       	brne	.+4      	; 0x3bec <__fp_round+0xc>
    3be8:	88 23       	and	r24, r24
    3bea:	52 f0       	brmi	.+20     	; 0x3c00 <__fp_round+0x20>
    3bec:	bb 0f       	add	r27, r27
    3bee:	40 f4       	brcc	.+16     	; 0x3c00 <__fp_round+0x20>
    3bf0:	bf 2b       	or	r27, r31
    3bf2:	11 f4       	brne	.+4      	; 0x3bf8 <__fp_round+0x18>
    3bf4:	60 ff       	sbrs	r22, 0
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <__fp_round+0x20>
    3bf8:	6f 5f       	subi	r22, 0xFF	; 255
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	08 95       	ret

00003c02 <__fp_split3>:
    3c02:	57 fd       	sbrc	r21, 7
    3c04:	90 58       	subi	r25, 0x80	; 128
    3c06:	44 0f       	add	r20, r20
    3c08:	55 1f       	adc	r21, r21
    3c0a:	59 f0       	breq	.+22     	; 0x3c22 <__fp_splitA+0x10>
    3c0c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c0e:	71 f0       	breq	.+28     	; 0x3c2c <__fp_splitA+0x1a>
    3c10:	47 95       	ror	r20

00003c12 <__fp_splitA>:
    3c12:	88 0f       	add	r24, r24
    3c14:	97 fb       	bst	r25, 7
    3c16:	99 1f       	adc	r25, r25
    3c18:	61 f0       	breq	.+24     	; 0x3c32 <__fp_splitA+0x20>
    3c1a:	9f 3f       	cpi	r25, 0xFF	; 255
    3c1c:	79 f0       	breq	.+30     	; 0x3c3c <__fp_splitA+0x2a>
    3c1e:	87 95       	ror	r24
    3c20:	08 95       	ret
    3c22:	12 16       	cp	r1, r18
    3c24:	13 06       	cpc	r1, r19
    3c26:	14 06       	cpc	r1, r20
    3c28:	55 1f       	adc	r21, r21
    3c2a:	f2 cf       	rjmp	.-28     	; 0x3c10 <__fp_split3+0xe>
    3c2c:	46 95       	lsr	r20
    3c2e:	f1 df       	rcall	.-30     	; 0x3c12 <__fp_splitA>
    3c30:	08 c0       	rjmp	.+16     	; 0x3c42 <__fp_splitA+0x30>
    3c32:	16 16       	cp	r1, r22
    3c34:	17 06       	cpc	r1, r23
    3c36:	18 06       	cpc	r1, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	f1 cf       	rjmp	.-30     	; 0x3c1e <__fp_splitA+0xc>
    3c3c:	86 95       	lsr	r24
    3c3e:	71 05       	cpc	r23, r1
    3c40:	61 05       	cpc	r22, r1
    3c42:	08 94       	sec
    3c44:	08 95       	ret

00003c46 <__fp_zero>:
    3c46:	e8 94       	clt

00003c48 <__fp_szero>:
    3c48:	bb 27       	eor	r27, r27
    3c4a:	66 27       	eor	r22, r22
    3c4c:	77 27       	eor	r23, r23
    3c4e:	cb 01       	movw	r24, r22
    3c50:	97 f9       	bld	r25, 7
    3c52:	08 95       	ret

00003c54 <__mulsf3>:
    3c54:	0b d0       	rcall	.+22     	; 0x3c6c <__mulsf3x>
    3c56:	c4 cf       	rjmp	.-120    	; 0x3be0 <__fp_round>
    3c58:	b5 df       	rcall	.-150    	; 0x3bc4 <__fp_pscA>
    3c5a:	28 f0       	brcs	.+10     	; 0x3c66 <__mulsf3+0x12>
    3c5c:	ba df       	rcall	.-140    	; 0x3bd2 <__fp_pscB>
    3c5e:	18 f0       	brcs	.+6      	; 0x3c66 <__mulsf3+0x12>
    3c60:	95 23       	and	r25, r21
    3c62:	09 f0       	breq	.+2      	; 0x3c66 <__mulsf3+0x12>
    3c64:	a6 cf       	rjmp	.-180    	; 0x3bb2 <__fp_inf>
    3c66:	ab cf       	rjmp	.-170    	; 0x3bbe <__fp_nan>
    3c68:	11 24       	eor	r1, r1
    3c6a:	ee cf       	rjmp	.-36     	; 0x3c48 <__fp_szero>

00003c6c <__mulsf3x>:
    3c6c:	ca df       	rcall	.-108    	; 0x3c02 <__fp_split3>
    3c6e:	a0 f3       	brcs	.-24     	; 0x3c58 <__mulsf3+0x4>

00003c70 <__mulsf3_pse>:
    3c70:	95 9f       	mul	r25, r21
    3c72:	d1 f3       	breq	.-12     	; 0x3c68 <__mulsf3+0x14>
    3c74:	95 0f       	add	r25, r21
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	55 1f       	adc	r21, r21
    3c7a:	62 9f       	mul	r22, r18
    3c7c:	f0 01       	movw	r30, r0
    3c7e:	72 9f       	mul	r23, r18
    3c80:	bb 27       	eor	r27, r27
    3c82:	f0 0d       	add	r31, r0
    3c84:	b1 1d       	adc	r27, r1
    3c86:	63 9f       	mul	r22, r19
    3c88:	aa 27       	eor	r26, r26
    3c8a:	f0 0d       	add	r31, r0
    3c8c:	b1 1d       	adc	r27, r1
    3c8e:	aa 1f       	adc	r26, r26
    3c90:	64 9f       	mul	r22, r20
    3c92:	66 27       	eor	r22, r22
    3c94:	b0 0d       	add	r27, r0
    3c96:	a1 1d       	adc	r26, r1
    3c98:	66 1f       	adc	r22, r22
    3c9a:	82 9f       	mul	r24, r18
    3c9c:	22 27       	eor	r18, r18
    3c9e:	b0 0d       	add	r27, r0
    3ca0:	a1 1d       	adc	r26, r1
    3ca2:	62 1f       	adc	r22, r18
    3ca4:	73 9f       	mul	r23, r19
    3ca6:	b0 0d       	add	r27, r0
    3ca8:	a1 1d       	adc	r26, r1
    3caa:	62 1f       	adc	r22, r18
    3cac:	83 9f       	mul	r24, r19
    3cae:	a0 0d       	add	r26, r0
    3cb0:	61 1d       	adc	r22, r1
    3cb2:	22 1f       	adc	r18, r18
    3cb4:	74 9f       	mul	r23, r20
    3cb6:	33 27       	eor	r19, r19
    3cb8:	a0 0d       	add	r26, r0
    3cba:	61 1d       	adc	r22, r1
    3cbc:	23 1f       	adc	r18, r19
    3cbe:	84 9f       	mul	r24, r20
    3cc0:	60 0d       	add	r22, r0
    3cc2:	21 1d       	adc	r18, r1
    3cc4:	82 2f       	mov	r24, r18
    3cc6:	76 2f       	mov	r23, r22
    3cc8:	6a 2f       	mov	r22, r26
    3cca:	11 24       	eor	r1, r1
    3ccc:	9f 57       	subi	r25, 0x7F	; 127
    3cce:	50 40       	sbci	r21, 0x00	; 0
    3cd0:	8a f0       	brmi	.+34     	; 0x3cf4 <__mulsf3_pse+0x84>
    3cd2:	e1 f0       	breq	.+56     	; 0x3d0c <__mulsf3_pse+0x9c>
    3cd4:	88 23       	and	r24, r24
    3cd6:	4a f0       	brmi	.+18     	; 0x3cea <__mulsf3_pse+0x7a>
    3cd8:	ee 0f       	add	r30, r30
    3cda:	ff 1f       	adc	r31, r31
    3cdc:	bb 1f       	adc	r27, r27
    3cde:	66 1f       	adc	r22, r22
    3ce0:	77 1f       	adc	r23, r23
    3ce2:	88 1f       	adc	r24, r24
    3ce4:	91 50       	subi	r25, 0x01	; 1
    3ce6:	50 40       	sbci	r21, 0x00	; 0
    3ce8:	a9 f7       	brne	.-22     	; 0x3cd4 <__mulsf3_pse+0x64>
    3cea:	9e 3f       	cpi	r25, 0xFE	; 254
    3cec:	51 05       	cpc	r21, r1
    3cee:	70 f0       	brcs	.+28     	; 0x3d0c <__mulsf3_pse+0x9c>
    3cf0:	60 cf       	rjmp	.-320    	; 0x3bb2 <__fp_inf>
    3cf2:	aa cf       	rjmp	.-172    	; 0x3c48 <__fp_szero>
    3cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cf6:	ec f3       	brlt	.-6      	; 0x3cf2 <__mulsf3_pse+0x82>
    3cf8:	98 3e       	cpi	r25, 0xE8	; 232
    3cfa:	dc f3       	brlt	.-10     	; 0x3cf2 <__mulsf3_pse+0x82>
    3cfc:	86 95       	lsr	r24
    3cfe:	77 95       	ror	r23
    3d00:	67 95       	ror	r22
    3d02:	b7 95       	ror	r27
    3d04:	f7 95       	ror	r31
    3d06:	e7 95       	ror	r30
    3d08:	9f 5f       	subi	r25, 0xFF	; 255
    3d0a:	c1 f7       	brne	.-16     	; 0x3cfc <__mulsf3_pse+0x8c>
    3d0c:	fe 2b       	or	r31, r30
    3d0e:	88 0f       	add	r24, r24
    3d10:	91 1d       	adc	r25, r1
    3d12:	96 95       	lsr	r25
    3d14:	87 95       	ror	r24
    3d16:	97 f9       	bld	r25, 7
    3d18:	08 95       	ret

00003d1a <calloc>:
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	86 9f       	mul	r24, r22
    3d24:	80 01       	movw	r16, r0
    3d26:	87 9f       	mul	r24, r23
    3d28:	10 0d       	add	r17, r0
    3d2a:	96 9f       	mul	r25, r22
    3d2c:	10 0d       	add	r17, r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	c8 01       	movw	r24, r16
    3d32:	0d d0       	rcall	.+26     	; 0x3d4e <malloc>
    3d34:	ec 01       	movw	r28, r24
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	21 f0       	breq	.+8      	; 0x3d42 <calloc+0x28>
    3d3a:	a8 01       	movw	r20, r16
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	34 d1       	rcall	.+616    	; 0x3faa <memset>
    3d42:	ce 01       	movw	r24, r28
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	08 95       	ret

00003d4e <malloc>:
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	82 30       	cpi	r24, 0x02	; 2
    3d58:	91 05       	cpc	r25, r1
    3d5a:	10 f4       	brcc	.+4      	; 0x3d60 <malloc+0x12>
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	e0 91 a7 08 	lds	r30, 0x08A7	; 0x8008a7 <__flp>
    3d64:	f0 91 a8 08 	lds	r31, 0x08A8	; 0x8008a8 <__flp+0x1>
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	a0 e0       	ldi	r26, 0x00	; 0
    3d6e:	b0 e0       	ldi	r27, 0x00	; 0
    3d70:	30 97       	sbiw	r30, 0x00	; 0
    3d72:	19 f1       	breq	.+70     	; 0x3dba <malloc+0x6c>
    3d74:	40 81       	ld	r20, Z
    3d76:	51 81       	ldd	r21, Z+1	; 0x01
    3d78:	02 81       	ldd	r16, Z+2	; 0x02
    3d7a:	13 81       	ldd	r17, Z+3	; 0x03
    3d7c:	48 17       	cp	r20, r24
    3d7e:	59 07       	cpc	r21, r25
    3d80:	c8 f0       	brcs	.+50     	; 0x3db4 <malloc+0x66>
    3d82:	84 17       	cp	r24, r20
    3d84:	95 07       	cpc	r25, r21
    3d86:	69 f4       	brne	.+26     	; 0x3da2 <malloc+0x54>
    3d88:	10 97       	sbiw	r26, 0x00	; 0
    3d8a:	31 f0       	breq	.+12     	; 0x3d98 <malloc+0x4a>
    3d8c:	12 96       	adiw	r26, 0x02	; 2
    3d8e:	0c 93       	st	X, r16
    3d90:	12 97       	sbiw	r26, 0x02	; 2
    3d92:	13 96       	adiw	r26, 0x03	; 3
    3d94:	1c 93       	st	X, r17
    3d96:	27 c0       	rjmp	.+78     	; 0x3de6 <malloc+0x98>
    3d98:	00 93 a7 08 	sts	0x08A7, r16	; 0x8008a7 <__flp>
    3d9c:	10 93 a8 08 	sts	0x08A8, r17	; 0x8008a8 <__flp+0x1>
    3da0:	22 c0       	rjmp	.+68     	; 0x3de6 <malloc+0x98>
    3da2:	21 15       	cp	r18, r1
    3da4:	31 05       	cpc	r19, r1
    3da6:	19 f0       	breq	.+6      	; 0x3dae <malloc+0x60>
    3da8:	42 17       	cp	r20, r18
    3daa:	53 07       	cpc	r21, r19
    3dac:	18 f4       	brcc	.+6      	; 0x3db4 <malloc+0x66>
    3dae:	9a 01       	movw	r18, r20
    3db0:	bd 01       	movw	r22, r26
    3db2:	ef 01       	movw	r28, r30
    3db4:	df 01       	movw	r26, r30
    3db6:	f8 01       	movw	r30, r16
    3db8:	db cf       	rjmp	.-74     	; 0x3d70 <malloc+0x22>
    3dba:	21 15       	cp	r18, r1
    3dbc:	31 05       	cpc	r19, r1
    3dbe:	f9 f0       	breq	.+62     	; 0x3dfe <malloc+0xb0>
    3dc0:	28 1b       	sub	r18, r24
    3dc2:	39 0b       	sbc	r19, r25
    3dc4:	24 30       	cpi	r18, 0x04	; 4
    3dc6:	31 05       	cpc	r19, r1
    3dc8:	80 f4       	brcc	.+32     	; 0x3dea <malloc+0x9c>
    3dca:	8a 81       	ldd	r24, Y+2	; 0x02
    3dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dce:	61 15       	cp	r22, r1
    3dd0:	71 05       	cpc	r23, r1
    3dd2:	21 f0       	breq	.+8      	; 0x3ddc <malloc+0x8e>
    3dd4:	fb 01       	movw	r30, r22
    3dd6:	93 83       	std	Z+3, r25	; 0x03
    3dd8:	82 83       	std	Z+2, r24	; 0x02
    3dda:	04 c0       	rjmp	.+8      	; 0x3de4 <malloc+0x96>
    3ddc:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <__flp+0x1>
    3de0:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__flp>
    3de4:	fe 01       	movw	r30, r28
    3de6:	32 96       	adiw	r30, 0x02	; 2
    3de8:	44 c0       	rjmp	.+136    	; 0x3e72 <malloc+0x124>
    3dea:	fe 01       	movw	r30, r28
    3dec:	e2 0f       	add	r30, r18
    3dee:	f3 1f       	adc	r31, r19
    3df0:	81 93       	st	Z+, r24
    3df2:	91 93       	st	Z+, r25
    3df4:	22 50       	subi	r18, 0x02	; 2
    3df6:	31 09       	sbc	r19, r1
    3df8:	39 83       	std	Y+1, r19	; 0x01
    3dfa:	28 83       	st	Y, r18
    3dfc:	3a c0       	rjmp	.+116    	; 0x3e72 <malloc+0x124>
    3dfe:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <__brkval>
    3e02:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3e06:	23 2b       	or	r18, r19
    3e08:	41 f4       	brne	.+16     	; 0x3e1a <malloc+0xcc>
    3e0a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3e0e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3e12:	30 93 a6 08 	sts	0x08A6, r19	; 0x8008a6 <__brkval+0x1>
    3e16:	20 93 a5 08 	sts	0x08A5, r18	; 0x8008a5 <__brkval>
    3e1a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3e1e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3e22:	21 15       	cp	r18, r1
    3e24:	31 05       	cpc	r19, r1
    3e26:	41 f4       	brne	.+16     	; 0x3e38 <malloc+0xea>
    3e28:	2d b7       	in	r18, 0x3d	; 61
    3e2a:	3e b7       	in	r19, 0x3e	; 62
    3e2c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3e30:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3e34:	24 1b       	sub	r18, r20
    3e36:	35 0b       	sbc	r19, r21
    3e38:	e0 91 a5 08 	lds	r30, 0x08A5	; 0x8008a5 <__brkval>
    3e3c:	f0 91 a6 08 	lds	r31, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3e40:	e2 17       	cp	r30, r18
    3e42:	f3 07       	cpc	r31, r19
    3e44:	a0 f4       	brcc	.+40     	; 0x3e6e <malloc+0x120>
    3e46:	2e 1b       	sub	r18, r30
    3e48:	3f 0b       	sbc	r19, r31
    3e4a:	28 17       	cp	r18, r24
    3e4c:	39 07       	cpc	r19, r25
    3e4e:	78 f0       	brcs	.+30     	; 0x3e6e <malloc+0x120>
    3e50:	ac 01       	movw	r20, r24
    3e52:	4e 5f       	subi	r20, 0xFE	; 254
    3e54:	5f 4f       	sbci	r21, 0xFF	; 255
    3e56:	24 17       	cp	r18, r20
    3e58:	35 07       	cpc	r19, r21
    3e5a:	48 f0       	brcs	.+18     	; 0x3e6e <malloc+0x120>
    3e5c:	4e 0f       	add	r20, r30
    3e5e:	5f 1f       	adc	r21, r31
    3e60:	50 93 a6 08 	sts	0x08A6, r21	; 0x8008a6 <__brkval+0x1>
    3e64:	40 93 a5 08 	sts	0x08A5, r20	; 0x8008a5 <__brkval>
    3e68:	81 93       	st	Z+, r24
    3e6a:	91 93       	st	Z+, r25
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <malloc+0x124>
    3e6e:	e0 e0       	ldi	r30, 0x00	; 0
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	cf 01       	movw	r24, r30
    3e74:	df 91       	pop	r29
    3e76:	cf 91       	pop	r28
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	08 95       	ret

00003e7e <free>:
    3e7e:	cf 93       	push	r28
    3e80:	df 93       	push	r29
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	09 f4       	brne	.+2      	; 0x3e88 <free+0xa>
    3e86:	81 c0       	rjmp	.+258    	; 0x3f8a <free+0x10c>
    3e88:	fc 01       	movw	r30, r24
    3e8a:	32 97       	sbiw	r30, 0x02	; 2
    3e8c:	13 82       	std	Z+3, r1	; 0x03
    3e8e:	12 82       	std	Z+2, r1	; 0x02
    3e90:	a0 91 a7 08 	lds	r26, 0x08A7	; 0x8008a7 <__flp>
    3e94:	b0 91 a8 08 	lds	r27, 0x08A8	; 0x8008a8 <__flp+0x1>
    3e98:	10 97       	sbiw	r26, 0x00	; 0
    3e9a:	81 f4       	brne	.+32     	; 0x3ebc <free+0x3e>
    3e9c:	20 81       	ld	r18, Z
    3e9e:	31 81       	ldd	r19, Z+1	; 0x01
    3ea0:	82 0f       	add	r24, r18
    3ea2:	93 1f       	adc	r25, r19
    3ea4:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <__brkval>
    3ea8:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3eac:	28 17       	cp	r18, r24
    3eae:	39 07       	cpc	r19, r25
    3eb0:	51 f5       	brne	.+84     	; 0x3f06 <free+0x88>
    3eb2:	f0 93 a6 08 	sts	0x08A6, r31	; 0x8008a6 <__brkval+0x1>
    3eb6:	e0 93 a5 08 	sts	0x08A5, r30	; 0x8008a5 <__brkval>
    3eba:	67 c0       	rjmp	.+206    	; 0x3f8a <free+0x10c>
    3ebc:	ed 01       	movw	r28, r26
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	ce 17       	cp	r28, r30
    3ec4:	df 07       	cpc	r29, r31
    3ec6:	40 f4       	brcc	.+16     	; 0x3ed8 <free+0x5a>
    3ec8:	4a 81       	ldd	r20, Y+2	; 0x02
    3eca:	5b 81       	ldd	r21, Y+3	; 0x03
    3ecc:	9e 01       	movw	r18, r28
    3ece:	41 15       	cp	r20, r1
    3ed0:	51 05       	cpc	r21, r1
    3ed2:	f1 f0       	breq	.+60     	; 0x3f10 <free+0x92>
    3ed4:	ea 01       	movw	r28, r20
    3ed6:	f5 cf       	rjmp	.-22     	; 0x3ec2 <free+0x44>
    3ed8:	d3 83       	std	Z+3, r29	; 0x03
    3eda:	c2 83       	std	Z+2, r28	; 0x02
    3edc:	40 81       	ld	r20, Z
    3ede:	51 81       	ldd	r21, Z+1	; 0x01
    3ee0:	84 0f       	add	r24, r20
    3ee2:	95 1f       	adc	r25, r21
    3ee4:	c8 17       	cp	r28, r24
    3ee6:	d9 07       	cpc	r29, r25
    3ee8:	59 f4       	brne	.+22     	; 0x3f00 <free+0x82>
    3eea:	88 81       	ld	r24, Y
    3eec:	99 81       	ldd	r25, Y+1	; 0x01
    3eee:	84 0f       	add	r24, r20
    3ef0:	95 1f       	adc	r25, r21
    3ef2:	02 96       	adiw	r24, 0x02	; 2
    3ef4:	91 83       	std	Z+1, r25	; 0x01
    3ef6:	80 83       	st	Z, r24
    3ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    3efa:	9b 81       	ldd	r25, Y+3	; 0x03
    3efc:	93 83       	std	Z+3, r25	; 0x03
    3efe:	82 83       	std	Z+2, r24	; 0x02
    3f00:	21 15       	cp	r18, r1
    3f02:	31 05       	cpc	r19, r1
    3f04:	29 f4       	brne	.+10     	; 0x3f10 <free+0x92>
    3f06:	f0 93 a8 08 	sts	0x08A8, r31	; 0x8008a8 <__flp+0x1>
    3f0a:	e0 93 a7 08 	sts	0x08A7, r30	; 0x8008a7 <__flp>
    3f0e:	3d c0       	rjmp	.+122    	; 0x3f8a <free+0x10c>
    3f10:	e9 01       	movw	r28, r18
    3f12:	fb 83       	std	Y+3, r31	; 0x03
    3f14:	ea 83       	std	Y+2, r30	; 0x02
    3f16:	49 91       	ld	r20, Y+
    3f18:	59 91       	ld	r21, Y+
    3f1a:	c4 0f       	add	r28, r20
    3f1c:	d5 1f       	adc	r29, r21
    3f1e:	ec 17       	cp	r30, r28
    3f20:	fd 07       	cpc	r31, r29
    3f22:	61 f4       	brne	.+24     	; 0x3f3c <free+0xbe>
    3f24:	80 81       	ld	r24, Z
    3f26:	91 81       	ldd	r25, Z+1	; 0x01
    3f28:	84 0f       	add	r24, r20
    3f2a:	95 1f       	adc	r25, r21
    3f2c:	02 96       	adiw	r24, 0x02	; 2
    3f2e:	e9 01       	movw	r28, r18
    3f30:	99 83       	std	Y+1, r25	; 0x01
    3f32:	88 83       	st	Y, r24
    3f34:	82 81       	ldd	r24, Z+2	; 0x02
    3f36:	93 81       	ldd	r25, Z+3	; 0x03
    3f38:	9b 83       	std	Y+3, r25	; 0x03
    3f3a:	8a 83       	std	Y+2, r24	; 0x02
    3f3c:	e0 e0       	ldi	r30, 0x00	; 0
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	12 96       	adiw	r26, 0x02	; 2
    3f42:	8d 91       	ld	r24, X+
    3f44:	9c 91       	ld	r25, X
    3f46:	13 97       	sbiw	r26, 0x03	; 3
    3f48:	00 97       	sbiw	r24, 0x00	; 0
    3f4a:	19 f0       	breq	.+6      	; 0x3f52 <free+0xd4>
    3f4c:	fd 01       	movw	r30, r26
    3f4e:	dc 01       	movw	r26, r24
    3f50:	f7 cf       	rjmp	.-18     	; 0x3f40 <free+0xc2>
    3f52:	8d 91       	ld	r24, X+
    3f54:	9c 91       	ld	r25, X
    3f56:	11 97       	sbiw	r26, 0x01	; 1
    3f58:	9d 01       	movw	r18, r26
    3f5a:	2e 5f       	subi	r18, 0xFE	; 254
    3f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f5e:	82 0f       	add	r24, r18
    3f60:	93 1f       	adc	r25, r19
    3f62:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <__brkval>
    3f66:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <__brkval+0x1>
    3f6a:	28 17       	cp	r18, r24
    3f6c:	39 07       	cpc	r19, r25
    3f6e:	69 f4       	brne	.+26     	; 0x3f8a <free+0x10c>
    3f70:	30 97       	sbiw	r30, 0x00	; 0
    3f72:	29 f4       	brne	.+10     	; 0x3f7e <free+0x100>
    3f74:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <__flp+0x1>
    3f78:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__flp>
    3f7c:	02 c0       	rjmp	.+4      	; 0x3f82 <free+0x104>
    3f7e:	13 82       	std	Z+3, r1	; 0x03
    3f80:	12 82       	std	Z+2, r1	; 0x02
    3f82:	b0 93 a6 08 	sts	0x08A6, r27	; 0x8008a6 <__brkval+0x1>
    3f86:	a0 93 a5 08 	sts	0x08A5, r26	; 0x8008a5 <__brkval>
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	08 95       	ret

00003f90 <abort>:
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	f8 94       	cli
    3f96:	58 c3       	rjmp	.+1712   	; 0x4648 <_exit>

00003f98 <memcpy>:
    3f98:	fb 01       	movw	r30, r22
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	02 c0       	rjmp	.+4      	; 0x3fa2 <memcpy+0xa>
    3f9e:	01 90       	ld	r0, Z+
    3fa0:	0d 92       	st	X+, r0
    3fa2:	41 50       	subi	r20, 0x01	; 1
    3fa4:	50 40       	sbci	r21, 0x00	; 0
    3fa6:	d8 f7       	brcc	.-10     	; 0x3f9e <memcpy+0x6>
    3fa8:	08 95       	ret

00003faa <memset>:
    3faa:	dc 01       	movw	r26, r24
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <memset+0x6>
    3fae:	6d 93       	st	X+, r22
    3fb0:	41 50       	subi	r20, 0x01	; 1
    3fb2:	50 40       	sbci	r21, 0x00	; 0
    3fb4:	e0 f7       	brcc	.-8      	; 0x3fae <memset+0x4>
    3fb6:	08 95       	ret

00003fb8 <strcat>:
    3fb8:	fb 01       	movw	r30, r22
    3fba:	dc 01       	movw	r26, r24
    3fbc:	0d 90       	ld	r0, X+
    3fbe:	00 20       	and	r0, r0
    3fc0:	e9 f7       	brne	.-6      	; 0x3fbc <strcat+0x4>
    3fc2:	11 97       	sbiw	r26, 0x01	; 1
    3fc4:	01 90       	ld	r0, Z+
    3fc6:	0d 92       	st	X+, r0
    3fc8:	00 20       	and	r0, r0
    3fca:	e1 f7       	brne	.-8      	; 0x3fc4 <strcat+0xc>
    3fcc:	08 95       	ret

00003fce <strcpy>:
    3fce:	fb 01       	movw	r30, r22
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	01 90       	ld	r0, Z+
    3fd4:	0d 92       	st	X+, r0
    3fd6:	00 20       	and	r0, r0
    3fd8:	e1 f7       	brne	.-8      	; 0x3fd2 <strcpy+0x4>
    3fda:	08 95       	ret

00003fdc <strncasecmp>:
    3fdc:	fb 01       	movw	r30, r22
    3fde:	dc 01       	movw	r26, r24
    3fe0:	41 50       	subi	r20, 0x01	; 1
    3fe2:	50 40       	sbci	r21, 0x00	; 0
    3fe4:	88 f0       	brcs	.+34     	; 0x4008 <strncasecmp+0x2c>
    3fe6:	8d 91       	ld	r24, X+
    3fe8:	81 34       	cpi	r24, 0x41	; 65
    3fea:	1c f0       	brlt	.+6      	; 0x3ff2 <strncasecmp+0x16>
    3fec:	8b 35       	cpi	r24, 0x5B	; 91
    3fee:	0c f4       	brge	.+2      	; 0x3ff2 <strncasecmp+0x16>
    3ff0:	80 5e       	subi	r24, 0xE0	; 224
    3ff2:	61 91       	ld	r22, Z+
    3ff4:	61 34       	cpi	r22, 0x41	; 65
    3ff6:	1c f0       	brlt	.+6      	; 0x3ffe <strncasecmp+0x22>
    3ff8:	6b 35       	cpi	r22, 0x5B	; 91
    3ffa:	0c f4       	brge	.+2      	; 0x3ffe <strncasecmp+0x22>
    3ffc:	60 5e       	subi	r22, 0xE0	; 224
    3ffe:	86 1b       	sub	r24, r22
    4000:	61 11       	cpse	r22, r1
    4002:	71 f3       	breq	.-36     	; 0x3fe0 <strncasecmp+0x4>
    4004:	99 0b       	sbc	r25, r25
    4006:	08 95       	ret
    4008:	88 1b       	sub	r24, r24
    400a:	fc cf       	rjmp	.-8      	; 0x4004 <strncasecmp+0x28>

0000400c <printf>:
    400c:	cf 93       	push	r28
    400e:	df 93       	push	r29
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    4014:	ae 01       	movw	r20, r28
    4016:	4a 5f       	subi	r20, 0xFA	; 250
    4018:	5f 4f       	sbci	r21, 0xFF	; 255
    401a:	fa 01       	movw	r30, r20
    401c:	61 91       	ld	r22, Z+
    401e:	71 91       	ld	r23, Z+
    4020:	af 01       	movw	r20, r30
    4022:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__iob+0x2>
    4026:	90 91 ac 08 	lds	r25, 0x08AC	; 0x8008ac <__iob+0x3>
    402a:	61 d0       	rcall	.+194    	; 0x40ee <vfprintf>
    402c:	df 91       	pop	r29
    402e:	cf 91       	pop	r28
    4030:	08 95       	ret

00004032 <puts>:
    4032:	0f 93       	push	r16
    4034:	1f 93       	push	r17
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	e0 91 ab 08 	lds	r30, 0x08AB	; 0x8008ab <__iob+0x2>
    403e:	f0 91 ac 08 	lds	r31, 0x08AC	; 0x8008ac <__iob+0x3>
    4042:	23 81       	ldd	r18, Z+3	; 0x03
    4044:	21 ff       	sbrs	r18, 1
    4046:	1b c0       	rjmp	.+54     	; 0x407e <puts+0x4c>
    4048:	8c 01       	movw	r16, r24
    404a:	d0 e0       	ldi	r29, 0x00	; 0
    404c:	c0 e0       	ldi	r28, 0x00	; 0
    404e:	f8 01       	movw	r30, r16
    4050:	81 91       	ld	r24, Z+
    4052:	8f 01       	movw	r16, r30
    4054:	60 91 ab 08 	lds	r22, 0x08AB	; 0x8008ab <__iob+0x2>
    4058:	70 91 ac 08 	lds	r23, 0x08AC	; 0x8008ac <__iob+0x3>
    405c:	db 01       	movw	r26, r22
    405e:	18 96       	adiw	r26, 0x08	; 8
    4060:	ed 91       	ld	r30, X+
    4062:	fc 91       	ld	r31, X
    4064:	19 97       	sbiw	r26, 0x09	; 9
    4066:	88 23       	and	r24, r24
    4068:	31 f0       	breq	.+12     	; 0x4076 <puts+0x44>
    406a:	19 95       	eicall
    406c:	89 2b       	or	r24, r25
    406e:	79 f3       	breq	.-34     	; 0x404e <puts+0x1c>
    4070:	df ef       	ldi	r29, 0xFF	; 255
    4072:	cf ef       	ldi	r28, 0xFF	; 255
    4074:	ec cf       	rjmp	.-40     	; 0x404e <puts+0x1c>
    4076:	8a e0       	ldi	r24, 0x0A	; 10
    4078:	19 95       	eicall
    407a:	89 2b       	or	r24, r25
    407c:	19 f0       	breq	.+6      	; 0x4084 <puts+0x52>
    407e:	8f ef       	ldi	r24, 0xFF	; 255
    4080:	9f ef       	ldi	r25, 0xFF	; 255
    4082:	02 c0       	rjmp	.+4      	; 0x4088 <puts+0x56>
    4084:	8d 2f       	mov	r24, r29
    4086:	9c 2f       	mov	r25, r28
    4088:	df 91       	pop	r29
    408a:	cf 91       	pop	r28
    408c:	1f 91       	pop	r17
    408e:	0f 91       	pop	r16
    4090:	08 95       	ret

00004092 <sprintf>:
    4092:	0f 93       	push	r16
    4094:	1f 93       	push	r17
    4096:	cf 93       	push	r28
    4098:	df 93       	push	r29
    409a:	cd b7       	in	r28, 0x3d	; 61
    409c:	de b7       	in	r29, 0x3e	; 62
    409e:	2e 97       	sbiw	r28, 0x0e	; 14
    40a0:	0f b6       	in	r0, 0x3f	; 63
    40a2:	f8 94       	cli
    40a4:	de bf       	out	0x3e, r29	; 62
    40a6:	0f be       	out	0x3f, r0	; 63
    40a8:	cd bf       	out	0x3d, r28	; 61
    40aa:	0e 89       	ldd	r16, Y+22	; 0x16
    40ac:	1f 89       	ldd	r17, Y+23	; 0x17
    40ae:	86 e0       	ldi	r24, 0x06	; 6
    40b0:	8c 83       	std	Y+4, r24	; 0x04
    40b2:	1a 83       	std	Y+2, r17	; 0x02
    40b4:	09 83       	std	Y+1, r16	; 0x01
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
    40b8:	9f e7       	ldi	r25, 0x7F	; 127
    40ba:	9e 83       	std	Y+6, r25	; 0x06
    40bc:	8d 83       	std	Y+5, r24	; 0x05
    40be:	ae 01       	movw	r20, r28
    40c0:	46 5e       	subi	r20, 0xE6	; 230
    40c2:	5f 4f       	sbci	r21, 0xFF	; 255
    40c4:	68 8d       	ldd	r22, Y+24	; 0x18
    40c6:	79 8d       	ldd	r23, Y+25	; 0x19
    40c8:	ce 01       	movw	r24, r28
    40ca:	01 96       	adiw	r24, 0x01	; 1
    40cc:	10 d0       	rcall	.+32     	; 0x40ee <vfprintf>
    40ce:	ef 81       	ldd	r30, Y+7	; 0x07
    40d0:	f8 85       	ldd	r31, Y+8	; 0x08
    40d2:	e0 0f       	add	r30, r16
    40d4:	f1 1f       	adc	r31, r17
    40d6:	10 82       	st	Z, r1
    40d8:	2e 96       	adiw	r28, 0x0e	; 14
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	cd bf       	out	0x3d, r28	; 61
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	1f 91       	pop	r17
    40ea:	0f 91       	pop	r16
    40ec:	08 95       	ret

000040ee <vfprintf>:
    40ee:	2f 92       	push	r2
    40f0:	3f 92       	push	r3
    40f2:	4f 92       	push	r4
    40f4:	5f 92       	push	r5
    40f6:	6f 92       	push	r6
    40f8:	7f 92       	push	r7
    40fa:	8f 92       	push	r8
    40fc:	9f 92       	push	r9
    40fe:	af 92       	push	r10
    4100:	bf 92       	push	r11
    4102:	cf 92       	push	r12
    4104:	df 92       	push	r13
    4106:	ef 92       	push	r14
    4108:	ff 92       	push	r15
    410a:	0f 93       	push	r16
    410c:	1f 93       	push	r17
    410e:	cf 93       	push	r28
    4110:	df 93       	push	r29
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	2b 97       	sbiw	r28, 0x0b	; 11
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	6c 01       	movw	r12, r24
    4124:	7b 01       	movw	r14, r22
    4126:	8a 01       	movw	r16, r20
    4128:	fc 01       	movw	r30, r24
    412a:	17 82       	std	Z+7, r1	; 0x07
    412c:	16 82       	std	Z+6, r1	; 0x06
    412e:	83 81       	ldd	r24, Z+3	; 0x03
    4130:	81 ff       	sbrs	r24, 1
    4132:	bf c1       	rjmp	.+894    	; 0x44b2 <vfprintf+0x3c4>
    4134:	ce 01       	movw	r24, r28
    4136:	01 96       	adiw	r24, 0x01	; 1
    4138:	3c 01       	movw	r6, r24
    413a:	f6 01       	movw	r30, r12
    413c:	93 81       	ldd	r25, Z+3	; 0x03
    413e:	f7 01       	movw	r30, r14
    4140:	93 fd       	sbrc	r25, 3
    4142:	85 91       	lpm	r24, Z+
    4144:	93 ff       	sbrs	r25, 3
    4146:	81 91       	ld	r24, Z+
    4148:	7f 01       	movw	r14, r30
    414a:	88 23       	and	r24, r24
    414c:	09 f4       	brne	.+2      	; 0x4150 <vfprintf+0x62>
    414e:	ad c1       	rjmp	.+858    	; 0x44aa <vfprintf+0x3bc>
    4150:	85 32       	cpi	r24, 0x25	; 37
    4152:	39 f4       	brne	.+14     	; 0x4162 <vfprintf+0x74>
    4154:	93 fd       	sbrc	r25, 3
    4156:	85 91       	lpm	r24, Z+
    4158:	93 ff       	sbrs	r25, 3
    415a:	81 91       	ld	r24, Z+
    415c:	7f 01       	movw	r14, r30
    415e:	85 32       	cpi	r24, 0x25	; 37
    4160:	21 f4       	brne	.+8      	; 0x416a <vfprintf+0x7c>
    4162:	b6 01       	movw	r22, r12
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	d6 d1       	rcall	.+940    	; 0x4514 <fputc>
    4168:	e8 cf       	rjmp	.-48     	; 0x413a <vfprintf+0x4c>
    416a:	91 2c       	mov	r9, r1
    416c:	21 2c       	mov	r2, r1
    416e:	31 2c       	mov	r3, r1
    4170:	ff e1       	ldi	r31, 0x1F	; 31
    4172:	f3 15       	cp	r31, r3
    4174:	d8 f0       	brcs	.+54     	; 0x41ac <vfprintf+0xbe>
    4176:	8b 32       	cpi	r24, 0x2B	; 43
    4178:	79 f0       	breq	.+30     	; 0x4198 <vfprintf+0xaa>
    417a:	38 f4       	brcc	.+14     	; 0x418a <vfprintf+0x9c>
    417c:	80 32       	cpi	r24, 0x20	; 32
    417e:	79 f0       	breq	.+30     	; 0x419e <vfprintf+0xb0>
    4180:	83 32       	cpi	r24, 0x23	; 35
    4182:	a1 f4       	brne	.+40     	; 0x41ac <vfprintf+0xbe>
    4184:	23 2d       	mov	r18, r3
    4186:	20 61       	ori	r18, 0x10	; 16
    4188:	1d c0       	rjmp	.+58     	; 0x41c4 <vfprintf+0xd6>
    418a:	8d 32       	cpi	r24, 0x2D	; 45
    418c:	61 f0       	breq	.+24     	; 0x41a6 <vfprintf+0xb8>
    418e:	80 33       	cpi	r24, 0x30	; 48
    4190:	69 f4       	brne	.+26     	; 0x41ac <vfprintf+0xbe>
    4192:	23 2d       	mov	r18, r3
    4194:	21 60       	ori	r18, 0x01	; 1
    4196:	16 c0       	rjmp	.+44     	; 0x41c4 <vfprintf+0xd6>
    4198:	83 2d       	mov	r24, r3
    419a:	82 60       	ori	r24, 0x02	; 2
    419c:	38 2e       	mov	r3, r24
    419e:	e3 2d       	mov	r30, r3
    41a0:	e4 60       	ori	r30, 0x04	; 4
    41a2:	3e 2e       	mov	r3, r30
    41a4:	2a c0       	rjmp	.+84     	; 0x41fa <vfprintf+0x10c>
    41a6:	f3 2d       	mov	r31, r3
    41a8:	f8 60       	ori	r31, 0x08	; 8
    41aa:	1d c0       	rjmp	.+58     	; 0x41e6 <vfprintf+0xf8>
    41ac:	37 fc       	sbrc	r3, 7
    41ae:	2d c0       	rjmp	.+90     	; 0x420a <vfprintf+0x11c>
    41b0:	20 ed       	ldi	r18, 0xD0	; 208
    41b2:	28 0f       	add	r18, r24
    41b4:	2a 30       	cpi	r18, 0x0A	; 10
    41b6:	40 f0       	brcs	.+16     	; 0x41c8 <vfprintf+0xda>
    41b8:	8e 32       	cpi	r24, 0x2E	; 46
    41ba:	b9 f4       	brne	.+46     	; 0x41ea <vfprintf+0xfc>
    41bc:	36 fc       	sbrc	r3, 6
    41be:	75 c1       	rjmp	.+746    	; 0x44aa <vfprintf+0x3bc>
    41c0:	23 2d       	mov	r18, r3
    41c2:	20 64       	ori	r18, 0x40	; 64
    41c4:	32 2e       	mov	r3, r18
    41c6:	19 c0       	rjmp	.+50     	; 0x41fa <vfprintf+0x10c>
    41c8:	36 fe       	sbrs	r3, 6
    41ca:	06 c0       	rjmp	.+12     	; 0x41d8 <vfprintf+0xea>
    41cc:	8a e0       	ldi	r24, 0x0A	; 10
    41ce:	98 9e       	mul	r9, r24
    41d0:	20 0d       	add	r18, r0
    41d2:	11 24       	eor	r1, r1
    41d4:	92 2e       	mov	r9, r18
    41d6:	11 c0       	rjmp	.+34     	; 0x41fa <vfprintf+0x10c>
    41d8:	ea e0       	ldi	r30, 0x0A	; 10
    41da:	2e 9e       	mul	r2, r30
    41dc:	20 0d       	add	r18, r0
    41de:	11 24       	eor	r1, r1
    41e0:	22 2e       	mov	r2, r18
    41e2:	f3 2d       	mov	r31, r3
    41e4:	f0 62       	ori	r31, 0x20	; 32
    41e6:	3f 2e       	mov	r3, r31
    41e8:	08 c0       	rjmp	.+16     	; 0x41fa <vfprintf+0x10c>
    41ea:	8c 36       	cpi	r24, 0x6C	; 108
    41ec:	21 f4       	brne	.+8      	; 0x41f6 <vfprintf+0x108>
    41ee:	83 2d       	mov	r24, r3
    41f0:	80 68       	ori	r24, 0x80	; 128
    41f2:	38 2e       	mov	r3, r24
    41f4:	02 c0       	rjmp	.+4      	; 0x41fa <vfprintf+0x10c>
    41f6:	88 36       	cpi	r24, 0x68	; 104
    41f8:	41 f4       	brne	.+16     	; 0x420a <vfprintf+0x11c>
    41fa:	f7 01       	movw	r30, r14
    41fc:	93 fd       	sbrc	r25, 3
    41fe:	85 91       	lpm	r24, Z+
    4200:	93 ff       	sbrs	r25, 3
    4202:	81 91       	ld	r24, Z+
    4204:	7f 01       	movw	r14, r30
    4206:	81 11       	cpse	r24, r1
    4208:	b3 cf       	rjmp	.-154    	; 0x4170 <vfprintf+0x82>
    420a:	98 2f       	mov	r25, r24
    420c:	9f 7d       	andi	r25, 0xDF	; 223
    420e:	95 54       	subi	r25, 0x45	; 69
    4210:	93 30       	cpi	r25, 0x03	; 3
    4212:	28 f4       	brcc	.+10     	; 0x421e <vfprintf+0x130>
    4214:	0c 5f       	subi	r16, 0xFC	; 252
    4216:	1f 4f       	sbci	r17, 0xFF	; 255
    4218:	9f e3       	ldi	r25, 0x3F	; 63
    421a:	99 83       	std	Y+1, r25	; 0x01
    421c:	0d c0       	rjmp	.+26     	; 0x4238 <vfprintf+0x14a>
    421e:	83 36       	cpi	r24, 0x63	; 99
    4220:	31 f0       	breq	.+12     	; 0x422e <vfprintf+0x140>
    4222:	83 37       	cpi	r24, 0x73	; 115
    4224:	71 f0       	breq	.+28     	; 0x4242 <vfprintf+0x154>
    4226:	83 35       	cpi	r24, 0x53	; 83
    4228:	09 f0       	breq	.+2      	; 0x422c <vfprintf+0x13e>
    422a:	55 c0       	rjmp	.+170    	; 0x42d6 <vfprintf+0x1e8>
    422c:	20 c0       	rjmp	.+64     	; 0x426e <vfprintf+0x180>
    422e:	f8 01       	movw	r30, r16
    4230:	80 81       	ld	r24, Z
    4232:	89 83       	std	Y+1, r24	; 0x01
    4234:	0e 5f       	subi	r16, 0xFE	; 254
    4236:	1f 4f       	sbci	r17, 0xFF	; 255
    4238:	88 24       	eor	r8, r8
    423a:	83 94       	inc	r8
    423c:	91 2c       	mov	r9, r1
    423e:	53 01       	movw	r10, r6
    4240:	12 c0       	rjmp	.+36     	; 0x4266 <vfprintf+0x178>
    4242:	28 01       	movw	r4, r16
    4244:	f2 e0       	ldi	r31, 0x02	; 2
    4246:	4f 0e       	add	r4, r31
    4248:	51 1c       	adc	r5, r1
    424a:	f8 01       	movw	r30, r16
    424c:	a0 80       	ld	r10, Z
    424e:	b1 80       	ldd	r11, Z+1	; 0x01
    4250:	36 fe       	sbrs	r3, 6
    4252:	03 c0       	rjmp	.+6      	; 0x425a <vfprintf+0x16c>
    4254:	69 2d       	mov	r22, r9
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	02 c0       	rjmp	.+4      	; 0x425e <vfprintf+0x170>
    425a:	6f ef       	ldi	r22, 0xFF	; 255
    425c:	7f ef       	ldi	r23, 0xFF	; 255
    425e:	c5 01       	movw	r24, r10
    4260:	4e d1       	rcall	.+668    	; 0x44fe <strnlen>
    4262:	4c 01       	movw	r8, r24
    4264:	82 01       	movw	r16, r4
    4266:	f3 2d       	mov	r31, r3
    4268:	ff 77       	andi	r31, 0x7F	; 127
    426a:	3f 2e       	mov	r3, r31
    426c:	15 c0       	rjmp	.+42     	; 0x4298 <vfprintf+0x1aa>
    426e:	28 01       	movw	r4, r16
    4270:	22 e0       	ldi	r18, 0x02	; 2
    4272:	42 0e       	add	r4, r18
    4274:	51 1c       	adc	r5, r1
    4276:	f8 01       	movw	r30, r16
    4278:	a0 80       	ld	r10, Z
    427a:	b1 80       	ldd	r11, Z+1	; 0x01
    427c:	36 fe       	sbrs	r3, 6
    427e:	03 c0       	rjmp	.+6      	; 0x4286 <vfprintf+0x198>
    4280:	69 2d       	mov	r22, r9
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	02 c0       	rjmp	.+4      	; 0x428a <vfprintf+0x19c>
    4286:	6f ef       	ldi	r22, 0xFF	; 255
    4288:	7f ef       	ldi	r23, 0xFF	; 255
    428a:	c5 01       	movw	r24, r10
    428c:	2d d1       	rcall	.+602    	; 0x44e8 <strnlen_P>
    428e:	4c 01       	movw	r8, r24
    4290:	f3 2d       	mov	r31, r3
    4292:	f0 68       	ori	r31, 0x80	; 128
    4294:	3f 2e       	mov	r3, r31
    4296:	82 01       	movw	r16, r4
    4298:	33 fc       	sbrc	r3, 3
    429a:	19 c0       	rjmp	.+50     	; 0x42ce <vfprintf+0x1e0>
    429c:	82 2d       	mov	r24, r2
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	88 16       	cp	r8, r24
    42a2:	99 06       	cpc	r9, r25
    42a4:	a0 f4       	brcc	.+40     	; 0x42ce <vfprintf+0x1e0>
    42a6:	b6 01       	movw	r22, r12
    42a8:	80 e2       	ldi	r24, 0x20	; 32
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	33 d1       	rcall	.+614    	; 0x4514 <fputc>
    42ae:	2a 94       	dec	r2
    42b0:	f5 cf       	rjmp	.-22     	; 0x429c <vfprintf+0x1ae>
    42b2:	f5 01       	movw	r30, r10
    42b4:	37 fc       	sbrc	r3, 7
    42b6:	85 91       	lpm	r24, Z+
    42b8:	37 fe       	sbrs	r3, 7
    42ba:	81 91       	ld	r24, Z+
    42bc:	5f 01       	movw	r10, r30
    42be:	b6 01       	movw	r22, r12
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	28 d1       	rcall	.+592    	; 0x4514 <fputc>
    42c4:	21 10       	cpse	r2, r1
    42c6:	2a 94       	dec	r2
    42c8:	21 e0       	ldi	r18, 0x01	; 1
    42ca:	82 1a       	sub	r8, r18
    42cc:	91 08       	sbc	r9, r1
    42ce:	81 14       	cp	r8, r1
    42d0:	91 04       	cpc	r9, r1
    42d2:	79 f7       	brne	.-34     	; 0x42b2 <vfprintf+0x1c4>
    42d4:	e1 c0       	rjmp	.+450    	; 0x4498 <vfprintf+0x3aa>
    42d6:	84 36       	cpi	r24, 0x64	; 100
    42d8:	11 f0       	breq	.+4      	; 0x42de <vfprintf+0x1f0>
    42da:	89 36       	cpi	r24, 0x69	; 105
    42dc:	39 f5       	brne	.+78     	; 0x432c <vfprintf+0x23e>
    42de:	f8 01       	movw	r30, r16
    42e0:	37 fe       	sbrs	r3, 7
    42e2:	07 c0       	rjmp	.+14     	; 0x42f2 <vfprintf+0x204>
    42e4:	60 81       	ld	r22, Z
    42e6:	71 81       	ldd	r23, Z+1	; 0x01
    42e8:	82 81       	ldd	r24, Z+2	; 0x02
    42ea:	93 81       	ldd	r25, Z+3	; 0x03
    42ec:	0c 5f       	subi	r16, 0xFC	; 252
    42ee:	1f 4f       	sbci	r17, 0xFF	; 255
    42f0:	08 c0       	rjmp	.+16     	; 0x4302 <vfprintf+0x214>
    42f2:	60 81       	ld	r22, Z
    42f4:	71 81       	ldd	r23, Z+1	; 0x01
    42f6:	07 2e       	mov	r0, r23
    42f8:	00 0c       	add	r0, r0
    42fa:	88 0b       	sbc	r24, r24
    42fc:	99 0b       	sbc	r25, r25
    42fe:	0e 5f       	subi	r16, 0xFE	; 254
    4300:	1f 4f       	sbci	r17, 0xFF	; 255
    4302:	f3 2d       	mov	r31, r3
    4304:	ff 76       	andi	r31, 0x6F	; 111
    4306:	3f 2e       	mov	r3, r31
    4308:	97 ff       	sbrs	r25, 7
    430a:	09 c0       	rjmp	.+18     	; 0x431e <vfprintf+0x230>
    430c:	90 95       	com	r25
    430e:	80 95       	com	r24
    4310:	70 95       	com	r23
    4312:	61 95       	neg	r22
    4314:	7f 4f       	sbci	r23, 0xFF	; 255
    4316:	8f 4f       	sbci	r24, 0xFF	; 255
    4318:	9f 4f       	sbci	r25, 0xFF	; 255
    431a:	f0 68       	ori	r31, 0x80	; 128
    431c:	3f 2e       	mov	r3, r31
    431e:	2a e0       	ldi	r18, 0x0A	; 10
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	a3 01       	movw	r20, r6
    4324:	33 d1       	rcall	.+614    	; 0x458c <__ultoa_invert>
    4326:	88 2e       	mov	r8, r24
    4328:	86 18       	sub	r8, r6
    432a:	44 c0       	rjmp	.+136    	; 0x43b4 <vfprintf+0x2c6>
    432c:	85 37       	cpi	r24, 0x75	; 117
    432e:	31 f4       	brne	.+12     	; 0x433c <vfprintf+0x24e>
    4330:	23 2d       	mov	r18, r3
    4332:	2f 7e       	andi	r18, 0xEF	; 239
    4334:	b2 2e       	mov	r11, r18
    4336:	2a e0       	ldi	r18, 0x0A	; 10
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	25 c0       	rjmp	.+74     	; 0x4386 <vfprintf+0x298>
    433c:	93 2d       	mov	r25, r3
    433e:	99 7f       	andi	r25, 0xF9	; 249
    4340:	b9 2e       	mov	r11, r25
    4342:	8f 36       	cpi	r24, 0x6F	; 111
    4344:	c1 f0       	breq	.+48     	; 0x4376 <vfprintf+0x288>
    4346:	18 f4       	brcc	.+6      	; 0x434e <vfprintf+0x260>
    4348:	88 35       	cpi	r24, 0x58	; 88
    434a:	79 f0       	breq	.+30     	; 0x436a <vfprintf+0x27c>
    434c:	ae c0       	rjmp	.+348    	; 0x44aa <vfprintf+0x3bc>
    434e:	80 37       	cpi	r24, 0x70	; 112
    4350:	19 f0       	breq	.+6      	; 0x4358 <vfprintf+0x26a>
    4352:	88 37       	cpi	r24, 0x78	; 120
    4354:	21 f0       	breq	.+8      	; 0x435e <vfprintf+0x270>
    4356:	a9 c0       	rjmp	.+338    	; 0x44aa <vfprintf+0x3bc>
    4358:	e9 2f       	mov	r30, r25
    435a:	e0 61       	ori	r30, 0x10	; 16
    435c:	be 2e       	mov	r11, r30
    435e:	b4 fe       	sbrs	r11, 4
    4360:	0d c0       	rjmp	.+26     	; 0x437c <vfprintf+0x28e>
    4362:	fb 2d       	mov	r31, r11
    4364:	f4 60       	ori	r31, 0x04	; 4
    4366:	bf 2e       	mov	r11, r31
    4368:	09 c0       	rjmp	.+18     	; 0x437c <vfprintf+0x28e>
    436a:	34 fe       	sbrs	r3, 4
    436c:	0a c0       	rjmp	.+20     	; 0x4382 <vfprintf+0x294>
    436e:	29 2f       	mov	r18, r25
    4370:	26 60       	ori	r18, 0x06	; 6
    4372:	b2 2e       	mov	r11, r18
    4374:	06 c0       	rjmp	.+12     	; 0x4382 <vfprintf+0x294>
    4376:	28 e0       	ldi	r18, 0x08	; 8
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	05 c0       	rjmp	.+10     	; 0x4386 <vfprintf+0x298>
    437c:	20 e1       	ldi	r18, 0x10	; 16
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <vfprintf+0x298>
    4382:	20 e1       	ldi	r18, 0x10	; 16
    4384:	32 e0       	ldi	r19, 0x02	; 2
    4386:	f8 01       	movw	r30, r16
    4388:	b7 fe       	sbrs	r11, 7
    438a:	07 c0       	rjmp	.+14     	; 0x439a <vfprintf+0x2ac>
    438c:	60 81       	ld	r22, Z
    438e:	71 81       	ldd	r23, Z+1	; 0x01
    4390:	82 81       	ldd	r24, Z+2	; 0x02
    4392:	93 81       	ldd	r25, Z+3	; 0x03
    4394:	0c 5f       	subi	r16, 0xFC	; 252
    4396:	1f 4f       	sbci	r17, 0xFF	; 255
    4398:	06 c0       	rjmp	.+12     	; 0x43a6 <vfprintf+0x2b8>
    439a:	60 81       	ld	r22, Z
    439c:	71 81       	ldd	r23, Z+1	; 0x01
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 5f       	subi	r16, 0xFE	; 254
    43a4:	1f 4f       	sbci	r17, 0xFF	; 255
    43a6:	a3 01       	movw	r20, r6
    43a8:	f1 d0       	rcall	.+482    	; 0x458c <__ultoa_invert>
    43aa:	88 2e       	mov	r8, r24
    43ac:	86 18       	sub	r8, r6
    43ae:	fb 2d       	mov	r31, r11
    43b0:	ff 77       	andi	r31, 0x7F	; 127
    43b2:	3f 2e       	mov	r3, r31
    43b4:	36 fe       	sbrs	r3, 6
    43b6:	0d c0       	rjmp	.+26     	; 0x43d2 <vfprintf+0x2e4>
    43b8:	23 2d       	mov	r18, r3
    43ba:	2e 7f       	andi	r18, 0xFE	; 254
    43bc:	a2 2e       	mov	r10, r18
    43be:	89 14       	cp	r8, r9
    43c0:	58 f4       	brcc	.+22     	; 0x43d8 <vfprintf+0x2ea>
    43c2:	34 fe       	sbrs	r3, 4
    43c4:	0b c0       	rjmp	.+22     	; 0x43dc <vfprintf+0x2ee>
    43c6:	32 fc       	sbrc	r3, 2
    43c8:	09 c0       	rjmp	.+18     	; 0x43dc <vfprintf+0x2ee>
    43ca:	83 2d       	mov	r24, r3
    43cc:	8e 7e       	andi	r24, 0xEE	; 238
    43ce:	a8 2e       	mov	r10, r24
    43d0:	05 c0       	rjmp	.+10     	; 0x43dc <vfprintf+0x2ee>
    43d2:	b8 2c       	mov	r11, r8
    43d4:	a3 2c       	mov	r10, r3
    43d6:	03 c0       	rjmp	.+6      	; 0x43de <vfprintf+0x2f0>
    43d8:	b8 2c       	mov	r11, r8
    43da:	01 c0       	rjmp	.+2      	; 0x43de <vfprintf+0x2f0>
    43dc:	b9 2c       	mov	r11, r9
    43de:	a4 fe       	sbrs	r10, 4
    43e0:	0f c0       	rjmp	.+30     	; 0x4400 <vfprintf+0x312>
    43e2:	fe 01       	movw	r30, r28
    43e4:	e8 0d       	add	r30, r8
    43e6:	f1 1d       	adc	r31, r1
    43e8:	80 81       	ld	r24, Z
    43ea:	80 33       	cpi	r24, 0x30	; 48
    43ec:	21 f4       	brne	.+8      	; 0x43f6 <vfprintf+0x308>
    43ee:	9a 2d       	mov	r25, r10
    43f0:	99 7e       	andi	r25, 0xE9	; 233
    43f2:	a9 2e       	mov	r10, r25
    43f4:	09 c0       	rjmp	.+18     	; 0x4408 <vfprintf+0x31a>
    43f6:	a2 fe       	sbrs	r10, 2
    43f8:	06 c0       	rjmp	.+12     	; 0x4406 <vfprintf+0x318>
    43fa:	b3 94       	inc	r11
    43fc:	b3 94       	inc	r11
    43fe:	04 c0       	rjmp	.+8      	; 0x4408 <vfprintf+0x31a>
    4400:	8a 2d       	mov	r24, r10
    4402:	86 78       	andi	r24, 0x86	; 134
    4404:	09 f0       	breq	.+2      	; 0x4408 <vfprintf+0x31a>
    4406:	b3 94       	inc	r11
    4408:	a3 fc       	sbrc	r10, 3
    440a:	10 c0       	rjmp	.+32     	; 0x442c <vfprintf+0x33e>
    440c:	a0 fe       	sbrs	r10, 0
    440e:	06 c0       	rjmp	.+12     	; 0x441c <vfprintf+0x32e>
    4410:	b2 14       	cp	r11, r2
    4412:	80 f4       	brcc	.+32     	; 0x4434 <vfprintf+0x346>
    4414:	28 0c       	add	r2, r8
    4416:	92 2c       	mov	r9, r2
    4418:	9b 18       	sub	r9, r11
    441a:	0d c0       	rjmp	.+26     	; 0x4436 <vfprintf+0x348>
    441c:	b2 14       	cp	r11, r2
    441e:	58 f4       	brcc	.+22     	; 0x4436 <vfprintf+0x348>
    4420:	b6 01       	movw	r22, r12
    4422:	80 e2       	ldi	r24, 0x20	; 32
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	76 d0       	rcall	.+236    	; 0x4514 <fputc>
    4428:	b3 94       	inc	r11
    442a:	f8 cf       	rjmp	.-16     	; 0x441c <vfprintf+0x32e>
    442c:	b2 14       	cp	r11, r2
    442e:	18 f4       	brcc	.+6      	; 0x4436 <vfprintf+0x348>
    4430:	2b 18       	sub	r2, r11
    4432:	02 c0       	rjmp	.+4      	; 0x4438 <vfprintf+0x34a>
    4434:	98 2c       	mov	r9, r8
    4436:	21 2c       	mov	r2, r1
    4438:	a4 fe       	sbrs	r10, 4
    443a:	0f c0       	rjmp	.+30     	; 0x445a <vfprintf+0x36c>
    443c:	b6 01       	movw	r22, r12
    443e:	80 e3       	ldi	r24, 0x30	; 48
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	68 d0       	rcall	.+208    	; 0x4514 <fputc>
    4444:	a2 fe       	sbrs	r10, 2
    4446:	16 c0       	rjmp	.+44     	; 0x4474 <vfprintf+0x386>
    4448:	a1 fc       	sbrc	r10, 1
    444a:	03 c0       	rjmp	.+6      	; 0x4452 <vfprintf+0x364>
    444c:	88 e7       	ldi	r24, 0x78	; 120
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	02 c0       	rjmp	.+4      	; 0x4456 <vfprintf+0x368>
    4452:	88 e5       	ldi	r24, 0x58	; 88
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	b6 01       	movw	r22, r12
    4458:	0c c0       	rjmp	.+24     	; 0x4472 <vfprintf+0x384>
    445a:	8a 2d       	mov	r24, r10
    445c:	86 78       	andi	r24, 0x86	; 134
    445e:	51 f0       	breq	.+20     	; 0x4474 <vfprintf+0x386>
    4460:	a1 fe       	sbrs	r10, 1
    4462:	02 c0       	rjmp	.+4      	; 0x4468 <vfprintf+0x37a>
    4464:	8b e2       	ldi	r24, 0x2B	; 43
    4466:	01 c0       	rjmp	.+2      	; 0x446a <vfprintf+0x37c>
    4468:	80 e2       	ldi	r24, 0x20	; 32
    446a:	a7 fc       	sbrc	r10, 7
    446c:	8d e2       	ldi	r24, 0x2D	; 45
    446e:	b6 01       	movw	r22, r12
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	50 d0       	rcall	.+160    	; 0x4514 <fputc>
    4474:	89 14       	cp	r8, r9
    4476:	30 f4       	brcc	.+12     	; 0x4484 <vfprintf+0x396>
    4478:	b6 01       	movw	r22, r12
    447a:	80 e3       	ldi	r24, 0x30	; 48
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	4a d0       	rcall	.+148    	; 0x4514 <fputc>
    4480:	9a 94       	dec	r9
    4482:	f8 cf       	rjmp	.-16     	; 0x4474 <vfprintf+0x386>
    4484:	8a 94       	dec	r8
    4486:	f3 01       	movw	r30, r6
    4488:	e8 0d       	add	r30, r8
    448a:	f1 1d       	adc	r31, r1
    448c:	80 81       	ld	r24, Z
    448e:	b6 01       	movw	r22, r12
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	40 d0       	rcall	.+128    	; 0x4514 <fputc>
    4494:	81 10       	cpse	r8, r1
    4496:	f6 cf       	rjmp	.-20     	; 0x4484 <vfprintf+0x396>
    4498:	22 20       	and	r2, r2
    449a:	09 f4       	brne	.+2      	; 0x449e <vfprintf+0x3b0>
    449c:	4e ce       	rjmp	.-868    	; 0x413a <vfprintf+0x4c>
    449e:	b6 01       	movw	r22, r12
    44a0:	80 e2       	ldi	r24, 0x20	; 32
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	37 d0       	rcall	.+110    	; 0x4514 <fputc>
    44a6:	2a 94       	dec	r2
    44a8:	f7 cf       	rjmp	.-18     	; 0x4498 <vfprintf+0x3aa>
    44aa:	f6 01       	movw	r30, r12
    44ac:	86 81       	ldd	r24, Z+6	; 0x06
    44ae:	97 81       	ldd	r25, Z+7	; 0x07
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <vfprintf+0x3c8>
    44b2:	8f ef       	ldi	r24, 0xFF	; 255
    44b4:	9f ef       	ldi	r25, 0xFF	; 255
    44b6:	2b 96       	adiw	r28, 0x0b	; 11
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
    44c2:	df 91       	pop	r29
    44c4:	cf 91       	pop	r28
    44c6:	1f 91       	pop	r17
    44c8:	0f 91       	pop	r16
    44ca:	ff 90       	pop	r15
    44cc:	ef 90       	pop	r14
    44ce:	df 90       	pop	r13
    44d0:	cf 90       	pop	r12
    44d2:	bf 90       	pop	r11
    44d4:	af 90       	pop	r10
    44d6:	9f 90       	pop	r9
    44d8:	8f 90       	pop	r8
    44da:	7f 90       	pop	r7
    44dc:	6f 90       	pop	r6
    44de:	5f 90       	pop	r5
    44e0:	4f 90       	pop	r4
    44e2:	3f 90       	pop	r3
    44e4:	2f 90       	pop	r2
    44e6:	08 95       	ret

000044e8 <strnlen_P>:
    44e8:	fc 01       	movw	r30, r24
    44ea:	05 90       	lpm	r0, Z+
    44ec:	61 50       	subi	r22, 0x01	; 1
    44ee:	70 40       	sbci	r23, 0x00	; 0
    44f0:	01 10       	cpse	r0, r1
    44f2:	d8 f7       	brcc	.-10     	; 0x44ea <strnlen_P+0x2>
    44f4:	80 95       	com	r24
    44f6:	90 95       	com	r25
    44f8:	8e 0f       	add	r24, r30
    44fa:	9f 1f       	adc	r25, r31
    44fc:	08 95       	ret

000044fe <strnlen>:
    44fe:	fc 01       	movw	r30, r24
    4500:	61 50       	subi	r22, 0x01	; 1
    4502:	70 40       	sbci	r23, 0x00	; 0
    4504:	01 90       	ld	r0, Z+
    4506:	01 10       	cpse	r0, r1
    4508:	d8 f7       	brcc	.-10     	; 0x4500 <strnlen+0x2>
    450a:	80 95       	com	r24
    450c:	90 95       	com	r25
    450e:	8e 0f       	add	r24, r30
    4510:	9f 1f       	adc	r25, r31
    4512:	08 95       	ret

00004514 <fputc>:
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	fb 01       	movw	r30, r22
    451e:	23 81       	ldd	r18, Z+3	; 0x03
    4520:	21 fd       	sbrc	r18, 1
    4522:	03 c0       	rjmp	.+6      	; 0x452a <fputc+0x16>
    4524:	8f ef       	ldi	r24, 0xFF	; 255
    4526:	9f ef       	ldi	r25, 0xFF	; 255
    4528:	2c c0       	rjmp	.+88     	; 0x4582 <fputc+0x6e>
    452a:	22 ff       	sbrs	r18, 2
    452c:	16 c0       	rjmp	.+44     	; 0x455a <fputc+0x46>
    452e:	46 81       	ldd	r20, Z+6	; 0x06
    4530:	57 81       	ldd	r21, Z+7	; 0x07
    4532:	24 81       	ldd	r18, Z+4	; 0x04
    4534:	35 81       	ldd	r19, Z+5	; 0x05
    4536:	42 17       	cp	r20, r18
    4538:	53 07       	cpc	r21, r19
    453a:	44 f4       	brge	.+16     	; 0x454c <fputc+0x38>
    453c:	a0 81       	ld	r26, Z
    453e:	b1 81       	ldd	r27, Z+1	; 0x01
    4540:	9d 01       	movw	r18, r26
    4542:	2f 5f       	subi	r18, 0xFF	; 255
    4544:	3f 4f       	sbci	r19, 0xFF	; 255
    4546:	31 83       	std	Z+1, r19	; 0x01
    4548:	20 83       	st	Z, r18
    454a:	8c 93       	st	X, r24
    454c:	26 81       	ldd	r18, Z+6	; 0x06
    454e:	37 81       	ldd	r19, Z+7	; 0x07
    4550:	2f 5f       	subi	r18, 0xFF	; 255
    4552:	3f 4f       	sbci	r19, 0xFF	; 255
    4554:	37 83       	std	Z+7, r19	; 0x07
    4556:	26 83       	std	Z+6, r18	; 0x06
    4558:	14 c0       	rjmp	.+40     	; 0x4582 <fputc+0x6e>
    455a:	8b 01       	movw	r16, r22
    455c:	ec 01       	movw	r28, r24
    455e:	fb 01       	movw	r30, r22
    4560:	00 84       	ldd	r0, Z+8	; 0x08
    4562:	f1 85       	ldd	r31, Z+9	; 0x09
    4564:	e0 2d       	mov	r30, r0
    4566:	19 95       	eicall
    4568:	89 2b       	or	r24, r25
    456a:	e1 f6       	brne	.-72     	; 0x4524 <fputc+0x10>
    456c:	d8 01       	movw	r26, r16
    456e:	16 96       	adiw	r26, 0x06	; 6
    4570:	8d 91       	ld	r24, X+
    4572:	9c 91       	ld	r25, X
    4574:	17 97       	sbiw	r26, 0x07	; 7
    4576:	01 96       	adiw	r24, 0x01	; 1
    4578:	17 96       	adiw	r26, 0x07	; 7
    457a:	9c 93       	st	X, r25
    457c:	8e 93       	st	-X, r24
    457e:	16 97       	sbiw	r26, 0x06	; 6
    4580:	ce 01       	movw	r24, r28
    4582:	df 91       	pop	r29
    4584:	cf 91       	pop	r28
    4586:	1f 91       	pop	r17
    4588:	0f 91       	pop	r16
    458a:	08 95       	ret

0000458c <__ultoa_invert>:
    458c:	fa 01       	movw	r30, r20
    458e:	aa 27       	eor	r26, r26
    4590:	28 30       	cpi	r18, 0x08	; 8
    4592:	51 f1       	breq	.+84     	; 0x45e8 <__ultoa_invert+0x5c>
    4594:	20 31       	cpi	r18, 0x10	; 16
    4596:	81 f1       	breq	.+96     	; 0x45f8 <__ultoa_invert+0x6c>
    4598:	e8 94       	clt
    459a:	6f 93       	push	r22
    459c:	6e 7f       	andi	r22, 0xFE	; 254
    459e:	6e 5f       	subi	r22, 0xFE	; 254
    45a0:	7f 4f       	sbci	r23, 0xFF	; 255
    45a2:	8f 4f       	sbci	r24, 0xFF	; 255
    45a4:	9f 4f       	sbci	r25, 0xFF	; 255
    45a6:	af 4f       	sbci	r26, 0xFF	; 255
    45a8:	b1 e0       	ldi	r27, 0x01	; 1
    45aa:	3e d0       	rcall	.+124    	; 0x4628 <__ultoa_invert+0x9c>
    45ac:	b4 e0       	ldi	r27, 0x04	; 4
    45ae:	3c d0       	rcall	.+120    	; 0x4628 <__ultoa_invert+0x9c>
    45b0:	67 0f       	add	r22, r23
    45b2:	78 1f       	adc	r23, r24
    45b4:	89 1f       	adc	r24, r25
    45b6:	9a 1f       	adc	r25, r26
    45b8:	a1 1d       	adc	r26, r1
    45ba:	68 0f       	add	r22, r24
    45bc:	79 1f       	adc	r23, r25
    45be:	8a 1f       	adc	r24, r26
    45c0:	91 1d       	adc	r25, r1
    45c2:	a1 1d       	adc	r26, r1
    45c4:	6a 0f       	add	r22, r26
    45c6:	71 1d       	adc	r23, r1
    45c8:	81 1d       	adc	r24, r1
    45ca:	91 1d       	adc	r25, r1
    45cc:	a1 1d       	adc	r26, r1
    45ce:	20 d0       	rcall	.+64     	; 0x4610 <__ultoa_invert+0x84>
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <__ultoa_invert+0x48>
    45d2:	68 94       	set
    45d4:	3f 91       	pop	r19
    45d6:	2a e0       	ldi	r18, 0x0A	; 10
    45d8:	26 9f       	mul	r18, r22
    45da:	11 24       	eor	r1, r1
    45dc:	30 19       	sub	r19, r0
    45de:	30 5d       	subi	r19, 0xD0	; 208
    45e0:	31 93       	st	Z+, r19
    45e2:	de f6       	brtc	.-74     	; 0x459a <__ultoa_invert+0xe>
    45e4:	cf 01       	movw	r24, r30
    45e6:	08 95       	ret
    45e8:	46 2f       	mov	r20, r22
    45ea:	47 70       	andi	r20, 0x07	; 7
    45ec:	40 5d       	subi	r20, 0xD0	; 208
    45ee:	41 93       	st	Z+, r20
    45f0:	b3 e0       	ldi	r27, 0x03	; 3
    45f2:	0f d0       	rcall	.+30     	; 0x4612 <__ultoa_invert+0x86>
    45f4:	c9 f7       	brne	.-14     	; 0x45e8 <__ultoa_invert+0x5c>
    45f6:	f6 cf       	rjmp	.-20     	; 0x45e4 <__ultoa_invert+0x58>
    45f8:	46 2f       	mov	r20, r22
    45fa:	4f 70       	andi	r20, 0x0F	; 15
    45fc:	40 5d       	subi	r20, 0xD0	; 208
    45fe:	4a 33       	cpi	r20, 0x3A	; 58
    4600:	18 f0       	brcs	.+6      	; 0x4608 <__ultoa_invert+0x7c>
    4602:	49 5d       	subi	r20, 0xD9	; 217
    4604:	31 fd       	sbrc	r19, 1
    4606:	40 52       	subi	r20, 0x20	; 32
    4608:	41 93       	st	Z+, r20
    460a:	02 d0       	rcall	.+4      	; 0x4610 <__ultoa_invert+0x84>
    460c:	a9 f7       	brne	.-22     	; 0x45f8 <__ultoa_invert+0x6c>
    460e:	ea cf       	rjmp	.-44     	; 0x45e4 <__ultoa_invert+0x58>
    4610:	b4 e0       	ldi	r27, 0x04	; 4
    4612:	a6 95       	lsr	r26
    4614:	97 95       	ror	r25
    4616:	87 95       	ror	r24
    4618:	77 95       	ror	r23
    461a:	67 95       	ror	r22
    461c:	ba 95       	dec	r27
    461e:	c9 f7       	brne	.-14     	; 0x4612 <__ultoa_invert+0x86>
    4620:	00 97       	sbiw	r24, 0x00	; 0
    4622:	61 05       	cpc	r22, r1
    4624:	71 05       	cpc	r23, r1
    4626:	08 95       	ret
    4628:	9b 01       	movw	r18, r22
    462a:	ac 01       	movw	r20, r24
    462c:	0a 2e       	mov	r0, r26
    462e:	06 94       	lsr	r0
    4630:	57 95       	ror	r21
    4632:	47 95       	ror	r20
    4634:	37 95       	ror	r19
    4636:	27 95       	ror	r18
    4638:	ba 95       	dec	r27
    463a:	c9 f7       	brne	.-14     	; 0x462e <__ultoa_invert+0xa2>
    463c:	62 0f       	add	r22, r18
    463e:	73 1f       	adc	r23, r19
    4640:	84 1f       	adc	r24, r20
    4642:	95 1f       	adc	r25, r21
    4644:	a0 1d       	adc	r26, r0
    4646:	08 95       	ret

00004648 <_exit>:
    4648:	f8 94       	cli

0000464a <__stop_program>:
    464a:	ff cf       	rjmp	.-2      	; 0x464a <__stop_program>
