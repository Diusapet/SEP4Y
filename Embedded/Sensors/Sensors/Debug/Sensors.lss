
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00002406  0000249a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002406  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  0080024a  0080024a  000024e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008164  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022ae  00000000  00000000  0000accc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f58  00000000  00000000  0000cf7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001388  00000000  00000000  00010ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027a6  00000000  00000000  0001225c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000075f3  00000000  00000000  00014a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  0001bff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e8 c1       	rjmp	.+976    	; 0x402 <__vector_12>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_25>
      68:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__vector_26>
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_36>
      94:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__vector_37>
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_51>
      d0:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__vector_52>
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__vector_54>
      dc:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_55>
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e0       	ldi	r30, 0x06	; 6
      fc:	f4 e2       	ldi	r31, 0x24	; 36
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 3c       	cpi	r26, 0xCA	; 202
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	3b d7       	rcall	.+3702   	; 0xf96 <main>
     120:	0c 94 01 12 	jmp	0x2402	; 0x2402 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     126:	e8 e0       	ldi	r30, 0x08	; 8
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	90 81       	ld	r25, Z
     12c:	90 7f       	andi	r25, 0xF0	; 240
     12e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     130:	90 81       	ld	r25, Z
     132:	8f 70       	andi	r24, 0x0F	; 15
     134:	98 2b       	or	r25, r24
     136:	90 83       	st	Z, r25
     138:	08 95       	ret

0000013a <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     13a:	e8 e0       	ldi	r30, 0x08	; 8
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	80 81       	ld	r24, Z
     140:	80 7f       	andi	r24, 0xF0	; 240
     142:	80 83       	st	Z, r24
     144:	08 95       	ret

00000146 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     14c:	b0 d3       	rcall	.+1888   	; 0x8ae <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     154:	ec 01       	movw	r28, r24
     156:	72 d4       	rcall	.+2276   	; 0xa3c <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     158:	20 97       	sbiw	r28, 0x00	; 0
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     15a:	09 f4       	brne	.+2      	; 0x15e <pvPortMalloc+0x18>
     15c:	f6 d6       	rcall	.+3564   	; 0xf4a <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     15e:	ce 01       	movw	r24, r28
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     166:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     168:	03 96       	adiw	r24, 0x03	; 3
     16a:	92 83       	std	Z+2, r25	; 0x02
     16c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     16e:	2f ef       	ldi	r18, 0xFF	; 255
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	34 83       	std	Z+4, r19	; 0x04
     174:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     176:	96 83       	std	Z+6, r25	; 0x06
     178:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     17a:	90 87       	std	Z+8, r25	; 0x08
     17c:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     17e:	10 82       	st	Z, r1
     180:	08 95       	ret

00000182 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     182:	fc 01       	movw	r30, r24
     184:	11 86       	std	Z+9, r1	; 0x09
     186:	10 86       	std	Z+8, r1	; 0x08
     188:	08 95       	ret

0000018a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	9c 01       	movw	r18, r24
     190:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     192:	dc 01       	movw	r26, r24
     194:	11 96       	adiw	r26, 0x01	; 1
     196:	cd 91       	ld	r28, X+
     198:	dc 91       	ld	r29, X
     19a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     19c:	d3 83       	std	Z+3, r29	; 0x03
     19e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     1a0:	8c 81       	ldd	r24, Y+4	; 0x04
     1a2:	9d 81       	ldd	r25, Y+5	; 0x05
     1a4:	95 83       	std	Z+5, r25	; 0x05
     1a6:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     1a8:	8c 81       	ldd	r24, Y+4	; 0x04
     1aa:	9d 81       	ldd	r25, Y+5	; 0x05
     1ac:	dc 01       	movw	r26, r24
     1ae:	13 96       	adiw	r26, 0x03	; 3
     1b0:	7c 93       	st	X, r23
     1b2:	6e 93       	st	-X, r22
     1b4:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     1b6:	7d 83       	std	Y+5, r23	; 0x05
     1b8:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     1ba:	31 87       	std	Z+9, r19	; 0x09
     1bc:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     1be:	f9 01       	movw	r30, r18
     1c0:	80 81       	ld	r24, Z
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	80 83       	st	Z, r24
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     1d2:	48 81       	ld	r20, Y
     1d4:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     1d6:	4f 3f       	cpi	r20, 0xFF	; 255
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	52 07       	cpc	r21, r18
     1dc:	21 f4       	brne	.+8      	; 0x1e6 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     1de:	fc 01       	movw	r30, r24
     1e0:	a7 81       	ldd	r26, Z+7	; 0x07
     1e2:	b0 85       	ldd	r27, Z+8	; 0x08
     1e4:	0d c0       	rjmp	.+26     	; 0x200 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     1e6:	dc 01       	movw	r26, r24
     1e8:	13 96       	adiw	r26, 0x03	; 3
     1ea:	01 c0       	rjmp	.+2      	; 0x1ee <vListInsert+0x22>
     1ec:	df 01       	movw	r26, r30
     1ee:	12 96       	adiw	r26, 0x02	; 2
     1f0:	ed 91       	ld	r30, X+
     1f2:	fc 91       	ld	r31, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	20 81       	ld	r18, Z
     1f8:	31 81       	ldd	r19, Z+1	; 0x01
     1fa:	42 17       	cp	r20, r18
     1fc:	53 07       	cpc	r21, r19
     1fe:	b0 f7       	brcc	.-20     	; 0x1ec <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     200:	12 96       	adiw	r26, 0x02	; 2
     202:	ed 91       	ld	r30, X+
     204:	fc 91       	ld	r31, X
     206:	13 97       	sbiw	r26, 0x03	; 3
     208:	fb 83       	std	Y+3, r31	; 0x03
     20a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     20c:	d5 83       	std	Z+5, r29	; 0x05
     20e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     210:	bd 83       	std	Y+5, r27	; 0x05
     212:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     214:	13 96       	adiw	r26, 0x03	; 3
     216:	dc 93       	st	X, r29
     218:	ce 93       	st	-X, r28
     21a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     21c:	99 87       	std	Y+9, r25	; 0x09
     21e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     220:	fc 01       	movw	r30, r24
     222:	20 81       	ld	r18, Z
     224:	2f 5f       	subi	r18, 0xFF	; 255
     226:	20 83       	st	Z, r18
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     234:	a0 85       	ldd	r26, Z+8	; 0x08
     236:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     238:	c2 81       	ldd	r28, Z+2	; 0x02
     23a:	d3 81       	ldd	r29, Z+3	; 0x03
     23c:	84 81       	ldd	r24, Z+4	; 0x04
     23e:	95 81       	ldd	r25, Z+5	; 0x05
     240:	9d 83       	std	Y+5, r25	; 0x05
     242:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     244:	c4 81       	ldd	r28, Z+4	; 0x04
     246:	d5 81       	ldd	r29, Z+5	; 0x05
     248:	82 81       	ldd	r24, Z+2	; 0x02
     24a:	93 81       	ldd	r25, Z+3	; 0x03
     24c:	9b 83       	std	Y+3, r25	; 0x03
     24e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	8d 91       	ld	r24, X+
     254:	9c 91       	ld	r25, X
     256:	12 97       	sbiw	r26, 0x02	; 2
     258:	e8 17       	cp	r30, r24
     25a:	f9 07       	cpc	r31, r25
     25c:	31 f4       	brne	.+12     	; 0x26a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     25e:	84 81       	ldd	r24, Z+4	; 0x04
     260:	95 81       	ldd	r25, Z+5	; 0x05
     262:	12 96       	adiw	r26, 0x02	; 2
     264:	9c 93       	st	X, r25
     266:	8e 93       	st	-X, r24
     268:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     26a:	11 86       	std	Z+9, r1	; 0x09
     26c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     26e:	8c 91       	ld	r24, X
     270:	81 50       	subi	r24, 0x01	; 1
     272:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     274:	8c 91       	ld	r24, X
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	0f 92       	push	r0
     284:	0b b6       	in	r0, 0x3b	; 59
     286:	0f 92       	push	r0
     288:	0c b6       	in	r0, 0x3c	; 60
     28a:	0f 92       	push	r0
     28c:	1f 92       	push	r1
     28e:	11 24       	eor	r1, r1
     290:	2f 92       	push	r2
     292:	3f 92       	push	r3
     294:	4f 92       	push	r4
     296:	5f 92       	push	r5
     298:	6f 92       	push	r6
     29a:	7f 92       	push	r7
     29c:	8f 92       	push	r8
     29e:	9f 92       	push	r9
     2a0:	af 92       	push	r10
     2a2:	bf 92       	push	r11
     2a4:	cf 92       	push	r12
     2a6:	df 92       	push	r13
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	2f 93       	push	r18
     2b2:	3f 93       	push	r19
     2b4:	4f 93       	push	r20
     2b6:	5f 93       	push	r21
     2b8:	6f 93       	push	r22
     2ba:	7f 93       	push	r23
     2bc:	8f 93       	push	r24
     2be:	9f 93       	push	r25
     2c0:	af 93       	push	r26
     2c2:	bf 93       	push	r27
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ef 93       	push	r30
     2ca:	ff 93       	push	r31
     2cc:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <pxCurrentTCB>
     2d0:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     2d4:	0d b6       	in	r0, 0x3d	; 61
     2d6:	0d 92       	st	X+, r0
     2d8:	0e b6       	in	r0, 0x3e	; 62
     2da:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     2dc:	28 d4       	rcall	.+2128   	; 0xb2e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     2de:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <pxCurrentTCB>
     2e2:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     2e6:	cd 91       	ld	r28, X+
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	dd 91       	ld	r29, X+
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	ff 91       	pop	r31
     2f0:	ef 91       	pop	r30
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	bf 91       	pop	r27
     2f8:	af 91       	pop	r26
     2fa:	9f 91       	pop	r25
     2fc:	8f 91       	pop	r24
     2fe:	7f 91       	pop	r23
     300:	6f 91       	pop	r22
     302:	5f 91       	pop	r21
     304:	4f 91       	pop	r20
     306:	3f 91       	pop	r19
     308:	2f 91       	pop	r18
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	bf 90       	pop	r11
     318:	af 90       	pop	r10
     31a:	9f 90       	pop	r9
     31c:	8f 90       	pop	r8
     31e:	7f 90       	pop	r7
     320:	6f 90       	pop	r6
     322:	5f 90       	pop	r5
     324:	4f 90       	pop	r4
     326:	3f 90       	pop	r3
     328:	2f 90       	pop	r2
     32a:	1f 90       	pop	r1
     32c:	0f 90       	pop	r0
     32e:	0c be       	out	0x3c, r0	; 60
     330:	0f 90       	pop	r0
     332:	0b be       	out	0x3b, r0	; 59
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     33a:	08 95       	ret

0000033c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     33c:	0f 92       	push	r0
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	0f 92       	push	r0
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	0c b6       	in	r0, 0x3c	; 60
     34a:	0f 92       	push	r0
     34c:	1f 92       	push	r1
     34e:	11 24       	eor	r1, r1
     350:	2f 92       	push	r2
     352:	3f 92       	push	r3
     354:	4f 92       	push	r4
     356:	5f 92       	push	r5
     358:	6f 92       	push	r6
     35a:	7f 92       	push	r7
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	ef 93       	push	r30
     38a:	ff 93       	push	r31
     38c:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <pxCurrentTCB>
     390:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     394:	0d b6       	in	r0, 0x3d	; 61
     396:	0d 92       	st	X+, r0
     398:	0e b6       	in	r0, 0x3e	; 62
     39a:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     39c:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     39e:	97 d2       	rcall	.+1326   	; 0x8ce <xTaskIncrementTick>
     3a0:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     3a2:	c5 d3       	rcall	.+1930   	; 0xb2e <vTaskSwitchContext>
     3a4:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     3a8:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     3ac:	cd 91       	ld	r28, X+
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	dd 91       	ld	r29, X+
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	ff 91       	pop	r31
     3b6:	ef 91       	pop	r30
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	bf 91       	pop	r27
     3be:	af 91       	pop	r26
     3c0:	9f 91       	pop	r25
     3c2:	8f 91       	pop	r24
     3c4:	7f 91       	pop	r23
     3c6:	6f 91       	pop	r22
     3c8:	5f 91       	pop	r21
     3ca:	4f 91       	pop	r20
     3cc:	3f 91       	pop	r19
     3ce:	2f 91       	pop	r18
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	9f 90       	pop	r9
     3e2:	8f 90       	pop	r8
     3e4:	7f 90       	pop	r7
     3e6:	6f 90       	pop	r6
     3e8:	5f 90       	pop	r5
     3ea:	4f 90       	pop	r4
     3ec:	3f 90       	pop	r3
     3ee:	2f 90       	pop	r2
     3f0:	1f 90       	pop	r1
     3f2:	0f 90       	pop	r0
     3f4:	0c be       	out	0x3c, r0	; 60
     3f6:	0f 90       	pop	r0
     3f8:	0b be       	out	0x3b, r0	; 59
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	08 95       	ret

00000402 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     402:	9c df       	rcall	.-200    	; 0x33c <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     404:	18 95       	reti

00000406 <prvCopyDataToQueue>:

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
    }
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
     410:	04 2f       	mov	r16, r20
     412:	1a 8d       	ldd	r17, Y+26	; 0x1a
     414:	4c 8d       	ldd	r20, Y+28	; 0x1c
     416:	41 11       	cpse	r20, r1
     418:	0b c0       	rjmp	.+22     	; 0x430 <prvCopyDataToQueue+0x2a>
     41a:	88 81       	ld	r24, Y
     41c:	99 81       	ldd	r25, Y+1	; 0x01
     41e:	89 2b       	or	r24, r25
     420:	09 f0       	breq	.+2      	; 0x424 <prvCopyDataToQueue+0x1e>
     422:	41 c0       	rjmp	.+130    	; 0x4a6 <prvCopyDataToQueue+0xa0>
     424:	8c 81       	ldd	r24, Y+4	; 0x04
     426:	9d 81       	ldd	r25, Y+5	; 0x05
     428:	b4 d4       	rcall	.+2408   	; 0xd92 <xTaskPriorityDisinherit>
     42a:	1d 82       	std	Y+5, r1	; 0x05
     42c:	1c 82       	std	Y+4, r1	; 0x04
     42e:	42 c0       	rjmp	.+132    	; 0x4b4 <prvCopyDataToQueue+0xae>
     430:	01 11       	cpse	r16, r1
     432:	17 c0       	rjmp	.+46     	; 0x462 <prvCopyDataToQueue+0x5c>
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	8a 81       	ldd	r24, Y+2	; 0x02
     438:	9b 81       	ldd	r25, Y+3	; 0x03
     43a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <memcpy>
     43e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	9b 81       	ldd	r25, Y+3	; 0x03
     444:	82 0f       	add	r24, r18
     446:	91 1d       	adc	r25, r1
     448:	9b 83       	std	Y+3, r25	; 0x03
     44a:	8a 83       	std	Y+2, r24	; 0x02
     44c:	2c 81       	ldd	r18, Y+4	; 0x04
     44e:	3d 81       	ldd	r19, Y+5	; 0x05
     450:	82 17       	cp	r24, r18
     452:	93 07       	cpc	r25, r19
     454:	50 f1       	brcs	.+84     	; 0x4aa <prvCopyDataToQueue+0xa4>
     456:	88 81       	ld	r24, Y
     458:	99 81       	ldd	r25, Y+1	; 0x01
     45a:	9b 83       	std	Y+3, r25	; 0x03
     45c:	8a 83       	std	Y+2, r24	; 0x02
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	29 c0       	rjmp	.+82     	; 0x4b4 <prvCopyDataToQueue+0xae>
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	8e 81       	ldd	r24, Y+6	; 0x06
     466:	9f 81       	ldd	r25, Y+7	; 0x07
     468:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <memcpy>
     46c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	91 95       	neg	r25
     472:	81 95       	neg	r24
     474:	91 09       	sbc	r25, r1
     476:	2e 81       	ldd	r18, Y+6	; 0x06
     478:	3f 81       	ldd	r19, Y+7	; 0x07
     47a:	28 0f       	add	r18, r24
     47c:	39 1f       	adc	r19, r25
     47e:	3f 83       	std	Y+7, r19	; 0x07
     480:	2e 83       	std	Y+6, r18	; 0x06
     482:	48 81       	ld	r20, Y
     484:	59 81       	ldd	r21, Y+1	; 0x01
     486:	24 17       	cp	r18, r20
     488:	35 07       	cpc	r19, r21
     48a:	30 f4       	brcc	.+12     	; 0x498 <prvCopyDataToQueue+0x92>
     48c:	2c 81       	ldd	r18, Y+4	; 0x04
     48e:	3d 81       	ldd	r19, Y+5	; 0x05
     490:	82 0f       	add	r24, r18
     492:	93 1f       	adc	r25, r19
     494:	9f 83       	std	Y+7, r25	; 0x07
     496:	8e 83       	std	Y+6, r24	; 0x06
     498:	02 30       	cpi	r16, 0x02	; 2
     49a:	49 f4       	brne	.+18     	; 0x4ae <prvCopyDataToQueue+0xa8>
     49c:	11 23       	and	r17, r17
     49e:	49 f0       	breq	.+18     	; 0x4b2 <prvCopyDataToQueue+0xac>
     4a0:	11 50       	subi	r17, 0x01	; 1
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <prvCopyDataToQueue+0xae>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <prvCopyDataToQueue+0xae>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <prvCopyDataToQueue+0xae>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <prvCopyDataToQueue+0xae>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	1f 5f       	subi	r17, 0xFF	; 255
     4b6:	1a 8f       	std	Y+26, r17	; 0x1a
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <prvUnlockQueue>:
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	8c 01       	movw	r16, r24
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	0f 92       	push	r0
     4d4:	fc 01       	movw	r30, r24
     4d6:	c6 8d       	ldd	r28, Z+30	; 0x1e
     4d8:	1c 16       	cp	r1, r28
     4da:	9c f4       	brge	.+38     	; 0x502 <prvUnlockQueue+0x40>
     4dc:	81 89       	ldd	r24, Z+17	; 0x11
     4de:	81 11       	cpse	r24, r1
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <prvUnlockQueue+0x2c>
     4e2:	0f c0       	rjmp	.+30     	; 0x502 <prvUnlockQueue+0x40>
     4e4:	f8 01       	movw	r30, r16
     4e6:	81 89       	ldd	r24, Z+17	; 0x11
     4e8:	81 11       	cpse	r24, r1
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <prvUnlockQueue+0x34>
     4ec:	0a c0       	rjmp	.+20     	; 0x502 <prvUnlockQueue+0x40>
     4ee:	78 01       	movw	r14, r16
     4f0:	f1 e1       	ldi	r31, 0x11	; 17
     4f2:	ef 0e       	add	r14, r31
     4f4:	f1 1c       	adc	r15, r1
     4f6:	c7 01       	movw	r24, r14
     4f8:	b6 d3       	rcall	.+1900   	; 0xc66 <xTaskRemoveFromEventList>
     4fa:	81 11       	cpse	r24, r1
     4fc:	38 d4       	rcall	.+2160   	; 0xd6e <vTaskMissedYield>
     4fe:	c1 50       	subi	r28, 0x01	; 1
     500:	89 f7       	brne	.-30     	; 0x4e4 <prvUnlockQueue+0x22>
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	f8 01       	movw	r30, r16
     506:	86 8f       	std	Z+30, r24	; 0x1e
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	0f 92       	push	r0
     512:	c5 8d       	ldd	r28, Z+29	; 0x1d
     514:	1c 16       	cp	r1, r28
     516:	9c f4       	brge	.+38     	; 0x53e <prvUnlockQueue+0x7c>
     518:	80 85       	ldd	r24, Z+8	; 0x08
     51a:	81 11       	cpse	r24, r1
     51c:	06 c0       	rjmp	.+12     	; 0x52a <prvUnlockQueue+0x68>
     51e:	0f c0       	rjmp	.+30     	; 0x53e <prvUnlockQueue+0x7c>
     520:	f8 01       	movw	r30, r16
     522:	80 85       	ldd	r24, Z+8	; 0x08
     524:	81 11       	cpse	r24, r1
     526:	05 c0       	rjmp	.+10     	; 0x532 <prvUnlockQueue+0x70>
     528:	0a c0       	rjmp	.+20     	; 0x53e <prvUnlockQueue+0x7c>
     52a:	78 01       	movw	r14, r16
     52c:	f8 e0       	ldi	r31, 0x08	; 8
     52e:	ef 0e       	add	r14, r31
     530:	f1 1c       	adc	r15, r1
     532:	c7 01       	movw	r24, r14
     534:	98 d3       	rcall	.+1840   	; 0xc66 <xTaskRemoveFromEventList>
     536:	81 11       	cpse	r24, r1
     538:	1a d4       	rcall	.+2100   	; 0xd6e <vTaskMissedYield>
     53a:	c1 50       	subi	r28, 0x01	; 1
     53c:	89 f7       	brne	.-30     	; 0x520 <prvUnlockQueue+0x5e>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	f8 01       	movw	r30, r16
     542:	85 8f       	std	Z+29, r24	; 0x1d
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	08 95       	ret

00000554 <xQueueGenericReset>:
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	0f 92       	push	r0
     560:	e8 81       	ld	r30, Y
     562:	f9 81       	ldd	r31, Y+1	; 0x01
     564:	8b 8d       	ldd	r24, Y+27	; 0x1b
     566:	2c 8d       	ldd	r18, Y+28	; 0x1c
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	82 9f       	mul	r24, r18
     56e:	a0 01       	movw	r20, r0
     570:	83 9f       	mul	r24, r19
     572:	50 0d       	add	r21, r0
     574:	92 9f       	mul	r25, r18
     576:	50 0d       	add	r21, r0
     578:	11 24       	eor	r1, r1
     57a:	4e 0f       	add	r20, r30
     57c:	5f 1f       	adc	r21, r31
     57e:	5d 83       	std	Y+5, r21	; 0x05
     580:	4c 83       	std	Y+4, r20	; 0x04
     582:	1a 8e       	std	Y+26, r1	; 0x1a
     584:	fb 83       	std	Y+3, r31	; 0x03
     586:	ea 83       	std	Y+2, r30	; 0x02
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	82 9f       	mul	r24, r18
     58c:	a0 01       	movw	r20, r0
     58e:	83 9f       	mul	r24, r19
     590:	50 0d       	add	r21, r0
     592:	92 9f       	mul	r25, r18
     594:	50 0d       	add	r21, r0
     596:	11 24       	eor	r1, r1
     598:	cf 01       	movw	r24, r30
     59a:	84 0f       	add	r24, r20
     59c:	95 1f       	adc	r25, r21
     59e:	9f 83       	std	Y+7, r25	; 0x07
     5a0:	8e 83       	std	Y+6, r24	; 0x06
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	8d 8f       	std	Y+29, r24	; 0x1d
     5a6:	8e 8f       	std	Y+30, r24	; 0x1e
     5a8:	61 11       	cpse	r22, r1
     5aa:	0a c0       	rjmp	.+20     	; 0x5c0 <xQueueGenericReset+0x6c>
     5ac:	88 85       	ldd	r24, Y+8	; 0x08
     5ae:	88 23       	and	r24, r24
     5b0:	69 f0       	breq	.+26     	; 0x5cc <xQueueGenericReset+0x78>
     5b2:	ce 01       	movw	r24, r28
     5b4:	08 96       	adiw	r24, 0x08	; 8
     5b6:	57 d3       	rcall	.+1710   	; 0xc66 <xTaskRemoveFromEventList>
     5b8:	88 23       	and	r24, r24
     5ba:	41 f0       	breq	.+16     	; 0x5cc <xQueueGenericReset+0x78>
     5bc:	5f de       	rcall	.-834    	; 0x27c <vPortYield>
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <xQueueGenericReset+0x78>
     5c0:	ce 01       	movw	r24, r28
     5c2:	08 96       	adiw	r24, 0x08	; 8
     5c4:	d0 dd       	rcall	.-1120   	; 0x166 <vListInitialise>
     5c6:	ce 01       	movw	r24, r28
     5c8:	41 96       	adiw	r24, 0x11	; 17
     5ca:	cd dd       	rcall	.-1126   	; 0x166 <vListInitialise>
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <xQueueGenericCreate>:
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	08 2f       	mov	r16, r24
     5e4:	16 2f       	mov	r17, r22
     5e6:	f4 2e       	mov	r15, r20
     5e8:	66 23       	and	r22, r22
     5ea:	b9 f0       	breq	.+46     	; 0x61a <xQueueGenericCreate+0x42>
     5ec:	86 9f       	mul	r24, r22
     5ee:	c0 01       	movw	r24, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	81 96       	adiw	r24, 0x21	; 33
     5f4:	a8 dd       	rcall	.-1200   	; 0x146 <pvPortMalloc>
     5f6:	ec 01       	movw	r28, r24
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	41 f4       	brne	.+16     	; 0x60c <xQueueGenericCreate+0x34>
     5fc:	14 c0       	rjmp	.+40     	; 0x626 <xQueueGenericCreate+0x4e>
     5fe:	0b 8f       	std	Y+27, r16	; 0x1b
     600:	1c 8f       	std	Y+28, r17	; 0x1c
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	ce 01       	movw	r24, r28
     606:	a6 df       	rcall	.-180    	; 0x554 <xQueueGenericReset>
     608:	f8 a2       	std	Y+32, r15	; 0x20
     60a:	0d c0       	rjmp	.+26     	; 0x626 <xQueueGenericCreate+0x4e>
     60c:	81 96       	adiw	r24, 0x21	; 33
     60e:	99 83       	std	Y+1, r25	; 0x01
     610:	88 83       	st	Y, r24
     612:	f5 cf       	rjmp	.-22     	; 0x5fe <xQueueGenericCreate+0x26>
     614:	d9 83       	std	Y+1, r29	; 0x01
     616:	c8 83       	st	Y, r28
     618:	f2 cf       	rjmp	.-28     	; 0x5fe <xQueueGenericCreate+0x26>
     61a:	81 e2       	ldi	r24, 0x21	; 33
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	93 dd       	rcall	.-1242   	; 0x146 <pvPortMalloc>
     620:	ec 01       	movw	r28, r24
     622:	89 2b       	or	r24, r25
     624:	b9 f7       	brne	.-18     	; 0x614 <xQueueGenericCreate+0x3c>
     626:	ce 01       	movw	r24, r28
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	08 95       	ret

00000634 <xQueueGenericSend>:
     634:	9f 92       	push	r9
     636:	af 92       	push	r10
     638:	bf 92       	push	r11
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	00 d0       	rcall	.+0      	; 0x64c <xQueueGenericSend+0x18>
     64c:	1f 92       	push	r1
     64e:	1f 92       	push	r1
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	8c 01       	movw	r16, r24
     656:	6b 01       	movw	r12, r22
     658:	5d 83       	std	Y+5, r21	; 0x05
     65a:	4c 83       	std	Y+4, r20	; 0x04
     65c:	a2 2e       	mov	r10, r18
     65e:	b1 2c       	mov	r11, r1
     660:	99 24       	eor	r9, r9
     662:	93 94       	inc	r9
     664:	7c 01       	movw	r14, r24
     666:	88 e0       	ldi	r24, 0x08	; 8
     668:	e8 0e       	add	r14, r24
     66a:	f1 1c       	adc	r15, r1
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	0f 92       	push	r0
     672:	f8 01       	movw	r30, r16
     674:	92 8d       	ldd	r25, Z+26	; 0x1a
     676:	83 8d       	ldd	r24, Z+27	; 0x1b
     678:	98 17       	cp	r25, r24
     67a:	18 f0       	brcs	.+6      	; 0x682 <xQueueGenericSend+0x4e>
     67c:	f2 e0       	ldi	r31, 0x02	; 2
     67e:	af 12       	cpse	r10, r31
     680:	15 c0       	rjmp	.+42     	; 0x6ac <xQueueGenericSend+0x78>
     682:	4a 2d       	mov	r20, r10
     684:	b6 01       	movw	r22, r12
     686:	c8 01       	movw	r24, r16
     688:	be de       	rcall	.-644    	; 0x406 <prvCopyDataToQueue>
     68a:	f8 01       	movw	r30, r16
     68c:	91 89       	ldd	r25, Z+17	; 0x11
     68e:	99 23       	and	r25, r25
     690:	39 f0       	breq	.+14     	; 0x6a0 <xQueueGenericSend+0x6c>
     692:	c8 01       	movw	r24, r16
     694:	41 96       	adiw	r24, 0x11	; 17
     696:	e7 d2       	rcall	.+1486   	; 0xc66 <xTaskRemoveFromEventList>
     698:	88 23       	and	r24, r24
     69a:	21 f0       	breq	.+8      	; 0x6a4 <xQueueGenericSend+0x70>
     69c:	ef dd       	rcall	.-1058   	; 0x27c <vPortYield>
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <xQueueGenericSend+0x70>
     6a0:	81 11       	cpse	r24, r1
     6a2:	ec dd       	rcall	.-1064   	; 0x27c <vPortYield>
     6a4:	0f 90       	pop	r0
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	45 c0       	rjmp	.+138    	; 0x736 <xQueueGenericSend+0x102>
     6ac:	8c 81       	ldd	r24, Y+4	; 0x04
     6ae:	9d 81       	ldd	r25, Y+5	; 0x05
     6b0:	89 2b       	or	r24, r25
     6b2:	21 f4       	brne	.+8      	; 0x6bc <xQueueGenericSend+0x88>
     6b4:	0f 90       	pop	r0
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	3d c0       	rjmp	.+122    	; 0x736 <xQueueGenericSend+0x102>
     6bc:	b1 10       	cpse	r11, r1
     6be:	04 c0       	rjmp	.+8      	; 0x6c8 <xQueueGenericSend+0x94>
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	14 d3       	rcall	.+1576   	; 0xcee <vTaskInternalSetTimeOutState>
     6c6:	b9 2c       	mov	r11, r9
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	f0 d0       	rcall	.+480    	; 0x8ae <vTaskSuspendAll>
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	0f 92       	push	r0
     6d4:	f8 01       	movw	r30, r16
     6d6:	85 8d       	ldd	r24, Z+29	; 0x1d
     6d8:	8f 3f       	cpi	r24, 0xFF	; 255
     6da:	09 f4       	brne	.+2      	; 0x6de <xQueueGenericSend+0xaa>
     6dc:	15 8e       	std	Z+29, r1	; 0x1d
     6de:	f8 01       	movw	r30, r16
     6e0:	86 8d       	ldd	r24, Z+30	; 0x1e
     6e2:	8f 3f       	cpi	r24, 0xFF	; 255
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <xQueueGenericSend+0xb4>
     6e6:	16 8e       	std	Z+30, r1	; 0x1e
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	be 01       	movw	r22, r28
     6ee:	6c 5f       	subi	r22, 0xFC	; 252
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	ce 01       	movw	r24, r28
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	06 d3       	rcall	.+1548   	; 0xd04 <xTaskCheckForTimeOut>
     6f8:	81 11       	cpse	r24, r1
     6fa:	19 c0       	rjmp	.+50     	; 0x72e <xQueueGenericSend+0xfa>
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	0f 92       	push	r0
     702:	f8 01       	movw	r30, r16
     704:	92 8d       	ldd	r25, Z+26	; 0x1a
     706:	83 8d       	ldd	r24, Z+27	; 0x1b
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	98 13       	cpse	r25, r24
     70e:	0b c0       	rjmp	.+22     	; 0x726 <xQueueGenericSend+0xf2>
     710:	6c 81       	ldd	r22, Y+4	; 0x04
     712:	7d 81       	ldd	r23, Y+5	; 0x05
     714:	c7 01       	movw	r24, r14
     716:	97 d2       	rcall	.+1326   	; 0xc46 <vTaskPlaceOnEventList>
     718:	c8 01       	movw	r24, r16
     71a:	d3 de       	rcall	.-602    	; 0x4c2 <prvUnlockQueue>
     71c:	8f d1       	rcall	.+798    	; 0xa3c <xTaskResumeAll>
     71e:	81 11       	cpse	r24, r1
     720:	a5 cf       	rjmp	.-182    	; 0x66c <xQueueGenericSend+0x38>
     722:	ac dd       	rcall	.-1192   	; 0x27c <vPortYield>
     724:	a3 cf       	rjmp	.-186    	; 0x66c <xQueueGenericSend+0x38>
     726:	c8 01       	movw	r24, r16
     728:	cc de       	rcall	.-616    	; 0x4c2 <prvUnlockQueue>
     72a:	88 d1       	rcall	.+784    	; 0xa3c <xTaskResumeAll>
     72c:	9f cf       	rjmp	.-194    	; 0x66c <xQueueGenericSend+0x38>
     72e:	c8 01       	movw	r24, r16
     730:	c8 de       	rcall	.-624    	; 0x4c2 <prvUnlockQueue>
     732:	84 d1       	rcall	.+776    	; 0xa3c <xTaskResumeAll>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	bf 90       	pop	r11
     752:	af 90       	pop	r10
     754:	9f 90       	pop	r9
     756:	08 95       	ret

00000758 <xQueueGenericSendFromISR>:
    } /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	8a 01       	movw	r16, r20
    read, instead return a flag to say whether a context switch is required or
    not (i.e. has a task with a higher priority than us been woken by this
    post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     766:	fc 01       	movw	r30, r24
     768:	52 8d       	ldd	r21, Z+26	; 0x1a
     76a:	33 8d       	ldd	r19, Z+27	; 0x1b
     76c:	53 17       	cp	r21, r19
     76e:	10 f0       	brcs	.+4      	; 0x774 <xQueueGenericSendFromISR+0x1c>
     770:	22 30       	cpi	r18, 0x02	; 2
     772:	e1 f4       	brne	.+56     	; 0x7ac <xQueueGenericSendFromISR+0x54>
     774:	42 2f       	mov	r20, r18
     776:	78 01       	movw	r14, r16
     778:	ec 01       	movw	r28, r24
        {
            const int8_t cTxLock = pxQueue->cTxLock;
     77a:	1e 8d       	ldd	r17, Y+30	; 0x1e
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
            semaphore or mutex.  That means prvCopyDataToQueue() cannot result
            in a task disinheriting a priority and prvCopyDataToQueue() can be
            called here even though the disinherit function does not check if
            the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     77c:	44 de       	rcall	.-888    	; 0x406 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
            be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
     77e:	1f 3f       	cpi	r17, 0xFF	; 255
     780:	79 f4       	brne	.+30     	; 0x7a0 <xQueueGenericSendFromISR+0x48>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     782:	89 89       	ldd	r24, Y+17	; 0x11
     784:	88 23       	and	r24, r24
     786:	a1 f0       	breq	.+40     	; 0x7b0 <xQueueGenericSendFromISR+0x58>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     788:	ce 01       	movw	r24, r28
     78a:	41 96       	adiw	r24, 0x11	; 17
     78c:	6c d2       	rcall	.+1240   	; 0xc66 <xTaskRemoveFromEventList>
     78e:	88 23       	and	r24, r24
     790:	89 f0       	breq	.+34     	; 0x7b4 <xQueueGenericSendFromISR+0x5c>
                        {
                            /* The task waiting has a higher priority so record that a
                            context    switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
     792:	e1 14       	cp	r14, r1
     794:	f1 04       	cpc	r15, r1
     796:	81 f0       	breq	.+32     	; 0x7b8 <xQueueGenericSendFromISR+0x60>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	f7 01       	movw	r30, r14
     79c:	80 83       	st	Z, r24
     79e:	0d c0       	rjmp	.+26     	; 0x7ba <xQueueGenericSendFromISR+0x62>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     7a0:	ff 24       	eor	r15, r15
     7a2:	f3 94       	inc	r15
     7a4:	f1 0e       	add	r15, r17
     7a6:	fe 8e       	std	Y+30, r15	; 0x1e
            }

            xReturn = pdPASS;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	07 c0       	rjmp	.+14     	; 0x7ba <xQueueGenericSendFromISR+0x62>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <xQueueGenericSendFromISR+0x62>
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
            }

            xReturn = pdPASS;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <xQueueGenericSendFromISR+0x62>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <xQueueGenericSendFromISR+0x62>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	08 95       	ret

000007c8 <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     7c8:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <pxDelayedTaskList>
     7cc:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <pxDelayedTaskList+0x1>
     7d0:	80 81       	ld	r24, Z
     7d2:	81 11       	cpse	r24, r1
     7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <prvResetNextTaskUnblockTime+0x1c>
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	9f ef       	ldi	r25, 0xFF	; 255
     7da:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <xNextTaskUnblockTime+0x1>
     7de:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <xNextTaskUnblockTime>
     7e2:	08 95       	ret
     7e4:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <pxDelayedTaskList>
     7e8:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <pxDelayedTaskList+0x1>
     7ec:	05 80       	ldd	r0, Z+5	; 0x05
     7ee:	f6 81       	ldd	r31, Z+6	; 0x06
     7f0:	e0 2d       	mov	r30, r0
     7f2:	06 80       	ldd	r0, Z+6	; 0x06
     7f4:	f7 81       	ldd	r31, Z+7	; 0x07
     7f6:	e0 2d       	mov	r30, r0
     7f8:	82 81       	ldd	r24, Z+2	; 0x02
     7fa:	93 81       	ldd	r25, Z+3	; 0x03
     7fc:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <xNextTaskUnblockTime+0x1>
     800:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <xNextTaskUnblockTime>
     804:	08 95       	ret

00000806 <prvAddCurrentTaskToDelayedList>:
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	ec 01       	movw	r28, r24
     812:	f6 2e       	mov	r15, r22
     814:	00 91 52 02 	lds	r16, 0x0252	; 0x800252 <xTickCount>
     818:	10 91 53 02 	lds	r17, 0x0253	; 0x800253 <xTickCount+0x1>
     81c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <pxCurrentTCB>
     820:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     824:	02 96       	adiw	r24, 0x02	; 2
     826:	03 dd       	rcall	.-1530   	; 0x22e <uxListRemove>
     828:	cf 3f       	cpi	r28, 0xFF	; 255
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	d8 07       	cpc	r29, r24
     82e:	61 f4       	brne	.+24     	; 0x848 <prvAddCurrentTaskToDelayedList+0x42>
     830:	ff 20       	and	r15, r15
     832:	51 f0       	breq	.+20     	; 0x848 <prvAddCurrentTaskToDelayedList+0x42>
     834:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <pxCurrentTCB>
     838:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     83c:	6e 5f       	subi	r22, 0xFE	; 254
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	85 e5       	ldi	r24, 0x55	; 85
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	a2 dc       	rcall	.-1724   	; 0x18a <vListInsertEnd>
     846:	2d c0       	rjmp	.+90     	; 0x8a2 <prvAddCurrentTaskToDelayedList+0x9c>
     848:	c0 0f       	add	r28, r16
     84a:	d1 1f       	adc	r29, r17
     84c:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     850:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     854:	d3 83       	std	Z+3, r29	; 0x03
     856:	c2 83       	std	Z+2, r28	; 0x02
     858:	c0 17       	cp	r28, r16
     85a:	d1 07       	cpc	r29, r17
     85c:	60 f4       	brcc	.+24     	; 0x876 <prvAddCurrentTaskToDelayedList+0x70>
     85e:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <pxCurrentTCB>
     862:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     866:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <pxOverflowDelayedTaskList>
     86a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <pxOverflowDelayedTaskList+0x1>
     86e:	6e 5f       	subi	r22, 0xFE	; 254
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	ac dc       	rcall	.-1704   	; 0x1cc <vListInsert>
     874:	16 c0       	rjmp	.+44     	; 0x8a2 <prvAddCurrentTaskToDelayedList+0x9c>
     876:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <pxCurrentTCB>
     87a:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     87e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pxDelayedTaskList>
     882:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <pxDelayedTaskList+0x1>
     886:	6e 5f       	subi	r22, 0xFE	; 254
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	a0 dc       	rcall	.-1728   	; 0x1cc <vListInsert>
     88c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <xNextTaskUnblockTime>
     890:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <xNextTaskUnblockTime+0x1>
     894:	c8 17       	cp	r28, r24
     896:	d9 07       	cpc	r29, r25
     898:	20 f4       	brcc	.+8      	; 0x8a2 <prvAddCurrentTaskToDelayedList+0x9c>
     89a:	d0 93 4c 02 	sts	0x024C, r29	; 0x80024c <xNextTaskUnblockTime+0x1>
     89e:	c0 93 4b 02 	sts	0x024B, r28	; 0x80024b <xNextTaskUnblockTime>
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	08 95       	ret

000008ae <vTaskSuspendAll>:
     8ae:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     8b2:	8f 5f       	subi	r24, 0xFF	; 255
     8b4:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__data_end>
     8b8:	08 95       	ret

000008ba <xTaskGetTickCount>:
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	0f 92       	push	r0
     8c0:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <xTickCount>
     8c4:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <xTickCount+0x1>
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	08 95       	ret

000008ce <xTaskIncrementTick>:
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     8e2:	81 11       	cpse	r24, r1
     8e4:	95 c0       	rjmp	.+298    	; 0xa10 <xTaskIncrementTick+0x142>
     8e6:	e0 90 52 02 	lds	r14, 0x0252	; 0x800252 <xTickCount>
     8ea:	f0 90 53 02 	lds	r15, 0x0253	; 0x800253 <xTickCount+0x1>
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	e8 1a       	sub	r14, r24
     8f2:	f8 0a       	sbc	r15, r24
     8f4:	f0 92 53 02 	sts	0x0253, r15	; 0x800253 <xTickCount+0x1>
     8f8:	e0 92 52 02 	sts	0x0252, r14	; 0x800252 <xTickCount>
     8fc:	e1 14       	cp	r14, r1
     8fe:	f1 04       	cpc	r15, r1
     900:	b1 f4       	brne	.+44     	; 0x92e <xTaskIncrementTick+0x60>
     902:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pxDelayedTaskList>
     906:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <pxDelayedTaskList+0x1>
     90a:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <pxOverflowDelayedTaskList>
     90e:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <pxOverflowDelayedTaskList+0x1>
     912:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <pxDelayedTaskList+0x1>
     916:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <pxDelayedTaskList>
     91a:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <pxOverflowDelayedTaskList+0x1>
     91e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <pxOverflowDelayedTaskList>
     922:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <xNumOfOverflows>
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <xNumOfOverflows>
     92c:	4d df       	rcall	.-358    	; 0x7c8 <prvResetNextTaskUnblockTime>
     92e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <xNextTaskUnblockTime>
     932:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <xNextTaskUnblockTime+0x1>
     936:	e8 16       	cp	r14, r24
     938:	f9 06       	cpc	r15, r25
     93a:	10 f4       	brcc	.+4      	; 0x940 <xTaskIncrementTick+0x72>
     93c:	d1 2c       	mov	r13, r1
     93e:	50 c0       	rjmp	.+160    	; 0x9e0 <xTaskIncrementTick+0x112>
     940:	d1 2c       	mov	r13, r1
     942:	cc 24       	eor	r12, r12
     944:	c3 94       	inc	r12
     946:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <pxDelayedTaskList>
     94a:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <pxDelayedTaskList+0x1>
     94e:	80 81       	ld	r24, Z
     950:	81 11       	cpse	r24, r1
     952:	07 c0       	rjmp	.+14     	; 0x962 <xTaskIncrementTick+0x94>
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	9f ef       	ldi	r25, 0xFF	; 255
     958:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <xNextTaskUnblockTime+0x1>
     95c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <xNextTaskUnblockTime>
     960:	3f c0       	rjmp	.+126    	; 0x9e0 <xTaskIncrementTick+0x112>
     962:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <pxDelayedTaskList>
     966:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <pxDelayedTaskList+0x1>
     96a:	05 80       	ldd	r0, Z+5	; 0x05
     96c:	f6 81       	ldd	r31, Z+6	; 0x06
     96e:	e0 2d       	mov	r30, r0
     970:	c6 81       	ldd	r28, Z+6	; 0x06
     972:	d7 81       	ldd	r29, Z+7	; 0x07
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	9b 81       	ldd	r25, Y+3	; 0x03
     978:	e8 16       	cp	r14, r24
     97a:	f9 06       	cpc	r15, r25
     97c:	28 f4       	brcc	.+10     	; 0x988 <xTaskIncrementTick+0xba>
     97e:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <xNextTaskUnblockTime+0x1>
     982:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <xNextTaskUnblockTime>
     986:	2c c0       	rjmp	.+88     	; 0x9e0 <xTaskIncrementTick+0x112>
     988:	8e 01       	movw	r16, r28
     98a:	0e 5f       	subi	r16, 0xFE	; 254
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	c8 01       	movw	r24, r16
     990:	4e dc       	rcall	.-1892   	; 0x22e <uxListRemove>
     992:	8c 89       	ldd	r24, Y+20	; 0x14
     994:	9d 89       	ldd	r25, Y+21	; 0x15
     996:	89 2b       	or	r24, r25
     998:	19 f0       	breq	.+6      	; 0x9a0 <xTaskIncrementTick+0xd2>
     99a:	ce 01       	movw	r24, r28
     99c:	0c 96       	adiw	r24, 0x0c	; 12
     99e:	47 dc       	rcall	.-1906   	; 0x22e <uxListRemove>
     9a0:	8e 89       	ldd	r24, Y+22	; 0x16
     9a2:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <uxTopReadyPriority>
     9a6:	98 17       	cp	r25, r24
     9a8:	10 f4       	brcc	.+4      	; 0x9ae <xTaskIncrementTick+0xe0>
     9aa:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <uxTopReadyPriority>
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	9c 01       	movw	r18, r24
     9b2:	22 0f       	add	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	82 0f       	add	r24, r18
     9c0:	93 1f       	adc	r25, r19
     9c2:	b8 01       	movw	r22, r16
     9c4:	85 59       	subi	r24, 0x95	; 149
     9c6:	9d 4f       	sbci	r25, 0xFD	; 253
     9c8:	e0 db       	rcall	.-2112   	; 0x18a <vListInsertEnd>
     9ca:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     9ce:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     9d2:	9e 89       	ldd	r25, Y+22	; 0x16
     9d4:	86 89       	ldd	r24, Z+22	; 0x16
     9d6:	98 17       	cp	r25, r24
     9d8:	08 f4       	brcc	.+2      	; 0x9dc <xTaskIncrementTick+0x10e>
     9da:	b5 cf       	rjmp	.-150    	; 0x946 <xTaskIncrementTick+0x78>
     9dc:	dc 2c       	mov	r13, r12
     9de:	b3 cf       	rjmp	.-154    	; 0x946 <xTaskIncrementTick+0x78>
     9e0:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     9e4:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     9e8:	86 89       	ldd	r24, Z+22	; 0x16
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	ee 0f       	add	r30, r30
     9f4:	ff 1f       	adc	r31, r31
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	8e 0f       	add	r24, r30
     9fc:	9f 1f       	adc	r25, r31
     9fe:	fc 01       	movw	r30, r24
     a00:	e5 59       	subi	r30, 0x95	; 149
     a02:	fd 4f       	sbci	r31, 0xFD	; 253
     a04:	80 81       	ld	r24, Z
     a06:	82 30       	cpi	r24, 0x02	; 2
     a08:	48 f0       	brcs	.+18     	; 0xa1c <xTaskIncrementTick+0x14e>
     a0a:	dd 24       	eor	r13, r13
     a0c:	d3 94       	inc	r13
     a0e:	06 c0       	rjmp	.+12     	; 0xa1c <xTaskIncrementTick+0x14e>
     a10:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <uxPendedTicks>
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <uxPendedTicks>
     a1a:	d1 2c       	mov	r13, r1
     a1c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <xYieldPending>
     a20:	88 23       	and	r24, r24
     a22:	11 f0       	breq	.+4      	; 0xa28 <xTaskIncrementTick+0x15a>
     a24:	dd 24       	eor	r13, r13
     a26:	d3 94       	inc	r13
     a28:	8d 2d       	mov	r24, r13
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	08 95       	ret

00000a3c <xTaskResumeAll>:
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	0f 92       	push	r0
     a50:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     a54:	81 50       	subi	r24, 0x01	; 1
     a56:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__data_end>
     a5a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     a5e:	81 11       	cpse	r24, r1
     a60:	59 c0       	rjmp	.+178    	; 0xb14 <xTaskResumeAll+0xd8>
     a62:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <uxCurrentNumberOfTasks>
     a66:	81 11       	cpse	r24, r1
     a68:	30 c0       	rjmp	.+96     	; 0xaca <xTaskResumeAll+0x8e>
     a6a:	57 c0       	rjmp	.+174    	; 0xb1a <xTaskResumeAll+0xde>
     a6c:	d7 01       	movw	r26, r14
     a6e:	15 96       	adiw	r26, 0x05	; 5
     a70:	ed 91       	ld	r30, X+
     a72:	fc 91       	ld	r31, X
     a74:	16 97       	sbiw	r26, 0x06	; 6
     a76:	c6 81       	ldd	r28, Z+6	; 0x06
     a78:	d7 81       	ldd	r29, Z+7	; 0x07
     a7a:	ce 01       	movw	r24, r28
     a7c:	0c 96       	adiw	r24, 0x0c	; 12
     a7e:	d7 db       	rcall	.-2130   	; 0x22e <uxListRemove>
     a80:	8e 01       	movw	r16, r28
     a82:	0e 5f       	subi	r16, 0xFE	; 254
     a84:	1f 4f       	sbci	r17, 0xFF	; 255
     a86:	c8 01       	movw	r24, r16
     a88:	d2 db       	rcall	.-2140   	; 0x22e <uxListRemove>
     a8a:	8e 89       	ldd	r24, Y+22	; 0x16
     a8c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <uxTopReadyPriority>
     a90:	98 17       	cp	r25, r24
     a92:	10 f4       	brcc	.+4      	; 0xa98 <xTaskResumeAll+0x5c>
     a94:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <uxTopReadyPriority>
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	9c 01       	movw	r18, r24
     a9c:	22 0f       	add	r18, r18
     a9e:	33 1f       	adc	r19, r19
     aa0:	22 0f       	add	r18, r18
     aa2:	33 1f       	adc	r19, r19
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	82 0f       	add	r24, r18
     aaa:	93 1f       	adc	r25, r19
     aac:	b8 01       	movw	r22, r16
     aae:	85 59       	subi	r24, 0x95	; 149
     ab0:	9d 4f       	sbci	r25, 0xFD	; 253
     ab2:	6b db       	rcall	.-2346   	; 0x18a <vListInsertEnd>
     ab4:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     ab8:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     abc:	9e 89       	ldd	r25, Y+22	; 0x16
     abe:	86 89       	ldd	r24, Z+22	; 0x16
     ac0:	98 17       	cp	r25, r24
     ac2:	68 f0       	brcs	.+26     	; 0xade <xTaskResumeAll+0xa2>
     ac4:	d0 92 4e 02 	sts	0x024E, r13	; 0x80024e <xYieldPending>
     ac8:	0a c0       	rjmp	.+20     	; 0xade <xTaskResumeAll+0xa2>
     aca:	c0 e0       	ldi	r28, 0x00	; 0
     acc:	d0 e0       	ldi	r29, 0x00	; 0
     ace:	0f 2e       	mov	r0, r31
     ad0:	fe e5       	ldi	r31, 0x5E	; 94
     ad2:	ef 2e       	mov	r14, r31
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	ff 2e       	mov	r15, r31
     ad8:	f0 2d       	mov	r31, r0
     ada:	dd 24       	eor	r13, r13
     adc:	d3 94       	inc	r13
     ade:	f7 01       	movw	r30, r14
     ae0:	80 81       	ld	r24, Z
     ae2:	81 11       	cpse	r24, r1
     ae4:	c3 cf       	rjmp	.-122    	; 0xa6c <xTaskResumeAll+0x30>
     ae6:	cd 2b       	or	r28, r29
     ae8:	09 f0       	breq	.+2      	; 0xaec <xTaskResumeAll+0xb0>
     aea:	6e de       	rcall	.-804    	; 0x7c8 <prvResetNextTaskUnblockTime>
     aec:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <uxPendedTicks>
     af0:	cc 23       	and	r28, r28
     af2:	49 f0       	breq	.+18     	; 0xb06 <xTaskResumeAll+0xca>
     af4:	d1 e0       	ldi	r29, 0x01	; 1
     af6:	eb de       	rcall	.-554    	; 0x8ce <xTaskIncrementTick>
     af8:	81 11       	cpse	r24, r1
     afa:	d0 93 4e 02 	sts	0x024E, r29	; 0x80024e <xYieldPending>
     afe:	c1 50       	subi	r28, 0x01	; 1
     b00:	d1 f7       	brne	.-12     	; 0xaf6 <xTaskResumeAll+0xba>
     b02:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <uxPendedTicks>
     b06:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <xYieldPending>
     b0a:	88 23       	and	r24, r24
     b0c:	29 f0       	breq	.+10     	; 0xb18 <xTaskResumeAll+0xdc>
     b0e:	b6 db       	rcall	.-2196   	; 0x27c <vPortYield>
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <xTaskResumeAll+0xde>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <xTaskResumeAll+0xde>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	08 95       	ret

00000b2e <vTaskSwitchContext>:
     b2e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     b32:	88 23       	and	r24, r24
     b34:	21 f0       	breq	.+8      	; 0xb3e <vTaskSwitchContext+0x10>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <xYieldPending>
     b3c:	08 95       	ret
     b3e:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <xYieldPending>
     b42:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     b46:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     b4a:	85 a1       	ldd	r24, Z+37	; 0x25
     b4c:	f6 da       	rcall	.-2580   	; 0x13a <task_switch_out>
     b4e:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <pxCurrentTCB>
     b52:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     b56:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     b5a:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     b5e:	2d 91       	ld	r18, X+
     b60:	3c 91       	ld	r19, X
     b62:	87 89       	ldd	r24, Z+23	; 0x17
     b64:	90 8d       	ldd	r25, Z+24	; 0x18
     b66:	82 17       	cp	r24, r18
     b68:	93 07       	cpc	r25, r19
     b6a:	58 f0       	brcs	.+22     	; 0xb82 <vTaskSwitchContext+0x54>
     b6c:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <pxCurrentTCB>
     b70:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     b74:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <pxCurrentTCB>
     b78:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     b7c:	67 5e       	subi	r22, 0xE7	; 231
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	f1 d1       	rcall	.+994    	; 0xf64 <vApplicationStackOverflowHook>
     b82:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <uxTopReadyPriority>
     b86:	82 2f       	mov	r24, r18
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	e8 0f       	add	r30, r24
     b9a:	f9 1f       	adc	r31, r25
     b9c:	e5 59       	subi	r30, 0x95	; 149
     b9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ba0:	30 81       	ld	r19, Z
     ba2:	31 11       	cpse	r19, r1
     ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <vTaskSwitchContext+0x9a>
     ba6:	21 50       	subi	r18, 0x01	; 1
     ba8:	82 2f       	mov	r24, r18
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	fc 01       	movw	r30, r24
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	e8 0f       	add	r30, r24
     bbc:	f9 1f       	adc	r31, r25
     bbe:	e5 59       	subi	r30, 0x95	; 149
     bc0:	fd 4f       	sbci	r31, 0xFD	; 253
     bc2:	30 81       	ld	r19, Z
     bc4:	33 23       	and	r19, r19
     bc6:	79 f3       	breq	.-34     	; 0xba6 <vTaskSwitchContext+0x78>
     bc8:	ac 01       	movw	r20, r24
     bca:	44 0f       	add	r20, r20
     bcc:	55 1f       	adc	r21, r21
     bce:	44 0f       	add	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	48 0f       	add	r20, r24
     bd8:	59 1f       	adc	r21, r25
     bda:	da 01       	movw	r26, r20
     bdc:	a5 59       	subi	r26, 0x95	; 149
     bde:	bd 4f       	sbci	r27, 0xFD	; 253
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X
     be6:	12 97       	sbiw	r26, 0x02	; 2
     be8:	02 80       	ldd	r0, Z+2	; 0x02
     bea:	f3 81       	ldd	r31, Z+3	; 0x03
     bec:	e0 2d       	mov	r30, r0
     bee:	12 96       	adiw	r26, 0x02	; 2
     bf0:	fc 93       	st	X, r31
     bf2:	ee 93       	st	-X, r30
     bf4:	11 97       	sbiw	r26, 0x01	; 1
     bf6:	42 59       	subi	r20, 0x92	; 146
     bf8:	5d 4f       	sbci	r21, 0xFD	; 253
     bfa:	e4 17       	cp	r30, r20
     bfc:	f5 07       	cpc	r31, r21
     bfe:	29 f4       	brne	.+10     	; 0xc0a <vTaskSwitchContext+0xdc>
     c00:	42 81       	ldd	r20, Z+2	; 0x02
     c02:	53 81       	ldd	r21, Z+3	; 0x03
     c04:	fd 01       	movw	r30, r26
     c06:	52 83       	std	Z+2, r21	; 0x02
     c08:	41 83       	std	Z+1, r20	; 0x01
     c0a:	fc 01       	movw	r30, r24
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	8e 0f       	add	r24, r30
     c1a:	9f 1f       	adc	r25, r31
     c1c:	fc 01       	movw	r30, r24
     c1e:	e5 59       	subi	r30, 0x95	; 149
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	01 80       	ldd	r0, Z+1	; 0x01
     c24:	f2 81       	ldd	r31, Z+2	; 0x02
     c26:	e0 2d       	mov	r30, r0
     c28:	86 81       	ldd	r24, Z+6	; 0x06
     c2a:	97 81       	ldd	r25, Z+7	; 0x07
     c2c:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <pxCurrentTCB+0x1>
     c30:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <pxCurrentTCB>
     c34:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <uxTopReadyPriority>
     c38:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     c3c:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     c40:	85 a1       	ldd	r24, Z+37	; 0x25
     c42:	71 ca       	rjmp	.-2846   	; 0x126 <task_switch_in>
     c44:	08 95       	ret

00000c46 <vTaskPlaceOnEventList>:
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	eb 01       	movw	r28, r22
     c4c:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <pxCurrentTCB>
     c50:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     c54:	64 5f       	subi	r22, 0xF4	; 244
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	b9 da       	rcall	.-2702   	; 0x1cc <vListInsert>
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	ce 01       	movw	r24, r28
     c5e:	d3 dd       	rcall	.-1114   	; 0x806 <prvAddCurrentTaskToDelayedList>
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <xTaskRemoveFromEventList>:
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	dc 01       	movw	r26, r24
     c70:	15 96       	adiw	r26, 0x05	; 5
     c72:	ed 91       	ld	r30, X+
     c74:	fc 91       	ld	r31, X
     c76:	16 97       	sbiw	r26, 0x06	; 6
     c78:	c6 81       	ldd	r28, Z+6	; 0x06
     c7a:	d7 81       	ldd	r29, Z+7	; 0x07
     c7c:	8e 01       	movw	r16, r28
     c7e:	04 5f       	subi	r16, 0xF4	; 244
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
     c82:	c8 01       	movw	r24, r16
     c84:	d4 da       	rcall	.-2648   	; 0x22e <uxListRemove>
     c86:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     c8a:	81 11       	cpse	r24, r1
     c8c:	1a c0       	rjmp	.+52     	; 0xcc2 <xTaskRemoveFromEventList+0x5c>
     c8e:	0a 50       	subi	r16, 0x0A	; 10
     c90:	11 09       	sbc	r17, r1
     c92:	c8 01       	movw	r24, r16
     c94:	cc da       	rcall	.-2664   	; 0x22e <uxListRemove>
     c96:	8e 89       	ldd	r24, Y+22	; 0x16
     c98:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <uxTopReadyPriority>
     c9c:	98 17       	cp	r25, r24
     c9e:	10 f4       	brcc	.+4      	; 0xca4 <xTaskRemoveFromEventList+0x3e>
     ca0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <uxTopReadyPriority>
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9c 01       	movw	r18, r24
     ca8:	22 0f       	add	r18, r18
     caa:	33 1f       	adc	r19, r19
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	22 0f       	add	r18, r18
     cb2:	33 1f       	adc	r19, r19
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	b8 01       	movw	r22, r16
     cba:	85 59       	subi	r24, 0x95	; 149
     cbc:	9d 4f       	sbci	r25, 0xFD	; 253
     cbe:	65 da       	rcall	.-2870   	; 0x18a <vListInsertEnd>
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <xTaskRemoveFromEventList+0x64>
     cc2:	b8 01       	movw	r22, r16
     cc4:	8e e5       	ldi	r24, 0x5E	; 94
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	60 da       	rcall	.-2880   	; 0x18a <vListInsertEnd>
     cca:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxCurrentTCB>
     cce:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxCurrentTCB+0x1>
     cd2:	9e 89       	ldd	r25, Y+22	; 0x16
     cd4:	86 89       	ldd	r24, Z+22	; 0x16
     cd6:	89 17       	cp	r24, r25
     cd8:	20 f4       	brcc	.+8      	; 0xce2 <xTaskRemoveFromEventList+0x7c>
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <xYieldPending>
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <xTaskRemoveFromEventList+0x7e>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	08 95       	ret

00000cee <vTaskInternalSetTimeOutState>:
     cee:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <xNumOfOverflows>
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
     cf6:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <xTickCount>
     cfa:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <xTickCount+0x1>
     cfe:	32 83       	std	Z+2, r19	; 0x02
     d00:	21 83       	std	Z+1, r18	; 0x01
     d02:	08 95       	ret

00000d04 <xTaskCheckForTimeOut>:
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	0f 92       	push	r0
     d0e:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <xTickCount>
     d12:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <xTickCount+0x1>
     d16:	db 01       	movw	r26, r22
     d18:	4d 91       	ld	r20, X+
     d1a:	5c 91       	ld	r21, X
     d1c:	4f 3f       	cpi	r20, 0xFF	; 255
     d1e:	bf ef       	ldi	r27, 0xFF	; 255
     d20:	5b 07       	cpc	r21, r27
     d22:	e9 f0       	breq	.+58     	; 0xd5e <xTaskCheckForTimeOut+0x5a>
     d24:	ec 01       	movw	r28, r24
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	a0 91 4d 02 	lds	r26, 0x024D	; 0x80024d <xNumOfOverflows>
     d2e:	b8 81       	ld	r27, Y
     d30:	ba 17       	cp	r27, r26
     d32:	19 f0       	breq	.+6      	; 0xd3a <xTaskCheckForTimeOut+0x36>
     d34:	2e 17       	cp	r18, r30
     d36:	3f 07       	cpc	r19, r31
     d38:	a0 f4       	brcc	.+40     	; 0xd62 <xTaskCheckForTimeOut+0x5e>
     d3a:	2e 1b       	sub	r18, r30
     d3c:	3f 0b       	sbc	r19, r31
     d3e:	24 17       	cp	r18, r20
     d40:	35 07       	cpc	r19, r21
     d42:	40 f4       	brcc	.+16     	; 0xd54 <xTaskCheckForTimeOut+0x50>
     d44:	fb 01       	movw	r30, r22
     d46:	42 1b       	sub	r20, r18
     d48:	53 0b       	sbc	r21, r19
     d4a:	51 83       	std	Z+1, r21	; 0x01
     d4c:	40 83       	st	Z, r20
     d4e:	cf df       	rcall	.-98     	; 0xcee <vTaskInternalSetTimeOutState>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <xTaskCheckForTimeOut+0x60>
     d54:	fb 01       	movw	r30, r22
     d56:	11 82       	std	Z+1, r1	; 0x01
     d58:	10 82       	st	Z, r1
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <xTaskCheckForTimeOut+0x60>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <xTaskCheckForTimeOut+0x60>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	08 95       	ret

00000d6e <vTaskMissedYield>:
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <xYieldPending>
     d74:	08 95       	ret

00000d76 <xTaskGetSchedulerState>:
     d76:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <xSchedulerRunning>
     d7a:	88 23       	and	r24, r24
     d7c:	31 f0       	breq	.+12     	; 0xd8a <xTaskGetSchedulerState+0x14>
     d7e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     d82:	88 23       	and	r24, r24
     d84:	21 f0       	breq	.+8      	; 0xd8e <xTaskGetSchedulerState+0x18>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	08 95       	ret
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	08 95       	ret
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	08 95       	ret

00000d92 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
     d9c:	89 2b       	or	r24, r25
     d9e:	69 f1       	breq	.+90     	; 0xdfa <xTaskPriorityDisinherit+0x68>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
     da0:	84 a1       	ldd	r24, Z+36	; 0x24
     da2:	81 50       	subi	r24, 0x01	; 1
     da4:	84 a3       	std	Z+36, r24	; 0x24

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
     da6:	26 89       	ldd	r18, Z+22	; 0x16
     da8:	93 a1       	ldd	r25, Z+35	; 0x23
     daa:	29 17       	cp	r18, r25
     dac:	41 f1       	breq	.+80     	; 0xdfe <xTaskPriorityDisinherit+0x6c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
     dae:	81 11       	cpse	r24, r1
     db0:	28 c0       	rjmp	.+80     	; 0xe02 <xTaskPriorityDisinherit+0x70>
     db2:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     db4:	8f 01       	movw	r16, r30
     db6:	0e 5f       	subi	r16, 0xFE	; 254
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	c8 01       	movw	r24, r16
     dbc:	38 da       	rcall	.-2960   	; 0x22e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
     dbe:	8b a1       	ldd	r24, Y+35	; 0x23
     dc0:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     dc2:	24 e0       	ldi	r18, 0x04	; 4
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	28 1b       	sub	r18, r24
     dc8:	31 09       	sbc	r19, r1
     dca:	3d 87       	std	Y+13, r19	; 0x0d
     dcc:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
     dce:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <uxTopReadyPriority>
     dd2:	98 17       	cp	r25, r24
     dd4:	10 f4       	brcc	.+4      	; 0xdda <xTaskPriorityDisinherit+0x48>
     dd6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <uxTopReadyPriority>
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 01       	movw	r18, r24
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	82 0f       	add	r24, r18
     dec:	93 1f       	adc	r25, r19
     dee:	b8 01       	movw	r22, r16
     df0:	85 59       	subi	r24, 0x95	; 149
     df2:	9d 4f       	sbci	r25, 0xFD	; 253
     df4:	ca d9       	rcall	.-3180   	; 0x18a <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <xTaskPriorityDisinherit+0x72>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <xTaskPriorityDisinherit+0x72>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <xTaskPriorityDisinherit+0x72>
     e02:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <prvCheckForValidListAndQueue>:
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	0f 92       	push	r0
     e14:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <xTimerQueue>
     e18:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <xTimerQueue+0x1>
     e1c:	89 2b       	or	r24, r25
     e1e:	d1 f4       	brne	.+52     	; 0xe54 <prvCheckForValidListAndQueue+0x46>
     e20:	80 ea       	ldi	r24, 0xA0	; 160
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	a0 d9       	rcall	.-3264   	; 0x166 <vListInitialise>
     e26:	87 e9       	ldi	r24, 0x97	; 151
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	9d d9       	rcall	.-3270   	; 0x166 <vListInitialise>
     e2c:	80 ea       	ldi	r24, 0xA0	; 160
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <pxCurrentTimerList+0x1>
     e34:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <pxCurrentTimerList>
     e38:	87 e9       	ldi	r24, 0x97	; 151
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <pxOverflowTimerList+0x1>
     e40:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <pxOverflowTimerList>
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	65 e0       	ldi	r22, 0x05	; 5
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	c6 db       	rcall	.-2164   	; 0x5d8 <xQueueGenericCreate>
     e4c:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <xTimerQueue+0x1>
     e50:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <xTimerQueue>
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	08 95       	ret

00000e5a <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	4c 01       	movw	r8, r24
     e72:	5b 01       	movw	r10, r22
     e74:	f4 2e       	mov	r15, r20
     e76:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
     e78:	84 e1       	ldi	r24, 0x14	; 20
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	64 d9       	rcall	.-3384   	; 0x146 <pvPortMalloc>
     e7e:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
     e80:	89 2b       	or	r24, r25
     e82:	91 f0       	breq	.+36     	; 0xea8 <xTimerCreate+0x4e>

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
     e84:	1b 8a       	std	Y+19, r1	; 0x13
     e86:	c3 df       	rcall	.-122    	; 0xe0e <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
     e88:	99 82       	std	Y+1, r9	; 0x01
     e8a:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
     e8c:	bd 86       	std	Y+13, r11	; 0x0d
     e8e:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
     e90:	df 86       	std	Y+15, r13	; 0x0f
     e92:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
     e94:	19 8b       	std	Y+17, r17	; 0x11
     e96:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
     e98:	ce 01       	movw	r24, r28
     e9a:	02 96       	adiw	r24, 0x02	; 2
     e9c:	72 d9       	rcall	.-3356   	; 0x182 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
     e9e:	ff 20       	and	r15, r15
     ea0:	19 f0       	breq	.+6      	; 0xea8 <xTimerCreate+0x4e>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	84 60       	ori	r24, 0x04	; 4
     ea6:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     ea8:	ce 01       	movw	r24, r28
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	08 95       	ret

00000ec2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <xTimerGenericCommand+0xa>
     ecc:	1f 92       	push	r1
     ece:	1f 92       	push	r1
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
     ed4:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <xTimerQueue>
     ed8:	f0 91 92 02 	lds	r31, 0x0292	; 0x800292 <xTimerQueue+0x1>
     edc:	30 97       	sbiw	r30, 0x00	; 0
     ede:	51 f1       	breq	.+84     	; 0xf34 <xTimerGenericCommand+0x72>
     ee0:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
     ee2:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
     ee4:	5b 83       	std	Y+3, r21	; 0x03
     ee6:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
     ee8:	9d 83       	std	Y+5, r25	; 0x05
     eea:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
     eec:	66 30       	cpi	r22, 0x06	; 6
     eee:	d4 f4       	brge	.+52     	; 0xf24 <xTimerGenericCommand+0x62>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
     ef0:	42 df       	rcall	.-380    	; 0xd76 <xTaskGetSchedulerState>
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	59 f4       	brne	.+22     	; 0xf0c <xTimerGenericCommand+0x4a>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	a8 01       	movw	r20, r16
     efa:	be 01       	movw	r22, r28
     efc:	6f 5f       	subi	r22, 0xFF	; 255
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <xTimerQueue>
     f04:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <xTimerQueue+0x1>
     f08:	95 db       	rcall	.-2262   	; 0x634 <xQueueGenericSend>
     f0a:	15 c0       	rjmp	.+42     	; 0xf36 <xTimerGenericCommand+0x74>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	be 01       	movw	r22, r28
     f14:	6f 5f       	subi	r22, 0xFF	; 255
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <xTimerQueue>
     f1c:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <xTimerQueue+0x1>
     f20:	89 db       	rcall	.-2286   	; 0x634 <xQueueGenericSend>
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <xTimerGenericCommand+0x74>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	ad 01       	movw	r20, r26
     f28:	be 01       	movw	r22, r28
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	cf 01       	movw	r24, r30
     f30:	13 dc       	rcall	.-2010   	; 0x758 <xQueueGenericSendFromISR>
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
     f34:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
     f4a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     f4c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f4e:	2f ef       	ldi	r18, 0xFF	; 255
     f50:	80 e7       	ldi	r24, 0x70	; 112
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	21 50       	subi	r18, 0x01	; 1
     f56:	80 40       	sbci	r24, 0x00	; 0
     f58:	90 40       	sbci	r25, 0x00	; 0
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <vApplicationMallocFailedHook+0xa>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <vApplicationMallocFailedHook+0x14>
     f5e:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     f60:	1f 9a       	sbi	0x03, 7	; 3
     f62:	f5 cf       	rjmp	.-22     	; 0xf4e <vApplicationMallocFailedHook+0x4>

00000f64 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
     f64:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     f66:	2f 9a       	sbi	0x05, 7	; 5
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	87 ea       	ldi	r24, 0xA7	; 167
     f6c:	91 e6       	ldi	r25, 0x61	; 97
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	80 40       	sbci	r24, 0x00	; 0
     f72:	90 40       	sbci	r25, 0x00	; 0
     f74:	e1 f7       	brne	.-8      	; 0xf6e <vApplicationStackOverflowHook+0xa>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <vApplicationStackOverflowHook+0x14>
     f78:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
     f7a:	1f 9a       	sbi	0x03, 7	; 3
     f7c:	f5 cf       	rjmp	.-22     	; 0xf68 <vApplicationStackOverflowHook+0x4>

00000f7e <my_co2_call_back>:
	while (1)
	{
		rc = mh_z19_take_meassuring();
		if (rc != MHZ19_OK)
		{
			printf("Something went wrong");
     f7e:	9f 93       	push	r25
     f80:	8f 93       	push	r24
     f82:	8c e1       	ldi	r24, 0x1C	; 28
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	9f 93       	push	r25
     f88:	8f 93       	push	r24
     f8a:	7b d7       	rcall	.+3830   	; 0x1e82 <printf>
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	08 95       	ret

00000f96 <main>:
	}
}

int main(void)
{
	stdioCreate(0);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	3e d0       	rcall	.+124    	; 0x1016 <stdioCreate>
	sei();
     f9a:	78 94       	sei
	mh_z19_create(ser_USART3, my_co2_call_back); 
     f9c:	6f eb       	ldi	r22, 0xBF	; 191
     f9e:	77 e0       	ldi	r23, 0x07	; 7
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	08 d4       	rcall	.+2064   	; 0x17b4 <mh_z19_create>
	
	xTimer = xTimerCreate("CO2 Timer",
     fa4:	0f eb       	ldi	r16, 0xBF	; 191
     fa6:	17 e0       	ldi	r17, 0x07	; 7
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	6e e3       	ldi	r22, 0x3E	; 62
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	80 e4       	ldi	r24, 0x40	; 64
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	51 df       	rcall	.-350    	; 0xe5a <xTimerCreate>
     fb8:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <xTimer+0x1>
     fbc:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <xTimer>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*)0,
			my_co2_call_back);
	
	xTimerStart(xTimer,0);
     fc0:	7c dc       	rcall	.-1800   	; 0x8ba <xTaskGetTickCount>
     fc2:	00 e0       	ldi	r16, 0x00	; 0
     fc4:	10 e0       	ldi	r17, 0x00	; 0
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	ac 01       	movw	r20, r24
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <xTimer>
     fd2:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <xTimer+0x1>
     fd6:	75 df       	rcall	.-278    	; 0xec2 <xTimerGenericCommand>
     fd8:	ff cf       	rjmp	.-2      	; 0xfd8 <main+0x42>

00000fda <usart_getchar>:
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	1f 92       	push	r1
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_com_serial_instance>
     fee:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <_com_serial_instance+0x1>
     ff2:	f5 d0       	rcall	.+490    	; 0x11de <serial_get_byte>
     ff4:	81 11       	cpse	r24, r1
     ff6:	f6 cf       	rjmp	.-20     	; 0xfe4 <usart_getchar+0xa>
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0f 90       	pop	r0
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <usart_putchar>:
    1004:	68 2f       	mov	r22, r24
    1006:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_com_serial_instance>
    100a:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <_com_serial_instance+0x1>
    100e:	c2 d0       	rcall	.+388    	; 0x1194 <serial_send_byte>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	08 95       	ret

00001016 <stdioCreate>:
    1016:	8f 92       	push	r8
    1018:	9f 92       	push	r9
    101a:	af 92       	push	r10
    101c:	cf 92       	push	r12
    101e:	ef 92       	push	r14
    1020:	0f 93       	push	r16
    1022:	81 2c       	mov	r8, r1
    1024:	91 2c       	mov	r9, r1
    1026:	68 94       	set
    1028:	aa 24       	eor	r10, r10
    102a:	a7 f8       	bld	r10, 7
    102c:	68 94       	set
    102e:	cc 24       	eor	r12, r12
    1030:	c7 f8       	bld	r12, 7
    1032:	e1 2c       	mov	r14, r1
    1034:	00 e0       	ldi	r16, 0x00	; 0
    1036:	23 e0       	ldi	r18, 0x03	; 3
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	51 ee       	ldi	r21, 0xE1	; 225
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	13 d0       	rcall	.+38     	; 0x1068 <serial_new_instance>
    1042:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <_com_serial_instance+0x1>
    1046:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <_com_serial_instance>
    104a:	e4 ec       	ldi	r30, 0xC4	; 196
    104c:	f2 e0       	ldi	r31, 0x02	; 2
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
    1056:	93 83       	std	Z+3, r25	; 0x03
    1058:	82 83       	std	Z+2, r24	; 0x02
    105a:	0f 91       	pop	r16
    105c:	ef 90       	pop	r14
    105e:	cf 90       	pop	r12
    1060:	af 90       	pop	r10
    1062:	9f 90       	pop	r9
    1064:	8f 90       	pop	r8
    1066:	08 95       	ret

00001068 <serial_new_instance>:
    1068:	2f 92       	push	r2
    106a:	3f 92       	push	r3
    106c:	4f 92       	push	r4
    106e:	5f 92       	push	r5
    1070:	6f 92       	push	r6
    1072:	7f 92       	push	r7
    1074:	8f 92       	push	r8
    1076:	9f 92       	push	r9
    1078:	af 92       	push	r10
    107a:	cf 92       	push	r12
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	f8 2e       	mov	r15, r24
    108e:	2a 01       	movw	r4, r20
    1090:	3b 01       	movw	r6, r22
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	c0 d5       	rcall	.+2944   	; 0x1c18 <malloc>
    1098:	8c 01       	movw	r16, r24
    109a:	8f 2d       	mov	r24, r15
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	fc 01       	movw	r30, r24
    10a4:	e5 55       	subi	r30, 0x55	; 85
    10a6:	fd 4f       	sbci	r31, 0xFD	; 253
    10a8:	11 83       	std	Z+1, r17	; 0x01
    10aa:	00 83       	st	Z, r16
    10ac:	fc 01       	movw	r30, r24
    10ae:	ec 5e       	subi	r30, 0xEC	; 236
    10b0:	fd 4f       	sbci	r31, 0xFD	; 253
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	d8 01       	movw	r26, r16
    10b8:	8d 93       	st	X+, r24
    10ba:	9c 93       	st	X, r25
    10bc:	6c 2d       	mov	r22, r12
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	84 e0       	ldi	r24, 0x04	; 4
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	8f d5       	rcall	.+2846   	; 0x1be4 <calloc>
    10c6:	1c 01       	movw	r2, r24
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	89 d5       	rcall	.+2834   	; 0x1be4 <calloc>
    10d2:	7c 01       	movw	r14, r24
    10d4:	4c 2d       	mov	r20, r12
    10d6:	b1 01       	movw	r22, r2
    10d8:	f6 d2       	rcall	.+1516   	; 0x16c6 <fifo_init>
    10da:	f8 01       	movw	r30, r16
    10dc:	f5 82       	std	Z+5, r15	; 0x05
    10de:	e4 82       	std	Z+4, r14	; 0x04
    10e0:	6a 2d       	mov	r22, r10
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	7d d5       	rcall	.+2810   	; 0x1be4 <calloc>
    10ea:	1c 01       	movw	r2, r24
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	86 e0       	ldi	r24, 0x06	; 6
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	77 d5       	rcall	.+2798   	; 0x1be4 <calloc>
    10f6:	7c 01       	movw	r14, r24
    10f8:	4a 2d       	mov	r20, r10
    10fa:	b1 01       	movw	r22, r2
    10fc:	e4 d2       	rcall	.+1480   	; 0x16c6 <fifo_init>
    10fe:	d8 01       	movw	r26, r16
    1100:	13 96       	adiw	r26, 0x03	; 3
    1102:	fc 92       	st	X, r15
    1104:	ee 92       	st	-X, r14
    1106:	12 97       	sbiw	r26, 0x02	; 2
    1108:	17 96       	adiw	r26, 0x07	; 7
    110a:	9c 92       	st	X, r9
    110c:	8e 92       	st	-X, r8
    110e:	16 97       	sbiw	r26, 0x06	; 6
    1110:	ff b6       	in	r15, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	ed 91       	ld	r30, X+
    1116:	fc 91       	ld	r31, X
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	36 97       	sbiw	r30, 0x06	; 6
    111c:	80 81       	ld	r24, Z
    111e:	82 60       	ori	r24, 0x02	; 2
    1120:	80 83       	st	Z, r24
    1122:	8d 90       	ld	r8, X+
    1124:	9c 90       	ld	r9, X
    1126:	c3 01       	movw	r24, r6
    1128:	b2 01       	movw	r22, r4
    112a:	6b d4       	rcall	.+2262   	; 0x1a02 <__floatunsisf>
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	51 e4       	ldi	r21, 0x41	; 65
    1134:	f4 d4       	rcall	.+2536   	; 0x1b1e <__mulsf3>
    1136:	9b 01       	movw	r18, r22
    1138:	ac 01       	movw	r20, r24
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	74 e2       	ldi	r23, 0x24	; 36
    113e:	84 e7       	ldi	r24, 0x74	; 116
    1140:	9b e4       	ldi	r25, 0x4B	; 75
    1142:	cb d3       	rcall	.+1942   	; 0x18da <__divsf3>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	61 d3       	rcall	.+1730   	; 0x1810 <__subsf3>
    114e:	2d d4       	rcall	.+2138   	; 0x19aa <__fixunssfsi>
    1150:	f4 01       	movw	r30, r8
    1152:	32 97       	sbiw	r30, 0x02	; 2
    1154:	60 83       	st	Z, r22
    1156:	d8 01       	movw	r26, r16
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	11 97       	sbiw	r26, 0x01	; 1
    115e:	35 97       	sbiw	r30, 0x05	; 5
    1160:	88 e9       	ldi	r24, 0x98	; 152
    1162:	80 83       	st	Z, r24
    1164:	ed 91       	ld	r30, X+
    1166:	fc 91       	ld	r31, X
    1168:	34 97       	sbiw	r30, 0x04	; 4
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	80 83       	st	Z, r24
    116e:	ff be       	out	0x3f, r15	; 63
    1170:	c8 01       	movw	r24, r16
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	cf 90       	pop	r12
    1180:	af 90       	pop	r10
    1182:	9f 90       	pop	r9
    1184:	8f 90       	pop	r8
    1186:	7f 90       	pop	r7
    1188:	6f 90       	pop	r6
    118a:	5f 90       	pop	r5
    118c:	4f 90       	pop	r4
    118e:	3f 90       	pop	r3
    1190:	2f 90       	pop	r2
    1192:	08 95       	ret

00001194 <serial_send_byte>:
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
    119a:	ea 81       	ldd	r30, Y+2	; 0x02
    119c:	fb 81       	ldd	r31, Y+3	; 0x03
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	25 81       	ldd	r18, Z+5	; 0x05
    11a4:	98 1b       	sub	r25, r24
    11a6:	92 23       	and	r25, r18
    11a8:	84 81       	ldd	r24, Z+4	; 0x04
    11aa:	98 17       	cp	r25, r24
    11ac:	a1 f0       	breq	.+40     	; 0x11d6 <serial_send_byte+0x42>
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	26 95       	lsr	r18
    11b2:	29 23       	and	r18, r25
    11b4:	a0 81       	ld	r26, Z
    11b6:	b1 81       	ldd	r27, Z+1	; 0x01
    11b8:	a2 0f       	add	r26, r18
    11ba:	b1 1d       	adc	r27, r1
    11bc:	6c 93       	st	X, r22
    11be:	9f 5f       	subi	r25, 0xFF	; 255
    11c0:	25 81       	ldd	r18, Z+5	; 0x05
    11c2:	92 23       	and	r25, r18
    11c4:	93 83       	std	Z+3, r25	; 0x03
    11c6:	e8 81       	ld	r30, Y
    11c8:	f9 81       	ldd	r31, Y+1	; 0x01
    11ca:	35 97       	sbiw	r30, 0x05	; 5
    11cc:	80 81       	ld	r24, Z
    11ce:	80 62       	ori	r24, 0x20	; 32
    11d0:	80 83       	st	Z, r24
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <serial_send_byte+0x44>
    11d6:	82 e0       	ldi	r24, 0x02	; 2
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <serial_get_byte>:
    11de:	dc 01       	movw	r26, r24
    11e0:	14 96       	adiw	r26, 0x04	; 4
    11e2:	ed 91       	ld	r30, X+
    11e4:	fc 91       	ld	r31, X
    11e6:	15 97       	sbiw	r26, 0x05	; 5
    11e8:	93 81       	ldd	r25, Z+3	; 0x03
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	98 17       	cp	r25, r24
    11ee:	89 f0       	breq	.+34     	; 0x1212 <serial_get_byte+0x34>
    11f0:	92 81       	ldd	r25, Z+2	; 0x02
    11f2:	85 81       	ldd	r24, Z+5	; 0x05
    11f4:	86 95       	lsr	r24
    11f6:	89 23       	and	r24, r25
    11f8:	a0 81       	ld	r26, Z
    11fa:	b1 81       	ldd	r27, Z+1	; 0x01
    11fc:	a8 0f       	add	r26, r24
    11fe:	b1 1d       	adc	r27, r1
    1200:	8c 91       	ld	r24, X
    1202:	db 01       	movw	r26, r22
    1204:	8c 93       	st	X, r24
    1206:	9f 5f       	subi	r25, 0xFF	; 255
    1208:	85 81       	ldd	r24, Z+5	; 0x05
    120a:	98 23       	and	r25, r24
    120c:	92 83       	std	Z+2, r25	; 0x02
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	08 95       	ret
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	08 95       	ret

00001216 <__vector_25>:
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	0b b6       	in	r0, 0x3b	; 59
    1222:	0f 92       	push	r0
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <_ser_handle>
    1244:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <_ser_handle+0x1>
    1248:	10 97       	sbiw	r26, 0x00	; 0
    124a:	11 f1       	breq	.+68     	; 0x1290 <__vector_25+0x7a>
    124c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1250:	14 96       	adiw	r26, 0x04	; 4
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	15 97       	sbiw	r26, 0x05	; 5
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	25 81       	ldd	r18, Z+5	; 0x05
    125e:	98 1b       	sub	r25, r24
    1260:	92 23       	and	r25, r18
    1262:	84 81       	ldd	r24, Z+4	; 0x04
    1264:	98 17       	cp	r25, r24
    1266:	61 f0       	breq	.+24     	; 0x1280 <__vector_25+0x6a>
    1268:	83 81       	ldd	r24, Z+3	; 0x03
    126a:	26 95       	lsr	r18
    126c:	28 23       	and	r18, r24
    126e:	c0 81       	ld	r28, Z
    1270:	d1 81       	ldd	r29, Z+1	; 0x01
    1272:	c2 0f       	add	r28, r18
    1274:	d1 1d       	adc	r29, r1
    1276:	68 83       	st	Y, r22
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	95 81       	ldd	r25, Z+5	; 0x05
    127c:	89 23       	and	r24, r25
    127e:	83 83       	std	Z+3, r24	; 0x03
    1280:	16 96       	adiw	r26, 0x06	; 6
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	17 97       	sbiw	r26, 0x07	; 7
    1288:	30 97       	sbiw	r30, 0x00	; 0
    128a:	11 f0       	breq	.+4      	; 0x1290 <__vector_25+0x7a>
    128c:	cd 01       	movw	r24, r26
    128e:	19 95       	eicall
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0b be       	out	0x3b, r0	; 59
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__vector_26>:
    12ba:	1f 92       	push	r1
    12bc:	0f 92       	push	r0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	0f 92       	push	r0
    12c2:	11 24       	eor	r1, r1
    12c4:	0b b6       	in	r0, 0x3b	; 59
    12c6:	0f 92       	push	r0
    12c8:	2f 93       	push	r18
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
    12d6:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <_ser_handle>
    12da:	f0 91 ac 02 	lds	r31, 0x02AC	; 0x8002ac <_ser_handle+0x1>
    12de:	30 97       	sbiw	r30, 0x00	; 0
    12e0:	b9 f0       	breq	.+46     	; 0x1310 <__vector_26+0x56>
    12e2:	02 80       	ldd	r0, Z+2	; 0x02
    12e4:	f3 81       	ldd	r31, Z+3	; 0x03
    12e6:	e0 2d       	mov	r30, r0
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	98 17       	cp	r25, r24
    12ee:	b1 f0       	breq	.+44     	; 0x131c <__vector_26+0x62>
    12f0:	92 81       	ldd	r25, Z+2	; 0x02
    12f2:	85 81       	ldd	r24, Z+5	; 0x05
    12f4:	28 2f       	mov	r18, r24
    12f6:	26 95       	lsr	r18
    12f8:	29 23       	and	r18, r25
    12fa:	a0 81       	ld	r26, Z
    12fc:	b1 81       	ldd	r27, Z+1	; 0x01
    12fe:	a2 0f       	add	r26, r18
    1300:	b1 1d       	adc	r27, r1
    1302:	2c 91       	ld	r18, X
    1304:	9f 5f       	subi	r25, 0xFF	; 255
    1306:	89 23       	and	r24, r25
    1308:	82 83       	std	Z+2, r24	; 0x02
    130a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    130e:	0b c0       	rjmp	.+22     	; 0x1326 <__vector_26+0x6c>
    1310:	e1 ec       	ldi	r30, 0xC1	; 193
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 7d       	andi	r24, 0xDF	; 223
    1318:	80 83       	st	Z, r24
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <__vector_26+0x6c>
    131c:	e1 ec       	ldi	r30, 0xC1	; 193
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8f 7d       	andi	r24, 0xDF	; 223
    1324:	80 83       	st	Z, r24
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0b be       	out	0x3b, r0	; 59
    1338:	0f 90       	pop	r0
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	0f 90       	pop	r0
    133e:	1f 90       	pop	r1
    1340:	18 95       	reti

00001342 <__vector_36>:
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	0b b6       	in	r0, 0x3b	; 59
    134e:	0f 92       	push	r0
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
    136c:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <_ser_handle+0x2>
    1370:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <_ser_handle+0x3>
    1374:	10 97       	sbiw	r26, 0x00	; 0
    1376:	11 f1       	breq	.+68     	; 0x13bc <__vector_36+0x7a>
    1378:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    137c:	14 96       	adiw	r26, 0x04	; 4
    137e:	ed 91       	ld	r30, X+
    1380:	fc 91       	ld	r31, X
    1382:	15 97       	sbiw	r26, 0x05	; 5
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	25 81       	ldd	r18, Z+5	; 0x05
    138a:	98 1b       	sub	r25, r24
    138c:	92 23       	and	r25, r18
    138e:	84 81       	ldd	r24, Z+4	; 0x04
    1390:	98 17       	cp	r25, r24
    1392:	61 f0       	breq	.+24     	; 0x13ac <__vector_36+0x6a>
    1394:	83 81       	ldd	r24, Z+3	; 0x03
    1396:	26 95       	lsr	r18
    1398:	28 23       	and	r18, r24
    139a:	c0 81       	ld	r28, Z
    139c:	d1 81       	ldd	r29, Z+1	; 0x01
    139e:	c2 0f       	add	r28, r18
    13a0:	d1 1d       	adc	r29, r1
    13a2:	68 83       	st	Y, r22
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	95 81       	ldd	r25, Z+5	; 0x05
    13a8:	89 23       	and	r24, r25
    13aa:	83 83       	std	Z+3, r24	; 0x03
    13ac:	16 96       	adiw	r26, 0x06	; 6
    13ae:	ed 91       	ld	r30, X+
    13b0:	fc 91       	ld	r31, X
    13b2:	17 97       	sbiw	r26, 0x07	; 7
    13b4:	30 97       	sbiw	r30, 0x00	; 0
    13b6:	11 f0       	breq	.+4      	; 0x13bc <__vector_36+0x7a>
    13b8:	cd 01       	movw	r24, r26
    13ba:	19 95       	eicall
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0b be       	out	0x3b, r0	; 59
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	0f 90       	pop	r0
    13e2:	1f 90       	pop	r1
    13e4:	18 95       	reti

000013e6 <__vector_37>:
    13e6:	1f 92       	push	r1
    13e8:	0f 92       	push	r0
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	0f 92       	push	r0
    13ee:	11 24       	eor	r1, r1
    13f0:	0b b6       	in	r0, 0x3b	; 59
    13f2:	0f 92       	push	r0
    13f4:	2f 93       	push	r18
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
    1402:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <_ser_handle+0x2>
    1406:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <_ser_handle+0x3>
    140a:	30 97       	sbiw	r30, 0x00	; 0
    140c:	b9 f0       	breq	.+46     	; 0x143c <__vector_37+0x56>
    140e:	02 80       	ldd	r0, Z+2	; 0x02
    1410:	f3 81       	ldd	r31, Z+3	; 0x03
    1412:	e0 2d       	mov	r30, r0
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	98 17       	cp	r25, r24
    141a:	b1 f0       	breq	.+44     	; 0x1448 <__vector_37+0x62>
    141c:	92 81       	ldd	r25, Z+2	; 0x02
    141e:	85 81       	ldd	r24, Z+5	; 0x05
    1420:	28 2f       	mov	r18, r24
    1422:	26 95       	lsr	r18
    1424:	29 23       	and	r18, r25
    1426:	a0 81       	ld	r26, Z
    1428:	b1 81       	ldd	r27, Z+1	; 0x01
    142a:	a2 0f       	add	r26, r18
    142c:	b1 1d       	adc	r27, r1
    142e:	2c 91       	ld	r18, X
    1430:	9f 5f       	subi	r25, 0xFF	; 255
    1432:	89 23       	and	r24, r25
    1434:	82 83       	std	Z+2, r24	; 0x02
    1436:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    143a:	0b c0       	rjmp	.+22     	; 0x1452 <__vector_37+0x6c>
    143c:	e9 ec       	ldi	r30, 0xC9	; 201
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 7d       	andi	r24, 0xDF	; 223
    1444:	80 83       	st	Z, r24
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <__vector_37+0x6c>
    1448:	e9 ec       	ldi	r30, 0xC9	; 201
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8f 7d       	andi	r24, 0xDF	; 223
    1450:	80 83       	st	Z, r24
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0b be       	out	0x3b, r0	; 59
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <__vector_51>:
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	0b b6       	in	r0, 0x3b	; 59
    147a:	0f 92       	push	r0
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    1498:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <_ser_handle+0x4>
    149c:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <_ser_handle+0x5>
    14a0:	10 97       	sbiw	r26, 0x00	; 0
    14a2:	11 f1       	breq	.+68     	; 0x14e8 <__vector_51+0x7a>
    14a4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    14a8:	14 96       	adiw	r26, 0x04	; 4
    14aa:	ed 91       	ld	r30, X+
    14ac:	fc 91       	ld	r31, X
    14ae:	15 97       	sbiw	r26, 0x05	; 5
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	25 81       	ldd	r18, Z+5	; 0x05
    14b6:	98 1b       	sub	r25, r24
    14b8:	92 23       	and	r25, r18
    14ba:	84 81       	ldd	r24, Z+4	; 0x04
    14bc:	98 17       	cp	r25, r24
    14be:	61 f0       	breq	.+24     	; 0x14d8 <__vector_51+0x6a>
    14c0:	83 81       	ldd	r24, Z+3	; 0x03
    14c2:	26 95       	lsr	r18
    14c4:	28 23       	and	r18, r24
    14c6:	c0 81       	ld	r28, Z
    14c8:	d1 81       	ldd	r29, Z+1	; 0x01
    14ca:	c2 0f       	add	r28, r18
    14cc:	d1 1d       	adc	r29, r1
    14ce:	68 83       	st	Y, r22
    14d0:	8f 5f       	subi	r24, 0xFF	; 255
    14d2:	95 81       	ldd	r25, Z+5	; 0x05
    14d4:	89 23       	and	r24, r25
    14d6:	83 83       	std	Z+3, r24	; 0x03
    14d8:	16 96       	adiw	r26, 0x06	; 6
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	17 97       	sbiw	r26, 0x07	; 7
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <__vector_51+0x7a>
    14e4:	cd 01       	movw	r24, r26
    14e6:	19 95       	eicall
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0b be       	out	0x3b, r0	; 59
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f 90       	pop	r0
    150e:	1f 90       	pop	r1
    1510:	18 95       	reti

00001512 <__vector_52>:
    1512:	1f 92       	push	r1
    1514:	0f 92       	push	r0
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	0f 92       	push	r0
    151a:	11 24       	eor	r1, r1
    151c:	0b b6       	in	r0, 0x3b	; 59
    151e:	0f 92       	push	r0
    1520:	2f 93       	push	r18
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <_ser_handle+0x4>
    1532:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <_ser_handle+0x5>
    1536:	30 97       	sbiw	r30, 0x00	; 0
    1538:	b9 f0       	breq	.+46     	; 0x1568 <__vector_52+0x56>
    153a:	02 80       	ldd	r0, Z+2	; 0x02
    153c:	f3 81       	ldd	r31, Z+3	; 0x03
    153e:	e0 2d       	mov	r30, r0
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	98 17       	cp	r25, r24
    1546:	b1 f0       	breq	.+44     	; 0x1574 <__vector_52+0x62>
    1548:	92 81       	ldd	r25, Z+2	; 0x02
    154a:	85 81       	ldd	r24, Z+5	; 0x05
    154c:	28 2f       	mov	r18, r24
    154e:	26 95       	lsr	r18
    1550:	29 23       	and	r18, r25
    1552:	a0 81       	ld	r26, Z
    1554:	b1 81       	ldd	r27, Z+1	; 0x01
    1556:	a2 0f       	add	r26, r18
    1558:	b1 1d       	adc	r27, r1
    155a:	2c 91       	ld	r18, X
    155c:	9f 5f       	subi	r25, 0xFF	; 255
    155e:	89 23       	and	r24, r25
    1560:	82 83       	std	Z+2, r24	; 0x02
    1562:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1566:	0b c0       	rjmp	.+22     	; 0x157e <__vector_52+0x6c>
    1568:	e1 ed       	ldi	r30, 0xD1	; 209
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	8f 7d       	andi	r24, 0xDF	; 223
    1570:	80 83       	st	Z, r24
    1572:	05 c0       	rjmp	.+10     	; 0x157e <__vector_52+0x6c>
    1574:	e1 ed       	ldi	r30, 0xD1	; 209
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8f 7d       	andi	r24, 0xDF	; 223
    157c:	80 83       	st	Z, r24
    157e:	ff 91       	pop	r31
    1580:	ef 91       	pop	r30
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	2f 91       	pop	r18
    158c:	0f 90       	pop	r0
    158e:	0b be       	out	0x3b, r0	; 59
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <__vector_54>:
    159a:	1f 92       	push	r1
    159c:	0f 92       	push	r0
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	0b b6       	in	r0, 0x3b	; 59
    15a6:	0f 92       	push	r0
    15a8:	2f 93       	push	r18
    15aa:	3f 93       	push	r19
    15ac:	4f 93       	push	r20
    15ae:	5f 93       	push	r21
    15b0:	6f 93       	push	r22
    15b2:	7f 93       	push	r23
    15b4:	8f 93       	push	r24
    15b6:	9f 93       	push	r25
    15b8:	af 93       	push	r26
    15ba:	bf 93       	push	r27
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <_ser_handle+0x6>
    15c8:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <_ser_handle+0x7>
    15cc:	10 97       	sbiw	r26, 0x00	; 0
    15ce:	11 f1       	breq	.+68     	; 0x1614 <__vector_54+0x7a>
    15d0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    15d4:	14 96       	adiw	r26, 0x04	; 4
    15d6:	ed 91       	ld	r30, X+
    15d8:	fc 91       	ld	r31, X
    15da:	15 97       	sbiw	r26, 0x05	; 5
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	25 81       	ldd	r18, Z+5	; 0x05
    15e2:	98 1b       	sub	r25, r24
    15e4:	92 23       	and	r25, r18
    15e6:	84 81       	ldd	r24, Z+4	; 0x04
    15e8:	98 17       	cp	r25, r24
    15ea:	61 f0       	breq	.+24     	; 0x1604 <__vector_54+0x6a>
    15ec:	83 81       	ldd	r24, Z+3	; 0x03
    15ee:	26 95       	lsr	r18
    15f0:	28 23       	and	r18, r24
    15f2:	c0 81       	ld	r28, Z
    15f4:	d1 81       	ldd	r29, Z+1	; 0x01
    15f6:	c2 0f       	add	r28, r18
    15f8:	d1 1d       	adc	r29, r1
    15fa:	68 83       	st	Y, r22
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	95 81       	ldd	r25, Z+5	; 0x05
    1600:	89 23       	and	r24, r25
    1602:	83 83       	std	Z+3, r24	; 0x03
    1604:	16 96       	adiw	r26, 0x06	; 6
    1606:	ed 91       	ld	r30, X+
    1608:	fc 91       	ld	r31, X
    160a:	17 97       	sbiw	r26, 0x07	; 7
    160c:	30 97       	sbiw	r30, 0x00	; 0
    160e:	11 f0       	breq	.+4      	; 0x1614 <__vector_54+0x7a>
    1610:	cd 01       	movw	r24, r26
    1612:	19 95       	eicall
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	0f 90       	pop	r0
    1632:	0b be       	out	0x3b, r0	; 59
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_55>:
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	0b b6       	in	r0, 0x3b	; 59
    164a:	0f 92       	push	r0
    164c:	2f 93       	push	r18
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
    165a:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <_ser_handle+0x6>
    165e:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <_ser_handle+0x7>
    1662:	30 97       	sbiw	r30, 0x00	; 0
    1664:	b9 f0       	breq	.+46     	; 0x1694 <__vector_55+0x56>
    1666:	02 80       	ldd	r0, Z+2	; 0x02
    1668:	f3 81       	ldd	r31, Z+3	; 0x03
    166a:	e0 2d       	mov	r30, r0
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	98 17       	cp	r25, r24
    1672:	b1 f0       	breq	.+44     	; 0x16a0 <__vector_55+0x62>
    1674:	92 81       	ldd	r25, Z+2	; 0x02
    1676:	85 81       	ldd	r24, Z+5	; 0x05
    1678:	28 2f       	mov	r18, r24
    167a:	26 95       	lsr	r18
    167c:	29 23       	and	r18, r25
    167e:	a0 81       	ld	r26, Z
    1680:	b1 81       	ldd	r27, Z+1	; 0x01
    1682:	a2 0f       	add	r26, r18
    1684:	b1 1d       	adc	r27, r1
    1686:	2c 91       	ld	r18, X
    1688:	9f 5f       	subi	r25, 0xFF	; 255
    168a:	89 23       	and	r24, r25
    168c:	82 83       	std	Z+2, r24	; 0x02
    168e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1692:	0b c0       	rjmp	.+22     	; 0x16aa <__vector_55+0x6c>
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f1 e0       	ldi	r31, 0x01	; 1
    1698:	80 81       	ld	r24, Z
    169a:	8f 7d       	andi	r24, 0xDF	; 223
    169c:	80 83       	st	Z, r24
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <__vector_55+0x6c>
    16a0:	e1 e3       	ldi	r30, 0x31	; 49
    16a2:	f1 e0       	ldi	r31, 0x01	; 1
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 7d       	andi	r24, 0xDF	; 223
    16a8:	80 83       	st	Z, r24
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	bf 91       	pop	r27
    16b0:	af 91       	pop	r26
    16b2:	9f 91       	pop	r25
    16b4:	8f 91       	pop	r24
    16b6:	2f 91       	pop	r18
    16b8:	0f 90       	pop	r0
    16ba:	0b be       	out	0x3b, r0	; 59
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <fifo_init>:
    16c6:	fc 01       	movw	r30, r24
    16c8:	41 11       	cpse	r20, r1
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <fifo_init+0x8>
    16cc:	c6 d3       	rcall	.+1932   	; 0x1e5a <abort>
    16ce:	84 2f       	mov	r24, r20
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 01       	movw	r18, r24
    16d4:	21 50       	subi	r18, 0x01	; 1
    16d6:	31 09       	sbc	r19, r1
    16d8:	82 23       	and	r24, r18
    16da:	93 23       	and	r25, r19
    16dc:	89 2b       	or	r24, r25
    16de:	09 f0       	breq	.+2      	; 0x16e2 <fifo_init+0x1c>
    16e0:	bc d3       	rcall	.+1912   	; 0x1e5a <abort>
    16e2:	41 38       	cpi	r20, 0x81	; 129
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <fifo_init+0x22>
    16e6:	b9 d3       	rcall	.+1906   	; 0x1e5a <abort>
    16e8:	12 82       	std	Z+2, r1	; 0x02
    16ea:	13 82       	std	Z+3, r1	; 0x03
    16ec:	44 83       	std	Z+4, r20	; 0x04
    16ee:	44 0f       	add	r20, r20
    16f0:	41 50       	subi	r20, 0x01	; 1
    16f2:	45 83       	std	Z+5, r20	; 0x05
    16f4:	71 83       	std	Z+1, r23	; 0x01
    16f6:	60 83       	st	Z, r22
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	08 95       	ret

000016fe <_serial_call_back>:
    16fe:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <crc_sum.1941>
    1702:	86 0f       	add	r24, r22
    1704:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <crc_sum.1941>
    1708:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <_mh_state>
    170c:	91 30       	cpi	r25, 0x01	; 1
    170e:	79 f0       	breq	.+30     	; 0x172e <_serial_call_back+0x30>
    1710:	28 f0       	brcs	.+10     	; 0x171c <_serial_call_back+0x1e>
    1712:	92 30       	cpi	r25, 0x02	; 2
    1714:	a9 f0       	breq	.+42     	; 0x1740 <_serial_call_back+0x42>
    1716:	93 30       	cpi	r25, 0x03	; 3
    1718:	19 f1       	breq	.+70     	; 0x1760 <_serial_call_back+0x62>
    171a:	08 95       	ret
    171c:	6f 3f       	cpi	r22, 0xFF	; 255
    171e:	09 f0       	breq	.+2      	; 0x1722 <_serial_call_back+0x24>
    1720:	48 c0       	rjmp	.+144    	; 0x17b2 <_serial_call_back+0xb4>
    1722:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <crc_sum.1941>
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_mh_state>
    172c:	08 95       	ret
    172e:	66 38       	cpi	r22, 0x86	; 134
    1730:	09 f0       	breq	.+2      	; 0x1734 <_serial_call_back+0x36>
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <_serial_call_back+0xb4>
    1734:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <inDex.1939>
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_mh_state>
    173e:	08 95       	ret
    1740:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <inDex.1939>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	8e 0f       	add	r24, r30
    1748:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <inDex.1939>
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	ed 54       	subi	r30, 0x4D	; 77
    1750:	fd 4f       	sbci	r31, 0xFD	; 253
    1752:	60 83       	st	Z, r22
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	69 f5       	brne	.+90     	; 0x17b2 <_serial_call_back+0xb4>
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_mh_state>
    175e:	08 95       	ret
    1760:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <inDex.1939>
    1764:	21 e0       	ldi	r18, 0x01	; 1
    1766:	29 0f       	add	r18, r25
    1768:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <inDex.1939>
    176c:	96 30       	cpi	r25, 0x06	; 6
    176e:	09 f5       	brne	.+66     	; 0x17b2 <_serial_call_back+0xb4>
    1770:	81 11       	cpse	r24, r1
    1772:	0e c0       	rjmp	.+28     	; 0x1790 <_serial_call_back+0x92>
    1774:	e3 eb       	ldi	r30, 0xB3	; 179
    1776:	f2 e0       	ldi	r31, 0x02	; 2
    1778:	80 81       	ld	r24, Z
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	98 2f       	mov	r25, r24
    177e:	88 27       	eor	r24, r24
    1780:	21 81       	ldd	r18, Z+1	; 0x01
    1782:	82 0f       	add	r24, r18
    1784:	91 1d       	adc	r25, r1
    1786:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <_ppm+0x1>
    178a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <_ppm>
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <_serial_call_back+0x9a>
    1790:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <_ppm+0x1>
    1794:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <_ppm>
    1798:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <_mh_state>
    179c:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <_app_call_back>
    17a0:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <_app_call_back+0x1>
    17a4:	30 97       	sbiw	r30, 0x00	; 0
    17a6:	29 f0       	breq	.+10     	; 0x17b2 <_serial_call_back+0xb4>
    17a8:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ppm>
    17ac:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <_ppm+0x1>
    17b0:	19 95       	eicall
    17b2:	08 95       	ret

000017b4 <mh_z19_create>:
    17b4:	8f 92       	push	r8
    17b6:	9f 92       	push	r9
    17b8:	af 92       	push	r10
    17ba:	cf 92       	push	r12
    17bc:	ef 92       	push	r14
    17be:	0f 93       	push	r16
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	eb 01       	movw	r28, r22
    17c6:	0f 2e       	mov	r0, r31
    17c8:	ff e7       	ldi	r31, 0x7F	; 127
    17ca:	8f 2e       	mov	r8, r31
    17cc:	fb e0       	ldi	r31, 0x0B	; 11
    17ce:	9f 2e       	mov	r9, r31
    17d0:	f0 2d       	mov	r31, r0
    17d2:	68 94       	set
    17d4:	aa 24       	eor	r10, r10
    17d6:	a4 f8       	bld	r10, 4
    17d8:	68 94       	set
    17da:	cc 24       	eor	r12, r12
    17dc:	c4 f8       	bld	r12, 4
    17de:	e1 2c       	mov	r14, r1
    17e0:	00 e0       	ldi	r16, 0x00	; 0
    17e2:	23 e0       	ldi	r18, 0x03	; 3
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	55 e2       	ldi	r21, 0x25	; 37
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	3d dc       	rcall	.-1926   	; 0x1068 <serial_new_instance>
    17ee:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <_serial+0x1>
    17f2:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <_serial>
    17f6:	d0 93 b8 02 	sts	0x02B8, r29	; 0x8002b8 <_app_call_back+0x1>
    17fa:	c0 93 b7 02 	sts	0x02B7, r28	; 0x8002b7 <_app_call_back>
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	0f 91       	pop	r16
    1804:	ef 90       	pop	r14
    1806:	cf 90       	pop	r12
    1808:	af 90       	pop	r10
    180a:	9f 90       	pop	r9
    180c:	8f 90       	pop	r8
    180e:	08 95       	ret

00001810 <__subsf3>:
    1810:	50 58       	subi	r21, 0x80	; 128

00001812 <__addsf3>:
    1812:	bb 27       	eor	r27, r27
    1814:	aa 27       	eor	r26, r26
    1816:	0e d0       	rcall	.+28     	; 0x1834 <__addsf3x>
    1818:	48 c1       	rjmp	.+656    	; 0x1aaa <__fp_round>
    181a:	39 d1       	rcall	.+626    	; 0x1a8e <__fp_pscA>
    181c:	30 f0       	brcs	.+12     	; 0x182a <__addsf3+0x18>
    181e:	3e d1       	rcall	.+636    	; 0x1a9c <__fp_pscB>
    1820:	20 f0       	brcs	.+8      	; 0x182a <__addsf3+0x18>
    1822:	31 f4       	brne	.+12     	; 0x1830 <__addsf3+0x1e>
    1824:	9f 3f       	cpi	r25, 0xFF	; 255
    1826:	11 f4       	brne	.+4      	; 0x182c <__addsf3+0x1a>
    1828:	1e f4       	brtc	.+6      	; 0x1830 <__addsf3+0x1e>
    182a:	2e c1       	rjmp	.+604    	; 0x1a88 <__fp_nan>
    182c:	0e f4       	brtc	.+2      	; 0x1830 <__addsf3+0x1e>
    182e:	e0 95       	com	r30
    1830:	e7 fb       	bst	r30, 7
    1832:	24 c1       	rjmp	.+584    	; 0x1a7c <__fp_inf>

00001834 <__addsf3x>:
    1834:	e9 2f       	mov	r30, r25
    1836:	4a d1       	rcall	.+660    	; 0x1acc <__fp_split3>
    1838:	80 f3       	brcs	.-32     	; 0x181a <__addsf3+0x8>
    183a:	ba 17       	cp	r27, r26
    183c:	62 07       	cpc	r22, r18
    183e:	73 07       	cpc	r23, r19
    1840:	84 07       	cpc	r24, r20
    1842:	95 07       	cpc	r25, r21
    1844:	18 f0       	brcs	.+6      	; 0x184c <__addsf3x+0x18>
    1846:	71 f4       	brne	.+28     	; 0x1864 <__addsf3x+0x30>
    1848:	9e f5       	brtc	.+102    	; 0x18b0 <__addsf3x+0x7c>
    184a:	62 c1       	rjmp	.+708    	; 0x1b10 <__fp_zero>
    184c:	0e f4       	brtc	.+2      	; 0x1850 <__addsf3x+0x1c>
    184e:	e0 95       	com	r30
    1850:	0b 2e       	mov	r0, r27
    1852:	ba 2f       	mov	r27, r26
    1854:	a0 2d       	mov	r26, r0
    1856:	0b 01       	movw	r0, r22
    1858:	b9 01       	movw	r22, r18
    185a:	90 01       	movw	r18, r0
    185c:	0c 01       	movw	r0, r24
    185e:	ca 01       	movw	r24, r20
    1860:	a0 01       	movw	r20, r0
    1862:	11 24       	eor	r1, r1
    1864:	ff 27       	eor	r31, r31
    1866:	59 1b       	sub	r21, r25
    1868:	99 f0       	breq	.+38     	; 0x1890 <__addsf3x+0x5c>
    186a:	59 3f       	cpi	r21, 0xF9	; 249
    186c:	50 f4       	brcc	.+20     	; 0x1882 <__addsf3x+0x4e>
    186e:	50 3e       	cpi	r21, 0xE0	; 224
    1870:	68 f1       	brcs	.+90     	; 0x18cc <__addsf3x+0x98>
    1872:	1a 16       	cp	r1, r26
    1874:	f0 40       	sbci	r31, 0x00	; 0
    1876:	a2 2f       	mov	r26, r18
    1878:	23 2f       	mov	r18, r19
    187a:	34 2f       	mov	r19, r20
    187c:	44 27       	eor	r20, r20
    187e:	58 5f       	subi	r21, 0xF8	; 248
    1880:	f3 cf       	rjmp	.-26     	; 0x1868 <__addsf3x+0x34>
    1882:	46 95       	lsr	r20
    1884:	37 95       	ror	r19
    1886:	27 95       	ror	r18
    1888:	a7 95       	ror	r26
    188a:	f0 40       	sbci	r31, 0x00	; 0
    188c:	53 95       	inc	r21
    188e:	c9 f7       	brne	.-14     	; 0x1882 <__addsf3x+0x4e>
    1890:	7e f4       	brtc	.+30     	; 0x18b0 <__addsf3x+0x7c>
    1892:	1f 16       	cp	r1, r31
    1894:	ba 0b       	sbc	r27, r26
    1896:	62 0b       	sbc	r22, r18
    1898:	73 0b       	sbc	r23, r19
    189a:	84 0b       	sbc	r24, r20
    189c:	ba f0       	brmi	.+46     	; 0x18cc <__addsf3x+0x98>
    189e:	91 50       	subi	r25, 0x01	; 1
    18a0:	a1 f0       	breq	.+40     	; 0x18ca <__addsf3x+0x96>
    18a2:	ff 0f       	add	r31, r31
    18a4:	bb 1f       	adc	r27, r27
    18a6:	66 1f       	adc	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	c2 f7       	brpl	.-16     	; 0x189e <__addsf3x+0x6a>
    18ae:	0e c0       	rjmp	.+28     	; 0x18cc <__addsf3x+0x98>
    18b0:	ba 0f       	add	r27, r26
    18b2:	62 1f       	adc	r22, r18
    18b4:	73 1f       	adc	r23, r19
    18b6:	84 1f       	adc	r24, r20
    18b8:	48 f4       	brcc	.+18     	; 0x18cc <__addsf3x+0x98>
    18ba:	87 95       	ror	r24
    18bc:	77 95       	ror	r23
    18be:	67 95       	ror	r22
    18c0:	b7 95       	ror	r27
    18c2:	f7 95       	ror	r31
    18c4:	9e 3f       	cpi	r25, 0xFE	; 254
    18c6:	08 f0       	brcs	.+2      	; 0x18ca <__addsf3x+0x96>
    18c8:	b3 cf       	rjmp	.-154    	; 0x1830 <__addsf3+0x1e>
    18ca:	93 95       	inc	r25
    18cc:	88 0f       	add	r24, r24
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <__addsf3x+0x9e>
    18d0:	99 27       	eor	r25, r25
    18d2:	ee 0f       	add	r30, r30
    18d4:	97 95       	ror	r25
    18d6:	87 95       	ror	r24
    18d8:	08 95       	ret

000018da <__divsf3>:
    18da:	0c d0       	rcall	.+24     	; 0x18f4 <__divsf3x>
    18dc:	e6 c0       	rjmp	.+460    	; 0x1aaa <__fp_round>
    18de:	de d0       	rcall	.+444    	; 0x1a9c <__fp_pscB>
    18e0:	40 f0       	brcs	.+16     	; 0x18f2 <__divsf3+0x18>
    18e2:	d5 d0       	rcall	.+426    	; 0x1a8e <__fp_pscA>
    18e4:	30 f0       	brcs	.+12     	; 0x18f2 <__divsf3+0x18>
    18e6:	21 f4       	brne	.+8      	; 0x18f0 <__divsf3+0x16>
    18e8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ea:	19 f0       	breq	.+6      	; 0x18f2 <__divsf3+0x18>
    18ec:	c7 c0       	rjmp	.+398    	; 0x1a7c <__fp_inf>
    18ee:	51 11       	cpse	r21, r1
    18f0:	10 c1       	rjmp	.+544    	; 0x1b12 <__fp_szero>
    18f2:	ca c0       	rjmp	.+404    	; 0x1a88 <__fp_nan>

000018f4 <__divsf3x>:
    18f4:	eb d0       	rcall	.+470    	; 0x1acc <__fp_split3>
    18f6:	98 f3       	brcs	.-26     	; 0x18de <__divsf3+0x4>

000018f8 <__divsf3_pse>:
    18f8:	99 23       	and	r25, r25
    18fa:	c9 f3       	breq	.-14     	; 0x18ee <__divsf3+0x14>
    18fc:	55 23       	and	r21, r21
    18fe:	b1 f3       	breq	.-20     	; 0x18ec <__divsf3+0x12>
    1900:	95 1b       	sub	r25, r21
    1902:	55 0b       	sbc	r21, r21
    1904:	bb 27       	eor	r27, r27
    1906:	aa 27       	eor	r26, r26
    1908:	62 17       	cp	r22, r18
    190a:	73 07       	cpc	r23, r19
    190c:	84 07       	cpc	r24, r20
    190e:	38 f0       	brcs	.+14     	; 0x191e <__divsf3_pse+0x26>
    1910:	9f 5f       	subi	r25, 0xFF	; 255
    1912:	5f 4f       	sbci	r21, 0xFF	; 255
    1914:	22 0f       	add	r18, r18
    1916:	33 1f       	adc	r19, r19
    1918:	44 1f       	adc	r20, r20
    191a:	aa 1f       	adc	r26, r26
    191c:	a9 f3       	breq	.-22     	; 0x1908 <__divsf3_pse+0x10>
    191e:	33 d0       	rcall	.+102    	; 0x1986 <__divsf3_pse+0x8e>
    1920:	0e 2e       	mov	r0, r30
    1922:	3a f0       	brmi	.+14     	; 0x1932 <__divsf3_pse+0x3a>
    1924:	e0 e8       	ldi	r30, 0x80	; 128
    1926:	30 d0       	rcall	.+96     	; 0x1988 <__divsf3_pse+0x90>
    1928:	91 50       	subi	r25, 0x01	; 1
    192a:	50 40       	sbci	r21, 0x00	; 0
    192c:	e6 95       	lsr	r30
    192e:	00 1c       	adc	r0, r0
    1930:	ca f7       	brpl	.-14     	; 0x1924 <__divsf3_pse+0x2c>
    1932:	29 d0       	rcall	.+82     	; 0x1986 <__divsf3_pse+0x8e>
    1934:	fe 2f       	mov	r31, r30
    1936:	27 d0       	rcall	.+78     	; 0x1986 <__divsf3_pse+0x8e>
    1938:	66 0f       	add	r22, r22
    193a:	77 1f       	adc	r23, r23
    193c:	88 1f       	adc	r24, r24
    193e:	bb 1f       	adc	r27, r27
    1940:	26 17       	cp	r18, r22
    1942:	37 07       	cpc	r19, r23
    1944:	48 07       	cpc	r20, r24
    1946:	ab 07       	cpc	r26, r27
    1948:	b0 e8       	ldi	r27, 0x80	; 128
    194a:	09 f0       	breq	.+2      	; 0x194e <__divsf3_pse+0x56>
    194c:	bb 0b       	sbc	r27, r27
    194e:	80 2d       	mov	r24, r0
    1950:	bf 01       	movw	r22, r30
    1952:	ff 27       	eor	r31, r31
    1954:	93 58       	subi	r25, 0x83	; 131
    1956:	5f 4f       	sbci	r21, 0xFF	; 255
    1958:	2a f0       	brmi	.+10     	; 0x1964 <__divsf3_pse+0x6c>
    195a:	9e 3f       	cpi	r25, 0xFE	; 254
    195c:	51 05       	cpc	r21, r1
    195e:	68 f0       	brcs	.+26     	; 0x197a <__divsf3_pse+0x82>
    1960:	8d c0       	rjmp	.+282    	; 0x1a7c <__fp_inf>
    1962:	d7 c0       	rjmp	.+430    	; 0x1b12 <__fp_szero>
    1964:	5f 3f       	cpi	r21, 0xFF	; 255
    1966:	ec f3       	brlt	.-6      	; 0x1962 <__divsf3_pse+0x6a>
    1968:	98 3e       	cpi	r25, 0xE8	; 232
    196a:	dc f3       	brlt	.-10     	; 0x1962 <__divsf3_pse+0x6a>
    196c:	86 95       	lsr	r24
    196e:	77 95       	ror	r23
    1970:	67 95       	ror	r22
    1972:	b7 95       	ror	r27
    1974:	f7 95       	ror	r31
    1976:	9f 5f       	subi	r25, 0xFF	; 255
    1978:	c9 f7       	brne	.-14     	; 0x196c <__divsf3_pse+0x74>
    197a:	88 0f       	add	r24, r24
    197c:	91 1d       	adc	r25, r1
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	97 f9       	bld	r25, 7
    1984:	08 95       	ret
    1986:	e1 e0       	ldi	r30, 0x01	; 1
    1988:	66 0f       	add	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	88 1f       	adc	r24, r24
    198e:	bb 1f       	adc	r27, r27
    1990:	62 17       	cp	r22, r18
    1992:	73 07       	cpc	r23, r19
    1994:	84 07       	cpc	r24, r20
    1996:	ba 07       	cpc	r27, r26
    1998:	20 f0       	brcs	.+8      	; 0x19a2 <__divsf3_pse+0xaa>
    199a:	62 1b       	sub	r22, r18
    199c:	73 0b       	sbc	r23, r19
    199e:	84 0b       	sbc	r24, r20
    19a0:	ba 0b       	sbc	r27, r26
    19a2:	ee 1f       	adc	r30, r30
    19a4:	88 f7       	brcc	.-30     	; 0x1988 <__divsf3_pse+0x90>
    19a6:	e0 95       	com	r30
    19a8:	08 95       	ret

000019aa <__fixunssfsi>:
    19aa:	98 d0       	rcall	.+304    	; 0x1adc <__fp_splitA>
    19ac:	88 f0       	brcs	.+34     	; 0x19d0 <__fixunssfsi+0x26>
    19ae:	9f 57       	subi	r25, 0x7F	; 127
    19b0:	90 f0       	brcs	.+36     	; 0x19d6 <__fixunssfsi+0x2c>
    19b2:	b9 2f       	mov	r27, r25
    19b4:	99 27       	eor	r25, r25
    19b6:	b7 51       	subi	r27, 0x17	; 23
    19b8:	a0 f0       	brcs	.+40     	; 0x19e2 <__fixunssfsi+0x38>
    19ba:	d1 f0       	breq	.+52     	; 0x19f0 <__fixunssfsi+0x46>
    19bc:	66 0f       	add	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	88 1f       	adc	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	1a f0       	brmi	.+6      	; 0x19cc <__fixunssfsi+0x22>
    19c6:	ba 95       	dec	r27
    19c8:	c9 f7       	brne	.-14     	; 0x19bc <__fixunssfsi+0x12>
    19ca:	12 c0       	rjmp	.+36     	; 0x19f0 <__fixunssfsi+0x46>
    19cc:	b1 30       	cpi	r27, 0x01	; 1
    19ce:	81 f0       	breq	.+32     	; 0x19f0 <__fixunssfsi+0x46>
    19d0:	9f d0       	rcall	.+318    	; 0x1b10 <__fp_zero>
    19d2:	b1 e0       	ldi	r27, 0x01	; 1
    19d4:	08 95       	ret
    19d6:	9c c0       	rjmp	.+312    	; 0x1b10 <__fp_zero>
    19d8:	67 2f       	mov	r22, r23
    19da:	78 2f       	mov	r23, r24
    19dc:	88 27       	eor	r24, r24
    19de:	b8 5f       	subi	r27, 0xF8	; 248
    19e0:	39 f0       	breq	.+14     	; 0x19f0 <__fixunssfsi+0x46>
    19e2:	b9 3f       	cpi	r27, 0xF9	; 249
    19e4:	cc f3       	brlt	.-14     	; 0x19d8 <__fixunssfsi+0x2e>
    19e6:	86 95       	lsr	r24
    19e8:	77 95       	ror	r23
    19ea:	67 95       	ror	r22
    19ec:	b3 95       	inc	r27
    19ee:	d9 f7       	brne	.-10     	; 0x19e6 <__fixunssfsi+0x3c>
    19f0:	3e f4       	brtc	.+14     	; 0x1a00 <__fixunssfsi+0x56>
    19f2:	90 95       	com	r25
    19f4:	80 95       	com	r24
    19f6:	70 95       	com	r23
    19f8:	61 95       	neg	r22
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	08 95       	ret

00001a02 <__floatunsisf>:
    1a02:	e8 94       	clt
    1a04:	09 c0       	rjmp	.+18     	; 0x1a18 <__floatsisf+0x12>

00001a06 <__floatsisf>:
    1a06:	97 fb       	bst	r25, 7
    1a08:	3e f4       	brtc	.+14     	; 0x1a18 <__floatsisf+0x12>
    1a0a:	90 95       	com	r25
    1a0c:	80 95       	com	r24
    1a0e:	70 95       	com	r23
    1a10:	61 95       	neg	r22
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	8f 4f       	sbci	r24, 0xFF	; 255
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	99 23       	and	r25, r25
    1a1a:	a9 f0       	breq	.+42     	; 0x1a46 <__floatsisf+0x40>
    1a1c:	f9 2f       	mov	r31, r25
    1a1e:	96 e9       	ldi	r25, 0x96	; 150
    1a20:	bb 27       	eor	r27, r27
    1a22:	93 95       	inc	r25
    1a24:	f6 95       	lsr	r31
    1a26:	87 95       	ror	r24
    1a28:	77 95       	ror	r23
    1a2a:	67 95       	ror	r22
    1a2c:	b7 95       	ror	r27
    1a2e:	f1 11       	cpse	r31, r1
    1a30:	f8 cf       	rjmp	.-16     	; 0x1a22 <__floatsisf+0x1c>
    1a32:	fa f4       	brpl	.+62     	; 0x1a72 <__floatsisf+0x6c>
    1a34:	bb 0f       	add	r27, r27
    1a36:	11 f4       	brne	.+4      	; 0x1a3c <__floatsisf+0x36>
    1a38:	60 ff       	sbrs	r22, 0
    1a3a:	1b c0       	rjmp	.+54     	; 0x1a72 <__floatsisf+0x6c>
    1a3c:	6f 5f       	subi	r22, 0xFF	; 255
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	8f 4f       	sbci	r24, 0xFF	; 255
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	16 c0       	rjmp	.+44     	; 0x1a72 <__floatsisf+0x6c>
    1a46:	88 23       	and	r24, r24
    1a48:	11 f0       	breq	.+4      	; 0x1a4e <__floatsisf+0x48>
    1a4a:	96 e9       	ldi	r25, 0x96	; 150
    1a4c:	11 c0       	rjmp	.+34     	; 0x1a70 <__floatsisf+0x6a>
    1a4e:	77 23       	and	r23, r23
    1a50:	21 f0       	breq	.+8      	; 0x1a5a <__floatsisf+0x54>
    1a52:	9e e8       	ldi	r25, 0x8E	; 142
    1a54:	87 2f       	mov	r24, r23
    1a56:	76 2f       	mov	r23, r22
    1a58:	05 c0       	rjmp	.+10     	; 0x1a64 <__floatsisf+0x5e>
    1a5a:	66 23       	and	r22, r22
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <__floatsisf+0x74>
    1a5e:	96 e8       	ldi	r25, 0x86	; 134
    1a60:	86 2f       	mov	r24, r22
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	2a f0       	brmi	.+10     	; 0x1a72 <__floatsisf+0x6c>
    1a68:	9a 95       	dec	r25
    1a6a:	66 0f       	add	r22, r22
    1a6c:	77 1f       	adc	r23, r23
    1a6e:	88 1f       	adc	r24, r24
    1a70:	da f7       	brpl	.-10     	; 0x1a68 <__floatsisf+0x62>
    1a72:	88 0f       	add	r24, r24
    1a74:	96 95       	lsr	r25
    1a76:	87 95       	ror	r24
    1a78:	97 f9       	bld	r25, 7
    1a7a:	08 95       	ret

00001a7c <__fp_inf>:
    1a7c:	97 f9       	bld	r25, 7
    1a7e:	9f 67       	ori	r25, 0x7F	; 127
    1a80:	80 e8       	ldi	r24, 0x80	; 128
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	08 95       	ret

00001a88 <__fp_nan>:
    1a88:	9f ef       	ldi	r25, 0xFF	; 255
    1a8a:	80 ec       	ldi	r24, 0xC0	; 192
    1a8c:	08 95       	ret

00001a8e <__fp_pscA>:
    1a8e:	00 24       	eor	r0, r0
    1a90:	0a 94       	dec	r0
    1a92:	16 16       	cp	r1, r22
    1a94:	17 06       	cpc	r1, r23
    1a96:	18 06       	cpc	r1, r24
    1a98:	09 06       	cpc	r0, r25
    1a9a:	08 95       	ret

00001a9c <__fp_pscB>:
    1a9c:	00 24       	eor	r0, r0
    1a9e:	0a 94       	dec	r0
    1aa0:	12 16       	cp	r1, r18
    1aa2:	13 06       	cpc	r1, r19
    1aa4:	14 06       	cpc	r1, r20
    1aa6:	05 06       	cpc	r0, r21
    1aa8:	08 95       	ret

00001aaa <__fp_round>:
    1aaa:	09 2e       	mov	r0, r25
    1aac:	03 94       	inc	r0
    1aae:	00 0c       	add	r0, r0
    1ab0:	11 f4       	brne	.+4      	; 0x1ab6 <__fp_round+0xc>
    1ab2:	88 23       	and	r24, r24
    1ab4:	52 f0       	brmi	.+20     	; 0x1aca <__fp_round+0x20>
    1ab6:	bb 0f       	add	r27, r27
    1ab8:	40 f4       	brcc	.+16     	; 0x1aca <__fp_round+0x20>
    1aba:	bf 2b       	or	r27, r31
    1abc:	11 f4       	brne	.+4      	; 0x1ac2 <__fp_round+0x18>
    1abe:	60 ff       	sbrs	r22, 0
    1ac0:	04 c0       	rjmp	.+8      	; 0x1aca <__fp_round+0x20>
    1ac2:	6f 5f       	subi	r22, 0xFF	; 255
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	08 95       	ret

00001acc <__fp_split3>:
    1acc:	57 fd       	sbrc	r21, 7
    1ace:	90 58       	subi	r25, 0x80	; 128
    1ad0:	44 0f       	add	r20, r20
    1ad2:	55 1f       	adc	r21, r21
    1ad4:	59 f0       	breq	.+22     	; 0x1aec <__fp_splitA+0x10>
    1ad6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad8:	71 f0       	breq	.+28     	; 0x1af6 <__fp_splitA+0x1a>
    1ada:	47 95       	ror	r20

00001adc <__fp_splitA>:
    1adc:	88 0f       	add	r24, r24
    1ade:	97 fb       	bst	r25, 7
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	61 f0       	breq	.+24     	; 0x1afc <__fp_splitA+0x20>
    1ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae6:	79 f0       	breq	.+30     	; 0x1b06 <__fp_splitA+0x2a>
    1ae8:	87 95       	ror	r24
    1aea:	08 95       	ret
    1aec:	12 16       	cp	r1, r18
    1aee:	13 06       	cpc	r1, r19
    1af0:	14 06       	cpc	r1, r20
    1af2:	55 1f       	adc	r21, r21
    1af4:	f2 cf       	rjmp	.-28     	; 0x1ada <__fp_split3+0xe>
    1af6:	46 95       	lsr	r20
    1af8:	f1 df       	rcall	.-30     	; 0x1adc <__fp_splitA>
    1afa:	08 c0       	rjmp	.+16     	; 0x1b0c <__fp_splitA+0x30>
    1afc:	16 16       	cp	r1, r22
    1afe:	17 06       	cpc	r1, r23
    1b00:	18 06       	cpc	r1, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	f1 cf       	rjmp	.-30     	; 0x1ae8 <__fp_splitA+0xc>
    1b06:	86 95       	lsr	r24
    1b08:	71 05       	cpc	r23, r1
    1b0a:	61 05       	cpc	r22, r1
    1b0c:	08 94       	sec
    1b0e:	08 95       	ret

00001b10 <__fp_zero>:
    1b10:	e8 94       	clt

00001b12 <__fp_szero>:
    1b12:	bb 27       	eor	r27, r27
    1b14:	66 27       	eor	r22, r22
    1b16:	77 27       	eor	r23, r23
    1b18:	cb 01       	movw	r24, r22
    1b1a:	97 f9       	bld	r25, 7
    1b1c:	08 95       	ret

00001b1e <__mulsf3>:
    1b1e:	0b d0       	rcall	.+22     	; 0x1b36 <__mulsf3x>
    1b20:	c4 cf       	rjmp	.-120    	; 0x1aaa <__fp_round>
    1b22:	b5 df       	rcall	.-150    	; 0x1a8e <__fp_pscA>
    1b24:	28 f0       	brcs	.+10     	; 0x1b30 <__mulsf3+0x12>
    1b26:	ba df       	rcall	.-140    	; 0x1a9c <__fp_pscB>
    1b28:	18 f0       	brcs	.+6      	; 0x1b30 <__mulsf3+0x12>
    1b2a:	95 23       	and	r25, r21
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <__mulsf3+0x12>
    1b2e:	a6 cf       	rjmp	.-180    	; 0x1a7c <__fp_inf>
    1b30:	ab cf       	rjmp	.-170    	; 0x1a88 <__fp_nan>
    1b32:	11 24       	eor	r1, r1
    1b34:	ee cf       	rjmp	.-36     	; 0x1b12 <__fp_szero>

00001b36 <__mulsf3x>:
    1b36:	ca df       	rcall	.-108    	; 0x1acc <__fp_split3>
    1b38:	a0 f3       	brcs	.-24     	; 0x1b22 <__mulsf3+0x4>

00001b3a <__mulsf3_pse>:
    1b3a:	95 9f       	mul	r25, r21
    1b3c:	d1 f3       	breq	.-12     	; 0x1b32 <__mulsf3+0x14>
    1b3e:	95 0f       	add	r25, r21
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	55 1f       	adc	r21, r21
    1b44:	62 9f       	mul	r22, r18
    1b46:	f0 01       	movw	r30, r0
    1b48:	72 9f       	mul	r23, r18
    1b4a:	bb 27       	eor	r27, r27
    1b4c:	f0 0d       	add	r31, r0
    1b4e:	b1 1d       	adc	r27, r1
    1b50:	63 9f       	mul	r22, r19
    1b52:	aa 27       	eor	r26, r26
    1b54:	f0 0d       	add	r31, r0
    1b56:	b1 1d       	adc	r27, r1
    1b58:	aa 1f       	adc	r26, r26
    1b5a:	64 9f       	mul	r22, r20
    1b5c:	66 27       	eor	r22, r22
    1b5e:	b0 0d       	add	r27, r0
    1b60:	a1 1d       	adc	r26, r1
    1b62:	66 1f       	adc	r22, r22
    1b64:	82 9f       	mul	r24, r18
    1b66:	22 27       	eor	r18, r18
    1b68:	b0 0d       	add	r27, r0
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	62 1f       	adc	r22, r18
    1b6e:	73 9f       	mul	r23, r19
    1b70:	b0 0d       	add	r27, r0
    1b72:	a1 1d       	adc	r26, r1
    1b74:	62 1f       	adc	r22, r18
    1b76:	83 9f       	mul	r24, r19
    1b78:	a0 0d       	add	r26, r0
    1b7a:	61 1d       	adc	r22, r1
    1b7c:	22 1f       	adc	r18, r18
    1b7e:	74 9f       	mul	r23, r20
    1b80:	33 27       	eor	r19, r19
    1b82:	a0 0d       	add	r26, r0
    1b84:	61 1d       	adc	r22, r1
    1b86:	23 1f       	adc	r18, r19
    1b88:	84 9f       	mul	r24, r20
    1b8a:	60 0d       	add	r22, r0
    1b8c:	21 1d       	adc	r18, r1
    1b8e:	82 2f       	mov	r24, r18
    1b90:	76 2f       	mov	r23, r22
    1b92:	6a 2f       	mov	r22, r26
    1b94:	11 24       	eor	r1, r1
    1b96:	9f 57       	subi	r25, 0x7F	; 127
    1b98:	50 40       	sbci	r21, 0x00	; 0
    1b9a:	8a f0       	brmi	.+34     	; 0x1bbe <__mulsf3_pse+0x84>
    1b9c:	e1 f0       	breq	.+56     	; 0x1bd6 <__mulsf3_pse+0x9c>
    1b9e:	88 23       	and	r24, r24
    1ba0:	4a f0       	brmi	.+18     	; 0x1bb4 <__mulsf3_pse+0x7a>
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	bb 1f       	adc	r27, r27
    1ba8:	66 1f       	adc	r22, r22
    1baa:	77 1f       	adc	r23, r23
    1bac:	88 1f       	adc	r24, r24
    1bae:	91 50       	subi	r25, 0x01	; 1
    1bb0:	50 40       	sbci	r21, 0x00	; 0
    1bb2:	a9 f7       	brne	.-22     	; 0x1b9e <__mulsf3_pse+0x64>
    1bb4:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb6:	51 05       	cpc	r21, r1
    1bb8:	70 f0       	brcs	.+28     	; 0x1bd6 <__mulsf3_pse+0x9c>
    1bba:	60 cf       	rjmp	.-320    	; 0x1a7c <__fp_inf>
    1bbc:	aa cf       	rjmp	.-172    	; 0x1b12 <__fp_szero>
    1bbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc0:	ec f3       	brlt	.-6      	; 0x1bbc <__mulsf3_pse+0x82>
    1bc2:	98 3e       	cpi	r25, 0xE8	; 232
    1bc4:	dc f3       	brlt	.-10     	; 0x1bbc <__mulsf3_pse+0x82>
    1bc6:	86 95       	lsr	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	b7 95       	ror	r27
    1bce:	f7 95       	ror	r31
    1bd0:	e7 95       	ror	r30
    1bd2:	9f 5f       	subi	r25, 0xFF	; 255
    1bd4:	c1 f7       	brne	.-16     	; 0x1bc6 <__mulsf3_pse+0x8c>
    1bd6:	fe 2b       	or	r31, r30
    1bd8:	88 0f       	add	r24, r24
    1bda:	91 1d       	adc	r25, r1
    1bdc:	96 95       	lsr	r25
    1bde:	87 95       	ror	r24
    1be0:	97 f9       	bld	r25, 7
    1be2:	08 95       	ret

00001be4 <calloc>:
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	86 9f       	mul	r24, r22
    1bee:	80 01       	movw	r16, r0
    1bf0:	87 9f       	mul	r24, r23
    1bf2:	10 0d       	add	r17, r0
    1bf4:	96 9f       	mul	r25, r22
    1bf6:	10 0d       	add	r17, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	0d d0       	rcall	.+26     	; 0x1c18 <malloc>
    1bfe:	ec 01       	movw	r28, r24
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	21 f0       	breq	.+8      	; 0x1c0c <calloc+0x28>
    1c04:	a8 01       	movw	r20, r16
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	34 d1       	rcall	.+616    	; 0x1e74 <memset>
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <malloc>:
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	82 30       	cpi	r24, 0x02	; 2
    1c22:	91 05       	cpc	r25, r1
    1c24:	10 f4       	brcc	.+4      	; 0x1c2a <malloc+0x12>
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <__flp>
    1c2e:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <__flp+0x1>
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	30 97       	sbiw	r30, 0x00	; 0
    1c3c:	19 f1       	breq	.+70     	; 0x1c84 <malloc+0x6c>
    1c3e:	40 81       	ld	r20, Z
    1c40:	51 81       	ldd	r21, Z+1	; 0x01
    1c42:	02 81       	ldd	r16, Z+2	; 0x02
    1c44:	13 81       	ldd	r17, Z+3	; 0x03
    1c46:	48 17       	cp	r20, r24
    1c48:	59 07       	cpc	r21, r25
    1c4a:	c8 f0       	brcs	.+50     	; 0x1c7e <malloc+0x66>
    1c4c:	84 17       	cp	r24, r20
    1c4e:	95 07       	cpc	r25, r21
    1c50:	69 f4       	brne	.+26     	; 0x1c6c <malloc+0x54>
    1c52:	10 97       	sbiw	r26, 0x00	; 0
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <malloc+0x4a>
    1c56:	12 96       	adiw	r26, 0x02	; 2
    1c58:	0c 93       	st	X, r16
    1c5a:	12 97       	sbiw	r26, 0x02	; 2
    1c5c:	13 96       	adiw	r26, 0x03	; 3
    1c5e:	1c 93       	st	X, r17
    1c60:	27 c0       	rjmp	.+78     	; 0x1cb0 <malloc+0x98>
    1c62:	00 93 c2 02 	sts	0x02C2, r16	; 0x8002c2 <__flp>
    1c66:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <__flp+0x1>
    1c6a:	22 c0       	rjmp	.+68     	; 0x1cb0 <malloc+0x98>
    1c6c:	21 15       	cp	r18, r1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <malloc+0x60>
    1c72:	42 17       	cp	r20, r18
    1c74:	53 07       	cpc	r21, r19
    1c76:	18 f4       	brcc	.+6      	; 0x1c7e <malloc+0x66>
    1c78:	9a 01       	movw	r18, r20
    1c7a:	bd 01       	movw	r22, r26
    1c7c:	ef 01       	movw	r28, r30
    1c7e:	df 01       	movw	r26, r30
    1c80:	f8 01       	movw	r30, r16
    1c82:	db cf       	rjmp	.-74     	; 0x1c3a <malloc+0x22>
    1c84:	21 15       	cp	r18, r1
    1c86:	31 05       	cpc	r19, r1
    1c88:	f9 f0       	breq	.+62     	; 0x1cc8 <malloc+0xb0>
    1c8a:	28 1b       	sub	r18, r24
    1c8c:	39 0b       	sbc	r19, r25
    1c8e:	24 30       	cpi	r18, 0x04	; 4
    1c90:	31 05       	cpc	r19, r1
    1c92:	80 f4       	brcc	.+32     	; 0x1cb4 <malloc+0x9c>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	61 15       	cp	r22, r1
    1c9a:	71 05       	cpc	r23, r1
    1c9c:	21 f0       	breq	.+8      	; 0x1ca6 <malloc+0x8e>
    1c9e:	fb 01       	movw	r30, r22
    1ca0:	93 83       	std	Z+3, r25	; 0x03
    1ca2:	82 83       	std	Z+2, r24	; 0x02
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <malloc+0x96>
    1ca6:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <__flp+0x1>
    1caa:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__flp>
    1cae:	fe 01       	movw	r30, r28
    1cb0:	32 96       	adiw	r30, 0x02	; 2
    1cb2:	44 c0       	rjmp	.+136    	; 0x1d3c <malloc+0x124>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e2 0f       	add	r30, r18
    1cb8:	f3 1f       	adc	r31, r19
    1cba:	81 93       	st	Z+, r24
    1cbc:	91 93       	st	Z+, r25
    1cbe:	22 50       	subi	r18, 0x02	; 2
    1cc0:	31 09       	sbc	r19, r1
    1cc2:	39 83       	std	Y+1, r19	; 0x01
    1cc4:	28 83       	st	Y, r18
    1cc6:	3a c0       	rjmp	.+116    	; 0x1d3c <malloc+0x124>
    1cc8:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    1ccc:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1cd0:	23 2b       	or	r18, r19
    1cd2:	41 f4       	brne	.+16     	; 0x1ce4 <malloc+0xcc>
    1cd4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1cd8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1cdc:	30 93 c1 02 	sts	0x02C1, r19	; 0x8002c1 <__brkval+0x1>
    1ce0:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <__brkval>
    1ce4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1ce8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1cec:	21 15       	cp	r18, r1
    1cee:	31 05       	cpc	r19, r1
    1cf0:	41 f4       	brne	.+16     	; 0x1d02 <malloc+0xea>
    1cf2:	2d b7       	in	r18, 0x3d	; 61
    1cf4:	3e b7       	in	r19, 0x3e	; 62
    1cf6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1cfa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1cfe:	24 1b       	sub	r18, r20
    1d00:	35 0b       	sbc	r19, r21
    1d02:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <__brkval>
    1d06:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1d0a:	e2 17       	cp	r30, r18
    1d0c:	f3 07       	cpc	r31, r19
    1d0e:	a0 f4       	brcc	.+40     	; 0x1d38 <malloc+0x120>
    1d10:	2e 1b       	sub	r18, r30
    1d12:	3f 0b       	sbc	r19, r31
    1d14:	28 17       	cp	r18, r24
    1d16:	39 07       	cpc	r19, r25
    1d18:	78 f0       	brcs	.+30     	; 0x1d38 <malloc+0x120>
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	4e 5f       	subi	r20, 0xFE	; 254
    1d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d20:	24 17       	cp	r18, r20
    1d22:	35 07       	cpc	r19, r21
    1d24:	48 f0       	brcs	.+18     	; 0x1d38 <malloc+0x120>
    1d26:	4e 0f       	add	r20, r30
    1d28:	5f 1f       	adc	r21, r31
    1d2a:	50 93 c1 02 	sts	0x02C1, r21	; 0x8002c1 <__brkval+0x1>
    1d2e:	40 93 c0 02 	sts	0x02C0, r20	; 0x8002c0 <__brkval>
    1d32:	81 93       	st	Z+, r24
    1d34:	91 93       	st	Z+, r25
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <malloc+0x124>
    1d38:	e0 e0       	ldi	r30, 0x00	; 0
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	cf 01       	movw	r24, r30
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	08 95       	ret

00001d48 <free>:
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <free+0xa>
    1d50:	81 c0       	rjmp	.+258    	; 0x1e54 <free+0x10c>
    1d52:	fc 01       	movw	r30, r24
    1d54:	32 97       	sbiw	r30, 0x02	; 2
    1d56:	13 82       	std	Z+3, r1	; 0x03
    1d58:	12 82       	std	Z+2, r1	; 0x02
    1d5a:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <__flp>
    1d5e:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <__flp+0x1>
    1d62:	10 97       	sbiw	r26, 0x00	; 0
    1d64:	81 f4       	brne	.+32     	; 0x1d86 <free+0x3e>
    1d66:	20 81       	ld	r18, Z
    1d68:	31 81       	ldd	r19, Z+1	; 0x01
    1d6a:	82 0f       	add	r24, r18
    1d6c:	93 1f       	adc	r25, r19
    1d6e:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    1d72:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1d76:	28 17       	cp	r18, r24
    1d78:	39 07       	cpc	r19, r25
    1d7a:	51 f5       	brne	.+84     	; 0x1dd0 <free+0x88>
    1d7c:	f0 93 c1 02 	sts	0x02C1, r31	; 0x8002c1 <__brkval+0x1>
    1d80:	e0 93 c0 02 	sts	0x02C0, r30	; 0x8002c0 <__brkval>
    1d84:	67 c0       	rjmp	.+206    	; 0x1e54 <free+0x10c>
    1d86:	ed 01       	movw	r28, r26
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	ce 17       	cp	r28, r30
    1d8e:	df 07       	cpc	r29, r31
    1d90:	40 f4       	brcc	.+16     	; 0x1da2 <free+0x5a>
    1d92:	4a 81       	ldd	r20, Y+2	; 0x02
    1d94:	5b 81       	ldd	r21, Y+3	; 0x03
    1d96:	9e 01       	movw	r18, r28
    1d98:	41 15       	cp	r20, r1
    1d9a:	51 05       	cpc	r21, r1
    1d9c:	f1 f0       	breq	.+60     	; 0x1dda <free+0x92>
    1d9e:	ea 01       	movw	r28, r20
    1da0:	f5 cf       	rjmp	.-22     	; 0x1d8c <free+0x44>
    1da2:	d3 83       	std	Z+3, r29	; 0x03
    1da4:	c2 83       	std	Z+2, r28	; 0x02
    1da6:	40 81       	ld	r20, Z
    1da8:	51 81       	ldd	r21, Z+1	; 0x01
    1daa:	84 0f       	add	r24, r20
    1dac:	95 1f       	adc	r25, r21
    1dae:	c8 17       	cp	r28, r24
    1db0:	d9 07       	cpc	r29, r25
    1db2:	59 f4       	brne	.+22     	; 0x1dca <free+0x82>
    1db4:	88 81       	ld	r24, Y
    1db6:	99 81       	ldd	r25, Y+1	; 0x01
    1db8:	84 0f       	add	r24, r20
    1dba:	95 1f       	adc	r25, r21
    1dbc:	02 96       	adiw	r24, 0x02	; 2
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	93 83       	std	Z+3, r25	; 0x03
    1dc8:	82 83       	std	Z+2, r24	; 0x02
    1dca:	21 15       	cp	r18, r1
    1dcc:	31 05       	cpc	r19, r1
    1dce:	29 f4       	brne	.+10     	; 0x1dda <free+0x92>
    1dd0:	f0 93 c3 02 	sts	0x02C3, r31	; 0x8002c3 <__flp+0x1>
    1dd4:	e0 93 c2 02 	sts	0x02C2, r30	; 0x8002c2 <__flp>
    1dd8:	3d c0       	rjmp	.+122    	; 0x1e54 <free+0x10c>
    1dda:	e9 01       	movw	r28, r18
    1ddc:	fb 83       	std	Y+3, r31	; 0x03
    1dde:	ea 83       	std	Y+2, r30	; 0x02
    1de0:	49 91       	ld	r20, Y+
    1de2:	59 91       	ld	r21, Y+
    1de4:	c4 0f       	add	r28, r20
    1de6:	d5 1f       	adc	r29, r21
    1de8:	ec 17       	cp	r30, r28
    1dea:	fd 07       	cpc	r31, r29
    1dec:	61 f4       	brne	.+24     	; 0x1e06 <free+0xbe>
    1dee:	80 81       	ld	r24, Z
    1df0:	91 81       	ldd	r25, Z+1	; 0x01
    1df2:	84 0f       	add	r24, r20
    1df4:	95 1f       	adc	r25, r21
    1df6:	02 96       	adiw	r24, 0x02	; 2
    1df8:	e9 01       	movw	r28, r18
    1dfa:	99 83       	std	Y+1, r25	; 0x01
    1dfc:	88 83       	st	Y, r24
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	9b 83       	std	Y+3, r25	; 0x03
    1e04:	8a 83       	std	Y+2, r24	; 0x02
    1e06:	e0 e0       	ldi	r30, 0x00	; 0
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	12 96       	adiw	r26, 0x02	; 2
    1e0c:	8d 91       	ld	r24, X+
    1e0e:	9c 91       	ld	r25, X
    1e10:	13 97       	sbiw	r26, 0x03	; 3
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	19 f0       	breq	.+6      	; 0x1e1c <free+0xd4>
    1e16:	fd 01       	movw	r30, r26
    1e18:	dc 01       	movw	r26, r24
    1e1a:	f7 cf       	rjmp	.-18     	; 0x1e0a <free+0xc2>
    1e1c:	8d 91       	ld	r24, X+
    1e1e:	9c 91       	ld	r25, X
    1e20:	11 97       	sbiw	r26, 0x01	; 1
    1e22:	9d 01       	movw	r18, r26
    1e24:	2e 5f       	subi	r18, 0xFE	; 254
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	82 0f       	add	r24, r18
    1e2a:	93 1f       	adc	r25, r19
    1e2c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__brkval>
    1e30:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <__brkval+0x1>
    1e34:	28 17       	cp	r18, r24
    1e36:	39 07       	cpc	r19, r25
    1e38:	69 f4       	brne	.+26     	; 0x1e54 <free+0x10c>
    1e3a:	30 97       	sbiw	r30, 0x00	; 0
    1e3c:	29 f4       	brne	.+10     	; 0x1e48 <free+0x100>
    1e3e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <__flp+0x1>
    1e42:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <__flp>
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <free+0x104>
    1e48:	13 82       	std	Z+3, r1	; 0x03
    1e4a:	12 82       	std	Z+2, r1	; 0x02
    1e4c:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <__brkval+0x1>
    1e50:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <__brkval>
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <abort>:
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	f8 94       	cli
    1e60:	d0 c2       	rjmp	.+1440   	; 0x2402 <_exit>

00001e62 <memcpy>:
    1e62:	fb 01       	movw	r30, r22
    1e64:	dc 01       	movw	r26, r24
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <memcpy+0xa>
    1e68:	01 90       	ld	r0, Z+
    1e6a:	0d 92       	st	X+, r0
    1e6c:	41 50       	subi	r20, 0x01	; 1
    1e6e:	50 40       	sbci	r21, 0x00	; 0
    1e70:	d8 f7       	brcc	.-10     	; 0x1e68 <memcpy+0x6>
    1e72:	08 95       	ret

00001e74 <memset>:
    1e74:	dc 01       	movw	r26, r24
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <memset+0x6>
    1e78:	6d 93       	st	X+, r22
    1e7a:	41 50       	subi	r20, 0x01	; 1
    1e7c:	50 40       	sbci	r21, 0x00	; 0
    1e7e:	e0 f7       	brcc	.-8      	; 0x1e78 <memset+0x4>
    1e80:	08 95       	ret

00001e82 <printf>:
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	ae 01       	movw	r20, r28
    1e8c:	4a 5f       	subi	r20, 0xFA	; 250
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	fa 01       	movw	r30, r20
    1e92:	61 91       	ld	r22, Z+
    1e94:	71 91       	ld	r23, Z+
    1e96:	af 01       	movw	r20, r30
    1e98:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__iob+0x2>
    1e9c:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <__iob+0x3>
    1ea0:	03 d0       	rcall	.+6      	; 0x1ea8 <vfprintf>
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <vfprintf>:
    1ea8:	2f 92       	push	r2
    1eaa:	3f 92       	push	r3
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	6c 01       	movw	r12, r24
    1ede:	7b 01       	movw	r14, r22
    1ee0:	8a 01       	movw	r16, r20
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	17 82       	std	Z+7, r1	; 0x07
    1ee6:	16 82       	std	Z+6, r1	; 0x06
    1ee8:	83 81       	ldd	r24, Z+3	; 0x03
    1eea:	81 ff       	sbrs	r24, 1
    1eec:	bf c1       	rjmp	.+894    	; 0x226c <__stack+0x6d>
    1eee:	ce 01       	movw	r24, r28
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	3c 01       	movw	r6, r24
    1ef4:	f6 01       	movw	r30, r12
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	f7 01       	movw	r30, r14
    1efa:	93 fd       	sbrc	r25, 3
    1efc:	85 91       	lpm	r24, Z+
    1efe:	93 ff       	sbrs	r25, 3
    1f00:	81 91       	ld	r24, Z+
    1f02:	7f 01       	movw	r14, r30
    1f04:	88 23       	and	r24, r24
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <vfprintf+0x62>
    1f08:	ad c1       	rjmp	.+858    	; 0x2264 <__stack+0x65>
    1f0a:	85 32       	cpi	r24, 0x25	; 37
    1f0c:	39 f4       	brne	.+14     	; 0x1f1c <vfprintf+0x74>
    1f0e:	93 fd       	sbrc	r25, 3
    1f10:	85 91       	lpm	r24, Z+
    1f12:	93 ff       	sbrs	r25, 3
    1f14:	81 91       	ld	r24, Z+
    1f16:	7f 01       	movw	r14, r30
    1f18:	85 32       	cpi	r24, 0x25	; 37
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <vfprintf+0x7c>
    1f1c:	b6 01       	movw	r22, r12
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	d6 d1       	rcall	.+940    	; 0x22ce <fputc>
    1f22:	e8 cf       	rjmp	.-48     	; 0x1ef4 <vfprintf+0x4c>
    1f24:	91 2c       	mov	r9, r1
    1f26:	21 2c       	mov	r2, r1
    1f28:	31 2c       	mov	r3, r1
    1f2a:	ff e1       	ldi	r31, 0x1F	; 31
    1f2c:	f3 15       	cp	r31, r3
    1f2e:	d8 f0       	brcs	.+54     	; 0x1f66 <vfprintf+0xbe>
    1f30:	8b 32       	cpi	r24, 0x2B	; 43
    1f32:	79 f0       	breq	.+30     	; 0x1f52 <vfprintf+0xaa>
    1f34:	38 f4       	brcc	.+14     	; 0x1f44 <vfprintf+0x9c>
    1f36:	80 32       	cpi	r24, 0x20	; 32
    1f38:	79 f0       	breq	.+30     	; 0x1f58 <vfprintf+0xb0>
    1f3a:	83 32       	cpi	r24, 0x23	; 35
    1f3c:	a1 f4       	brne	.+40     	; 0x1f66 <vfprintf+0xbe>
    1f3e:	23 2d       	mov	r18, r3
    1f40:	20 61       	ori	r18, 0x10	; 16
    1f42:	1d c0       	rjmp	.+58     	; 0x1f7e <vfprintf+0xd6>
    1f44:	8d 32       	cpi	r24, 0x2D	; 45
    1f46:	61 f0       	breq	.+24     	; 0x1f60 <vfprintf+0xb8>
    1f48:	80 33       	cpi	r24, 0x30	; 48
    1f4a:	69 f4       	brne	.+26     	; 0x1f66 <vfprintf+0xbe>
    1f4c:	23 2d       	mov	r18, r3
    1f4e:	21 60       	ori	r18, 0x01	; 1
    1f50:	16 c0       	rjmp	.+44     	; 0x1f7e <vfprintf+0xd6>
    1f52:	83 2d       	mov	r24, r3
    1f54:	82 60       	ori	r24, 0x02	; 2
    1f56:	38 2e       	mov	r3, r24
    1f58:	e3 2d       	mov	r30, r3
    1f5a:	e4 60       	ori	r30, 0x04	; 4
    1f5c:	3e 2e       	mov	r3, r30
    1f5e:	2a c0       	rjmp	.+84     	; 0x1fb4 <vfprintf+0x10c>
    1f60:	f3 2d       	mov	r31, r3
    1f62:	f8 60       	ori	r31, 0x08	; 8
    1f64:	1d c0       	rjmp	.+58     	; 0x1fa0 <vfprintf+0xf8>
    1f66:	37 fc       	sbrc	r3, 7
    1f68:	2d c0       	rjmp	.+90     	; 0x1fc4 <vfprintf+0x11c>
    1f6a:	20 ed       	ldi	r18, 0xD0	; 208
    1f6c:	28 0f       	add	r18, r24
    1f6e:	2a 30       	cpi	r18, 0x0A	; 10
    1f70:	40 f0       	brcs	.+16     	; 0x1f82 <vfprintf+0xda>
    1f72:	8e 32       	cpi	r24, 0x2E	; 46
    1f74:	b9 f4       	brne	.+46     	; 0x1fa4 <vfprintf+0xfc>
    1f76:	36 fc       	sbrc	r3, 6
    1f78:	75 c1       	rjmp	.+746    	; 0x2264 <__stack+0x65>
    1f7a:	23 2d       	mov	r18, r3
    1f7c:	20 64       	ori	r18, 0x40	; 64
    1f7e:	32 2e       	mov	r3, r18
    1f80:	19 c0       	rjmp	.+50     	; 0x1fb4 <vfprintf+0x10c>
    1f82:	36 fe       	sbrs	r3, 6
    1f84:	06 c0       	rjmp	.+12     	; 0x1f92 <vfprintf+0xea>
    1f86:	8a e0       	ldi	r24, 0x0A	; 10
    1f88:	98 9e       	mul	r9, r24
    1f8a:	20 0d       	add	r18, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	92 2e       	mov	r9, r18
    1f90:	11 c0       	rjmp	.+34     	; 0x1fb4 <vfprintf+0x10c>
    1f92:	ea e0       	ldi	r30, 0x0A	; 10
    1f94:	2e 9e       	mul	r2, r30
    1f96:	20 0d       	add	r18, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	22 2e       	mov	r2, r18
    1f9c:	f3 2d       	mov	r31, r3
    1f9e:	f0 62       	ori	r31, 0x20	; 32
    1fa0:	3f 2e       	mov	r3, r31
    1fa2:	08 c0       	rjmp	.+16     	; 0x1fb4 <vfprintf+0x10c>
    1fa4:	8c 36       	cpi	r24, 0x6C	; 108
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <vfprintf+0x108>
    1fa8:	83 2d       	mov	r24, r3
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	38 2e       	mov	r3, r24
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <vfprintf+0x10c>
    1fb0:	88 36       	cpi	r24, 0x68	; 104
    1fb2:	41 f4       	brne	.+16     	; 0x1fc4 <vfprintf+0x11c>
    1fb4:	f7 01       	movw	r30, r14
    1fb6:	93 fd       	sbrc	r25, 3
    1fb8:	85 91       	lpm	r24, Z+
    1fba:	93 ff       	sbrs	r25, 3
    1fbc:	81 91       	ld	r24, Z+
    1fbe:	7f 01       	movw	r14, r30
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	b3 cf       	rjmp	.-154    	; 0x1f2a <vfprintf+0x82>
    1fc4:	98 2f       	mov	r25, r24
    1fc6:	9f 7d       	andi	r25, 0xDF	; 223
    1fc8:	95 54       	subi	r25, 0x45	; 69
    1fca:	93 30       	cpi	r25, 0x03	; 3
    1fcc:	28 f4       	brcc	.+10     	; 0x1fd8 <vfprintf+0x130>
    1fce:	0c 5f       	subi	r16, 0xFC	; 252
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	9f e3       	ldi	r25, 0x3F	; 63
    1fd4:	99 83       	std	Y+1, r25	; 0x01
    1fd6:	0d c0       	rjmp	.+26     	; 0x1ff2 <vfprintf+0x14a>
    1fd8:	83 36       	cpi	r24, 0x63	; 99
    1fda:	31 f0       	breq	.+12     	; 0x1fe8 <vfprintf+0x140>
    1fdc:	83 37       	cpi	r24, 0x73	; 115
    1fde:	71 f0       	breq	.+28     	; 0x1ffc <vfprintf+0x154>
    1fe0:	83 35       	cpi	r24, 0x53	; 83
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <vfprintf+0x13e>
    1fe4:	55 c0       	rjmp	.+170    	; 0x2090 <vfprintf+0x1e8>
    1fe6:	20 c0       	rjmp	.+64     	; 0x2028 <vfprintf+0x180>
    1fe8:	f8 01       	movw	r30, r16
    1fea:	80 81       	ld	r24, Z
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	0e 5f       	subi	r16, 0xFE	; 254
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	88 24       	eor	r8, r8
    1ff4:	83 94       	inc	r8
    1ff6:	91 2c       	mov	r9, r1
    1ff8:	53 01       	movw	r10, r6
    1ffa:	12 c0       	rjmp	.+36     	; 0x2020 <vfprintf+0x178>
    1ffc:	28 01       	movw	r4, r16
    1ffe:	f2 e0       	ldi	r31, 0x02	; 2
    2000:	4f 0e       	add	r4, r31
    2002:	51 1c       	adc	r5, r1
    2004:	f8 01       	movw	r30, r16
    2006:	a0 80       	ld	r10, Z
    2008:	b1 80       	ldd	r11, Z+1	; 0x01
    200a:	36 fe       	sbrs	r3, 6
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <vfprintf+0x16c>
    200e:	69 2d       	mov	r22, r9
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <vfprintf+0x170>
    2014:	6f ef       	ldi	r22, 0xFF	; 255
    2016:	7f ef       	ldi	r23, 0xFF	; 255
    2018:	c5 01       	movw	r24, r10
    201a:	4e d1       	rcall	.+668    	; 0x22b8 <strnlen>
    201c:	4c 01       	movw	r8, r24
    201e:	82 01       	movw	r16, r4
    2020:	f3 2d       	mov	r31, r3
    2022:	ff 77       	andi	r31, 0x7F	; 127
    2024:	3f 2e       	mov	r3, r31
    2026:	15 c0       	rjmp	.+42     	; 0x2052 <vfprintf+0x1aa>
    2028:	28 01       	movw	r4, r16
    202a:	22 e0       	ldi	r18, 0x02	; 2
    202c:	42 0e       	add	r4, r18
    202e:	51 1c       	adc	r5, r1
    2030:	f8 01       	movw	r30, r16
    2032:	a0 80       	ld	r10, Z
    2034:	b1 80       	ldd	r11, Z+1	; 0x01
    2036:	36 fe       	sbrs	r3, 6
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <vfprintf+0x198>
    203a:	69 2d       	mov	r22, r9
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <vfprintf+0x19c>
    2040:	6f ef       	ldi	r22, 0xFF	; 255
    2042:	7f ef       	ldi	r23, 0xFF	; 255
    2044:	c5 01       	movw	r24, r10
    2046:	2d d1       	rcall	.+602    	; 0x22a2 <strnlen_P>
    2048:	4c 01       	movw	r8, r24
    204a:	f3 2d       	mov	r31, r3
    204c:	f0 68       	ori	r31, 0x80	; 128
    204e:	3f 2e       	mov	r3, r31
    2050:	82 01       	movw	r16, r4
    2052:	33 fc       	sbrc	r3, 3
    2054:	19 c0       	rjmp	.+50     	; 0x2088 <vfprintf+0x1e0>
    2056:	82 2d       	mov	r24, r2
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	88 16       	cp	r8, r24
    205c:	99 06       	cpc	r9, r25
    205e:	a0 f4       	brcc	.+40     	; 0x2088 <vfprintf+0x1e0>
    2060:	b6 01       	movw	r22, r12
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	33 d1       	rcall	.+614    	; 0x22ce <fputc>
    2068:	2a 94       	dec	r2
    206a:	f5 cf       	rjmp	.-22     	; 0x2056 <vfprintf+0x1ae>
    206c:	f5 01       	movw	r30, r10
    206e:	37 fc       	sbrc	r3, 7
    2070:	85 91       	lpm	r24, Z+
    2072:	37 fe       	sbrs	r3, 7
    2074:	81 91       	ld	r24, Z+
    2076:	5f 01       	movw	r10, r30
    2078:	b6 01       	movw	r22, r12
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	28 d1       	rcall	.+592    	; 0x22ce <fputc>
    207e:	21 10       	cpse	r2, r1
    2080:	2a 94       	dec	r2
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	82 1a       	sub	r8, r18
    2086:	91 08       	sbc	r9, r1
    2088:	81 14       	cp	r8, r1
    208a:	91 04       	cpc	r9, r1
    208c:	79 f7       	brne	.-34     	; 0x206c <vfprintf+0x1c4>
    208e:	e1 c0       	rjmp	.+450    	; 0x2252 <__stack+0x53>
    2090:	84 36       	cpi	r24, 0x64	; 100
    2092:	11 f0       	breq	.+4      	; 0x2098 <vfprintf+0x1f0>
    2094:	89 36       	cpi	r24, 0x69	; 105
    2096:	39 f5       	brne	.+78     	; 0x20e6 <vfprintf+0x23e>
    2098:	f8 01       	movw	r30, r16
    209a:	37 fe       	sbrs	r3, 7
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <vfprintf+0x204>
    209e:	60 81       	ld	r22, Z
    20a0:	71 81       	ldd	r23, Z+1	; 0x01
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	0c 5f       	subi	r16, 0xFC	; 252
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	08 c0       	rjmp	.+16     	; 0x20bc <vfprintf+0x214>
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	07 2e       	mov	r0, r23
    20b2:	00 0c       	add	r0, r0
    20b4:	88 0b       	sbc	r24, r24
    20b6:	99 0b       	sbc	r25, r25
    20b8:	0e 5f       	subi	r16, 0xFE	; 254
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	f3 2d       	mov	r31, r3
    20be:	ff 76       	andi	r31, 0x6F	; 111
    20c0:	3f 2e       	mov	r3, r31
    20c2:	97 ff       	sbrs	r25, 7
    20c4:	09 c0       	rjmp	.+18     	; 0x20d8 <vfprintf+0x230>
    20c6:	90 95       	com	r25
    20c8:	80 95       	com	r24
    20ca:	70 95       	com	r23
    20cc:	61 95       	neg	r22
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	8f 4f       	sbci	r24, 0xFF	; 255
    20d2:	9f 4f       	sbci	r25, 0xFF	; 255
    20d4:	f0 68       	ori	r31, 0x80	; 128
    20d6:	3f 2e       	mov	r3, r31
    20d8:	2a e0       	ldi	r18, 0x0A	; 10
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	a3 01       	movw	r20, r6
    20de:	33 d1       	rcall	.+614    	; 0x2346 <__ultoa_invert>
    20e0:	88 2e       	mov	r8, r24
    20e2:	86 18       	sub	r8, r6
    20e4:	44 c0       	rjmp	.+136    	; 0x216e <vfprintf+0x2c6>
    20e6:	85 37       	cpi	r24, 0x75	; 117
    20e8:	31 f4       	brne	.+12     	; 0x20f6 <vfprintf+0x24e>
    20ea:	23 2d       	mov	r18, r3
    20ec:	2f 7e       	andi	r18, 0xEF	; 239
    20ee:	b2 2e       	mov	r11, r18
    20f0:	2a e0       	ldi	r18, 0x0A	; 10
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	25 c0       	rjmp	.+74     	; 0x2140 <vfprintf+0x298>
    20f6:	93 2d       	mov	r25, r3
    20f8:	99 7f       	andi	r25, 0xF9	; 249
    20fa:	b9 2e       	mov	r11, r25
    20fc:	8f 36       	cpi	r24, 0x6F	; 111
    20fe:	c1 f0       	breq	.+48     	; 0x2130 <vfprintf+0x288>
    2100:	18 f4       	brcc	.+6      	; 0x2108 <vfprintf+0x260>
    2102:	88 35       	cpi	r24, 0x58	; 88
    2104:	79 f0       	breq	.+30     	; 0x2124 <vfprintf+0x27c>
    2106:	ae c0       	rjmp	.+348    	; 0x2264 <__stack+0x65>
    2108:	80 37       	cpi	r24, 0x70	; 112
    210a:	19 f0       	breq	.+6      	; 0x2112 <vfprintf+0x26a>
    210c:	88 37       	cpi	r24, 0x78	; 120
    210e:	21 f0       	breq	.+8      	; 0x2118 <vfprintf+0x270>
    2110:	a9 c0       	rjmp	.+338    	; 0x2264 <__stack+0x65>
    2112:	e9 2f       	mov	r30, r25
    2114:	e0 61       	ori	r30, 0x10	; 16
    2116:	be 2e       	mov	r11, r30
    2118:	b4 fe       	sbrs	r11, 4
    211a:	0d c0       	rjmp	.+26     	; 0x2136 <vfprintf+0x28e>
    211c:	fb 2d       	mov	r31, r11
    211e:	f4 60       	ori	r31, 0x04	; 4
    2120:	bf 2e       	mov	r11, r31
    2122:	09 c0       	rjmp	.+18     	; 0x2136 <vfprintf+0x28e>
    2124:	34 fe       	sbrs	r3, 4
    2126:	0a c0       	rjmp	.+20     	; 0x213c <vfprintf+0x294>
    2128:	29 2f       	mov	r18, r25
    212a:	26 60       	ori	r18, 0x06	; 6
    212c:	b2 2e       	mov	r11, r18
    212e:	06 c0       	rjmp	.+12     	; 0x213c <vfprintf+0x294>
    2130:	28 e0       	ldi	r18, 0x08	; 8
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <vfprintf+0x298>
    2136:	20 e1       	ldi	r18, 0x10	; 16
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <vfprintf+0x298>
    213c:	20 e1       	ldi	r18, 0x10	; 16
    213e:	32 e0       	ldi	r19, 0x02	; 2
    2140:	f8 01       	movw	r30, r16
    2142:	b7 fe       	sbrs	r11, 7
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <vfprintf+0x2ac>
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	0c 5f       	subi	r16, 0xFC	; 252
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <vfprintf+0x2b8>
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 5f       	subi	r16, 0xFE	; 254
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	a3 01       	movw	r20, r6
    2162:	f1 d0       	rcall	.+482    	; 0x2346 <__ultoa_invert>
    2164:	88 2e       	mov	r8, r24
    2166:	86 18       	sub	r8, r6
    2168:	fb 2d       	mov	r31, r11
    216a:	ff 77       	andi	r31, 0x7F	; 127
    216c:	3f 2e       	mov	r3, r31
    216e:	36 fe       	sbrs	r3, 6
    2170:	0d c0       	rjmp	.+26     	; 0x218c <vfprintf+0x2e4>
    2172:	23 2d       	mov	r18, r3
    2174:	2e 7f       	andi	r18, 0xFE	; 254
    2176:	a2 2e       	mov	r10, r18
    2178:	89 14       	cp	r8, r9
    217a:	58 f4       	brcc	.+22     	; 0x2192 <vfprintf+0x2ea>
    217c:	34 fe       	sbrs	r3, 4
    217e:	0b c0       	rjmp	.+22     	; 0x2196 <vfprintf+0x2ee>
    2180:	32 fc       	sbrc	r3, 2
    2182:	09 c0       	rjmp	.+18     	; 0x2196 <vfprintf+0x2ee>
    2184:	83 2d       	mov	r24, r3
    2186:	8e 7e       	andi	r24, 0xEE	; 238
    2188:	a8 2e       	mov	r10, r24
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <vfprintf+0x2ee>
    218c:	b8 2c       	mov	r11, r8
    218e:	a3 2c       	mov	r10, r3
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <vfprintf+0x2f0>
    2192:	b8 2c       	mov	r11, r8
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <vfprintf+0x2f0>
    2196:	b9 2c       	mov	r11, r9
    2198:	a4 fe       	sbrs	r10, 4
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <vfprintf+0x312>
    219c:	fe 01       	movw	r30, r28
    219e:	e8 0d       	add	r30, r8
    21a0:	f1 1d       	adc	r31, r1
    21a2:	80 81       	ld	r24, Z
    21a4:	80 33       	cpi	r24, 0x30	; 48
    21a6:	21 f4       	brne	.+8      	; 0x21b0 <vfprintf+0x308>
    21a8:	9a 2d       	mov	r25, r10
    21aa:	99 7e       	andi	r25, 0xE9	; 233
    21ac:	a9 2e       	mov	r10, r25
    21ae:	09 c0       	rjmp	.+18     	; 0x21c2 <vfprintf+0x31a>
    21b0:	a2 fe       	sbrs	r10, 2
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <vfprintf+0x318>
    21b4:	b3 94       	inc	r11
    21b6:	b3 94       	inc	r11
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <vfprintf+0x31a>
    21ba:	8a 2d       	mov	r24, r10
    21bc:	86 78       	andi	r24, 0x86	; 134
    21be:	09 f0       	breq	.+2      	; 0x21c2 <vfprintf+0x31a>
    21c0:	b3 94       	inc	r11
    21c2:	a3 fc       	sbrc	r10, 3
    21c4:	10 c0       	rjmp	.+32     	; 0x21e6 <vfprintf+0x33e>
    21c6:	a0 fe       	sbrs	r10, 0
    21c8:	06 c0       	rjmp	.+12     	; 0x21d6 <vfprintf+0x32e>
    21ca:	b2 14       	cp	r11, r2
    21cc:	80 f4       	brcc	.+32     	; 0x21ee <vfprintf+0x346>
    21ce:	28 0c       	add	r2, r8
    21d0:	92 2c       	mov	r9, r2
    21d2:	9b 18       	sub	r9, r11
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <vfprintf+0x348>
    21d6:	b2 14       	cp	r11, r2
    21d8:	58 f4       	brcc	.+22     	; 0x21f0 <vfprintf+0x348>
    21da:	b6 01       	movw	r22, r12
    21dc:	80 e2       	ldi	r24, 0x20	; 32
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	76 d0       	rcall	.+236    	; 0x22ce <fputc>
    21e2:	b3 94       	inc	r11
    21e4:	f8 cf       	rjmp	.-16     	; 0x21d6 <vfprintf+0x32e>
    21e6:	b2 14       	cp	r11, r2
    21e8:	18 f4       	brcc	.+6      	; 0x21f0 <vfprintf+0x348>
    21ea:	2b 18       	sub	r2, r11
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <vfprintf+0x34a>
    21ee:	98 2c       	mov	r9, r8
    21f0:	21 2c       	mov	r2, r1
    21f2:	a4 fe       	sbrs	r10, 4
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <__stack+0x15>
    21f6:	b6 01       	movw	r22, r12
    21f8:	80 e3       	ldi	r24, 0x30	; 48
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	68 d0       	rcall	.+208    	; 0x22ce <fputc>
    21fe:	a2 fe       	sbrs	r10, 2
    2200:	16 c0       	rjmp	.+44     	; 0x222e <__stack+0x2f>
    2202:	a1 fc       	sbrc	r10, 1
    2204:	03 c0       	rjmp	.+6      	; 0x220c <__stack+0xd>
    2206:	88 e7       	ldi	r24, 0x78	; 120
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <__stack+0x11>
    220c:	88 e5       	ldi	r24, 0x58	; 88
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	b6 01       	movw	r22, r12
    2212:	0c c0       	rjmp	.+24     	; 0x222c <__stack+0x2d>
    2214:	8a 2d       	mov	r24, r10
    2216:	86 78       	andi	r24, 0x86	; 134
    2218:	51 f0       	breq	.+20     	; 0x222e <__stack+0x2f>
    221a:	a1 fe       	sbrs	r10, 1
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <__stack+0x23>
    221e:	8b e2       	ldi	r24, 0x2B	; 43
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <__stack+0x25>
    2222:	80 e2       	ldi	r24, 0x20	; 32
    2224:	a7 fc       	sbrc	r10, 7
    2226:	8d e2       	ldi	r24, 0x2D	; 45
    2228:	b6 01       	movw	r22, r12
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	50 d0       	rcall	.+160    	; 0x22ce <fputc>
    222e:	89 14       	cp	r8, r9
    2230:	30 f4       	brcc	.+12     	; 0x223e <__stack+0x3f>
    2232:	b6 01       	movw	r22, r12
    2234:	80 e3       	ldi	r24, 0x30	; 48
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	4a d0       	rcall	.+148    	; 0x22ce <fputc>
    223a:	9a 94       	dec	r9
    223c:	f8 cf       	rjmp	.-16     	; 0x222e <__stack+0x2f>
    223e:	8a 94       	dec	r8
    2240:	f3 01       	movw	r30, r6
    2242:	e8 0d       	add	r30, r8
    2244:	f1 1d       	adc	r31, r1
    2246:	80 81       	ld	r24, Z
    2248:	b6 01       	movw	r22, r12
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	40 d0       	rcall	.+128    	; 0x22ce <fputc>
    224e:	81 10       	cpse	r8, r1
    2250:	f6 cf       	rjmp	.-20     	; 0x223e <__stack+0x3f>
    2252:	22 20       	and	r2, r2
    2254:	09 f4       	brne	.+2      	; 0x2258 <__stack+0x59>
    2256:	4e ce       	rjmp	.-868    	; 0x1ef4 <vfprintf+0x4c>
    2258:	b6 01       	movw	r22, r12
    225a:	80 e2       	ldi	r24, 0x20	; 32
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	37 d0       	rcall	.+110    	; 0x22ce <fputc>
    2260:	2a 94       	dec	r2
    2262:	f7 cf       	rjmp	.-18     	; 0x2252 <__stack+0x53>
    2264:	f6 01       	movw	r30, r12
    2266:	86 81       	ldd	r24, Z+6	; 0x06
    2268:	97 81       	ldd	r25, Z+7	; 0x07
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <__stack+0x71>
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	9f ef       	ldi	r25, 0xFF	; 255
    2270:	2b 96       	adiw	r28, 0x0b	; 11
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	ff 90       	pop	r15
    2286:	ef 90       	pop	r14
    2288:	df 90       	pop	r13
    228a:	cf 90       	pop	r12
    228c:	bf 90       	pop	r11
    228e:	af 90       	pop	r10
    2290:	9f 90       	pop	r9
    2292:	8f 90       	pop	r8
    2294:	7f 90       	pop	r7
    2296:	6f 90       	pop	r6
    2298:	5f 90       	pop	r5
    229a:	4f 90       	pop	r4
    229c:	3f 90       	pop	r3
    229e:	2f 90       	pop	r2
    22a0:	08 95       	ret

000022a2 <strnlen_P>:
    22a2:	fc 01       	movw	r30, r24
    22a4:	05 90       	lpm	r0, Z+
    22a6:	61 50       	subi	r22, 0x01	; 1
    22a8:	70 40       	sbci	r23, 0x00	; 0
    22aa:	01 10       	cpse	r0, r1
    22ac:	d8 f7       	brcc	.-10     	; 0x22a4 <strnlen_P+0x2>
    22ae:	80 95       	com	r24
    22b0:	90 95       	com	r25
    22b2:	8e 0f       	add	r24, r30
    22b4:	9f 1f       	adc	r25, r31
    22b6:	08 95       	ret

000022b8 <strnlen>:
    22b8:	fc 01       	movw	r30, r24
    22ba:	61 50       	subi	r22, 0x01	; 1
    22bc:	70 40       	sbci	r23, 0x00	; 0
    22be:	01 90       	ld	r0, Z+
    22c0:	01 10       	cpse	r0, r1
    22c2:	d8 f7       	brcc	.-10     	; 0x22ba <strnlen+0x2>
    22c4:	80 95       	com	r24
    22c6:	90 95       	com	r25
    22c8:	8e 0f       	add	r24, r30
    22ca:	9f 1f       	adc	r25, r31
    22cc:	08 95       	ret

000022ce <fputc>:
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	fb 01       	movw	r30, r22
    22d8:	23 81       	ldd	r18, Z+3	; 0x03
    22da:	21 fd       	sbrc	r18, 1
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <fputc+0x16>
    22de:	8f ef       	ldi	r24, 0xFF	; 255
    22e0:	9f ef       	ldi	r25, 0xFF	; 255
    22e2:	2c c0       	rjmp	.+88     	; 0x233c <fputc+0x6e>
    22e4:	22 ff       	sbrs	r18, 2
    22e6:	16 c0       	rjmp	.+44     	; 0x2314 <fputc+0x46>
    22e8:	46 81       	ldd	r20, Z+6	; 0x06
    22ea:	57 81       	ldd	r21, Z+7	; 0x07
    22ec:	24 81       	ldd	r18, Z+4	; 0x04
    22ee:	35 81       	ldd	r19, Z+5	; 0x05
    22f0:	42 17       	cp	r20, r18
    22f2:	53 07       	cpc	r21, r19
    22f4:	44 f4       	brge	.+16     	; 0x2306 <fputc+0x38>
    22f6:	a0 81       	ld	r26, Z
    22f8:	b1 81       	ldd	r27, Z+1	; 0x01
    22fa:	9d 01       	movw	r18, r26
    22fc:	2f 5f       	subi	r18, 0xFF	; 255
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	31 83       	std	Z+1, r19	; 0x01
    2302:	20 83       	st	Z, r18
    2304:	8c 93       	st	X, r24
    2306:	26 81       	ldd	r18, Z+6	; 0x06
    2308:	37 81       	ldd	r19, Z+7	; 0x07
    230a:	2f 5f       	subi	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	37 83       	std	Z+7, r19	; 0x07
    2310:	26 83       	std	Z+6, r18	; 0x06
    2312:	14 c0       	rjmp	.+40     	; 0x233c <fputc+0x6e>
    2314:	8b 01       	movw	r16, r22
    2316:	ec 01       	movw	r28, r24
    2318:	fb 01       	movw	r30, r22
    231a:	00 84       	ldd	r0, Z+8	; 0x08
    231c:	f1 85       	ldd	r31, Z+9	; 0x09
    231e:	e0 2d       	mov	r30, r0
    2320:	19 95       	eicall
    2322:	89 2b       	or	r24, r25
    2324:	e1 f6       	brne	.-72     	; 0x22de <fputc+0x10>
    2326:	d8 01       	movw	r26, r16
    2328:	16 96       	adiw	r26, 0x06	; 6
    232a:	8d 91       	ld	r24, X+
    232c:	9c 91       	ld	r25, X
    232e:	17 97       	sbiw	r26, 0x07	; 7
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	17 96       	adiw	r26, 0x07	; 7
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
    2338:	16 97       	sbiw	r26, 0x06	; 6
    233a:	ce 01       	movw	r24, r28
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <__ultoa_invert>:
    2346:	fa 01       	movw	r30, r20
    2348:	aa 27       	eor	r26, r26
    234a:	28 30       	cpi	r18, 0x08	; 8
    234c:	51 f1       	breq	.+84     	; 0x23a2 <__ultoa_invert+0x5c>
    234e:	20 31       	cpi	r18, 0x10	; 16
    2350:	81 f1       	breq	.+96     	; 0x23b2 <__ultoa_invert+0x6c>
    2352:	e8 94       	clt
    2354:	6f 93       	push	r22
    2356:	6e 7f       	andi	r22, 0xFE	; 254
    2358:	6e 5f       	subi	r22, 0xFE	; 254
    235a:	7f 4f       	sbci	r23, 0xFF	; 255
    235c:	8f 4f       	sbci	r24, 0xFF	; 255
    235e:	9f 4f       	sbci	r25, 0xFF	; 255
    2360:	af 4f       	sbci	r26, 0xFF	; 255
    2362:	b1 e0       	ldi	r27, 0x01	; 1
    2364:	3e d0       	rcall	.+124    	; 0x23e2 <__ultoa_invert+0x9c>
    2366:	b4 e0       	ldi	r27, 0x04	; 4
    2368:	3c d0       	rcall	.+120    	; 0x23e2 <__ultoa_invert+0x9c>
    236a:	67 0f       	add	r22, r23
    236c:	78 1f       	adc	r23, r24
    236e:	89 1f       	adc	r24, r25
    2370:	9a 1f       	adc	r25, r26
    2372:	a1 1d       	adc	r26, r1
    2374:	68 0f       	add	r22, r24
    2376:	79 1f       	adc	r23, r25
    2378:	8a 1f       	adc	r24, r26
    237a:	91 1d       	adc	r25, r1
    237c:	a1 1d       	adc	r26, r1
    237e:	6a 0f       	add	r22, r26
    2380:	71 1d       	adc	r23, r1
    2382:	81 1d       	adc	r24, r1
    2384:	91 1d       	adc	r25, r1
    2386:	a1 1d       	adc	r26, r1
    2388:	20 d0       	rcall	.+64     	; 0x23ca <__ultoa_invert+0x84>
    238a:	09 f4       	brne	.+2      	; 0x238e <__ultoa_invert+0x48>
    238c:	68 94       	set
    238e:	3f 91       	pop	r19
    2390:	2a e0       	ldi	r18, 0x0A	; 10
    2392:	26 9f       	mul	r18, r22
    2394:	11 24       	eor	r1, r1
    2396:	30 19       	sub	r19, r0
    2398:	30 5d       	subi	r19, 0xD0	; 208
    239a:	31 93       	st	Z+, r19
    239c:	de f6       	brtc	.-74     	; 0x2354 <__ultoa_invert+0xe>
    239e:	cf 01       	movw	r24, r30
    23a0:	08 95       	ret
    23a2:	46 2f       	mov	r20, r22
    23a4:	47 70       	andi	r20, 0x07	; 7
    23a6:	40 5d       	subi	r20, 0xD0	; 208
    23a8:	41 93       	st	Z+, r20
    23aa:	b3 e0       	ldi	r27, 0x03	; 3
    23ac:	0f d0       	rcall	.+30     	; 0x23cc <__ultoa_invert+0x86>
    23ae:	c9 f7       	brne	.-14     	; 0x23a2 <__ultoa_invert+0x5c>
    23b0:	f6 cf       	rjmp	.-20     	; 0x239e <__ultoa_invert+0x58>
    23b2:	46 2f       	mov	r20, r22
    23b4:	4f 70       	andi	r20, 0x0F	; 15
    23b6:	40 5d       	subi	r20, 0xD0	; 208
    23b8:	4a 33       	cpi	r20, 0x3A	; 58
    23ba:	18 f0       	brcs	.+6      	; 0x23c2 <__ultoa_invert+0x7c>
    23bc:	49 5d       	subi	r20, 0xD9	; 217
    23be:	31 fd       	sbrc	r19, 1
    23c0:	40 52       	subi	r20, 0x20	; 32
    23c2:	41 93       	st	Z+, r20
    23c4:	02 d0       	rcall	.+4      	; 0x23ca <__ultoa_invert+0x84>
    23c6:	a9 f7       	brne	.-22     	; 0x23b2 <__ultoa_invert+0x6c>
    23c8:	ea cf       	rjmp	.-44     	; 0x239e <__ultoa_invert+0x58>
    23ca:	b4 e0       	ldi	r27, 0x04	; 4
    23cc:	a6 95       	lsr	r26
    23ce:	97 95       	ror	r25
    23d0:	87 95       	ror	r24
    23d2:	77 95       	ror	r23
    23d4:	67 95       	ror	r22
    23d6:	ba 95       	dec	r27
    23d8:	c9 f7       	brne	.-14     	; 0x23cc <__ultoa_invert+0x86>
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	61 05       	cpc	r22, r1
    23de:	71 05       	cpc	r23, r1
    23e0:	08 95       	ret
    23e2:	9b 01       	movw	r18, r22
    23e4:	ac 01       	movw	r20, r24
    23e6:	0a 2e       	mov	r0, r26
    23e8:	06 94       	lsr	r0
    23ea:	57 95       	ror	r21
    23ec:	47 95       	ror	r20
    23ee:	37 95       	ror	r19
    23f0:	27 95       	ror	r18
    23f2:	ba 95       	dec	r27
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__ultoa_invert+0xa2>
    23f6:	62 0f       	add	r22, r18
    23f8:	73 1f       	adc	r23, r19
    23fa:	84 1f       	adc	r24, r20
    23fc:	95 1f       	adc	r25, r21
    23fe:	a0 1d       	adc	r26, r0
    2400:	08 95       	ret

00002402 <_exit>:
    2402:	f8 94       	cli

00002404 <__stop_program>:
    2404:	ff cf       	rjmp	.-2      	; 0x2404 <__stop_program>
