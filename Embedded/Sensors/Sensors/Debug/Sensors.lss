
Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000256  00800200  000049fe  00004a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000123  00800456  00800456  00004ce8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b18  00000000  00000000  00004d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d8dc  00000000  00000000  0000589c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a9a  00000000  00000000  00013178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c01  00000000  00000000  00016c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002120  00000000  00000000  0001d814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f2f  00000000  00000000  0001f934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b1b9  00000000  00000000  00023863  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab8  00000000  00000000  0002ea1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	25 c2       	rjmp	.+1098   	; 0x450 <__bad_interrupt>
       6:	00 00       	nop
       8:	23 c2       	rjmp	.+1094   	; 0x450 <__bad_interrupt>
       a:	00 00       	nop
       c:	21 c2       	rjmp	.+1090   	; 0x450 <__bad_interrupt>
       e:	00 00       	nop
      10:	1f c2       	rjmp	.+1086   	; 0x450 <__bad_interrupt>
      12:	00 00       	nop
      14:	1d c2       	rjmp	.+1082   	; 0x450 <__bad_interrupt>
      16:	00 00       	nop
      18:	1b c2       	rjmp	.+1078   	; 0x450 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	19 c2       	rjmp	.+1074   	; 0x450 <__bad_interrupt>
      1e:	00 00       	nop
      20:	17 c2       	rjmp	.+1070   	; 0x450 <__bad_interrupt>
      22:	00 00       	nop
      24:	15 c2       	rjmp	.+1066   	; 0x450 <__bad_interrupt>
      26:	00 00       	nop
      28:	13 c2       	rjmp	.+1062   	; 0x450 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	11 c2       	rjmp	.+1058   	; 0x450 <__bad_interrupt>
      2e:	00 00       	nop
      30:	82 c6       	rjmp	.+3332   	; 0xd36 <__vector_12>
      32:	00 00       	nop
      34:	0d c2       	rjmp	.+1050   	; 0x450 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c2       	rjmp	.+1046   	; 0x450 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	09 c2       	rjmp	.+1042   	; 0x450 <__bad_interrupt>
      3e:	00 00       	nop
      40:	07 c2       	rjmp	.+1038   	; 0x450 <__bad_interrupt>
      42:	00 00       	nop
      44:	05 c2       	rjmp	.+1034   	; 0x450 <__bad_interrupt>
      46:	00 00       	nop
      48:	03 c2       	rjmp	.+1030   	; 0x450 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	01 c2       	rjmp	.+1026   	; 0x450 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ff c1       	rjmp	.+1022   	; 0x450 <__bad_interrupt>
      52:	00 00       	nop
      54:	fd c1       	rjmp	.+1018   	; 0x450 <__bad_interrupt>
      56:	00 00       	nop
      58:	fb c1       	rjmp	.+1014   	; 0x450 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f9 c1       	rjmp	.+1010   	; 0x450 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f7 c1       	rjmp	.+1006   	; 0x450 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__vector_25>
      68:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__vector_26>
      6c:	f1 c1       	rjmp	.+994    	; 0x450 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ef c1       	rjmp	.+990    	; 0x450 <__bad_interrupt>
      72:	00 00       	nop
      74:	ed c1       	rjmp	.+986    	; 0x450 <__bad_interrupt>
      76:	00 00       	nop
      78:	eb c1       	rjmp	.+982    	; 0x450 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e9 c1       	rjmp	.+978    	; 0x450 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e7 c1       	rjmp	.+974    	; 0x450 <__bad_interrupt>
      82:	00 00       	nop
      84:	e5 c1       	rjmp	.+970    	; 0x450 <__bad_interrupt>
      86:	00 00       	nop
      88:	e3 c1       	rjmp	.+966    	; 0x450 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e1 c1       	rjmp	.+962    	; 0x450 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__vector_36>
      94:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__vector_37>
      98:	db c1       	rjmp	.+950    	; 0x450 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <__vector_39>
      a0:	d7 c1       	rjmp	.+942    	; 0x450 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d5 c1       	rjmp	.+938    	; 0x450 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d3 c1       	rjmp	.+934    	; 0x450 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d1 c1       	rjmp	.+930    	; 0x450 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cf c1       	rjmp	.+926    	; 0x450 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cd c1       	rjmp	.+922    	; 0x450 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cb c1       	rjmp	.+918    	; 0x450 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c9 c1       	rjmp	.+914    	; 0x450 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c7 c1       	rjmp	.+910    	; 0x450 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c5 c1       	rjmp	.+906    	; 0x450 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c3 c1       	rjmp	.+902    	; 0x450 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__vector_51>
      d0:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__vector_52>
      d4:	bd c1       	rjmp	.+890    	; 0x450 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__vector_54>
      dc:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__vector_55>
      e0:	b7 c1       	rjmp	.+878    	; 0x450 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	0a 1e       	adc	r0, r26
      fa:	7a 1e       	adc	r7, r26
      fc:	7a 1e       	adc	r7, r26
      fe:	7a 1e       	adc	r7, r26
     100:	7a 1e       	adc	r7, r26
     102:	7a 1e       	adc	r7, r26
     104:	7a 1e       	adc	r7, r26
     106:	7a 1e       	adc	r7, r26
     108:	0a 1e       	adc	r0, r26
     10a:	7a 1e       	adc	r7, r26
     10c:	7a 1e       	adc	r7, r26
     10e:	7a 1e       	adc	r7, r26
     110:	7a 1e       	adc	r7, r26
     112:	7a 1e       	adc	r7, r26
     114:	7a 1e       	adc	r7, r26
     116:	7a 1e       	adc	r7, r26
     118:	0c 1e       	adc	r0, r28
     11a:	7a 1e       	adc	r7, r26
     11c:	7a 1e       	adc	r7, r26
     11e:	7a 1e       	adc	r7, r26
     120:	7a 1e       	adc	r7, r26
     122:	7a 1e       	adc	r7, r26
     124:	7a 1e       	adc	r7, r26
     126:	7a 1e       	adc	r7, r26
     128:	7a 1e       	adc	r7, r26
     12a:	7a 1e       	adc	r7, r26
     12c:	7a 1e       	adc	r7, r26
     12e:	7a 1e       	adc	r7, r26
     130:	7a 1e       	adc	r7, r26
     132:	7a 1e       	adc	r7, r26
     134:	7a 1e       	adc	r7, r26
     136:	7a 1e       	adc	r7, r26
     138:	0c 1e       	adc	r0, r28
     13a:	7a 1e       	adc	r7, r26
     13c:	7a 1e       	adc	r7, r26
     13e:	7a 1e       	adc	r7, r26
     140:	7a 1e       	adc	r7, r26
     142:	7a 1e       	adc	r7, r26
     144:	7a 1e       	adc	r7, r26
     146:	7a 1e       	adc	r7, r26
     148:	7a 1e       	adc	r7, r26
     14a:	7a 1e       	adc	r7, r26
     14c:	7a 1e       	adc	r7, r26
     14e:	7a 1e       	adc	r7, r26
     150:	7a 1e       	adc	r7, r26
     152:	7a 1e       	adc	r7, r26
     154:	7a 1e       	adc	r7, r26
     156:	7a 1e       	adc	r7, r26
     158:	76 1e       	adc	r7, r22
     15a:	7a 1e       	adc	r7, r26
     15c:	7a 1e       	adc	r7, r26
     15e:	7a 1e       	adc	r7, r26
     160:	7a 1e       	adc	r7, r26
     162:	7a 1e       	adc	r7, r26
     164:	7a 1e       	adc	r7, r26
     166:	7a 1e       	adc	r7, r26
     168:	41 1e       	adc	r4, r17
     16a:	7a 1e       	adc	r7, r26
     16c:	7a 1e       	adc	r7, r26
     16e:	7a 1e       	adc	r7, r26
     170:	7a 1e       	adc	r7, r26
     172:	7a 1e       	adc	r7, r26
     174:	7a 1e       	adc	r7, r26
     176:	7a 1e       	adc	r7, r26
     178:	7a 1e       	adc	r7, r26
     17a:	7a 1e       	adc	r7, r26
     17c:	7a 1e       	adc	r7, r26
     17e:	7a 1e       	adc	r7, r26
     180:	7a 1e       	adc	r7, r26
     182:	7a 1e       	adc	r7, r26
     184:	7a 1e       	adc	r7, r26
     186:	7a 1e       	adc	r7, r26
     188:	35 1e       	adc	r3, r21
     18a:	7a 1e       	adc	r7, r26
     18c:	7a 1e       	adc	r7, r26
     18e:	7a 1e       	adc	r7, r26
     190:	7a 1e       	adc	r7, r26
     192:	7a 1e       	adc	r7, r26
     194:	7a 1e       	adc	r7, r26
     196:	7a 1e       	adc	r7, r26
     198:	59 1e       	adc	r5, r25

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e e6       	ldi	r16, 0x6E	; 110
     19c:	14 e0       	ldi	r17, 0x04	; 4
     19e:	0f 2e       	mov	r0, r31
     1a0:	f6 e9       	ldi	r31, 0x96	; 150
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f4 e0       	ldi	r31, 0x04	; 4
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	1a d4       	rcall	.+2100   	; 0xa00 <uxListRemove>
     1cc:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <uxCurrentNumberOfTasks>
     1d6:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	98 d3       	rcall	.+1840   	; 0x91a <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	96 d3       	rcall	.+1836   	; 0x91a <vPortFree>
     1ee:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	d5 d4       	rcall	.+2474   	; 0xbaa <vPortYield>
     200:	0e 94 65 15 	call	0x2aca	; 0x2aca <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     220:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     226:	e0 91 c4 04 	lds	r30, 0x04C4	; 0x8004c4 <pxCurrentTimerList>
     22a:	f0 91 c5 04 	lds	r31, 0x04C5	; 0x8004c5 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     240:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     244:	c4 01       	movw	r24, r8
     246:	0e 94 f7 14 	call	0x29ee	; 0x29ee <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     258:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     25c:	e0 91 c4 04 	lds	r30, 0x04C4	; 0x8004c4 <pxCurrentTimerList>
     260:	f0 91 c5 04 	lds	r31, 0x04C5	; 0x8004c5 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	c6 d3       	rcall	.+1932   	; 0xa00 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 02 14 	call	0x2804	; 0x2804 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 b0 14 	call	0x2960	; 0x2960 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     2c4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <xTimerQueue>
     2d0:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <xTimerQueue+0x1>
     2d4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     2d8:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	64 d4       	rcall	.+2248   	; 0xbaa <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     2e4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	7d d3       	rcall	.+1786   	; 0xa00 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 02 14 	call	0x2804	; 0x2804 <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 b0 14 	call	0x2960	; 0x2960 <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 02 14 	call	0x2804	; 0x2804 <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	aa d2       	rcall	.+1364   	; 0x91a <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <xTimerQueue>
     3da:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <xTimerQueue+0x1>
     3de:	d5 d6       	rcall	.+3498   	; 0x118a <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     3e6:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 f7 14 	call	0x29ee	; 0x29ee <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     3f8:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <pxOverflowTimerList>
     3fc:	f0 91 c3 04 	lds	r31, 0x04C3	; 0x8004c3 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	14 e0       	ldi	r17, 0x04	; 4
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	ee ef       	ldi	r30, 0xFE	; 254
     426:	f9 e4       	ldi	r31, 0x49	; 73
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a6 35       	cpi	r26, 0x56	; 86
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	25 e0       	ldi	r18, 0x05	; 5
     43a:	a6 e5       	ldi	r26, 0x56	; 86
     43c:	b4 e0       	ldi	r27, 0x04	; 4
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a9 37       	cpi	r26, 0x79	; 121
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	0e 94 80 15 	call	0x2b00	; 0x2b00 <main>
     44c:	0c 94 fd 24 	jmp	0x49fa	; 0x49fa <_exit>

00000450 <__bad_interrupt>:
     450:	d7 cd       	rjmp	.-1106   	; 0x0 <__vectors>

00000452 <measure_co2_callback>:
 */ 

#include "../Headers/m_lora_includes.h"

void measure_co2_callback(uint16_t ppm)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	1f 92       	push	r1
     458:	1f 92       	push	r1
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
	uint16_t value = ppm;
     45e:	9a 83       	std	Y+2, r25	; 0x02
     460:	89 83       	std	Y+1, r24	; 0x01
	
	xMessageBufferSend( xMessageBuffer_co2
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	42 e0       	ldi	r20, 0x02	; 2
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	be 01       	movw	r22, r28
     46c:	6f 5f       	subi	r22, 0xFF	; 255
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <xMessageBuffer_co2>
     474:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <xMessageBuffer_co2+0x1>
     478:	0e 94 4e 0b 	call	0x169c	; 0x169c <xStreamBufferSend>
					, &value
					, sizeof (uint16_t)
					,0);
	
	xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
     47c:	6f ef       	ldi	r22, 0xFF	; 255
     47e:	7f ef       	ldi	r23, 0xFF	; 255
     480:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSemaphore_co2>
     484:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     488:	09 d7       	rcall	.+3602   	; 0x129c <xQueueSemaphoreTake>
	printf("Measured CO2 value %d sent!\n",value);
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	8f 93       	push	r24
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	8f 93       	push	r24
     492:	8e e4       	ldi	r24, 0x4E	; 78
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	0e 94 0d 22 	call	0x441a	; 0x441a <printf>
	xSemaphoreGive(xSemaphore_co2);
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSemaphore_co2>
     4ac:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     4b0:	86 d5       	rcall	.+2828   	; 0xfbe <xQueueGenericSend>
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <measure_co2_timer_callback>:
 */ 
#include "../Headers/m_lora_includes.h"

void measure_co2_timer_callback(TimerHandle_t pxTimer)
{
	xSemaphoreGive(xSemaphore_co2);
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSemaphore_co2>
     4d2:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     4d6:	73 c5       	rjmp	.+2790   	; 0xfbe <xQueueGenericSend>
     4d8:	08 95       	ret

000004da <print_co2_timer_callback>:
 */ 
#include "../Headers/m_lora_includes.h"

void print_co2_timer_callback(TimerHandle_t pxTimer)
{
	xSemaphoreGive(xSemaphore_co2);
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSemaphore_co2>
     4e8:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     4ec:	68 c5       	rjmp	.+2768   	; 0xfbe <xQueueGenericSend>
     4ee:	08 95       	ret

000004f0 <print_temp_timer_callback>:

#include "../Headers/m_lora_includes.h"

void print_temp_timer_callback(TimerHandle_t pxTimer)
{
	xSemaphoreGive(xSemaphore_temp);
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     4fe:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     502:	5d c5       	rjmp	.+2746   	; 0xfbe <xQueueGenericSend>
     504:	08 95       	ret

00000506 <measure_temp_timer_callback>:
 */ 
#include "../Headers/m_lora_includes.h"

void measure_temp_timer_callback(TimerHandle_t pxTimer)
{
	xSemaphoreGive(xSemaphore_temp);
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     514:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     518:	52 c5       	rjmp	.+2724   	; 0xfbe <xQueueGenericSend>
     51a:	08 95       	ret

0000051c <m_print>:
 *  Author: drags
 */ 
#include "Headers/m_lora_includes.h"

void m_print(char message[], SemaphoreHandle_t xSemaphore)
{
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	8c 01       	movw	r16, r24
     526:	eb 01       	movw	r28, r22
	xSemaphoreTake(xSemaphore, portMAX_DELAY);
     528:	6f ef       	ldi	r22, 0xFF	; 255
     52a:	7f ef       	ldi	r23, 0xFF	; 255
     52c:	ce 01       	movw	r24, r28
     52e:	b6 d6       	rcall	.+3436   	; 0x129c <xQueueSemaphoreTake>
	printf("%s\n",message);
     530:	c8 01       	movw	r24, r16
     532:	0e 94 20 22 	call	0x4440	; 0x4440 <puts>
	xSemaphoreGive(xSemaphore);
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	ce 01       	movw	r24, r28
     542:	3d d5       	rcall	.+2682   	; 0xfbe <xQueueGenericSend>
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <create_all_tasks>:

/*
	This method creates a task that sends data to the server
*/
void create_all_tasks(UBaseType_t lora_handler_task_priority)
{
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
	//,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	//,  NULL
	//,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	//,  NULL );
	
	xTaskCreate(
     554:	e1 2c       	mov	r14, r1
     556:	f1 2c       	mov	r15, r1
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 ec       	ldi	r20, 0xC0	; 192
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	6b e6       	ldi	r22, 0x6B	; 107
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	89 e6       	ldi	r24, 0x69	; 105
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY 
	, NULL );
	
	xTaskCreate(
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 ec       	ldi	r20, 0xC0	; 192
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	6d e7       	ldi	r22, 0x7D	; 125
     578:	72 e0       	ldi	r23, 0x02	; 2
     57a:	8b e1       	ldi	r24, 0x1B	; 27
     57c:	94 e0       	ldi	r25, 0x04	; 4
     57e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
	
	xTaskCreate(
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 ec       	ldi	r20, 0xC0	; 192
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	6d e8       	ldi	r22, 0x8D	; 141
     58c:	72 e0       	ldi	r23, 0x02	; 2
     58e:	8d e5       	ldi	r24, 0x5D	; 93
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <xTaskCreate>
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
	
	xTaskCreate(
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 ec       	ldi	r20, 0xC0	; 192
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	6e e9       	ldi	r22, 0x9E	; 158
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	8b ec       	ldi	r24, 0xCB	; 203
     5a4:	93 e0       	ldi	r25, 0x03	; 3
     5a6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <xTaskCreate>
	, "Print CO2 Task"
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
}
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <create_all_timers>:
TimerHandle_t xTimer_read_temp;
TimerHandle_t xTimer_measure_co2;
TimerHandle_t xTimer_read_co2;

void create_all_timers()
{
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
	xTimer_measure_temp = xTimerCreate("Temperature Measure Timer",
     5b6:	03 e8       	ldi	r16, 0x83	; 131
     5b8:	12 e0       	ldi	r17, 0x02	; 2
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	6e e3       	ldi	r22, 0x3E	; 62
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8d ea       	ldi	r24, 0xAD	; 173
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <xTimerCreate>
     5cc:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <xTimer_measure_temp+0x1>
     5d0:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <xTimer_measure_temp>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 0,
			measure_temp_timer_callback);
	
	xTimer_read_temp = xTimerCreate("Temperature Read Timer",
     5d4:	08 e7       	ldi	r16, 0x78	; 120
     5d6:	12 e0       	ldi	r17, 0x02	; 2
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	6e e3       	ldi	r22, 0x3E	; 62
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	87 ec       	ldi	r24, 0xC7	; 199
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <xTimerCreate>
     5ea:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <xTimer_read_temp+0x1>
     5ee:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <xTimer_read_temp>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 1,
			print_temp_timer_callback);
	
	xTimer_measure_co2 = xTimerCreate("CO2 Measure Timer",
     5f2:	02 e6       	ldi	r16, 0x62	; 98
     5f4:	12 e0       	ldi	r17, 0x02	; 2
     5f6:	22 e0       	ldi	r18, 0x02	; 2
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	6e e3       	ldi	r22, 0x3E	; 62
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	8e ed       	ldi	r24, 0xDE	; 222
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <xTimerCreate>
     608:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <xTimer_measure_co2+0x1>
     60c:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <xTimer_measure_co2>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 2,
			measure_co2_timer_callback);
				
	xTimer_read_co2 = xTimerCreate("CO2 Read Timer",
     610:	0d e6       	ldi	r16, 0x6D	; 109
     612:	12 e0       	ldi	r17, 0x02	; 2
     614:	23 e0       	ldi	r18, 0x03	; 3
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	41 e0       	ldi	r20, 0x01	; 1
     61a:	6e e3       	ldi	r22, 0x3E	; 62
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 ef       	ldi	r24, 0xF0	; 240
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <xTimerCreate>
     626:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <xTimer_read_co2+0x1>
     62a:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <xTimer_read_co2>
			(1000/portTICK_PERIOD_MS),
			pdTRUE,
			(void*) 3,
			print_co2_timer_callback);
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	08 95       	ret

00000634 <driver_init>:
SemaphoreHandle_t xSemaphore_temp;
SemaphoreHandle_t xSemaphore_co2;

void driver_init()
{
	stdioCreate(0);
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <stdioCreate>
	
	sei(); // enables interrupts
     63a:	78 94       	sei
	
	xSemaphore_temp = xSemaphoreCreateMutex();
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	55 d5       	rcall	.+2730   	; 0x10ea <xQueueCreateMutex>
     640:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <xSemaphore_temp+0x1>
     644:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <xSemaphore_temp>
	xSemaphore_co2 = xSemaphoreCreateMutex();
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	4f d5       	rcall	.+2718   	; 0x10ea <xQueueCreateMutex>
     64c:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <xSemaphore_co2+0x1>
     650:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <xSemaphore_co2>
	
	xMessageBuffer_temp = xMessageBufferCreate( sizeof (int) * 2);
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	e0 d7       	rcall	.+4032   	; 0x1620 <xStreamBufferGenericCreate>
     660:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <xMessageBuffer_temp+0x1>
     664:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <xMessageBuffer_temp>
	xMessageBuffer_co2 = xMessageBufferCreate( sizeof (uint16_t));
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	d6 d7       	rcall	.+4012   	; 0x1620 <xStreamBufferGenericCreate>
     674:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <xMessageBuffer_co2+0x1>
     678:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <xMessageBuffer_co2>
	
	/*
		Initialize the Temperature Driver
	*/
	if ( HIH8120_OK == hih8120Create() )
     67c:	0e 94 01 1a 	call	0x3402	; 0x3402 <hih8120Create>
     680:	81 11       	cpse	r24, r1
     682:	07 c0       	rjmp	.+14     	; 0x692 <driver_init+0x5e>
	{
		m_print("Temp/Humidity driver created.\n",xSemaphore_temp);
     684:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <xSemaphore_temp>
     688:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	45 df       	rcall	.-374    	; 0x51c <m_print>
	
	/*
		Initialize LoRa Driver
	*/
	
	hal_create(LED_TASK_PRIORITY);
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	0e 94 a2 19 	call	0x3344	; 0x3344 <hal_create>
	lora_driver_create(ser_USART1);
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 c6 1b 	call	0x378c	; 0x378c <lora_driver_create>
	printf("LoRa driver created.\n");
     69e:	8e e1       	ldi	r24, 0x1E	; 30
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	0e 94 20 22 	call	0x4440	; 0x4440 <puts>
	
	/*
		Initialize MH-Z19 CO2 Driver
	*/
	
	mh_z19_create(ser_USART3, measure_co2_callback);
     6a6:	69 e2       	ldi	r22, 0x29	; 41
     6a8:	72 e0       	ldi	r23, 0x02	; 2
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	0e 94 aa 1c 	call	0x3954	; 0x3954 <mh_z19_create>
	printf("Temp/Humidity driver created.\n");
     6b0:	83 e3       	ldi	r24, 0x33	; 51
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	0c 94 20 22 	jmp	0x4440	; 0x4440 <puts>
     6b8:	08 95       	ret

000006ba <measure_co2_task>:

void measure_co2_task(void *pvParameters)
{
	while (1)
	{
		if (mh_z19_take_meassuring() != MHZ19_OK)
     6ba:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <mh_z19_take_meassuring>
     6be:	88 23       	and	r24, r24
     6c0:	e1 f3       	breq	.-8      	; 0x6ba <measure_co2_task>
		{
			m_print("Error measuring CO2 value!\n",xSemaphore_co2);
     6c2:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <xSemaphore_co2>
     6c6:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     6ca:	81 e5       	ldi	r24, 0x51	; 81
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	26 df       	rcall	.-436    	; 0x51c <m_print>
     6d0:	f4 cf       	rjmp	.-24     	; 0x6ba <measure_co2_task>

000006d2 <measure_temp_task>:
*/

#include "../Headers/m_lora_includes.h"

void measure_temp_task(void *pvParameters)
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	1f 92       	push	r1
     6d8:	1f 92       	push	r1
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
	int temperature = 0;
     6de:	1a 82       	std	Y+2, r1	; 0x02
     6e0:	19 82       	std	Y+1, r1	; 0x01
		{	
			vTaskDelay(100/portTICK_PERIOD_MS);
			temperature = hih8120GetTemperature_x10();
				
			xSemaphoreTake(xSemaphore_temp,portMAX_DELAY);
			printf("Temperature %d sent!\n", temperature);
     6e2:	01 eb       	ldi	r16, 0xB1	; 177
     6e4:	13 e0       	ldi	r17, 0x03	; 3
{
	int temperature = 0;
	
	while (1)
	{
		xSemaphoreTake(xSemaphore_temp,portMAX_DELAY);
     6e6:	6f ef       	ldi	r22, 0xFF	; 255
     6e8:	7f ef       	ldi	r23, 0xFF	; 255
     6ea:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     6ee:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     6f2:	d4 d5       	rcall	.+2984   	; 0x129c <xQueueSemaphoreTake>
		
		if ( HIH8120_OK != hih8120Wakeup() )
     6f4:	0e 94 18 1a 	call	0x3430	; 0x3430 <hih8120Wakeup>
     6f8:	88 23       	and	r24, r24
     6fa:	39 f0       	breq	.+14     	; 0x70a <measure_temp_task+0x38>
		{
			m_print("Error in waking up the censors!",xSemaphore_temp);
     6fc:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <xSemaphore_temp>
     700:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     704:	8d e6       	ldi	r24, 0x6D	; 109
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	09 df       	rcall	.-494    	; 0x51c <m_print>
		}
		
		vTaskDelay(50/portTICK_PERIOD_MS);
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <vTaskDelay>
		
	
		if ( HIH8120_OK !=  hih8120Meassure() )
     712:	0e 94 2c 1a 	call	0x3458	; 0x3458 <hih8120Meassure>
     716:	88 23       	and	r24, r24
     718:	41 f0       	breq	.+16     	; 0x72a <measure_temp_task+0x58>
		{
			m_print("Error in measuring the temperature!",xSemaphore_temp);			
     71a:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <xSemaphore_temp>
     71e:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     722:	8d e8       	ldi	r24, 0x8D	; 141
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	fa de       	rcall	.-524    	; 0x51c <m_print>
     728:	25 c0       	rjmp	.+74     	; 0x774 <measure_temp_task+0xa2>
		}
		else
		{	
			vTaskDelay(100/portTICK_PERIOD_MS);
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <vTaskDelay>
			temperature = hih8120GetTemperature_x10();
     732:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <hih8120GetTemperature_x10>
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
				
			xSemaphoreTake(xSemaphore_temp,portMAX_DELAY);
     73a:	6f ef       	ldi	r22, 0xFF	; 255
     73c:	7f ef       	ldi	r23, 0xFF	; 255
     73e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     742:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     746:	aa d5       	rcall	.+2900   	; 0x129c <xQueueSemaphoreTake>
			printf("Temperature %d sent!\n", temperature);
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	8f 93       	push	r24
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	8f 93       	push	r24
     750:	1f 93       	push	r17
     752:	0f 93       	push	r16
     754:	0e 94 0d 22 	call	0x441a	; 0x441a <printf>
			xSemaphoreGive(xSemaphore_temp);
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     766:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     76a:	29 d4       	rcall	.+2130   	; 0xfbe <xQueueGenericSend>
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
			//vTaskDelay(1);
		}
		xMessageBufferSend(xMessageBuffer_temp
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	42 e0       	ldi	r20, 0x02	; 2
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <xMessageBuffer_temp>
     786:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <xMessageBuffer_temp+0x1>
     78a:	88 d7       	rcall	.+3856   	; 0x169c <xStreamBufferSend>
		, &temperature 
		, sizeof (int)
		, 0);
		
		printf("Temperature sent to the message buffer!\n");
     78c:	87 ec       	ldi	r24, 0xC7	; 199
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0e 94 20 22 	call	0x4440	; 0x4440 <puts>
	}
     794:	a8 cf       	rjmp	.-176    	; 0x6e6 <measure_temp_task+0x14>

00000796 <print_co2_task>:
 */ 
#include "../Headers/m_lora_includes.h"


void print_co2_task(void *pvParameters)
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	1f 92       	push	r1
     79c:	1f 92       	push	r1
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
		
		for (int i = 0; i < xRecievedBytes; i++)
		{
			vTaskDelay(100/portTICK_PERIOD_MS);
			xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
			printf("Received CO2 level : %d ppm\n\n",ppm);
     7a2:	0f 2e       	mov	r0, r31
     7a4:	ff ee       	ldi	r31, 0xEF	; 239
     7a6:	ef 2e       	mov	r14, r31
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	ff 2e       	mov	r15, r31
     7ac:	f0 2d       	mov	r31, r0
	uint16_t ppm;
	size_t xRecievedBytes;
	
	while (1)
	{
		xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
     7ae:	6f ef       	ldi	r22, 0xFF	; 255
     7b0:	7f ef       	ldi	r23, 0xFF	; 255
     7b2:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSemaphore_co2>
     7b6:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     7ba:	70 d5       	rcall	.+2784   	; 0x129c <xQueueSemaphoreTake>
		
		xRecievedBytes = xMessageBufferReceive(xMessageBuffer_co2
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	42 e0       	ldi	r20, 0x02	; 2
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	be 01       	movw	r22, r28
     7c6:	6f 5f       	subi	r22, 0xFF	; 255
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <xMessageBuffer_co2>
     7ce:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <xMessageBuffer_co2+0x1>
     7d2:	0e 94 29 0c 	call	0x1852	; 0x1852 <xStreamBufferReceive>
							,&ppm
							, sizeof(uint16_t)
							,0 );
		
		
		for (int i = 0; i < xRecievedBytes; i++)
     7d6:	00 97       	sbiw	r24, 0x00	; 0
     7d8:	51 f3       	breq	.-44     	; 0x7ae <print_co2_task+0x18>
     7da:	6c 01       	movw	r12, r24
     7dc:	00 e0       	ldi	r16, 0x00	; 0
     7de:	10 e0       	ldi	r17, 0x00	; 0
		{
			vTaskDelay(100/portTICK_PERIOD_MS);
     7e0:	86 e0       	ldi	r24, 0x06	; 6
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <vTaskDelay>
			xSemaphoreTake(xSemaphore_co2,portMAX_DELAY);
     7e8:	6f ef       	ldi	r22, 0xFF	; 255
     7ea:	7f ef       	ldi	r23, 0xFF	; 255
     7ec:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSemaphore_co2>
     7f0:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     7f4:	53 d5       	rcall	.+2726   	; 0x129c <xQueueSemaphoreTake>
			printf("Received CO2 level : %d ppm\n\n",ppm);
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	9f 93       	push	r25
     7fa:	99 81       	ldd	r25, Y+1	; 0x01
     7fc:	9f 93       	push	r25
     7fe:	ff 92       	push	r15
     800:	ef 92       	push	r14
     802:	0e 94 0d 22 	call	0x441a	; 0x441a <printf>
			xSemaphoreGive(xSemaphore_co2);
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSemaphore_co2>
     814:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <xSemaphore_co2+0x1>
     818:	d2 d3       	rcall	.+1956   	; 0xfbe <xQueueGenericSend>
			vTaskDelay(1);
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <vTaskDelay>
							,&ppm
							, sizeof(uint16_t)
							,0 );
		
		
		for (int i = 0; i < xRecievedBytes; i++)
     822:	0f 5f       	subi	r16, 0xFF	; 255
     824:	1f 4f       	sbci	r17, 0xFF	; 255
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0c 15       	cp	r16, r12
     830:	1d 05       	cpc	r17, r13
     832:	b1 f6       	brne	.-84     	; 0x7e0 <print_co2_task+0x4a>
     834:	bc cf       	rjmp	.-136    	; 0x7ae <print_co2_task+0x18>

00000836 <print_temp_task>:
#include "../Headers/m_lora_includes.h"



void print_temp_task(void *pvParameters)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	1f 92       	push	r1
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
							
		for (int i = 0; i < xRecievedBytes; i++)
		{
			vTaskDelay(100/portTICK_PERIOD_MS);
			xSemaphoreTake(xSemaphore_temp,portMAX_DELAY);
			printf("\nReceived temperature: %d\n\n",temperature);
     842:	0f 2e       	mov	r0, r31
     844:	fd e0       	ldi	r31, 0x0D	; 13
     846:	ef 2e       	mov	r14, r31
     848:	f4 e0       	ldi	r31, 0x04	; 4
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0
	int temperature; 
	size_t xRecievedBytes;
	
	while (1)
	{ 
		xSemaphoreTake(xSemaphore_temp, portMAX_DELAY);
     84e:	6f ef       	ldi	r22, 0xFF	; 255
     850:	7f ef       	ldi	r23, 0xFF	; 255
     852:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     856:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     85a:	20 d5       	rcall	.+2624   	; 0x129c <xQueueSemaphoreTake>
		
		xRecievedBytes = xMessageBufferReceive( xMessageBuffer_temp
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	42 e0       	ldi	r20, 0x02	; 2
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	be 01       	movw	r22, r28
     866:	6f 5f       	subi	r22, 0xFF	; 255
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <xMessageBuffer_temp>
     86e:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <xMessageBuffer_temp+0x1>
     872:	ef d7       	rcall	.+4062   	; 0x1852 <xStreamBufferReceive>
							, &temperature
							, sizeof (int)
							,0 );
		
							
		for (int i = 0; i < xRecievedBytes; i++)
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	59 f3       	breq	.-42     	; 0x84e <print_temp_task+0x18>
     878:	6c 01       	movw	r12, r24
     87a:	00 e0       	ldi	r16, 0x00	; 0
     87c:	10 e0       	ldi	r17, 0x00	; 0
		{
			vTaskDelay(100/portTICK_PERIOD_MS);
     87e:	86 e0       	ldi	r24, 0x06	; 6
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <vTaskDelay>
			xSemaphoreTake(xSemaphore_temp,portMAX_DELAY);
     886:	6f ef       	ldi	r22, 0xFF	; 255
     888:	7f ef       	ldi	r23, 0xFF	; 255
     88a:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     88e:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     892:	04 d5       	rcall	.+2568   	; 0x129c <xQueueSemaphoreTake>
			printf("\nReceived temperature: %d\n\n",temperature);
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	9f 93       	push	r25
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	9f 93       	push	r25
     89c:	ff 92       	push	r15
     89e:	ef 92       	push	r14
     8a0:	0e 94 0d 22 	call	0x441a	; 0x441a <printf>
			xSemaphoreGive(xSemaphore_temp);
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xSemaphore_temp>
     8b2:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xSemaphore_temp+0x1>
     8b6:	83 d3       	rcall	.+1798   	; 0xfbe <xQueueGenericSend>
			vTaskDelay(1);	
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <vTaskDelay>
							, &temperature
							, sizeof (int)
							,0 );
		
							
		for (int i = 0; i < xRecievedBytes; i++)
     8c0:	0f 5f       	subi	r16, 0xFF	; 255
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0c 15       	cp	r16, r12
     8ce:	1d 05       	cpc	r17, r13
     8d0:	b1 f6       	brne	.-84     	; 0x87e <print_temp_task+0x48>
     8d2:	bd cf       	rjmp	.-134    	; 0x84e <print_temp_task+0x18>

000008d4 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     8d4:	e8 e0       	ldi	r30, 0x08	; 8
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	90 81       	ld	r25, Z
     8da:	90 7f       	andi	r25, 0xF0	; 240
     8dc:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     8de:	90 81       	ld	r25, Z
     8e0:	8f 70       	andi	r24, 0x0F	; 15
     8e2:	98 2b       	or	r25, r24
     8e4:	90 83       	st	Z, r25
     8e6:	08 95       	ret

000008e8 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     8e8:	e8 e0       	ldi	r30, 0x08	; 8
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	80 81       	ld	r24, Z
     8ee:	80 7f       	andi	r24, 0xF0	; 240
     8f0:	80 83       	st	Z, r24
     8f2:	08 95       	ret

000008f4 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     8fa:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     8fe:	ce 01       	movw	r24, r28
     900:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <malloc>
     904:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     906:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     90a:	20 97       	sbiw	r28, 0x00	; 0
     90c:	11 f4       	brne	.+4      	; 0x912 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     90e:	0e 94 66 15 	call	0x2acc	; 0x2acc <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     912:	ce 01       	movw	r24, r28
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
    if( pv )
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	41 f0       	breq	.+16     	; 0x932 <vPortFree+0x18>
     922:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     924:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <vTaskSuspendAll>
        {
            free( pv );
     928:	ce 01       	movw	r24, r28
     92a:	0e 94 70 21 	call	0x42e0	; 0x42e0 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     92e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <xTaskResumeAll>
    }
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     938:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     93a:	03 96       	adiw	r24, 0x03	; 3
     93c:	92 83       	std	Z+2, r25	; 0x02
     93e:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     940:	2f ef       	ldi	r18, 0xFF	; 255
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	34 83       	std	Z+4, r19	; 0x04
     946:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     948:	96 83       	std	Z+6, r25	; 0x06
     94a:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     94c:	90 87       	std	Z+8, r25	; 0x08
     94e:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     950:	10 82       	st	Z, r1
     952:	08 95       	ret

00000954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     954:	fc 01       	movw	r30, r24
     956:	11 86       	std	Z+9, r1	; 0x09
     958:	10 86       	std	Z+8, r1	; 0x08
     95a:	08 95       	ret

0000095c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	9c 01       	movw	r18, r24
     962:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     964:	dc 01       	movw	r26, r24
     966:	11 96       	adiw	r26, 0x01	; 1
     968:	cd 91       	ld	r28, X+
     96a:	dc 91       	ld	r29, X
     96c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     96e:	d3 83       	std	Z+3, r29	; 0x03
     970:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     972:	8c 81       	ldd	r24, Y+4	; 0x04
     974:	9d 81       	ldd	r25, Y+5	; 0x05
     976:	95 83       	std	Z+5, r25	; 0x05
     978:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     97a:	8c 81       	ldd	r24, Y+4	; 0x04
     97c:	9d 81       	ldd	r25, Y+5	; 0x05
     97e:	dc 01       	movw	r26, r24
     980:	13 96       	adiw	r26, 0x03	; 3
     982:	7c 93       	st	X, r23
     984:	6e 93       	st	-X, r22
     986:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     988:	7d 83       	std	Y+5, r23	; 0x05
     98a:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     98c:	31 87       	std	Z+9, r19	; 0x09
     98e:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     990:	f9 01       	movw	r30, r18
     992:	80 81       	ld	r24, Z
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	80 83       	st	Z, r24
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9a4:	48 81       	ld	r20, Y
     9a6:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9a8:	4f 3f       	cpi	r20, 0xFF	; 255
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	52 07       	cpc	r21, r18
     9ae:	21 f4       	brne	.+8      	; 0x9b8 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9b0:	fc 01       	movw	r30, r24
     9b2:	a7 81       	ldd	r26, Z+7	; 0x07
     9b4:	b0 85       	ldd	r27, Z+8	; 0x08
     9b6:	0d c0       	rjmp	.+26     	; 0x9d2 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9b8:	dc 01       	movw	r26, r24
     9ba:	13 96       	adiw	r26, 0x03	; 3
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <vListInsert+0x22>
     9be:	df 01       	movw	r26, r30
     9c0:	12 96       	adiw	r26, 0x02	; 2
     9c2:	ed 91       	ld	r30, X+
     9c4:	fc 91       	ld	r31, X
     9c6:	13 97       	sbiw	r26, 0x03	; 3
     9c8:	20 81       	ld	r18, Z
     9ca:	31 81       	ldd	r19, Z+1	; 0x01
     9cc:	42 17       	cp	r20, r18
     9ce:	53 07       	cpc	r21, r19
     9d0:	b0 f7       	brcc	.-20     	; 0x9be <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     9d2:	12 96       	adiw	r26, 0x02	; 2
     9d4:	ed 91       	ld	r30, X+
     9d6:	fc 91       	ld	r31, X
     9d8:	13 97       	sbiw	r26, 0x03	; 3
     9da:	fb 83       	std	Y+3, r31	; 0x03
     9dc:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     9de:	d5 83       	std	Z+5, r29	; 0x05
     9e0:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     9e2:	bd 83       	std	Y+5, r27	; 0x05
     9e4:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     9e6:	13 96       	adiw	r26, 0x03	; 3
     9e8:	dc 93       	st	X, r29
     9ea:	ce 93       	st	-X, r28
     9ec:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     9ee:	99 87       	std	Y+9, r25	; 0x09
     9f0:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 81       	ld	r18, Z
     9f6:	2f 5f       	subi	r18, 0xFF	; 255
     9f8:	20 83       	st	Z, r18
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     a06:	a0 85       	ldd	r26, Z+8	; 0x08
     a08:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a0a:	c2 81       	ldd	r28, Z+2	; 0x02
     a0c:	d3 81       	ldd	r29, Z+3	; 0x03
     a0e:	84 81       	ldd	r24, Z+4	; 0x04
     a10:	95 81       	ldd	r25, Z+5	; 0x05
     a12:	9d 83       	std	Y+5, r25	; 0x05
     a14:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a16:	c4 81       	ldd	r28, Z+4	; 0x04
     a18:	d5 81       	ldd	r29, Z+5	; 0x05
     a1a:	82 81       	ldd	r24, Z+2	; 0x02
     a1c:	93 81       	ldd	r25, Z+3	; 0x03
     a1e:	9b 83       	std	Y+3, r25	; 0x03
     a20:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a22:	11 96       	adiw	r26, 0x01	; 1
     a24:	8d 91       	ld	r24, X+
     a26:	9c 91       	ld	r25, X
     a28:	12 97       	sbiw	r26, 0x02	; 2
     a2a:	e8 17       	cp	r30, r24
     a2c:	f9 07       	cpc	r31, r25
     a2e:	31 f4       	brne	.+12     	; 0xa3c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a30:	84 81       	ldd	r24, Z+4	; 0x04
     a32:	95 81       	ldd	r25, Z+5	; 0x05
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	9c 93       	st	X, r25
     a38:	8e 93       	st	-X, r24
     a3a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a3c:	11 86       	std	Z+9, r1	; 0x09
     a3e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     a40:	8c 91       	ld	r24, X
     a42:	81 50       	subi	r24, 0x01	; 1
     a44:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a46:	8c 91       	ld	r24, X
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a4e:	31 e1       	ldi	r19, 0x11	; 17
     a50:	fc 01       	movw	r30, r24
     a52:	30 83       	st	Z, r19
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	22 e2       	ldi	r18, 0x22	; 34
     a58:	20 83       	st	Z, r18
     a5a:	31 97       	sbiw	r30, 0x01	; 1
     a5c:	a3 e3       	ldi	r26, 0x33	; 51
     a5e:	a0 83       	st	Z, r26
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	60 83       	st	Z, r22
     a64:	31 97       	sbiw	r30, 0x01	; 1
     a66:	70 83       	st	Z, r23
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	10 82       	st	Z, r1
     a6c:	31 97       	sbiw	r30, 0x01	; 1
     a6e:	10 82       	st	Z, r1
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	60 e8       	ldi	r22, 0x80	; 128
     a74:	60 83       	st	Z, r22
     a76:	31 97       	sbiw	r30, 0x01	; 1
     a78:	10 82       	st	Z, r1
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	10 82       	st	Z, r1
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	10 82       	st	Z, r1
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	60 83       	st	Z, r22
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	63 e0       	ldi	r22, 0x03	; 3
     a8c:	60 83       	st	Z, r22
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	64 e0       	ldi	r22, 0x04	; 4
     a92:	60 83       	st	Z, r22
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	65 e0       	ldi	r22, 0x05	; 5
     a98:	60 83       	st	Z, r22
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	66 e0       	ldi	r22, 0x06	; 6
     a9e:	60 83       	st	Z, r22
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	67 e0       	ldi	r22, 0x07	; 7
     aa4:	60 83       	st	Z, r22
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	68 e0       	ldi	r22, 0x08	; 8
     aaa:	60 83       	st	Z, r22
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	69 e0       	ldi	r22, 0x09	; 9
     ab0:	60 83       	st	Z, r22
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	60 e1       	ldi	r22, 0x10	; 16
     ab6:	60 83       	st	Z, r22
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	30 83       	st	Z, r19
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	32 e1       	ldi	r19, 0x12	; 18
     ac0:	30 83       	st	Z, r19
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	33 e1       	ldi	r19, 0x13	; 19
     ac6:	30 83       	st	Z, r19
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	34 e1       	ldi	r19, 0x14	; 20
     acc:	30 83       	st	Z, r19
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	35 e1       	ldi	r19, 0x15	; 21
     ad2:	30 83       	st	Z, r19
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	36 e1       	ldi	r19, 0x16	; 22
     ad8:	30 83       	st	Z, r19
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	37 e1       	ldi	r19, 0x17	; 23
     ade:	30 83       	st	Z, r19
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	38 e1       	ldi	r19, 0x18	; 24
     ae4:	30 83       	st	Z, r19
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	39 e1       	ldi	r19, 0x19	; 25
     aea:	30 83       	st	Z, r19
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	30 e2       	ldi	r19, 0x20	; 32
     af0:	30 83       	st	Z, r19
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	31 e2       	ldi	r19, 0x21	; 33
     af6:	30 83       	st	Z, r19
     af8:	31 97       	sbiw	r30, 0x01	; 1
     afa:	20 83       	st	Z, r18
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	23 e2       	ldi	r18, 0x23	; 35
     b00:	20 83       	st	Z, r18
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	40 83       	st	Z, r20
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	50 83       	st	Z, r21
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	26 e2       	ldi	r18, 0x26	; 38
     b0e:	20 83       	st	Z, r18
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	27 e2       	ldi	r18, 0x27	; 39
     b14:	20 83       	st	Z, r18
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	28 e2       	ldi	r18, 0x28	; 40
     b1a:	20 83       	st	Z, r18
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	29 e2       	ldi	r18, 0x29	; 41
     b20:	20 83       	st	Z, r18
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	20 e3       	ldi	r18, 0x30	; 48
     b26:	20 83       	st	Z, r18
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	21 e3       	ldi	r18, 0x31	; 49
     b2c:	20 83       	st	Z, r18
     b2e:	89 97       	sbiw	r24, 0x29	; 41
     b30:	08 95       	ret

00000b32 <xPortStartScheduler>:
     b32:	a8 95       	wdr
     b34:	90 ec       	ldi	r25, 0xC0	; 192
     b36:	88 e1       	ldi	r24, 0x18	; 24
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	a8 95       	wdr
     b3e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b48:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
     b4c:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
     b50:	cd 91       	ld	r28, X+
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	dd 91       	ld	r29, X+
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	bf 90       	pop	r11
     b82:	af 90       	pop	r10
     b84:	9f 90       	pop	r9
     b86:	8f 90       	pop	r8
     b88:	7f 90       	pop	r7
     b8a:	6f 90       	pop	r6
     b8c:	5f 90       	pop	r5
     b8e:	4f 90       	pop	r4
     b90:	3f 90       	pop	r3
     b92:	2f 90       	pop	r2
     b94:	1f 90       	pop	r1
     b96:	0f 90       	pop	r0
     b98:	0c be       	out	0x3c, r0	; 60
     b9a:	0f 90       	pop	r0
     b9c:	0b be       	out	0x3b, r0	; 59
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	08 95       	ret
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	08 95       	ret

00000baa <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	0f 92       	push	r0
     bb2:	0b b6       	in	r0, 0x3b	; 59
     bb4:	0f 92       	push	r0
     bb6:	0c b6       	in	r0, 0x3c	; 60
     bb8:	0f 92       	push	r0
     bba:	1f 92       	push	r1
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 92       	push	r2
     bc0:	3f 92       	push	r3
     bc2:	4f 92       	push	r4
     bc4:	5f 92       	push	r5
     bc6:	6f 92       	push	r6
     bc8:	7f 92       	push	r7
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
     bfa:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
     bfe:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
     c02:	0d b6       	in	r0, 0x3d	; 61
     c04:	0d 92       	st	X+, r0
     c06:	0e b6       	in	r0, 0x3e	; 62
     c08:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c0a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c0e:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
     c12:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
     c16:	cd 91       	ld	r28, X+
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	dd 91       	ld	r29, X+
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	3f 90       	pop	r3
     c58:	2f 90       	pop	r2
     c5a:	1f 90       	pop	r1
     c5c:	0f 90       	pop	r0
     c5e:	0c be       	out	0x3c, r0	; 60
     c60:	0f 90       	pop	r0
     c62:	0b be       	out	0x3b, r0	; 59
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c6a:	08 95       	ret

00000c6c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c6c:	0f 92       	push	r0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	0f 92       	push	r0
     c74:	0b b6       	in	r0, 0x3b	; 59
     c76:	0f 92       	push	r0
     c78:	0c b6       	in	r0, 0x3c	; 60
     c7a:	0f 92       	push	r0
     c7c:	1f 92       	push	r1
     c7e:	11 24       	eor	r1, r1
     c80:	2f 92       	push	r2
     c82:	3f 92       	push	r3
     c84:	4f 92       	push	r4
     c86:	5f 92       	push	r5
     c88:	6f 92       	push	r6
     c8a:	7f 92       	push	r7
     c8c:	8f 92       	push	r8
     c8e:	9f 92       	push	r9
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	2f 93       	push	r18
     ca2:	3f 93       	push	r19
     ca4:	4f 93       	push	r20
     ca6:	5f 93       	push	r21
     ca8:	6f 93       	push	r22
     caa:	7f 93       	push	r23
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
     cb0:	af 93       	push	r26
     cb2:	bf 93       	push	r27
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
     cbc:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
     cc0:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
     cc4:	0d b6       	in	r0, 0x3d	; 61
     cc6:	0d 92       	st	X+, r0
     cc8:	0e b6       	in	r0, 0x3e	; 62
     cca:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     ccc:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     cce:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <xTaskIncrementTick>
     cd2:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     cd4:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     cd8:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
     cdc:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
     ce0:	cd 91       	ld	r28, X+
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	dd 91       	ld	r29, X+
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	7f 90       	pop	r7
     d1a:	6f 90       	pop	r6
     d1c:	5f 90       	pop	r5
     d1e:	4f 90       	pop	r4
     d20:	3f 90       	pop	r3
     d22:	2f 90       	pop	r2
     d24:	1f 90       	pop	r1
     d26:	0f 90       	pop	r0
     d28:	0c be       	out	0x3c, r0	; 60
     d2a:	0f 90       	pop	r0
     d2c:	0b be       	out	0x3b, r0	; 59
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d34:	08 95       	ret

00000d36 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d36:	9a df       	rcall	.-204    	; 0xc6c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d38:	18 95       	reti

00000d3a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	0f 92       	push	r0
     d40:	fc 01       	movw	r30, r24
     d42:	92 8d       	ldd	r25, Z+26	; 0x1a
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	91 11       	cpse	r25, r1
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	08 95       	ret

00000d50 <prvCopyDataToQueue>:
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
     d5a:	04 2f       	mov	r16, r20
     d5c:	1a 8d       	ldd	r17, Y+26	; 0x1a
     d5e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d60:	41 11       	cpse	r20, r1
     d62:	0c c0       	rjmp	.+24     	; 0xd7c <prvCopyDataToQueue+0x2c>
     d64:	88 81       	ld	r24, Y
     d66:	99 81       	ldd	r25, Y+1	; 0x01
     d68:	89 2b       	or	r24, r25
     d6a:	09 f0       	breq	.+2      	; 0xd6e <prvCopyDataToQueue+0x1e>
     d6c:	42 c0       	rjmp	.+132    	; 0xdf2 <prvCopyDataToQueue+0xa2>
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	9d 81       	ldd	r25, Y+5	; 0x05
     d72:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskPriorityDisinherit>
     d76:	1d 82       	std	Y+5, r1	; 0x05
     d78:	1c 82       	std	Y+4, r1	; 0x04
     d7a:	42 c0       	rjmp	.+132    	; 0xe00 <prvCopyDataToQueue+0xb0>
     d7c:	01 11       	cpse	r16, r1
     d7e:	17 c0       	rjmp	.+46     	; 0xdae <prvCopyDataToQueue+0x5e>
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	9b 81       	ldd	r25, Y+3	; 0x03
     d86:	0e 94 fd 21 	call	0x43fa	; 0x43fa <memcpy>
     d8a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	82 0f       	add	r24, r18
     d92:	91 1d       	adc	r25, r1
     d94:	9b 83       	std	Y+3, r25	; 0x03
     d96:	8a 83       	std	Y+2, r24	; 0x02
     d98:	2c 81       	ldd	r18, Y+4	; 0x04
     d9a:	3d 81       	ldd	r19, Y+5	; 0x05
     d9c:	82 17       	cp	r24, r18
     d9e:	93 07       	cpc	r25, r19
     da0:	50 f1       	brcs	.+84     	; 0xdf6 <prvCopyDataToQueue+0xa6>
     da2:	88 81       	ld	r24, Y
     da4:	99 81       	ldd	r25, Y+1	; 0x01
     da6:	9b 83       	std	Y+3, r25	; 0x03
     da8:	8a 83       	std	Y+2, r24	; 0x02
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	29 c0       	rjmp	.+82     	; 0xe00 <prvCopyDataToQueue+0xb0>
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	9f 81       	ldd	r25, Y+7	; 0x07
     db4:	0e 94 fd 21 	call	0x43fa	; 0x43fa <memcpy>
     db8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	91 95       	neg	r25
     dbe:	81 95       	neg	r24
     dc0:	91 09       	sbc	r25, r1
     dc2:	2e 81       	ldd	r18, Y+6	; 0x06
     dc4:	3f 81       	ldd	r19, Y+7	; 0x07
     dc6:	28 0f       	add	r18, r24
     dc8:	39 1f       	adc	r19, r25
     dca:	3f 83       	std	Y+7, r19	; 0x07
     dcc:	2e 83       	std	Y+6, r18	; 0x06
     dce:	48 81       	ld	r20, Y
     dd0:	59 81       	ldd	r21, Y+1	; 0x01
     dd2:	24 17       	cp	r18, r20
     dd4:	35 07       	cpc	r19, r21
     dd6:	30 f4       	brcc	.+12     	; 0xde4 <prvCopyDataToQueue+0x94>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	82 0f       	add	r24, r18
     dde:	93 1f       	adc	r25, r19
     de0:	9f 83       	std	Y+7, r25	; 0x07
     de2:	8e 83       	std	Y+6, r24	; 0x06
     de4:	02 30       	cpi	r16, 0x02	; 2
     de6:	49 f4       	brne	.+18     	; 0xdfa <prvCopyDataToQueue+0xaa>
     de8:	11 23       	and	r17, r17
     dea:	49 f0       	breq	.+18     	; 0xdfe <prvCopyDataToQueue+0xae>
     dec:	11 50       	subi	r17, 0x01	; 1
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <prvCopyDataToQueue+0xb0>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <prvCopyDataToQueue+0xb0>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <prvCopyDataToQueue+0xb0>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <prvCopyDataToQueue+0xb0>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	1f 5f       	subi	r17, 0xFF	; 255
     e02:	1a 8f       	std	Y+26, r17	; 0x1a
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <prvCopyDataFromQueue>:
     e0e:	fc 01       	movw	r30, r24
     e10:	44 8d       	ldd	r20, Z+28	; 0x1c
     e12:	44 23       	and	r20, r20
     e14:	a9 f0       	breq	.+42     	; 0xe40 <prvCopyDataFromQueue+0x32>
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	26 81       	ldd	r18, Z+6	; 0x06
     e1a:	37 81       	ldd	r19, Z+7	; 0x07
     e1c:	24 0f       	add	r18, r20
     e1e:	35 1f       	adc	r19, r21
     e20:	37 83       	std	Z+7, r19	; 0x07
     e22:	26 83       	std	Z+6, r18	; 0x06
     e24:	84 81       	ldd	r24, Z+4	; 0x04
     e26:	95 81       	ldd	r25, Z+5	; 0x05
     e28:	28 17       	cp	r18, r24
     e2a:	39 07       	cpc	r19, r25
     e2c:	20 f0       	brcs	.+8      	; 0xe36 <prvCopyDataFromQueue+0x28>
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	97 83       	std	Z+7, r25	; 0x07
     e34:	86 83       	std	Z+6, r24	; 0x06
     e36:	cb 01       	movw	r24, r22
     e38:	66 81       	ldd	r22, Z+6	; 0x06
     e3a:	77 81       	ldd	r23, Z+7	; 0x07
     e3c:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <memcpy>
     e40:	08 95       	ret

00000e42 <prvUnlockQueue>:
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	8c 01       	movw	r16, r24
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	0f 92       	push	r0
     e54:	fc 01       	movw	r30, r24
     e56:	c6 8d       	ldd	r28, Z+30	; 0x1e
     e58:	1c 16       	cp	r1, r28
     e5a:	ac f4       	brge	.+42     	; 0xe86 <prvUnlockQueue+0x44>
     e5c:	81 89       	ldd	r24, Z+17	; 0x11
     e5e:	81 11       	cpse	r24, r1
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <prvUnlockQueue+0x2c>
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <prvUnlockQueue+0x44>
     e64:	f8 01       	movw	r30, r16
     e66:	81 89       	ldd	r24, Z+17	; 0x11
     e68:	81 11       	cpse	r24, r1
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <prvUnlockQueue+0x34>
     e6c:	0c c0       	rjmp	.+24     	; 0xe86 <prvUnlockQueue+0x44>
     e6e:	78 01       	movw	r14, r16
     e70:	f1 e1       	ldi	r31, 0x11	; 17
     e72:	ef 0e       	add	r14, r31
     e74:	f1 1c       	adc	r15, r1
     e76:	c7 01       	movw	r24, r14
     e78:	0e 94 9a 10 	call	0x2134	; 0x2134 <xTaskRemoveFromEventList>
     e7c:	81 11       	cpse	r24, r1
     e7e:	0e 94 32 11 	call	0x2264	; 0x2264 <vTaskMissedYield>
     e82:	c1 50       	subi	r28, 0x01	; 1
     e84:	79 f7       	brne	.-34     	; 0xe64 <prvUnlockQueue+0x22>
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	f8 01       	movw	r30, r16
     e8a:	86 8f       	std	Z+30, r24	; 0x1e
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	0f 92       	push	r0
     e96:	c5 8d       	ldd	r28, Z+29	; 0x1d
     e98:	1c 16       	cp	r1, r28
     e9a:	ac f4       	brge	.+42     	; 0xec6 <prvUnlockQueue+0x84>
     e9c:	80 85       	ldd	r24, Z+8	; 0x08
     e9e:	81 11       	cpse	r24, r1
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <prvUnlockQueue+0x6c>
     ea2:	11 c0       	rjmp	.+34     	; 0xec6 <prvUnlockQueue+0x84>
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 85       	ldd	r24, Z+8	; 0x08
     ea8:	81 11       	cpse	r24, r1
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <prvUnlockQueue+0x74>
     eac:	0c c0       	rjmp	.+24     	; 0xec6 <prvUnlockQueue+0x84>
     eae:	78 01       	movw	r14, r16
     eb0:	f8 e0       	ldi	r31, 0x08	; 8
     eb2:	ef 0e       	add	r14, r31
     eb4:	f1 1c       	adc	r15, r1
     eb6:	c7 01       	movw	r24, r14
     eb8:	0e 94 9a 10 	call	0x2134	; 0x2134 <xTaskRemoveFromEventList>
     ebc:	81 11       	cpse	r24, r1
     ebe:	0e 94 32 11 	call	0x2264	; 0x2264 <vTaskMissedYield>
     ec2:	c1 50       	subi	r28, 0x01	; 1
     ec4:	79 f7       	brne	.-34     	; 0xea4 <prvUnlockQueue+0x62>
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	f8 01       	movw	r30, r16
     eca:	85 8f       	std	Z+29, r24	; 0x1d
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	08 95       	ret

00000edc <xQueueGenericReset>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	0f 92       	push	r0
     ee8:	e8 81       	ld	r30, Y
     eea:	f9 81       	ldd	r31, Y+1	; 0x01
     eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eee:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	82 9f       	mul	r24, r18
     ef6:	a0 01       	movw	r20, r0
     ef8:	83 9f       	mul	r24, r19
     efa:	50 0d       	add	r21, r0
     efc:	92 9f       	mul	r25, r18
     efe:	50 0d       	add	r21, r0
     f00:	11 24       	eor	r1, r1
     f02:	4e 0f       	add	r20, r30
     f04:	5f 1f       	adc	r21, r31
     f06:	5d 83       	std	Y+5, r21	; 0x05
     f08:	4c 83       	std	Y+4, r20	; 0x04
     f0a:	1a 8e       	std	Y+26, r1	; 0x1a
     f0c:	fb 83       	std	Y+3, r31	; 0x03
     f0e:	ea 83       	std	Y+2, r30	; 0x02
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	82 9f       	mul	r24, r18
     f14:	a0 01       	movw	r20, r0
     f16:	83 9f       	mul	r24, r19
     f18:	50 0d       	add	r21, r0
     f1a:	92 9f       	mul	r25, r18
     f1c:	50 0d       	add	r21, r0
     f1e:	11 24       	eor	r1, r1
     f20:	cf 01       	movw	r24, r30
     f22:	84 0f       	add	r24, r20
     f24:	95 1f       	adc	r25, r21
     f26:	9f 83       	std	Y+7, r25	; 0x07
     f28:	8e 83       	std	Y+6, r24	; 0x06
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	8d 8f       	std	Y+29, r24	; 0x1d
     f2e:	8e 8f       	std	Y+30, r24	; 0x1e
     f30:	61 11       	cpse	r22, r1
     f32:	0b c0       	rjmp	.+22     	; 0xf4a <xQueueGenericReset+0x6e>
     f34:	88 85       	ldd	r24, Y+8	; 0x08
     f36:	88 23       	and	r24, r24
     f38:	71 f0       	breq	.+28     	; 0xf56 <xQueueGenericReset+0x7a>
     f3a:	ce 01       	movw	r24, r28
     f3c:	08 96       	adiw	r24, 0x08	; 8
     f3e:	0e 94 9a 10 	call	0x2134	; 0x2134 <xTaskRemoveFromEventList>
     f42:	88 23       	and	r24, r24
     f44:	41 f0       	breq	.+16     	; 0xf56 <xQueueGenericReset+0x7a>
     f46:	31 de       	rcall	.-926    	; 0xbaa <vPortYield>
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <xQueueGenericReset+0x7a>
     f4a:	ce 01       	movw	r24, r28
     f4c:	08 96       	adiw	r24, 0x08	; 8
     f4e:	f4 dc       	rcall	.-1560   	; 0x938 <vListInitialise>
     f50:	ce 01       	movw	r24, r28
     f52:	41 96       	adiw	r24, 0x11	; 17
     f54:	f1 dc       	rcall	.-1566   	; 0x938 <vListInitialise>
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <xQueueGenericCreate>:
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	08 2f       	mov	r16, r24
     f6e:	16 2f       	mov	r17, r22
     f70:	f4 2e       	mov	r15, r20
     f72:	66 23       	and	r22, r22
     f74:	b9 f0       	breq	.+46     	; 0xfa4 <xQueueGenericCreate+0x42>
     f76:	86 9f       	mul	r24, r22
     f78:	c0 01       	movw	r24, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	81 96       	adiw	r24, 0x21	; 33
     f7e:	ba dc       	rcall	.-1676   	; 0x8f4 <pvPortMalloc>
     f80:	ec 01       	movw	r28, r24
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	41 f4       	brne	.+16     	; 0xf96 <xQueueGenericCreate+0x34>
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <xQueueGenericCreate+0x4e>
     f88:	0b 8f       	std	Y+27, r16	; 0x1b
     f8a:	1c 8f       	std	Y+28, r17	; 0x1c
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	ce 01       	movw	r24, r28
     f90:	a5 df       	rcall	.-182    	; 0xedc <xQueueGenericReset>
     f92:	f8 a2       	std	Y+32, r15	; 0x20
     f94:	0d c0       	rjmp	.+26     	; 0xfb0 <xQueueGenericCreate+0x4e>
     f96:	81 96       	adiw	r24, 0x21	; 33
     f98:	99 83       	std	Y+1, r25	; 0x01
     f9a:	88 83       	st	Y, r24
     f9c:	f5 cf       	rjmp	.-22     	; 0xf88 <xQueueGenericCreate+0x26>
     f9e:	d9 83       	std	Y+1, r29	; 0x01
     fa0:	c8 83       	st	Y, r28
     fa2:	f2 cf       	rjmp	.-28     	; 0xf88 <xQueueGenericCreate+0x26>
     fa4:	81 e2       	ldi	r24, 0x21	; 33
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a5 dc       	rcall	.-1718   	; 0x8f4 <pvPortMalloc>
     faa:	ec 01       	movw	r28, r24
     fac:	89 2b       	or	r24, r25
     fae:	b9 f7       	brne	.-18     	; 0xf9e <xQueueGenericCreate+0x3c>
     fb0:	ce 01       	movw	r24, r28
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	08 95       	ret

00000fbe <xQueueGenericSend>:
     fbe:	9f 92       	push	r9
     fc0:	af 92       	push	r10
     fc2:	bf 92       	push	r11
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <xQueueGenericSend+0x18>
     fd6:	1f 92       	push	r1
     fd8:	1f 92       	push	r1
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	8c 01       	movw	r16, r24
     fe0:	6b 01       	movw	r12, r22
     fe2:	5d 83       	std	Y+5, r21	; 0x05
     fe4:	4c 83       	std	Y+4, r20	; 0x04
     fe6:	a2 2e       	mov	r10, r18
     fe8:	b1 2c       	mov	r11, r1
     fea:	99 24       	eor	r9, r9
     fec:	93 94       	inc	r9
     fee:	7c 01       	movw	r14, r24
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	e8 0e       	add	r14, r24
     ff4:	f1 1c       	adc	r15, r1
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	0f 92       	push	r0
     ffc:	f8 01       	movw	r30, r16
     ffe:	92 8d       	ldd	r25, Z+26	; 0x1a
    1000:	83 8d       	ldd	r24, Z+27	; 0x1b
    1002:	98 17       	cp	r25, r24
    1004:	18 f0       	brcs	.+6      	; 0x100c <xQueueGenericSend+0x4e>
    1006:	f2 e0       	ldi	r31, 0x02	; 2
    1008:	af 12       	cpse	r10, r31
    100a:	16 c0       	rjmp	.+44     	; 0x1038 <xQueueGenericSend+0x7a>
    100c:	4a 2d       	mov	r20, r10
    100e:	b6 01       	movw	r22, r12
    1010:	c8 01       	movw	r24, r16
    1012:	9e de       	rcall	.-708    	; 0xd50 <prvCopyDataToQueue>
    1014:	f8 01       	movw	r30, r16
    1016:	91 89       	ldd	r25, Z+17	; 0x11
    1018:	99 23       	and	r25, r25
    101a:	41 f0       	breq	.+16     	; 0x102c <xQueueGenericSend+0x6e>
    101c:	c8 01       	movw	r24, r16
    101e:	41 96       	adiw	r24, 0x11	; 17
    1020:	0e 94 9a 10 	call	0x2134	; 0x2134 <xTaskRemoveFromEventList>
    1024:	88 23       	and	r24, r24
    1026:	21 f0       	breq	.+8      	; 0x1030 <xQueueGenericSend+0x72>
    1028:	c0 dd       	rcall	.-1152   	; 0xbaa <vPortYield>
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <xQueueGenericSend+0x72>
    102c:	81 11       	cpse	r24, r1
    102e:	bd dd       	rcall	.-1158   	; 0xbaa <vPortYield>
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	48 c0       	rjmp	.+144    	; 0x10c8 <xQueueGenericSend+0x10a>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	89 2b       	or	r24, r25
    103e:	21 f4       	brne	.+8      	; 0x1048 <xQueueGenericSend+0x8a>
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	40 c0       	rjmp	.+128    	; 0x10c8 <xQueueGenericSend+0x10a>
    1048:	b1 10       	cpse	r11, r1
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <xQueueGenericSend+0x98>
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <vTaskInternalSetTimeOutState>
    1054:	b9 2c       	mov	r11, r9
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	5d d6       	rcall	.+3258   	; 0x1d16 <vTaskSuspendAll>
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	0f 92       	push	r0
    1062:	f8 01       	movw	r30, r16
    1064:	85 8d       	ldd	r24, Z+29	; 0x1d
    1066:	8f 3f       	cpi	r24, 0xFF	; 255
    1068:	09 f4       	brne	.+2      	; 0x106c <xQueueGenericSend+0xae>
    106a:	15 8e       	std	Z+29, r1	; 0x1d
    106c:	f8 01       	movw	r30, r16
    106e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1070:	8f 3f       	cpi	r24, 0xFF	; 255
    1072:	09 f4       	brne	.+2      	; 0x1076 <xQueueGenericSend+0xb8>
    1074:	16 8e       	std	Z+30, r1	; 0x1e
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	be 01       	movw	r22, r28
    107c:	6c 5f       	subi	r22, 0xFC	; 252
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	ce 01       	movw	r24, r28
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCheckForTimeOut>
    1088:	81 11       	cpse	r24, r1
    108a:	1a c0       	rjmp	.+52     	; 0x10c0 <xQueueGenericSend+0x102>
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	0f 92       	push	r0
    1092:	f8 01       	movw	r30, r16
    1094:	92 8d       	ldd	r25, Z+26	; 0x1a
    1096:	83 8d       	ldd	r24, Z+27	; 0x1b
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	98 13       	cpse	r25, r24
    109e:	0c c0       	rjmp	.+24     	; 0x10b8 <xQueueGenericSend+0xfa>
    10a0:	6c 81       	ldd	r22, Y+4	; 0x04
    10a2:	7d 81       	ldd	r23, Y+5	; 0x05
    10a4:	c7 01       	movw	r24, r14
    10a6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <vTaskPlaceOnEventList>
    10aa:	c8 01       	movw	r24, r16
    10ac:	ca de       	rcall	.-620    	; 0xe42 <prvUnlockQueue>
    10ae:	fd d6       	rcall	.+3578   	; 0x1eaa <xTaskResumeAll>
    10b0:	81 11       	cpse	r24, r1
    10b2:	a1 cf       	rjmp	.-190    	; 0xff6 <xQueueGenericSend+0x38>
    10b4:	7a dd       	rcall	.-1292   	; 0xbaa <vPortYield>
    10b6:	9f cf       	rjmp	.-194    	; 0xff6 <xQueueGenericSend+0x38>
    10b8:	c8 01       	movw	r24, r16
    10ba:	c3 de       	rcall	.-634    	; 0xe42 <prvUnlockQueue>
    10bc:	f6 d6       	rcall	.+3564   	; 0x1eaa <xTaskResumeAll>
    10be:	9b cf       	rjmp	.-202    	; 0xff6 <xQueueGenericSend+0x38>
    10c0:	c8 01       	movw	r24, r16
    10c2:	bf de       	rcall	.-642    	; 0xe42 <prvUnlockQueue>
    10c4:	f2 d6       	rcall	.+3556   	; 0x1eaa <xTaskResumeAll>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	9f 90       	pop	r9
    10e8:	08 95       	ret

000010ea <xQueueCreateMutex>:
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	48 2f       	mov	r20, r24
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	36 df       	rcall	.-404    	; 0xf62 <xQueueGenericCreate>
    10f6:	ec 01       	movw	r28, r24
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	59 f0       	breq	.+22     	; 0x1112 <xQueueCreateMutex+0x28>
    10fc:	1d 82       	std	Y+5, r1	; 0x05
    10fe:	1c 82       	std	Y+4, r1	; 0x04
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	18 82       	st	Y, r1
    1104:	1e 82       	std	Y+6, r1	; 0x06
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	56 df       	rcall	.-340    	; 0xfbe <xQueueGenericSend>
    1112:	ce 01       	movw	r24, r28
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <xQueueGenericSendFromISR>:
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	8a 01       	movw	r16, r20
    1128:	fc 01       	movw	r30, r24
    112a:	52 8d       	ldd	r21, Z+26	; 0x1a
    112c:	33 8d       	ldd	r19, Z+27	; 0x1b
    112e:	53 17       	cp	r21, r19
    1130:	10 f0       	brcs	.+4      	; 0x1136 <xQueueGenericSendFromISR+0x1c>
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	e1 f4       	brne	.+56     	; 0x116e <xQueueGenericSendFromISR+0x54>
    1136:	42 2f       	mov	r20, r18
    1138:	78 01       	movw	r14, r16
    113a:	ec 01       	movw	r28, r24
    113c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    113e:	08 de       	rcall	.-1008   	; 0xd50 <prvCopyDataToQueue>
    1140:	1f 3f       	cpi	r17, 0xFF	; 255
    1142:	79 f4       	brne	.+30     	; 0x1162 <xQueueGenericSendFromISR+0x48>
    1144:	89 89       	ldd	r24, Y+17	; 0x11
    1146:	88 23       	and	r24, r24
    1148:	a1 f0       	breq	.+40     	; 0x1172 <xQueueGenericSendFromISR+0x58>
    114a:	ce 01       	movw	r24, r28
    114c:	41 96       	adiw	r24, 0x11	; 17
    114e:	f2 d7       	rcall	.+4068   	; 0x2134 <xTaskRemoveFromEventList>
    1150:	88 23       	and	r24, r24
    1152:	89 f0       	breq	.+34     	; 0x1176 <xQueueGenericSendFromISR+0x5c>
    1154:	e1 14       	cp	r14, r1
    1156:	f1 04       	cpc	r15, r1
    1158:	81 f0       	breq	.+32     	; 0x117a <xQueueGenericSendFromISR+0x60>
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	f7 01       	movw	r30, r14
    115e:	80 83       	st	Z, r24
    1160:	0d c0       	rjmp	.+26     	; 0x117c <xQueueGenericSendFromISR+0x62>
    1162:	ff 24       	eor	r15, r15
    1164:	f3 94       	inc	r15
    1166:	f1 0e       	add	r15, r17
    1168:	fe 8e       	std	Y+30, r15	; 0x1e
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	07 c0       	rjmp	.+14     	; 0x117c <xQueueGenericSendFromISR+0x62>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	05 c0       	rjmp	.+10     	; 0x117c <xQueueGenericSendFromISR+0x62>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	03 c0       	rjmp	.+6      	; 0x117c <xQueueGenericSendFromISR+0x62>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	01 c0       	rjmp	.+2      	; 0x117c <xQueueGenericSendFromISR+0x62>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	08 95       	ret

0000118a <xQueueReceive>:
    118a:	9f 92       	push	r9
    118c:	af 92       	push	r10
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <xQueueReceive+0x18>
    11a2:	1f 92       	push	r1
    11a4:	1f 92       	push	r1
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	8c 01       	movw	r16, r24
    11ac:	5b 01       	movw	r10, r22
    11ae:	5d 83       	std	Y+5, r21	; 0x05
    11b0:	4c 83       	std	Y+4, r20	; 0x04
    11b2:	e1 2c       	mov	r14, r1
    11b4:	99 24       	eor	r9, r9
    11b6:	93 94       	inc	r9
    11b8:	6c 01       	movw	r12, r24
    11ba:	81 e1       	ldi	r24, 0x11	; 17
    11bc:	c8 0e       	add	r12, r24
    11be:	d1 1c       	adc	r13, r1
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	0f 92       	push	r0
    11c6:	f8 01       	movw	r30, r16
    11c8:	f2 8c       	ldd	r15, Z+26	; 0x1a
    11ca:	ff 20       	and	r15, r15
    11cc:	91 f0       	breq	.+36     	; 0x11f2 <xQueueReceive+0x68>
    11ce:	b5 01       	movw	r22, r10
    11d0:	c8 01       	movw	r24, r16
    11d2:	1d de       	rcall	.-966    	; 0xe0e <prvCopyDataFromQueue>
    11d4:	fa 94       	dec	r15
    11d6:	f8 01       	movw	r30, r16
    11d8:	f2 8e       	std	Z+26, r15	; 0x1a
    11da:	80 85       	ldd	r24, Z+8	; 0x08
    11dc:	88 23       	and	r24, r24
    11de:	29 f0       	breq	.+10     	; 0x11ea <xQueueReceive+0x60>
    11e0:	c8 01       	movw	r24, r16
    11e2:	08 96       	adiw	r24, 0x08	; 8
    11e4:	a7 d7       	rcall	.+3918   	; 0x2134 <xTaskRemoveFromEventList>
    11e6:	81 11       	cpse	r24, r1
    11e8:	e0 dc       	rcall	.-1600   	; 0xbaa <vPortYield>
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	44 c0       	rjmp	.+136    	; 0x127a <xQueueReceive+0xf0>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	89 2b       	or	r24, r25
    11f8:	21 f4       	brne	.+8      	; 0x1202 <xQueueReceive+0x78>
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	3c c0       	rjmp	.+120    	; 0x127a <xQueueReceive+0xf0>
    1202:	e1 10       	cpse	r14, r1
    1204:	04 c0       	rjmp	.+8      	; 0x120e <xQueueReceive+0x84>
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	ec d7       	rcall	.+4056   	; 0x21e4 <vTaskInternalSetTimeOutState>
    120c:	e9 2c       	mov	r14, r9
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	81 d5       	rcall	.+2818   	; 0x1d16 <vTaskSuspendAll>
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	0f 92       	push	r0
    121a:	f8 01       	movw	r30, r16
    121c:	85 8d       	ldd	r24, Z+29	; 0x1d
    121e:	8f 3f       	cpi	r24, 0xFF	; 255
    1220:	09 f4       	brne	.+2      	; 0x1224 <xQueueReceive+0x9a>
    1222:	15 8e       	std	Z+29, r1	; 0x1d
    1224:	f8 01       	movw	r30, r16
    1226:	86 8d       	ldd	r24, Z+30	; 0x1e
    1228:	8f 3f       	cpi	r24, 0xFF	; 255
    122a:	09 f4       	brne	.+2      	; 0x122e <xQueueReceive+0xa4>
    122c:	16 8e       	std	Z+30, r1	; 0x1e
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	be 01       	movw	r22, r28
    1234:	6c 5f       	subi	r22, 0xFC	; 252
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	de d7       	rcall	.+4028   	; 0x21fa <xTaskCheckForTimeOut>
    123e:	81 11       	cpse	r24, r1
    1240:	13 c0       	rjmp	.+38     	; 0x1268 <xQueueReceive+0xde>
    1242:	c8 01       	movw	r24, r16
    1244:	7a dd       	rcall	.-1292   	; 0xd3a <prvIsQueueEmpty>
    1246:	88 23       	and	r24, r24
    1248:	59 f0       	breq	.+22     	; 0x1260 <xQueueReceive+0xd6>
    124a:	6c 81       	ldd	r22, Y+4	; 0x04
    124c:	7d 81       	ldd	r23, Y+5	; 0x05
    124e:	c6 01       	movw	r24, r12
    1250:	48 d7       	rcall	.+3728   	; 0x20e2 <vTaskPlaceOnEventList>
    1252:	c8 01       	movw	r24, r16
    1254:	f6 dd       	rcall	.-1044   	; 0xe42 <prvUnlockQueue>
    1256:	29 d6       	rcall	.+3154   	; 0x1eaa <xTaskResumeAll>
    1258:	81 11       	cpse	r24, r1
    125a:	b2 cf       	rjmp	.-156    	; 0x11c0 <xQueueReceive+0x36>
    125c:	a6 dc       	rcall	.-1716   	; 0xbaa <vPortYield>
    125e:	b0 cf       	rjmp	.-160    	; 0x11c0 <xQueueReceive+0x36>
    1260:	c8 01       	movw	r24, r16
    1262:	ef dd       	rcall	.-1058   	; 0xe42 <prvUnlockQueue>
    1264:	22 d6       	rcall	.+3140   	; 0x1eaa <xTaskResumeAll>
    1266:	ac cf       	rjmp	.-168    	; 0x11c0 <xQueueReceive+0x36>
    1268:	c8 01       	movw	r24, r16
    126a:	eb dd       	rcall	.-1066   	; 0xe42 <prvUnlockQueue>
    126c:	1e d6       	rcall	.+3132   	; 0x1eaa <xTaskResumeAll>
    126e:	c8 01       	movw	r24, r16
    1270:	64 dd       	rcall	.-1336   	; 0xd3a <prvIsQueueEmpty>
    1272:	88 23       	and	r24, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <xQueueReceive+0xee>
    1276:	a4 cf       	rjmp	.-184    	; 0x11c0 <xQueueReceive+0x36>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	08 95       	ret

0000129c <xQueueSemaphoreTake>:
    129c:	bf 92       	push	r11
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <xQueueSemaphoreTake+0x14>
    12b0:	1f 92       	push	r1
    12b2:	1f 92       	push	r1
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	8c 01       	movw	r16, r24
    12ba:	7d 83       	std	Y+5, r23	; 0x05
    12bc:	6c 83       	std	Y+4, r22	; 0x04
    12be:	b1 2c       	mov	r11, r1
    12c0:	d1 2c       	mov	r13, r1
    12c2:	cc 24       	eor	r12, r12
    12c4:	c3 94       	inc	r12
    12c6:	7c 01       	movw	r14, r24
    12c8:	81 e1       	ldi	r24, 0x11	; 17
    12ca:	e8 0e       	add	r14, r24
    12cc:	f1 1c       	adc	r15, r1
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	0f 92       	push	r0
    12d4:	d8 01       	movw	r26, r16
    12d6:	5a 96       	adiw	r26, 0x1a	; 26
    12d8:	8c 91       	ld	r24, X
    12da:	5a 97       	sbiw	r26, 0x1a	; 26
    12dc:	88 23       	and	r24, r24
    12de:	d9 f0       	breq	.+54     	; 0x1316 <xQueueSemaphoreTake+0x7a>
    12e0:	81 50       	subi	r24, 0x01	; 1
    12e2:	5a 96       	adiw	r26, 0x1a	; 26
    12e4:	8c 93       	st	X, r24
    12e6:	5a 97       	sbiw	r26, 0x1a	; 26
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	89 2b       	or	r24, r25
    12ee:	29 f4       	brne	.+10     	; 0x12fa <xQueueSemaphoreTake+0x5e>
    12f0:	0e 94 4b 12 	call	0x2496	; 0x2496 <pvTaskIncrementMutexHeldCount>
    12f4:	f8 01       	movw	r30, r16
    12f6:	95 83       	std	Z+5, r25	; 0x05
    12f8:	84 83       	std	Z+4, r24	; 0x04
    12fa:	d8 01       	movw	r26, r16
    12fc:	18 96       	adiw	r26, 0x08	; 8
    12fe:	8c 91       	ld	r24, X
    1300:	88 23       	and	r24, r24
    1302:	29 f0       	breq	.+10     	; 0x130e <xQueueSemaphoreTake+0x72>
    1304:	c8 01       	movw	r24, r16
    1306:	08 96       	adiw	r24, 0x08	; 8
    1308:	15 d7       	rcall	.+3626   	; 0x2134 <xTaskRemoveFromEventList>
    130a:	81 11       	cpse	r24, r1
    130c:	4e dc       	rcall	.-1892   	; 0xbaa <vPortYield>
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	71 c0       	rjmp	.+226    	; 0x13f8 <xQueueSemaphoreTake+0x15c>
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	89 2b       	or	r24, r25
    131c:	21 f4       	brne	.+8      	; 0x1326 <xQueueSemaphoreTake+0x8a>
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	69 c0       	rjmp	.+210    	; 0x13f8 <xQueueSemaphoreTake+0x15c>
    1326:	d1 10       	cpse	r13, r1
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <xQueueSemaphoreTake+0x96>
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	5a d7       	rcall	.+3764   	; 0x21e4 <vTaskInternalSetTimeOutState>
    1330:	dc 2c       	mov	r13, r12
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	ef d4       	rcall	.+2526   	; 0x1d16 <vTaskSuspendAll>
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	0f 92       	push	r0
    133e:	f8 01       	movw	r30, r16
    1340:	85 8d       	ldd	r24, Z+29	; 0x1d
    1342:	8f 3f       	cpi	r24, 0xFF	; 255
    1344:	09 f4       	brne	.+2      	; 0x1348 <xQueueSemaphoreTake+0xac>
    1346:	15 8e       	std	Z+29, r1	; 0x1d
    1348:	d8 01       	movw	r26, r16
    134a:	5e 96       	adiw	r26, 0x1e	; 30
    134c:	8c 91       	ld	r24, X
    134e:	5e 97       	sbiw	r26, 0x1e	; 30
    1350:	8f 3f       	cpi	r24, 0xFF	; 255
    1352:	11 f4       	brne	.+4      	; 0x1358 <xQueueSemaphoreTake+0xbc>
    1354:	5e 96       	adiw	r26, 0x1e	; 30
    1356:	1c 92       	st	X, r1
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	be 01       	movw	r22, r28
    135e:	6c 5f       	subi	r22, 0xFC	; 252
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	49 d7       	rcall	.+3730   	; 0x21fa <xTaskCheckForTimeOut>
    1368:	81 11       	cpse	r24, r1
    136a:	21 c0       	rjmp	.+66     	; 0x13ae <xQueueSemaphoreTake+0x112>
    136c:	c8 01       	movw	r24, r16
    136e:	e5 dc       	rcall	.-1590   	; 0xd3a <prvIsQueueEmpty>
    1370:	88 23       	and	r24, r24
    1372:	c9 f0       	breq	.+50     	; 0x13a6 <xQueueSemaphoreTake+0x10a>
    1374:	f8 01       	movw	r30, r16
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	89 2b       	or	r24, r25
    137c:	49 f4       	brne	.+18     	; 0x1390 <xQueueSemaphoreTake+0xf4>
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	0f 92       	push	r0
    1384:	84 81       	ldd	r24, Z+4	; 0x04
    1386:	95 81       	ldd	r25, Z+5	; 0x05
    1388:	84 d7       	rcall	.+3848   	; 0x2292 <xTaskPriorityInherit>
    138a:	b8 2e       	mov	r11, r24
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	6c 81       	ldd	r22, Y+4	; 0x04
    1392:	7d 81       	ldd	r23, Y+5	; 0x05
    1394:	c7 01       	movw	r24, r14
    1396:	a5 d6       	rcall	.+3402   	; 0x20e2 <vTaskPlaceOnEventList>
    1398:	c8 01       	movw	r24, r16
    139a:	53 dd       	rcall	.-1370   	; 0xe42 <prvUnlockQueue>
    139c:	86 d5       	rcall	.+2828   	; 0x1eaa <xTaskResumeAll>
    139e:	81 11       	cpse	r24, r1
    13a0:	96 cf       	rjmp	.-212    	; 0x12ce <xQueueSemaphoreTake+0x32>
    13a2:	03 dc       	rcall	.-2042   	; 0xbaa <vPortYield>
    13a4:	94 cf       	rjmp	.-216    	; 0x12ce <xQueueSemaphoreTake+0x32>
    13a6:	c8 01       	movw	r24, r16
    13a8:	4c dd       	rcall	.-1384   	; 0xe42 <prvUnlockQueue>
    13aa:	7f d5       	rcall	.+2814   	; 0x1eaa <xTaskResumeAll>
    13ac:	90 cf       	rjmp	.-224    	; 0x12ce <xQueueSemaphoreTake+0x32>
    13ae:	c8 01       	movw	r24, r16
    13b0:	48 dd       	rcall	.-1392   	; 0xe42 <prvUnlockQueue>
    13b2:	7b d5       	rcall	.+2806   	; 0x1eaa <xTaskResumeAll>
    13b4:	c8 01       	movw	r24, r16
    13b6:	c1 dc       	rcall	.-1662   	; 0xd3a <prvIsQueueEmpty>
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <xQueueSemaphoreTake+0x122>
    13bc:	88 cf       	rjmp	.-240    	; 0x12ce <xQueueSemaphoreTake+0x32>
    13be:	bb 20       	and	r11, r11
    13c0:	d1 f0       	breq	.+52     	; 0x13f6 <xQueueSemaphoreTake+0x15a>
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	0f 92       	push	r0
    13c8:	f8 01       	movw	r30, r16
    13ca:	81 89       	ldd	r24, Z+17	; 0x11
    13cc:	88 23       	and	r24, r24
    13ce:	39 f0       	breq	.+14     	; 0x13de <xQueueSemaphoreTake+0x142>
    13d0:	06 88       	ldd	r0, Z+22	; 0x16
    13d2:	f7 89       	ldd	r31, Z+23	; 0x17
    13d4:	e0 2d       	mov	r30, r0
    13d6:	80 81       	ld	r24, Z
    13d8:	64 e0       	ldi	r22, 0x04	; 4
    13da:	68 1b       	sub	r22, r24
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <xQueueSemaphoreTake+0x144>
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	d8 01       	movw	r26, r16
    13e2:	14 96       	adiw	r26, 0x04	; 4
    13e4:	8d 91       	ld	r24, X+
    13e6:	9c 91       	ld	r25, X
    13e8:	15 97       	sbiw	r26, 0x05	; 5
    13ea:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <vTaskPriorityDisinheritAfterTimeout>
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <xQueueSemaphoreTake+0x15c>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	df 90       	pop	r13
    1410:	cf 90       	pop	r12
    1412:	bf 90       	pop	r11
    1414:	08 95       	ret

00001416 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	0f 92       	push	r0
    1422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1424:	8f 3f       	cpi	r24, 0xFF	; 255
    1426:	09 f4       	brne	.+2      	; 0x142a <vQueueWaitForMessageRestricted+0x14>
    1428:	1d 8e       	std	Y+29, r1	; 0x1d
    142a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    142c:	8f 3f       	cpi	r24, 0xFF	; 255
    142e:	09 f4       	brne	.+2      	; 0x1432 <vQueueWaitForMessageRestricted+0x1c>
    1430:	1e 8e       	std	Y+30, r1	; 0x1e
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1436:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1438:	81 11       	cpse	r24, r1
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    143c:	ce 01       	movw	r24, r28
    143e:	41 96       	adiw	r24, 0x11	; 17
    1440:	61 d6       	rcall	.+3266   	; 0x2104 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1442:	ce 01       	movw	r24, r28
    1444:	fe dc       	rcall	.-1540   	; 0xe42 <prvUnlockQueue>
    }
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    144c:	fc 01       	movw	r30, r24
    144e:	44 81       	ldd	r20, Z+4	; 0x04
    1450:	55 81       	ldd	r21, Z+5	; 0x05
    1452:	22 81       	ldd	r18, Z+2	; 0x02
    1454:	33 81       	ldd	r19, Z+3	; 0x03
    1456:	24 0f       	add	r18, r20
    1458:	35 1f       	adc	r19, r21
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	b9 01       	movw	r22, r18
    1460:	68 1b       	sub	r22, r24
    1462:	79 0b       	sbc	r23, r25
    1464:	cb 01       	movw	r24, r22
    1466:	64 17       	cp	r22, r20
    1468:	75 07       	cpc	r23, r21
    146a:	10 f0       	brcs	.+4      	; 0x1470 <prvBytesInBuffer+0x24>
    146c:	84 1b       	sub	r24, r20
    146e:	95 0b       	sbc	r25, r21
    1470:	08 95       	ret

00001472 <prvWriteBytesToBuffer>:
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	6c 01       	movw	r12, r24
    1488:	5b 01       	movw	r10, r22
    148a:	7a 01       	movw	r14, r20
    148c:	fc 01       	movw	r30, r24
    148e:	c2 81       	ldd	r28, Z+2	; 0x02
    1490:	d3 81       	ldd	r29, Z+3	; 0x03
    1492:	04 81       	ldd	r16, Z+4	; 0x04
    1494:	15 81       	ldd	r17, Z+5	; 0x05
    1496:	0c 1b       	sub	r16, r28
    1498:	1d 0b       	sbc	r17, r29
    149a:	40 17       	cp	r20, r16
    149c:	51 07       	cpc	r21, r17
    149e:	08 f4       	brcc	.+2      	; 0x14a2 <prvWriteBytesToBuffer+0x30>
    14a0:	8a 01       	movw	r16, r20
    14a2:	f6 01       	movw	r30, r12
    14a4:	84 85       	ldd	r24, Z+12	; 0x0c
    14a6:	95 85       	ldd	r25, Z+13	; 0x0d
    14a8:	a8 01       	movw	r20, r16
    14aa:	b5 01       	movw	r22, r10
    14ac:	8c 0f       	add	r24, r28
    14ae:	9d 1f       	adc	r25, r29
    14b0:	0e 94 fd 21 	call	0x43fa	; 0x43fa <memcpy>
    14b4:	0e 15       	cp	r16, r14
    14b6:	1f 05       	cpc	r17, r15
    14b8:	58 f4       	brcc	.+22     	; 0x14d0 <prvWriteBytesToBuffer+0x5e>
    14ba:	a7 01       	movw	r20, r14
    14bc:	40 1b       	sub	r20, r16
    14be:	51 0b       	sbc	r21, r17
    14c0:	b5 01       	movw	r22, r10
    14c2:	60 0f       	add	r22, r16
    14c4:	71 1f       	adc	r23, r17
    14c6:	f6 01       	movw	r30, r12
    14c8:	84 85       	ldd	r24, Z+12	; 0x0c
    14ca:	95 85       	ldd	r25, Z+13	; 0x0d
    14cc:	0e 94 fd 21 	call	0x43fa	; 0x43fa <memcpy>
    14d0:	ce 01       	movw	r24, r28
    14d2:	8e 0d       	add	r24, r14
    14d4:	9f 1d       	adc	r25, r15
    14d6:	f6 01       	movw	r30, r12
    14d8:	24 81       	ldd	r18, Z+4	; 0x04
    14da:	35 81       	ldd	r19, Z+5	; 0x05
    14dc:	82 17       	cp	r24, r18
    14de:	93 07       	cpc	r25, r19
    14e0:	10 f0       	brcs	.+4      	; 0x14e6 <prvWriteBytesToBuffer+0x74>
    14e2:	82 1b       	sub	r24, r18
    14e4:	93 0b       	sbc	r25, r19
    14e6:	f6 01       	movw	r30, r12
    14e8:	93 83       	std	Z+3, r25	; 0x03
    14ea:	82 83       	std	Z+2, r24	; 0x02
    14ec:	c7 01       	movw	r24, r14
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	08 95       	ret

00001504 <prvWriteMessageToBuffer>:
    1504:	cf 92       	push	r12
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	1f 92       	push	r1
    1516:	1f 92       	push	r1
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	5a 83       	std	Y+2, r21	; 0x02
    151e:	49 83       	std	Y+1, r20	; 0x01
    1520:	21 15       	cp	r18, r1
    1522:	31 05       	cpc	r19, r1
    1524:	c9 f0       	breq	.+50     	; 0x1558 <prvWriteMessageToBuffer+0x54>
    1526:	6b 01       	movw	r12, r22
    1528:	7c 01       	movw	r14, r24
    152a:	fc 01       	movw	r30, r24
    152c:	86 85       	ldd	r24, Z+14	; 0x0e
    152e:	80 fd       	sbrc	r24, 0
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <prvWriteMessageToBuffer+0x3e>
    1532:	ca 01       	movw	r24, r20
    1534:	24 17       	cp	r18, r20
    1536:	35 07       	cpc	r19, r21
    1538:	08 f4       	brcc	.+2      	; 0x153c <prvWriteMessageToBuffer+0x38>
    153a:	c9 01       	movw	r24, r18
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	11 c0       	rjmp	.+34     	; 0x1564 <prvWriteMessageToBuffer+0x60>
    1542:	20 17       	cp	r18, r16
    1544:	31 07       	cpc	r19, r17
    1546:	58 f0       	brcs	.+22     	; 0x155e <prvWriteMessageToBuffer+0x5a>
    1548:	42 e0       	ldi	r20, 0x02	; 2
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	be 01       	movw	r22, r28
    154e:	6f 5f       	subi	r22, 0xFF	; 255
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	c7 01       	movw	r24, r14
    1554:	8e df       	rcall	.-228    	; 0x1472 <prvWriteBytesToBuffer>
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <prvWriteMessageToBuffer+0x60>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	08 c0       	rjmp	.+16     	; 0x156e <prvWriteMessageToBuffer+0x6a>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	05 c0       	rjmp	.+10     	; 0x156e <prvWriteMessageToBuffer+0x6a>
    1564:	49 81       	ldd	r20, Y+1	; 0x01
    1566:	5a 81       	ldd	r21, Y+2	; 0x02
    1568:	b6 01       	movw	r22, r12
    156a:	c7 01       	movw	r24, r14
    156c:	82 df       	rcall	.-252    	; 0x1472 <prvWriteBytesToBuffer>
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	08 95       	ret

00001584 <prvReadBytesFromBuffer>:
    1584:	af 92       	push	r10
    1586:	bf 92       	push	r11
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	7c 01       	movw	r14, r24
    159a:	5b 01       	movw	r10, r22
    159c:	e9 01       	movw	r28, r18
    159e:	42 17       	cp	r20, r18
    15a0:	53 07       	cpc	r21, r19
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <prvReadBytesFromBuffer+0x22>
    15a4:	ea 01       	movw	r28, r20
    15a6:	20 97       	sbiw	r28, 0x00	; 0
    15a8:	79 f1       	breq	.+94     	; 0x1608 <prvReadBytesFromBuffer+0x84>
    15aa:	f7 01       	movw	r30, r14
    15ac:	00 81       	ld	r16, Z
    15ae:	11 81       	ldd	r17, Z+1	; 0x01
    15b0:	c4 80       	ldd	r12, Z+4	; 0x04
    15b2:	d5 80       	ldd	r13, Z+5	; 0x05
    15b4:	c0 1a       	sub	r12, r16
    15b6:	d1 0a       	sbc	r13, r17
    15b8:	cc 15       	cp	r28, r12
    15ba:	dd 05       	cpc	r29, r13
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <prvReadBytesFromBuffer+0x3c>
    15be:	6e 01       	movw	r12, r28
    15c0:	f7 01       	movw	r30, r14
    15c2:	64 85       	ldd	r22, Z+12	; 0x0c
    15c4:	75 85       	ldd	r23, Z+13	; 0x0d
    15c6:	60 0f       	add	r22, r16
    15c8:	71 1f       	adc	r23, r17
    15ca:	a6 01       	movw	r20, r12
    15cc:	c5 01       	movw	r24, r10
    15ce:	0e 94 fd 21 	call	0x43fa	; 0x43fa <memcpy>
    15d2:	cc 16       	cp	r12, r28
    15d4:	dd 06       	cpc	r13, r29
    15d6:	58 f4       	brcc	.+22     	; 0x15ee <prvReadBytesFromBuffer+0x6a>
    15d8:	ae 01       	movw	r20, r28
    15da:	4c 19       	sub	r20, r12
    15dc:	5d 09       	sbc	r21, r13
    15de:	f7 01       	movw	r30, r14
    15e0:	64 85       	ldd	r22, Z+12	; 0x0c
    15e2:	75 85       	ldd	r23, Z+13	; 0x0d
    15e4:	c5 01       	movw	r24, r10
    15e6:	8c 0d       	add	r24, r12
    15e8:	9d 1d       	adc	r25, r13
    15ea:	0e 94 fd 21 	call	0x43fa	; 0x43fa <memcpy>
    15ee:	0c 0f       	add	r16, r28
    15f0:	1d 1f       	adc	r17, r29
    15f2:	f7 01       	movw	r30, r14
    15f4:	84 81       	ldd	r24, Z+4	; 0x04
    15f6:	95 81       	ldd	r25, Z+5	; 0x05
    15f8:	08 17       	cp	r16, r24
    15fa:	19 07       	cpc	r17, r25
    15fc:	10 f0       	brcs	.+4      	; 0x1602 <prvReadBytesFromBuffer+0x7e>
    15fe:	08 1b       	sub	r16, r24
    1600:	19 0b       	sbc	r17, r25
    1602:	f7 01       	movw	r30, r14
    1604:	11 83       	std	Z+1, r17	; 0x01
    1606:	00 83       	st	Z, r16
    1608:	ce 01       	movw	r24, r28
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	af 90       	pop	r10
    161e:	08 95       	ret

00001620 <xStreamBufferGenericCreate>:
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	eb 01       	movw	r28, r22
    162c:	11 e0       	ldi	r17, 0x01	; 1
    162e:	41 30       	cpi	r20, 0x01	; 1
    1630:	09 f0       	breq	.+2      	; 0x1634 <xStreamBufferGenericCreate+0x14>
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	20 97       	sbiw	r28, 0x00	; 0
    1636:	11 f4       	brne	.+4      	; 0x163c <xStreamBufferGenericCreate+0x1c>
    1638:	c1 e0       	ldi	r28, 0x01	; 1
    163a:	d0 e0       	ldi	r29, 0x00	; 0
    163c:	7c 01       	movw	r14, r24
    163e:	2f ef       	ldi	r18, 0xFF	; 255
    1640:	e2 1a       	sub	r14, r18
    1642:	f2 0a       	sbc	r15, r18
    1644:	41 96       	adiw	r24, 0x11	; 17
    1646:	56 d9       	rcall	.-3412   	; 0x8f4 <pvPortMalloc>
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	81 f0       	breq	.+32     	; 0x166c <xStreamBufferGenericCreate+0x4c>
    164c:	20 e1       	ldi	r18, 0x10	; 16
    164e:	fc 01       	movw	r30, r24
    1650:	11 92       	st	Z+, r1
    1652:	2a 95       	dec	r18
    1654:	e9 f7       	brne	.-6      	; 0x1650 <xStreamBufferGenericCreate+0x30>
    1656:	9c 01       	movw	r18, r24
    1658:	20 5f       	subi	r18, 0xF0	; 240
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	fc 01       	movw	r30, r24
    165e:	35 87       	std	Z+13, r19	; 0x0d
    1660:	24 87       	std	Z+12, r18	; 0x0c
    1662:	f5 82       	std	Z+5, r15	; 0x05
    1664:	e4 82       	std	Z+4, r14	; 0x04
    1666:	d7 83       	std	Z+7, r29	; 0x07
    1668:	c6 83       	std	Z+6, r28	; 0x06
    166a:	16 87       	std	Z+14, r17	; 0x0e
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	08 95       	ret

00001678 <xStreamBufferSpacesAvailable>:
    1678:	fc 01       	movw	r30, r24
    167a:	24 81       	ldd	r18, Z+4	; 0x04
    167c:	35 81       	ldd	r19, Z+5	; 0x05
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	42 81       	ldd	r20, Z+2	; 0x02
    1684:	53 81       	ldd	r21, Z+3	; 0x03
    1686:	82 0f       	add	r24, r18
    1688:	93 1f       	adc	r25, r19
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	84 1b       	sub	r24, r20
    168e:	95 0b       	sbc	r25, r21
    1690:	82 17       	cp	r24, r18
    1692:	93 07       	cpc	r25, r19
    1694:	10 f0       	brcs	.+4      	; 0x169a <xStreamBufferSpacesAvailable+0x22>
    1696:	82 1b       	sub	r24, r18
    1698:	93 0b       	sbc	r25, r19
    169a:	08 95       	ret

0000169c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    169c:	4f 92       	push	r4
    169e:	5f 92       	push	r5
    16a0:	6f 92       	push	r6
    16a2:	7f 92       	push	r7
    16a4:	8f 92       	push	r8
    16a6:	9f 92       	push	r9
    16a8:	af 92       	push	r10
    16aa:	bf 92       	push	r11
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	00 d0       	rcall	.+0      	; 0x16be <xStreamBufferSend+0x22>
    16be:	1f 92       	push	r1
    16c0:	1f 92       	push	r1
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	6c 01       	movw	r12, r24
    16c8:	2b 01       	movw	r4, r22
    16ca:	3a 01       	movw	r6, r20
    16cc:	3d 83       	std	Y+5, r19	; 0x05
    16ce:	2c 83       	std	Y+4, r18	; 0x04

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16d0:	fc 01       	movw	r30, r24
    16d2:	86 85       	ldd	r24, Z+14	; 0x0e
    16d4:	80 ff       	sbrs	r24, 0
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <xStreamBufferSend+0x46>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16d8:	4a 01       	movw	r8, r20
    16da:	f2 e0       	ldi	r31, 0x02	; 2
    16dc:	8f 0e       	add	r8, r31
    16de:	91 1c       	adc	r9, r1
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <xStreamBufferSend+0x48>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    16e2:	4a 01       	movw	r8, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	89 2b       	or	r24, r25
    16ea:	09 f4       	brne	.+2      	; 0x16ee <xStreamBufferSend+0x52>
    16ec:	32 c0       	rjmp	.+100    	; 0x1752 <xStreamBufferSend+0xb6>
    {
        vTaskSetTimeOutState( &xTimeOut );
    16ee:	ce 01       	movw	r24, r28
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	68 d5       	rcall	.+2768   	; 0x21c4 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16fa:	c6 01       	movw	r24, r12
    16fc:	bd df       	rcall	.-134    	; 0x1678 <xStreamBufferSpacesAvailable>
    16fe:	5c 01       	movw	r10, r24

                if( xSpace < xRequiredSpace )
    1700:	88 15       	cp	r24, r8
    1702:	99 05       	cpc	r25, r9
    1704:	08 f5       	brcc	.+66     	; 0x1748 <xStreamBufferSend+0xac>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    170e:	ae d5       	rcall	.+2908   	; 0x226c <xTaskGetCurrentTaskHandle>
    1710:	f6 01       	movw	r30, r12
    1712:	93 87       	std	Z+11, r25	; 0x0b
    1714:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    171a:	ec 80       	ldd	r14, Y+4	; 0x04
    171c:	fd 80       	ldd	r15, Y+5	; 0x05
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	10 e0       	ldi	r17, 0x00	; 0
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	a9 01       	movw	r20, r18
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	cb 01       	movw	r24, r22
    172e:	c5 d6       	rcall	.+3466   	; 0x24ba <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1730:	f6 01       	movw	r30, r12
    1732:	13 86       	std	Z+11, r1	; 0x0b
    1734:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1736:	be 01       	movw	r22, r28
    1738:	6c 5f       	subi	r22, 0xFC	; 252
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	5c d5       	rcall	.+2744   	; 0x21fa <xTaskCheckForTimeOut>
    1742:	88 23       	and	r24, r24
    1744:	b9 f2       	breq	.-82     	; 0x16f4 <xStreamBufferSend+0x58>
    1746:	02 c0       	rjmp	.+4      	; 0x174c <xStreamBufferSend+0xb0>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1748:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	a1 14       	cp	r10, r1
    174e:	b1 04       	cpc	r11, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1750:	19 f4       	brne	.+6      	; 0x1758 <xStreamBufferSend+0xbc>
    1752:	c6 01       	movw	r24, r12
    1754:	91 df       	rcall	.-222    	; 0x1678 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1756:	5c 01       	movw	r10, r24
    1758:	84 01       	movw	r16, r8
    175a:	95 01       	movw	r18, r10
    175c:	a3 01       	movw	r20, r6
    175e:	b2 01       	movw	r22, r4
    1760:	c6 01       	movw	r24, r12
    1762:	d0 de       	rcall	.-608    	; 0x1504 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1764:	7c 01       	movw	r14, r24
    1766:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1768:	d9 f0       	breq	.+54     	; 0x17a0 <xStreamBufferSend+0x104>
    176a:	c6 01       	movw	r24, r12
    176c:	6f de       	rcall	.-802    	; 0x144c <prvBytesInBuffer>
    176e:	f6 01       	movw	r30, r12
    1770:	26 81       	ldd	r18, Z+6	; 0x06
    1772:	37 81       	ldd	r19, Z+7	; 0x07
    1774:	82 17       	cp	r24, r18
    1776:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1778:	98 f0       	brcs	.+38     	; 0x17a0 <xStreamBufferSend+0x104>
    177a:	cd d2       	rcall	.+1434   	; 0x1d16 <vTaskSuspendAll>
    177c:	f6 01       	movw	r30, r12
    177e:	80 85       	ldd	r24, Z+8	; 0x08
    1780:	91 85       	ldd	r25, Z+9	; 0x09
    1782:	89 2b       	or	r24, r25
    1784:	61 f0       	breq	.+24     	; 0x179e <xStreamBufferSend+0x102>
    1786:	80 85       	ldd	r24, Z+8	; 0x08
    1788:	91 85       	ldd	r25, Z+9	; 0x09
    178a:	00 e0       	ldi	r16, 0x00	; 0
    178c:	10 e0       	ldi	r17, 0x00	; 0
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	ba 01       	movw	r22, r20
    1796:	14 d7       	rcall	.+3624   	; 0x25c0 <xTaskGenericNotify>
    1798:	f6 01       	movw	r30, r12
    179a:	11 86       	std	Z+9, r1	; 0x09
    179c:	10 86       	std	Z+8, r1	; 0x08
    179e:	85 d3       	rcall	.+1802   	; 0x1eaa <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    17a0:	c7 01       	movw	r24, r14
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	af 90       	pop	r10
    17c0:	9f 90       	pop	r9
    17c2:	8f 90       	pop	r8
    17c4:	7f 90       	pop	r7
    17c6:	6f 90       	pop	r6
    17c8:	5f 90       	pop	r5
    17ca:	4f 90       	pop	r4
    17cc:	08 95       	ret

000017ce <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    17ce:	af 92       	push	r10
    17d0:	bf 92       	push	r11
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	5b 01       	movw	r10, r22
    17e6:	6a 01       	movw	r12, r20
    17e8:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ec:	80 ff       	sbrs	r24, 0
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17f0:	8a 01       	movw	r16, r20
    17f2:	0e 5f       	subi	r16, 0xFE	; 254
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    17f8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17fa:	ce 01       	movw	r24, r28
    17fc:	3d df       	rcall	.-390    	; 0x1678 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    17fe:	9c 01       	movw	r18, r24
    1800:	a6 01       	movw	r20, r12
    1802:	b5 01       	movw	r22, r10
    1804:	ce 01       	movw	r24, r28
    1806:	7e de       	rcall	.-772    	; 0x1504 <prvWriteMessageToBuffer>
    1808:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    180a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    180c:	b1 f0       	breq	.+44     	; 0x183a <xStreamBufferSendFromISR+0x6c>
    180e:	ce 01       	movw	r24, r28
    1810:	1d de       	rcall	.-966    	; 0x144c <prvBytesInBuffer>
    1812:	2e 81       	ldd	r18, Y+6	; 0x06
    1814:	3f 81       	ldd	r19, Y+7	; 0x07
    1816:	82 17       	cp	r24, r18
    1818:	93 07       	cpc	r25, r19
    181a:	78 f0       	brcs	.+30     	; 0x183a <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    181c:	88 85       	ldd	r24, Y+8	; 0x08
    181e:	99 85       	ldd	r25, Y+9	; 0x09
    1820:	89 2b       	or	r24, r25
    1822:	59 f0       	breq	.+22     	; 0x183a <xStreamBufferSendFromISR+0x6c>
    1824:	88 85       	ldd	r24, Y+8	; 0x08
    1826:	99 85       	ldd	r25, Y+9	; 0x09
    1828:	00 e0       	ldi	r16, 0x00	; 0
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	ba 01       	movw	r22, r20
    1834:	43 d7       	rcall	.+3718   	; 0x26bc <xTaskGenericNotifyFromISR>
    1836:	19 86       	std	Y+9, r1	; 0x09
    1838:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    183a:	c6 01       	movw	r24, r12
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	cf 90       	pop	r12
    184c:	bf 90       	pop	r11
    184e:	af 90       	pop	r10
    1850:	08 95       	ret

00001852 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1852:	6f 92       	push	r6
    1854:	7f 92       	push	r7
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	1f 92       	push	r1
    1870:	1f 92       	push	r1
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	6c 01       	movw	r12, r24
    1878:	3b 01       	movw	r6, r22
    187a:	4a 01       	movw	r8, r20
    187c:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    187e:	fc 01       	movw	r30, r24
    1880:	86 85       	ldd	r24, Z+14	; 0x0e
    1882:	80 fd       	sbrc	r24, 0
    1884:	03 c0       	rjmp	.+6      	; 0x188c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1886:	a1 2c       	mov	r10, r1
    1888:	b1 2c       	mov	r11, r1
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    188c:	68 94       	set
    188e:	aa 24       	eor	r10, r10
    1890:	a1 f8       	bld	r10, 1
    1892:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1894:	e1 14       	cp	r14, r1
    1896:	f1 04       	cpc	r15, r1
    1898:	29 f1       	breq	.+74     	; 0x18e4 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18a0:	c6 01       	movw	r24, r12
    18a2:	d4 dd       	rcall	.-1112   	; 0x144c <prvBytesInBuffer>
    18a4:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    18a6:	a8 16       	cp	r10, r24
    18a8:	b9 06       	cpc	r11, r25
    18aa:	38 f0       	brcs	.+14     	; 0x18ba <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    18b0:	95 d7       	rcall	.+3882   	; 0x27dc <xTaskNotifyStateClear>
    18b2:	dc d4       	rcall	.+2488   	; 0x226c <xTaskGetCurrentTaskHandle>
    18b4:	f6 01       	movw	r30, r12
    18b6:	91 87       	std	Z+9, r25	; 0x09
    18b8:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    18be:	a0 16       	cp	r10, r16
    18c0:	b1 06       	cpc	r11, r17
    18c2:	b0 f0       	brcs	.+44     	; 0x18f0 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    18c4:	00 e0       	ldi	r16, 0x00	; 0
    18c6:	10 e0       	ldi	r17, 0x00	; 0
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	cb 01       	movw	r24, r22
    18d4:	f2 d5       	rcall	.+3044   	; 0x24ba <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    18d6:	f6 01       	movw	r30, r12
    18d8:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18da:	10 86       	std	Z+8, r1	; 0x08
    18dc:	c6 01       	movw	r24, r12
    18de:	b6 dd       	rcall	.-1172   	; 0x144c <prvBytesInBuffer>
    18e0:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <xStreamBufferReceive+0x98>
    18e4:	c6 01       	movw	r24, r12
    18e6:	b2 dd       	rcall	.-1180   	; 0x144c <prvBytesInBuffer>
    18e8:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    18ea:	a0 16       	cp	r10, r16
    18ec:	b1 06       	cpc	r11, r17
    18ee:	b8 f5       	brcc	.+110    	; 0x195e <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    18f0:	a1 14       	cp	r10, r1
    18f2:	b1 04       	cpc	r11, r1
    18f4:	c1 f0       	breq	.+48     	; 0x1926 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    18f6:	f6 01       	movw	r30, r12
    18f8:	e0 80       	ld	r14, Z
    18fa:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    18fc:	98 01       	movw	r18, r16
    18fe:	a5 01       	movw	r20, r10
    1900:	be 01       	movw	r22, r28
    1902:	6f 5f       	subi	r22, 0xFF	; 255
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	c6 01       	movw	r24, r12
    1908:	3d de       	rcall	.-902    	; 0x1584 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    190e:	0a 19       	sub	r16, r10
    1910:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1912:	88 16       	cp	r8, r24
    1914:	99 06       	cpc	r9, r25
    1916:	30 f4       	brcc	.+12     	; 0x1924 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1918:	f6 01       	movw	r30, r12
    191a:	f1 82       	std	Z+1, r15	; 0x01
    191c:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    191e:	81 2c       	mov	r8, r1
    1920:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1924:	4c 01       	movw	r8, r24
    1926:	98 01       	movw	r18, r16
    1928:	a4 01       	movw	r20, r8
    192a:	b3 01       	movw	r22, r6
    192c:	c6 01       	movw	r24, r12
    192e:	2a de       	rcall	.-940    	; 0x1584 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1930:	7c 01       	movw	r14, r24
    1932:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1934:	b1 f0       	breq	.+44     	; 0x1962 <xStreamBufferReceive+0x110>
    1936:	ef d1       	rcall	.+990    	; 0x1d16 <vTaskSuspendAll>
    1938:	f6 01       	movw	r30, r12
    193a:	82 85       	ldd	r24, Z+10	; 0x0a
    193c:	93 85       	ldd	r25, Z+11	; 0x0b
    193e:	89 2b       	or	r24, r25
    1940:	61 f0       	breq	.+24     	; 0x195a <xStreamBufferReceive+0x108>
    1942:	82 85       	ldd	r24, Z+10	; 0x0a
    1944:	93 85       	ldd	r25, Z+11	; 0x0b
    1946:	00 e0       	ldi	r16, 0x00	; 0
    1948:	10 e0       	ldi	r17, 0x00	; 0
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	ba 01       	movw	r22, r20
    1952:	36 d6       	rcall	.+3180   	; 0x25c0 <xTaskGenericNotify>
    1954:	f6 01       	movw	r30, r12
    1956:	13 86       	std	Z+11, r1	; 0x0b
    1958:	12 86       	std	Z+10, r1	; 0x0a
    195a:	a7 d2       	rcall	.+1358   	; 0x1eaa <xTaskResumeAll>
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    195e:	e1 2c       	mov	r14, r1
    1960:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1962:	c7 01       	movw	r24, r14
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	9f 90       	pop	r9
    197e:	8f 90       	pop	r8
    1980:	7f 90       	pop	r7
    1982:	6f 90       	pop	r6
    1984:	08 95       	ret

00001986 <prvResetNextTaskUnblockTime>:
    1986:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <pxDelayedTaskList>
    198a:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <pxDelayedTaskList+0x1>
    198e:	80 81       	ld	r24, Z
    1990:	81 11       	cpse	r24, r1
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <prvResetNextTaskUnblockTime+0x1c>
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	9f ef       	ldi	r25, 0xFF	; 255
    1998:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <xNextTaskUnblockTime+0x1>
    199c:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <xNextTaskUnblockTime>
    19a0:	08 95       	ret
    19a2:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <pxDelayedTaskList>
    19a6:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <pxDelayedTaskList+0x1>
    19aa:	05 80       	ldd	r0, Z+5	; 0x05
    19ac:	f6 81       	ldd	r31, Z+6	; 0x06
    19ae:	e0 2d       	mov	r30, r0
    19b0:	06 80       	ldd	r0, Z+6	; 0x06
    19b2:	f7 81       	ldd	r31, Z+7	; 0x07
    19b4:	e0 2d       	mov	r30, r0
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <xNextTaskUnblockTime+0x1>
    19be:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <xNextTaskUnblockTime>
    19c2:	08 95       	ret

000019c4 <prvAddCurrentTaskToDelayedList>:
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	f6 2e       	mov	r15, r22
    19d2:	00 91 61 04 	lds	r16, 0x0461	; 0x800461 <xTickCount>
    19d6:	10 91 62 04 	lds	r17, 0x0462	; 0x800462 <xTickCount+0x1>
    19da:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <pxCurrentTCB>
    19de:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    19e2:	02 96       	adiw	r24, 0x02	; 2
    19e4:	0d d8       	rcall	.-4070   	; 0xa00 <uxListRemove>
    19e6:	cf 3f       	cpi	r28, 0xFF	; 255
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	d8 07       	cpc	r29, r24
    19ec:	69 f4       	brne	.+26     	; 0x1a08 <prvAddCurrentTaskToDelayedList+0x44>
    19ee:	ff 20       	and	r15, r15
    19f0:	59 f0       	breq	.+22     	; 0x1a08 <prvAddCurrentTaskToDelayedList+0x44>
    19f2:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <pxCurrentTCB>
    19f6:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    19fa:	6e 5f       	subi	r22, 0xFE	; 254
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	84 e6       	ldi	r24, 0x64	; 100
    1a00:	94 e0       	ldi	r25, 0x04	; 4
    1a02:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    1a06:	2f c0       	rjmp	.+94     	; 0x1a66 <prvAddCurrentTaskToDelayedList+0xa2>
    1a08:	c0 0f       	add	r28, r16
    1a0a:	d1 1f       	adc	r29, r17
    1a0c:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1a10:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1a14:	d3 83       	std	Z+3, r29	; 0x03
    1a16:	c2 83       	std	Z+2, r28	; 0x02
    1a18:	c0 17       	cp	r28, r16
    1a1a:	d1 07       	cpc	r29, r17
    1a1c:	68 f4       	brcc	.+26     	; 0x1a38 <prvAddCurrentTaskToDelayedList+0x74>
    1a1e:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1a22:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1a26:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <pxOverflowDelayedTaskList>
    1a2a:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <pxOverflowDelayedTaskList+0x1>
    1a2e:	6e 5f       	subi	r22, 0xFE	; 254
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	0e 94 cf 04 	call	0x99e	; 0x99e <vListInsert>
    1a36:	17 c0       	rjmp	.+46     	; 0x1a66 <prvAddCurrentTaskToDelayedList+0xa2>
    1a38:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1a3c:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1a40:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <pxDelayedTaskList>
    1a44:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <pxDelayedTaskList+0x1>
    1a48:	6e 5f       	subi	r22, 0xFE	; 254
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	0e 94 cf 04 	call	0x99e	; 0x99e <vListInsert>
    1a50:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <xNextTaskUnblockTime>
    1a54:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <xNextTaskUnblockTime+0x1>
    1a58:	c8 17       	cp	r28, r24
    1a5a:	d9 07       	cpc	r29, r25
    1a5c:	20 f4       	brcc	.+8      	; 0x1a66 <prvAddCurrentTaskToDelayedList+0xa2>
    1a5e:	d0 93 5a 04 	sts	0x045A, r29	; 0x80045a <xNextTaskUnblockTime+0x1>
    1a62:	c0 93 59 04 	sts	0x0459, r28	; 0x800459 <xNextTaskUnblockTime>
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	08 95       	ret

00001a72 <xTaskCreate>:
    1a72:	4f 92       	push	r4
    1a74:	5f 92       	push	r5
    1a76:	6f 92       	push	r6
    1a78:	7f 92       	push	r7
    1a7a:	8f 92       	push	r8
    1a7c:	9f 92       	push	r9
    1a7e:	af 92       	push	r10
    1a80:	bf 92       	push	r11
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	4c 01       	movw	r8, r24
    1a92:	6b 01       	movw	r12, r22
    1a94:	5a 01       	movw	r10, r20
    1a96:	29 01       	movw	r4, r18
    1a98:	ca 01       	movw	r24, r20
    1a9a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <pvPortMalloc>
    1a9e:	3c 01       	movw	r6, r24
    1aa0:	89 2b       	or	r24, r25
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <xTaskCreate+0x34>
    1aa4:	f4 c0       	rjmp	.+488    	; 0x1c8e <xTaskCreate+0x21c>
    1aa6:	8c e2       	ldi	r24, 0x2C	; 44
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <pvPortMalloc>
    1aae:	ec 01       	movw	r28, r24
    1ab0:	89 2b       	or	r24, r25
    1ab2:	99 f0       	breq	.+38     	; 0x1ada <xTaskCreate+0x68>
    1ab4:	78 8e       	std	Y+24, r7	; 0x18
    1ab6:	6f 8a       	std	Y+23, r6	; 0x17
    1ab8:	a5 01       	movw	r20, r10
    1aba:	65 ea       	ldi	r22, 0xA5	; 165
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	c3 01       	movw	r24, r6
    1ac0:	0e 94 06 22 	call	0x440c	; 0x440c <memset>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	a8 1a       	sub	r10, r24
    1ac8:	b1 08       	sbc	r11, r1
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	a8 0e       	add	r10, r24
    1ad0:	b9 1e       	adc	r11, r25
    1ad2:	c1 14       	cp	r12, r1
    1ad4:	d1 04       	cpc	r13, r1
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <xTaskCreate+0x70>
    1ad8:	20 c0       	rjmp	.+64     	; 0x1b1a <xTaskCreate+0xa8>
    1ada:	c3 01       	movw	r24, r6
    1adc:	0e 94 8d 04 	call	0x91a	; 0x91a <vPortFree>
    1ae0:	d6 c0       	rjmp	.+428    	; 0x1c8e <xTaskCreate+0x21c>
    1ae2:	d6 01       	movw	r26, r12
    1ae4:	8c 91       	ld	r24, X
    1ae6:	89 8f       	std	Y+25, r24	; 0x19
    1ae8:	8c 91       	ld	r24, X
    1aea:	88 23       	and	r24, r24
    1aec:	a1 f0       	breq	.+40     	; 0x1b16 <xTaskCreate+0xa4>
    1aee:	ae 01       	movw	r20, r28
    1af0:	46 5e       	subi	r20, 0xE6	; 230
    1af2:	5f 4f       	sbci	r21, 0xFF	; 255
    1af4:	f6 01       	movw	r30, r12
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	b8 e0       	ldi	r27, 0x08	; 8
    1afa:	cb 0e       	add	r12, r27
    1afc:	d1 1c       	adc	r13, r1
    1afe:	cf 01       	movw	r24, r30
    1b00:	21 91       	ld	r18, Z+
    1b02:	da 01       	movw	r26, r20
    1b04:	2d 93       	st	X+, r18
    1b06:	ad 01       	movw	r20, r26
    1b08:	dc 01       	movw	r26, r24
    1b0a:	8c 91       	ld	r24, X
    1b0c:	88 23       	and	r24, r24
    1b0e:	19 f0       	breq	.+6      	; 0x1b16 <xTaskCreate+0xa4>
    1b10:	ec 15       	cp	r30, r12
    1b12:	fd 05       	cpc	r31, r13
    1b14:	a1 f7       	brne	.-24     	; 0x1afe <xTaskCreate+0x8c>
    1b16:	18 a2       	std	Y+32, r1	; 0x20
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <xTaskCreate+0xaa>
    1b1a:	19 8e       	std	Y+25, r1	; 0x19
    1b1c:	04 30       	cpi	r16, 0x04	; 4
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <xTaskCreate+0xb0>
    1b20:	03 e0       	ldi	r16, 0x03	; 3
    1b22:	0e 8b       	std	Y+22, r16	; 0x16
    1b24:	0b a3       	std	Y+35, r16	; 0x23
    1b26:	1c a2       	std	Y+36, r1	; 0x24
    1b28:	6e 01       	movw	r12, r28
    1b2a:	b2 e0       	ldi	r27, 0x02	; 2
    1b2c:	cb 0e       	add	r12, r27
    1b2e:	d1 1c       	adc	r13, r1
    1b30:	c6 01       	movw	r24, r12
    1b32:	0e 94 aa 04 	call	0x954	; 0x954 <vListInitialiseItem>
    1b36:	ce 01       	movw	r24, r28
    1b38:	0c 96       	adiw	r24, 0x0c	; 12
    1b3a:	0e 94 aa 04 	call	0x954	; 0x954 <vListInitialiseItem>
    1b3e:	d9 87       	std	Y+9, r29	; 0x09
    1b40:	c8 87       	std	Y+8, r28	; 0x08
    1b42:	84 e0       	ldi	r24, 0x04	; 4
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	80 1b       	sub	r24, r16
    1b48:	91 09       	sbc	r25, r1
    1b4a:	9d 87       	std	Y+13, r25	; 0x0d
    1b4c:	8c 87       	std	Y+12, r24	; 0x0c
    1b4e:	db 8b       	std	Y+19, r29	; 0x13
    1b50:	ca 8b       	std	Y+18, r28	; 0x12
    1b52:	1e a2       	std	Y+38, r1	; 0x26
    1b54:	1d a2       	std	Y+37, r1	; 0x25
    1b56:	1f a2       	std	Y+39, r1	; 0x27
    1b58:	18 a6       	std	Y+40, r1	; 0x28
    1b5a:	19 a6       	std	Y+41, r1	; 0x29
    1b5c:	1a a6       	std	Y+42, r1	; 0x2a
    1b5e:	1b a6       	std	Y+43, r1	; 0x2b
    1b60:	a2 01       	movw	r20, r4
    1b62:	b4 01       	movw	r22, r8
    1b64:	c5 01       	movw	r24, r10
    1b66:	0e 94 27 05 	call	0xa4e	; 0xa4e <pxPortInitialiseStack>
    1b6a:	99 83       	std	Y+1, r25	; 0x01
    1b6c:	88 83       	st	Y, r24
    1b6e:	e1 14       	cp	r14, r1
    1b70:	f1 04       	cpc	r15, r1
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <xTaskCreate+0x108>
    1b74:	f7 01       	movw	r30, r14
    1b76:	d1 83       	std	Z+1, r29	; 0x01
    1b78:	c0 83       	st	Z, r28
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	0f 92       	push	r0
    1b80:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <uxCurrentNumberOfTasks>
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <uxCurrentNumberOfTasks>
    1b8a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1b8e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1b92:	89 2b       	or	r24, r25
    1b94:	d1 f5       	brne	.+116    	; 0x1c0a <xTaskCreate+0x198>
    1b96:	d0 93 bb 04 	sts	0x04BB, r29	; 0x8004bb <pxCurrentTCB+0x1>
    1b9a:	c0 93 ba 04 	sts	0x04BA, r28	; 0x8004ba <pxCurrentTCB>
    1b9e:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <uxCurrentNumberOfTasks>
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <xTaskCreate+0x136>
    1ba6:	41 c0       	rjmp	.+130    	; 0x1c2a <xTaskCreate+0x1b8>
    1ba8:	86 e9       	ldi	r24, 0x96	; 150
    1baa:	94 e0       	ldi	r25, 0x04	; 4
    1bac:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1bb0:	8f e9       	ldi	r24, 0x9F	; 159
    1bb2:	94 e0       	ldi	r25, 0x04	; 4
    1bb4:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1bb8:	88 ea       	ldi	r24, 0xA8	; 168
    1bba:	94 e0       	ldi	r25, 0x04	; 4
    1bbc:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1bc0:	81 eb       	ldi	r24, 0xB1	; 177
    1bc2:	94 e0       	ldi	r25, 0x04	; 4
    1bc4:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1bc8:	8d e8       	ldi	r24, 0x8D	; 141
    1bca:	94 e0       	ldi	r25, 0x04	; 4
    1bcc:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1bd0:	84 e8       	ldi	r24, 0x84	; 132
    1bd2:	94 e0       	ldi	r25, 0x04	; 4
    1bd4:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1bd8:	87 e7       	ldi	r24, 0x77	; 119
    1bda:	94 e0       	ldi	r25, 0x04	; 4
    1bdc:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1be0:	8e e6       	ldi	r24, 0x6E	; 110
    1be2:	94 e0       	ldi	r25, 0x04	; 4
    1be4:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1be8:	84 e6       	ldi	r24, 0x64	; 100
    1bea:	94 e0       	ldi	r25, 0x04	; 4
    1bec:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
    1bf0:	8d e8       	ldi	r24, 0x8D	; 141
    1bf2:	94 e0       	ldi	r25, 0x04	; 4
    1bf4:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <pxDelayedTaskList+0x1>
    1bf8:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <pxDelayedTaskList>
    1bfc:	84 e8       	ldi	r24, 0x84	; 132
    1bfe:	94 e0       	ldi	r25, 0x04	; 4
    1c00:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <pxOverflowDelayedTaskList+0x1>
    1c04:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <pxOverflowDelayedTaskList>
    1c08:	10 c0       	rjmp	.+32     	; 0x1c2a <xTaskCreate+0x1b8>
    1c0a:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <xSchedulerRunning>
    1c0e:	81 11       	cpse	r24, r1
    1c10:	0c c0       	rjmp	.+24     	; 0x1c2a <xTaskCreate+0x1b8>
    1c12:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1c16:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1c1a:	96 89       	ldd	r25, Z+22	; 0x16
    1c1c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c1e:	89 17       	cp	r24, r25
    1c20:	20 f0       	brcs	.+8      	; 0x1c2a <xTaskCreate+0x1b8>
    1c22:	d0 93 bb 04 	sts	0x04BB, r29	; 0x8004bb <pxCurrentTCB+0x1>
    1c26:	c0 93 ba 04 	sts	0x04BA, r28	; 0x8004ba <pxCurrentTCB>
    1c2a:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <uxTaskNumber>
    1c2e:	8f 5f       	subi	r24, 0xFF	; 255
    1c30:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <uxTaskNumber>
    1c34:	89 a3       	std	Y+33, r24	; 0x21
    1c36:	8e 89       	ldd	r24, Y+22	; 0x16
    1c38:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    1c3c:	98 17       	cp	r25, r24
    1c3e:	10 f4       	brcc	.+4      	; 0x1c44 <xTaskCreate+0x1d2>
    1c40:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9c 01       	movw	r18, r24
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	22 0f       	add	r18, r18
    1c4e:	33 1f       	adc	r19, r19
    1c50:	22 0f       	add	r18, r18
    1c52:	33 1f       	adc	r19, r19
    1c54:	82 0f       	add	r24, r18
    1c56:	93 1f       	adc	r25, r19
    1c58:	b6 01       	movw	r22, r12
    1c5a:	8a 56       	subi	r24, 0x6A	; 106
    1c5c:	9b 4f       	sbci	r25, 0xFB	; 251
    1c5e:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    1c62:	0f 90       	pop	r0
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <xSchedulerRunning>
    1c6a:	88 23       	and	r24, r24
    1c6c:	61 f0       	breq	.+24     	; 0x1c86 <xTaskCreate+0x214>
    1c6e:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1c72:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1c76:	96 89       	ldd	r25, Z+22	; 0x16
    1c78:	8e 89       	ldd	r24, Y+22	; 0x16
    1c7a:	98 17       	cp	r25, r24
    1c7c:	30 f4       	brcc	.+12     	; 0x1c8a <xTaskCreate+0x218>
    1c7e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortYield>
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	05 c0       	rjmp	.+10     	; 0x1c90 <xTaskCreate+0x21e>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <xTaskCreate+0x21e>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <xTaskCreate+0x21e>
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	0f 91       	pop	r16
    1c96:	ff 90       	pop	r15
    1c98:	ef 90       	pop	r14
    1c9a:	df 90       	pop	r13
    1c9c:	cf 90       	pop	r12
    1c9e:	bf 90       	pop	r11
    1ca0:	af 90       	pop	r10
    1ca2:	9f 90       	pop	r9
    1ca4:	8f 90       	pop	r8
    1ca6:	7f 90       	pop	r7
    1ca8:	6f 90       	pop	r6
    1caa:	5f 90       	pop	r5
    1cac:	4f 90       	pop	r4
    1cae:	08 95       	ret

00001cb0 <vTaskStartScheduler>:
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	0f 2e       	mov	r0, r31
    1cb8:	f7 e5       	ldi	r31, 0x57	; 87
    1cba:	ef 2e       	mov	r14, r31
    1cbc:	f4 e0       	ldi	r31, 0x04	; 4
    1cbe:	ff 2e       	mov	r15, r31
    1cc0:	f0 2d       	mov	r31, r0
    1cc2:	00 e0       	ldi	r16, 0x00	; 0
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 ec       	ldi	r20, 0xC0	; 192
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	69 e2       	ldi	r22, 0x29	; 41
    1cce:	74 e0       	ldi	r23, 0x04	; 4
    1cd0:	8d ec       	ldi	r24, 0xCD	; 205
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	ce de       	rcall	.-612    	; 0x1a72 <xTaskCreate>
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	d1 f4       	brne	.+52     	; 0x1d0e <vTaskStartScheduler+0x5e>
    1cda:	ec d5       	rcall	.+3032   	; 0x28b4 <xTimerCreateTimerTask>
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	b9 f4       	brne	.+46     	; 0x1d0e <vTaskStartScheduler+0x5e>
    1ce0:	f8 94       	cli
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
    1ce6:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <xNextTaskUnblockTime+0x1>
    1cea:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <xNextTaskUnblockTime>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <xSchedulerRunning>
    1cf4:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <xTickCount+0x1>
    1cf8:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <xTickCount>
    1cfc:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1d00:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1d04:	85 a1       	ldd	r24, Z+37	; 0x25
    1d06:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <task_switch_in>
    1d0a:	0e 94 99 05 	call	0xb32	; 0xb32 <xPortStartScheduler>
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	08 95       	ret

00001d16 <vTaskSuspendAll>:
    1d16:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <__data_end>
    1d20:	08 95       	ret

00001d22 <xTaskGetTickCount>:
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	0f 92       	push	r0
    1d28:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <xTickCount>
    1d2c:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <xTickCount+0x1>
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	08 95       	ret

00001d36 <xTaskIncrementTick>:
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	98 c0       	rjmp	.+304    	; 0x1e7e <xTaskIncrementTick+0x148>
    1d4e:	e0 90 61 04 	lds	r14, 0x0461	; 0x800461 <xTickCount>
    1d52:	f0 90 62 04 	lds	r15, 0x0462	; 0x800462 <xTickCount+0x1>
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	e8 1a       	sub	r14, r24
    1d5a:	f8 0a       	sbc	r15, r24
    1d5c:	f0 92 62 04 	sts	0x0462, r15	; 0x800462 <xTickCount+0x1>
    1d60:	e0 92 61 04 	sts	0x0461, r14	; 0x800461 <xTickCount>
    1d64:	e1 14       	cp	r14, r1
    1d66:	f1 04       	cpc	r15, r1
    1d68:	b1 f4       	brne	.+44     	; 0x1d96 <xTaskIncrementTick+0x60>
    1d6a:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <pxDelayedTaskList>
    1d6e:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <pxDelayedTaskList+0x1>
    1d72:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <pxOverflowDelayedTaskList>
    1d76:	30 91 81 04 	lds	r19, 0x0481	; 0x800481 <pxOverflowDelayedTaskList+0x1>
    1d7a:	30 93 83 04 	sts	0x0483, r19	; 0x800483 <pxDelayedTaskList+0x1>
    1d7e:	20 93 82 04 	sts	0x0482, r18	; 0x800482 <pxDelayedTaskList>
    1d82:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <pxOverflowDelayedTaskList+0x1>
    1d86:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <pxOverflowDelayedTaskList>
    1d8a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <xNumOfOverflows>
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <xNumOfOverflows>
    1d94:	f8 dd       	rcall	.-1040   	; 0x1986 <prvResetNextTaskUnblockTime>
    1d96:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <xNextTaskUnblockTime>
    1d9a:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <xNextTaskUnblockTime+0x1>
    1d9e:	e8 16       	cp	r14, r24
    1da0:	f9 06       	cpc	r15, r25
    1da2:	10 f4       	brcc	.+4      	; 0x1da8 <xTaskIncrementTick+0x72>
    1da4:	d1 2c       	mov	r13, r1
    1da6:	53 c0       	rjmp	.+166    	; 0x1e4e <xTaskIncrementTick+0x118>
    1da8:	d1 2c       	mov	r13, r1
    1daa:	cc 24       	eor	r12, r12
    1dac:	c3 94       	inc	r12
    1dae:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <pxDelayedTaskList>
    1db2:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <pxDelayedTaskList+0x1>
    1db6:	80 81       	ld	r24, Z
    1db8:	81 11       	cpse	r24, r1
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <xTaskIncrementTick+0x94>
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <xNextTaskUnblockTime+0x1>
    1dc4:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <xNextTaskUnblockTime>
    1dc8:	42 c0       	rjmp	.+132    	; 0x1e4e <xTaskIncrementTick+0x118>
    1dca:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <pxDelayedTaskList>
    1dce:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <pxDelayedTaskList+0x1>
    1dd2:	05 80       	ldd	r0, Z+5	; 0x05
    1dd4:	f6 81       	ldd	r31, Z+6	; 0x06
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	c6 81       	ldd	r28, Z+6	; 0x06
    1dda:	d7 81       	ldd	r29, Z+7	; 0x07
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	e8 16       	cp	r14, r24
    1de2:	f9 06       	cpc	r15, r25
    1de4:	28 f4       	brcc	.+10     	; 0x1df0 <xTaskIncrementTick+0xba>
    1de6:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <xNextTaskUnblockTime+0x1>
    1dea:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <xNextTaskUnblockTime>
    1dee:	2f c0       	rjmp	.+94     	; 0x1e4e <xTaskIncrementTick+0x118>
    1df0:	8e 01       	movw	r16, r28
    1df2:	0e 5f       	subi	r16, 0xFE	; 254
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	c8 01       	movw	r24, r16
    1df8:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    1dfc:	8c 89       	ldd	r24, Y+20	; 0x14
    1dfe:	9d 89       	ldd	r25, Y+21	; 0x15
    1e00:	89 2b       	or	r24, r25
    1e02:	21 f0       	breq	.+8      	; 0x1e0c <xTaskIncrementTick+0xd6>
    1e04:	ce 01       	movw	r24, r28
    1e06:	0c 96       	adiw	r24, 0x0c	; 12
    1e08:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    1e0c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e0e:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    1e12:	98 17       	cp	r25, r24
    1e14:	10 f4       	brcc	.+4      	; 0x1e1a <xTaskIncrementTick+0xe4>
    1e16:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9c 01       	movw	r18, r24
    1e1e:	22 0f       	add	r18, r18
    1e20:	33 1f       	adc	r19, r19
    1e22:	22 0f       	add	r18, r18
    1e24:	33 1f       	adc	r19, r19
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	82 0f       	add	r24, r18
    1e2c:	93 1f       	adc	r25, r19
    1e2e:	b8 01       	movw	r22, r16
    1e30:	8a 56       	subi	r24, 0x6A	; 106
    1e32:	9b 4f       	sbci	r25, 0xFB	; 251
    1e34:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    1e38:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1e3c:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1e40:	9e 89       	ldd	r25, Y+22	; 0x16
    1e42:	86 89       	ldd	r24, Z+22	; 0x16
    1e44:	98 17       	cp	r25, r24
    1e46:	08 f4       	brcc	.+2      	; 0x1e4a <xTaskIncrementTick+0x114>
    1e48:	b2 cf       	rjmp	.-156    	; 0x1dae <xTaskIncrementTick+0x78>
    1e4a:	dc 2c       	mov	r13, r12
    1e4c:	b0 cf       	rjmp	.-160    	; 0x1dae <xTaskIncrementTick+0x78>
    1e4e:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1e52:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1e56:	86 89       	ldd	r24, Z+22	; 0x16
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	ee 0f       	add	r30, r30
    1e5e:	ff 1f       	adc	r31, r31
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	8e 0f       	add	r24, r30
    1e6a:	9f 1f       	adc	r25, r31
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	ea 56       	subi	r30, 0x6A	; 106
    1e70:	fb 4f       	sbci	r31, 0xFB	; 251
    1e72:	80 81       	ld	r24, Z
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	48 f0       	brcs	.+18     	; 0x1e8a <xTaskIncrementTick+0x154>
    1e78:	dd 24       	eor	r13, r13
    1e7a:	d3 94       	inc	r13
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <xTaskIncrementTick+0x154>
    1e7e:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <uxPendedTicks>
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <uxPendedTicks>
    1e88:	d1 2c       	mov	r13, r1
    1e8a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <xYieldPending>
    1e8e:	88 23       	and	r24, r24
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <xTaskIncrementTick+0x160>
    1e92:	dd 24       	eor	r13, r13
    1e94:	d3 94       	inc	r13
    1e96:	8d 2d       	mov	r24, r13
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	08 95       	ret

00001eaa <xTaskResumeAll>:
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	0f 92       	push	r0
    1ebe:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    1ec2:	81 50       	subi	r24, 0x01	; 1
    1ec4:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <__data_end>
    1ec8:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    1ecc:	81 11       	cpse	r24, r1
    1ece:	5d c0       	rjmp	.+186    	; 0x1f8a <xTaskResumeAll+0xe0>
    1ed0:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <uxCurrentNumberOfTasks>
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	33 c0       	rjmp	.+102    	; 0x1f3e <xTaskResumeAll+0x94>
    1ed8:	5b c0       	rjmp	.+182    	; 0x1f90 <xTaskResumeAll+0xe6>
    1eda:	d7 01       	movw	r26, r14
    1edc:	15 96       	adiw	r26, 0x05	; 5
    1ede:	ed 91       	ld	r30, X+
    1ee0:	fc 91       	ld	r31, X
    1ee2:	16 97       	sbiw	r26, 0x06	; 6
    1ee4:	c6 81       	ldd	r28, Z+6	; 0x06
    1ee6:	d7 81       	ldd	r29, Z+7	; 0x07
    1ee8:	ce 01       	movw	r24, r28
    1eea:	0c 96       	adiw	r24, 0x0c	; 12
    1eec:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    1ef0:	8e 01       	movw	r16, r28
    1ef2:	0e 5f       	subi	r16, 0xFE	; 254
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	c8 01       	movw	r24, r16
    1ef8:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    1efc:	8e 89       	ldd	r24, Y+22	; 0x16
    1efe:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    1f02:	98 17       	cp	r25, r24
    1f04:	10 f4       	brcc	.+4      	; 0x1f0a <xTaskResumeAll+0x60>
    1f06:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9c 01       	movw	r18, r24
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	22 0f       	add	r18, r18
    1f14:	33 1f       	adc	r19, r19
    1f16:	22 0f       	add	r18, r18
    1f18:	33 1f       	adc	r19, r19
    1f1a:	82 0f       	add	r24, r18
    1f1c:	93 1f       	adc	r25, r19
    1f1e:	b8 01       	movw	r22, r16
    1f20:	8a 56       	subi	r24, 0x6A	; 106
    1f22:	9b 4f       	sbci	r25, 0xFB	; 251
    1f24:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    1f28:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1f2c:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1f30:	9e 89       	ldd	r25, Y+22	; 0x16
    1f32:	86 89       	ldd	r24, Z+22	; 0x16
    1f34:	98 17       	cp	r25, r24
    1f36:	68 f0       	brcs	.+26     	; 0x1f52 <xTaskResumeAll+0xa8>
    1f38:	d0 92 5d 04 	sts	0x045D, r13	; 0x80045d <xYieldPending>
    1f3c:	0a c0       	rjmp	.+20     	; 0x1f52 <xTaskResumeAll+0xa8>
    1f3e:	c0 e0       	ldi	r28, 0x00	; 0
    1f40:	d0 e0       	ldi	r29, 0x00	; 0
    1f42:	0f 2e       	mov	r0, r31
    1f44:	f7 e7       	ldi	r31, 0x77	; 119
    1f46:	ef 2e       	mov	r14, r31
    1f48:	f4 e0       	ldi	r31, 0x04	; 4
    1f4a:	ff 2e       	mov	r15, r31
    1f4c:	f0 2d       	mov	r31, r0
    1f4e:	dd 24       	eor	r13, r13
    1f50:	d3 94       	inc	r13
    1f52:	f7 01       	movw	r30, r14
    1f54:	80 81       	ld	r24, Z
    1f56:	81 11       	cpse	r24, r1
    1f58:	c0 cf       	rjmp	.-128    	; 0x1eda <xTaskResumeAll+0x30>
    1f5a:	cd 2b       	or	r28, r29
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <xTaskResumeAll+0xb6>
    1f5e:	13 dd       	rcall	.-1498   	; 0x1986 <prvResetNextTaskUnblockTime>
    1f60:	c0 91 5e 04 	lds	r28, 0x045E	; 0x80045e <uxPendedTicks>
    1f64:	cc 23       	and	r28, r28
    1f66:	49 f0       	breq	.+18     	; 0x1f7a <xTaskResumeAll+0xd0>
    1f68:	d1 e0       	ldi	r29, 0x01	; 1
    1f6a:	e5 de       	rcall	.-566    	; 0x1d36 <xTaskIncrementTick>
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	d0 93 5d 04 	sts	0x045D, r29	; 0x80045d <xYieldPending>
    1f72:	c1 50       	subi	r28, 0x01	; 1
    1f74:	d1 f7       	brne	.-12     	; 0x1f6a <xTaskResumeAll+0xc0>
    1f76:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <uxPendedTicks>
    1f7a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <xYieldPending>
    1f7e:	88 23       	and	r24, r24
    1f80:	31 f0       	breq	.+12     	; 0x1f8e <xTaskResumeAll+0xe4>
    1f82:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortYield>
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <xTaskResumeAll+0xe6>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <xTaskResumeAll+0xe6>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	0f 90       	pop	r0
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	ff 90       	pop	r15
    1f9e:	ef 90       	pop	r14
    1fa0:	df 90       	pop	r13
    1fa2:	08 95       	ret

00001fa4 <vTaskDelay>:
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	ec 01       	movw	r28, r24
    1faa:	89 2b       	or	r24, r25
    1fac:	39 f0       	breq	.+14     	; 0x1fbc <vTaskDelay+0x18>
    1fae:	b3 de       	rcall	.-666    	; 0x1d16 <vTaskSuspendAll>
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	07 dd       	rcall	.-1522   	; 0x19c4 <prvAddCurrentTaskToDelayedList>
    1fb6:	79 df       	rcall	.-270    	; 0x1eaa <xTaskResumeAll>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <vTaskDelay+0x1c>
    1fbc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortYield>
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <vTaskSwitchContext>:
    1fc6:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    1fca:	88 23       	and	r24, r24
    1fcc:	21 f0       	breq	.+8      	; 0x1fd6 <vTaskSwitchContext+0x10>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <xYieldPending>
    1fd4:	08 95       	ret
    1fd6:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <xYieldPending>
    1fda:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1fde:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1fe2:	85 a1       	ldd	r24, Z+37	; 0x25
    1fe4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <task_switch_out>
    1fe8:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1fec:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1ff0:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    1ff4:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    1ff8:	2d 91       	ld	r18, X+
    1ffa:	3c 91       	ld	r19, X
    1ffc:	87 89       	ldd	r24, Z+23	; 0x17
    1ffe:	90 8d       	ldd	r25, Z+24	; 0x18
    2000:	82 17       	cp	r24, r18
    2002:	93 07       	cpc	r25, r19
    2004:	58 f0       	brcs	.+22     	; 0x201c <vTaskSwitchContext+0x56>
    2006:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <pxCurrentTCB>
    200a:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    200e:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2012:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    2016:	67 5e       	subi	r22, 0xE7	; 231
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	65 d5       	rcall	.+2762   	; 0x2ae6 <vApplicationStackOverflowHook>
    201c:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <uxTopReadyPriority>
    2020:	82 2f       	mov	r24, r18
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	fc 01       	movw	r30, r24
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	ee 0f       	add	r30, r30
    202c:	ff 1f       	adc	r31, r31
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	e8 0f       	add	r30, r24
    2034:	f9 1f       	adc	r31, r25
    2036:	ea 56       	subi	r30, 0x6A	; 106
    2038:	fb 4f       	sbci	r31, 0xFB	; 251
    203a:	30 81       	ld	r19, Z
    203c:	31 11       	cpse	r19, r1
    203e:	11 c0       	rjmp	.+34     	; 0x2062 <vTaskSwitchContext+0x9c>
    2040:	21 50       	subi	r18, 0x01	; 1
    2042:	82 2f       	mov	r24, r18
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	fc 01       	movw	r30, r24
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	e8 0f       	add	r30, r24
    2056:	f9 1f       	adc	r31, r25
    2058:	ea 56       	subi	r30, 0x6A	; 106
    205a:	fb 4f       	sbci	r31, 0xFB	; 251
    205c:	30 81       	ld	r19, Z
    205e:	33 23       	and	r19, r19
    2060:	79 f3       	breq	.-34     	; 0x2040 <vTaskSwitchContext+0x7a>
    2062:	ac 01       	movw	r20, r24
    2064:	44 0f       	add	r20, r20
    2066:	55 1f       	adc	r21, r21
    2068:	44 0f       	add	r20, r20
    206a:	55 1f       	adc	r21, r21
    206c:	44 0f       	add	r20, r20
    206e:	55 1f       	adc	r21, r21
    2070:	48 0f       	add	r20, r24
    2072:	59 1f       	adc	r21, r25
    2074:	da 01       	movw	r26, r20
    2076:	aa 56       	subi	r26, 0x6A	; 106
    2078:	bb 4f       	sbci	r27, 0xFB	; 251
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	ed 91       	ld	r30, X+
    207e:	fc 91       	ld	r31, X
    2080:	12 97       	sbiw	r26, 0x02	; 2
    2082:	02 80       	ldd	r0, Z+2	; 0x02
    2084:	f3 81       	ldd	r31, Z+3	; 0x03
    2086:	e0 2d       	mov	r30, r0
    2088:	12 96       	adiw	r26, 0x02	; 2
    208a:	fc 93       	st	X, r31
    208c:	ee 93       	st	-X, r30
    208e:	11 97       	sbiw	r26, 0x01	; 1
    2090:	47 56       	subi	r20, 0x67	; 103
    2092:	5b 4f       	sbci	r21, 0xFB	; 251
    2094:	e4 17       	cp	r30, r20
    2096:	f5 07       	cpc	r31, r21
    2098:	29 f4       	brne	.+10     	; 0x20a4 <vTaskSwitchContext+0xde>
    209a:	42 81       	ldd	r20, Z+2	; 0x02
    209c:	53 81       	ldd	r21, Z+3	; 0x03
    209e:	fd 01       	movw	r30, r26
    20a0:	52 83       	std	Z+2, r21	; 0x02
    20a2:	41 83       	std	Z+1, r20	; 0x01
    20a4:	fc 01       	movw	r30, r24
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	8e 0f       	add	r24, r30
    20b4:	9f 1f       	adc	r25, r31
    20b6:	fc 01       	movw	r30, r24
    20b8:	ea 56       	subi	r30, 0x6A	; 106
    20ba:	fb 4f       	sbci	r31, 0xFB	; 251
    20bc:	01 80       	ldd	r0, Z+1	; 0x01
    20be:	f2 81       	ldd	r31, Z+2	; 0x02
    20c0:	e0 2d       	mov	r30, r0
    20c2:	86 81       	ldd	r24, Z+6	; 0x06
    20c4:	97 81       	ldd	r25, Z+7	; 0x07
    20c6:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <pxCurrentTCB+0x1>
    20ca:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <pxCurrentTCB>
    20ce:	20 93 60 04 	sts	0x0460, r18	; 0x800460 <uxTopReadyPriority>
    20d2:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    20d6:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    20da:	85 a1       	ldd	r24, Z+37	; 0x25
    20dc:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <task_switch_in>
    20e0:	08 95       	ret

000020e2 <vTaskPlaceOnEventList>:
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	eb 01       	movw	r28, r22
    20e8:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <pxCurrentTCB>
    20ec:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    20f0:	64 5f       	subi	r22, 0xF4	; 244
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	0e 94 cf 04 	call	0x99e	; 0x99e <vListInsert>
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	ce 01       	movw	r24, r28
    20fc:	63 dc       	rcall	.-1850   	; 0x19c4 <prvAddCurrentTaskToDelayedList>
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <vTaskPlaceOnEventListRestricted>:
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	8b 01       	movw	r16, r22
    210c:	c4 2f       	mov	r28, r20
    210e:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2112:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    2116:	64 5f       	subi	r22, 0xF4	; 244
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    211e:	cc 23       	and	r28, r28
    2120:	11 f0       	breq	.+4      	; 0x2126 <vTaskPlaceOnEventListRestricted+0x22>
    2122:	0f ef       	ldi	r16, 0xFF	; 255
    2124:	1f ef       	ldi	r17, 0xFF	; 255
    2126:	6c 2f       	mov	r22, r28
    2128:	c8 01       	movw	r24, r16
    212a:	4c dc       	rcall	.-1896   	; 0x19c4 <prvAddCurrentTaskToDelayedList>
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	08 95       	ret

00002134 <xTaskRemoveFromEventList>:
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	dc 01       	movw	r26, r24
    213e:	15 96       	adiw	r26, 0x05	; 5
    2140:	ed 91       	ld	r30, X+
    2142:	fc 91       	ld	r31, X
    2144:	16 97       	sbiw	r26, 0x06	; 6
    2146:	c6 81       	ldd	r28, Z+6	; 0x06
    2148:	d7 81       	ldd	r29, Z+7	; 0x07
    214a:	8e 01       	movw	r16, r28
    214c:	04 5f       	subi	r16, 0xF4	; 244
    214e:	1f 4f       	sbci	r17, 0xFF	; 255
    2150:	c8 01       	movw	r24, r16
    2152:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    2156:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    215a:	81 11       	cpse	r24, r1
    215c:	1c c0       	rjmp	.+56     	; 0x2196 <xTaskRemoveFromEventList+0x62>
    215e:	0a 50       	subi	r16, 0x0A	; 10
    2160:	11 09       	sbc	r17, r1
    2162:	c8 01       	movw	r24, r16
    2164:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    2168:	8e 89       	ldd	r24, Y+22	; 0x16
    216a:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    216e:	98 17       	cp	r25, r24
    2170:	10 f4       	brcc	.+4      	; 0x2176 <xTaskRemoveFromEventList+0x42>
    2172:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9c 01       	movw	r18, r24
    217a:	22 0f       	add	r18, r18
    217c:	33 1f       	adc	r19, r19
    217e:	22 0f       	add	r18, r18
    2180:	33 1f       	adc	r19, r19
    2182:	22 0f       	add	r18, r18
    2184:	33 1f       	adc	r19, r19
    2186:	82 0f       	add	r24, r18
    2188:	93 1f       	adc	r25, r19
    218a:	b8 01       	movw	r22, r16
    218c:	8a 56       	subi	r24, 0x6A	; 106
    218e:	9b 4f       	sbci	r25, 0xFB	; 251
    2190:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    2194:	05 c0       	rjmp	.+10     	; 0x21a0 <xTaskRemoveFromEventList+0x6c>
    2196:	b8 01       	movw	r22, r16
    2198:	87 e7       	ldi	r24, 0x77	; 119
    219a:	94 e0       	ldi	r25, 0x04	; 4
    219c:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    21a0:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    21a4:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    21a8:	9e 89       	ldd	r25, Y+22	; 0x16
    21aa:	86 89       	ldd	r24, Z+22	; 0x16
    21ac:	89 17       	cp	r24, r25
    21ae:	20 f4       	brcc	.+8      	; 0x21b8 <xTaskRemoveFromEventList+0x84>
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <xYieldPending>
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <xTaskRemoveFromEventList+0x86>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	08 95       	ret

000021c4 <vTaskSetTimeOutState>:
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	0f 92       	push	r0
    21ca:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <xNumOfOverflows>
    21ce:	fc 01       	movw	r30, r24
    21d0:	20 83       	st	Z, r18
    21d2:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <xTickCount>
    21d6:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <xTickCount+0x1>
    21da:	32 83       	std	Z+2, r19	; 0x02
    21dc:	21 83       	std	Z+1, r18	; 0x01
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	08 95       	ret

000021e4 <vTaskInternalSetTimeOutState>:
    21e4:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <xNumOfOverflows>
    21e8:	fc 01       	movw	r30, r24
    21ea:	20 83       	st	Z, r18
    21ec:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <xTickCount>
    21f0:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <xTickCount+0x1>
    21f4:	32 83       	std	Z+2, r19	; 0x02
    21f6:	21 83       	std	Z+1, r18	; 0x01
    21f8:	08 95       	ret

000021fa <xTaskCheckForTimeOut>:
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	0f 92       	push	r0
    2204:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <xTickCount>
    2208:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <xTickCount+0x1>
    220c:	db 01       	movw	r26, r22
    220e:	4d 91       	ld	r20, X+
    2210:	5c 91       	ld	r21, X
    2212:	4f 3f       	cpi	r20, 0xFF	; 255
    2214:	bf ef       	ldi	r27, 0xFF	; 255
    2216:	5b 07       	cpc	r21, r27
    2218:	e9 f0       	breq	.+58     	; 0x2254 <__stack+0x55>
    221a:	ec 01       	movw	r28, r24
    221c:	e9 81       	ldd	r30, Y+1	; 0x01
    221e:	fa 81       	ldd	r31, Y+2	; 0x02
    2220:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <xNumOfOverflows>
    2224:	b8 81       	ld	r27, Y
    2226:	ba 17       	cp	r27, r26
    2228:	19 f0       	breq	.+6      	; 0x2230 <__stack+0x31>
    222a:	2e 17       	cp	r18, r30
    222c:	3f 07       	cpc	r19, r31
    222e:	a0 f4       	brcc	.+40     	; 0x2258 <__stack+0x59>
    2230:	2e 1b       	sub	r18, r30
    2232:	3f 0b       	sbc	r19, r31
    2234:	24 17       	cp	r18, r20
    2236:	35 07       	cpc	r19, r21
    2238:	40 f4       	brcc	.+16     	; 0x224a <__stack+0x4b>
    223a:	fb 01       	movw	r30, r22
    223c:	42 1b       	sub	r20, r18
    223e:	53 0b       	sbc	r21, r19
    2240:	51 83       	std	Z+1, r21	; 0x01
    2242:	40 83       	st	Z, r20
    2244:	cf df       	rcall	.-98     	; 0x21e4 <vTaskInternalSetTimeOutState>
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	08 c0       	rjmp	.+16     	; 0x225a <__stack+0x5b>
    224a:	fb 01       	movw	r30, r22
    224c:	11 82       	std	Z+1, r1	; 0x01
    224e:	10 82       	st	Z, r1
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	03 c0       	rjmp	.+6      	; 0x225a <__stack+0x5b>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	01 c0       	rjmp	.+2      	; 0x225a <__stack+0x5b>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	0f 90       	pop	r0
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <vTaskMissedYield>:
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <xYieldPending>
    226a:	08 95       	ret

0000226c <xTaskGetCurrentTaskHandle>:
    226c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2270:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    2274:	08 95       	ret

00002276 <xTaskGetSchedulerState>:
    2276:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <xSchedulerRunning>
    227a:	88 23       	and	r24, r24
    227c:	31 f0       	breq	.+12     	; 0x228a <xTaskGetSchedulerState+0x14>
    227e:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    2282:	88 23       	and	r24, r24
    2284:	21 f0       	breq	.+8      	; 0x228e <xTaskGetSchedulerState+0x18>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	08 95       	ret
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	08 95       	ret
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	08 95       	ret

00002292 <xTaskPriorityInherit>:
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	fc 01       	movw	r30, r24
    229c:	89 2b       	or	r24, r25
    229e:	09 f4       	brne	.+2      	; 0x22a2 <xTaskPriorityInherit+0x10>
    22a0:	64 c0       	rjmp	.+200    	; 0x236a <xTaskPriorityInherit+0xd8>
    22a2:	26 89       	ldd	r18, Z+22	; 0x16
    22a4:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
    22a8:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    22ac:	56 96       	adiw	r26, 0x16	; 22
    22ae:	8c 91       	ld	r24, X
    22b0:	28 17       	cp	r18, r24
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <xTaskPriorityInherit+0x24>
    22b4:	4e c0       	rjmp	.+156    	; 0x2352 <xTaskPriorityInherit+0xc0>
    22b6:	84 85       	ldd	r24, Z+12	; 0x0c
    22b8:	95 85       	ldd	r25, Z+13	; 0x0d
    22ba:	99 23       	and	r25, r25
    22bc:	64 f0       	brlt	.+24     	; 0x22d6 <xTaskPriorityInherit+0x44>
    22be:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
    22c2:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    22c6:	56 96       	adiw	r26, 0x16	; 22
    22c8:	3c 91       	ld	r19, X
    22ca:	84 e0       	ldi	r24, 0x04	; 4
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	83 1b       	sub	r24, r19
    22d0:	91 09       	sbc	r25, r1
    22d2:	95 87       	std	Z+13, r25	; 0x0d
    22d4:	84 87       	std	Z+12, r24	; 0x0c
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	c9 01       	movw	r24, r18
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	28 0f       	add	r18, r24
    22e8:	39 1f       	adc	r19, r25
    22ea:	2a 56       	subi	r18, 0x6A	; 106
    22ec:	3b 4f       	sbci	r19, 0xFB	; 251
    22ee:	82 85       	ldd	r24, Z+10	; 0x0a
    22f0:	93 85       	ldd	r25, Z+11	; 0x0b
    22f2:	82 17       	cp	r24, r18
    22f4:	93 07       	cpc	r25, r19
    22f6:	21 f5       	brne	.+72     	; 0x2340 <xTaskPriorityInherit+0xae>
    22f8:	8f 01       	movw	r16, r30
    22fa:	ef 01       	movw	r28, r30
    22fc:	22 96       	adiw	r28, 0x02	; 2
    22fe:	ce 01       	movw	r24, r28
    2300:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    2304:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2308:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    230c:	86 89       	ldd	r24, Z+22	; 0x16
    230e:	f8 01       	movw	r30, r16
    2310:	86 8b       	std	Z+22, r24	; 0x16
    2312:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    2316:	98 17       	cp	r25, r24
    2318:	10 f4       	brcc	.+4      	; 0x231e <xTaskPriorityInherit+0x8c>
    231a:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 01       	movw	r18, r24
    2322:	22 0f       	add	r18, r18
    2324:	33 1f       	adc	r19, r19
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	82 0f       	add	r24, r18
    2330:	93 1f       	adc	r25, r19
    2332:	be 01       	movw	r22, r28
    2334:	8a 56       	subi	r24, 0x6A	; 106
    2336:	9b 4f       	sbci	r25, 0xFB	; 251
    2338:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	16 c0       	rjmp	.+44     	; 0x236c <xTaskPriorityInherit+0xda>
    2340:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2344:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    2348:	56 96       	adiw	r26, 0x16	; 22
    234a:	8c 91       	ld	r24, X
    234c:	86 8b       	std	Z+22, r24	; 0x16
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	0d c0       	rjmp	.+26     	; 0x236c <xTaskPriorityInherit+0xda>
    2352:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2356:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	23 a1       	ldd	r18, Z+35	; 0x23
    235e:	56 96       	adiw	r26, 0x16	; 22
    2360:	9c 91       	ld	r25, X
    2362:	29 17       	cp	r18, r25
    2364:	18 f0       	brcs	.+6      	; 0x236c <xTaskPriorityInherit+0xda>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	01 c0       	rjmp	.+2      	; 0x236c <xTaskPriorityInherit+0xda>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	08 95       	ret

00002376 <xTaskPriorityDisinherit>:
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	fc 01       	movw	r30, r24
    2380:	89 2b       	or	r24, r25
    2382:	79 f1       	breq	.+94     	; 0x23e2 <xTaskPriorityDisinherit+0x6c>
    2384:	84 a1       	ldd	r24, Z+36	; 0x24
    2386:	81 50       	subi	r24, 0x01	; 1
    2388:	84 a3       	std	Z+36, r24	; 0x24
    238a:	26 89       	ldd	r18, Z+22	; 0x16
    238c:	93 a1       	ldd	r25, Z+35	; 0x23
    238e:	29 17       	cp	r18, r25
    2390:	51 f1       	breq	.+84     	; 0x23e6 <xTaskPriorityDisinherit+0x70>
    2392:	81 11       	cpse	r24, r1
    2394:	2a c0       	rjmp	.+84     	; 0x23ea <xTaskPriorityDisinherit+0x74>
    2396:	ef 01       	movw	r28, r30
    2398:	8f 01       	movw	r16, r30
    239a:	0e 5f       	subi	r16, 0xFE	; 254
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	c8 01       	movw	r24, r16
    23a0:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    23a4:	8b a1       	ldd	r24, Y+35	; 0x23
    23a6:	8e 8b       	std	Y+22, r24	; 0x16
    23a8:	24 e0       	ldi	r18, 0x04	; 4
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	28 1b       	sub	r18, r24
    23ae:	31 09       	sbc	r19, r1
    23b0:	3d 87       	std	Y+13, r19	; 0x0d
    23b2:	2c 87       	std	Y+12, r18	; 0x0c
    23b4:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    23b8:	98 17       	cp	r25, r24
    23ba:	10 f4       	brcc	.+4      	; 0x23c0 <xTaskPriorityDisinherit+0x4a>
    23bc:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9c 01       	movw	r18, r24
    23c4:	22 0f       	add	r18, r18
    23c6:	33 1f       	adc	r19, r19
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	82 0f       	add	r24, r18
    23d2:	93 1f       	adc	r25, r19
    23d4:	b8 01       	movw	r22, r16
    23d6:	8a 56       	subi	r24, 0x6A	; 106
    23d8:	9b 4f       	sbci	r25, 0xFB	; 251
    23da:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <xTaskPriorityDisinherit+0x76>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <xTaskPriorityDisinherit+0x76>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <xTaskPriorityDisinherit+0x76>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	08 95       	ret

000023f6 <vTaskPriorityDisinheritAfterTimeout>:
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	fc 01       	movw	r30, r24
    2400:	89 2b       	or	r24, r25
    2402:	09 f4       	brne	.+2      	; 0x2406 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2404:	43 c0       	rjmp	.+134    	; 0x248c <vTaskPriorityDisinheritAfterTimeout+0x96>
    2406:	93 a1       	ldd	r25, Z+35	; 0x23
    2408:	96 17       	cp	r25, r22
    240a:	08 f4       	brcc	.+2      	; 0x240e <vTaskPriorityDisinheritAfterTimeout+0x18>
    240c:	96 2f       	mov	r25, r22
    240e:	86 89       	ldd	r24, Z+22	; 0x16
    2410:	89 17       	cp	r24, r25
    2412:	e1 f1       	breq	.+120    	; 0x248c <vTaskPriorityDisinheritAfterTimeout+0x96>
    2414:	24 a1       	ldd	r18, Z+36	; 0x24
    2416:	21 30       	cpi	r18, 0x01	; 1
    2418:	c9 f5       	brne	.+114    	; 0x248c <vTaskPriorityDisinheritAfterTimeout+0x96>
    241a:	96 8b       	std	Z+22, r25	; 0x16
    241c:	24 85       	ldd	r18, Z+12	; 0x0c
    241e:	35 85       	ldd	r19, Z+13	; 0x0d
    2420:	33 23       	and	r19, r19
    2422:	34 f0       	brlt	.+12     	; 0x2430 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    2424:	24 e0       	ldi	r18, 0x04	; 4
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	29 1b       	sub	r18, r25
    242a:	31 09       	sbc	r19, r1
    242c:	35 87       	std	Z+13, r19	; 0x0d
    242e:	24 87       	std	Z+12, r18	; 0x0c
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 01       	movw	r18, r24
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	22 0f       	add	r18, r18
    243a:	33 1f       	adc	r19, r19
    243c:	22 0f       	add	r18, r18
    243e:	33 1f       	adc	r19, r19
    2440:	82 0f       	add	r24, r18
    2442:	93 1f       	adc	r25, r19
    2444:	8a 56       	subi	r24, 0x6A	; 106
    2446:	9b 4f       	sbci	r25, 0xFB	; 251
    2448:	22 85       	ldd	r18, Z+10	; 0x0a
    244a:	33 85       	ldd	r19, Z+11	; 0x0b
    244c:	28 17       	cp	r18, r24
    244e:	39 07       	cpc	r19, r25
    2450:	e9 f4       	brne	.+58     	; 0x248c <vTaskPriorityDisinheritAfterTimeout+0x96>
    2452:	ef 01       	movw	r28, r30
    2454:	8f 01       	movw	r16, r30
    2456:	0e 5f       	subi	r16, 0xFE	; 254
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	c8 01       	movw	r24, r16
    245c:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    2460:	8e 89       	ldd	r24, Y+22	; 0x16
    2462:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    2466:	98 17       	cp	r25, r24
    2468:	10 f4       	brcc	.+4      	; 0x246e <vTaskPriorityDisinheritAfterTimeout+0x78>
    246a:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 01       	movw	r18, r24
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	22 0f       	add	r18, r18
    247c:	33 1f       	adc	r19, r19
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	b8 01       	movw	r22, r16
    2484:	8a 56       	subi	r24, 0x6A	; 106
    2486:	9b 4f       	sbci	r25, 0xFB	; 251
    2488:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	08 95       	ret

00002496 <pvTaskIncrementMutexHeldCount>:
    2496:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <pxCurrentTCB>
    249a:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    249e:	89 2b       	or	r24, r25
    24a0:	39 f0       	breq	.+14     	; 0x24b0 <pvTaskIncrementMutexHeldCount+0x1a>
    24a2:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    24a6:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    24aa:	84 a1       	ldd	r24, Z+36	; 0x24
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	84 a3       	std	Z+36, r24	; 0x24
    24b0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <pxCurrentTCB>
    24b4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    24b8:	08 95       	ret

000024ba <xTaskNotifyWait>:
    24ba:	4f 92       	push	r4
    24bc:	5f 92       	push	r5
    24be:	6f 92       	push	r6
    24c0:	7f 92       	push	r7
    24c2:	8f 92       	push	r8
    24c4:	9f 92       	push	r9
    24c6:	af 92       	push	r10
    24c8:	bf 92       	push	r11
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	49 01       	movw	r8, r18
    24d4:	5a 01       	movw	r10, r20
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	0f 92       	push	r0
    24dc:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    24e0:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    24e4:	23 a5       	ldd	r18, Z+43	; 0x2b
    24e6:	22 30       	cpi	r18, 0x02	; 2
    24e8:	21 f1       	breq	.+72     	; 0x2532 <xTaskNotifyWait+0x78>
    24ea:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    24ee:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    24f2:	47 a0       	ldd	r4, Z+39	; 0x27
    24f4:	50 a4       	ldd	r5, Z+40	; 0x28
    24f6:	61 a4       	ldd	r6, Z+41	; 0x29
    24f8:	72 a4       	ldd	r7, Z+42	; 0x2a
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	80 95       	com	r24
    2500:	90 95       	com	r25
    2502:	a0 95       	com	r26
    2504:	b0 95       	com	r27
    2506:	84 21       	and	r24, r4
    2508:	95 21       	and	r25, r5
    250a:	a6 21       	and	r26, r6
    250c:	b7 21       	and	r27, r7
    250e:	87 a3       	std	Z+39, r24	; 0x27
    2510:	90 a7       	std	Z+40, r25	; 0x28
    2512:	a1 a7       	std	Z+41, r26	; 0x29
    2514:	b2 a7       	std	Z+42, r27	; 0x2a
    2516:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    251a:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	83 a7       	std	Z+43, r24	; 0x2b
    2522:	e1 14       	cp	r14, r1
    2524:	f1 04       	cpc	r15, r1
    2526:	29 f0       	breq	.+10     	; 0x2532 <xTaskNotifyWait+0x78>
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	c7 01       	movw	r24, r14
    252c:	4b da       	rcall	.-2922   	; 0x19c4 <prvAddCurrentTaskToDelayedList>
    252e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortYield>
    2532:	0f 90       	pop	r0
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	0f 92       	push	r0
    253c:	01 15       	cp	r16, r1
    253e:	11 05       	cpc	r17, r1
    2540:	69 f0       	breq	.+26     	; 0x255c <xTaskNotifyWait+0xa2>
    2542:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2546:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    254a:	87 a1       	ldd	r24, Z+39	; 0x27
    254c:	90 a5       	ldd	r25, Z+40	; 0x28
    254e:	a1 a5       	ldd	r26, Z+41	; 0x29
    2550:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2552:	f8 01       	movw	r30, r16
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	a2 83       	std	Z+2, r26	; 0x02
    255a:	b3 83       	std	Z+3, r27	; 0x03
    255c:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2560:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    2564:	83 a5       	ldd	r24, Z+43	; 0x2b
    2566:	82 30       	cpi	r24, 0x02	; 2
    2568:	b1 f4       	brne	.+44     	; 0x2596 <xTaskNotifyWait+0xdc>
    256a:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    256e:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    2572:	87 a1       	ldd	r24, Z+39	; 0x27
    2574:	90 a5       	ldd	r25, Z+40	; 0x28
    2576:	a1 a5       	ldd	r26, Z+41	; 0x29
    2578:	b2 a5       	ldd	r27, Z+42	; 0x2a
    257a:	80 94       	com	r8
    257c:	90 94       	com	r9
    257e:	a0 94       	com	r10
    2580:	b0 94       	com	r11
    2582:	88 22       	and	r8, r24
    2584:	99 22       	and	r9, r25
    2586:	aa 22       	and	r10, r26
    2588:	bb 22       	and	r11, r27
    258a:	87 a2       	std	Z+39, r8	; 0x27
    258c:	90 a6       	std	Z+40, r9	; 0x28
    258e:	a1 a6       	std	Z+41, r10	; 0x29
    2590:	b2 a6       	std	Z+42, r11	; 0x2a
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <xTaskNotifyWait+0xde>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    259c:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    25a0:	13 a6       	std	Z+43, r1	; 0x2b
    25a2:	0f 90       	pop	r0
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	bf 90       	pop	r11
    25b0:	af 90       	pop	r10
    25b2:	9f 90       	pop	r9
    25b4:	8f 90       	pop	r8
    25b6:	7f 90       	pop	r7
    25b8:	6f 90       	pop	r6
    25ba:	5f 90       	pop	r5
    25bc:	4f 90       	pop	r4
    25be:	08 95       	ret

000025c0 <xTaskGenericNotify>:
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	fc 01       	movw	r30, r24
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	0f 92       	push	r0
    25d0:	01 15       	cp	r16, r1
    25d2:	11 05       	cpc	r17, r1
    25d4:	49 f0       	breq	.+18     	; 0x25e8 <xTaskGenericNotify+0x28>
    25d6:	87 a1       	ldd	r24, Z+39	; 0x27
    25d8:	90 a5       	ldd	r25, Z+40	; 0x28
    25da:	a1 a5       	ldd	r26, Z+41	; 0x29
    25dc:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25de:	e8 01       	movw	r28, r16
    25e0:	88 83       	st	Y, r24
    25e2:	99 83       	std	Y+1, r25	; 0x01
    25e4:	aa 83       	std	Y+2, r26	; 0x02
    25e6:	bb 83       	std	Y+3, r27	; 0x03
    25e8:	83 a5       	ldd	r24, Z+43	; 0x2b
    25ea:	92 e0       	ldi	r25, 0x02	; 2
    25ec:	93 a7       	std	Z+43, r25	; 0x2b
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	b1 f0       	breq	.+44     	; 0x261e <xTaskGenericNotify+0x5e>
    25f2:	18 f4       	brcc	.+6      	; 0x25fa <xTaskGenericNotify+0x3a>
    25f4:	21 30       	cpi	r18, 0x01	; 1
    25f6:	31 f0       	breq	.+12     	; 0x2604 <xTaskGenericNotify+0x44>
    25f8:	2a c0       	rjmp	.+84     	; 0x264e <xTaskGenericNotify+0x8e>
    25fa:	23 30       	cpi	r18, 0x03	; 3
    25fc:	e9 f0       	breq	.+58     	; 0x2638 <xTaskGenericNotify+0x78>
    25fe:	24 30       	cpi	r18, 0x04	; 4
    2600:	01 f1       	breq	.+64     	; 0x2642 <xTaskGenericNotify+0x82>
    2602:	25 c0       	rjmp	.+74     	; 0x264e <xTaskGenericNotify+0x8e>
    2604:	07 a1       	ldd	r16, Z+39	; 0x27
    2606:	10 a5       	ldd	r17, Z+40	; 0x28
    2608:	21 a5       	ldd	r18, Z+41	; 0x29
    260a:	32 a5       	ldd	r19, Z+42	; 0x2a
    260c:	40 2b       	or	r20, r16
    260e:	51 2b       	or	r21, r17
    2610:	62 2b       	or	r22, r18
    2612:	73 2b       	or	r23, r19
    2614:	47 a3       	std	Z+39, r20	; 0x27
    2616:	50 a7       	std	Z+40, r21	; 0x28
    2618:	61 a7       	std	Z+41, r22	; 0x29
    261a:	72 a7       	std	Z+42, r23	; 0x2a
    261c:	18 c0       	rjmp	.+48     	; 0x264e <xTaskGenericNotify+0x8e>
    261e:	47 a1       	ldd	r20, Z+39	; 0x27
    2620:	50 a5       	ldd	r21, Z+40	; 0x28
    2622:	61 a5       	ldd	r22, Z+41	; 0x29
    2624:	72 a5       	ldd	r23, Z+42	; 0x2a
    2626:	4f 5f       	subi	r20, 0xFF	; 255
    2628:	5f 4f       	sbci	r21, 0xFF	; 255
    262a:	6f 4f       	sbci	r22, 0xFF	; 255
    262c:	7f 4f       	sbci	r23, 0xFF	; 255
    262e:	47 a3       	std	Z+39, r20	; 0x27
    2630:	50 a7       	std	Z+40, r21	; 0x28
    2632:	61 a7       	std	Z+41, r22	; 0x29
    2634:	72 a7       	std	Z+42, r23	; 0x2a
    2636:	0b c0       	rjmp	.+22     	; 0x264e <xTaskGenericNotify+0x8e>
    2638:	47 a3       	std	Z+39, r20	; 0x27
    263a:	50 a7       	std	Z+40, r21	; 0x28
    263c:	61 a7       	std	Z+41, r22	; 0x29
    263e:	72 a7       	std	Z+42, r23	; 0x2a
    2640:	06 c0       	rjmp	.+12     	; 0x264e <xTaskGenericNotify+0x8e>
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	79 f1       	breq	.+94     	; 0x26a4 <xTaskGenericNotify+0xe4>
    2646:	47 a3       	std	Z+39, r20	; 0x27
    2648:	50 a7       	std	Z+40, r21	; 0x28
    264a:	61 a7       	std	Z+41, r22	; 0x29
    264c:	72 a7       	std	Z+42, r23	; 0x2a
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	59 f5       	brne	.+86     	; 0x26a8 <xTaskGenericNotify+0xe8>
    2652:	ef 01       	movw	r28, r30
    2654:	8f 01       	movw	r16, r30
    2656:	0e 5f       	subi	r16, 0xFE	; 254
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	c8 01       	movw	r24, r16
    265c:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    2660:	8e 89       	ldd	r24, Y+22	; 0x16
    2662:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    2666:	98 17       	cp	r25, r24
    2668:	10 f4       	brcc	.+4      	; 0x266e <xTaskGenericNotify+0xae>
    266a:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9c 01       	movw	r18, r24
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	22 0f       	add	r18, r18
    2678:	33 1f       	adc	r19, r19
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	82 0f       	add	r24, r18
    2680:	93 1f       	adc	r25, r19
    2682:	b8 01       	movw	r22, r16
    2684:	8a 56       	subi	r24, 0x6A	; 106
    2686:	9b 4f       	sbci	r25, 0xFB	; 251
    2688:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    268c:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    2690:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    2694:	9e 89       	ldd	r25, Y+22	; 0x16
    2696:	86 89       	ldd	r24, Z+22	; 0x16
    2698:	89 17       	cp	r24, r25
    269a:	40 f4       	brcc	.+16     	; 0x26ac <xTaskGenericNotify+0xec>
    269c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortYield>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	05 c0       	rjmp	.+10     	; 0x26ae <xTaskGenericNotify+0xee>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	03 c0       	rjmp	.+6      	; 0x26ae <xTaskGenericNotify+0xee>
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <xTaskGenericNotify+0xee>
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	08 95       	ret

000026bc <xTaskGenericNotifyFromISR>:
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	fc 01       	movw	r30, r24
    26ca:	01 15       	cp	r16, r1
    26cc:	11 05       	cpc	r17, r1
    26ce:	49 f0       	breq	.+18     	; 0x26e2 <xTaskGenericNotifyFromISR+0x26>
    26d0:	87 a1       	ldd	r24, Z+39	; 0x27
    26d2:	90 a5       	ldd	r25, Z+40	; 0x28
    26d4:	a1 a5       	ldd	r26, Z+41	; 0x29
    26d6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    26d8:	e8 01       	movw	r28, r16
    26da:	88 83       	st	Y, r24
    26dc:	99 83       	std	Y+1, r25	; 0x01
    26de:	aa 83       	std	Y+2, r26	; 0x02
    26e0:	bb 83       	std	Y+3, r27	; 0x03
    26e2:	83 a5       	ldd	r24, Z+43	; 0x2b
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	93 a7       	std	Z+43, r25	; 0x2b
    26e8:	22 30       	cpi	r18, 0x02	; 2
    26ea:	b1 f0       	breq	.+44     	; 0x2718 <xTaskGenericNotifyFromISR+0x5c>
    26ec:	18 f4       	brcc	.+6      	; 0x26f4 <xTaskGenericNotifyFromISR+0x38>
    26ee:	21 30       	cpi	r18, 0x01	; 1
    26f0:	31 f0       	breq	.+12     	; 0x26fe <xTaskGenericNotifyFromISR+0x42>
    26f2:	2b c0       	rjmp	.+86     	; 0x274a <xTaskGenericNotifyFromISR+0x8e>
    26f4:	23 30       	cpi	r18, 0x03	; 3
    26f6:	e9 f0       	breq	.+58     	; 0x2732 <xTaskGenericNotifyFromISR+0x76>
    26f8:	24 30       	cpi	r18, 0x04	; 4
    26fa:	01 f1       	breq	.+64     	; 0x273c <xTaskGenericNotifyFromISR+0x80>
    26fc:	26 c0       	rjmp	.+76     	; 0x274a <xTaskGenericNotifyFromISR+0x8e>
    26fe:	07 a1       	ldd	r16, Z+39	; 0x27
    2700:	10 a5       	ldd	r17, Z+40	; 0x28
    2702:	21 a5       	ldd	r18, Z+41	; 0x29
    2704:	32 a5       	ldd	r19, Z+42	; 0x2a
    2706:	40 2b       	or	r20, r16
    2708:	51 2b       	or	r21, r17
    270a:	62 2b       	or	r22, r18
    270c:	73 2b       	or	r23, r19
    270e:	47 a3       	std	Z+39, r20	; 0x27
    2710:	50 a7       	std	Z+40, r21	; 0x28
    2712:	61 a7       	std	Z+41, r22	; 0x29
    2714:	72 a7       	std	Z+42, r23	; 0x2a
    2716:	19 c0       	rjmp	.+50     	; 0x274a <xTaskGenericNotifyFromISR+0x8e>
    2718:	47 a1       	ldd	r20, Z+39	; 0x27
    271a:	50 a5       	ldd	r21, Z+40	; 0x28
    271c:	61 a5       	ldd	r22, Z+41	; 0x29
    271e:	72 a5       	ldd	r23, Z+42	; 0x2a
    2720:	4f 5f       	subi	r20, 0xFF	; 255
    2722:	5f 4f       	sbci	r21, 0xFF	; 255
    2724:	6f 4f       	sbci	r22, 0xFF	; 255
    2726:	7f 4f       	sbci	r23, 0xFF	; 255
    2728:	47 a3       	std	Z+39, r20	; 0x27
    272a:	50 a7       	std	Z+40, r21	; 0x28
    272c:	61 a7       	std	Z+41, r22	; 0x29
    272e:	72 a7       	std	Z+42, r23	; 0x2a
    2730:	0c c0       	rjmp	.+24     	; 0x274a <xTaskGenericNotifyFromISR+0x8e>
    2732:	47 a3       	std	Z+39, r20	; 0x27
    2734:	50 a7       	std	Z+40, r21	; 0x28
    2736:	61 a7       	std	Z+41, r22	; 0x29
    2738:	72 a7       	std	Z+42, r23	; 0x2a
    273a:	07 c0       	rjmp	.+14     	; 0x274a <xTaskGenericNotifyFromISR+0x8e>
    273c:	82 30       	cpi	r24, 0x02	; 2
    273e:	09 f4       	brne	.+2      	; 0x2742 <xTaskGenericNotifyFromISR+0x86>
    2740:	41 c0       	rjmp	.+130    	; 0x27c4 <xTaskGenericNotifyFromISR+0x108>
    2742:	47 a3       	std	Z+39, r20	; 0x27
    2744:	50 a7       	std	Z+40, r21	; 0x28
    2746:	61 a7       	std	Z+41, r22	; 0x29
    2748:	72 a7       	std	Z+42, r23	; 0x2a
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	e9 f5       	brne	.+122    	; 0x27c8 <xTaskGenericNotifyFromISR+0x10c>
    274e:	ef 01       	movw	r28, r30
    2750:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__data_end>
    2754:	81 11       	cpse	r24, r1
    2756:	1d c0       	rjmp	.+58     	; 0x2792 <xTaskGenericNotifyFromISR+0xd6>
    2758:	8f 01       	movw	r16, r30
    275a:	0e 5f       	subi	r16, 0xFE	; 254
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	c8 01       	movw	r24, r16
    2760:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
    2764:	8e 89       	ldd	r24, Y+22	; 0x16
    2766:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <uxTopReadyPriority>
    276a:	98 17       	cp	r25, r24
    276c:	10 f4       	brcc	.+4      	; 0x2772 <xTaskGenericNotifyFromISR+0xb6>
    276e:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <uxTopReadyPriority>
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9c 01       	movw	r18, r24
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	22 0f       	add	r18, r18
    2780:	33 1f       	adc	r19, r19
    2782:	82 0f       	add	r24, r18
    2784:	93 1f       	adc	r25, r19
    2786:	b8 01       	movw	r22, r16
    2788:	8a 56       	subi	r24, 0x6A	; 106
    278a:	9b 4f       	sbci	r25, 0xFB	; 251
    278c:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    2790:	07 c0       	rjmp	.+14     	; 0x27a0 <xTaskGenericNotifyFromISR+0xe4>
    2792:	bf 01       	movw	r22, r30
    2794:	64 5f       	subi	r22, 0xF4	; 244
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	87 e7       	ldi	r24, 0x77	; 119
    279a:	94 e0       	ldi	r25, 0x04	; 4
    279c:	0e 94 ae 04 	call	0x95c	; 0x95c <vListInsertEnd>
    27a0:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <pxCurrentTCB>
    27a4:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>
    27a8:	9e 89       	ldd	r25, Y+22	; 0x16
    27aa:	86 89       	ldd	r24, Z+22	; 0x16
    27ac:	89 17       	cp	r24, r25
    27ae:	70 f4       	brcc	.+28     	; 0x27cc <xTaskGenericNotifyFromISR+0x110>
    27b0:	e1 14       	cp	r14, r1
    27b2:	f1 04       	cpc	r15, r1
    27b4:	19 f0       	breq	.+6      	; 0x27bc <xTaskGenericNotifyFromISR+0x100>
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	f7 01       	movw	r30, r14
    27ba:	80 83       	st	Z, r24
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <xYieldPending>
    27c2:	05 c0       	rjmp	.+10     	; 0x27ce <xTaskGenericNotifyFromISR+0x112>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	03 c0       	rjmp	.+6      	; 0x27ce <xTaskGenericNotifyFromISR+0x112>
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <xTaskGenericNotifyFromISR+0x112>
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	08 95       	ret

000027dc <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	21 f4       	brne	.+8      	; 0x27e8 <xTaskNotifyStateClear+0xc>
    27e0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <pxCurrentTCB>
    27e4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    27ee:	fc 01       	movw	r30, r24
    27f0:	23 a5       	ldd	r18, Z+43	; 0x2b
    27f2:	22 30       	cpi	r18, 0x02	; 2
    27f4:	19 f4       	brne	.+6      	; 0x27fc <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    27f6:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    27fc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    27fe:	0f 90       	pop	r0
    2800:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2802:	08 95       	ret

00002804 <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2804:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2806:	73 83       	std	Z+3, r23	; 0x03
    2808:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    280a:	91 87       	std	Z+9, r25	; 0x09
    280c:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    280e:	46 17       	cp	r20, r22
    2810:	57 07       	cpc	r21, r23
    2812:	90 f0       	brcs	.+36     	; 0x2838 <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2814:	42 1b       	sub	r20, r18
    2816:	53 0b       	sbc	r21, r19
    2818:	84 85       	ldd	r24, Z+12	; 0x0c
    281a:	95 85       	ldd	r25, Z+13	; 0x0d
    281c:	48 17       	cp	r20, r24
    281e:	59 07       	cpc	r21, r25
    2820:	e0 f4       	brcc	.+56     	; 0x285a <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2822:	bf 01       	movw	r22, r30
    2824:	6e 5f       	subi	r22, 0xFE	; 254
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <pxOverflowTimerList>
    282c:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <pxOverflowTimerList+0x1>
    2830:	0e 94 cf 04 	call	0x99e	; 0x99e <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2838:	42 17       	cp	r20, r18
    283a:	53 07       	cpc	r21, r19
    283c:	18 f4       	brcc	.+6      	; 0x2844 <prvInsertTimerInActiveList+0x40>
    283e:	62 17       	cp	r22, r18
    2840:	73 07       	cpc	r23, r19
    2842:	68 f4       	brcc	.+26     	; 0x285e <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2844:	bf 01       	movw	r22, r30
    2846:	6e 5f       	subi	r22, 0xFE	; 254
    2848:	7f 4f       	sbci	r23, 0xFF	; 255
    284a:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <pxCurrentTimerList>
    284e:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <pxCurrentTimerList+0x1>
    2852:	0e 94 cf 04 	call	0x99e	; 0x99e <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    285e:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    2860:	08 95       	ret

00002862 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    2868:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <xTimerQueue>
    286c:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <xTimerQueue+0x1>
    2870:	89 2b       	or	r24, r25
    2872:	e9 f4       	brne	.+58     	; 0x28ae <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    2874:	8f ec       	ldi	r24, 0xCF	; 207
    2876:	94 e0       	ldi	r25, 0x04	; 4
    2878:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    287c:	86 ec       	ldi	r24, 0xC6	; 198
    287e:	94 e0       	ldi	r25, 0x04	; 4
    2880:	0e 94 9c 04 	call	0x938	; 0x938 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    2884:	8f ec       	ldi	r24, 0xCF	; 207
    2886:	94 e0       	ldi	r25, 0x04	; 4
    2888:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <pxCurrentTimerList+0x1>
    288c:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    2890:	86 ec       	ldi	r24, 0xC6	; 198
    2892:	94 e0       	ldi	r25, 0x04	; 4
    2894:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <pxOverflowTimerList+0x1>
    2898:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	65 e0       	ldi	r22, 0x05	; 5
    28a0:	8a e0       	ldi	r24, 0x0A	; 10
    28a2:	0e 94 b1 07 	call	0xf62	; 0xf62 <xQueueGenericCreate>
    28a6:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <xTimerQueue+0x1>
    28aa:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    28ae:	0f 90       	pop	r0
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	08 95       	ret

000028b4 <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    28ba:	d3 df       	rcall	.-90     	; 0x2862 <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    28bc:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <xTimerQueue>
    28c0:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <xTimerQueue+0x1>
    28c4:	89 2b       	or	r24, r25
    28c6:	89 f0       	breq	.+34     	; 0x28ea <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    28c8:	0f 2e       	mov	r0, r31
    28ca:	fe eb       	ldi	r31, 0xBE	; 190
    28cc:	ef 2e       	mov	r14, r31
    28ce:	f4 e0       	ldi	r31, 0x04	; 4
    28d0:	ff 2e       	mov	r15, r31
    28d2:	f0 2d       	mov	r31, r0
    28d4:	03 e0       	ldi	r16, 0x03	; 3
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	45 e5       	ldi	r20, 0x55	; 85
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	6e e2       	ldi	r22, 0x2E	; 46
    28e0:	74 e0       	ldi	r23, 0x04	; 4
    28e2:	83 e0       	ldi	r24, 0x03	; 3
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	c5 d8       	rcall	.-3702   	; 0x1a72 <xTaskCreate>
    28e8:	01 c0       	rjmp	.+2      	; 0x28ec <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    28ea:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	08 95       	ret

000028f4 <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    28f4:	8f 92       	push	r8
    28f6:	9f 92       	push	r9
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	4c 01       	movw	r8, r24
    290c:	5b 01       	movw	r10, r22
    290e:	f4 2e       	mov	r15, r20
    2910:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    2912:	84 e1       	ldi	r24, 0x14	; 20
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <pvPortMalloc>
    291a:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    291c:	89 2b       	or	r24, r25
    291e:	99 f0       	breq	.+38     	; 0x2946 <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    2920:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    2922:	9f df       	rcall	.-194    	; 0x2862 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    2924:	99 82       	std	Y+1, r9	; 0x01
    2926:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2928:	bd 86       	std	Y+13, r11	; 0x0d
    292a:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    292c:	df 86       	std	Y+15, r13	; 0x0f
    292e:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2930:	19 8b       	std	Y+17, r17	; 0x11
    2932:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2934:	ce 01       	movw	r24, r28
    2936:	02 96       	adiw	r24, 0x02	; 2
    2938:	0e 94 aa 04 	call	0x954	; 0x954 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    293c:	ff 20       	and	r15, r15
    293e:	19 f0       	breq	.+6      	; 0x2946 <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2940:	8b 89       	ldd	r24, Y+19	; 0x13
    2942:	84 60       	ori	r24, 0x04	; 4
    2944:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    2946:	ce 01       	movw	r24, r28
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	df 90       	pop	r13
    2954:	cf 90       	pop	r12
    2956:	bf 90       	pop	r11
    2958:	af 90       	pop	r10
    295a:	9f 90       	pop	r9
    295c:	8f 90       	pop	r8
    295e:	08 95       	ret

00002960 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	00 d0       	rcall	.+0      	; 0x296a <xTimerGenericCommand+0xa>
    296a:	1f 92       	push	r1
    296c:	1f 92       	push	r1
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2972:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <xTimerQueue>
    2976:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <xTimerQueue+0x1>
    297a:	30 97       	sbiw	r30, 0x00	; 0
    297c:	69 f1       	breq	.+90     	; 0x29d8 <xTimerGenericCommand+0x78>
    297e:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2980:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2982:	5b 83       	std	Y+3, r21	; 0x03
    2984:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2986:	9d 83       	std	Y+5, r25	; 0x05
    2988:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    298a:	66 30       	cpi	r22, 0x06	; 6
    298c:	e4 f4       	brge	.+56     	; 0x29c6 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    298e:	73 dc       	rcall	.-1818   	; 0x2276 <xTaskGetSchedulerState>
    2990:	82 30       	cpi	r24, 0x02	; 2
    2992:	61 f4       	brne	.+24     	; 0x29ac <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	a8 01       	movw	r20, r16
    2998:	be 01       	movw	r22, r28
    299a:	6f 5f       	subi	r22, 0xFF	; 255
    299c:	7f 4f       	sbci	r23, 0xFF	; 255
    299e:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <xTimerQueue>
    29a2:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <xTimerQueue+0x1>
    29a6:	0e 94 df 07 	call	0xfbe	; 0xfbe <xQueueGenericSend>
    29aa:	17 c0       	rjmp	.+46     	; 0x29da <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	be 01       	movw	r22, r28
    29b4:	6f 5f       	subi	r22, 0xFF	; 255
    29b6:	7f 4f       	sbci	r23, 0xFF	; 255
    29b8:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <xTimerQueue>
    29bc:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <xTimerQueue+0x1>
    29c0:	0e 94 df 07 	call	0xfbe	; 0xfbe <xQueueGenericSend>
    29c4:	0a c0       	rjmp	.+20     	; 0x29da <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	ad 01       	movw	r20, r26
    29ca:	be 01       	movw	r22, r28
    29cc:	6f 5f       	subi	r22, 0xFF	; 255
    29ce:	7f 4f       	sbci	r23, 0xFF	; 255
    29d0:	cf 01       	movw	r24, r30
    29d2:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericSendFromISR>
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	08 95       	ret

000029ee <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    29ee:	af 92       	push	r10
    29f0:	bf 92       	push	r11
    29f2:	cf 92       	push	r12
    29f4:	df 92       	push	r13
    29f6:	ef 92       	push	r14
    29f8:	ff 92       	push	r15
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2a04:	8e d9       	rcall	.-3300   	; 0x1d22 <xTaskGetTickCount>
    2a06:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2a08:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <xLastTime.2432>
    2a0c:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <xLastTime.2432+0x1>
    2a10:	e8 16       	cp	r14, r24
    2a12:	f9 06       	cpc	r15, r25
    2a14:	08 f0       	brcs	.+2      	; 0x2a18 <prvSampleTimeNow+0x2a>
    2a16:	47 c0       	rjmp	.+142    	; 0x2aa6 <prvSampleTimeNow+0xb8>
    2a18:	2f c0       	rjmp	.+94     	; 0x2a78 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a1a:	05 80       	ldd	r0, Z+5	; 0x05
    2a1c:	f6 81       	ldd	r31, Z+6	; 0x06
    2a1e:	e0 2d       	mov	r30, r0
    2a20:	a0 80       	ld	r10, Z
    2a22:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a24:	c6 81       	ldd	r28, Z+6	; 0x06
    2a26:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a28:	8e 01       	movw	r16, r28
    2a2a:	0e 5f       	subi	r16, 0xFE	; 254
    2a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2e:	c8 01       	movw	r24, r16
    2a30:	0e 94 00 05 	call	0xa00	; 0xa00 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a34:	e8 89       	ldd	r30, Y+16	; 0x10
    2a36:	f9 89       	ldd	r31, Y+17	; 0x11
    2a38:	ce 01       	movw	r24, r28
    2a3a:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	82 ff       	sbrs	r24, 2
    2a40:	1b c0       	rjmp	.+54     	; 0x2a78 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2a42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a44:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a46:	8a 0d       	add	r24, r10
    2a48:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2a4a:	a8 16       	cp	r10, r24
    2a4c:	b9 06       	cpc	r11, r25
    2a4e:	60 f4       	brcc	.+24     	; 0x2a68 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a50:	9b 83       	std	Y+3, r25	; 0x03
    2a52:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a54:	d9 87       	std	Y+9, r29	; 0x09
    2a56:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a58:	b8 01       	movw	r22, r16
    2a5a:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <pxCurrentTimerList>
    2a5e:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <pxCurrentTimerList+0x1>
    2a62:	0e 94 cf 04 	call	0x99e	; 0x99e <vListInsert>
    2a66:	08 c0       	rjmp	.+16     	; 0x2a78 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a68:	00 e0       	ldi	r16, 0x00	; 0
    2a6a:	10 e0       	ldi	r17, 0x00	; 0
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	a5 01       	movw	r20, r10
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	ce 01       	movw	r24, r28
    2a76:	74 df       	rcall	.-280    	; 0x2960 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a78:	e0 91 c4 04 	lds	r30, 0x04C4	; 0x8004c4 <pxCurrentTimerList>
    2a7c:	f0 91 c5 04 	lds	r31, 0x04C5	; 0x8004c5 <pxCurrentTimerList+0x1>
    2a80:	80 81       	ld	r24, Z
    2a82:	81 11       	cpse	r24, r1
    2a84:	ca cf       	rjmp	.-108    	; 0x2a1a <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2a86:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <pxOverflowTimerList>
    2a8a:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <pxOverflowTimerList+0x1>
    2a8e:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <pxCurrentTimerList+0x1>
    2a92:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2a96:	f0 93 c3 04 	sts	0x04C3, r31	; 0x8004c3 <pxOverflowTimerList+0x1>
    2a9a:	e0 93 c2 04 	sts	0x04C2, r30	; 0x8004c2 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	f6 01       	movw	r30, r12
    2aa2:	80 83       	st	Z, r24
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2aa6:	f6 01       	movw	r30, r12
    2aa8:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2aaa:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <xLastTime.2432+0x1>
    2aae:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <xLastTime.2432>

    return xTimeNow;
}
    2ab2:	c7 01       	movw	r24, r14
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	bf 90       	pop	r11
    2ac6:	af 90       	pop	r10
    2ac8:	08 95       	ret

00002aca <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2aca:	08 95       	ret

00002acc <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2acc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ace:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ad0:	2f ef       	ldi	r18, 0xFF	; 255
    2ad2:	80 e7       	ldi	r24, 0x70	; 112
    2ad4:	92 e0       	ldi	r25, 0x02	; 2
    2ad6:	21 50       	subi	r18, 0x01	; 1
    2ad8:	80 40       	sbci	r24, 0x00	; 0
    2ada:	90 40       	sbci	r25, 0x00	; 0
    2adc:	e1 f7       	brne	.-8      	; 0x2ad6 <vApplicationMallocFailedHook+0xa>
    2ade:	00 c0       	rjmp	.+0      	; 0x2ae0 <vApplicationMallocFailedHook+0x14>
    2ae0:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2ae2:	1f 9a       	sbi	0x03, 7	; 3
    2ae4:	f5 cf       	rjmp	.-22     	; 0x2ad0 <vApplicationMallocFailedHook+0x4>

00002ae6 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ae6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ae8:	2f 9a       	sbi	0x05, 7	; 5
    2aea:	2f ef       	ldi	r18, 0xFF	; 255
    2aec:	87 ea       	ldi	r24, 0xA7	; 167
    2aee:	91 e6       	ldi	r25, 0x61	; 97
    2af0:	21 50       	subi	r18, 0x01	; 1
    2af2:	80 40       	sbci	r24, 0x00	; 0
    2af4:	90 40       	sbci	r25, 0x00	; 0
    2af6:	e1 f7       	brne	.-8      	; 0x2af0 <vApplicationStackOverflowHook+0xa>
    2af8:	00 c0       	rjmp	.+0      	; 0x2afa <vApplicationStackOverflowHook+0x14>
    2afa:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2afc:	1f 9a       	sbi	0x03, 7	; 3
    2afe:	f5 cf       	rjmp	.-22     	; 0x2aea <vApplicationStackOverflowHook+0x4>

00002b00 <main>:
void create_all_tasks(UBaseType_t lora_handler_task_priority);
void create_all_timers();

int main(void)
{			
	driver_init();
    2b00:	0e 94 1a 03 	call	0x634	; 0x634 <driver_init>
	
	create_all_tasks(LORA_HANDLER_TASK_PRIORITY);
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	0e 94 a7 02 	call	0x54e	; 0x54e <create_all_tasks>
	
	create_all_timers();
    2b0a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <create_all_timers>
	
	
	xTimerStart(xTimer_measure_temp,0);
    2b0e:	09 d9       	rcall	.-3566   	; 0x1d22 <xTaskGetTickCount>
    2b10:	00 e0       	ldi	r16, 0x00	; 0
    2b12:	10 e0       	ldi	r17, 0x00	; 0
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	ac 01       	movw	r20, r24
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <xTimer_measure_temp>
    2b20:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <xTimer_measure_temp+0x1>
    2b24:	1d df       	rcall	.-454    	; 0x2960 <xTimerGenericCommand>
	xTimerStart(xTimer_read_temp,0);
    2b26:	fd d8       	rcall	.-3590   	; 0x1d22 <xTaskGetTickCount>
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	ac 01       	movw	r20, r24
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <xTimer_read_temp>
    2b34:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <xTimer_read_temp+0x1>
    2b38:	13 df       	rcall	.-474    	; 0x2960 <xTimerGenericCommand>
	xTimerStart(xTimer_measure_co2,0);
    2b3a:	f3 d8       	rcall	.-3610   	; 0x1d22 <xTaskGetTickCount>
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	ac 01       	movw	r20, r24
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <xTimer_measure_co2>
    2b48:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <xTimer_measure_co2+0x1>
    2b4c:	09 df       	rcall	.-494    	; 0x2960 <xTimerGenericCommand>
	xTimerStart(xTimer_read_co2,0);
    2b4e:	e9 d8       	rcall	.-3630   	; 0x1d22 <xTaskGetTickCount>
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	ac 01       	movw	r20, r24
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <xTimer_read_co2>
    2b5c:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <xTimer_read_co2+0x1>
    2b60:	ff de       	rcall	.-514    	; 0x2960 <xTimerGenericCommand>
					
	vTaskStartScheduler();
    2b62:	a6 d8       	rcall	.-3764   	; 0x1cb0 <vTaskStartScheduler>
    2b64:	ff cf       	rjmp	.-2      	; 0x2b64 <main+0x64>

00002b66 <usart_getchar>:
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	1f 92       	push	r1
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	be 01       	movw	r22, r28
    2b72:	6f 5f       	subi	r22, 0xFF	; 255
    2b74:	7f 4f       	sbci	r23, 0xFF	; 255
    2b76:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_com_serial_instance>
    2b7a:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <_com_serial_instance+0x1>
    2b7e:	4f d1       	rcall	.+670    	; 0x2e1e <serial_get_byte>
    2b80:	81 11       	cpse	r24, r1
    2b82:	f6 cf       	rjmp	.-20     	; 0x2b70 <usart_getchar+0xa>
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0f 90       	pop	r0
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	08 95       	ret

00002b90 <usart_putchar>:
    2b90:	68 2f       	mov	r22, r24
    2b92:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_com_serial_instance>
    2b96:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <_com_serial_instance+0x1>
    2b9a:	cc d0       	rcall	.+408    	; 0x2d34 <serial_send_byte>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	08 95       	ret

00002ba2 <stdioCreate>:
    2ba2:	8f 92       	push	r8
    2ba4:	9f 92       	push	r9
    2ba6:	af 92       	push	r10
    2ba8:	cf 92       	push	r12
    2baa:	ef 92       	push	r14
    2bac:	0f 93       	push	r16
    2bae:	81 2c       	mov	r8, r1
    2bb0:	91 2c       	mov	r9, r1
    2bb2:	68 94       	set
    2bb4:	aa 24       	eor	r10, r10
    2bb6:	a7 f8       	bld	r10, 7
    2bb8:	68 94       	set
    2bba:	cc 24       	eor	r12, r12
    2bbc:	c7 f8       	bld	r12, 7
    2bbe:	e1 2c       	mov	r14, r1
    2bc0:	00 e0       	ldi	r16, 0x00	; 0
    2bc2:	23 e0       	ldi	r18, 0x03	; 3
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	51 ee       	ldi	r21, 0xE1	; 225
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	13 d0       	rcall	.+38     	; 0x2bf4 <serial_new_instance>
    2bce:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <_com_serial_instance+0x1>
    2bd2:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_com_serial_instance>
    2bd6:	e3 e7       	ldi	r30, 0x73	; 115
    2bd8:	f5 e0       	ldi	r31, 0x05	; 5
    2bda:	86 e0       	ldi	r24, 0x06	; 6
    2bdc:	92 e0       	ldi	r25, 0x02	; 2
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
    2be2:	93 83       	std	Z+3, r25	; 0x03
    2be4:	82 83       	std	Z+2, r24	; 0x02
    2be6:	0f 91       	pop	r16
    2be8:	ef 90       	pop	r14
    2bea:	cf 90       	pop	r12
    2bec:	af 90       	pop	r10
    2bee:	9f 90       	pop	r9
    2bf0:	8f 90       	pop	r8
    2bf2:	08 95       	ret

00002bf4 <serial_new_instance>:
    2bf4:	2f 92       	push	r2
    2bf6:	3f 92       	push	r3
    2bf8:	4f 92       	push	r4
    2bfa:	5f 92       	push	r5
    2bfc:	6f 92       	push	r6
    2bfe:	7f 92       	push	r7
    2c00:	8f 92       	push	r8
    2c02:	9f 92       	push	r9
    2c04:	af 92       	push	r10
    2c06:	cf 92       	push	r12
    2c08:	ef 92       	push	r14
    2c0a:	ff 92       	push	r15
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	f8 2e       	mov	r15, r24
    2c1a:	2a 01       	movw	r4, r20
    2c1c:	3b 01       	movw	r6, r22
    2c1e:	88 e0       	ldi	r24, 0x08	; 8
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <malloc>
    2c26:	8c 01       	movw	r16, r24
    2c28:	8f 2d       	mov	r24, r15
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	88 0f       	add	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	fc 01       	movw	r30, r24
    2c32:	e6 52       	subi	r30, 0x26	; 38
    2c34:	fb 4f       	sbci	r31, 0xFB	; 251
    2c36:	11 83       	std	Z+1, r17	; 0x01
    2c38:	00 83       	st	Z, r16
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	ec 5e       	subi	r30, 0xEC	; 236
    2c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	d8 01       	movw	r26, r16
    2c46:	8d 93       	st	X+, r24
    2c48:	9c 93       	st	X, r25
    2c4a:	6c 2d       	mov	r22, r12
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	84 e0       	ldi	r24, 0x04	; 4
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 be 20 	call	0x417c	; 0x417c <calloc>
    2c56:	1c 01       	movw	r2, r24
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	86 e0       	ldi	r24, 0x06	; 6
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 be 20 	call	0x417c	; 0x417c <calloc>
    2c64:	7c 01       	movw	r14, r24
    2c66:	4c 2d       	mov	r20, r12
    2c68:	b1 01       	movw	r22, r2
    2c6a:	4d d3       	rcall	.+1690   	; 0x3306 <fifo_init>
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	f5 82       	std	Z+5, r15	; 0x05
    2c70:	e4 82       	std	Z+4, r14	; 0x04
    2c72:	6a 2d       	mov	r22, r10
    2c74:	70 e0       	ldi	r23, 0x00	; 0
    2c76:	84 e0       	ldi	r24, 0x04	; 4
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 be 20 	call	0x417c	; 0x417c <calloc>
    2c7e:	1c 01       	movw	r2, r24
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	86 e0       	ldi	r24, 0x06	; 6
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 be 20 	call	0x417c	; 0x417c <calloc>
    2c8c:	7c 01       	movw	r14, r24
    2c8e:	4a 2d       	mov	r20, r10
    2c90:	b1 01       	movw	r22, r2
    2c92:	39 d3       	rcall	.+1650   	; 0x3306 <fifo_init>
    2c94:	d8 01       	movw	r26, r16
    2c96:	13 96       	adiw	r26, 0x03	; 3
    2c98:	fc 92       	st	X, r15
    2c9a:	ee 92       	st	-X, r14
    2c9c:	12 97       	sbiw	r26, 0x02	; 2
    2c9e:	17 96       	adiw	r26, 0x07	; 7
    2ca0:	9c 92       	st	X, r9
    2ca2:	8e 92       	st	-X, r8
    2ca4:	16 97       	sbiw	r26, 0x06	; 6
    2ca6:	ff b6       	in	r15, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	ed 91       	ld	r30, X+
    2cac:	fc 91       	ld	r31, X
    2cae:	11 97       	sbiw	r26, 0x01	; 1
    2cb0:	36 97       	sbiw	r30, 0x06	; 6
    2cb2:	80 81       	ld	r24, Z
    2cb4:	82 60       	ori	r24, 0x02	; 2
    2cb6:	80 83       	st	Z, r24
    2cb8:	8d 90       	ld	r8, X+
    2cba:	9c 90       	ld	r9, X
    2cbc:	c3 01       	movw	r24, r6
    2cbe:	b2 01       	movw	r22, r4
    2cc0:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__floatunsisf>
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	51 e4       	ldi	r21, 0x41	; 65
    2ccc:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__mulsf3>
    2cd0:	9b 01       	movw	r18, r22
    2cd2:	ac 01       	movw	r20, r24
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	74 e2       	ldi	r23, 0x24	; 36
    2cd8:	84 e7       	ldi	r24, 0x74	; 116
    2cda:	9b e4       	ldi	r25, 0x4B	; 75
    2cdc:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__divsf3>
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__subsf3>
    2cec:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <__fixunssfsi>
    2cf0:	f4 01       	movw	r30, r8
    2cf2:	32 97       	sbiw	r30, 0x02	; 2
    2cf4:	60 83       	st	Z, r22
    2cf6:	d8 01       	movw	r26, r16
    2cf8:	ed 91       	ld	r30, X+
    2cfa:	fc 91       	ld	r31, X
    2cfc:	11 97       	sbiw	r26, 0x01	; 1
    2cfe:	35 97       	sbiw	r30, 0x05	; 5
    2d00:	88 e9       	ldi	r24, 0x98	; 152
    2d02:	80 83       	st	Z, r24
    2d04:	ed 91       	ld	r30, X+
    2d06:	fc 91       	ld	r31, X
    2d08:	34 97       	sbiw	r30, 0x04	; 4
    2d0a:	86 e0       	ldi	r24, 0x06	; 6
    2d0c:	80 83       	st	Z, r24
    2d0e:	ff be       	out	0x3f, r15	; 63
    2d10:	c8 01       	movw	r24, r16
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	0f 91       	pop	r16
    2d1a:	ff 90       	pop	r15
    2d1c:	ef 90       	pop	r14
    2d1e:	cf 90       	pop	r12
    2d20:	af 90       	pop	r10
    2d22:	9f 90       	pop	r9
    2d24:	8f 90       	pop	r8
    2d26:	7f 90       	pop	r7
    2d28:	6f 90       	pop	r6
    2d2a:	5f 90       	pop	r5
    2d2c:	4f 90       	pop	r4
    2d2e:	3f 90       	pop	r3
    2d30:	2f 90       	pop	r2
    2d32:	08 95       	ret

00002d34 <serial_send_byte>:
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	ec 01       	movw	r28, r24
    2d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	25 81       	ldd	r18, Z+5	; 0x05
    2d44:	98 1b       	sub	r25, r24
    2d46:	92 23       	and	r25, r18
    2d48:	84 81       	ldd	r24, Z+4	; 0x04
    2d4a:	98 17       	cp	r25, r24
    2d4c:	a1 f0       	breq	.+40     	; 0x2d76 <serial_send_byte+0x42>
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	26 95       	lsr	r18
    2d52:	29 23       	and	r18, r25
    2d54:	a0 81       	ld	r26, Z
    2d56:	b1 81       	ldd	r27, Z+1	; 0x01
    2d58:	a2 0f       	add	r26, r18
    2d5a:	b1 1d       	adc	r27, r1
    2d5c:	6c 93       	st	X, r22
    2d5e:	9f 5f       	subi	r25, 0xFF	; 255
    2d60:	25 81       	ldd	r18, Z+5	; 0x05
    2d62:	92 23       	and	r25, r18
    2d64:	93 83       	std	Z+3, r25	; 0x03
    2d66:	e8 81       	ld	r30, Y
    2d68:	f9 81       	ldd	r31, Y+1	; 0x01
    2d6a:	35 97       	sbiw	r30, 0x05	; 5
    2d6c:	80 81       	ld	r24, Z
    2d6e:	80 62       	ori	r24, 0x20	; 32
    2d70:	80 83       	st	Z, r24
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <serial_send_byte+0x44>
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

00002d7e <serial_send_bytes>:
    2d7e:	ef 92       	push	r14
    2d80:	ff 92       	push	r15
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	7c 01       	movw	r14, r24
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	12 96       	adiw	r26, 0x02	; 2
    2d90:	ed 91       	ld	r30, X+
    2d92:	fc 91       	ld	r31, X
    2d94:	13 97       	sbiw	r26, 0x03	; 3
    2d96:	93 81       	ldd	r25, Z+3	; 0x03
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	98 1b       	sub	r25, r24
    2d9c:	85 81       	ldd	r24, Z+5	; 0x05
    2d9e:	98 23       	and	r25, r24
    2da0:	84 81       	ldd	r24, Z+4	; 0x04
    2da2:	89 1b       	sub	r24, r25
    2da4:	86 17       	cp	r24, r22
    2da6:	98 f1       	brcs	.+102    	; 0x2e0e <serial_send_bytes+0x90>
    2da8:	66 23       	and	r22, r22
    2daa:	41 f1       	breq	.+80     	; 0x2dfc <serial_send_bytes+0x7e>
    2dac:	84 2f       	mov	r24, r20
    2dae:	95 2f       	mov	r25, r21
    2db0:	dc 01       	movw	r26, r24
    2db2:	61 50       	subi	r22, 0x01	; 1
    2db4:	46 2f       	mov	r20, r22
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	4f 5f       	subi	r20, 0xFF	; 255
    2dba:	5f 4f       	sbci	r21, 0xFF	; 255
    2dbc:	48 0f       	add	r20, r24
    2dbe:	59 1f       	adc	r21, r25
    2dc0:	e7 01       	movw	r28, r14
    2dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc6:	93 81       	ldd	r25, Z+3	; 0x03
    2dc8:	82 81       	ldd	r24, Z+2	; 0x02
    2dca:	25 81       	ldd	r18, Z+5	; 0x05
    2dcc:	98 1b       	sub	r25, r24
    2dce:	92 23       	and	r25, r18
    2dd0:	84 81       	ldd	r24, Z+4	; 0x04
    2dd2:	98 17       	cp	r25, r24
    2dd4:	79 f0       	breq	.+30     	; 0x2df4 <serial_send_bytes+0x76>
    2dd6:	8c 91       	ld	r24, X
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	26 95       	lsr	r18
    2ddc:	29 23       	and	r18, r25
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	8b 01       	movw	r16, r22
    2de4:	02 0f       	add	r16, r18
    2de6:	11 1d       	adc	r17, r1
    2de8:	e8 01       	movw	r28, r16
    2dea:	88 83       	st	Y, r24
    2dec:	9f 5f       	subi	r25, 0xFF	; 255
    2dee:	85 81       	ldd	r24, Z+5	; 0x05
    2df0:	98 23       	and	r25, r24
    2df2:	93 83       	std	Z+3, r25	; 0x03
    2df4:	11 96       	adiw	r26, 0x01	; 1
    2df6:	a4 17       	cp	r26, r20
    2df8:	b5 07       	cpc	r27, r21
    2dfa:	11 f7       	brne	.-60     	; 0x2dc0 <serial_send_bytes+0x42>
    2dfc:	d7 01       	movw	r26, r14
    2dfe:	ed 91       	ld	r30, X+
    2e00:	fc 91       	ld	r31, X
    2e02:	35 97       	sbiw	r30, 0x05	; 5
    2e04:	80 81       	ld	r24, Z
    2e06:	80 62       	ori	r24, 0x20	; 32
    2e08:	80 83       	st	Z, r24
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <serial_send_bytes+0x92>
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	ff 90       	pop	r15
    2e1a:	ef 90       	pop	r14
    2e1c:	08 95       	ret

00002e1e <serial_get_byte>:
    2e1e:	dc 01       	movw	r26, r24
    2e20:	14 96       	adiw	r26, 0x04	; 4
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	15 97       	sbiw	r26, 0x05	; 5
    2e28:	93 81       	ldd	r25, Z+3	; 0x03
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	98 17       	cp	r25, r24
    2e2e:	89 f0       	breq	.+34     	; 0x2e52 <serial_get_byte+0x34>
    2e30:	92 81       	ldd	r25, Z+2	; 0x02
    2e32:	85 81       	ldd	r24, Z+5	; 0x05
    2e34:	86 95       	lsr	r24
    2e36:	89 23       	and	r24, r25
    2e38:	a0 81       	ld	r26, Z
    2e3a:	b1 81       	ldd	r27, Z+1	; 0x01
    2e3c:	a8 0f       	add	r26, r24
    2e3e:	b1 1d       	adc	r27, r1
    2e40:	8c 91       	ld	r24, X
    2e42:	db 01       	movw	r26, r22
    2e44:	8c 93       	st	X, r24
    2e46:	9f 5f       	subi	r25, 0xFF	; 255
    2e48:	85 81       	ldd	r24, Z+5	; 0x05
    2e4a:	98 23       	and	r25, r24
    2e4c:	92 83       	std	Z+2, r25	; 0x02
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	08 95       	ret
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	08 95       	ret

00002e56 <__vector_25>:
    2e56:	1f 92       	push	r1
    2e58:	0f 92       	push	r0
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	0f 92       	push	r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	0b b6       	in	r0, 0x3b	; 59
    2e62:	0f 92       	push	r0
    2e64:	2f 93       	push	r18
    2e66:	3f 93       	push	r19
    2e68:	4f 93       	push	r20
    2e6a:	5f 93       	push	r21
    2e6c:	6f 93       	push	r22
    2e6e:	7f 93       	push	r23
    2e70:	8f 93       	push	r24
    2e72:	9f 93       	push	r25
    2e74:	af 93       	push	r26
    2e76:	bf 93       	push	r27
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	ef 93       	push	r30
    2e7e:	ff 93       	push	r31
    2e80:	a0 91 da 04 	lds	r26, 0x04DA	; 0x8004da <_ser_handle>
    2e84:	b0 91 db 04 	lds	r27, 0x04DB	; 0x8004db <_ser_handle+0x1>
    2e88:	10 97       	sbiw	r26, 0x00	; 0
    2e8a:	11 f1       	breq	.+68     	; 0x2ed0 <__vector_25+0x7a>
    2e8c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2e90:	14 96       	adiw	r26, 0x04	; 4
    2e92:	ed 91       	ld	r30, X+
    2e94:	fc 91       	ld	r31, X
    2e96:	15 97       	sbiw	r26, 0x05	; 5
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	25 81       	ldd	r18, Z+5	; 0x05
    2e9e:	98 1b       	sub	r25, r24
    2ea0:	92 23       	and	r25, r18
    2ea2:	84 81       	ldd	r24, Z+4	; 0x04
    2ea4:	98 17       	cp	r25, r24
    2ea6:	61 f0       	breq	.+24     	; 0x2ec0 <__vector_25+0x6a>
    2ea8:	83 81       	ldd	r24, Z+3	; 0x03
    2eaa:	26 95       	lsr	r18
    2eac:	28 23       	and	r18, r24
    2eae:	c0 81       	ld	r28, Z
    2eb0:	d1 81       	ldd	r29, Z+1	; 0x01
    2eb2:	c2 0f       	add	r28, r18
    2eb4:	d1 1d       	adc	r29, r1
    2eb6:	68 83       	st	Y, r22
    2eb8:	8f 5f       	subi	r24, 0xFF	; 255
    2eba:	95 81       	ldd	r25, Z+5	; 0x05
    2ebc:	89 23       	and	r24, r25
    2ebe:	83 83       	std	Z+3, r24	; 0x03
    2ec0:	16 96       	adiw	r26, 0x06	; 6
    2ec2:	ed 91       	ld	r30, X+
    2ec4:	fc 91       	ld	r31, X
    2ec6:	17 97       	sbiw	r26, 0x07	; 7
    2ec8:	30 97       	sbiw	r30, 0x00	; 0
    2eca:	11 f0       	breq	.+4      	; 0x2ed0 <__vector_25+0x7a>
    2ecc:	cd 01       	movw	r24, r26
    2ece:	19 95       	eicall
    2ed0:	ff 91       	pop	r31
    2ed2:	ef 91       	pop	r30
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	bf 91       	pop	r27
    2eda:	af 91       	pop	r26
    2edc:	9f 91       	pop	r25
    2ede:	8f 91       	pop	r24
    2ee0:	7f 91       	pop	r23
    2ee2:	6f 91       	pop	r22
    2ee4:	5f 91       	pop	r21
    2ee6:	4f 91       	pop	r20
    2ee8:	3f 91       	pop	r19
    2eea:	2f 91       	pop	r18
    2eec:	0f 90       	pop	r0
    2eee:	0b be       	out	0x3b, r0	; 59
    2ef0:	0f 90       	pop	r0
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	0f 90       	pop	r0
    2ef6:	1f 90       	pop	r1
    2ef8:	18 95       	reti

00002efa <__vector_26>:
    2efa:	1f 92       	push	r1
    2efc:	0f 92       	push	r0
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	0f 92       	push	r0
    2f02:	11 24       	eor	r1, r1
    2f04:	0b b6       	in	r0, 0x3b	; 59
    2f06:	0f 92       	push	r0
    2f08:	2f 93       	push	r18
    2f0a:	8f 93       	push	r24
    2f0c:	9f 93       	push	r25
    2f0e:	af 93       	push	r26
    2f10:	bf 93       	push	r27
    2f12:	ef 93       	push	r30
    2f14:	ff 93       	push	r31
    2f16:	e0 91 da 04 	lds	r30, 0x04DA	; 0x8004da <_ser_handle>
    2f1a:	f0 91 db 04 	lds	r31, 0x04DB	; 0x8004db <_ser_handle+0x1>
    2f1e:	30 97       	sbiw	r30, 0x00	; 0
    2f20:	b9 f0       	breq	.+46     	; 0x2f50 <__vector_26+0x56>
    2f22:	02 80       	ldd	r0, Z+2	; 0x02
    2f24:	f3 81       	ldd	r31, Z+3	; 0x03
    2f26:	e0 2d       	mov	r30, r0
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	98 17       	cp	r25, r24
    2f2e:	b1 f0       	breq	.+44     	; 0x2f5c <__vector_26+0x62>
    2f30:	92 81       	ldd	r25, Z+2	; 0x02
    2f32:	85 81       	ldd	r24, Z+5	; 0x05
    2f34:	28 2f       	mov	r18, r24
    2f36:	26 95       	lsr	r18
    2f38:	29 23       	and	r18, r25
    2f3a:	a0 81       	ld	r26, Z
    2f3c:	b1 81       	ldd	r27, Z+1	; 0x01
    2f3e:	a2 0f       	add	r26, r18
    2f40:	b1 1d       	adc	r27, r1
    2f42:	2c 91       	ld	r18, X
    2f44:	9f 5f       	subi	r25, 0xFF	; 255
    2f46:	89 23       	and	r24, r25
    2f48:	82 83       	std	Z+2, r24	; 0x02
    2f4a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2f4e:	0b c0       	rjmp	.+22     	; 0x2f66 <__vector_26+0x6c>
    2f50:	e1 ec       	ldi	r30, 0xC1	; 193
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	8f 7d       	andi	r24, 0xDF	; 223
    2f58:	80 83       	st	Z, r24
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <__vector_26+0x6c>
    2f5c:	e1 ec       	ldi	r30, 0xC1	; 193
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	8f 7d       	andi	r24, 0xDF	; 223
    2f64:	80 83       	st	Z, r24
    2f66:	ff 91       	pop	r31
    2f68:	ef 91       	pop	r30
    2f6a:	bf 91       	pop	r27
    2f6c:	af 91       	pop	r26
    2f6e:	9f 91       	pop	r25
    2f70:	8f 91       	pop	r24
    2f72:	2f 91       	pop	r18
    2f74:	0f 90       	pop	r0
    2f76:	0b be       	out	0x3b, r0	; 59
    2f78:	0f 90       	pop	r0
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	0f 90       	pop	r0
    2f7e:	1f 90       	pop	r1
    2f80:	18 95       	reti

00002f82 <__vector_36>:
    2f82:	1f 92       	push	r1
    2f84:	0f 92       	push	r0
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	0f 92       	push	r0
    2f8a:	11 24       	eor	r1, r1
    2f8c:	0b b6       	in	r0, 0x3b	; 59
    2f8e:	0f 92       	push	r0
    2f90:	2f 93       	push	r18
    2f92:	3f 93       	push	r19
    2f94:	4f 93       	push	r20
    2f96:	5f 93       	push	r21
    2f98:	6f 93       	push	r22
    2f9a:	7f 93       	push	r23
    2f9c:	8f 93       	push	r24
    2f9e:	9f 93       	push	r25
    2fa0:	af 93       	push	r26
    2fa2:	bf 93       	push	r27
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	ef 93       	push	r30
    2faa:	ff 93       	push	r31
    2fac:	a0 91 dc 04 	lds	r26, 0x04DC	; 0x8004dc <_ser_handle+0x2>
    2fb0:	b0 91 dd 04 	lds	r27, 0x04DD	; 0x8004dd <_ser_handle+0x3>
    2fb4:	10 97       	sbiw	r26, 0x00	; 0
    2fb6:	11 f1       	breq	.+68     	; 0x2ffc <__vector_36+0x7a>
    2fb8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2fbc:	14 96       	adiw	r26, 0x04	; 4
    2fbe:	ed 91       	ld	r30, X+
    2fc0:	fc 91       	ld	r31, X
    2fc2:	15 97       	sbiw	r26, 0x05	; 5
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	25 81       	ldd	r18, Z+5	; 0x05
    2fca:	98 1b       	sub	r25, r24
    2fcc:	92 23       	and	r25, r18
    2fce:	84 81       	ldd	r24, Z+4	; 0x04
    2fd0:	98 17       	cp	r25, r24
    2fd2:	61 f0       	breq	.+24     	; 0x2fec <__vector_36+0x6a>
    2fd4:	83 81       	ldd	r24, Z+3	; 0x03
    2fd6:	26 95       	lsr	r18
    2fd8:	28 23       	and	r18, r24
    2fda:	c0 81       	ld	r28, Z
    2fdc:	d1 81       	ldd	r29, Z+1	; 0x01
    2fde:	c2 0f       	add	r28, r18
    2fe0:	d1 1d       	adc	r29, r1
    2fe2:	68 83       	st	Y, r22
    2fe4:	8f 5f       	subi	r24, 0xFF	; 255
    2fe6:	95 81       	ldd	r25, Z+5	; 0x05
    2fe8:	89 23       	and	r24, r25
    2fea:	83 83       	std	Z+3, r24	; 0x03
    2fec:	16 96       	adiw	r26, 0x06	; 6
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	17 97       	sbiw	r26, 0x07	; 7
    2ff4:	30 97       	sbiw	r30, 0x00	; 0
    2ff6:	11 f0       	breq	.+4      	; 0x2ffc <__vector_36+0x7a>
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	19 95       	eicall
    2ffc:	ff 91       	pop	r31
    2ffe:	ef 91       	pop	r30
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	bf 91       	pop	r27
    3006:	af 91       	pop	r26
    3008:	9f 91       	pop	r25
    300a:	8f 91       	pop	r24
    300c:	7f 91       	pop	r23
    300e:	6f 91       	pop	r22
    3010:	5f 91       	pop	r21
    3012:	4f 91       	pop	r20
    3014:	3f 91       	pop	r19
    3016:	2f 91       	pop	r18
    3018:	0f 90       	pop	r0
    301a:	0b be       	out	0x3b, r0	; 59
    301c:	0f 90       	pop	r0
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	0f 90       	pop	r0
    3022:	1f 90       	pop	r1
    3024:	18 95       	reti

00003026 <__vector_37>:
    3026:	1f 92       	push	r1
    3028:	0f 92       	push	r0
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	0f 92       	push	r0
    302e:	11 24       	eor	r1, r1
    3030:	0b b6       	in	r0, 0x3b	; 59
    3032:	0f 92       	push	r0
    3034:	2f 93       	push	r18
    3036:	8f 93       	push	r24
    3038:	9f 93       	push	r25
    303a:	af 93       	push	r26
    303c:	bf 93       	push	r27
    303e:	ef 93       	push	r30
    3040:	ff 93       	push	r31
    3042:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <_ser_handle+0x2>
    3046:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <_ser_handle+0x3>
    304a:	30 97       	sbiw	r30, 0x00	; 0
    304c:	b9 f0       	breq	.+46     	; 0x307c <__vector_37+0x56>
    304e:	02 80       	ldd	r0, Z+2	; 0x02
    3050:	f3 81       	ldd	r31, Z+3	; 0x03
    3052:	e0 2d       	mov	r30, r0
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	98 17       	cp	r25, r24
    305a:	b1 f0       	breq	.+44     	; 0x3088 <__vector_37+0x62>
    305c:	92 81       	ldd	r25, Z+2	; 0x02
    305e:	85 81       	ldd	r24, Z+5	; 0x05
    3060:	28 2f       	mov	r18, r24
    3062:	26 95       	lsr	r18
    3064:	29 23       	and	r18, r25
    3066:	a0 81       	ld	r26, Z
    3068:	b1 81       	ldd	r27, Z+1	; 0x01
    306a:	a2 0f       	add	r26, r18
    306c:	b1 1d       	adc	r27, r1
    306e:	2c 91       	ld	r18, X
    3070:	9f 5f       	subi	r25, 0xFF	; 255
    3072:	89 23       	and	r24, r25
    3074:	82 83       	std	Z+2, r24	; 0x02
    3076:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    307a:	0b c0       	rjmp	.+22     	; 0x3092 <__vector_37+0x6c>
    307c:	e9 ec       	ldi	r30, 0xC9	; 201
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	8f 7d       	andi	r24, 0xDF	; 223
    3084:	80 83       	st	Z, r24
    3086:	05 c0       	rjmp	.+10     	; 0x3092 <__vector_37+0x6c>
    3088:	e9 ec       	ldi	r30, 0xC9	; 201
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	8f 7d       	andi	r24, 0xDF	; 223
    3090:	80 83       	st	Z, r24
    3092:	ff 91       	pop	r31
    3094:	ef 91       	pop	r30
    3096:	bf 91       	pop	r27
    3098:	af 91       	pop	r26
    309a:	9f 91       	pop	r25
    309c:	8f 91       	pop	r24
    309e:	2f 91       	pop	r18
    30a0:	0f 90       	pop	r0
    30a2:	0b be       	out	0x3b, r0	; 59
    30a4:	0f 90       	pop	r0
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	0f 90       	pop	r0
    30aa:	1f 90       	pop	r1
    30ac:	18 95       	reti

000030ae <__vector_51>:
    30ae:	1f 92       	push	r1
    30b0:	0f 92       	push	r0
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	0f 92       	push	r0
    30b6:	11 24       	eor	r1, r1
    30b8:	0b b6       	in	r0, 0x3b	; 59
    30ba:	0f 92       	push	r0
    30bc:	2f 93       	push	r18
    30be:	3f 93       	push	r19
    30c0:	4f 93       	push	r20
    30c2:	5f 93       	push	r21
    30c4:	6f 93       	push	r22
    30c6:	7f 93       	push	r23
    30c8:	8f 93       	push	r24
    30ca:	9f 93       	push	r25
    30cc:	af 93       	push	r26
    30ce:	bf 93       	push	r27
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	ef 93       	push	r30
    30d6:	ff 93       	push	r31
    30d8:	a0 91 de 04 	lds	r26, 0x04DE	; 0x8004de <_ser_handle+0x4>
    30dc:	b0 91 df 04 	lds	r27, 0x04DF	; 0x8004df <_ser_handle+0x5>
    30e0:	10 97       	sbiw	r26, 0x00	; 0
    30e2:	11 f1       	breq	.+68     	; 0x3128 <__vector_51+0x7a>
    30e4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    30e8:	14 96       	adiw	r26, 0x04	; 4
    30ea:	ed 91       	ld	r30, X+
    30ec:	fc 91       	ld	r31, X
    30ee:	15 97       	sbiw	r26, 0x05	; 5
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	25 81       	ldd	r18, Z+5	; 0x05
    30f6:	98 1b       	sub	r25, r24
    30f8:	92 23       	and	r25, r18
    30fa:	84 81       	ldd	r24, Z+4	; 0x04
    30fc:	98 17       	cp	r25, r24
    30fe:	61 f0       	breq	.+24     	; 0x3118 <__vector_51+0x6a>
    3100:	83 81       	ldd	r24, Z+3	; 0x03
    3102:	26 95       	lsr	r18
    3104:	28 23       	and	r18, r24
    3106:	c0 81       	ld	r28, Z
    3108:	d1 81       	ldd	r29, Z+1	; 0x01
    310a:	c2 0f       	add	r28, r18
    310c:	d1 1d       	adc	r29, r1
    310e:	68 83       	st	Y, r22
    3110:	8f 5f       	subi	r24, 0xFF	; 255
    3112:	95 81       	ldd	r25, Z+5	; 0x05
    3114:	89 23       	and	r24, r25
    3116:	83 83       	std	Z+3, r24	; 0x03
    3118:	16 96       	adiw	r26, 0x06	; 6
    311a:	ed 91       	ld	r30, X+
    311c:	fc 91       	ld	r31, X
    311e:	17 97       	sbiw	r26, 0x07	; 7
    3120:	30 97       	sbiw	r30, 0x00	; 0
    3122:	11 f0       	breq	.+4      	; 0x3128 <__vector_51+0x7a>
    3124:	cd 01       	movw	r24, r26
    3126:	19 95       	eicall
    3128:	ff 91       	pop	r31
    312a:	ef 91       	pop	r30
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	bf 91       	pop	r27
    3132:	af 91       	pop	r26
    3134:	9f 91       	pop	r25
    3136:	8f 91       	pop	r24
    3138:	7f 91       	pop	r23
    313a:	6f 91       	pop	r22
    313c:	5f 91       	pop	r21
    313e:	4f 91       	pop	r20
    3140:	3f 91       	pop	r19
    3142:	2f 91       	pop	r18
    3144:	0f 90       	pop	r0
    3146:	0b be       	out	0x3b, r0	; 59
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	0f 90       	pop	r0
    314e:	1f 90       	pop	r1
    3150:	18 95       	reti

00003152 <__vector_52>:
    3152:	1f 92       	push	r1
    3154:	0f 92       	push	r0
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	0f 92       	push	r0
    315a:	11 24       	eor	r1, r1
    315c:	0b b6       	in	r0, 0x3b	; 59
    315e:	0f 92       	push	r0
    3160:	2f 93       	push	r18
    3162:	8f 93       	push	r24
    3164:	9f 93       	push	r25
    3166:	af 93       	push	r26
    3168:	bf 93       	push	r27
    316a:	ef 93       	push	r30
    316c:	ff 93       	push	r31
    316e:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <_ser_handle+0x4>
    3172:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <_ser_handle+0x5>
    3176:	30 97       	sbiw	r30, 0x00	; 0
    3178:	b9 f0       	breq	.+46     	; 0x31a8 <__vector_52+0x56>
    317a:	02 80       	ldd	r0, Z+2	; 0x02
    317c:	f3 81       	ldd	r31, Z+3	; 0x03
    317e:	e0 2d       	mov	r30, r0
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	98 17       	cp	r25, r24
    3186:	b1 f0       	breq	.+44     	; 0x31b4 <__vector_52+0x62>
    3188:	92 81       	ldd	r25, Z+2	; 0x02
    318a:	85 81       	ldd	r24, Z+5	; 0x05
    318c:	28 2f       	mov	r18, r24
    318e:	26 95       	lsr	r18
    3190:	29 23       	and	r18, r25
    3192:	a0 81       	ld	r26, Z
    3194:	b1 81       	ldd	r27, Z+1	; 0x01
    3196:	a2 0f       	add	r26, r18
    3198:	b1 1d       	adc	r27, r1
    319a:	2c 91       	ld	r18, X
    319c:	9f 5f       	subi	r25, 0xFF	; 255
    319e:	89 23       	and	r24, r25
    31a0:	82 83       	std	Z+2, r24	; 0x02
    31a2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    31a6:	0b c0       	rjmp	.+22     	; 0x31be <__vector_52+0x6c>
    31a8:	e1 ed       	ldi	r30, 0xD1	; 209
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8f 7d       	andi	r24, 0xDF	; 223
    31b0:	80 83       	st	Z, r24
    31b2:	05 c0       	rjmp	.+10     	; 0x31be <__vector_52+0x6c>
    31b4:	e1 ed       	ldi	r30, 0xD1	; 209
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	8f 7d       	andi	r24, 0xDF	; 223
    31bc:	80 83       	st	Z, r24
    31be:	ff 91       	pop	r31
    31c0:	ef 91       	pop	r30
    31c2:	bf 91       	pop	r27
    31c4:	af 91       	pop	r26
    31c6:	9f 91       	pop	r25
    31c8:	8f 91       	pop	r24
    31ca:	2f 91       	pop	r18
    31cc:	0f 90       	pop	r0
    31ce:	0b be       	out	0x3b, r0	; 59
    31d0:	0f 90       	pop	r0
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	0f 90       	pop	r0
    31d6:	1f 90       	pop	r1
    31d8:	18 95       	reti

000031da <__vector_54>:
    31da:	1f 92       	push	r1
    31dc:	0f 92       	push	r0
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	0f 92       	push	r0
    31e2:	11 24       	eor	r1, r1
    31e4:	0b b6       	in	r0, 0x3b	; 59
    31e6:	0f 92       	push	r0
    31e8:	2f 93       	push	r18
    31ea:	3f 93       	push	r19
    31ec:	4f 93       	push	r20
    31ee:	5f 93       	push	r21
    31f0:	6f 93       	push	r22
    31f2:	7f 93       	push	r23
    31f4:	8f 93       	push	r24
    31f6:	9f 93       	push	r25
    31f8:	af 93       	push	r26
    31fa:	bf 93       	push	r27
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	ef 93       	push	r30
    3202:	ff 93       	push	r31
    3204:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <_ser_handle+0x6>
    3208:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <_ser_handle+0x7>
    320c:	10 97       	sbiw	r26, 0x00	; 0
    320e:	11 f1       	breq	.+68     	; 0x3254 <__vector_54+0x7a>
    3210:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3214:	14 96       	adiw	r26, 0x04	; 4
    3216:	ed 91       	ld	r30, X+
    3218:	fc 91       	ld	r31, X
    321a:	15 97       	sbiw	r26, 0x05	; 5
    321c:	93 81       	ldd	r25, Z+3	; 0x03
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	25 81       	ldd	r18, Z+5	; 0x05
    3222:	98 1b       	sub	r25, r24
    3224:	92 23       	and	r25, r18
    3226:	84 81       	ldd	r24, Z+4	; 0x04
    3228:	98 17       	cp	r25, r24
    322a:	61 f0       	breq	.+24     	; 0x3244 <__vector_54+0x6a>
    322c:	83 81       	ldd	r24, Z+3	; 0x03
    322e:	26 95       	lsr	r18
    3230:	28 23       	and	r18, r24
    3232:	c0 81       	ld	r28, Z
    3234:	d1 81       	ldd	r29, Z+1	; 0x01
    3236:	c2 0f       	add	r28, r18
    3238:	d1 1d       	adc	r29, r1
    323a:	68 83       	st	Y, r22
    323c:	8f 5f       	subi	r24, 0xFF	; 255
    323e:	95 81       	ldd	r25, Z+5	; 0x05
    3240:	89 23       	and	r24, r25
    3242:	83 83       	std	Z+3, r24	; 0x03
    3244:	16 96       	adiw	r26, 0x06	; 6
    3246:	ed 91       	ld	r30, X+
    3248:	fc 91       	ld	r31, X
    324a:	17 97       	sbiw	r26, 0x07	; 7
    324c:	30 97       	sbiw	r30, 0x00	; 0
    324e:	11 f0       	breq	.+4      	; 0x3254 <__vector_54+0x7a>
    3250:	cd 01       	movw	r24, r26
    3252:	19 95       	eicall
    3254:	ff 91       	pop	r31
    3256:	ef 91       	pop	r30
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	bf 91       	pop	r27
    325e:	af 91       	pop	r26
    3260:	9f 91       	pop	r25
    3262:	8f 91       	pop	r24
    3264:	7f 91       	pop	r23
    3266:	6f 91       	pop	r22
    3268:	5f 91       	pop	r21
    326a:	4f 91       	pop	r20
    326c:	3f 91       	pop	r19
    326e:	2f 91       	pop	r18
    3270:	0f 90       	pop	r0
    3272:	0b be       	out	0x3b, r0	; 59
    3274:	0f 90       	pop	r0
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	0f 90       	pop	r0
    327a:	1f 90       	pop	r1
    327c:	18 95       	reti

0000327e <__vector_55>:
    327e:	1f 92       	push	r1
    3280:	0f 92       	push	r0
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	0f 92       	push	r0
    3286:	11 24       	eor	r1, r1
    3288:	0b b6       	in	r0, 0x3b	; 59
    328a:	0f 92       	push	r0
    328c:	2f 93       	push	r18
    328e:	8f 93       	push	r24
    3290:	9f 93       	push	r25
    3292:	af 93       	push	r26
    3294:	bf 93       	push	r27
    3296:	ef 93       	push	r30
    3298:	ff 93       	push	r31
    329a:	e0 91 e0 04 	lds	r30, 0x04E0	; 0x8004e0 <_ser_handle+0x6>
    329e:	f0 91 e1 04 	lds	r31, 0x04E1	; 0x8004e1 <_ser_handle+0x7>
    32a2:	30 97       	sbiw	r30, 0x00	; 0
    32a4:	b9 f0       	breq	.+46     	; 0x32d4 <__vector_55+0x56>
    32a6:	02 80       	ldd	r0, Z+2	; 0x02
    32a8:	f3 81       	ldd	r31, Z+3	; 0x03
    32aa:	e0 2d       	mov	r30, r0
    32ac:	93 81       	ldd	r25, Z+3	; 0x03
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	98 17       	cp	r25, r24
    32b2:	b1 f0       	breq	.+44     	; 0x32e0 <__vector_55+0x62>
    32b4:	92 81       	ldd	r25, Z+2	; 0x02
    32b6:	85 81       	ldd	r24, Z+5	; 0x05
    32b8:	28 2f       	mov	r18, r24
    32ba:	26 95       	lsr	r18
    32bc:	29 23       	and	r18, r25
    32be:	a0 81       	ld	r26, Z
    32c0:	b1 81       	ldd	r27, Z+1	; 0x01
    32c2:	a2 0f       	add	r26, r18
    32c4:	b1 1d       	adc	r27, r1
    32c6:	2c 91       	ld	r18, X
    32c8:	9f 5f       	subi	r25, 0xFF	; 255
    32ca:	89 23       	and	r24, r25
    32cc:	82 83       	std	Z+2, r24	; 0x02
    32ce:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    32d2:	0b c0       	rjmp	.+22     	; 0x32ea <__vector_55+0x6c>
    32d4:	e1 e3       	ldi	r30, 0x31	; 49
    32d6:	f1 e0       	ldi	r31, 0x01	; 1
    32d8:	80 81       	ld	r24, Z
    32da:	8f 7d       	andi	r24, 0xDF	; 223
    32dc:	80 83       	st	Z, r24
    32de:	05 c0       	rjmp	.+10     	; 0x32ea <__vector_55+0x6c>
    32e0:	e1 e3       	ldi	r30, 0x31	; 49
    32e2:	f1 e0       	ldi	r31, 0x01	; 1
    32e4:	80 81       	ld	r24, Z
    32e6:	8f 7d       	andi	r24, 0xDF	; 223
    32e8:	80 83       	st	Z, r24
    32ea:	ff 91       	pop	r31
    32ec:	ef 91       	pop	r30
    32ee:	bf 91       	pop	r27
    32f0:	af 91       	pop	r26
    32f2:	9f 91       	pop	r25
    32f4:	8f 91       	pop	r24
    32f6:	2f 91       	pop	r18
    32f8:	0f 90       	pop	r0
    32fa:	0b be       	out	0x3b, r0	; 59
    32fc:	0f 90       	pop	r0
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	0f 90       	pop	r0
    3302:	1f 90       	pop	r1
    3304:	18 95       	reti

00003306 <fifo_init>:
    3306:	fc 01       	movw	r30, r24
    3308:	41 11       	cpse	r20, r1
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <fifo_init+0xa>
    330c:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <abort>
    3310:	84 2f       	mov	r24, r20
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9c 01       	movw	r18, r24
    3316:	21 50       	subi	r18, 0x01	; 1
    3318:	31 09       	sbc	r19, r1
    331a:	82 23       	and	r24, r18
    331c:	93 23       	and	r25, r19
    331e:	89 2b       	or	r24, r25
    3320:	11 f0       	breq	.+4      	; 0x3326 <fifo_init+0x20>
    3322:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <abort>
    3326:	41 38       	cpi	r20, 0x81	; 129
    3328:	10 f0       	brcs	.+4      	; 0x332e <fifo_init+0x28>
    332a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <abort>
    332e:	12 82       	std	Z+2, r1	; 0x02
    3330:	13 82       	std	Z+3, r1	; 0x03
    3332:	44 83       	std	Z+4, r20	; 0x04
    3334:	44 0f       	add	r20, r20
    3336:	41 50       	subi	r20, 0x01	; 1
    3338:	45 83       	std	Z+5, r20	; 0x05
    333a:	71 83       	std	Z+1, r23	; 0x01
    333c:	60 83       	st	Z, r22
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	08 95       	ret

00003344 <hal_create>:
    3344:	e9 e5       	ldi	r30, 0x59	; 89
    3346:	f5 e0       	ldi	r31, 0x05	; 5
    3348:	22 e0       	ldi	r18, 0x02	; 2
    334a:	3c e1       	ldi	r19, 0x1C	; 28
    334c:	31 83       	std	Z+1, r19	; 0x01
    334e:	20 83       	st	Z, r18
    3350:	25 e0       	ldi	r18, 0x05	; 5
    3352:	3c e1       	ldi	r19, 0x1C	; 28
    3354:	33 83       	std	Z+3, r19	; 0x03
    3356:	22 83       	std	Z+2, r18	; 0x02
    3358:	20 e1       	ldi	r18, 0x10	; 16
    335a:	3c e1       	ldi	r19, 0x1C	; 28
    335c:	35 83       	std	Z+5, r19	; 0x05
    335e:	24 83       	std	Z+4, r18	; 0x04
    3360:	24 e1       	ldi	r18, 0x14	; 20
    3362:	3c e1       	ldi	r19, 0x1C	; 28
    3364:	37 83       	std	Z+7, r19	; 0x07
    3366:	26 83       	std	Z+6, r18	; 0x06
    3368:	2a e1       	ldi	r18, 0x1A	; 26
    336a:	3c e1       	ldi	r19, 0x1C	; 28
    336c:	31 87       	std	Z+9, r19	; 0x09
    336e:	20 87       	std	Z+8, r18	; 0x08
    3370:	26 e2       	ldi	r18, 0x26	; 38
    3372:	3c e1       	ldi	r19, 0x1C	; 28
    3374:	33 87       	std	Z+11, r19	; 0x0b
    3376:	22 87       	std	Z+10, r18	; 0x0a
    3378:	2b e2       	ldi	r18, 0x2B	; 43
    337a:	3c e1       	ldi	r19, 0x1C	; 28
    337c:	35 87       	std	Z+13, r19	; 0x0d
    337e:	24 87       	std	Z+12, r18	; 0x0c
    3380:	27 e3       	ldi	r18, 0x37	; 55
    3382:	3c e1       	ldi	r19, 0x1C	; 28
    3384:	37 87       	std	Z+15, r19	; 0x0f
    3386:	26 87       	std	Z+14, r18	; 0x0e
    3388:	27 e1       	ldi	r18, 0x17	; 23
    338a:	3c e1       	ldi	r19, 0x1C	; 28
    338c:	31 8b       	std	Z+17, r19	; 0x11
    338e:	20 8b       	std	Z+16, r18	; 0x10
    3390:	2c e3       	ldi	r18, 0x3C	; 60
    3392:	3c e1       	ldi	r19, 0x1C	; 28
    3394:	33 8b       	std	Z+19, r19	; 0x13
    3396:	22 8b       	std	Z+18, r18	; 0x12
    3398:	29 e4       	ldi	r18, 0x49	; 73
    339a:	3c e1       	ldi	r19, 0x1C	; 28
    339c:	35 8b       	std	Z+21, r19	; 0x15
    339e:	24 8b       	std	Z+20, r18	; 0x14
    33a0:	68 2f       	mov	r22, r24
    33a2:	cf 01       	movw	r24, r30
    33a4:	28 c1       	rjmp	.+592    	; 0x35f6 <led_create>
    33a6:	08 95       	ret

000033a8 <_hihTwiCallback>:
    33a8:	65 30       	cpi	r22, 0x05	; 5
    33aa:	f1 f4       	brne	.+60     	; 0x33e8 <_hihTwiCallback+0x40>
    33ac:	fa 01       	movw	r30, r20
    33ae:	80 81       	ld	r24, Z
    33b0:	8f 73       	andi	r24, 0x3F	; 63
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	98 2f       	mov	r25, r24
    33b6:	88 27       	eor	r24, r24
    33b8:	21 81       	ldd	r18, Z+1	; 0x01
    33ba:	82 2b       	or	r24, r18
    33bc:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    33c0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    33c4:	82 81       	ldd	r24, Z+2	; 0x02
    33c6:	f0 e4       	ldi	r31, 0x40	; 64
    33c8:	8f 9f       	mul	r24, r31
    33ca:	c0 01       	movw	r24, r0
    33cc:	11 24       	eor	r1, r1
    33ce:	fa 01       	movw	r30, r20
    33d0:	23 81       	ldd	r18, Z+3	; 0x03
    33d2:	26 95       	lsr	r18
    33d4:	26 95       	lsr	r18
    33d6:	82 2b       	or	r24, r18
    33d8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    33dc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <_measuringIsReady>
    33e6:	08 95       	ret
    33e8:	64 30       	cpi	r22, 0x04	; 4
    33ea:	51 f0       	breq	.+20     	; 0x3400 <_hihTwiCallback+0x58>
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	90 e4       	ldi	r25, 0x40	; 64
    33f0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    33f4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    33f8:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    33fc:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    3400:	08 95       	ret

00003402 <hih8120Create>:
    3402:	0f 93       	push	r16
    3404:	1f 93       	push	r17
    3406:	04 ed       	ldi	r16, 0xD4	; 212
    3408:	19 e1       	ldi	r17, 0x19	; 25
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	34 e2       	ldi	r19, 0x24	; 36
    340e:	44 ef       	ldi	r20, 0xF4	; 244
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	87 e2       	ldi	r24, 0x27	; 39
    3416:	0c d3       	rcall	.+1560   	; 0x3a30 <twiCreate>
    3418:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <_hih8120Handler+0x1>
    341c:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <_hih8120Handler>
    3420:	21 e0       	ldi	r18, 0x01	; 1
    3422:	89 2b       	or	r24, r25
    3424:	09 f0       	breq	.+2      	; 0x3428 <hih8120Create+0x26>
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	82 2f       	mov	r24, r18
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	08 95       	ret

00003430 <hih8120Wakeup>:
    3430:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <_hih8120Handler>
    3434:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <_hih8120Handler+0x1>
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	51 f0       	breq	.+20     	; 0x3450 <hih8120Wakeup+0x20>
    343c:	40 e0       	ldi	r20, 0x00	; 0
    343e:	60 e0       	ldi	r22, 0x00	; 0
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	47 d3       	rcall	.+1678   	; 0x3ad2 <twiTransmit>
    3444:	84 30       	cpi	r24, 0x04	; 4
    3446:	31 f4       	brne	.+12     	; 0x3454 <hih8120Wakeup+0x24>
    3448:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <_measuringIsReady>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	08 95       	ret
    3450:	82 e0       	ldi	r24, 0x02	; 2
    3452:	08 95       	ret
    3454:	83 e0       	ldi	r24, 0x03	; 3
    3456:	08 95       	ret

00003458 <hih8120Meassure>:
    3458:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <_hih8120Handler>
    345c:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <_hih8120Handler+0x1>
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	31 f0       	breq	.+12     	; 0x3470 <hih8120Meassure+0x18>
    3464:	64 e0       	ldi	r22, 0x04	; 4
    3466:	81 d3       	rcall	.+1794   	; 0x3b6a <twiReceive>
    3468:	85 30       	cpi	r24, 0x05	; 5
    346a:	21 f0       	breq	.+8      	; 0x3474 <hih8120Meassure+0x1c>
    346c:	83 e0       	ldi	r24, 0x03	; 3
    346e:	08 95       	ret
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	08 95       	ret
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	08 95       	ret

00003478 <hih8120GetTemperature>:
    3478:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    347c:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	8a d5       	rcall	.+2836   	; 0x3f9a <__floatunsisf>
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	45 e2       	ldi	r20, 0x25	; 37
    348c:	53 e4       	ldi	r21, 0x43	; 67
    348e:	13 d6       	rcall	.+3110   	; 0x40b6 <__mulsf3>
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	38 ef       	ldi	r19, 0xF8	; 248
    3494:	4f e7       	ldi	r20, 0x7F	; 127
    3496:	56 e4       	ldi	r21, 0x46	; 70
    3498:	e7 d4       	rcall	.+2510   	; 0x3e68 <__divsf3>
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e2       	ldi	r20, 0x20	; 32
    34a0:	52 e4       	ldi	r21, 0x42	; 66
    34a2:	7d c4       	rjmp	.+2298   	; 0x3d9e <__subsf3>
    34a4:	08 95       	ret

000034a6 <hih8120GetTemperature_x10>:
    34a6:	e8 df       	rcall	.-48     	; 0x3478 <hih8120GetTemperature>
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	40 e2       	ldi	r20, 0x20	; 32
    34ae:	51 e4       	ldi	r21, 0x41	; 65
    34b0:	02 d6       	rcall	.+3076   	; 0x40b6 <__mulsf3>
    34b2:	42 d5       	rcall	.+2692   	; 0x3f38 <__fixsfsi>
    34b4:	cb 01       	movw	r24, r22
    34b6:	08 95       	ret

000034b8 <_turn_off>:
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	fc 01       	movw	r30, r24
    34c0:	ee 0f       	add	r30, r30
    34c2:	ff 1f       	adc	r31, r31
    34c4:	e8 0f       	add	r30, r24
    34c6:	f9 1f       	adc	r31, r25
    34c8:	ee 0f       	add	r30, r30
    34ca:	ff 1f       	adc	r31, r31
    34cc:	eb 51       	subi	r30, 0x1B	; 27
    34ce:	fb 4f       	sbci	r31, 0xFB	; 251
    34d0:	23 81       	ldd	r18, Z+3	; 0x03
    34d2:	21 11       	cpse	r18, r1
    34d4:	0a c0       	rjmp	.+20     	; 0x34ea <_turn_off+0x32>
    34d6:	ef 01       	movw	r28, r30
    34d8:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <register_access+0x8>
    34dc:	f0 91 62 05 	lds	r31, 0x0562	; 0x800562 <register_access+0x9>
    34e0:	6a 81       	ldd	r22, Y+2	; 0x02
    34e2:	88 81       	ld	r24, Y
    34e4:	99 81       	ldd	r25, Y+1	; 0x01
    34e6:	19 95       	eicall
    34e8:	12 c0       	rjmp	.+36     	; 0x350e <_turn_off+0x56>
    34ea:	dc 01       	movw	r26, r24
    34ec:	aa 0f       	add	r26, r26
    34ee:	bb 1f       	adc	r27, r27
    34f0:	ed 01       	movw	r28, r26
    34f2:	c8 0f       	add	r28, r24
    34f4:	d9 1f       	adc	r29, r25
    34f6:	cc 0f       	add	r28, r28
    34f8:	dd 1f       	adc	r29, r29
    34fa:	cb 51       	subi	r28, 0x1B	; 27
    34fc:	db 4f       	sbci	r29, 0xFB	; 251
    34fe:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <register_access+0x12>
    3502:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <register_access+0x13>
    3506:	6a 81       	ldd	r22, Y+2	; 0x02
    3508:	88 81       	ld	r24, Y
    350a:	99 81       	ldd	r25, Y+1	; 0x01
    350c:	19 95       	eicall
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	08 95       	ret

00003514 <_turn_on>:
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	fc 01       	movw	r30, r24
    351c:	ee 0f       	add	r30, r30
    351e:	ff 1f       	adc	r31, r31
    3520:	e8 0f       	add	r30, r24
    3522:	f9 1f       	adc	r31, r25
    3524:	ee 0f       	add	r30, r30
    3526:	ff 1f       	adc	r31, r31
    3528:	eb 51       	subi	r30, 0x1B	; 27
    352a:	fb 4f       	sbci	r31, 0xFB	; 251
    352c:	23 81       	ldd	r18, Z+3	; 0x03
    352e:	21 11       	cpse	r18, r1
    3530:	0a c0       	rjmp	.+20     	; 0x3546 <_turn_on+0x32>
    3532:	ef 01       	movw	r28, r30
    3534:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <register_access+0x12>
    3538:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <register_access+0x13>
    353c:	6a 81       	ldd	r22, Y+2	; 0x02
    353e:	88 81       	ld	r24, Y
    3540:	99 81       	ldd	r25, Y+1	; 0x01
    3542:	19 95       	eicall
    3544:	12 c0       	rjmp	.+36     	; 0x356a <_turn_on+0x56>
    3546:	dc 01       	movw	r26, r24
    3548:	aa 0f       	add	r26, r26
    354a:	bb 1f       	adc	r27, r27
    354c:	ed 01       	movw	r28, r26
    354e:	c8 0f       	add	r28, r24
    3550:	d9 1f       	adc	r29, r25
    3552:	cc 0f       	add	r28, r28
    3554:	dd 1f       	adc	r29, r29
    3556:	cb 51       	subi	r28, 0x1B	; 27
    3558:	db 4f       	sbci	r29, 0xFB	; 251
    355a:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <register_access+0x8>
    355e:	f0 91 62 05 	lds	r31, 0x0562	; 0x800562 <register_access+0x9>
    3562:	6a 81       	ldd	r22, Y+2	; 0x02
    3564:	88 81       	ld	r24, Y
    3566:	99 81       	ldd	r25, Y+1	; 0x01
    3568:	19 95       	eicall
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	08 95       	ret

00003570 <_hal_led_task>:
    3570:	86 e3       	ldi	r24, 0x36	; 54
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	65 d7       	rcall	.+3786   	; 0x4440 <puts>
    3576:	0f 2e       	mov	r0, r31
    3578:	f9 e5       	ldi	r31, 0x59	; 89
    357a:	cf 2e       	mov	r12, r31
    357c:	f5 e0       	ldi	r31, 0x05	; 5
    357e:	df 2e       	mov	r13, r31
    3580:	f0 2d       	mov	r31, r0
    3582:	04 e0       	ldi	r16, 0x04	; 4
    3584:	c5 ee       	ldi	r28, 0xE5	; 229
    3586:	d4 e0       	ldi	r29, 0x04	; 4
    3588:	10 e0       	ldi	r17, 0x00	; 0
    358a:	8c 81       	ldd	r24, Y+4	; 0x04
    358c:	81 30       	cpi	r24, 0x01	; 1
    358e:	69 f0       	breq	.+26     	; 0x35aa <_hal_led_task+0x3a>
    3590:	e8 f0       	brcs	.+58     	; 0x35cc <_hal_led_task+0x5c>
    3592:	82 30       	cpi	r24, 0x02	; 2
    3594:	39 f5       	brne	.+78     	; 0x35e4 <_hal_led_task+0x74>
    3596:	d6 01       	movw	r26, r12
    3598:	1c 96       	adiw	r26, 0x0c	; 12
    359a:	ed 91       	ld	r30, X+
    359c:	fc 91       	ld	r31, X
    359e:	1d 97       	sbiw	r26, 0x0d	; 13
    35a0:	6a 81       	ldd	r22, Y+2	; 0x02
    35a2:	88 81       	ld	r24, Y
    35a4:	99 81       	ldd	r25, Y+1	; 0x01
    35a6:	19 95       	eicall
    35a8:	1d c0       	rjmp	.+58     	; 0x35e4 <_hal_led_task+0x74>
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	8f 5f       	subi	r24, 0xFF	; 255
    35ae:	8a 30       	cpi	r24, 0x0A	; 10
    35b0:	10 f4       	brcc	.+4      	; 0x35b6 <_hal_led_task+0x46>
    35b2:	8d 83       	std	Y+5, r24	; 0x05
    35b4:	17 c0       	rjmp	.+46     	; 0x35e4 <_hal_led_task+0x74>
    35b6:	1d 82       	std	Y+5, r1	; 0x05
    35b8:	d6 01       	movw	r26, r12
    35ba:	1c 96       	adiw	r26, 0x0c	; 12
    35bc:	ed 91       	ld	r30, X+
    35be:	fc 91       	ld	r31, X
    35c0:	1d 97       	sbiw	r26, 0x0d	; 13
    35c2:	6a 81       	ldd	r22, Y+2	; 0x02
    35c4:	88 81       	ld	r24, Y
    35c6:	99 81       	ldd	r25, Y+1	; 0x01
    35c8:	19 95       	eicall
    35ca:	0c c0       	rjmp	.+24     	; 0x35e4 <_hal_led_task+0x74>
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	88 23       	and	r24, r24
    35d0:	31 f0       	breq	.+12     	; 0x35de <_hal_led_task+0x6e>
    35d2:	81 2f       	mov	r24, r17
    35d4:	9f df       	rcall	.-194    	; 0x3514 <_turn_on>
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	81 50       	subi	r24, 0x01	; 1
    35da:	8d 83       	std	Y+5, r24	; 0x05
    35dc:	03 c0       	rjmp	.+6      	; 0x35e4 <_hal_led_task+0x74>
    35de:	0c 83       	std	Y+4, r16	; 0x04
    35e0:	81 2f       	mov	r24, r17
    35e2:	6a df       	rcall	.-300    	; 0x34b8 <_turn_off>
    35e4:	1f 5f       	subi	r17, 0xFF	; 255
    35e6:	26 96       	adiw	r28, 0x06	; 6
    35e8:	14 30       	cpi	r17, 0x04	; 4
    35ea:	79 f6       	brne	.-98     	; 0x358a <_hal_led_task+0x1a>
    35ec:	85 e0       	ldi	r24, 0x05	; 5
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <vTaskDelay>
    35f4:	c7 cf       	rjmp	.-114    	; 0x3584 <_hal_led_task+0x14>

000035f6 <led_create>:
    35f6:	cf 92       	push	r12
    35f8:	df 92       	push	r13
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	06 2f       	mov	r16, r22
    3608:	0f 2e       	mov	r0, r31
    360a:	f9 e5       	ldi	r31, 0x59	; 89
    360c:	ef 2e       	mov	r14, r31
    360e:	f5 e0       	ldi	r31, 0x05	; 5
    3610:	ff 2e       	mov	r15, r31
    3612:	f0 2d       	mov	r31, r0
    3614:	d7 01       	movw	r26, r14
    3616:	18 96       	adiw	r26, 0x08	; 8
    3618:	ed 91       	ld	r30, X+
    361a:	fc 91       	ld	r31, X
    361c:	19 97       	sbiw	r26, 0x09	; 9
    361e:	66 e0       	ldi	r22, 0x06	; 6
    3620:	87 e2       	ldi	r24, 0x27	; 39
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	19 95       	eicall
    3626:	c5 ee       	ldi	r28, 0xE5	; 229
    3628:	d4 e0       	ldi	r29, 0x04	; 4
    362a:	0f 2e       	mov	r0, r31
    362c:	f8 e2       	ldi	r31, 0x28	; 40
    362e:	cf 2e       	mov	r12, r31
    3630:	d1 2c       	mov	r13, r1
    3632:	f0 2d       	mov	r31, r0
    3634:	d9 82       	std	Y+1, r13	; 0x01
    3636:	c8 82       	st	Y, r12
    3638:	86 e0       	ldi	r24, 0x06	; 6
    363a:	8a 83       	std	Y+2, r24	; 0x02
    363c:	1b 82       	std	Y+3, r1	; 0x03
    363e:	14 e0       	ldi	r17, 0x04	; 4
    3640:	1c 83       	std	Y+4, r17	; 0x04
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	39 df       	rcall	.-398    	; 0x34b8 <_turn_off>
    3646:	d7 01       	movw	r26, r14
    3648:	18 96       	adiw	r26, 0x08	; 8
    364a:	ed 91       	ld	r30, X+
    364c:	fc 91       	ld	r31, X
    364e:	19 97       	sbiw	r26, 0x09	; 9
    3650:	67 e0       	ldi	r22, 0x07	; 7
    3652:	87 e2       	ldi	r24, 0x27	; 39
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	19 95       	eicall
    3658:	df 82       	std	Y+7, r13	; 0x07
    365a:	ce 82       	std	Y+6, r12	; 0x06
    365c:	87 e0       	ldi	r24, 0x07	; 7
    365e:	88 87       	std	Y+8, r24	; 0x08
    3660:	19 86       	std	Y+9, r1	; 0x09
    3662:	1a 87       	std	Y+10, r17	; 0x0a
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	28 df       	rcall	.-432    	; 0x34b8 <_turn_off>
    3668:	d7 01       	movw	r26, r14
    366a:	18 96       	adiw	r26, 0x08	; 8
    366c:	ed 91       	ld	r30, X+
    366e:	fc 91       	ld	r31, X
    3670:	19 97       	sbiw	r26, 0x09	; 9
    3672:	65 e0       	ldi	r22, 0x05	; 5
    3674:	83 e3       	ldi	r24, 0x33	; 51
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	19 95       	eicall
    367a:	d7 01       	movw	r26, r14
    367c:	18 96       	adiw	r26, 0x08	; 8
    367e:	ed 91       	ld	r30, X+
    3680:	fc 91       	ld	r31, X
    3682:	19 97       	sbiw	r26, 0x09	; 9
    3684:	61 e0       	ldi	r22, 0x01	; 1
    3686:	84 e3       	ldi	r24, 0x34	; 52
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	19 95       	eicall
    368c:	84 e3       	ldi	r24, 0x34	; 52
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	9d 87       	std	Y+13, r25	; 0x0d
    3692:	8c 87       	std	Y+12, r24	; 0x0c
    3694:	85 e0       	ldi	r24, 0x05	; 5
    3696:	8e 87       	std	Y+14, r24	; 0x0e
    3698:	1f 86       	std	Y+15, r1	; 0x0f
    369a:	18 8b       	std	Y+16, r17	; 0x10
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	0c df       	rcall	.-488    	; 0x34b8 <_turn_off>
    36a0:	d7 01       	movw	r26, r14
    36a2:	18 96       	adiw	r26, 0x08	; 8
    36a4:	ed 91       	ld	r30, X+
    36a6:	fc 91       	ld	r31, X
    36a8:	19 97       	sbiw	r26, 0x09	; 9
    36aa:	64 e0       	ldi	r22, 0x04	; 4
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	19 95       	eicall
    36b2:	d7 01       	movw	r26, r14
    36b4:	18 96       	adiw	r26, 0x08	; 8
    36b6:	ed 91       	ld	r30, X+
    36b8:	fc 91       	ld	r31, X
    36ba:	19 97       	sbiw	r26, 0x09	; 9
    36bc:	61 e0       	ldi	r22, 0x01	; 1
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	91 e0       	ldi	r25, 0x01	; 1
    36c2:	19 95       	eicall
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	91 e0       	ldi	r25, 0x01	; 1
    36c8:	9b 8b       	std	Y+19, r25	; 0x13
    36ca:	8a 8b       	std	Y+18, r24	; 0x12
    36cc:	1c 8b       	std	Y+20, r17	; 0x14
    36ce:	1d 8a       	std	Y+21, r1	; 0x15
    36d0:	1e 8b       	std	Y+22, r17	; 0x16
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	f1 de       	rcall	.-542    	; 0x34b8 <_turn_off>
    36d6:	e1 2c       	mov	r14, r1
    36d8:	f1 2c       	mov	r15, r1
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 ec       	ldi	r20, 0xC0	; 192
    36e0:	50 e0       	ldi	r21, 0x00	; 0
    36e2:	6d e4       	ldi	r22, 0x4D	; 77
    36e4:	74 e0       	ldi	r23, 0x04	; 4
    36e6:	88 eb       	ldi	r24, 0xB8	; 184
    36e8:	9a e1       	ldi	r25, 0x1A	; 26
    36ea:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <xTaskCreate>
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	df 90       	pop	r13
    36fc:	cf 90       	pop	r12
    36fe:	08 95       	ret

00003700 <_serial_call_back>:
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	1f 92       	push	r1
    370a:	1f 92       	push	r1
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	8c 01       	movw	r16, r24
    3712:	19 82       	std	Y+1, r1	; 0x01
    3714:	2d c0       	rjmp	.+90     	; 0x3770 <_serial_call_back+0x70>
    3716:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <rec_buf_inp.2926>
    371a:	ec 32       	cpi	r30, 0x2C	; 44
    371c:	50 f4       	brcc	.+20     	; 0x3732 <_serial_call_back+0x32>
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	8e 0f       	add	r24, r30
    3722:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <rec_buf_inp.2926>
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	ee 5f       	subi	r30, 0xFE	; 254
    372a:	fa 4f       	sbci	r31, 0xFA	; 250
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	80 83       	st	Z, r24
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <_serial_call_back+0x36>
    3732:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <rec_buf_inp.2926>
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	8a 30       	cpi	r24, 0x0A	; 10
    373a:	d1 f4       	brne	.+52     	; 0x3770 <_serial_call_back+0x70>
    373c:	40 91 fd 04 	lds	r20, 0x04FD	; 0x8004fd <rec_buf_inp.2926>
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	fa 01       	movw	r30, r20
    3744:	e0 50       	subi	r30, 0x00	; 0
    3746:	fb 4f       	sbci	r31, 0xFB	; 251
    3748:	10 82       	st	Z, r1
    374a:	41 50       	subi	r20, 0x01	; 1
    374c:	51 09       	sbc	r21, r1
    374e:	9e 01       	movw	r18, r28
    3750:	2f 5f       	subi	r18, 0xFF	; 255
    3752:	3f 4f       	sbci	r19, 0xFF	; 255
    3754:	62 e0       	ldi	r22, 0x02	; 2
    3756:	75 e0       	ldi	r23, 0x05	; 5
    3758:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <_reply_buffer_handle>
    375c:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <_reply_buffer_handle+0x1>
    3760:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <xStreamBufferSendFromISR>
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	81 11       	cpse	r24, r1
    3768:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vPortYield>
    376c:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <rec_buf_inp.2926>
    3770:	be 01       	movw	r22, r28
    3772:	6e 5f       	subi	r22, 0xFE	; 254
    3774:	7f 4f       	sbci	r23, 0xFF	; 255
    3776:	c8 01       	movw	r24, r16
    3778:	52 db       	rcall	.-2396   	; 0x2e1e <serial_get_byte>
    377a:	88 23       	and	r24, r24
    377c:	61 f2       	breq	.-104    	; 0x3716 <_serial_call_back+0x16>
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	08 95       	ret

0000378c <lora_driver_create>:
    378c:	8f 92       	push	r8
    378e:	9f 92       	push	r9
    3790:	af 92       	push	r10
    3792:	cf 92       	push	r12
    3794:	ef 92       	push	r14
    3796:	0f 93       	push	r16
    3798:	cf 93       	push	r28
    379a:	c8 2f       	mov	r28, r24
    379c:	41 e0       	ldi	r20, 0x01	; 1
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	88 ec       	ldi	r24, 0xC8	; 200
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0e 94 10 0b 	call	0x1620	; 0x1620 <xStreamBufferGenericCreate>
    37aa:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <_reply_buffer_handle+0x1>
    37ae:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_reply_buffer_handle>
    37b2:	0f 2e       	mov	r0, r31
    37b4:	f0 e8       	ldi	r31, 0x80	; 128
    37b6:	8f 2e       	mov	r8, r31
    37b8:	fb e1       	ldi	r31, 0x1B	; 27
    37ba:	9f 2e       	mov	r9, r31
    37bc:	f0 2d       	mov	r31, r0
    37be:	68 94       	set
    37c0:	aa 24       	eor	r10, r10
    37c2:	a6 f8       	bld	r10, 6
    37c4:	68 94       	set
    37c6:	cc 24       	eor	r12, r12
    37c8:	c6 f8       	bld	r12, 6
    37ca:	e1 2c       	mov	r14, r1
    37cc:	00 e0       	ldi	r16, 0x00	; 0
    37ce:	23 e0       	ldi	r18, 0x03	; 3
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	51 ee       	ldi	r21, 0xE1	; 225
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	70 e0       	ldi	r23, 0x00	; 0
    37d8:	8c 2f       	mov	r24, r28
    37da:	0c da       	rcall	.-3048   	; 0x2bf4 <serial_new_instance>
    37dc:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_rn2483_serial+0x1>
    37e0:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_rn2483_serial>
    37e4:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <register_access+0x8>
    37e8:	f0 91 62 05 	lds	r31, 0x0562	; 0x800562 <register_access+0x9>
    37ec:	64 e0       	ldi	r22, 0x04	; 4
    37ee:	87 e0       	ldi	r24, 0x07	; 7
    37f0:	91 e0       	ldi	r25, 0x01	; 1
    37f2:	19 95       	eicall
    37f4:	cf 91       	pop	r28
    37f6:	0f 91       	pop	r16
    37f8:	ef 90       	pop	r14
    37fa:	cf 90       	pop	r12
    37fc:	af 90       	pop	r10
    37fe:	9f 90       	pop	r9
    3800:	8f 90       	pop	r8
    3802:	08 95       	ret

00003804 <reg_read_register>:
    3804:	fc 01       	movw	r30, r24
    3806:	80 81       	ld	r24, Z
    3808:	08 95       	ret

0000380a <reg_read_bit>:
    380a:	fc 01       	movw	r30, r24
    380c:	20 81       	ld	r18, Z
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <reg_read_bit+0xe>
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	6a 95       	dec	r22
    381a:	e2 f7       	brpl	.-8      	; 0x3814 <reg_read_bit+0xa>
    381c:	82 23       	and	r24, r18
    381e:	08 95       	ret

00003820 <reg_read_bits>:
    3820:	fc 01       	movw	r30, r24
    3822:	80 81       	ld	r24, Z
    3824:	86 23       	and	r24, r22
    3826:	08 95       	ret

00003828 <reg_set_register>:
    3828:	fc 01       	movw	r30, r24
    382a:	60 83       	st	Z, r22
    382c:	08 95       	ret

0000382e <reg_clear_register>:
    382e:	fc 01       	movw	r30, r24
    3830:	10 82       	st	Z, r1
    3832:	08 95       	ret

00003834 <reg_set_bit>:
    3834:	fc 01       	movw	r30, r24
    3836:	40 81       	ld	r20, Z
    3838:	21 e0       	ldi	r18, 0x01	; 1
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <reg_set_bit+0xe>
    383e:	22 0f       	add	r18, r18
    3840:	33 1f       	adc	r19, r19
    3842:	6a 95       	dec	r22
    3844:	e2 f7       	brpl	.-8      	; 0x383e <reg_set_bit+0xa>
    3846:	24 2b       	or	r18, r20
    3848:	20 83       	st	Z, r18
    384a:	08 95       	ret

0000384c <reg_set_bits>:
    384c:	fc 01       	movw	r30, r24
    384e:	20 81       	ld	r18, Z
    3850:	62 2b       	or	r22, r18
    3852:	60 83       	st	Z, r22
    3854:	08 95       	ret

00003856 <reg_toggle_bit>:
    3856:	fc 01       	movw	r30, r24
    3858:	40 81       	ld	r20, Z
    385a:	21 e0       	ldi	r18, 0x01	; 1
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	02 c0       	rjmp	.+4      	; 0x3864 <reg_toggle_bit+0xe>
    3860:	22 0f       	add	r18, r18
    3862:	33 1f       	adc	r19, r19
    3864:	6a 95       	dec	r22
    3866:	e2 f7       	brpl	.-8      	; 0x3860 <reg_toggle_bit+0xa>
    3868:	24 27       	eor	r18, r20
    386a:	20 83       	st	Z, r18
    386c:	08 95       	ret

0000386e <reg_toggle_bits>:
    386e:	fc 01       	movw	r30, r24
    3870:	20 81       	ld	r18, Z
    3872:	62 27       	eor	r22, r18
    3874:	60 83       	st	Z, r22
    3876:	08 95       	ret

00003878 <reg_clear_bit>:
    3878:	fc 01       	movw	r30, r24
    387a:	90 81       	ld	r25, Z
    387c:	21 e0       	ldi	r18, 0x01	; 1
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <reg_clear_bit+0xe>
    3882:	22 0f       	add	r18, r18
    3884:	33 1f       	adc	r19, r19
    3886:	6a 95       	dec	r22
    3888:	e2 f7       	brpl	.-8      	; 0x3882 <reg_clear_bit+0xa>
    388a:	20 95       	com	r18
    388c:	29 23       	and	r18, r25
    388e:	20 83       	st	Z, r18
    3890:	08 95       	ret

00003892 <reg_clear_bits>:
    3892:	fc 01       	movw	r30, r24
    3894:	90 81       	ld	r25, Z
    3896:	60 95       	com	r22
    3898:	69 23       	and	r22, r25
    389a:	60 83       	st	Z, r22
    389c:	08 95       	ret

0000389e <_serial_call_back>:
    389e:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <crc_sum.1941>
    38a2:	86 0f       	add	r24, r22
    38a4:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <crc_sum.1941>
    38a8:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <_mh_state>
    38ac:	91 30       	cpi	r25, 0x01	; 1
    38ae:	79 f0       	breq	.+30     	; 0x38ce <_serial_call_back+0x30>
    38b0:	28 f0       	brcs	.+10     	; 0x38bc <_serial_call_back+0x1e>
    38b2:	92 30       	cpi	r25, 0x02	; 2
    38b4:	a9 f0       	breq	.+42     	; 0x38e0 <_serial_call_back+0x42>
    38b6:	93 30       	cpi	r25, 0x03	; 3
    38b8:	19 f1       	breq	.+70     	; 0x3900 <_serial_call_back+0x62>
    38ba:	08 95       	ret
    38bc:	6f 3f       	cpi	r22, 0xFF	; 255
    38be:	09 f0       	breq	.+2      	; 0x38c2 <_serial_call_back+0x24>
    38c0:	48 c0       	rjmp	.+144    	; 0x3952 <_serial_call_back+0xb4>
    38c2:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <crc_sum.1941>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <_mh_state>
    38cc:	08 95       	ret
    38ce:	66 38       	cpi	r22, 0x86	; 134
    38d0:	09 f0       	breq	.+2      	; 0x38d4 <_serial_call_back+0x36>
    38d2:	3f c0       	rjmp	.+126    	; 0x3952 <_serial_call_back+0xb4>
    38d4:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <inDex.1939>
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <_mh_state>
    38de:	08 95       	ret
    38e0:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <inDex.1939>
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	8e 0f       	add	r24, r30
    38e8:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <inDex.1939>
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	e1 5d       	subi	r30, 0xD1	; 209
    38f0:	fa 4f       	sbci	r31, 0xFA	; 250
    38f2:	60 83       	st	Z, r22
    38f4:	82 30       	cpi	r24, 0x02	; 2
    38f6:	69 f5       	brne	.+90     	; 0x3952 <_serial_call_back+0xb4>
    38f8:	83 e0       	ldi	r24, 0x03	; 3
    38fa:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <_mh_state>
    38fe:	08 95       	ret
    3900:	90 91 31 05 	lds	r25, 0x0531	; 0x800531 <inDex.1939>
    3904:	21 e0       	ldi	r18, 0x01	; 1
    3906:	29 0f       	add	r18, r25
    3908:	20 93 31 05 	sts	0x0531, r18	; 0x800531 <inDex.1939>
    390c:	96 30       	cpi	r25, 0x06	; 6
    390e:	09 f5       	brne	.+66     	; 0x3952 <_serial_call_back+0xb4>
    3910:	81 11       	cpse	r24, r1
    3912:	0e c0       	rjmp	.+28     	; 0x3930 <_serial_call_back+0x92>
    3914:	ef e2       	ldi	r30, 0x2F	; 47
    3916:	f5 e0       	ldi	r31, 0x05	; 5
    3918:	80 81       	ld	r24, Z
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	98 2f       	mov	r25, r24
    391e:	88 27       	eor	r24, r24
    3920:	21 81       	ldd	r18, Z+1	; 0x01
    3922:	82 0f       	add	r24, r18
    3924:	91 1d       	adc	r25, r1
    3926:	90 93 37 05 	sts	0x0537, r25	; 0x800537 <_ppm+0x1>
    392a:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <_ppm>
    392e:	04 c0       	rjmp	.+8      	; 0x3938 <_serial_call_back+0x9a>
    3930:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <_ppm+0x1>
    3934:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <_ppm>
    3938:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <_mh_state>
    393c:	e0 91 33 05 	lds	r30, 0x0533	; 0x800533 <_app_call_back>
    3940:	f0 91 34 05 	lds	r31, 0x0534	; 0x800534 <_app_call_back+0x1>
    3944:	30 97       	sbiw	r30, 0x00	; 0
    3946:	29 f0       	breq	.+10     	; 0x3952 <_serial_call_back+0xb4>
    3948:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_ppm>
    394c:	90 91 37 05 	lds	r25, 0x0537	; 0x800537 <_ppm+0x1>
    3950:	19 95       	eicall
    3952:	08 95       	ret

00003954 <mh_z19_create>:
    3954:	8f 92       	push	r8
    3956:	9f 92       	push	r9
    3958:	af 92       	push	r10
    395a:	cf 92       	push	r12
    395c:	ef 92       	push	r14
    395e:	0f 93       	push	r16
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	eb 01       	movw	r28, r22
    3966:	0f 2e       	mov	r0, r31
    3968:	ff e4       	ldi	r31, 0x4F	; 79
    396a:	8f 2e       	mov	r8, r31
    396c:	fc e1       	ldi	r31, 0x1C	; 28
    396e:	9f 2e       	mov	r9, r31
    3970:	f0 2d       	mov	r31, r0
    3972:	68 94       	set
    3974:	aa 24       	eor	r10, r10
    3976:	a4 f8       	bld	r10, 4
    3978:	68 94       	set
    397a:	cc 24       	eor	r12, r12
    397c:	c4 f8       	bld	r12, 4
    397e:	e1 2c       	mov	r14, r1
    3980:	00 e0       	ldi	r16, 0x00	; 0
    3982:	23 e0       	ldi	r18, 0x03	; 3
    3984:	40 e8       	ldi	r20, 0x80	; 128
    3986:	55 e2       	ldi	r21, 0x25	; 37
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	33 d9       	rcall	.-3482   	; 0x2bf4 <serial_new_instance>
    398e:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <_serial+0x1>
    3992:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <_serial>
    3996:	d0 93 34 05 	sts	0x0534, r29	; 0x800534 <_app_call_back+0x1>
    399a:	c0 93 33 05 	sts	0x0533, r28	; 0x800533 <_app_call_back>
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	0f 91       	pop	r16
    39a4:	ef 90       	pop	r14
    39a6:	cf 90       	pop	r12
    39a8:	af 90       	pop	r10
    39aa:	9f 90       	pop	r9
    39ac:	8f 90       	pop	r8
    39ae:	08 95       	ret

000039b0 <mh_z19_take_meassuring>:
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	29 97       	sbiw	r28, 0x09	; 9
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	89 e0       	ldi	r24, 0x09	; 9
    39c6:	e1 e2       	ldi	r30, 0x21	; 33
    39c8:	f2 e0       	ldi	r31, 0x02	; 2
    39ca:	9e 01       	movw	r18, r28
    39cc:	2f 5f       	subi	r18, 0xFF	; 255
    39ce:	3f 4f       	sbci	r19, 0xFF	; 255
    39d0:	d9 01       	movw	r26, r18
    39d2:	01 90       	ld	r0, Z+
    39d4:	0d 92       	st	X+, r0
    39d6:	8a 95       	dec	r24
    39d8:	e1 f7       	brne	.-8      	; 0x39d2 <mh_z19_take_meassuring+0x22>
    39da:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <_ppm+0x1>
    39de:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <_ppm>
    39e2:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <_serial>
    39e6:	90 91 39 05 	lds	r25, 0x0539	; 0x800539 <_serial+0x1>
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	31 f0       	breq	.+12     	; 0x39fa <mh_z19_take_meassuring+0x4a>
    39ee:	42 2f       	mov	r20, r18
    39f0:	53 2f       	mov	r21, r19
    39f2:	69 e0       	ldi	r22, 0x09	; 9
    39f4:	c4 d9       	rcall	.-3192   	; 0x2d7e <serial_send_bytes>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	01 c0       	rjmp	.+2      	; 0x39fc <mh_z19_take_meassuring+0x4c>
    39fa:	82 e0       	ldi	r24, 0x02	; 2
    39fc:	29 96       	adiw	r28, 0x09	; 9
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	08 95       	ret

00003a0e <_initTwiInterface>:
    3a0e:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <_twiIsInitiated>
    3a12:	81 11       	cpse	r24, r1
    3a14:	0c c0       	rjmp	.+24     	; 0x3a2e <_initTwiInterface+0x20>
    3a16:	8c e0       	ldi	r24, 0x0C	; 12
    3a18:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3a1c:	8f ef       	ldi	r24, 0xFF	; 255
    3a1e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a22:	84 e0       	ldi	r24, 0x04	; 4
    3a24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <_twiIsInitiated>
    3a2e:	08 95       	ret

00003a30 <twiCreate>:
    3a30:	af 92       	push	r10
    3a32:	bf 92       	push	r11
    3a34:	cf 92       	push	r12
    3a36:	df 92       	push	r13
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	a8 2e       	mov	r10, r24
    3a46:	b6 2e       	mov	r11, r22
    3a48:	69 01       	movw	r12, r18
    3a4a:	7a 01       	movw	r14, r20
    3a4c:	84 e0       	ldi	r24, 0x04	; 4
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	af d3       	rcall	.+1886   	; 0x41b0 <malloc>
    3a52:	ec 01       	movw	r28, r24
    3a54:	89 2b       	or	r24, r25
    3a56:	61 f1       	breq	.+88     	; 0x3ab0 <twiCreate+0x80>
    3a58:	a8 82       	st	Y, r10
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	b8 12       	cpse	r11, r24
    3a5e:	12 c0       	rjmp	.+36     	; 0x3a84 <twiCreate+0x54>
    3a60:	c7 01       	movw	r24, r14
    3a62:	b6 01       	movw	r22, r12
    3a64:	20 ea       	ldi	r18, 0xA0	; 160
    3a66:	36 e8       	ldi	r19, 0x86	; 134
    3a68:	41 e0       	ldi	r20, 0x01	; 1
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	6e d1       	rcall	.+732    	; 0x3d4a <__udivmodsi4>
    3a6e:	da 01       	movw	r26, r20
    3a70:	c9 01       	movw	r24, r18
    3a72:	40 97       	sbiw	r24, 0x10	; 16
    3a74:	a1 09       	sbc	r26, r1
    3a76:	b1 09       	sbc	r27, r1
    3a78:	b6 95       	lsr	r27
    3a7a:	a7 95       	ror	r26
    3a7c:	97 95       	ror	r25
    3a7e:	87 95       	ror	r24
    3a80:	89 83       	std	Y+1, r24	; 0x01
    3a82:	11 c0       	rjmp	.+34     	; 0x3aa6 <twiCreate+0x76>
    3a84:	c7 01       	movw	r24, r14
    3a86:	b6 01       	movw	r22, r12
    3a88:	20 e8       	ldi	r18, 0x80	; 128
    3a8a:	3a e1       	ldi	r19, 0x1A	; 26
    3a8c:	46 e0       	ldi	r20, 0x06	; 6
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	5c d1       	rcall	.+696    	; 0x3d4a <__udivmodsi4>
    3a92:	da 01       	movw	r26, r20
    3a94:	c9 01       	movw	r24, r18
    3a96:	40 97       	sbiw	r24, 0x10	; 16
    3a98:	a1 09       	sbc	r26, r1
    3a9a:	b1 09       	sbc	r27, r1
    3a9c:	b6 95       	lsr	r27
    3a9e:	a7 95       	ror	r26
    3aa0:	97 95       	ror	r25
    3aa2:	87 95       	ror	r24
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	1b 83       	std	Y+3, r17	; 0x03
    3aa8:	0a 83       	std	Y+2, r16	; 0x02
    3aaa:	8c 2f       	mov	r24, r28
    3aac:	9d 2f       	mov	r25, r29
    3aae:	02 c0       	rjmp	.+4      	; 0x3ab4 <twiCreate+0x84>
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	df 90       	pop	r13
    3ac2:	cf 90       	pop	r12
    3ac4:	bf 90       	pop	r11
    3ac6:	af 90       	pop	r10
    3ac8:	08 95       	ret

00003aca <twiIsBusy>:
    3aca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3ace:	81 70       	andi	r24, 0x01	; 1
    3ad0:	08 95       	ret

00003ad2 <twiTransmit>:
    3ad2:	ff 92       	push	r15
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	d1 f1       	breq	.+116    	; 0x3b54 <twiTransmit+0x82>
    3ae0:	4a 30       	cpi	r20, 0x0A	; 10
    3ae2:	d0 f5       	brcc	.+116    	; 0x3b58 <twiTransmit+0x86>
    3ae4:	f4 2e       	mov	r15, r20
    3ae6:	8b 01       	movw	r16, r22
    3ae8:	ec 01       	movw	r28, r24
    3aea:	ef df       	rcall	.-34     	; 0x3aca <twiIsBusy>
    3aec:	81 11       	cpse	r24, r1
    3aee:	36 c0       	rjmp	.+108    	; 0x3b5c <twiTransmit+0x8a>
    3af0:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <_twiCurrentHandler>
    3af4:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <_twiCurrentHandler+0x1>
    3af8:	c8 17       	cp	r28, r24
    3afa:	d9 07       	cpc	r29, r25
    3afc:	41 f0       	breq	.+16     	; 0x3b0e <twiTransmit+0x3c>
    3afe:	87 df       	rcall	.-242    	; 0x3a0e <_initTwiInterface>
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3b06:	d0 93 3c 05 	sts	0x053C, r29	; 0x80053c <_twiCurrentHandler+0x1>
    3b0a:	c0 93 3b 05 	sts	0x053B, r28	; 0x80053b <_twiCurrentHandler>
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	8f 0d       	add	r24, r15
    3b12:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <_twiMessageLen>
    3b16:	88 81       	ld	r24, Y
    3b18:	88 0f       	add	r24, r24
    3b1a:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <_twiMessageBuffer>
    3b1e:	ff 20       	and	r15, r15
    3b20:	89 f0       	breq	.+34     	; 0x3b44 <twiTransmit+0x72>
    3b22:	f8 01       	movw	r30, r16
    3b24:	af e3       	ldi	r26, 0x3F	; 63
    3b26:	b5 e0       	ldi	r27, 0x05	; 5
    3b28:	4f ef       	ldi	r20, 0xFF	; 255
    3b2a:	4f 0d       	add	r20, r15
    3b2c:	64 2f       	mov	r22, r20
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	cb 01       	movw	r24, r22
    3b32:	01 96       	adiw	r24, 0x01	; 1
    3b34:	b8 01       	movw	r22, r16
    3b36:	68 0f       	add	r22, r24
    3b38:	79 1f       	adc	r23, r25
    3b3a:	81 91       	ld	r24, Z+
    3b3c:	8d 93       	st	X+, r24
    3b3e:	e6 17       	cp	r30, r22
    3b40:	f7 07       	cpc	r31, r23
    3b42:	d9 f7       	brne	.-10     	; 0x3b3a <twiTransmit+0x68>
    3b44:	88 ef       	ldi	r24, 0xF8	; 248
    3b46:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    3b4a:	85 ea       	ldi	r24, 0xA5	; 165
    3b4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3b50:	84 e0       	ldi	r24, 0x04	; 4
    3b52:	05 c0       	rjmp	.+10     	; 0x3b5e <twiTransmit+0x8c>
    3b54:	86 e0       	ldi	r24, 0x06	; 6
    3b56:	03 c0       	rjmp	.+6      	; 0x3b5e <twiTransmit+0x8c>
    3b58:	87 e0       	ldi	r24, 0x07	; 7
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <twiTransmit+0x8c>
    3b5c:	82 e0       	ldi	r24, 0x02	; 2
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	08 95       	ret

00003b6a <twiReceive>:
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	00 97       	sbiw	r24, 0x00	; 0
    3b72:	29 f1       	breq	.+74     	; 0x3bbe <twiReceive+0x54>
    3b74:	6b 30       	cpi	r22, 0x0B	; 11
    3b76:	28 f5       	brcc	.+74     	; 0x3bc2 <twiReceive+0x58>
    3b78:	16 2f       	mov	r17, r22
    3b7a:	ec 01       	movw	r28, r24
    3b7c:	a6 df       	rcall	.-180    	; 0x3aca <twiIsBusy>
    3b7e:	81 11       	cpse	r24, r1
    3b80:	22 c0       	rjmp	.+68     	; 0x3bc6 <twiReceive+0x5c>
    3b82:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <_twiCurrentHandler>
    3b86:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <_twiCurrentHandler+0x1>
    3b8a:	c8 17       	cp	r28, r24
    3b8c:	d9 07       	cpc	r29, r25
    3b8e:	41 f0       	breq	.+16     	; 0x3ba0 <twiReceive+0x36>
    3b90:	3e df       	rcall	.-388    	; 0x3a0e <_initTwiInterface>
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3b98:	d0 93 3c 05 	sts	0x053C, r29	; 0x80053c <_twiCurrentHandler+0x1>
    3b9c:	c0 93 3b 05 	sts	0x053B, r28	; 0x80053b <_twiCurrentHandler>
    3ba0:	10 93 3d 05 	sts	0x053D, r17	; 0x80053d <_twiMessageLen>
    3ba4:	88 81       	ld	r24, Y
    3ba6:	88 0f       	add	r24, r24
    3ba8:	81 60       	ori	r24, 0x01	; 1
    3baa:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <_twiMessageBuffer>
    3bae:	88 ef       	ldi	r24, 0xF8	; 248
    3bb0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    3bb4:	85 ea       	ldi	r24, 0xA5	; 165
    3bb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3bba:	85 e0       	ldi	r24, 0x05	; 5
    3bbc:	05 c0       	rjmp	.+10     	; 0x3bc8 <twiReceive+0x5e>
    3bbe:	86 e0       	ldi	r24, 0x06	; 6
    3bc0:	03 c0       	rjmp	.+6      	; 0x3bc8 <twiReceive+0x5e>
    3bc2:	87 e0       	ldi	r24, 0x07	; 7
    3bc4:	01 c0       	rjmp	.+2      	; 0x3bc8 <twiReceive+0x5e>
    3bc6:	82 e0       	ldi	r24, 0x02	; 2
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	1f 91       	pop	r17
    3bce:	08 95       	ret

00003bd0 <__vector_39>:
    3bd0:	1f 92       	push	r1
    3bd2:	0f 92       	push	r0
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	0f 92       	push	r0
    3bd8:	11 24       	eor	r1, r1
    3bda:	0b b6       	in	r0, 0x3b	; 59
    3bdc:	0f 92       	push	r0
    3bde:	2f 93       	push	r18
    3be0:	3f 93       	push	r19
    3be2:	4f 93       	push	r20
    3be4:	5f 93       	push	r21
    3be6:	6f 93       	push	r22
    3be8:	7f 93       	push	r23
    3bea:	8f 93       	push	r24
    3bec:	9f 93       	push	r25
    3bee:	af 93       	push	r26
    3bf0:	bf 93       	push	r27
    3bf2:	ef 93       	push	r30
    3bf4:	ff 93       	push	r31
    3bf6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3bfa:	8e 2f       	mov	r24, r30
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	fc 01       	movw	r30, r24
    3c00:	38 97       	sbiw	r30, 0x08	; 8
    3c02:	e1 35       	cpi	r30, 0x51	; 81
    3c04:	f1 05       	cpc	r31, r1
    3c06:	08 f0       	brcs	.+2      	; 0x3c0a <__vector_39+0x3a>
    3c08:	75 c0       	rjmp	.+234    	; 0x3cf4 <__vector_39+0x124>
    3c0a:	88 27       	eor	r24, r24
    3c0c:	e4 58       	subi	r30, 0x84	; 132
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	8f 4f       	sbci	r24, 0xFF	; 255
    3c12:	bd c0       	rjmp	.+378    	; 0x3d8e <__tablejump2__>
    3c14:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <_index.1885>
    3c18:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <_index.1885>
    3c1c:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <_twiMessageLen>
    3c20:	e8 17       	cp	r30, r24
    3c22:	70 f4       	brcc	.+28     	; 0x3c40 <__vector_39+0x70>
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	8e 0f       	add	r24, r30
    3c28:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <_index.1885>
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	e2 5c       	subi	r30, 0xC2	; 194
    3c30:	fa 4f       	sbci	r31, 0xFA	; 250
    3c32:	80 81       	ld	r24, Z
    3c34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3c38:	85 e8       	ldi	r24, 0x85	; 133
    3c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3c3e:	72 c0       	rjmp	.+228    	; 0x3d24 <__vector_39+0x154>
    3c40:	84 e9       	ldi	r24, 0x94	; 148
    3c42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3c46:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <_twiCurrentHandler>
    3c4a:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <_twiCurrentHandler+0x1>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	12 96       	adiw	r26, 0x02	; 2
    3c52:	ed 91       	ld	r30, X+
    3c54:	fc 91       	ld	r31, X
    3c56:	13 97       	sbiw	r26, 0x03	; 3
    3c58:	30 97       	sbiw	r30, 0x00	; 0
    3c5a:	09 f4       	brne	.+2      	; 0x3c5e <__vector_39+0x8e>
    3c5c:	63 c0       	rjmp	.+198    	; 0x3d24 <__vector_39+0x154>
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	40 e0       	ldi	r20, 0x00	; 0
    3c62:	50 e0       	ldi	r21, 0x00	; 0
    3c64:	64 e0       	ldi	r22, 0x04	; 4
    3c66:	19 95       	eicall
    3c68:	5d c0       	rjmp	.+186    	; 0x3d24 <__vector_39+0x154>
    3c6a:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <_index.1885>
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	8e 0f       	add	r24, r30
    3c72:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <_index.1885>
    3c76:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	e2 5c       	subi	r30, 0xC2	; 194
    3c7e:	fa 4f       	sbci	r31, 0xFA	; 250
    3c80:	80 83       	st	Z, r24
    3c82:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3c86:	80 34       	cpi	r24, 0x40	; 64
    3c88:	11 f4       	brne	.+4      	; 0x3c8e <__vector_39+0xbe>
    3c8a:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <_index.1885>
    3c8e:	20 91 3a 05 	lds	r18, 0x053A	; 0x80053a <_index.1885>
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <_twiMessageLen>
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	01 97       	sbiw	r24, 0x01	; 1
    3c9c:	28 17       	cp	r18, r24
    3c9e:	39 07       	cpc	r19, r25
    3ca0:	24 f4       	brge	.+8      	; 0x3caa <__vector_39+0xda>
    3ca2:	85 ec       	ldi	r24, 0xC5	; 197
    3ca4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3ca8:	3d c0       	rjmp	.+122    	; 0x3d24 <__vector_39+0x154>
    3caa:	85 e8       	ldi	r24, 0x85	; 133
    3cac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3cb0:	39 c0       	rjmp	.+114    	; 0x3d24 <__vector_39+0x154>
    3cb2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3cb6:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <_index.1885>
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	e2 5c       	subi	r30, 0xC2	; 194
    3cbe:	fa 4f       	sbci	r31, 0xFA	; 250
    3cc0:	80 83       	st	Z, r24
    3cc2:	84 e9       	ldi	r24, 0x94	; 148
    3cc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3cc8:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <_twiCurrentHandler>
    3ccc:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <_twiCurrentHandler+0x1>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	12 96       	adiw	r26, 0x02	; 2
    3cd4:	ed 91       	ld	r30, X+
    3cd6:	fc 91       	ld	r31, X
    3cd8:	13 97       	sbiw	r26, 0x03	; 3
    3cda:	30 97       	sbiw	r30, 0x00	; 0
    3cdc:	19 f1       	breq	.+70     	; 0x3d24 <__vector_39+0x154>
    3cde:	20 91 3d 05 	lds	r18, 0x053D	; 0x80053d <_twiMessageLen>
    3ce2:	4e e3       	ldi	r20, 0x3E	; 62
    3ce4:	55 e0       	ldi	r21, 0x05	; 5
    3ce6:	65 e0       	ldi	r22, 0x05	; 5
    3ce8:	19 95       	eicall
    3cea:	1c c0       	rjmp	.+56     	; 0x3d24 <__vector_39+0x154>
    3cec:	85 ea       	ldi	r24, 0xA5	; 165
    3cee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3cf2:	18 c0       	rjmp	.+48     	; 0x3d24 <__vector_39+0x154>
    3cf4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3cf8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    3cfc:	84 e0       	ldi	r24, 0x04	; 4
    3cfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d02:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <_twiCurrentHandler>
    3d06:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <_twiCurrentHandler+0x1>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	12 96       	adiw	r26, 0x02	; 2
    3d0e:	ed 91       	ld	r30, X+
    3d10:	fc 91       	ld	r31, X
    3d12:	13 97       	sbiw	r26, 0x03	; 3
    3d14:	30 97       	sbiw	r30, 0x00	; 0
    3d16:	31 f0       	breq	.+12     	; 0x3d24 <__vector_39+0x154>
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    3d22:	19 95       	eicall
    3d24:	ff 91       	pop	r31
    3d26:	ef 91       	pop	r30
    3d28:	bf 91       	pop	r27
    3d2a:	af 91       	pop	r26
    3d2c:	9f 91       	pop	r25
    3d2e:	8f 91       	pop	r24
    3d30:	7f 91       	pop	r23
    3d32:	6f 91       	pop	r22
    3d34:	5f 91       	pop	r21
    3d36:	4f 91       	pop	r20
    3d38:	3f 91       	pop	r19
    3d3a:	2f 91       	pop	r18
    3d3c:	0f 90       	pop	r0
    3d3e:	0b be       	out	0x3b, r0	; 59
    3d40:	0f 90       	pop	r0
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	0f 90       	pop	r0
    3d46:	1f 90       	pop	r1
    3d48:	18 95       	reti

00003d4a <__udivmodsi4>:
    3d4a:	a1 e2       	ldi	r26, 0x21	; 33
    3d4c:	1a 2e       	mov	r1, r26
    3d4e:	aa 1b       	sub	r26, r26
    3d50:	bb 1b       	sub	r27, r27
    3d52:	fd 01       	movw	r30, r26
    3d54:	0d c0       	rjmp	.+26     	; 0x3d70 <__udivmodsi4_ep>

00003d56 <__udivmodsi4_loop>:
    3d56:	aa 1f       	adc	r26, r26
    3d58:	bb 1f       	adc	r27, r27
    3d5a:	ee 1f       	adc	r30, r30
    3d5c:	ff 1f       	adc	r31, r31
    3d5e:	a2 17       	cp	r26, r18
    3d60:	b3 07       	cpc	r27, r19
    3d62:	e4 07       	cpc	r30, r20
    3d64:	f5 07       	cpc	r31, r21
    3d66:	20 f0       	brcs	.+8      	; 0x3d70 <__udivmodsi4_ep>
    3d68:	a2 1b       	sub	r26, r18
    3d6a:	b3 0b       	sbc	r27, r19
    3d6c:	e4 0b       	sbc	r30, r20
    3d6e:	f5 0b       	sbc	r31, r21

00003d70 <__udivmodsi4_ep>:
    3d70:	66 1f       	adc	r22, r22
    3d72:	77 1f       	adc	r23, r23
    3d74:	88 1f       	adc	r24, r24
    3d76:	99 1f       	adc	r25, r25
    3d78:	1a 94       	dec	r1
    3d7a:	69 f7       	brne	.-38     	; 0x3d56 <__udivmodsi4_loop>
    3d7c:	60 95       	com	r22
    3d7e:	70 95       	com	r23
    3d80:	80 95       	com	r24
    3d82:	90 95       	com	r25
    3d84:	9b 01       	movw	r18, r22
    3d86:	ac 01       	movw	r20, r24
    3d88:	bd 01       	movw	r22, r26
    3d8a:	cf 01       	movw	r24, r30
    3d8c:	08 95       	ret

00003d8e <__tablejump2__>:
    3d8e:	ee 0f       	add	r30, r30
    3d90:	ff 1f       	adc	r31, r31
    3d92:	88 1f       	adc	r24, r24
    3d94:	8b bf       	out	0x3b, r24	; 59
    3d96:	07 90       	elpm	r0, Z+
    3d98:	f6 91       	elpm	r31, Z
    3d9a:	e0 2d       	mov	r30, r0
    3d9c:	19 94       	eijmp

00003d9e <__subsf3>:
    3d9e:	50 58       	subi	r21, 0x80	; 128

00003da0 <__addsf3>:
    3da0:	bb 27       	eor	r27, r27
    3da2:	aa 27       	eor	r26, r26
    3da4:	0e d0       	rcall	.+28     	; 0x3dc2 <__addsf3x>
    3da6:	4d c1       	rjmp	.+666    	; 0x4042 <__fp_round>
    3da8:	3e d1       	rcall	.+636    	; 0x4026 <__fp_pscA>
    3daa:	30 f0       	brcs	.+12     	; 0x3db8 <__addsf3+0x18>
    3dac:	43 d1       	rcall	.+646    	; 0x4034 <__fp_pscB>
    3dae:	20 f0       	brcs	.+8      	; 0x3db8 <__addsf3+0x18>
    3db0:	31 f4       	brne	.+12     	; 0x3dbe <__addsf3+0x1e>
    3db2:	9f 3f       	cpi	r25, 0xFF	; 255
    3db4:	11 f4       	brne	.+4      	; 0x3dba <__addsf3+0x1a>
    3db6:	1e f4       	brtc	.+6      	; 0x3dbe <__addsf3+0x1e>
    3db8:	33 c1       	rjmp	.+614    	; 0x4020 <__fp_nan>
    3dba:	0e f4       	brtc	.+2      	; 0x3dbe <__addsf3+0x1e>
    3dbc:	e0 95       	com	r30
    3dbe:	e7 fb       	bst	r30, 7
    3dc0:	29 c1       	rjmp	.+594    	; 0x4014 <__fp_inf>

00003dc2 <__addsf3x>:
    3dc2:	e9 2f       	mov	r30, r25
    3dc4:	4f d1       	rcall	.+670    	; 0x4064 <__fp_split3>
    3dc6:	80 f3       	brcs	.-32     	; 0x3da8 <__addsf3+0x8>
    3dc8:	ba 17       	cp	r27, r26
    3dca:	62 07       	cpc	r22, r18
    3dcc:	73 07       	cpc	r23, r19
    3dce:	84 07       	cpc	r24, r20
    3dd0:	95 07       	cpc	r25, r21
    3dd2:	18 f0       	brcs	.+6      	; 0x3dda <__addsf3x+0x18>
    3dd4:	71 f4       	brne	.+28     	; 0x3df2 <__addsf3x+0x30>
    3dd6:	9e f5       	brtc	.+102    	; 0x3e3e <__addsf3x+0x7c>
    3dd8:	67 c1       	rjmp	.+718    	; 0x40a8 <__fp_zero>
    3dda:	0e f4       	brtc	.+2      	; 0x3dde <__addsf3x+0x1c>
    3ddc:	e0 95       	com	r30
    3dde:	0b 2e       	mov	r0, r27
    3de0:	ba 2f       	mov	r27, r26
    3de2:	a0 2d       	mov	r26, r0
    3de4:	0b 01       	movw	r0, r22
    3de6:	b9 01       	movw	r22, r18
    3de8:	90 01       	movw	r18, r0
    3dea:	0c 01       	movw	r0, r24
    3dec:	ca 01       	movw	r24, r20
    3dee:	a0 01       	movw	r20, r0
    3df0:	11 24       	eor	r1, r1
    3df2:	ff 27       	eor	r31, r31
    3df4:	59 1b       	sub	r21, r25
    3df6:	99 f0       	breq	.+38     	; 0x3e1e <__addsf3x+0x5c>
    3df8:	59 3f       	cpi	r21, 0xF9	; 249
    3dfa:	50 f4       	brcc	.+20     	; 0x3e10 <__addsf3x+0x4e>
    3dfc:	50 3e       	cpi	r21, 0xE0	; 224
    3dfe:	68 f1       	brcs	.+90     	; 0x3e5a <__addsf3x+0x98>
    3e00:	1a 16       	cp	r1, r26
    3e02:	f0 40       	sbci	r31, 0x00	; 0
    3e04:	a2 2f       	mov	r26, r18
    3e06:	23 2f       	mov	r18, r19
    3e08:	34 2f       	mov	r19, r20
    3e0a:	44 27       	eor	r20, r20
    3e0c:	58 5f       	subi	r21, 0xF8	; 248
    3e0e:	f3 cf       	rjmp	.-26     	; 0x3df6 <__addsf3x+0x34>
    3e10:	46 95       	lsr	r20
    3e12:	37 95       	ror	r19
    3e14:	27 95       	ror	r18
    3e16:	a7 95       	ror	r26
    3e18:	f0 40       	sbci	r31, 0x00	; 0
    3e1a:	53 95       	inc	r21
    3e1c:	c9 f7       	brne	.-14     	; 0x3e10 <__addsf3x+0x4e>
    3e1e:	7e f4       	brtc	.+30     	; 0x3e3e <__addsf3x+0x7c>
    3e20:	1f 16       	cp	r1, r31
    3e22:	ba 0b       	sbc	r27, r26
    3e24:	62 0b       	sbc	r22, r18
    3e26:	73 0b       	sbc	r23, r19
    3e28:	84 0b       	sbc	r24, r20
    3e2a:	ba f0       	brmi	.+46     	; 0x3e5a <__addsf3x+0x98>
    3e2c:	91 50       	subi	r25, 0x01	; 1
    3e2e:	a1 f0       	breq	.+40     	; 0x3e58 <__addsf3x+0x96>
    3e30:	ff 0f       	add	r31, r31
    3e32:	bb 1f       	adc	r27, r27
    3e34:	66 1f       	adc	r22, r22
    3e36:	77 1f       	adc	r23, r23
    3e38:	88 1f       	adc	r24, r24
    3e3a:	c2 f7       	brpl	.-16     	; 0x3e2c <__addsf3x+0x6a>
    3e3c:	0e c0       	rjmp	.+28     	; 0x3e5a <__addsf3x+0x98>
    3e3e:	ba 0f       	add	r27, r26
    3e40:	62 1f       	adc	r22, r18
    3e42:	73 1f       	adc	r23, r19
    3e44:	84 1f       	adc	r24, r20
    3e46:	48 f4       	brcc	.+18     	; 0x3e5a <__addsf3x+0x98>
    3e48:	87 95       	ror	r24
    3e4a:	77 95       	ror	r23
    3e4c:	67 95       	ror	r22
    3e4e:	b7 95       	ror	r27
    3e50:	f7 95       	ror	r31
    3e52:	9e 3f       	cpi	r25, 0xFE	; 254
    3e54:	08 f0       	brcs	.+2      	; 0x3e58 <__addsf3x+0x96>
    3e56:	b3 cf       	rjmp	.-154    	; 0x3dbe <__addsf3+0x1e>
    3e58:	93 95       	inc	r25
    3e5a:	88 0f       	add	r24, r24
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <__addsf3x+0x9e>
    3e5e:	99 27       	eor	r25, r25
    3e60:	ee 0f       	add	r30, r30
    3e62:	97 95       	ror	r25
    3e64:	87 95       	ror	r24
    3e66:	08 95       	ret

00003e68 <__divsf3>:
    3e68:	0c d0       	rcall	.+24     	; 0x3e82 <__divsf3x>
    3e6a:	eb c0       	rjmp	.+470    	; 0x4042 <__fp_round>
    3e6c:	e3 d0       	rcall	.+454    	; 0x4034 <__fp_pscB>
    3e6e:	40 f0       	brcs	.+16     	; 0x3e80 <__divsf3+0x18>
    3e70:	da d0       	rcall	.+436    	; 0x4026 <__fp_pscA>
    3e72:	30 f0       	brcs	.+12     	; 0x3e80 <__divsf3+0x18>
    3e74:	21 f4       	brne	.+8      	; 0x3e7e <__divsf3+0x16>
    3e76:	5f 3f       	cpi	r21, 0xFF	; 255
    3e78:	19 f0       	breq	.+6      	; 0x3e80 <__divsf3+0x18>
    3e7a:	cc c0       	rjmp	.+408    	; 0x4014 <__fp_inf>
    3e7c:	51 11       	cpse	r21, r1
    3e7e:	15 c1       	rjmp	.+554    	; 0x40aa <__fp_szero>
    3e80:	cf c0       	rjmp	.+414    	; 0x4020 <__fp_nan>

00003e82 <__divsf3x>:
    3e82:	f0 d0       	rcall	.+480    	; 0x4064 <__fp_split3>
    3e84:	98 f3       	brcs	.-26     	; 0x3e6c <__divsf3+0x4>

00003e86 <__divsf3_pse>:
    3e86:	99 23       	and	r25, r25
    3e88:	c9 f3       	breq	.-14     	; 0x3e7c <__divsf3+0x14>
    3e8a:	55 23       	and	r21, r21
    3e8c:	b1 f3       	breq	.-20     	; 0x3e7a <__divsf3+0x12>
    3e8e:	95 1b       	sub	r25, r21
    3e90:	55 0b       	sbc	r21, r21
    3e92:	bb 27       	eor	r27, r27
    3e94:	aa 27       	eor	r26, r26
    3e96:	62 17       	cp	r22, r18
    3e98:	73 07       	cpc	r23, r19
    3e9a:	84 07       	cpc	r24, r20
    3e9c:	38 f0       	brcs	.+14     	; 0x3eac <__divsf3_pse+0x26>
    3e9e:	9f 5f       	subi	r25, 0xFF	; 255
    3ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea2:	22 0f       	add	r18, r18
    3ea4:	33 1f       	adc	r19, r19
    3ea6:	44 1f       	adc	r20, r20
    3ea8:	aa 1f       	adc	r26, r26
    3eaa:	a9 f3       	breq	.-22     	; 0x3e96 <__divsf3_pse+0x10>
    3eac:	33 d0       	rcall	.+102    	; 0x3f14 <__divsf3_pse+0x8e>
    3eae:	0e 2e       	mov	r0, r30
    3eb0:	3a f0       	brmi	.+14     	; 0x3ec0 <__divsf3_pse+0x3a>
    3eb2:	e0 e8       	ldi	r30, 0x80	; 128
    3eb4:	30 d0       	rcall	.+96     	; 0x3f16 <__divsf3_pse+0x90>
    3eb6:	91 50       	subi	r25, 0x01	; 1
    3eb8:	50 40       	sbci	r21, 0x00	; 0
    3eba:	e6 95       	lsr	r30
    3ebc:	00 1c       	adc	r0, r0
    3ebe:	ca f7       	brpl	.-14     	; 0x3eb2 <__divsf3_pse+0x2c>
    3ec0:	29 d0       	rcall	.+82     	; 0x3f14 <__divsf3_pse+0x8e>
    3ec2:	fe 2f       	mov	r31, r30
    3ec4:	27 d0       	rcall	.+78     	; 0x3f14 <__divsf3_pse+0x8e>
    3ec6:	66 0f       	add	r22, r22
    3ec8:	77 1f       	adc	r23, r23
    3eca:	88 1f       	adc	r24, r24
    3ecc:	bb 1f       	adc	r27, r27
    3ece:	26 17       	cp	r18, r22
    3ed0:	37 07       	cpc	r19, r23
    3ed2:	48 07       	cpc	r20, r24
    3ed4:	ab 07       	cpc	r26, r27
    3ed6:	b0 e8       	ldi	r27, 0x80	; 128
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <__divsf3_pse+0x56>
    3eda:	bb 0b       	sbc	r27, r27
    3edc:	80 2d       	mov	r24, r0
    3ede:	bf 01       	movw	r22, r30
    3ee0:	ff 27       	eor	r31, r31
    3ee2:	93 58       	subi	r25, 0x83	; 131
    3ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee6:	2a f0       	brmi	.+10     	; 0x3ef2 <__divsf3_pse+0x6c>
    3ee8:	9e 3f       	cpi	r25, 0xFE	; 254
    3eea:	51 05       	cpc	r21, r1
    3eec:	68 f0       	brcs	.+26     	; 0x3f08 <__divsf3_pse+0x82>
    3eee:	92 c0       	rjmp	.+292    	; 0x4014 <__fp_inf>
    3ef0:	dc c0       	rjmp	.+440    	; 0x40aa <__fp_szero>
    3ef2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ef4:	ec f3       	brlt	.-6      	; 0x3ef0 <__divsf3_pse+0x6a>
    3ef6:	98 3e       	cpi	r25, 0xE8	; 232
    3ef8:	dc f3       	brlt	.-10     	; 0x3ef0 <__divsf3_pse+0x6a>
    3efa:	86 95       	lsr	r24
    3efc:	77 95       	ror	r23
    3efe:	67 95       	ror	r22
    3f00:	b7 95       	ror	r27
    3f02:	f7 95       	ror	r31
    3f04:	9f 5f       	subi	r25, 0xFF	; 255
    3f06:	c9 f7       	brne	.-14     	; 0x3efa <__divsf3_pse+0x74>
    3f08:	88 0f       	add	r24, r24
    3f0a:	91 1d       	adc	r25, r1
    3f0c:	96 95       	lsr	r25
    3f0e:	87 95       	ror	r24
    3f10:	97 f9       	bld	r25, 7
    3f12:	08 95       	ret
    3f14:	e1 e0       	ldi	r30, 0x01	; 1
    3f16:	66 0f       	add	r22, r22
    3f18:	77 1f       	adc	r23, r23
    3f1a:	88 1f       	adc	r24, r24
    3f1c:	bb 1f       	adc	r27, r27
    3f1e:	62 17       	cp	r22, r18
    3f20:	73 07       	cpc	r23, r19
    3f22:	84 07       	cpc	r24, r20
    3f24:	ba 07       	cpc	r27, r26
    3f26:	20 f0       	brcs	.+8      	; 0x3f30 <__divsf3_pse+0xaa>
    3f28:	62 1b       	sub	r22, r18
    3f2a:	73 0b       	sbc	r23, r19
    3f2c:	84 0b       	sbc	r24, r20
    3f2e:	ba 0b       	sbc	r27, r26
    3f30:	ee 1f       	adc	r30, r30
    3f32:	88 f7       	brcc	.-30     	; 0x3f16 <__divsf3_pse+0x90>
    3f34:	e0 95       	com	r30
    3f36:	08 95       	ret

00003f38 <__fixsfsi>:
    3f38:	04 d0       	rcall	.+8      	; 0x3f42 <__fixunssfsi>
    3f3a:	68 94       	set
    3f3c:	b1 11       	cpse	r27, r1
    3f3e:	b5 c0       	rjmp	.+362    	; 0x40aa <__fp_szero>
    3f40:	08 95       	ret

00003f42 <__fixunssfsi>:
    3f42:	98 d0       	rcall	.+304    	; 0x4074 <__fp_splitA>
    3f44:	88 f0       	brcs	.+34     	; 0x3f68 <__fixunssfsi+0x26>
    3f46:	9f 57       	subi	r25, 0x7F	; 127
    3f48:	90 f0       	brcs	.+36     	; 0x3f6e <__fixunssfsi+0x2c>
    3f4a:	b9 2f       	mov	r27, r25
    3f4c:	99 27       	eor	r25, r25
    3f4e:	b7 51       	subi	r27, 0x17	; 23
    3f50:	a0 f0       	brcs	.+40     	; 0x3f7a <__fixunssfsi+0x38>
    3f52:	d1 f0       	breq	.+52     	; 0x3f88 <__fixunssfsi+0x46>
    3f54:	66 0f       	add	r22, r22
    3f56:	77 1f       	adc	r23, r23
    3f58:	88 1f       	adc	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	1a f0       	brmi	.+6      	; 0x3f64 <__fixunssfsi+0x22>
    3f5e:	ba 95       	dec	r27
    3f60:	c9 f7       	brne	.-14     	; 0x3f54 <__fixunssfsi+0x12>
    3f62:	12 c0       	rjmp	.+36     	; 0x3f88 <__fixunssfsi+0x46>
    3f64:	b1 30       	cpi	r27, 0x01	; 1
    3f66:	81 f0       	breq	.+32     	; 0x3f88 <__fixunssfsi+0x46>
    3f68:	9f d0       	rcall	.+318    	; 0x40a8 <__fp_zero>
    3f6a:	b1 e0       	ldi	r27, 0x01	; 1
    3f6c:	08 95       	ret
    3f6e:	9c c0       	rjmp	.+312    	; 0x40a8 <__fp_zero>
    3f70:	67 2f       	mov	r22, r23
    3f72:	78 2f       	mov	r23, r24
    3f74:	88 27       	eor	r24, r24
    3f76:	b8 5f       	subi	r27, 0xF8	; 248
    3f78:	39 f0       	breq	.+14     	; 0x3f88 <__fixunssfsi+0x46>
    3f7a:	b9 3f       	cpi	r27, 0xF9	; 249
    3f7c:	cc f3       	brlt	.-14     	; 0x3f70 <__fixunssfsi+0x2e>
    3f7e:	86 95       	lsr	r24
    3f80:	77 95       	ror	r23
    3f82:	67 95       	ror	r22
    3f84:	b3 95       	inc	r27
    3f86:	d9 f7       	brne	.-10     	; 0x3f7e <__fixunssfsi+0x3c>
    3f88:	3e f4       	brtc	.+14     	; 0x3f98 <__fixunssfsi+0x56>
    3f8a:	90 95       	com	r25
    3f8c:	80 95       	com	r24
    3f8e:	70 95       	com	r23
    3f90:	61 95       	neg	r22
    3f92:	7f 4f       	sbci	r23, 0xFF	; 255
    3f94:	8f 4f       	sbci	r24, 0xFF	; 255
    3f96:	9f 4f       	sbci	r25, 0xFF	; 255
    3f98:	08 95       	ret

00003f9a <__floatunsisf>:
    3f9a:	e8 94       	clt
    3f9c:	09 c0       	rjmp	.+18     	; 0x3fb0 <__floatsisf+0x12>

00003f9e <__floatsisf>:
    3f9e:	97 fb       	bst	r25, 7
    3fa0:	3e f4       	brtc	.+14     	; 0x3fb0 <__floatsisf+0x12>
    3fa2:	90 95       	com	r25
    3fa4:	80 95       	com	r24
    3fa6:	70 95       	com	r23
    3fa8:	61 95       	neg	r22
    3faa:	7f 4f       	sbci	r23, 0xFF	; 255
    3fac:	8f 4f       	sbci	r24, 0xFF	; 255
    3fae:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb0:	99 23       	and	r25, r25
    3fb2:	a9 f0       	breq	.+42     	; 0x3fde <__floatsisf+0x40>
    3fb4:	f9 2f       	mov	r31, r25
    3fb6:	96 e9       	ldi	r25, 0x96	; 150
    3fb8:	bb 27       	eor	r27, r27
    3fba:	93 95       	inc	r25
    3fbc:	f6 95       	lsr	r31
    3fbe:	87 95       	ror	r24
    3fc0:	77 95       	ror	r23
    3fc2:	67 95       	ror	r22
    3fc4:	b7 95       	ror	r27
    3fc6:	f1 11       	cpse	r31, r1
    3fc8:	f8 cf       	rjmp	.-16     	; 0x3fba <__floatsisf+0x1c>
    3fca:	fa f4       	brpl	.+62     	; 0x400a <__floatsisf+0x6c>
    3fcc:	bb 0f       	add	r27, r27
    3fce:	11 f4       	brne	.+4      	; 0x3fd4 <__floatsisf+0x36>
    3fd0:	60 ff       	sbrs	r22, 0
    3fd2:	1b c0       	rjmp	.+54     	; 0x400a <__floatsisf+0x6c>
    3fd4:	6f 5f       	subi	r22, 0xFF	; 255
    3fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fda:	9f 4f       	sbci	r25, 0xFF	; 255
    3fdc:	16 c0       	rjmp	.+44     	; 0x400a <__floatsisf+0x6c>
    3fde:	88 23       	and	r24, r24
    3fe0:	11 f0       	breq	.+4      	; 0x3fe6 <__floatsisf+0x48>
    3fe2:	96 e9       	ldi	r25, 0x96	; 150
    3fe4:	11 c0       	rjmp	.+34     	; 0x4008 <__floatsisf+0x6a>
    3fe6:	77 23       	and	r23, r23
    3fe8:	21 f0       	breq	.+8      	; 0x3ff2 <__floatsisf+0x54>
    3fea:	9e e8       	ldi	r25, 0x8E	; 142
    3fec:	87 2f       	mov	r24, r23
    3fee:	76 2f       	mov	r23, r22
    3ff0:	05 c0       	rjmp	.+10     	; 0x3ffc <__floatsisf+0x5e>
    3ff2:	66 23       	and	r22, r22
    3ff4:	71 f0       	breq	.+28     	; 0x4012 <__floatsisf+0x74>
    3ff6:	96 e8       	ldi	r25, 0x86	; 134
    3ff8:	86 2f       	mov	r24, r22
    3ffa:	70 e0       	ldi	r23, 0x00	; 0
    3ffc:	60 e0       	ldi	r22, 0x00	; 0
    3ffe:	2a f0       	brmi	.+10     	; 0x400a <__floatsisf+0x6c>
    4000:	9a 95       	dec	r25
    4002:	66 0f       	add	r22, r22
    4004:	77 1f       	adc	r23, r23
    4006:	88 1f       	adc	r24, r24
    4008:	da f7       	brpl	.-10     	; 0x4000 <__floatsisf+0x62>
    400a:	88 0f       	add	r24, r24
    400c:	96 95       	lsr	r25
    400e:	87 95       	ror	r24
    4010:	97 f9       	bld	r25, 7
    4012:	08 95       	ret

00004014 <__fp_inf>:
    4014:	97 f9       	bld	r25, 7
    4016:	9f 67       	ori	r25, 0x7F	; 127
    4018:	80 e8       	ldi	r24, 0x80	; 128
    401a:	70 e0       	ldi	r23, 0x00	; 0
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	08 95       	ret

00004020 <__fp_nan>:
    4020:	9f ef       	ldi	r25, 0xFF	; 255
    4022:	80 ec       	ldi	r24, 0xC0	; 192
    4024:	08 95       	ret

00004026 <__fp_pscA>:
    4026:	00 24       	eor	r0, r0
    4028:	0a 94       	dec	r0
    402a:	16 16       	cp	r1, r22
    402c:	17 06       	cpc	r1, r23
    402e:	18 06       	cpc	r1, r24
    4030:	09 06       	cpc	r0, r25
    4032:	08 95       	ret

00004034 <__fp_pscB>:
    4034:	00 24       	eor	r0, r0
    4036:	0a 94       	dec	r0
    4038:	12 16       	cp	r1, r18
    403a:	13 06       	cpc	r1, r19
    403c:	14 06       	cpc	r1, r20
    403e:	05 06       	cpc	r0, r21
    4040:	08 95       	ret

00004042 <__fp_round>:
    4042:	09 2e       	mov	r0, r25
    4044:	03 94       	inc	r0
    4046:	00 0c       	add	r0, r0
    4048:	11 f4       	brne	.+4      	; 0x404e <__fp_round+0xc>
    404a:	88 23       	and	r24, r24
    404c:	52 f0       	brmi	.+20     	; 0x4062 <__fp_round+0x20>
    404e:	bb 0f       	add	r27, r27
    4050:	40 f4       	brcc	.+16     	; 0x4062 <__fp_round+0x20>
    4052:	bf 2b       	or	r27, r31
    4054:	11 f4       	brne	.+4      	; 0x405a <__fp_round+0x18>
    4056:	60 ff       	sbrs	r22, 0
    4058:	04 c0       	rjmp	.+8      	; 0x4062 <__fp_round+0x20>
    405a:	6f 5f       	subi	r22, 0xFF	; 255
    405c:	7f 4f       	sbci	r23, 0xFF	; 255
    405e:	8f 4f       	sbci	r24, 0xFF	; 255
    4060:	9f 4f       	sbci	r25, 0xFF	; 255
    4062:	08 95       	ret

00004064 <__fp_split3>:
    4064:	57 fd       	sbrc	r21, 7
    4066:	90 58       	subi	r25, 0x80	; 128
    4068:	44 0f       	add	r20, r20
    406a:	55 1f       	adc	r21, r21
    406c:	59 f0       	breq	.+22     	; 0x4084 <__fp_splitA+0x10>
    406e:	5f 3f       	cpi	r21, 0xFF	; 255
    4070:	71 f0       	breq	.+28     	; 0x408e <__fp_splitA+0x1a>
    4072:	47 95       	ror	r20

00004074 <__fp_splitA>:
    4074:	88 0f       	add	r24, r24
    4076:	97 fb       	bst	r25, 7
    4078:	99 1f       	adc	r25, r25
    407a:	61 f0       	breq	.+24     	; 0x4094 <__fp_splitA+0x20>
    407c:	9f 3f       	cpi	r25, 0xFF	; 255
    407e:	79 f0       	breq	.+30     	; 0x409e <__fp_splitA+0x2a>
    4080:	87 95       	ror	r24
    4082:	08 95       	ret
    4084:	12 16       	cp	r1, r18
    4086:	13 06       	cpc	r1, r19
    4088:	14 06       	cpc	r1, r20
    408a:	55 1f       	adc	r21, r21
    408c:	f2 cf       	rjmp	.-28     	; 0x4072 <__fp_split3+0xe>
    408e:	46 95       	lsr	r20
    4090:	f1 df       	rcall	.-30     	; 0x4074 <__fp_splitA>
    4092:	08 c0       	rjmp	.+16     	; 0x40a4 <__fp_splitA+0x30>
    4094:	16 16       	cp	r1, r22
    4096:	17 06       	cpc	r1, r23
    4098:	18 06       	cpc	r1, r24
    409a:	99 1f       	adc	r25, r25
    409c:	f1 cf       	rjmp	.-30     	; 0x4080 <__fp_splitA+0xc>
    409e:	86 95       	lsr	r24
    40a0:	71 05       	cpc	r23, r1
    40a2:	61 05       	cpc	r22, r1
    40a4:	08 94       	sec
    40a6:	08 95       	ret

000040a8 <__fp_zero>:
    40a8:	e8 94       	clt

000040aa <__fp_szero>:
    40aa:	bb 27       	eor	r27, r27
    40ac:	66 27       	eor	r22, r22
    40ae:	77 27       	eor	r23, r23
    40b0:	cb 01       	movw	r24, r22
    40b2:	97 f9       	bld	r25, 7
    40b4:	08 95       	ret

000040b6 <__mulsf3>:
    40b6:	0b d0       	rcall	.+22     	; 0x40ce <__mulsf3x>
    40b8:	c4 cf       	rjmp	.-120    	; 0x4042 <__fp_round>
    40ba:	b5 df       	rcall	.-150    	; 0x4026 <__fp_pscA>
    40bc:	28 f0       	brcs	.+10     	; 0x40c8 <__mulsf3+0x12>
    40be:	ba df       	rcall	.-140    	; 0x4034 <__fp_pscB>
    40c0:	18 f0       	brcs	.+6      	; 0x40c8 <__mulsf3+0x12>
    40c2:	95 23       	and	r25, r21
    40c4:	09 f0       	breq	.+2      	; 0x40c8 <__mulsf3+0x12>
    40c6:	a6 cf       	rjmp	.-180    	; 0x4014 <__fp_inf>
    40c8:	ab cf       	rjmp	.-170    	; 0x4020 <__fp_nan>
    40ca:	11 24       	eor	r1, r1
    40cc:	ee cf       	rjmp	.-36     	; 0x40aa <__fp_szero>

000040ce <__mulsf3x>:
    40ce:	ca df       	rcall	.-108    	; 0x4064 <__fp_split3>
    40d0:	a0 f3       	brcs	.-24     	; 0x40ba <__mulsf3+0x4>

000040d2 <__mulsf3_pse>:
    40d2:	95 9f       	mul	r25, r21
    40d4:	d1 f3       	breq	.-12     	; 0x40ca <__mulsf3+0x14>
    40d6:	95 0f       	add	r25, r21
    40d8:	50 e0       	ldi	r21, 0x00	; 0
    40da:	55 1f       	adc	r21, r21
    40dc:	62 9f       	mul	r22, r18
    40de:	f0 01       	movw	r30, r0
    40e0:	72 9f       	mul	r23, r18
    40e2:	bb 27       	eor	r27, r27
    40e4:	f0 0d       	add	r31, r0
    40e6:	b1 1d       	adc	r27, r1
    40e8:	63 9f       	mul	r22, r19
    40ea:	aa 27       	eor	r26, r26
    40ec:	f0 0d       	add	r31, r0
    40ee:	b1 1d       	adc	r27, r1
    40f0:	aa 1f       	adc	r26, r26
    40f2:	64 9f       	mul	r22, r20
    40f4:	66 27       	eor	r22, r22
    40f6:	b0 0d       	add	r27, r0
    40f8:	a1 1d       	adc	r26, r1
    40fa:	66 1f       	adc	r22, r22
    40fc:	82 9f       	mul	r24, r18
    40fe:	22 27       	eor	r18, r18
    4100:	b0 0d       	add	r27, r0
    4102:	a1 1d       	adc	r26, r1
    4104:	62 1f       	adc	r22, r18
    4106:	73 9f       	mul	r23, r19
    4108:	b0 0d       	add	r27, r0
    410a:	a1 1d       	adc	r26, r1
    410c:	62 1f       	adc	r22, r18
    410e:	83 9f       	mul	r24, r19
    4110:	a0 0d       	add	r26, r0
    4112:	61 1d       	adc	r22, r1
    4114:	22 1f       	adc	r18, r18
    4116:	74 9f       	mul	r23, r20
    4118:	33 27       	eor	r19, r19
    411a:	a0 0d       	add	r26, r0
    411c:	61 1d       	adc	r22, r1
    411e:	23 1f       	adc	r18, r19
    4120:	84 9f       	mul	r24, r20
    4122:	60 0d       	add	r22, r0
    4124:	21 1d       	adc	r18, r1
    4126:	82 2f       	mov	r24, r18
    4128:	76 2f       	mov	r23, r22
    412a:	6a 2f       	mov	r22, r26
    412c:	11 24       	eor	r1, r1
    412e:	9f 57       	subi	r25, 0x7F	; 127
    4130:	50 40       	sbci	r21, 0x00	; 0
    4132:	8a f0       	brmi	.+34     	; 0x4156 <__mulsf3_pse+0x84>
    4134:	e1 f0       	breq	.+56     	; 0x416e <__mulsf3_pse+0x9c>
    4136:	88 23       	and	r24, r24
    4138:	4a f0       	brmi	.+18     	; 0x414c <__mulsf3_pse+0x7a>
    413a:	ee 0f       	add	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	bb 1f       	adc	r27, r27
    4140:	66 1f       	adc	r22, r22
    4142:	77 1f       	adc	r23, r23
    4144:	88 1f       	adc	r24, r24
    4146:	91 50       	subi	r25, 0x01	; 1
    4148:	50 40       	sbci	r21, 0x00	; 0
    414a:	a9 f7       	brne	.-22     	; 0x4136 <__mulsf3_pse+0x64>
    414c:	9e 3f       	cpi	r25, 0xFE	; 254
    414e:	51 05       	cpc	r21, r1
    4150:	70 f0       	brcs	.+28     	; 0x416e <__mulsf3_pse+0x9c>
    4152:	60 cf       	rjmp	.-320    	; 0x4014 <__fp_inf>
    4154:	aa cf       	rjmp	.-172    	; 0x40aa <__fp_szero>
    4156:	5f 3f       	cpi	r21, 0xFF	; 255
    4158:	ec f3       	brlt	.-6      	; 0x4154 <__mulsf3_pse+0x82>
    415a:	98 3e       	cpi	r25, 0xE8	; 232
    415c:	dc f3       	brlt	.-10     	; 0x4154 <__mulsf3_pse+0x82>
    415e:	86 95       	lsr	r24
    4160:	77 95       	ror	r23
    4162:	67 95       	ror	r22
    4164:	b7 95       	ror	r27
    4166:	f7 95       	ror	r31
    4168:	e7 95       	ror	r30
    416a:	9f 5f       	subi	r25, 0xFF	; 255
    416c:	c1 f7       	brne	.-16     	; 0x415e <__mulsf3_pse+0x8c>
    416e:	fe 2b       	or	r31, r30
    4170:	88 0f       	add	r24, r24
    4172:	91 1d       	adc	r25, r1
    4174:	96 95       	lsr	r25
    4176:	87 95       	ror	r24
    4178:	97 f9       	bld	r25, 7
    417a:	08 95       	ret

0000417c <calloc>:
    417c:	0f 93       	push	r16
    417e:	1f 93       	push	r17
    4180:	cf 93       	push	r28
    4182:	df 93       	push	r29
    4184:	86 9f       	mul	r24, r22
    4186:	80 01       	movw	r16, r0
    4188:	87 9f       	mul	r24, r23
    418a:	10 0d       	add	r17, r0
    418c:	96 9f       	mul	r25, r22
    418e:	10 0d       	add	r17, r0
    4190:	11 24       	eor	r1, r1
    4192:	c8 01       	movw	r24, r16
    4194:	0d d0       	rcall	.+26     	; 0x41b0 <malloc>
    4196:	ec 01       	movw	r28, r24
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	21 f0       	breq	.+8      	; 0x41a4 <calloc+0x28>
    419c:	a8 01       	movw	r20, r16
    419e:	60 e0       	ldi	r22, 0x00	; 0
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	34 d1       	rcall	.+616    	; 0x440c <memset>
    41a4:	ce 01       	movw	r24, r28
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	08 95       	ret

000041b0 <malloc>:
    41b0:	0f 93       	push	r16
    41b2:	1f 93       	push	r17
    41b4:	cf 93       	push	r28
    41b6:	df 93       	push	r29
    41b8:	82 30       	cpi	r24, 0x02	; 2
    41ba:	91 05       	cpc	r25, r1
    41bc:	10 f4       	brcc	.+4      	; 0x41c2 <malloc+0x12>
    41be:	82 e0       	ldi	r24, 0x02	; 2
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <__flp>
    41c6:	f0 91 72 05 	lds	r31, 0x0572	; 0x800572 <__flp+0x1>
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	a0 e0       	ldi	r26, 0x00	; 0
    41d0:	b0 e0       	ldi	r27, 0x00	; 0
    41d2:	30 97       	sbiw	r30, 0x00	; 0
    41d4:	19 f1       	breq	.+70     	; 0x421c <malloc+0x6c>
    41d6:	40 81       	ld	r20, Z
    41d8:	51 81       	ldd	r21, Z+1	; 0x01
    41da:	02 81       	ldd	r16, Z+2	; 0x02
    41dc:	13 81       	ldd	r17, Z+3	; 0x03
    41de:	48 17       	cp	r20, r24
    41e0:	59 07       	cpc	r21, r25
    41e2:	c8 f0       	brcs	.+50     	; 0x4216 <malloc+0x66>
    41e4:	84 17       	cp	r24, r20
    41e6:	95 07       	cpc	r25, r21
    41e8:	69 f4       	brne	.+26     	; 0x4204 <malloc+0x54>
    41ea:	10 97       	sbiw	r26, 0x00	; 0
    41ec:	31 f0       	breq	.+12     	; 0x41fa <malloc+0x4a>
    41ee:	12 96       	adiw	r26, 0x02	; 2
    41f0:	0c 93       	st	X, r16
    41f2:	12 97       	sbiw	r26, 0x02	; 2
    41f4:	13 96       	adiw	r26, 0x03	; 3
    41f6:	1c 93       	st	X, r17
    41f8:	27 c0       	rjmp	.+78     	; 0x4248 <malloc+0x98>
    41fa:	00 93 71 05 	sts	0x0571, r16	; 0x800571 <__flp>
    41fe:	10 93 72 05 	sts	0x0572, r17	; 0x800572 <__flp+0x1>
    4202:	22 c0       	rjmp	.+68     	; 0x4248 <malloc+0x98>
    4204:	21 15       	cp	r18, r1
    4206:	31 05       	cpc	r19, r1
    4208:	19 f0       	breq	.+6      	; 0x4210 <malloc+0x60>
    420a:	42 17       	cp	r20, r18
    420c:	53 07       	cpc	r21, r19
    420e:	18 f4       	brcc	.+6      	; 0x4216 <malloc+0x66>
    4210:	9a 01       	movw	r18, r20
    4212:	bd 01       	movw	r22, r26
    4214:	ef 01       	movw	r28, r30
    4216:	df 01       	movw	r26, r30
    4218:	f8 01       	movw	r30, r16
    421a:	db cf       	rjmp	.-74     	; 0x41d2 <malloc+0x22>
    421c:	21 15       	cp	r18, r1
    421e:	31 05       	cpc	r19, r1
    4220:	f9 f0       	breq	.+62     	; 0x4260 <malloc+0xb0>
    4222:	28 1b       	sub	r18, r24
    4224:	39 0b       	sbc	r19, r25
    4226:	24 30       	cpi	r18, 0x04	; 4
    4228:	31 05       	cpc	r19, r1
    422a:	80 f4       	brcc	.+32     	; 0x424c <malloc+0x9c>
    422c:	8a 81       	ldd	r24, Y+2	; 0x02
    422e:	9b 81       	ldd	r25, Y+3	; 0x03
    4230:	61 15       	cp	r22, r1
    4232:	71 05       	cpc	r23, r1
    4234:	21 f0       	breq	.+8      	; 0x423e <malloc+0x8e>
    4236:	fb 01       	movw	r30, r22
    4238:	93 83       	std	Z+3, r25	; 0x03
    423a:	82 83       	std	Z+2, r24	; 0x02
    423c:	04 c0       	rjmp	.+8      	; 0x4246 <malloc+0x96>
    423e:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <__flp+0x1>
    4242:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <__flp>
    4246:	fe 01       	movw	r30, r28
    4248:	32 96       	adiw	r30, 0x02	; 2
    424a:	44 c0       	rjmp	.+136    	; 0x42d4 <malloc+0x124>
    424c:	fe 01       	movw	r30, r28
    424e:	e2 0f       	add	r30, r18
    4250:	f3 1f       	adc	r31, r19
    4252:	81 93       	st	Z+, r24
    4254:	91 93       	st	Z+, r25
    4256:	22 50       	subi	r18, 0x02	; 2
    4258:	31 09       	sbc	r19, r1
    425a:	39 83       	std	Y+1, r19	; 0x01
    425c:	28 83       	st	Y, r18
    425e:	3a c0       	rjmp	.+116    	; 0x42d4 <malloc+0x124>
    4260:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <__brkval>
    4264:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <__brkval+0x1>
    4268:	23 2b       	or	r18, r19
    426a:	41 f4       	brne	.+16     	; 0x427c <malloc+0xcc>
    426c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4270:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4274:	30 93 70 05 	sts	0x0570, r19	; 0x800570 <__brkval+0x1>
    4278:	20 93 6f 05 	sts	0x056F, r18	; 0x80056f <__brkval>
    427c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4280:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4284:	21 15       	cp	r18, r1
    4286:	31 05       	cpc	r19, r1
    4288:	41 f4       	brne	.+16     	; 0x429a <malloc+0xea>
    428a:	2d b7       	in	r18, 0x3d	; 61
    428c:	3e b7       	in	r19, 0x3e	; 62
    428e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4292:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4296:	24 1b       	sub	r18, r20
    4298:	35 0b       	sbc	r19, r21
    429a:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <__brkval>
    429e:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <__brkval+0x1>
    42a2:	e2 17       	cp	r30, r18
    42a4:	f3 07       	cpc	r31, r19
    42a6:	a0 f4       	brcc	.+40     	; 0x42d0 <malloc+0x120>
    42a8:	2e 1b       	sub	r18, r30
    42aa:	3f 0b       	sbc	r19, r31
    42ac:	28 17       	cp	r18, r24
    42ae:	39 07       	cpc	r19, r25
    42b0:	78 f0       	brcs	.+30     	; 0x42d0 <malloc+0x120>
    42b2:	ac 01       	movw	r20, r24
    42b4:	4e 5f       	subi	r20, 0xFE	; 254
    42b6:	5f 4f       	sbci	r21, 0xFF	; 255
    42b8:	24 17       	cp	r18, r20
    42ba:	35 07       	cpc	r19, r21
    42bc:	48 f0       	brcs	.+18     	; 0x42d0 <malloc+0x120>
    42be:	4e 0f       	add	r20, r30
    42c0:	5f 1f       	adc	r21, r31
    42c2:	50 93 70 05 	sts	0x0570, r21	; 0x800570 <__brkval+0x1>
    42c6:	40 93 6f 05 	sts	0x056F, r20	; 0x80056f <__brkval>
    42ca:	81 93       	st	Z+, r24
    42cc:	91 93       	st	Z+, r25
    42ce:	02 c0       	rjmp	.+4      	; 0x42d4 <malloc+0x124>
    42d0:	e0 e0       	ldi	r30, 0x00	; 0
    42d2:	f0 e0       	ldi	r31, 0x00	; 0
    42d4:	cf 01       	movw	r24, r30
    42d6:	df 91       	pop	r29
    42d8:	cf 91       	pop	r28
    42da:	1f 91       	pop	r17
    42dc:	0f 91       	pop	r16
    42de:	08 95       	ret

000042e0 <free>:
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	00 97       	sbiw	r24, 0x00	; 0
    42e6:	09 f4       	brne	.+2      	; 0x42ea <free+0xa>
    42e8:	81 c0       	rjmp	.+258    	; 0x43ec <free+0x10c>
    42ea:	fc 01       	movw	r30, r24
    42ec:	32 97       	sbiw	r30, 0x02	; 2
    42ee:	13 82       	std	Z+3, r1	; 0x03
    42f0:	12 82       	std	Z+2, r1	; 0x02
    42f2:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <__flp>
    42f6:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <__flp+0x1>
    42fa:	10 97       	sbiw	r26, 0x00	; 0
    42fc:	81 f4       	brne	.+32     	; 0x431e <free+0x3e>
    42fe:	20 81       	ld	r18, Z
    4300:	31 81       	ldd	r19, Z+1	; 0x01
    4302:	82 0f       	add	r24, r18
    4304:	93 1f       	adc	r25, r19
    4306:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <__brkval>
    430a:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <__brkval+0x1>
    430e:	28 17       	cp	r18, r24
    4310:	39 07       	cpc	r19, r25
    4312:	51 f5       	brne	.+84     	; 0x4368 <free+0x88>
    4314:	f0 93 70 05 	sts	0x0570, r31	; 0x800570 <__brkval+0x1>
    4318:	e0 93 6f 05 	sts	0x056F, r30	; 0x80056f <__brkval>
    431c:	67 c0       	rjmp	.+206    	; 0x43ec <free+0x10c>
    431e:	ed 01       	movw	r28, r26
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	ce 17       	cp	r28, r30
    4326:	df 07       	cpc	r29, r31
    4328:	40 f4       	brcc	.+16     	; 0x433a <free+0x5a>
    432a:	4a 81       	ldd	r20, Y+2	; 0x02
    432c:	5b 81       	ldd	r21, Y+3	; 0x03
    432e:	9e 01       	movw	r18, r28
    4330:	41 15       	cp	r20, r1
    4332:	51 05       	cpc	r21, r1
    4334:	f1 f0       	breq	.+60     	; 0x4372 <free+0x92>
    4336:	ea 01       	movw	r28, r20
    4338:	f5 cf       	rjmp	.-22     	; 0x4324 <free+0x44>
    433a:	d3 83       	std	Z+3, r29	; 0x03
    433c:	c2 83       	std	Z+2, r28	; 0x02
    433e:	40 81       	ld	r20, Z
    4340:	51 81       	ldd	r21, Z+1	; 0x01
    4342:	84 0f       	add	r24, r20
    4344:	95 1f       	adc	r25, r21
    4346:	c8 17       	cp	r28, r24
    4348:	d9 07       	cpc	r29, r25
    434a:	59 f4       	brne	.+22     	; 0x4362 <free+0x82>
    434c:	88 81       	ld	r24, Y
    434e:	99 81       	ldd	r25, Y+1	; 0x01
    4350:	84 0f       	add	r24, r20
    4352:	95 1f       	adc	r25, r21
    4354:	02 96       	adiw	r24, 0x02	; 2
    4356:	91 83       	std	Z+1, r25	; 0x01
    4358:	80 83       	st	Z, r24
    435a:	8a 81       	ldd	r24, Y+2	; 0x02
    435c:	9b 81       	ldd	r25, Y+3	; 0x03
    435e:	93 83       	std	Z+3, r25	; 0x03
    4360:	82 83       	std	Z+2, r24	; 0x02
    4362:	21 15       	cp	r18, r1
    4364:	31 05       	cpc	r19, r1
    4366:	29 f4       	brne	.+10     	; 0x4372 <free+0x92>
    4368:	f0 93 72 05 	sts	0x0572, r31	; 0x800572 <__flp+0x1>
    436c:	e0 93 71 05 	sts	0x0571, r30	; 0x800571 <__flp>
    4370:	3d c0       	rjmp	.+122    	; 0x43ec <free+0x10c>
    4372:	e9 01       	movw	r28, r18
    4374:	fb 83       	std	Y+3, r31	; 0x03
    4376:	ea 83       	std	Y+2, r30	; 0x02
    4378:	49 91       	ld	r20, Y+
    437a:	59 91       	ld	r21, Y+
    437c:	c4 0f       	add	r28, r20
    437e:	d5 1f       	adc	r29, r21
    4380:	ec 17       	cp	r30, r28
    4382:	fd 07       	cpc	r31, r29
    4384:	61 f4       	brne	.+24     	; 0x439e <free+0xbe>
    4386:	80 81       	ld	r24, Z
    4388:	91 81       	ldd	r25, Z+1	; 0x01
    438a:	84 0f       	add	r24, r20
    438c:	95 1f       	adc	r25, r21
    438e:	02 96       	adiw	r24, 0x02	; 2
    4390:	e9 01       	movw	r28, r18
    4392:	99 83       	std	Y+1, r25	; 0x01
    4394:	88 83       	st	Y, r24
    4396:	82 81       	ldd	r24, Z+2	; 0x02
    4398:	93 81       	ldd	r25, Z+3	; 0x03
    439a:	9b 83       	std	Y+3, r25	; 0x03
    439c:	8a 83       	std	Y+2, r24	; 0x02
    439e:	e0 e0       	ldi	r30, 0x00	; 0
    43a0:	f0 e0       	ldi	r31, 0x00	; 0
    43a2:	12 96       	adiw	r26, 0x02	; 2
    43a4:	8d 91       	ld	r24, X+
    43a6:	9c 91       	ld	r25, X
    43a8:	13 97       	sbiw	r26, 0x03	; 3
    43aa:	00 97       	sbiw	r24, 0x00	; 0
    43ac:	19 f0       	breq	.+6      	; 0x43b4 <free+0xd4>
    43ae:	fd 01       	movw	r30, r26
    43b0:	dc 01       	movw	r26, r24
    43b2:	f7 cf       	rjmp	.-18     	; 0x43a2 <free+0xc2>
    43b4:	8d 91       	ld	r24, X+
    43b6:	9c 91       	ld	r25, X
    43b8:	11 97       	sbiw	r26, 0x01	; 1
    43ba:	9d 01       	movw	r18, r26
    43bc:	2e 5f       	subi	r18, 0xFE	; 254
    43be:	3f 4f       	sbci	r19, 0xFF	; 255
    43c0:	82 0f       	add	r24, r18
    43c2:	93 1f       	adc	r25, r19
    43c4:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <__brkval>
    43c8:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <__brkval+0x1>
    43cc:	28 17       	cp	r18, r24
    43ce:	39 07       	cpc	r19, r25
    43d0:	69 f4       	brne	.+26     	; 0x43ec <free+0x10c>
    43d2:	30 97       	sbiw	r30, 0x00	; 0
    43d4:	29 f4       	brne	.+10     	; 0x43e0 <free+0x100>
    43d6:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <__flp+0x1>
    43da:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <__flp>
    43de:	02 c0       	rjmp	.+4      	; 0x43e4 <free+0x104>
    43e0:	13 82       	std	Z+3, r1	; 0x03
    43e2:	12 82       	std	Z+2, r1	; 0x02
    43e4:	b0 93 70 05 	sts	0x0570, r27	; 0x800570 <__brkval+0x1>
    43e8:	a0 93 6f 05 	sts	0x056F, r26	; 0x80056f <__brkval>
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	08 95       	ret

000043f2 <abort>:
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	f8 94       	cli
    43f8:	00 c3       	rjmp	.+1536   	; 0x49fa <_exit>

000043fa <memcpy>:
    43fa:	fb 01       	movw	r30, r22
    43fc:	dc 01       	movw	r26, r24
    43fe:	02 c0       	rjmp	.+4      	; 0x4404 <memcpy+0xa>
    4400:	01 90       	ld	r0, Z+
    4402:	0d 92       	st	X+, r0
    4404:	41 50       	subi	r20, 0x01	; 1
    4406:	50 40       	sbci	r21, 0x00	; 0
    4408:	d8 f7       	brcc	.-10     	; 0x4400 <memcpy+0x6>
    440a:	08 95       	ret

0000440c <memset>:
    440c:	dc 01       	movw	r26, r24
    440e:	01 c0       	rjmp	.+2      	; 0x4412 <memset+0x6>
    4410:	6d 93       	st	X+, r22
    4412:	41 50       	subi	r20, 0x01	; 1
    4414:	50 40       	sbci	r21, 0x00	; 0
    4416:	e0 f7       	brcc	.-8      	; 0x4410 <memset+0x4>
    4418:	08 95       	ret

0000441a <printf>:
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	cd b7       	in	r28, 0x3d	; 61
    4420:	de b7       	in	r29, 0x3e	; 62
    4422:	ae 01       	movw	r20, r28
    4424:	4a 5f       	subi	r20, 0xFA	; 250
    4426:	5f 4f       	sbci	r21, 0xFF	; 255
    4428:	fa 01       	movw	r30, r20
    442a:	61 91       	ld	r22, Z+
    442c:	71 91       	ld	r23, Z+
    442e:	af 01       	movw	r20, r30
    4430:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <__iob+0x2>
    4434:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <__iob+0x3>
    4438:	33 d0       	rcall	.+102    	; 0x44a0 <vfprintf>
    443a:	df 91       	pop	r29
    443c:	cf 91       	pop	r28
    443e:	08 95       	ret

00004440 <puts>:
    4440:	0f 93       	push	r16
    4442:	1f 93       	push	r17
    4444:	cf 93       	push	r28
    4446:	df 93       	push	r29
    4448:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <__iob+0x2>
    444c:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <__iob+0x3>
    4450:	23 81       	ldd	r18, Z+3	; 0x03
    4452:	21 ff       	sbrs	r18, 1
    4454:	1b c0       	rjmp	.+54     	; 0x448c <puts+0x4c>
    4456:	8c 01       	movw	r16, r24
    4458:	d0 e0       	ldi	r29, 0x00	; 0
    445a:	c0 e0       	ldi	r28, 0x00	; 0
    445c:	f8 01       	movw	r30, r16
    445e:	81 91       	ld	r24, Z+
    4460:	8f 01       	movw	r16, r30
    4462:	60 91 75 05 	lds	r22, 0x0575	; 0x800575 <__iob+0x2>
    4466:	70 91 76 05 	lds	r23, 0x0576	; 0x800576 <__iob+0x3>
    446a:	db 01       	movw	r26, r22
    446c:	18 96       	adiw	r26, 0x08	; 8
    446e:	ed 91       	ld	r30, X+
    4470:	fc 91       	ld	r31, X
    4472:	19 97       	sbiw	r26, 0x09	; 9
    4474:	88 23       	and	r24, r24
    4476:	31 f0       	breq	.+12     	; 0x4484 <puts+0x44>
    4478:	19 95       	eicall
    447a:	89 2b       	or	r24, r25
    447c:	79 f3       	breq	.-34     	; 0x445c <puts+0x1c>
    447e:	df ef       	ldi	r29, 0xFF	; 255
    4480:	cf ef       	ldi	r28, 0xFF	; 255
    4482:	ec cf       	rjmp	.-40     	; 0x445c <puts+0x1c>
    4484:	8a e0       	ldi	r24, 0x0A	; 10
    4486:	19 95       	eicall
    4488:	89 2b       	or	r24, r25
    448a:	19 f0       	breq	.+6      	; 0x4492 <puts+0x52>
    448c:	8f ef       	ldi	r24, 0xFF	; 255
    448e:	9f ef       	ldi	r25, 0xFF	; 255
    4490:	02 c0       	rjmp	.+4      	; 0x4496 <puts+0x56>
    4492:	8d 2f       	mov	r24, r29
    4494:	9c 2f       	mov	r25, r28
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	1f 91       	pop	r17
    449c:	0f 91       	pop	r16
    449e:	08 95       	ret

000044a0 <vfprintf>:
    44a0:	2f 92       	push	r2
    44a2:	3f 92       	push	r3
    44a4:	4f 92       	push	r4
    44a6:	5f 92       	push	r5
    44a8:	6f 92       	push	r6
    44aa:	7f 92       	push	r7
    44ac:	8f 92       	push	r8
    44ae:	9f 92       	push	r9
    44b0:	af 92       	push	r10
    44b2:	bf 92       	push	r11
    44b4:	cf 92       	push	r12
    44b6:	df 92       	push	r13
    44b8:	ef 92       	push	r14
    44ba:	ff 92       	push	r15
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
    44c8:	2b 97       	sbiw	r28, 0x0b	; 11
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	f8 94       	cli
    44ce:	de bf       	out	0x3e, r29	; 62
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	cd bf       	out	0x3d, r28	; 61
    44d4:	6c 01       	movw	r12, r24
    44d6:	7b 01       	movw	r14, r22
    44d8:	8a 01       	movw	r16, r20
    44da:	fc 01       	movw	r30, r24
    44dc:	17 82       	std	Z+7, r1	; 0x07
    44de:	16 82       	std	Z+6, r1	; 0x06
    44e0:	83 81       	ldd	r24, Z+3	; 0x03
    44e2:	81 ff       	sbrs	r24, 1
    44e4:	bf c1       	rjmp	.+894    	; 0x4864 <vfprintf+0x3c4>
    44e6:	ce 01       	movw	r24, r28
    44e8:	01 96       	adiw	r24, 0x01	; 1
    44ea:	3c 01       	movw	r6, r24
    44ec:	f6 01       	movw	r30, r12
    44ee:	93 81       	ldd	r25, Z+3	; 0x03
    44f0:	f7 01       	movw	r30, r14
    44f2:	93 fd       	sbrc	r25, 3
    44f4:	85 91       	lpm	r24, Z+
    44f6:	93 ff       	sbrs	r25, 3
    44f8:	81 91       	ld	r24, Z+
    44fa:	7f 01       	movw	r14, r30
    44fc:	88 23       	and	r24, r24
    44fe:	09 f4       	brne	.+2      	; 0x4502 <vfprintf+0x62>
    4500:	ad c1       	rjmp	.+858    	; 0x485c <vfprintf+0x3bc>
    4502:	85 32       	cpi	r24, 0x25	; 37
    4504:	39 f4       	brne	.+14     	; 0x4514 <vfprintf+0x74>
    4506:	93 fd       	sbrc	r25, 3
    4508:	85 91       	lpm	r24, Z+
    450a:	93 ff       	sbrs	r25, 3
    450c:	81 91       	ld	r24, Z+
    450e:	7f 01       	movw	r14, r30
    4510:	85 32       	cpi	r24, 0x25	; 37
    4512:	21 f4       	brne	.+8      	; 0x451c <vfprintf+0x7c>
    4514:	b6 01       	movw	r22, r12
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	d6 d1       	rcall	.+940    	; 0x48c6 <fputc>
    451a:	e8 cf       	rjmp	.-48     	; 0x44ec <vfprintf+0x4c>
    451c:	91 2c       	mov	r9, r1
    451e:	21 2c       	mov	r2, r1
    4520:	31 2c       	mov	r3, r1
    4522:	ff e1       	ldi	r31, 0x1F	; 31
    4524:	f3 15       	cp	r31, r3
    4526:	d8 f0       	brcs	.+54     	; 0x455e <vfprintf+0xbe>
    4528:	8b 32       	cpi	r24, 0x2B	; 43
    452a:	79 f0       	breq	.+30     	; 0x454a <vfprintf+0xaa>
    452c:	38 f4       	brcc	.+14     	; 0x453c <vfprintf+0x9c>
    452e:	80 32       	cpi	r24, 0x20	; 32
    4530:	79 f0       	breq	.+30     	; 0x4550 <vfprintf+0xb0>
    4532:	83 32       	cpi	r24, 0x23	; 35
    4534:	a1 f4       	brne	.+40     	; 0x455e <vfprintf+0xbe>
    4536:	23 2d       	mov	r18, r3
    4538:	20 61       	ori	r18, 0x10	; 16
    453a:	1d c0       	rjmp	.+58     	; 0x4576 <vfprintf+0xd6>
    453c:	8d 32       	cpi	r24, 0x2D	; 45
    453e:	61 f0       	breq	.+24     	; 0x4558 <vfprintf+0xb8>
    4540:	80 33       	cpi	r24, 0x30	; 48
    4542:	69 f4       	brne	.+26     	; 0x455e <vfprintf+0xbe>
    4544:	23 2d       	mov	r18, r3
    4546:	21 60       	ori	r18, 0x01	; 1
    4548:	16 c0       	rjmp	.+44     	; 0x4576 <vfprintf+0xd6>
    454a:	83 2d       	mov	r24, r3
    454c:	82 60       	ori	r24, 0x02	; 2
    454e:	38 2e       	mov	r3, r24
    4550:	e3 2d       	mov	r30, r3
    4552:	e4 60       	ori	r30, 0x04	; 4
    4554:	3e 2e       	mov	r3, r30
    4556:	2a c0       	rjmp	.+84     	; 0x45ac <vfprintf+0x10c>
    4558:	f3 2d       	mov	r31, r3
    455a:	f8 60       	ori	r31, 0x08	; 8
    455c:	1d c0       	rjmp	.+58     	; 0x4598 <vfprintf+0xf8>
    455e:	37 fc       	sbrc	r3, 7
    4560:	2d c0       	rjmp	.+90     	; 0x45bc <vfprintf+0x11c>
    4562:	20 ed       	ldi	r18, 0xD0	; 208
    4564:	28 0f       	add	r18, r24
    4566:	2a 30       	cpi	r18, 0x0A	; 10
    4568:	40 f0       	brcs	.+16     	; 0x457a <vfprintf+0xda>
    456a:	8e 32       	cpi	r24, 0x2E	; 46
    456c:	b9 f4       	brne	.+46     	; 0x459c <vfprintf+0xfc>
    456e:	36 fc       	sbrc	r3, 6
    4570:	75 c1       	rjmp	.+746    	; 0x485c <vfprintf+0x3bc>
    4572:	23 2d       	mov	r18, r3
    4574:	20 64       	ori	r18, 0x40	; 64
    4576:	32 2e       	mov	r3, r18
    4578:	19 c0       	rjmp	.+50     	; 0x45ac <vfprintf+0x10c>
    457a:	36 fe       	sbrs	r3, 6
    457c:	06 c0       	rjmp	.+12     	; 0x458a <vfprintf+0xea>
    457e:	8a e0       	ldi	r24, 0x0A	; 10
    4580:	98 9e       	mul	r9, r24
    4582:	20 0d       	add	r18, r0
    4584:	11 24       	eor	r1, r1
    4586:	92 2e       	mov	r9, r18
    4588:	11 c0       	rjmp	.+34     	; 0x45ac <vfprintf+0x10c>
    458a:	ea e0       	ldi	r30, 0x0A	; 10
    458c:	2e 9e       	mul	r2, r30
    458e:	20 0d       	add	r18, r0
    4590:	11 24       	eor	r1, r1
    4592:	22 2e       	mov	r2, r18
    4594:	f3 2d       	mov	r31, r3
    4596:	f0 62       	ori	r31, 0x20	; 32
    4598:	3f 2e       	mov	r3, r31
    459a:	08 c0       	rjmp	.+16     	; 0x45ac <vfprintf+0x10c>
    459c:	8c 36       	cpi	r24, 0x6C	; 108
    459e:	21 f4       	brne	.+8      	; 0x45a8 <vfprintf+0x108>
    45a0:	83 2d       	mov	r24, r3
    45a2:	80 68       	ori	r24, 0x80	; 128
    45a4:	38 2e       	mov	r3, r24
    45a6:	02 c0       	rjmp	.+4      	; 0x45ac <vfprintf+0x10c>
    45a8:	88 36       	cpi	r24, 0x68	; 104
    45aa:	41 f4       	brne	.+16     	; 0x45bc <vfprintf+0x11c>
    45ac:	f7 01       	movw	r30, r14
    45ae:	93 fd       	sbrc	r25, 3
    45b0:	85 91       	lpm	r24, Z+
    45b2:	93 ff       	sbrs	r25, 3
    45b4:	81 91       	ld	r24, Z+
    45b6:	7f 01       	movw	r14, r30
    45b8:	81 11       	cpse	r24, r1
    45ba:	b3 cf       	rjmp	.-154    	; 0x4522 <vfprintf+0x82>
    45bc:	98 2f       	mov	r25, r24
    45be:	9f 7d       	andi	r25, 0xDF	; 223
    45c0:	95 54       	subi	r25, 0x45	; 69
    45c2:	93 30       	cpi	r25, 0x03	; 3
    45c4:	28 f4       	brcc	.+10     	; 0x45d0 <vfprintf+0x130>
    45c6:	0c 5f       	subi	r16, 0xFC	; 252
    45c8:	1f 4f       	sbci	r17, 0xFF	; 255
    45ca:	9f e3       	ldi	r25, 0x3F	; 63
    45cc:	99 83       	std	Y+1, r25	; 0x01
    45ce:	0d c0       	rjmp	.+26     	; 0x45ea <vfprintf+0x14a>
    45d0:	83 36       	cpi	r24, 0x63	; 99
    45d2:	31 f0       	breq	.+12     	; 0x45e0 <vfprintf+0x140>
    45d4:	83 37       	cpi	r24, 0x73	; 115
    45d6:	71 f0       	breq	.+28     	; 0x45f4 <vfprintf+0x154>
    45d8:	83 35       	cpi	r24, 0x53	; 83
    45da:	09 f0       	breq	.+2      	; 0x45de <vfprintf+0x13e>
    45dc:	55 c0       	rjmp	.+170    	; 0x4688 <vfprintf+0x1e8>
    45de:	20 c0       	rjmp	.+64     	; 0x4620 <vfprintf+0x180>
    45e0:	f8 01       	movw	r30, r16
    45e2:	80 81       	ld	r24, Z
    45e4:	89 83       	std	Y+1, r24	; 0x01
    45e6:	0e 5f       	subi	r16, 0xFE	; 254
    45e8:	1f 4f       	sbci	r17, 0xFF	; 255
    45ea:	88 24       	eor	r8, r8
    45ec:	83 94       	inc	r8
    45ee:	91 2c       	mov	r9, r1
    45f0:	53 01       	movw	r10, r6
    45f2:	12 c0       	rjmp	.+36     	; 0x4618 <vfprintf+0x178>
    45f4:	28 01       	movw	r4, r16
    45f6:	f2 e0       	ldi	r31, 0x02	; 2
    45f8:	4f 0e       	add	r4, r31
    45fa:	51 1c       	adc	r5, r1
    45fc:	f8 01       	movw	r30, r16
    45fe:	a0 80       	ld	r10, Z
    4600:	b1 80       	ldd	r11, Z+1	; 0x01
    4602:	36 fe       	sbrs	r3, 6
    4604:	03 c0       	rjmp	.+6      	; 0x460c <vfprintf+0x16c>
    4606:	69 2d       	mov	r22, r9
    4608:	70 e0       	ldi	r23, 0x00	; 0
    460a:	02 c0       	rjmp	.+4      	; 0x4610 <vfprintf+0x170>
    460c:	6f ef       	ldi	r22, 0xFF	; 255
    460e:	7f ef       	ldi	r23, 0xFF	; 255
    4610:	c5 01       	movw	r24, r10
    4612:	4e d1       	rcall	.+668    	; 0x48b0 <strnlen>
    4614:	4c 01       	movw	r8, r24
    4616:	82 01       	movw	r16, r4
    4618:	f3 2d       	mov	r31, r3
    461a:	ff 77       	andi	r31, 0x7F	; 127
    461c:	3f 2e       	mov	r3, r31
    461e:	15 c0       	rjmp	.+42     	; 0x464a <vfprintf+0x1aa>
    4620:	28 01       	movw	r4, r16
    4622:	22 e0       	ldi	r18, 0x02	; 2
    4624:	42 0e       	add	r4, r18
    4626:	51 1c       	adc	r5, r1
    4628:	f8 01       	movw	r30, r16
    462a:	a0 80       	ld	r10, Z
    462c:	b1 80       	ldd	r11, Z+1	; 0x01
    462e:	36 fe       	sbrs	r3, 6
    4630:	03 c0       	rjmp	.+6      	; 0x4638 <vfprintf+0x198>
    4632:	69 2d       	mov	r22, r9
    4634:	70 e0       	ldi	r23, 0x00	; 0
    4636:	02 c0       	rjmp	.+4      	; 0x463c <vfprintf+0x19c>
    4638:	6f ef       	ldi	r22, 0xFF	; 255
    463a:	7f ef       	ldi	r23, 0xFF	; 255
    463c:	c5 01       	movw	r24, r10
    463e:	2d d1       	rcall	.+602    	; 0x489a <strnlen_P>
    4640:	4c 01       	movw	r8, r24
    4642:	f3 2d       	mov	r31, r3
    4644:	f0 68       	ori	r31, 0x80	; 128
    4646:	3f 2e       	mov	r3, r31
    4648:	82 01       	movw	r16, r4
    464a:	33 fc       	sbrc	r3, 3
    464c:	19 c0       	rjmp	.+50     	; 0x4680 <vfprintf+0x1e0>
    464e:	82 2d       	mov	r24, r2
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	88 16       	cp	r8, r24
    4654:	99 06       	cpc	r9, r25
    4656:	a0 f4       	brcc	.+40     	; 0x4680 <vfprintf+0x1e0>
    4658:	b6 01       	movw	r22, r12
    465a:	80 e2       	ldi	r24, 0x20	; 32
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	33 d1       	rcall	.+614    	; 0x48c6 <fputc>
    4660:	2a 94       	dec	r2
    4662:	f5 cf       	rjmp	.-22     	; 0x464e <vfprintf+0x1ae>
    4664:	f5 01       	movw	r30, r10
    4666:	37 fc       	sbrc	r3, 7
    4668:	85 91       	lpm	r24, Z+
    466a:	37 fe       	sbrs	r3, 7
    466c:	81 91       	ld	r24, Z+
    466e:	5f 01       	movw	r10, r30
    4670:	b6 01       	movw	r22, r12
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	28 d1       	rcall	.+592    	; 0x48c6 <fputc>
    4676:	21 10       	cpse	r2, r1
    4678:	2a 94       	dec	r2
    467a:	21 e0       	ldi	r18, 0x01	; 1
    467c:	82 1a       	sub	r8, r18
    467e:	91 08       	sbc	r9, r1
    4680:	81 14       	cp	r8, r1
    4682:	91 04       	cpc	r9, r1
    4684:	79 f7       	brne	.-34     	; 0x4664 <vfprintf+0x1c4>
    4686:	e1 c0       	rjmp	.+450    	; 0x484a <vfprintf+0x3aa>
    4688:	84 36       	cpi	r24, 0x64	; 100
    468a:	11 f0       	breq	.+4      	; 0x4690 <vfprintf+0x1f0>
    468c:	89 36       	cpi	r24, 0x69	; 105
    468e:	39 f5       	brne	.+78     	; 0x46de <vfprintf+0x23e>
    4690:	f8 01       	movw	r30, r16
    4692:	37 fe       	sbrs	r3, 7
    4694:	07 c0       	rjmp	.+14     	; 0x46a4 <vfprintf+0x204>
    4696:	60 81       	ld	r22, Z
    4698:	71 81       	ldd	r23, Z+1	; 0x01
    469a:	82 81       	ldd	r24, Z+2	; 0x02
    469c:	93 81       	ldd	r25, Z+3	; 0x03
    469e:	0c 5f       	subi	r16, 0xFC	; 252
    46a0:	1f 4f       	sbci	r17, 0xFF	; 255
    46a2:	08 c0       	rjmp	.+16     	; 0x46b4 <vfprintf+0x214>
    46a4:	60 81       	ld	r22, Z
    46a6:	71 81       	ldd	r23, Z+1	; 0x01
    46a8:	07 2e       	mov	r0, r23
    46aa:	00 0c       	add	r0, r0
    46ac:	88 0b       	sbc	r24, r24
    46ae:	99 0b       	sbc	r25, r25
    46b0:	0e 5f       	subi	r16, 0xFE	; 254
    46b2:	1f 4f       	sbci	r17, 0xFF	; 255
    46b4:	f3 2d       	mov	r31, r3
    46b6:	ff 76       	andi	r31, 0x6F	; 111
    46b8:	3f 2e       	mov	r3, r31
    46ba:	97 ff       	sbrs	r25, 7
    46bc:	09 c0       	rjmp	.+18     	; 0x46d0 <vfprintf+0x230>
    46be:	90 95       	com	r25
    46c0:	80 95       	com	r24
    46c2:	70 95       	com	r23
    46c4:	61 95       	neg	r22
    46c6:	7f 4f       	sbci	r23, 0xFF	; 255
    46c8:	8f 4f       	sbci	r24, 0xFF	; 255
    46ca:	9f 4f       	sbci	r25, 0xFF	; 255
    46cc:	f0 68       	ori	r31, 0x80	; 128
    46ce:	3f 2e       	mov	r3, r31
    46d0:	2a e0       	ldi	r18, 0x0A	; 10
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	a3 01       	movw	r20, r6
    46d6:	33 d1       	rcall	.+614    	; 0x493e <__ultoa_invert>
    46d8:	88 2e       	mov	r8, r24
    46da:	86 18       	sub	r8, r6
    46dc:	44 c0       	rjmp	.+136    	; 0x4766 <vfprintf+0x2c6>
    46de:	85 37       	cpi	r24, 0x75	; 117
    46e0:	31 f4       	brne	.+12     	; 0x46ee <vfprintf+0x24e>
    46e2:	23 2d       	mov	r18, r3
    46e4:	2f 7e       	andi	r18, 0xEF	; 239
    46e6:	b2 2e       	mov	r11, r18
    46e8:	2a e0       	ldi	r18, 0x0A	; 10
    46ea:	30 e0       	ldi	r19, 0x00	; 0
    46ec:	25 c0       	rjmp	.+74     	; 0x4738 <vfprintf+0x298>
    46ee:	93 2d       	mov	r25, r3
    46f0:	99 7f       	andi	r25, 0xF9	; 249
    46f2:	b9 2e       	mov	r11, r25
    46f4:	8f 36       	cpi	r24, 0x6F	; 111
    46f6:	c1 f0       	breq	.+48     	; 0x4728 <vfprintf+0x288>
    46f8:	18 f4       	brcc	.+6      	; 0x4700 <vfprintf+0x260>
    46fa:	88 35       	cpi	r24, 0x58	; 88
    46fc:	79 f0       	breq	.+30     	; 0x471c <vfprintf+0x27c>
    46fe:	ae c0       	rjmp	.+348    	; 0x485c <vfprintf+0x3bc>
    4700:	80 37       	cpi	r24, 0x70	; 112
    4702:	19 f0       	breq	.+6      	; 0x470a <vfprintf+0x26a>
    4704:	88 37       	cpi	r24, 0x78	; 120
    4706:	21 f0       	breq	.+8      	; 0x4710 <vfprintf+0x270>
    4708:	a9 c0       	rjmp	.+338    	; 0x485c <vfprintf+0x3bc>
    470a:	e9 2f       	mov	r30, r25
    470c:	e0 61       	ori	r30, 0x10	; 16
    470e:	be 2e       	mov	r11, r30
    4710:	b4 fe       	sbrs	r11, 4
    4712:	0d c0       	rjmp	.+26     	; 0x472e <vfprintf+0x28e>
    4714:	fb 2d       	mov	r31, r11
    4716:	f4 60       	ori	r31, 0x04	; 4
    4718:	bf 2e       	mov	r11, r31
    471a:	09 c0       	rjmp	.+18     	; 0x472e <vfprintf+0x28e>
    471c:	34 fe       	sbrs	r3, 4
    471e:	0a c0       	rjmp	.+20     	; 0x4734 <vfprintf+0x294>
    4720:	29 2f       	mov	r18, r25
    4722:	26 60       	ori	r18, 0x06	; 6
    4724:	b2 2e       	mov	r11, r18
    4726:	06 c0       	rjmp	.+12     	; 0x4734 <vfprintf+0x294>
    4728:	28 e0       	ldi	r18, 0x08	; 8
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	05 c0       	rjmp	.+10     	; 0x4738 <vfprintf+0x298>
    472e:	20 e1       	ldi	r18, 0x10	; 16
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	02 c0       	rjmp	.+4      	; 0x4738 <vfprintf+0x298>
    4734:	20 e1       	ldi	r18, 0x10	; 16
    4736:	32 e0       	ldi	r19, 0x02	; 2
    4738:	f8 01       	movw	r30, r16
    473a:	b7 fe       	sbrs	r11, 7
    473c:	07 c0       	rjmp	.+14     	; 0x474c <vfprintf+0x2ac>
    473e:	60 81       	ld	r22, Z
    4740:	71 81       	ldd	r23, Z+1	; 0x01
    4742:	82 81       	ldd	r24, Z+2	; 0x02
    4744:	93 81       	ldd	r25, Z+3	; 0x03
    4746:	0c 5f       	subi	r16, 0xFC	; 252
    4748:	1f 4f       	sbci	r17, 0xFF	; 255
    474a:	06 c0       	rjmp	.+12     	; 0x4758 <vfprintf+0x2b8>
    474c:	60 81       	ld	r22, Z
    474e:	71 81       	ldd	r23, Z+1	; 0x01
    4750:	80 e0       	ldi	r24, 0x00	; 0
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	0e 5f       	subi	r16, 0xFE	; 254
    4756:	1f 4f       	sbci	r17, 0xFF	; 255
    4758:	a3 01       	movw	r20, r6
    475a:	f1 d0       	rcall	.+482    	; 0x493e <__ultoa_invert>
    475c:	88 2e       	mov	r8, r24
    475e:	86 18       	sub	r8, r6
    4760:	fb 2d       	mov	r31, r11
    4762:	ff 77       	andi	r31, 0x7F	; 127
    4764:	3f 2e       	mov	r3, r31
    4766:	36 fe       	sbrs	r3, 6
    4768:	0d c0       	rjmp	.+26     	; 0x4784 <vfprintf+0x2e4>
    476a:	23 2d       	mov	r18, r3
    476c:	2e 7f       	andi	r18, 0xFE	; 254
    476e:	a2 2e       	mov	r10, r18
    4770:	89 14       	cp	r8, r9
    4772:	58 f4       	brcc	.+22     	; 0x478a <vfprintf+0x2ea>
    4774:	34 fe       	sbrs	r3, 4
    4776:	0b c0       	rjmp	.+22     	; 0x478e <vfprintf+0x2ee>
    4778:	32 fc       	sbrc	r3, 2
    477a:	09 c0       	rjmp	.+18     	; 0x478e <vfprintf+0x2ee>
    477c:	83 2d       	mov	r24, r3
    477e:	8e 7e       	andi	r24, 0xEE	; 238
    4780:	a8 2e       	mov	r10, r24
    4782:	05 c0       	rjmp	.+10     	; 0x478e <vfprintf+0x2ee>
    4784:	b8 2c       	mov	r11, r8
    4786:	a3 2c       	mov	r10, r3
    4788:	03 c0       	rjmp	.+6      	; 0x4790 <vfprintf+0x2f0>
    478a:	b8 2c       	mov	r11, r8
    478c:	01 c0       	rjmp	.+2      	; 0x4790 <vfprintf+0x2f0>
    478e:	b9 2c       	mov	r11, r9
    4790:	a4 fe       	sbrs	r10, 4
    4792:	0f c0       	rjmp	.+30     	; 0x47b2 <vfprintf+0x312>
    4794:	fe 01       	movw	r30, r28
    4796:	e8 0d       	add	r30, r8
    4798:	f1 1d       	adc	r31, r1
    479a:	80 81       	ld	r24, Z
    479c:	80 33       	cpi	r24, 0x30	; 48
    479e:	21 f4       	brne	.+8      	; 0x47a8 <vfprintf+0x308>
    47a0:	9a 2d       	mov	r25, r10
    47a2:	99 7e       	andi	r25, 0xE9	; 233
    47a4:	a9 2e       	mov	r10, r25
    47a6:	09 c0       	rjmp	.+18     	; 0x47ba <vfprintf+0x31a>
    47a8:	a2 fe       	sbrs	r10, 2
    47aa:	06 c0       	rjmp	.+12     	; 0x47b8 <vfprintf+0x318>
    47ac:	b3 94       	inc	r11
    47ae:	b3 94       	inc	r11
    47b0:	04 c0       	rjmp	.+8      	; 0x47ba <vfprintf+0x31a>
    47b2:	8a 2d       	mov	r24, r10
    47b4:	86 78       	andi	r24, 0x86	; 134
    47b6:	09 f0       	breq	.+2      	; 0x47ba <vfprintf+0x31a>
    47b8:	b3 94       	inc	r11
    47ba:	a3 fc       	sbrc	r10, 3
    47bc:	10 c0       	rjmp	.+32     	; 0x47de <vfprintf+0x33e>
    47be:	a0 fe       	sbrs	r10, 0
    47c0:	06 c0       	rjmp	.+12     	; 0x47ce <vfprintf+0x32e>
    47c2:	b2 14       	cp	r11, r2
    47c4:	80 f4       	brcc	.+32     	; 0x47e6 <vfprintf+0x346>
    47c6:	28 0c       	add	r2, r8
    47c8:	92 2c       	mov	r9, r2
    47ca:	9b 18       	sub	r9, r11
    47cc:	0d c0       	rjmp	.+26     	; 0x47e8 <vfprintf+0x348>
    47ce:	b2 14       	cp	r11, r2
    47d0:	58 f4       	brcc	.+22     	; 0x47e8 <vfprintf+0x348>
    47d2:	b6 01       	movw	r22, r12
    47d4:	80 e2       	ldi	r24, 0x20	; 32
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	76 d0       	rcall	.+236    	; 0x48c6 <fputc>
    47da:	b3 94       	inc	r11
    47dc:	f8 cf       	rjmp	.-16     	; 0x47ce <vfprintf+0x32e>
    47de:	b2 14       	cp	r11, r2
    47e0:	18 f4       	brcc	.+6      	; 0x47e8 <vfprintf+0x348>
    47e2:	2b 18       	sub	r2, r11
    47e4:	02 c0       	rjmp	.+4      	; 0x47ea <vfprintf+0x34a>
    47e6:	98 2c       	mov	r9, r8
    47e8:	21 2c       	mov	r2, r1
    47ea:	a4 fe       	sbrs	r10, 4
    47ec:	0f c0       	rjmp	.+30     	; 0x480c <vfprintf+0x36c>
    47ee:	b6 01       	movw	r22, r12
    47f0:	80 e3       	ldi	r24, 0x30	; 48
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	68 d0       	rcall	.+208    	; 0x48c6 <fputc>
    47f6:	a2 fe       	sbrs	r10, 2
    47f8:	16 c0       	rjmp	.+44     	; 0x4826 <vfprintf+0x386>
    47fa:	a1 fc       	sbrc	r10, 1
    47fc:	03 c0       	rjmp	.+6      	; 0x4804 <vfprintf+0x364>
    47fe:	88 e7       	ldi	r24, 0x78	; 120
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	02 c0       	rjmp	.+4      	; 0x4808 <vfprintf+0x368>
    4804:	88 e5       	ldi	r24, 0x58	; 88
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	b6 01       	movw	r22, r12
    480a:	0c c0       	rjmp	.+24     	; 0x4824 <vfprintf+0x384>
    480c:	8a 2d       	mov	r24, r10
    480e:	86 78       	andi	r24, 0x86	; 134
    4810:	51 f0       	breq	.+20     	; 0x4826 <vfprintf+0x386>
    4812:	a1 fe       	sbrs	r10, 1
    4814:	02 c0       	rjmp	.+4      	; 0x481a <vfprintf+0x37a>
    4816:	8b e2       	ldi	r24, 0x2B	; 43
    4818:	01 c0       	rjmp	.+2      	; 0x481c <vfprintf+0x37c>
    481a:	80 e2       	ldi	r24, 0x20	; 32
    481c:	a7 fc       	sbrc	r10, 7
    481e:	8d e2       	ldi	r24, 0x2D	; 45
    4820:	b6 01       	movw	r22, r12
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	50 d0       	rcall	.+160    	; 0x48c6 <fputc>
    4826:	89 14       	cp	r8, r9
    4828:	30 f4       	brcc	.+12     	; 0x4836 <vfprintf+0x396>
    482a:	b6 01       	movw	r22, r12
    482c:	80 e3       	ldi	r24, 0x30	; 48
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	4a d0       	rcall	.+148    	; 0x48c6 <fputc>
    4832:	9a 94       	dec	r9
    4834:	f8 cf       	rjmp	.-16     	; 0x4826 <vfprintf+0x386>
    4836:	8a 94       	dec	r8
    4838:	f3 01       	movw	r30, r6
    483a:	e8 0d       	add	r30, r8
    483c:	f1 1d       	adc	r31, r1
    483e:	80 81       	ld	r24, Z
    4840:	b6 01       	movw	r22, r12
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	40 d0       	rcall	.+128    	; 0x48c6 <fputc>
    4846:	81 10       	cpse	r8, r1
    4848:	f6 cf       	rjmp	.-20     	; 0x4836 <vfprintf+0x396>
    484a:	22 20       	and	r2, r2
    484c:	09 f4       	brne	.+2      	; 0x4850 <vfprintf+0x3b0>
    484e:	4e ce       	rjmp	.-868    	; 0x44ec <vfprintf+0x4c>
    4850:	b6 01       	movw	r22, r12
    4852:	80 e2       	ldi	r24, 0x20	; 32
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	37 d0       	rcall	.+110    	; 0x48c6 <fputc>
    4858:	2a 94       	dec	r2
    485a:	f7 cf       	rjmp	.-18     	; 0x484a <vfprintf+0x3aa>
    485c:	f6 01       	movw	r30, r12
    485e:	86 81       	ldd	r24, Z+6	; 0x06
    4860:	97 81       	ldd	r25, Z+7	; 0x07
    4862:	02 c0       	rjmp	.+4      	; 0x4868 <vfprintf+0x3c8>
    4864:	8f ef       	ldi	r24, 0xFF	; 255
    4866:	9f ef       	ldi	r25, 0xFF	; 255
    4868:	2b 96       	adiw	r28, 0x0b	; 11
    486a:	0f b6       	in	r0, 0x3f	; 63
    486c:	f8 94       	cli
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	1f 91       	pop	r17
    487a:	0f 91       	pop	r16
    487c:	ff 90       	pop	r15
    487e:	ef 90       	pop	r14
    4880:	df 90       	pop	r13
    4882:	cf 90       	pop	r12
    4884:	bf 90       	pop	r11
    4886:	af 90       	pop	r10
    4888:	9f 90       	pop	r9
    488a:	8f 90       	pop	r8
    488c:	7f 90       	pop	r7
    488e:	6f 90       	pop	r6
    4890:	5f 90       	pop	r5
    4892:	4f 90       	pop	r4
    4894:	3f 90       	pop	r3
    4896:	2f 90       	pop	r2
    4898:	08 95       	ret

0000489a <strnlen_P>:
    489a:	fc 01       	movw	r30, r24
    489c:	05 90       	lpm	r0, Z+
    489e:	61 50       	subi	r22, 0x01	; 1
    48a0:	70 40       	sbci	r23, 0x00	; 0
    48a2:	01 10       	cpse	r0, r1
    48a4:	d8 f7       	brcc	.-10     	; 0x489c <strnlen_P+0x2>
    48a6:	80 95       	com	r24
    48a8:	90 95       	com	r25
    48aa:	8e 0f       	add	r24, r30
    48ac:	9f 1f       	adc	r25, r31
    48ae:	08 95       	ret

000048b0 <strnlen>:
    48b0:	fc 01       	movw	r30, r24
    48b2:	61 50       	subi	r22, 0x01	; 1
    48b4:	70 40       	sbci	r23, 0x00	; 0
    48b6:	01 90       	ld	r0, Z+
    48b8:	01 10       	cpse	r0, r1
    48ba:	d8 f7       	brcc	.-10     	; 0x48b2 <strnlen+0x2>
    48bc:	80 95       	com	r24
    48be:	90 95       	com	r25
    48c0:	8e 0f       	add	r24, r30
    48c2:	9f 1f       	adc	r25, r31
    48c4:	08 95       	ret

000048c6 <fputc>:
    48c6:	0f 93       	push	r16
    48c8:	1f 93       	push	r17
    48ca:	cf 93       	push	r28
    48cc:	df 93       	push	r29
    48ce:	fb 01       	movw	r30, r22
    48d0:	23 81       	ldd	r18, Z+3	; 0x03
    48d2:	21 fd       	sbrc	r18, 1
    48d4:	03 c0       	rjmp	.+6      	; 0x48dc <fputc+0x16>
    48d6:	8f ef       	ldi	r24, 0xFF	; 255
    48d8:	9f ef       	ldi	r25, 0xFF	; 255
    48da:	2c c0       	rjmp	.+88     	; 0x4934 <fputc+0x6e>
    48dc:	22 ff       	sbrs	r18, 2
    48de:	16 c0       	rjmp	.+44     	; 0x490c <fputc+0x46>
    48e0:	46 81       	ldd	r20, Z+6	; 0x06
    48e2:	57 81       	ldd	r21, Z+7	; 0x07
    48e4:	24 81       	ldd	r18, Z+4	; 0x04
    48e6:	35 81       	ldd	r19, Z+5	; 0x05
    48e8:	42 17       	cp	r20, r18
    48ea:	53 07       	cpc	r21, r19
    48ec:	44 f4       	brge	.+16     	; 0x48fe <fputc+0x38>
    48ee:	a0 81       	ld	r26, Z
    48f0:	b1 81       	ldd	r27, Z+1	; 0x01
    48f2:	9d 01       	movw	r18, r26
    48f4:	2f 5f       	subi	r18, 0xFF	; 255
    48f6:	3f 4f       	sbci	r19, 0xFF	; 255
    48f8:	31 83       	std	Z+1, r19	; 0x01
    48fa:	20 83       	st	Z, r18
    48fc:	8c 93       	st	X, r24
    48fe:	26 81       	ldd	r18, Z+6	; 0x06
    4900:	37 81       	ldd	r19, Z+7	; 0x07
    4902:	2f 5f       	subi	r18, 0xFF	; 255
    4904:	3f 4f       	sbci	r19, 0xFF	; 255
    4906:	37 83       	std	Z+7, r19	; 0x07
    4908:	26 83       	std	Z+6, r18	; 0x06
    490a:	14 c0       	rjmp	.+40     	; 0x4934 <fputc+0x6e>
    490c:	8b 01       	movw	r16, r22
    490e:	ec 01       	movw	r28, r24
    4910:	fb 01       	movw	r30, r22
    4912:	00 84       	ldd	r0, Z+8	; 0x08
    4914:	f1 85       	ldd	r31, Z+9	; 0x09
    4916:	e0 2d       	mov	r30, r0
    4918:	19 95       	eicall
    491a:	89 2b       	or	r24, r25
    491c:	e1 f6       	brne	.-72     	; 0x48d6 <fputc+0x10>
    491e:	d8 01       	movw	r26, r16
    4920:	16 96       	adiw	r26, 0x06	; 6
    4922:	8d 91       	ld	r24, X+
    4924:	9c 91       	ld	r25, X
    4926:	17 97       	sbiw	r26, 0x07	; 7
    4928:	01 96       	adiw	r24, 0x01	; 1
    492a:	17 96       	adiw	r26, 0x07	; 7
    492c:	9c 93       	st	X, r25
    492e:	8e 93       	st	-X, r24
    4930:	16 97       	sbiw	r26, 0x06	; 6
    4932:	ce 01       	movw	r24, r28
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	1f 91       	pop	r17
    493a:	0f 91       	pop	r16
    493c:	08 95       	ret

0000493e <__ultoa_invert>:
    493e:	fa 01       	movw	r30, r20
    4940:	aa 27       	eor	r26, r26
    4942:	28 30       	cpi	r18, 0x08	; 8
    4944:	51 f1       	breq	.+84     	; 0x499a <__ultoa_invert+0x5c>
    4946:	20 31       	cpi	r18, 0x10	; 16
    4948:	81 f1       	breq	.+96     	; 0x49aa <__ultoa_invert+0x6c>
    494a:	e8 94       	clt
    494c:	6f 93       	push	r22
    494e:	6e 7f       	andi	r22, 0xFE	; 254
    4950:	6e 5f       	subi	r22, 0xFE	; 254
    4952:	7f 4f       	sbci	r23, 0xFF	; 255
    4954:	8f 4f       	sbci	r24, 0xFF	; 255
    4956:	9f 4f       	sbci	r25, 0xFF	; 255
    4958:	af 4f       	sbci	r26, 0xFF	; 255
    495a:	b1 e0       	ldi	r27, 0x01	; 1
    495c:	3e d0       	rcall	.+124    	; 0x49da <__ultoa_invert+0x9c>
    495e:	b4 e0       	ldi	r27, 0x04	; 4
    4960:	3c d0       	rcall	.+120    	; 0x49da <__ultoa_invert+0x9c>
    4962:	67 0f       	add	r22, r23
    4964:	78 1f       	adc	r23, r24
    4966:	89 1f       	adc	r24, r25
    4968:	9a 1f       	adc	r25, r26
    496a:	a1 1d       	adc	r26, r1
    496c:	68 0f       	add	r22, r24
    496e:	79 1f       	adc	r23, r25
    4970:	8a 1f       	adc	r24, r26
    4972:	91 1d       	adc	r25, r1
    4974:	a1 1d       	adc	r26, r1
    4976:	6a 0f       	add	r22, r26
    4978:	71 1d       	adc	r23, r1
    497a:	81 1d       	adc	r24, r1
    497c:	91 1d       	adc	r25, r1
    497e:	a1 1d       	adc	r26, r1
    4980:	20 d0       	rcall	.+64     	; 0x49c2 <__ultoa_invert+0x84>
    4982:	09 f4       	brne	.+2      	; 0x4986 <__ultoa_invert+0x48>
    4984:	68 94       	set
    4986:	3f 91       	pop	r19
    4988:	2a e0       	ldi	r18, 0x0A	; 10
    498a:	26 9f       	mul	r18, r22
    498c:	11 24       	eor	r1, r1
    498e:	30 19       	sub	r19, r0
    4990:	30 5d       	subi	r19, 0xD0	; 208
    4992:	31 93       	st	Z+, r19
    4994:	de f6       	brtc	.-74     	; 0x494c <__ultoa_invert+0xe>
    4996:	cf 01       	movw	r24, r30
    4998:	08 95       	ret
    499a:	46 2f       	mov	r20, r22
    499c:	47 70       	andi	r20, 0x07	; 7
    499e:	40 5d       	subi	r20, 0xD0	; 208
    49a0:	41 93       	st	Z+, r20
    49a2:	b3 e0       	ldi	r27, 0x03	; 3
    49a4:	0f d0       	rcall	.+30     	; 0x49c4 <__ultoa_invert+0x86>
    49a6:	c9 f7       	brne	.-14     	; 0x499a <__ultoa_invert+0x5c>
    49a8:	f6 cf       	rjmp	.-20     	; 0x4996 <__ultoa_invert+0x58>
    49aa:	46 2f       	mov	r20, r22
    49ac:	4f 70       	andi	r20, 0x0F	; 15
    49ae:	40 5d       	subi	r20, 0xD0	; 208
    49b0:	4a 33       	cpi	r20, 0x3A	; 58
    49b2:	18 f0       	brcs	.+6      	; 0x49ba <__ultoa_invert+0x7c>
    49b4:	49 5d       	subi	r20, 0xD9	; 217
    49b6:	31 fd       	sbrc	r19, 1
    49b8:	40 52       	subi	r20, 0x20	; 32
    49ba:	41 93       	st	Z+, r20
    49bc:	02 d0       	rcall	.+4      	; 0x49c2 <__ultoa_invert+0x84>
    49be:	a9 f7       	brne	.-22     	; 0x49aa <__ultoa_invert+0x6c>
    49c0:	ea cf       	rjmp	.-44     	; 0x4996 <__ultoa_invert+0x58>
    49c2:	b4 e0       	ldi	r27, 0x04	; 4
    49c4:	a6 95       	lsr	r26
    49c6:	97 95       	ror	r25
    49c8:	87 95       	ror	r24
    49ca:	77 95       	ror	r23
    49cc:	67 95       	ror	r22
    49ce:	ba 95       	dec	r27
    49d0:	c9 f7       	brne	.-14     	; 0x49c4 <__ultoa_invert+0x86>
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	61 05       	cpc	r22, r1
    49d6:	71 05       	cpc	r23, r1
    49d8:	08 95       	ret
    49da:	9b 01       	movw	r18, r22
    49dc:	ac 01       	movw	r20, r24
    49de:	0a 2e       	mov	r0, r26
    49e0:	06 94       	lsr	r0
    49e2:	57 95       	ror	r21
    49e4:	47 95       	ror	r20
    49e6:	37 95       	ror	r19
    49e8:	27 95       	ror	r18
    49ea:	ba 95       	dec	r27
    49ec:	c9 f7       	brne	.-14     	; 0x49e0 <__ultoa_invert+0xa2>
    49ee:	62 0f       	add	r22, r18
    49f0:	73 1f       	adc	r23, r19
    49f2:	84 1f       	adc	r24, r20
    49f4:	95 1f       	adc	r25, r21
    49f6:	a0 1d       	adc	r26, r0
    49f8:	08 95       	ret

000049fa <_exit>:
    49fa:	f8 94       	cli

000049fc <__stop_program>:
    49fc:	ff cf       	rjmp	.-2      	; 0x49fc <__stop_program>
